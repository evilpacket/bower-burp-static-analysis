{
    "url": "http://localhost:9999/balderdashy/mast/dist/mast.withDependencies.dev.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Open redirection (DOM-based)",
    "issueType": 5243152,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based open redirection vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain with a valid SSL certificate (if SSL is used) lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.<br><br><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.",
    "issueDetail": "The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.href</b> and written to <b>location.replace()</b> via the following statements:<ul><li>var href = location.href.replace(/(javascript:|#).*$/, '');</li><li>location.replace(href + '#' + fragment);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/balderdashy/mast/dist/mast.withDependencies.dev.js",
                "path": "/balderdashy/mast/dist/mast.withDependencies.dev.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9iYWxkZXJkYXNoeS9tYXN0L2Rpc3QvbWFzdC53aXRoRGVwZW5kZW5jaWVzLmRldi5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyohIGpRdWVyeSB2MS4xMC4yIHwgKGMpIDIwMDUsIDIwMTMgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gfCBqcXVlcnkub3JnL2xpY2Vuc2UKLy9AIHNvdXJjZU1hcHBpbmdVUkw9anF1ZXJ5LTEuMTAuMi5taW4ubWFwCiovCihmdW5jdGlvbihlLHQpe3ZhciBuLHIsaT10eXBlb2YgdCxvPWUubG9jYXRpb24sYT1lLmRvY3VtZW50LHM9YS5kb2N1bWVudEVsZW1lbnQsbD1lLmpRdWVyeSx1PWUuJCxjPXt9LHA9W10sZj0iMS4xMC4yIixkPXAuY29uY2F0LGg9cC5wdXNoLGc9cC5zbGljZSxtPXAuaW5kZXhPZix5PWMudG9TdHJpbmcsdj1jLmhhc093blByb3BlcnR5LGI9Zi50cmltLHg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IHguZm4uaW5pdChlLHQscil9LHc9L1srLV0/KD86XGQqXC58KVxkKyg/OltlRV1bKy1dP1xkK3wpLy5zb3VyY2UsVD0vXFMrL2csQz0vXltcc1x1RkVGRlx4QTBdK3xbXHNcdUZFRkZceEEwXSskL2csTj0vXig/OlxzKig8W1x3XFddKz4pW14+XSp8IyhbXHctXSopKSQvLGs9L148KFx3KylccypcLz8+KD86PFwvXDE+fCkkLyxFPS9eW1xdLDp7fVxzXSokLyxTPS8oPzpefDp8LCkoPzpccypcWykrL2csQT0vXFwoPzpbIlxcXC9iZm5ydF18dVtcZGEtZkEtRl17NH0pL2csaj0vIlteIlxcXHJcbl0qInx0cnVlfGZhbHNlfG51bGx8LT8oPzpcZCtcLnwpXGQrKD86W2VFXVsrLV0/XGQrfCkvZyxEPS9eLW1zLS8sTD0vLShbXGRhLXpdKS9naSxIPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX0scT1mdW5jdGlvbihlKXsoYS5hZGRFdmVudExpc3RlbmVyfHwibG9hZCI9PT1lLnR5cGV8fCJjb21wbGV0ZSI9PT1hLnJlYWR5U3RhdGUpJiYoXygpLHgucmVhZHkoKSl9LF89ZnVuY3Rpb24oKXthLmFkZEV2ZW50TGlzdGVuZXI/KGEucmVtb3ZlRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIscSwhMSksZS5yZW1vdmVFdmVudExpc3RlbmVyKCJsb2FkIixxLCExKSk6KGEuZGV0YWNoRXZlbnQoIm9ucmVhZHlzdGF0ZWNoYW5nZSIscSksZS5kZXRhY2hFdmVudCgib25sb2FkIixxKSl9O3guZm49eC5wcm90b3R5cGU9e2pxdWVyeTpmLGNvbnN0cnVjdG9yOngsaW5pdDpmdW5jdGlvbihlLG4scil7dmFyIGksbztpZighZSlyZXR1cm4gdGhpcztpZigic3RyaW5nIj09dHlwZW9mIGUpe2lmKGk9IjwiPT09ZS5jaGFyQXQoMCkmJiI+Ij09PWUuY2hhckF0KGUubGVuZ3RoLTEpJiZlLmxlbmd0aD49Mz9bbnVsbCxlLG51bGxdOk4uZXhlYyhlKSwhaXx8IWlbMV0mJm4pcmV0dXJuIW58fG4uanF1ZXJ5PyhufHxyKS5maW5kKGUpOnRoaXMuY29uc3RydWN0b3IobikuZmluZChlKTtpZihpWzFdKXtpZihuPW4gaW5zdGFuY2VvZiB4P25bMF06bix4Lm1lcmdlKHRoaXMseC5wYXJzZUhUTUwoaVsxXSxuJiZuLm5vZGVUeXBlP24ub3duZXJEb2N1bWVudHx8bjphLCEwKSksay50ZXN0KGlbMV0pJiZ4LmlzUGxhaW5PYmplY3QobikpZm9yKGkgaW4gbil4LmlzRnVuY3Rpb24odGhpc1tpXSk/dGhpc1tpXShuW2ldKTp0aGlzLmF0dHIoaSxuW2ldKTtyZXR1cm4gdGhpc31pZihvPWEuZ2V0RWxlbWVudEJ5SWQoaVsyXSksbyYmby5wYXJlbnROb2RlKXtpZihvLmlkIT09aVsyXSlyZXR1cm4gci5maW5kKGUpO3RoaXMubGVuZ3RoPTEsdGhpc1swXT1vfXJldHVybiB0aGlzLmNvbnRleHQ9YSx0aGlzLnNlbGVjdG9yPWUsdGhpc31yZXR1cm4gZS5ub2RlVHlwZT8odGhpcy5jb250ZXh0PXRoaXNbMF09ZSx0aGlzLmxlbmd0aD0xLHRoaXMpOnguaXNGdW5jdGlvbihlKT9yLnJlYWR5KGUpOihlLnNlbGVjdG9yIT09dCYmKHRoaXMuc2VsZWN0b3I9ZS5zZWxlY3Rvcix0aGlzLmNvbnRleHQ9ZS5jb250ZXh0KSx4Lm1ha2VBcnJheShlLHRoaXMpKX0sc2VsZWN0b3I6IiIsbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBnLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT90aGlzLnRvQXJyYXkoKTowPmU/dGhpc1t0aGlzLmxlbmd0aCtlXTp0aGlzW2VdfSxwdXNoU3RhY2s6ZnVuY3Rpb24oZSl7dmFyIHQ9eC5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksZSk7cmV0dXJuIHQucHJldk9iamVjdD10aGlzLHQuY29udGV4dD10aGlzLmNvbnRleHQsdH0sZWFjaDpmdW5jdGlvbihlLHQpe3JldHVybiB4LmVhY2godGhpcyxlLHQpfSxyZWFkeTpmdW5jdGlvbihlKXtyZXR1cm4geC5yZWFkeS5wcm9taXNlKCkuZG9uZShlKSx0aGlzfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhnLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LGZpcnN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoMCl9LGxhc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgtMSl9LGVxOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGVuZ3RoLG49K2UrKDA+ZT90OjApO3JldHVybiB0aGlzLnB1c2hTdGFjayhuPj0wJiZ0Pm4/W3RoaXNbbl1dOltdKX0sbWFwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayh4Lm1hcCh0aGlzLGZ1bmN0aW9uKHQsbil7cmV0dXJuIGUuY2FsbCh0LG4sdCl9KSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IobnVsbCl9LHB1c2g6aCxzb3J0OltdLnNvcnQsc3BsaWNlOltdLnNwbGljZX0seC5mbi5pbml0LnByb3RvdHlwZT14LmZuLHguZXh0ZW5kPXguZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsbixyLGksbyxhLHM9YXJndW1lbnRzWzBdfHx7fSxsPTEsdT1hcmd1bWVudHMubGVuZ3RoLGM9ITE7Zm9yKCJib29sZWFuIj09dHlwZW9mIHMmJihjPXMscz1hcmd1bWVudHNbMV18fHt9LGw9MiksIm9iamVjdCI9PXR5cGVvZiBzfHx4LmlzRnVuY3Rpb24ocyl8fChzPXt9KSx1PT09bCYmKHM9dGhpcywtLWwpO3U+bDtsKyspaWYobnVsbCE9KG89YXJndW1lbnRzW2xdKSlmb3IoaSBpbiBvKWU9c1tpXSxyPW9baV0scyE9PXImJihjJiZyJiYoeC5pc1BsYWluT2JqZWN0KHIpfHwobj14LmlzQXJyYXkocikpKT8obj8obj0hMSxhPWUmJnguaXNBcnJheShlKT9lOltdKTphPWUmJnguaXNQbGFpbk9iamVjdChlKT9lOnt9LHNbaV09eC5leHRlbmQoYyxhLHIpKTpyIT09dCYmKHNbaV09cikpO3JldHVybiBzfSx4LmV4dGVuZCh7ZXhwYW5kbzoialF1ZXJ5IisoZitNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cRC9nLCIiKSxub0NvbmZsaWN0OmZ1bmN0aW9uKHQpe3JldHVybiBlLiQ9PT14JiYoZS4kPXUpLHQmJmUualF1ZXJ5PT09eCYmKGUualF1ZXJ5PWwpLHh9LGlzUmVhZHk6ITEscmVhZHlXYWl0OjEsaG9sZFJlYWR5OmZ1bmN0aW9uKGUpe2U/eC5yZWFkeVdhaXQrKzp4LnJlYWR5KCEwKX0scmVhZHk6ZnVuY3Rpb24oZSl7aWYoZT09PSEwPyEtLXgucmVhZHlXYWl0OiF4LmlzUmVhZHkpe2lmKCFhLmJvZHkpcmV0dXJuIHNldFRpbWVvdXQoeC5yZWFkeSk7eC5pc1JlYWR5PSEwLGUhPT0hMCYmLS14LnJlYWR5V2FpdD4wfHwobi5yZXNvbHZlV2l0aChhLFt4XSkseC5mbi50cmlnZ2VyJiZ4KGEpLnRyaWdnZXIoInJlYWR5Iikub2ZmKCJyZWFkeSIpKX19LGlzRnVuY3Rpb246ZnVuY3Rpb24oZSl7cmV0dXJuImZ1bmN0aW9uIj09PXgudHlwZShlKX0saXNBcnJheTpBcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm4iYXJyYXkiPT09eC50eXBlKGUpfSxpc1dpbmRvdzpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmZT09ZS53aW5kb3d9LGlzTnVtZXJpYzpmdW5jdGlvbihlKXtyZXR1cm4haXNOYU4ocGFyc2VGbG9hdChlKSkmJmlzRmluaXRlKGUpfSx0eXBlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP2UrIiI6Im9iamVjdCI9PXR5cGVvZiBlfHwiZnVuY3Rpb24iPT10eXBlb2YgZT9jW3kuY2FsbChlKV18fCJvYmplY3QiOnR5cGVvZiBlfSxpc1BsYWluT2JqZWN0OmZ1bmN0aW9uKGUpe3ZhciBuO2lmKCFlfHwib2JqZWN0IiE9PXgudHlwZShlKXx8ZS5ub2RlVHlwZXx8eC5pc1dpbmRvdyhlKSlyZXR1cm4hMTt0cnl7aWYoZS5jb25zdHJ1Y3RvciYmIXYuY2FsbChlLCJjb25zdHJ1Y3RvciIpJiYhdi5jYWxsKGUuY29uc3RydWN0b3IucHJvdG90eXBlLCJpc1Byb3RvdHlwZU9mIikpcmV0dXJuITF9Y2F0Y2gocil7cmV0dXJuITF9aWYoeC5zdXBwb3J0Lm93bkxhc3QpZm9yKG4gaW4gZSlyZXR1cm4gdi5jYWxsKGUsbik7Zm9yKG4gaW4gZSk7cmV0dXJuIG49PT10fHx2LmNhbGwoZSxuKX0saXNFbXB0eU9iamVjdDpmdW5jdGlvbihlKXt2YXIgdDtmb3IodCBpbiBlKXJldHVybiExO3JldHVybiEwfSxlcnJvcjpmdW5jdGlvbihlKXt0aHJvdyBFcnJvcihlKX0scGFyc2VIVE1MOmZ1bmN0aW9uKGUsdCxuKXtpZighZXx8InN0cmluZyIhPXR5cGVvZiBlKXJldHVybiBudWxsOyJib29sZWFuIj09dHlwZW9mIHQmJihuPXQsdD0hMSksdD10fHxhO3ZhciByPWsuZXhlYyhlKSxpPSFuJiZbXTtyZXR1cm4gcj9bdC5jcmVhdGVFbGVtZW50KHJbMV0pXToocj14LmJ1aWxkRnJhZ21lbnQoW2VdLHQsaSksaSYmeChpKS5yZW1vdmUoKSx4Lm1lcmdlKFtdLHIuY2hpbGROb2RlcykpfSxwYXJzZUpTT046ZnVuY3Rpb24obil7cmV0dXJuIGUuSlNPTiYmZS5KU09OLnBhcnNlP2UuSlNPTi5wYXJzZShuKTpudWxsPT09bj9uOiJzdHJpbmciPT10eXBlb2YgbiYmKG49eC50cmltKG4pLG4mJkUudGVzdChuLnJlcGxhY2UoQSwiQCIpLnJlcGxhY2UoaiwiXSIpLnJlcGxhY2UoUywiIikpKT9GdW5jdGlvbigicmV0dXJuICIrbikoKTooeC5lcnJvcigiSW52YWxpZCBKU09OOiAiK24pLHQpfSxwYXJzZVhNTDpmdW5jdGlvbihuKXt2YXIgcixpO2lmKCFufHwic3RyaW5nIiE9dHlwZW9mIG4pcmV0dXJuIG51bGw7dHJ5e2UuRE9NUGFyc2VyPyhpPW5ldyBET01QYXJzZXIscj1pLnBhcnNlRnJvbVN0cmluZyhuLCJ0ZXh0L3htbCIpKToocj1uZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTERPTSIpLHIuYXN5bmM9ImZhbHNlIixyLmxvYWRYTUwobikpfWNhdGNoKG8pe3I9dH1yZXR1cm4gciYmci5kb2N1bWVudEVsZW1lbnQmJiFyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJwYXJzZXJlcnJvciIpLmxlbmd0aHx8eC5lcnJvcigiSW52YWxpZCBYTUw6ICIrbikscn0sbm9vcDpmdW5jdGlvbigpe30sZ2xvYmFsRXZhbDpmdW5jdGlvbih0KXt0JiZ4LnRyaW0odCkmJihlLmV4ZWNTY3JpcHR8fGZ1bmN0aW9uKHQpe2UuZXZhbC5jYWxsKGUsdCl9KSh0KX0sY2FtZWxDYXNlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoRCwibXMtIikucmVwbGFjZShMLEgpfSxub2RlTmFtZTpmdW5jdGlvbihlLHQpe3JldHVybiBlLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT10LnRvTG93ZXJDYXNlKCl9LGVhY2g6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9MCxvPWUubGVuZ3RoLGE9TShlKTtpZihuKXtpZihhKXtmb3IoO28+aTtpKyspaWYocj10LmFwcGx5KGVbaV0sbikscj09PSExKWJyZWFrfWVsc2UgZm9yKGkgaW4gZSlpZihyPXQuYXBwbHkoZVtpXSxuKSxyPT09ITEpYnJlYWt9ZWxzZSBpZihhKXtmb3IoO28+aTtpKyspaWYocj10LmNhbGwoZVtpXSxpLGVbaV0pLHI9PT0hMSlicmVha31lbHNlIGZvcihpIGluIGUpaWYocj10LmNhbGwoZVtpXSxpLGVbaV0pLHI9PT0hMSlicmVhaztyZXR1cm4gZX0sdHJpbTpiJiYhYi5jYWxsKCJcdWZlZmZcdTAwYTAiKT9mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT8iIjpiLmNhbGwoZSl9OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lPyIiOihlKyIiKS5yZXBsYWNlKEMsIiIpfSxtYWtlQXJyYXk6ZnVuY3Rpb24oZSx0KXt2YXIgbj10fHxbXTtyZXR1cm4gbnVsbCE9ZSYmKE0oT2JqZWN0KGUpKT94Lm1lcmdlKG4sInN0cmluZyI9PXR5cGVvZiBlP1tlXTplKTpoLmNhbGwobixlKSksbn0saW5BcnJheTpmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYodCl7aWYobSlyZXR1cm4gbS5jYWxsKHQsZSxuKTtmb3Iocj10Lmxlbmd0aCxuPW4/MD5uP01hdGgubWF4KDAscituKTpuOjA7cj5uO24rKylpZihuIGluIHQmJnRbbl09PT1lKXJldHVybiBufXJldHVybi0xfSxtZXJnZTpmdW5jdGlvbihlLG4pe3ZhciByPW4ubGVuZ3RoLGk9ZS5sZW5ndGgsbz0wO2lmKCJudW1iZXIiPT10eXBlb2Ygcilmb3IoO3I+bztvKyspZVtpKytdPW5bb107ZWxzZSB3aGlsZShuW29dIT09dCllW2krK109bltvKytdO3JldHVybiBlLmxlbmd0aD1pLGV9LGdyZXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9W10sbz0wLGE9ZS5sZW5ndGg7Zm9yKG49ISFuO2E+bztvKyspcj0hIXQoZVtvXSxvKSxuIT09ciYmaS5wdXNoKGVbb10pO3JldHVybiBpfSxtYXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9MCxvPWUubGVuZ3RoLGE9TShlKSxzPVtdO2lmKGEpZm9yKDtvPmk7aSsrKXI9dChlW2ldLGksbiksbnVsbCE9ciYmKHNbcy5sZW5ndGhdPXIpO2Vsc2UgZm9yKGkgaW4gZSlyPXQoZVtpXSxpLG4pLG51bGwhPXImJihzW3MubGVuZ3RoXT1yKTtyZXR1cm4gZC5hcHBseShbXSxzKX0sZ3VpZDoxLHByb3h5OmZ1bmN0aW9uKGUsbil7dmFyIHIsaSxvO3JldHVybiJzdHJpbmciPT10eXBlb2YgbiYmKG89ZVtuXSxuPWUsZT1vKSx4LmlzRnVuY3Rpb24oZSk/KHI9Zy5jYWxsKGFyZ3VtZW50cywyKSxpPWZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkobnx8dGhpcyxyLmNvbmNhdChnLmNhbGwoYXJndW1lbnRzKSkpfSxpLmd1aWQ9ZS5ndWlkPWUuZ3VpZHx8eC5ndWlkKyssaSk6dH0sYWNjZXNzOmZ1bmN0aW9uKGUsbixyLGksbyxhLHMpe3ZhciBsPTAsdT1lLmxlbmd0aCxjPW51bGw9PXI7aWYoIm9iamVjdCI9PT14LnR5cGUocikpe289ITA7Zm9yKGwgaW4gcil4LmFjY2VzcyhlLG4sbCxyW2xdLCEwLGEscyl9ZWxzZSBpZihpIT09dCYmKG89ITAseC5pc0Z1bmN0aW9uKGkpfHwocz0hMCksYyYmKHM/KG4uY2FsbChlLGkpLG49bnVsbCk6KGM9bixuPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gYy5jYWxsKHgoZSksbil9KSksbikpZm9yKDt1Pmw7bCsrKW4oZVtsXSxyLHM/aTppLmNhbGwoZVtsXSxsLG4oZVtsXSxyKSkpO3JldHVybiBvP2U6Yz9uLmNhbGwoZSk6dT9uKGVbMF0scik6YX0sbm93OmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9LHN3YXA6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhPXt9O2ZvcihvIGluIHQpYVtvXT1lLnN0eWxlW29dLGUuc3R5bGVbb109dFtvXTtpPW4uYXBwbHkoZSxyfHxbXSk7Zm9yKG8gaW4gdCllLnN0eWxlW29dPWFbb107cmV0dXJuIGl9fSkseC5yZWFkeS5wcm9taXNlPWZ1bmN0aW9uKHQpe2lmKCFuKWlmKG49eC5EZWZlcnJlZCgpLCJjb21wbGV0ZSI9PT1hLnJlYWR5U3RhdGUpc2V0VGltZW91dCh4LnJlYWR5KTtlbHNlIGlmKGEuYWRkRXZlbnRMaXN0ZW5lcilhLmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLHEsITEpLGUuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIscSwhMSk7ZWxzZXthLmF0dGFjaEV2ZW50KCJvbnJlYWR5c3RhdGVjaGFuZ2UiLHEpLGUuYXR0YWNoRXZlbnQoIm9ubG9hZCIscSk7dmFyIHI9ITE7dHJ5e3I9bnVsbD09ZS5mcmFtZUVsZW1lbnQmJmEuZG9jdW1lbnRFbGVtZW50fWNhdGNoKGkpe31yJiZyLmRvU2Nyb2xsJiZmdW5jdGlvbiBvKCl7aWYoIXguaXNSZWFkeSl7dHJ5e3IuZG9TY3JvbGwoImxlZnQiKX1jYXRjaChlKXtyZXR1cm4gc2V0VGltZW91dChvLDUwKX1fKCkseC5yZWFkeSgpfX0oKX1yZXR1cm4gbi5wcm9taXNlKHQpfSx4LmVhY2goIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IiLnNwbGl0KCIgIiksZnVuY3Rpb24oZSx0KXtjWyJbb2JqZWN0ICIrdCsiXSJdPXQudG9Mb3dlckNhc2UoKX0pO2Z1bmN0aW9uIE0oZSl7dmFyIHQ9ZS5sZW5ndGgsbj14LnR5cGUoZSk7cmV0dXJuIHguaXNXaW5kb3coZSk/ITE6MT09PWUubm9kZVR5cGUmJnQ/ITA6ImFycmF5Ij09PW58fCJmdW5jdGlvbiIhPT1uJiYoMD09PXR8fCJudW1iZXIiPT10eXBlb2YgdCYmdD4wJiZ0LTEgaW4gZSl9cj14KGEpLGZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYSxzLGwsdSxjLHAsZixkLGgsZyxtLHksdixiPSJzaXp6bGUiKy1uZXcgRGF0ZSx3PWUuZG9jdW1lbnQsVD0wLEM9MCxOPXN0KCksaz1zdCgpLEU9c3QoKSxTPSExLEE9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXQ/KFM9ITAsMCk6MH0saj10eXBlb2YgdCxEPTE8PDMxLEw9e30uaGFzT3duUHJvcGVydHksSD1bXSxxPUgucG9wLF89SC5wdXNoLE09SC5wdXNoLE89SC5zbGljZSxGPUguaW5kZXhPZnx8ZnVuY3Rpb24oZSl7dmFyIHQ9MCxuPXRoaXMubGVuZ3RoO2Zvcig7bj50O3QrKylpZih0aGlzW3RdPT09ZSlyZXR1cm4gdDtyZXR1cm4tMX0sQj0iY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWQiLFA9IltcXHgyMFxcdFxcclxcblxcZl0iLFI9Iig/OlxcXFwufFtcXHctXXxbXlxceDAwLVxceGEwXSkrIixXPVIucmVwbGFjZSgidyIsIncjIiksJD0iXFxbIitQKyIqKCIrUisiKSIrUCsiKig/OihbKl4kfCF+XT89KSIrUCsiKig/OihbJ1wiXSkoKD86XFxcXC58W15cXFxcXSkqPylcXDN8KCIrVysiKXwpfCkiK1ArIipcXF0iLEk9IjooIitSKyIpKD86XFwoKChbJ1wiXSkoKD86XFxcXC58W15cXFxcXSkqPylcXDN8KCg/OlxcXFwufFteXFxcXCgpW1xcXV18IiskLnJlcGxhY2UoMyw4KSsiKSopfC4qKVxcKXwpIix6PVJlZ0V4cCgiXiIrUCsiK3woKD86XnxbXlxcXFxdKSg/OlxcXFwuKSopIitQKyIrJCIsImciKSxYPVJlZ0V4cCgiXiIrUCsiKiwiK1ArIioiKSxVPVJlZ0V4cCgiXiIrUCsiKihbPit+XXwiK1ArIikiK1ArIioiKSxWPVJlZ0V4cChQKyIqWyt+XSIpLFk9UmVnRXhwKCI9IitQKyIqKFteXFxdJ1wiXSopIitQKyIqXFxdIiwiZyIpLEo9UmVnRXhwKEkpLEc9UmVnRXhwKCJeIitXKyIkIiksUT17SUQ6UmVnRXhwKCJeIygiK1IrIikiKSxDTEFTUzpSZWdFeHAoIl5cXC4oIitSKyIpIiksVEFHOlJlZ0V4cCgiXigiK1IucmVwbGFjZSgidyIsIncqIikrIikiKSxBVFRSOlJlZ0V4cCgiXiIrJCksUFNFVURPOlJlZ0V4cCgiXiIrSSksQ0hJTEQ6UmVnRXhwKCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXCgiK1ArIiooZXZlbnxvZGR8KChbKy1dfCkoXFxkKilufCkiK1ArIiooPzooWystXXwpIitQKyIqKFxcZCspfCkpIitQKyIqXFwpfCkiLCJpIiksYm9vbDpSZWdFeHAoIl4oPzoiK0IrIikkIiwiaSIpLG5lZWRzQ29udGV4dDpSZWdFeHAoIl4iK1ArIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcKCIrUCsiKigoPzotXFxkKT9cXGQqKSIrUCsiKlxcKXwpKD89W14tXXwkKSIsImkiKX0sSz0vXltee10rXHtccypcW25hdGl2ZSBcdy8sWj0vXig/OiMoW1x3LV0rKXwoXHcrKXxcLihbXHctXSspKSQvLGV0PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksdHQ9L15oXGQkL2ksbnQ9Lyd8XFwvZyxydD1SZWdFeHAoIlxcXFwoW1xcZGEtZl17MSw2fSIrUCsiP3woIitQKyIpfC4pIiwiaWciKSxpdD1mdW5jdGlvbihlLHQsbil7dmFyIHI9IjB4Iit0LTY1NTM2O3JldHVybiByIT09cnx8bj90OjA+cj9TdHJpbmcuZnJvbUNoYXJDb2RlKHIrNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8cj4+MTAsNTYzMjB8MTAyMyZyKX07dHJ5e00uYXBwbHkoSD1PLmNhbGwody5jaGlsZE5vZGVzKSx3LmNoaWxkTm9kZXMpLEhbdy5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGV9Y2F0Y2gob3Qpe009e2FwcGx5OkgubGVuZ3RoP2Z1bmN0aW9uKGUsdCl7Xy5hcHBseShlLE8uY2FsbCh0KSl9OmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5sZW5ndGgscj0wO3doaWxlKGVbbisrXT10W3IrK10pO2UubGVuZ3RoPW4tMX19fWZ1bmN0aW9uIGF0KGUsdCxuLGkpe3ZhciBvLGEscyxsLHUsYyxkLG0seSx4O2lmKCh0P3Qub3duZXJEb2N1bWVudHx8dDp3KSE9PWYmJnAodCksdD10fHxmLG49bnx8W10sIWV8fCJzdHJpbmciIT10eXBlb2YgZSlyZXR1cm4gbjtpZigxIT09KGw9dC5ub2RlVHlwZSkmJjkhPT1sKXJldHVybltdO2lmKGgmJiFpKXtpZihvPVouZXhlYyhlKSlpZihzPW9bMV0pe2lmKDk9PT1sKXtpZihhPXQuZ2V0RWxlbWVudEJ5SWQocyksIWF8fCFhLnBhcmVudE5vZGUpcmV0dXJuIG47aWYoYS5pZD09PXMpcmV0dXJuIG4ucHVzaChhKSxufWVsc2UgaWYodC5vd25lckRvY3VtZW50JiYoYT10Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocykpJiZ2KHQsYSkmJmEuaWQ9PT1zKXJldHVybiBuLnB1c2goYSksbn1lbHNle2lmKG9bMl0pcmV0dXJuIE0uYXBwbHkobix0LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpKSxuO2lmKChzPW9bM10pJiZyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gTS5hcHBseShuLHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShzKSksbn1pZihyLnFzYSYmKCFnfHwhZy50ZXN0KGUpKSl7aWYobT1kPWIseT10LHg9OT09PWwmJmUsMT09PWwmJiJvYmplY3QiIT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXtjPW10KGUpLChkPXQuZ2V0QXR0cmlidXRlKCJpZCIpKT9tPWQucmVwbGFjZShudCwiXFwkJiIpOnQuc2V0QXR0cmlidXRlKCJpZCIsbSksbT0iW2lkPSciK20rIiddICIsdT1jLmxlbmd0aDt3aGlsZSh1LS0pY1t1XT1tK3l0KGNbdV0pO3k9Vi50ZXN0KGUpJiZ0LnBhcmVudE5vZGV8fHQseD1jLmpvaW4oIiwiKX1pZih4KXRyeXtyZXR1cm4gTS5hcHBseShuLHkucXVlcnlTZWxlY3RvckFsbCh4KSksbn1jYXRjaChUKXt9ZmluYWxseXtkfHx0LnJlbW92ZUF0dHJpYnV0ZSgiaWQiKX19fXJldHVybiBrdChlLnJlcGxhY2UoeiwiJDEiKSx0LG4saSl9ZnVuY3Rpb24gc3QoKXt2YXIgZT1bXTtmdW5jdGlvbiB0KG4scil7cmV0dXJuIGUucHVzaChuKz0iICIpPm8uY2FjaGVMZW5ndGgmJmRlbGV0ZSB0W2Uuc2hpZnQoKV0sdFtuXT1yfXJldHVybiB0fWZ1bmN0aW9uIGx0KGUpe3JldHVybiBlW2JdPSEwLGV9ZnVuY3Rpb24gdXQoZSl7dmFyIHQ9Zi5jcmVhdGVFbGVtZW50KCJkaXYiKTt0cnl7cmV0dXJuISFlKHQpfWNhdGNoKG4pe3JldHVybiExfWZpbmFsbHl7dC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfX1mdW5jdGlvbiBjdChlLHQpe3ZhciBuPWUuc3BsaXQoInwiKSxyPWUubGVuZ3RoO3doaWxlKHItLSlvLmF0dHJIYW5kbGVbbltyXV09dH1mdW5jdGlvbiBwdChlLHQpe3ZhciBuPXQmJmUscj1uJiYxPT09ZS5ub2RlVHlwZSYmMT09PXQubm9kZVR5cGUmJih+dC5zb3VyY2VJbmRleHx8RCktKH5lLnNvdXJjZUluZGV4fHxEKTtpZihyKXJldHVybiByO2lmKG4pd2hpbGUobj1uLm5leHRTaWJsaW5nKWlmKG49PT10KXJldHVybi0xO3JldHVybiBlPzE6LTF9ZnVuY3Rpb24gZnQoZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBuPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4iaW5wdXQiPT09biYmdC50eXBlPT09ZX19ZnVuY3Rpb24gZHQoZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBuPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4oImlucHV0Ij09PW58fCJidXR0b24iPT09bikmJnQudHlwZT09PWV9fWZ1bmN0aW9uIGh0KGUpe3JldHVybiBsdChmdW5jdGlvbih0KXtyZXR1cm4gdD0rdCxsdChmdW5jdGlvbihuLHIpe3ZhciBpLG89ZShbXSxuLmxlbmd0aCx0KSxhPW8ubGVuZ3RoO3doaWxlKGEtLSluW2k9b1thXV0mJihuW2ldPSEocltpXT1uW2ldKSl9KX0pfXM9YXQuaXNYTUw9ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmKGUub3duZXJEb2N1bWVudHx8ZSkuZG9jdW1lbnRFbGVtZW50O3JldHVybiB0PyJIVE1MIiE9PXQubm9kZU5hbWU6ITF9LHI9YXQuc3VwcG9ydD17fSxwPWF0LnNldERvY3VtZW50PWZ1bmN0aW9uKGUpe3ZhciBuPWU/ZS5vd25lckRvY3VtZW50fHxlOncsaT1uLmRlZmF1bHRWaWV3O3JldHVybiBuIT09ZiYmOT09PW4ubm9kZVR5cGUmJm4uZG9jdW1lbnRFbGVtZW50PyhmPW4sZD1uLmRvY3VtZW50RWxlbWVudCxoPSFzKG4pLGkmJmkuYXR0YWNoRXZlbnQmJmkhPT1pLnRvcCYmaS5hdHRhY2hFdmVudCgib25iZWZvcmV1bmxvYWQiLGZ1bmN0aW9uKCl7cCgpfSksci5hdHRyaWJ1dGVzPXV0KGZ1bmN0aW9uKGUpe3JldHVybiBlLmNsYXNzTmFtZT0iaSIsIWUuZ2V0QXR0cmlidXRlKCJjbGFzc05hbWUiKX0pLHIuZ2V0RWxlbWVudHNCeVRhZ05hbWU9dXQoZnVuY3Rpb24oZSl7cmV0dXJuIGUuYXBwZW5kQ2hpbGQobi5jcmVhdGVDb21tZW50KCIiKSksIWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKS5sZW5ndGh9KSxyLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9dXQoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MPSI8ZGl2IGNsYXNzPSdhJz48L2Rpdj48ZGl2IGNsYXNzPSdhIGknPjwvZGl2PiIsZS5maXJzdENoaWxkLmNsYXNzTmFtZT0iaSIsMj09PWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiaSIpLmxlbmd0aH0pLHIuZ2V0QnlJZD11dChmdW5jdGlvbihlKXtyZXR1cm4gZC5hcHBlbmRDaGlsZChlKS5pZD1iLCFuLmdldEVsZW1lbnRzQnlOYW1lfHwhbi5nZXRFbGVtZW50c0J5TmFtZShiKS5sZW5ndGh9KSxyLmdldEJ5SWQ/KG8uZmluZC5JRD1mdW5jdGlvbihlLHQpe2lmKHR5cGVvZiB0LmdldEVsZW1lbnRCeUlkIT09aiYmaCl7dmFyIG49dC5nZXRFbGVtZW50QnlJZChlKTtyZXR1cm4gbiYmbi5wYXJlbnROb2RlP1tuXTpbXX19LG8uZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZShydCxpdCk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSgiaWQiKT09PXR9fSk6KGRlbGV0ZSBvLmZpbmQuSUQsby5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKHJ0LGl0KTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49dHlwZW9mIGUuZ2V0QXR0cmlidXRlTm9kZSE9PWomJmUuZ2V0QXR0cmlidXRlTm9kZSgiaWQiKTtyZXR1cm4gbiYmbi52YWx1ZT09PXR9fSksby5maW5kLlRBRz1yLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGUsbil7cmV0dXJuIHR5cGVvZiBuLmdldEVsZW1lbnRzQnlUYWdOYW1lIT09aj9uLmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpOnR9OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1bXSxpPTAsbz10LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpO2lmKCIqIj09PWUpe3doaWxlKG49b1tpKytdKTE9PT1uLm5vZGVUeXBlJiZyLnB1c2gobik7cmV0dXJuIHJ9cmV0dXJuIG99LG8uZmluZC5DTEFTUz1yLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGUsbil7cmV0dXJuIHR5cGVvZiBuLmdldEVsZW1lbnRzQnlDbGFzc05hbWUhPT1qJiZoP24uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShlKTp0fSxtPVtdLGc9W10sKHIucXNhPUsudGVzdChuLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKHV0KGZ1bmN0aW9uKGUpe2UuaW5uZXJIVE1MPSI8c2VsZWN0PjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+IixlLnF1ZXJ5U2VsZWN0b3JBbGwoIltzZWxlY3RlZF0iKS5sZW5ndGh8fGcucHVzaCgiXFxbIitQKyIqKD86dmFsdWV8IitCKyIpIiksZS5xdWVyeVNlbGVjdG9yQWxsKCI6Y2hlY2tlZCIpLmxlbmd0aHx8Zy5wdXNoKCI6Y2hlY2tlZCIpfSksdXQoZnVuY3Rpb24oZSl7dmFyIHQ9bi5jcmVhdGVFbGVtZW50KCJpbnB1dCIpO3Quc2V0QXR0cmlidXRlKCJ0eXBlIiwiaGlkZGVuIiksZS5hcHBlbmRDaGlsZCh0KS5zZXRBdHRyaWJ1dGUoInQiLCIiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIlt0Xj0nJ10iKS5sZW5ndGgmJmcucHVzaCgiWypeJF09IitQKyIqKD86Jyd8XCJcIikiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIjplbmFibGVkIikubGVuZ3RofHxnLnB1c2goIjplbmFibGVkIiwiOmRpc2FibGVkIiksZS5xdWVyeVNlbGVjdG9yQWxsKCIqLDp4IiksZy5wdXNoKCIsLio6Iil9KSksKHIubWF0Y2hlc1NlbGVjdG9yPUsudGVzdCh5PWQud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxkLm1vek1hdGNoZXNTZWxlY3Rvcnx8ZC5vTWF0Y2hlc1NlbGVjdG9yfHxkLm1zTWF0Y2hlc1NlbGVjdG9yKSkmJnV0KGZ1bmN0aW9uKGUpe3IuZGlzY29ubmVjdGVkTWF0Y2g9eS5jYWxsKGUsImRpdiIpLHkuY2FsbChlLCJbcyE9JyddOngiKSxtLnB1c2goIiE9IixJKX0pLGc9Zy5sZW5ndGgmJlJlZ0V4cChnLmpvaW4oInwiKSksbT1tLmxlbmd0aCYmUmVnRXhwKG0uam9pbigifCIpKSx2PUsudGVzdChkLmNvbnRhaW5zKXx8ZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj9mdW5jdGlvbihlLHQpe3ZhciBuPTk9PT1lLm5vZGVUeXBlP2UuZG9jdW1lbnRFbGVtZW50OmUscj10JiZ0LnBhcmVudE5vZGU7cmV0dXJuIGU9PT1yfHwhKCFyfHwxIT09ci5ub2RlVHlwZXx8IShuLmNvbnRhaW5zP24uY29udGFpbnMocik6ZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihyKSkpfTpmdW5jdGlvbihlLHQpe2lmKHQpd2hpbGUodD10LnBhcmVudE5vZGUpaWYodD09PWUpcmV0dXJuITA7cmV0dXJuITF9LEE9ZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj9mdW5jdGlvbihlLHQpe2lmKGU9PT10KXJldHVybiBTPSEwLDA7dmFyIGk9dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KTtyZXR1cm4gaT8xJml8fCFyLnNvcnREZXRhY2hlZCYmdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlKT09PWk/ZT09PW58fHYodyxlKT8tMTp0PT09bnx8dih3LHQpPzE6Yz9GLmNhbGwoYyxlKS1GLmNhbGwoYyx0KTowOjQmaT8tMToxOmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24/LTE6MX06ZnVuY3Rpb24oZSx0KXt2YXIgcixpPTAsbz1lLnBhcmVudE5vZGUsYT10LnBhcmVudE5vZGUscz1bZV0sbD1bdF07aWYoZT09PXQpcmV0dXJuIFM9ITAsMDtpZighb3x8IWEpcmV0dXJuIGU9PT1uPy0xOnQ9PT1uPzE6bz8tMTphPzE6Yz9GLmNhbGwoYyxlKS1GLmNhbGwoYyx0KTowO2lmKG89PT1hKXJldHVybiBwdChlLHQpO3I9ZTt3aGlsZShyPXIucGFyZW50Tm9kZSlzLnVuc2hpZnQocik7cj10O3doaWxlKHI9ci5wYXJlbnROb2RlKWwudW5zaGlmdChyKTt3aGlsZShzW2ldPT09bFtpXSlpKys7cmV0dXJuIGk/cHQoc1tpXSxsW2ldKTpzW2ldPT09dz8tMTpsW2ldPT09dz8xOjB9LG4pOmZ9LGF0Lm1hdGNoZXM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYXQoZSxudWxsLG51bGwsdCl9LGF0Lm1hdGNoZXNTZWxlY3Rvcj1mdW5jdGlvbihlLHQpe2lmKChlLm93bmVyRG9jdW1lbnR8fGUpIT09ZiYmcChlKSx0PXQucmVwbGFjZShZLCI9JyQxJ10iKSwhKCFyLm1hdGNoZXNTZWxlY3Rvcnx8IWh8fG0mJm0udGVzdCh0KXx8ZyYmZy50ZXN0KHQpKSl0cnl7dmFyIG49eS5jYWxsKGUsdCk7aWYobnx8ci5kaXNjb25uZWN0ZWRNYXRjaHx8ZS5kb2N1bWVudCYmMTEhPT1lLmRvY3VtZW50Lm5vZGVUeXBlKXJldHVybiBufWNhdGNoKGkpe31yZXR1cm4gYXQodCxmLG51bGwsW2VdKS5sZW5ndGg+MH0sYXQuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZS5vd25lckRvY3VtZW50fHxlKSE9PWYmJnAoZSksdihlLHQpfSxhdC5hdHRyPWZ1bmN0aW9uKGUsbil7KGUub3duZXJEb2N1bWVudHx8ZSkhPT1mJiZwKGUpO3ZhciBpPW8uYXR0ckhhbmRsZVtuLnRvTG93ZXJDYXNlKCldLGE9aSYmTC5jYWxsKG8uYXR0ckhhbmRsZSxuLnRvTG93ZXJDYXNlKCkpP2koZSxuLCFoKTp0O3JldHVybiBhPT09dD9yLmF0dHJpYnV0ZXN8fCFoP2UuZ2V0QXR0cmlidXRlKG4pOihhPWUuZ2V0QXR0cmlidXRlTm9kZShuKSkmJmEuc3BlY2lmaWVkP2EudmFsdWU6bnVsbDphfSxhdC5lcnJvcj1mdW5jdGlvbihlKXt0aHJvdyBFcnJvcigiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogIitlKX0sYXQudW5pcXVlU29ydD1mdW5jdGlvbihlKXt2YXIgdCxuPVtdLGk9MCxvPTA7aWYoUz0hci5kZXRlY3REdXBsaWNhdGVzLGM9IXIuc29ydFN0YWJsZSYmZS5zbGljZSgwKSxlLnNvcnQoQSksUyl7d2hpbGUodD1lW28rK10pdD09PWVbb10mJihpPW4ucHVzaChvKSk7d2hpbGUoaS0tKWUuc3BsaWNlKG5baV0sMSl9cmV0dXJuIGV9LGE9YXQuZ2V0VGV4dD1mdW5jdGlvbihlKXt2YXIgdCxuPSIiLHI9MCxpPWUubm9kZVR5cGU7aWYoaSl7aWYoMT09PWl8fDk9PT1pfHwxMT09PWkpe2lmKCJzdHJpbmciPT10eXBlb2YgZS50ZXh0Q29udGVudClyZXR1cm4gZS50ZXh0Q29udGVudDtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpbis9YShlKX1lbHNlIGlmKDM9PT1pfHw0PT09aSlyZXR1cm4gZS5ub2RlVmFsdWV9ZWxzZSBmb3IoO3Q9ZVtyXTtyKyspbis9YSh0KTtyZXR1cm4gbn0sbz1hdC5zZWxlY3RvcnM9e2NhY2hlTGVuZ3RoOjUwLGNyZWF0ZVBzZXVkbzpsdCxtYXRjaDpRLGF0dHJIYW5kbGU6e30sZmluZDp7fSxyZWxhdGl2ZTp7Ij4iOntkaXI6InBhcmVudE5vZGUiLGZpcnN0OiEwfSwiICI6e2RpcjoicGFyZW50Tm9kZSJ9LCIrIjp7ZGlyOiJwcmV2aW91c1NpYmxpbmciLGZpcnN0OiEwfSwifiI6e2RpcjoicHJldmlvdXNTaWJsaW5nIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihlKXtyZXR1cm4gZVsxXT1lWzFdLnJlcGxhY2UocnQsaXQpLGVbM109KGVbNF18fGVbNV18fCIiKS5yZXBsYWNlKHJ0LGl0KSwifj0iPT09ZVsyXSYmKGVbM109IiAiK2VbM10rIiAiKSxlLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0udG9Mb3dlckNhc2UoKSwibnRoIj09PWVbMV0uc2xpY2UoMCwzKT8oZVszXXx8YXQuZXJyb3IoZVswXSksZVs0XT0rKGVbNF0/ZVs1XSsoZVs2XXx8MSk6MiooImV2ZW4iPT09ZVszXXx8Im9kZCI9PT1lWzNdKSksZVs1XT0rKGVbN10rZVs4XXx8Im9kZCI9PT1lWzNdKSk6ZVszXSYmYXQuZXJyb3IoZVswXSksZX0sUFNFVURPOmZ1bmN0aW9uKGUpe3ZhciBuLHI9IWVbNV0mJmVbMl07cmV0dXJuIFEuQ0hJTEQudGVzdChlWzBdKT9udWxsOihlWzNdJiZlWzRdIT09dD9lWzJdPWVbNF06ciYmSi50ZXN0KHIpJiYobj1tdChyLCEwKSkmJihuPXIuaW5kZXhPZigiKSIsci5sZW5ndGgtbiktci5sZW5ndGgpJiYoZVswXT1lWzBdLnNsaWNlKDAsbiksZVsyXT1yLnNsaWNlKDAsbikpLGUuc2xpY2UoMCwzKSl9fSxmaWx0ZXI6e1RBRzpmdW5jdGlvbihlKXt2YXIgdD1lLnJlcGxhY2UocnQsaXQpLnRvTG93ZXJDYXNlKCk7cmV0dXJuIioiPT09ZT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihlKXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dH19LENMQVNTOmZ1bmN0aW9uKGUpe3ZhciB0PU5bZSsiICJdO3JldHVybiB0fHwodD1SZWdFeHAoIihefCIrUCsiKSIrZSsiKCIrUCsifCQpIikpJiZOKGUsZnVuY3Rpb24oZSl7cmV0dXJuIHQudGVzdCgic3RyaW5nIj09dHlwZW9mIGUuY2xhc3NOYW1lJiZlLmNsYXNzTmFtZXx8dHlwZW9mIGUuZ2V0QXR0cmlidXRlIT09aiYmZS5nZXRBdHRyaWJ1dGUoImNsYXNzIil8fCIiKX0pfSxBVFRSOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZnVuY3Rpb24ocil7dmFyIGk9YXQuYXR0cihyLGUpO3JldHVybiBudWxsPT1pPyIhPSI9PT10OnQ/KGkrPSIiLCI9Ij09PXQ/aT09PW46IiE9Ij09PXQ/aSE9PW46Il49Ij09PXQ/biYmMD09PWkuaW5kZXhPZihuKToiKj0iPT09dD9uJiZpLmluZGV4T2Yobik+LTE6IiQ9Ij09PXQ/biYmaS5zbGljZSgtbi5sZW5ndGgpPT09bjoifj0iPT09dD8oIiAiK2krIiAiKS5pbmRleE9mKG4pPi0xOiJ8PSI9PT10P2k9PT1ufHxpLnNsaWNlKDAsbi5sZW5ndGgrMSk9PT1uKyItIjohMSk6ITB9fSxDSElMRDpmdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvPSJudGgiIT09ZS5zbGljZSgwLDMpLGE9Imxhc3QiIT09ZS5zbGljZSgtNCkscz0ib2YtdHlwZSI9PT10O3JldHVybiAxPT09ciYmMD09PWk/ZnVuY3Rpb24oZSl7cmV0dXJuISFlLnBhcmVudE5vZGV9OmZ1bmN0aW9uKHQsbixsKXt2YXIgdSxjLHAsZixkLGgsZz1vIT09YT8ibmV4dFNpYmxpbmciOiJwcmV2aW91c1NpYmxpbmciLG09dC5wYXJlbnROb2RlLHk9cyYmdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLHY9IWwmJiFzO2lmKG0pe2lmKG8pe3doaWxlKGcpe3A9dDt3aGlsZShwPXBbZ10paWYocz9wLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT15OjE9PT1wLm5vZGVUeXBlKXJldHVybiExO2g9Zz0ib25seSI9PT1lJiYhaCYmIm5leHRTaWJsaW5nIn1yZXR1cm4hMH1pZihoPVthP20uZmlyc3RDaGlsZDptLmxhc3RDaGlsZF0sYSYmdil7Yz1tW2JdfHwobVtiXT17fSksdT1jW2VdfHxbXSxkPXVbMF09PT1UJiZ1WzFdLGY9dVswXT09PVQmJnVbMl0scD1kJiZtLmNoaWxkTm9kZXNbZF07d2hpbGUocD0rK2QmJnAmJnBbZ118fChmPWQ9MCl8fGgucG9wKCkpaWYoMT09PXAubm9kZVR5cGUmJisrZiYmcD09PXQpe2NbZV09W1QsZCxmXTticmVha319ZWxzZSBpZih2JiYodT0odFtiXXx8KHRbYl09e30pKVtlXSkmJnVbMF09PT1UKWY9dVsxXTtlbHNlIHdoaWxlKHA9KytkJiZwJiZwW2ddfHwoZj1kPTApfHxoLnBvcCgpKWlmKChzP3Aubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXk6MT09PXAubm9kZVR5cGUpJiYrK2YmJih2JiYoKHBbYl18fChwW2JdPXt9KSlbZV09W1QsZl0pLHA9PT10KSlicmVhaztyZXR1cm4gZi09aSxmPT09cnx8MD09PWYlciYmZi9yPj0wfX19LFBTRVVETzpmdW5jdGlvbihlLHQpe3ZhciBuLHI9by5wc2V1ZG9zW2VdfHxvLnNldEZpbHRlcnNbZS50b0xvd2VyQ2FzZSgpXXx8YXQuZXJyb3IoInVuc3VwcG9ydGVkIHBzZXVkbzogIitlKTtyZXR1cm4gcltiXT9yKHQpOnIubGVuZ3RoPjE/KG49W2UsZSwiIix0XSxvLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKT9sdChmdW5jdGlvbihlLG4pe3ZhciBpLG89cihlLHQpLGE9by5sZW5ndGg7d2hpbGUoYS0tKWk9Ri5jYWxsKGUsb1thXSksZVtpXT0hKG5baV09b1thXSl9KTpmdW5jdGlvbihlKXtyZXR1cm4gcihlLDAsbil9KTpyfX0scHNldWRvczp7bm90Omx0KGZ1bmN0aW9uKGUpe3ZhciB0PVtdLG49W10scj1sKGUucmVwbGFjZSh6LCIkMSIpKTtyZXR1cm4gcltiXT9sdChmdW5jdGlvbihlLHQsbixpKXt2YXIgbyxhPXIoZSxudWxsLGksW10pLHM9ZS5sZW5ndGg7d2hpbGUocy0tKShvPWFbc10pJiYoZVtzXT0hKHRbc109bykpfSk6ZnVuY3Rpb24oZSxpLG8pe3JldHVybiB0WzBdPWUscih0LG51bGwsbyxuKSwhbi5wb3AoKX19KSxoYXM6bHQoZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBhdChlLHQpLmxlbmd0aD4wfX0pLGNvbnRhaW5zOmx0KGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4odC50ZXh0Q29udGVudHx8dC5pbm5lclRleHR8fGEodCkpLmluZGV4T2YoZSk+LTF9fSksbGFuZzpsdChmdW5jdGlvbihlKXtyZXR1cm4gRy50ZXN0KGV8fCIiKXx8YXQuZXJyb3IoInVuc3VwcG9ydGVkIGxhbmc6ICIrZSksZT1lLnJlcGxhY2UocnQsaXQpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24odCl7dmFyIG47ZG8gaWYobj1oP3QubGFuZzp0LmdldEF0dHJpYnV0ZSgieG1sOmxhbmciKXx8dC5nZXRBdHRyaWJ1dGUoImxhbmciKSlyZXR1cm4gbj1uLnRvTG93ZXJDYXNlKCksbj09PWV8fDA9PT1uLmluZGV4T2YoZSsiLSIpO3doaWxlKCh0PXQucGFyZW50Tm9kZSkmJjE9PT10Lm5vZGVUeXBlKTtyZXR1cm4hMX19KSx0YXJnZXQ6ZnVuY3Rpb24odCl7dmFyIG49ZS5sb2NhdGlvbiYmZS5sb2NhdGlvbi5oYXNoO3JldHVybiBuJiZuLnNsaWNlKDEpPT09dC5pZH0scm9vdDpmdW5jdGlvbihlKXtyZXR1cm4gZT09PWR9LGZvY3VzOmZ1bmN0aW9uKGUpe3JldHVybiBlPT09Zi5hY3RpdmVFbGVtZW50JiYoIWYuaGFzRm9jdXN8fGYuaGFzRm9jdXMoKSkmJiEhKGUudHlwZXx8ZS5ocmVmfHx+ZS50YWJJbmRleCl9LGVuYWJsZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZGlzYWJsZWQ9PT0hMX0sZGlzYWJsZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZGlzYWJsZWQ9PT0hMH0sY2hlY2tlZDpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuImlucHV0Ij09PXQmJiEhZS5jaGVja2VkfHwib3B0aW9uIj09PXQmJiEhZS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsZS5zZWxlY3RlZD09PSEwfSxlbXB0eTpmdW5jdGlvbihlKXtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpaWYoZS5ub2RlTmFtZT4iQCJ8fDM9PT1lLm5vZGVUeXBlfHw0PT09ZS5ub2RlVHlwZSlyZXR1cm4hMTtyZXR1cm4hMH0scGFyZW50OmZ1bmN0aW9uKGUpe3JldHVybiFvLnBzZXVkb3MuZW1wdHkoZSl9LGhlYWRlcjpmdW5jdGlvbihlKXtyZXR1cm4gdHQudGVzdChlLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGV0LnRlc3QoZS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuImlucHV0Ij09PXQmJiJidXR0b24iPT09ZS50eXBlfHwiYnV0dG9uIj09PXR9LHRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuImlucHV0Ij09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmInRleHQiPT09ZS50eXBlJiYobnVsbD09KHQ9ZS5nZXRBdHRyaWJ1dGUoInR5cGUiKSl8fHQudG9Mb3dlckNhc2UoKT09PWUudHlwZSl9LGZpcnN0Omh0KGZ1bmN0aW9uKCl7cmV0dXJuWzBdfSksbGFzdDpodChmdW5jdGlvbihlLHQpe3JldHVyblt0LTFdfSksZXE6aHQoZnVuY3Rpb24oZSx0LG4pe3JldHVyblswPm4/bit0Om5dfSksZXZlbjpodChmdW5jdGlvbihlLHQpe3ZhciBuPTA7Zm9yKDt0Pm47bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxvZGQ6aHQoZnVuY3Rpb24oZSx0KXt2YXIgbj0xO2Zvcig7dD5uO24rPTIpZS5wdXNoKG4pO3JldHVybiBlfSksbHQ6aHQoZnVuY3Rpb24oZSx0LG4pe3ZhciByPTA+bj9uK3Q6bjtmb3IoOy0tcj49MDspZS5wdXNoKHIpO3JldHVybiBlfSksZ3Q6aHQoZnVuY3Rpb24oZSx0LG4pe3ZhciByPTA+bj9uK3Q6bjtmb3IoO3Q+KytyOyllLnB1c2gocik7cmV0dXJuIGV9KX19LG8ucHNldWRvcy5udGg9by5wc2V1ZG9zLmVxO2ZvcihuIGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KW8ucHNldWRvc1tuXT1mdChuKTtmb3IobiBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KW8ucHNldWRvc1tuXT1kdChuKTtmdW5jdGlvbiBndCgpe31ndC5wcm90b3R5cGU9by5maWx0ZXJzPW8ucHNldWRvcyxvLnNldEZpbHRlcnM9bmV3IGd0O2Z1bmN0aW9uIG10KGUsdCl7dmFyIG4scixpLGEscyxsLHUsYz1rW2UrIiAiXTtpZihjKXJldHVybiB0PzA6Yy5zbGljZSgwKTtzPWUsbD1bXSx1PW8ucHJlRmlsdGVyO3doaWxlKHMpeyghbnx8KHI9WC5leGVjKHMpKSkmJihyJiYocz1zLnNsaWNlKHJbMF0ubGVuZ3RoKXx8cyksbC5wdXNoKGk9W10pKSxuPSExLChyPVUuZXhlYyhzKSkmJihuPXIuc2hpZnQoKSxpLnB1c2goe3ZhbHVlOm4sdHlwZTpyWzBdLnJlcGxhY2UoeiwiICIpfSkscz1zLnNsaWNlKG4ubGVuZ3RoKSk7Zm9yKGEgaW4gby5maWx0ZXIpIShyPVFbYV0uZXhlYyhzKSl8fHVbYV0mJiEocj11W2FdKHIpKXx8KG49ci5zaGlmdCgpLGkucHVzaCh7dmFsdWU6bix0eXBlOmEsbWF0Y2hlczpyfSkscz1zLnNsaWNlKG4ubGVuZ3RoKSk7aWYoIW4pYnJlYWt9cmV0dXJuIHQ/cy5sZW5ndGg6cz9hdC5lcnJvcihlKTprKGUsbCkuc2xpY2UoMCl9ZnVuY3Rpb24geXQoZSl7dmFyIHQ9MCxuPWUubGVuZ3RoLHI9IiI7Zm9yKDtuPnQ7dCsrKXIrPWVbdF0udmFsdWU7cmV0dXJuIHJ9ZnVuY3Rpb24gdnQoZSx0LG4pe3ZhciByPXQuZGlyLG89biYmInBhcmVudE5vZGUiPT09cixhPUMrKztyZXR1cm4gdC5maXJzdD9mdW5jdGlvbih0LG4saSl7d2hpbGUodD10W3JdKWlmKDE9PT10Lm5vZGVUeXBlfHxvKXJldHVybiBlKHQsbixpKX06ZnVuY3Rpb24odCxuLHMpe3ZhciBsLHUsYyxwPVQrIiAiK2E7aWYocyl7d2hpbGUodD10W3JdKWlmKCgxPT09dC5ub2RlVHlwZXx8bykmJmUodCxuLHMpKXJldHVybiEwfWVsc2Ugd2hpbGUodD10W3JdKWlmKDE9PT10Lm5vZGVUeXBlfHxvKWlmKGM9dFtiXXx8KHRbYl09e30pLCh1PWNbcl0pJiZ1WzBdPT09cCl7aWYoKGw9dVsxXSk9PT0hMHx8bD09PWkpcmV0dXJuIGw9PT0hMH1lbHNlIGlmKHU9Y1tyXT1bcF0sdVsxXT1lKHQsbixzKXx8aSx1WzFdPT09ITApcmV0dXJuITB9fWZ1bmN0aW9uIGJ0KGUpe3JldHVybiBlLmxlbmd0aD4xP2Z1bmN0aW9uKHQsbixyKXt2YXIgaT1lLmxlbmd0aDt3aGlsZShpLS0paWYoIWVbaV0odCxuLHIpKXJldHVybiExO3JldHVybiEwfTplWzBdfWZ1bmN0aW9uIHh0KGUsdCxuLHIsaSl7dmFyIG8sYT1bXSxzPTAsbD1lLmxlbmd0aCx1PW51bGwhPXQ7Zm9yKDtsPnM7cysrKShvPWVbc10pJiYoIW58fG4obyxyLGkpKSYmKGEucHVzaChvKSx1JiZ0LnB1c2gocykpO3JldHVybiBhfWZ1bmN0aW9uIHd0KGUsdCxuLHIsaSxvKXtyZXR1cm4gciYmIXJbYl0mJihyPXd0KHIpKSxpJiYhaVtiXSYmKGk9d3QoaSxvKSksbHQoZnVuY3Rpb24obyxhLHMsbCl7dmFyIHUsYyxwLGY9W10sZD1bXSxoPWEubGVuZ3RoLGc9b3x8TnQodHx8IioiLHMubm9kZVR5cGU/W3NdOnMsW10pLG09IWV8fCFvJiZ0P2c6eHQoZyxmLGUscyxsKSx5PW4/aXx8KG8/ZTpofHxyKT9bXTphOm07aWYobiYmbihtLHkscyxsKSxyKXt1PXh0KHksZCkscih1LFtdLHMsbCksYz11Lmxlbmd0aDt3aGlsZShjLS0pKHA9dVtjXSkmJih5W2RbY11dPSEobVtkW2NdXT1wKSl9aWYobyl7aWYoaXx8ZSl7aWYoaSl7dT1bXSxjPXkubGVuZ3RoO3doaWxlKGMtLSkocD15W2NdKSYmdS5wdXNoKG1bY109cCk7aShudWxsLHk9W10sdSxsKX1jPXkubGVuZ3RoO3doaWxlKGMtLSkocD15W2NdKSYmKHU9aT9GLmNhbGwobyxwKTpmW2NdKT4tMSYmKG9bdV09IShhW3VdPXApKX19ZWxzZSB5PXh0KHk9PT1hP3kuc3BsaWNlKGgseS5sZW5ndGgpOnkpLGk/aShudWxsLGEseSxsKTpNLmFwcGx5KGEseSl9KX1mdW5jdGlvbiBUdChlKXt2YXIgdCxuLHIsaT1lLmxlbmd0aCxhPW8ucmVsYXRpdmVbZVswXS50eXBlXSxzPWF8fG8ucmVsYXRpdmVbIiAiXSxsPWE/MTowLGM9dnQoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10fSxzLCEwKSxwPXZ0KGZ1bmN0aW9uKGUpe3JldHVybiBGLmNhbGwodCxlKT4tMX0scywhMCksZj1bZnVuY3Rpb24oZSxuLHIpe3JldHVybiFhJiYocnx8biE9PXUpfHwoKHQ9bikubm9kZVR5cGU/YyhlLG4scik6cChlLG4scikpfV07Zm9yKDtpPmw7bCsrKWlmKG49by5yZWxhdGl2ZVtlW2xdLnR5cGVdKWY9W3Z0KGJ0KGYpLG4pXTtlbHNle2lmKG49by5maWx0ZXJbZVtsXS50eXBlXS5hcHBseShudWxsLGVbbF0ubWF0Y2hlcyksbltiXSl7Zm9yKHI9KytsO2k+cjtyKyspaWYoby5yZWxhdGl2ZVtlW3JdLnR5cGVdKWJyZWFrO3JldHVybiB3dChsPjEmJmJ0KGYpLGw+MSYmeXQoZS5zbGljZSgwLGwtMSkuY29uY2F0KHt2YWx1ZToiICI9PT1lW2wtMl0udHlwZT8iKiI6IiJ9KSkucmVwbGFjZSh6LCIkMSIpLG4scj5sJiZUdChlLnNsaWNlKGwscikpLGk+ciYmVHQoZT1lLnNsaWNlKHIpKSxpPnImJnl0KGUpKX1mLnB1c2gobil9cmV0dXJuIGJ0KGYpfWZ1bmN0aW9uIEN0KGUsdCl7dmFyIG49MCxyPXQubGVuZ3RoPjAsYT1lLmxlbmd0aD4wLHM9ZnVuY3Rpb24ocyxsLGMscCxkKXt2YXIgaCxnLG0seT1bXSx2PTAsYj0iMCIseD1zJiZbXSx3PW51bGwhPWQsQz11LE49c3x8YSYmby5maW5kLlRBRygiKiIsZCYmbC5wYXJlbnROb2RlfHxsKSxrPVQrPW51bGw9PUM/MTpNYXRoLnJhbmRvbSgpfHwuMTtmb3IodyYmKHU9bCE9PWYmJmwsaT1uKTtudWxsIT0oaD1OW2JdKTtiKyspe2lmKGEmJmgpe2c9MDt3aGlsZShtPWVbZysrXSlpZihtKGgsbCxjKSl7cC5wdXNoKGgpO2JyZWFrfXcmJihUPWssaT0rK24pfXImJigoaD0hbSYmaCkmJnYtLSxzJiZ4LnB1c2goaCkpfWlmKHYrPWIsciYmYiE9PXYpe2c9MDt3aGlsZShtPXRbZysrXSltKHgseSxsLGMpO2lmKHMpe2lmKHY+MCl3aGlsZShiLS0peFtiXXx8eVtiXXx8KHlbYl09cS5jYWxsKHApKTt5PXh0KHkpfU0uYXBwbHkocCx5KSx3JiYhcyYmeS5sZW5ndGg+MCYmdit0Lmxlbmd0aD4xJiZhdC51bmlxdWVTb3J0KHApfXJldHVybiB3JiYoVD1rLHU9QykseH07cmV0dXJuIHI/bHQocyk6c31sPWF0LmNvbXBpbGU9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9W10sbz1FW2UrIiAiXTtpZighbyl7dHx8KHQ9bXQoZSkpLG49dC5sZW5ndGg7d2hpbGUobi0tKW89VHQodFtuXSksb1tiXT9yLnB1c2gobyk6aS5wdXNoKG8pO289RShlLEN0KGkscikpfXJldHVybiBvfTtmdW5jdGlvbiBOdChlLHQsbil7dmFyIHI9MCxpPXQubGVuZ3RoO2Zvcig7aT5yO3IrKylhdChlLHRbcl0sbik7cmV0dXJuIG59ZnVuY3Rpb24ga3QoZSx0LG4saSl7dmFyIGEscyx1LGMscCxmPW10KGUpO2lmKCFpJiYxPT09Zi5sZW5ndGgpe2lmKHM9ZlswXT1mWzBdLnNsaWNlKDApLHMubGVuZ3RoPjImJiJJRCI9PT0odT1zWzBdKS50eXBlJiZyLmdldEJ5SWQmJjk9PT10Lm5vZGVUeXBlJiZoJiZvLnJlbGF0aXZlW3NbMV0udHlwZV0pe2lmKHQ9KG8uZmluZC5JRCh1Lm1hdGNoZXNbMF0ucmVwbGFjZShydCxpdCksdCl8fFtdKVswXSwhdClyZXR1cm4gbjtlPWUuc2xpY2Uocy5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9YT1RLm5lZWRzQ29udGV4dC50ZXN0KGUpPzA6cy5sZW5ndGg7d2hpbGUoYS0tKXtpZih1PXNbYV0sby5yZWxhdGl2ZVtjPXUudHlwZV0pYnJlYWs7aWYoKHA9by5maW5kW2NdKSYmKGk9cCh1Lm1hdGNoZXNbMF0ucmVwbGFjZShydCxpdCksVi50ZXN0KHNbMF0udHlwZSkmJnQucGFyZW50Tm9kZXx8dCkpKXtpZihzLnNwbGljZShhLDEpLGU9aS5sZW5ndGgmJnl0KHMpLCFlKXJldHVybiBNLmFwcGx5KG4saSksbjticmVha319fXJldHVybiBsKGUsZikoaSx0LCFoLG4sVi50ZXN0KGUpKSxufXIuc29ydFN0YWJsZT1iLnNwbGl0KCIiKS5zb3J0KEEpLmpvaW4oIiIpPT09YixyLmRldGVjdER1cGxpY2F0ZXM9UyxwKCksci5zb3J0RGV0YWNoZWQ9dXQoZnVuY3Rpb24oZSl7cmV0dXJuIDEmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihmLmNyZWF0ZUVsZW1lbnQoImRpdiIpKX0pLHV0KGZ1bmN0aW9uKGUpe3JldHVybiBlLmlubmVySFRNTD0iPGEgaHJlZj0nIyc+PC9hPiIsIiMiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgiaHJlZiIpfSl8fGN0KCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoIixmdW5jdGlvbihlLG4scil7cmV0dXJuIHI/dDplLmdldEF0dHJpYnV0ZShuLCJ0eXBlIj09PW4udG9Mb3dlckNhc2UoKT8xOjIpfSksci5hdHRyaWJ1dGVzJiZ1dChmdW5jdGlvbihlKXtyZXR1cm4gZS5pbm5lckhUTUw9IjxpbnB1dC8+IixlLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCJ2YWx1ZSIsIiIpLCIiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgidmFsdWUiKX0pfHxjdCgidmFsdWUiLGZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gcnx8ImlucHV0IiE9PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKT90OmUuZGVmYXVsdFZhbHVlfSksdXQoZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWUuZ2V0QXR0cmlidXRlKCJkaXNhYmxlZCIpfSl8fGN0KEIsZnVuY3Rpb24oZSxuLHIpe3ZhciBpO3JldHVybiByP3Q6KGk9ZS5nZXRBdHRyaWJ1dGVOb2RlKG4pKSYmaS5zcGVjaWZpZWQ/aS52YWx1ZTplW25dPT09ITA/bi50b0xvd2VyQ2FzZSgpOm51bGx9KSx4LmZpbmQ9YXQseC5leHByPWF0LnNlbGVjdG9ycyx4LmV4cHJbIjoiXT14LmV4cHIucHNldWRvcyx4LnVuaXF1ZT1hdC51bmlxdWVTb3J0LHgudGV4dD1hdC5nZXRUZXh0LHguaXNYTUxEb2M9YXQuaXNYTUwseC5jb250YWlucz1hdC5jb250YWluc30oZSk7dmFyIE89e307ZnVuY3Rpb24gRihlKXt2YXIgdD1PW2VdPXt9O3JldHVybiB4LmVhY2goZS5tYXRjaChUKXx8W10sZnVuY3Rpb24oZSxuKXt0W25dPSEwfSksdH14LkNhbGxiYWNrcz1mdW5jdGlvbihlKXtlPSJzdHJpbmciPT10eXBlb2YgZT9PW2VdfHxGKGUpOnguZXh0ZW5kKHt9LGUpO3ZhciBuLHIsaSxvLGEscyxsPVtdLHU9IWUub25jZSYmW10sYz1mdW5jdGlvbih0KXtmb3Iocj1lLm1lbW9yeSYmdCxpPSEwLGE9c3x8MCxzPTAsbz1sLmxlbmd0aCxuPSEwO2wmJm8+YTthKyspaWYobFthXS5hcHBseSh0WzBdLHRbMV0pPT09ITEmJmUuc3RvcE9uRmFsc2Upe3I9ITE7YnJlYWt9bj0hMSxsJiYodT91Lmxlbmd0aCYmYyh1LnNoaWZ0KCkpOnI/bD1bXTpwLmRpc2FibGUoKSl9LHA9e2FkZDpmdW5jdGlvbigpe2lmKGwpe3ZhciB0PWwubGVuZ3RoOyhmdW5jdGlvbiBpKHQpe3guZWFjaCh0LGZ1bmN0aW9uKHQsbil7dmFyIHI9eC50eXBlKG4pOyJmdW5jdGlvbiI9PT1yP2UudW5pcXVlJiZwLmhhcyhuKXx8bC5wdXNoKG4pOm4mJm4ubGVuZ3RoJiYic3RyaW5nIiE9PXImJmkobil9KX0pKGFyZ3VtZW50cyksbj9vPWwubGVuZ3RoOnImJihzPXQsYyhyKSl9cmV0dXJuIHRoaXN9LHJlbW92ZTpmdW5jdGlvbigpe3JldHVybiBsJiZ4LmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGUsdCl7dmFyIHI7d2hpbGUoKHI9eC5pbkFycmF5KHQsbCxyKSk+LTEpbC5zcGxpY2UociwxKSxuJiYobz49ciYmby0tLGE+PXImJmEtLSl9KSx0aGlzfSxoYXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/eC5pbkFycmF5KGUsbCk+LTE6ISghbHx8IWwubGVuZ3RoKX0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gbD1bXSxvPTAsdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBsPXU9cj10LHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIWx9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gdT10LHJ8fHAuZGlzYWJsZSgpLHRoaXN9LGxvY2tlZDpmdW5jdGlvbigpe3JldHVybiF1fSxmaXJlV2l0aDpmdW5jdGlvbihlLHQpe3JldHVybiFsfHxpJiYhdXx8KHQ9dHx8W10sdD1bZSx0LnNsaWNlP3Quc2xpY2UoKTp0XSxuP3UucHVzaCh0KTpjKHQpKSx0aGlzfSxmaXJlOmZ1bmN0aW9uKCl7cmV0dXJuIHAuZmlyZVdpdGgodGhpcyxhcmd1bWVudHMpLHRoaXN9LGZpcmVkOmZ1bmN0aW9uKCl7cmV0dXJuISFpfX07cmV0dXJuIHB9LHguZXh0ZW5kKHtEZWZlcnJlZDpmdW5jdGlvbihlKXt2YXIgdD1bWyJyZXNvbHZlIiwiZG9uZSIseC5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksInJlc29sdmVkIl0sWyJyZWplY3QiLCJmYWlsIix4LkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSwicmVqZWN0ZWQiXSxbIm5vdGlmeSIsInByb2dyZXNzIix4LkNhbGxiYWNrcygibWVtb3J5IildXSxuPSJwZW5kaW5nIixyPXtzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBufSxhbHdheXM6ZnVuY3Rpb24oKXtyZXR1cm4gaS5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpLHRoaXN9LHRoZW46ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHM7cmV0dXJuIHguRGVmZXJyZWQoZnVuY3Rpb24obil7eC5lYWNoKHQsZnVuY3Rpb24odCxvKXt2YXIgYT1vWzBdLHM9eC5pc0Z1bmN0aW9uKGVbdF0pJiZlW3RdO2lbb1sxXV0oZnVuY3Rpb24oKXt2YXIgZT1zJiZzLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtlJiZ4LmlzRnVuY3Rpb24oZS5wcm9taXNlKT9lLnByb21pc2UoKS5kb25lKG4ucmVzb2x2ZSkuZmFpbChuLnJlamVjdCkucHJvZ3Jlc3Mobi5ub3RpZnkpOm5bYSsiV2l0aCJdKHRoaXM9PT1yP24ucHJvbWlzZSgpOnRoaXMscz9bZV06YXJndW1lbnRzKX0pfSksZT1udWxsfSkucHJvbWlzZSgpfSxwcm9taXNlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lP3guZXh0ZW5kKGUscik6cn19LGk9e307cmV0dXJuIHIucGlwZT1yLnRoZW4seC5lYWNoKHQsZnVuY3Rpb24oZSxvKXt2YXIgYT1vWzJdLHM9b1szXTtyW29bMV1dPWEuYWRkLHMmJmEuYWRkKGZ1bmN0aW9uKCl7bj1zfSx0WzFeZV1bMl0uZGlzYWJsZSx0WzJdWzJdLmxvY2spLGlbb1swXV09ZnVuY3Rpb24oKXtyZXR1cm4gaVtvWzBdKyJXaXRoIl0odGhpcz09PWk/cjp0aGlzLGFyZ3VtZW50cyksdGhpc30saVtvWzBdKyJXaXRoIl09YS5maXJlV2l0aH0pLHIucHJvbWlzZShpKSxlJiZlLmNhbGwoaSxpKSxpfSx3aGVuOmZ1bmN0aW9uKGUpe3ZhciB0PTAsbj1nLmNhbGwoYXJndW1lbnRzKSxyPW4ubGVuZ3RoLGk9MSE9PXJ8fGUmJnguaXNGdW5jdGlvbihlLnByb21pc2UpP3I6MCxvPTE9PT1pP2U6eC5EZWZlcnJlZCgpLGE9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBmdW5jdGlvbihyKXt0W2VdPXRoaXMsbltlXT1hcmd1bWVudHMubGVuZ3RoPjE/Zy5jYWxsKGFyZ3VtZW50cyk6cixuPT09cz9vLm5vdGlmeVdpdGgodCxuKTotLWl8fG8ucmVzb2x2ZVdpdGgodCxuKX19LHMsbCx1O2lmKHI+MSlmb3Iocz1BcnJheShyKSxsPUFycmF5KHIpLHU9QXJyYXkocik7cj50O3QrKyluW3RdJiZ4LmlzRnVuY3Rpb24oblt0XS5wcm9taXNlKT9uW3RdLnByb21pc2UoKS5kb25lKGEodCx1LG4pKS5mYWlsKG8ucmVqZWN0KS5wcm9ncmVzcyhhKHQsbCxzKSk6LS1pO3JldHVybiBpfHxvLnJlc29sdmVXaXRoKHUsbiksby5wcm9taXNlKCl9fSkseC5zdXBwb3J0PWZ1bmN0aW9uKHQpe3ZhciBuLHIsbyxzLGwsdSxjLHAsZixkPWEuY3JlYXRlRWxlbWVudCgiZGl2Iik7aWYoZC5zZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIsInQiKSxkLmlubmVySFRNTD0iICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+IixuPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKXx8W10scj1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJhIilbMF0sIXJ8fCFyLnN0eWxlfHwhbi5sZW5ndGgpcmV0dXJuIHQ7cz1hLmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpLHU9cy5hcHBlbmRDaGlsZChhLmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpKSxvPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImlucHV0IilbMF0sci5zdHlsZS5jc3NUZXh0PSJ0b3A6MXB4O2Zsb2F0OmxlZnQ7b3BhY2l0eTouNSIsdC5nZXRTZXRBdHRyaWJ1dGU9InQiIT09ZC5jbGFzc05hbWUsdC5sZWFkaW5nV2hpdGVzcGFjZT0zPT09ZC5maXJzdENoaWxkLm5vZGVUeXBlLHQudGJvZHk9IWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInRib2R5IikubGVuZ3RoLHQuaHRtbFNlcmlhbGl6ZT0hIWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImxpbmsiKS5sZW5ndGgsdC5zdHlsZT0vdG9wLy50ZXN0KHIuZ2V0QXR0cmlidXRlKCJzdHlsZSIpKSx0LmhyZWZOb3JtYWxpemVkPSIvYSI9PT1yLmdldEF0dHJpYnV0ZSgiaHJlZiIpLHQub3BhY2l0eT0vXjAuNS8udGVzdChyLnN0eWxlLm9wYWNpdHkpLHQuY3NzRmxvYXQ9ISFyLnN0eWxlLmNzc0Zsb2F0LHQuY2hlY2tPbj0hIW8udmFsdWUsdC5vcHRTZWxlY3RlZD11LnNlbGVjdGVkLHQuZW5jdHlwZT0hIWEuY3JlYXRlRWxlbWVudCgiZm9ybSIpLmVuY3R5cGUsdC5odG1sNUNsb25lPSI8Om5hdj48LzpuYXY+IiE9PWEuY3JlYXRlRWxlbWVudCgibmF2IikuY2xvbmVOb2RlKCEwKS5vdXRlckhUTUwsdC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0PSExLHQuc2hyaW5rV3JhcEJsb2Nrcz0hMSx0LnBpeGVsUG9zaXRpb249ITEsdC5kZWxldGVFeHBhbmRvPSEwLHQubm9DbG9uZUV2ZW50PSEwLHQucmVsaWFibGVNYXJnaW5SaWdodD0hMCx0LmJveFNpemluZ1JlbGlhYmxlPSEwLG8uY2hlY2tlZD0hMCx0Lm5vQ2xvbmVDaGVja2VkPW8uY2xvbmVOb2RlKCEwKS5jaGVja2VkLHMuZGlzYWJsZWQ9ITAsdC5vcHREaXNhYmxlZD0hdS5kaXNhYmxlZDt0cnl7ZGVsZXRlIGQudGVzdH1jYXRjaChoKXt0LmRlbGV0ZUV4cGFuZG89ITF9bz1hLmNyZWF0ZUVsZW1lbnQoImlucHV0Iiksby5zZXRBdHRyaWJ1dGUoInZhbHVlIiwiIiksdC5pbnB1dD0iIj09PW8uZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpLG8udmFsdWU9InQiLG8uc2V0QXR0cmlidXRlKCJ0eXBlIiwicmFkaW8iKSx0LnJhZGlvVmFsdWU9InQiPT09by52YWx1ZSxvLnNldEF0dHJpYnV0ZSgiY2hlY2tlZCIsInQiKSxvLnNldEF0dHJpYnV0ZSgibmFtZSIsInQiKSxsPWEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGwuYXBwZW5kQ2hpbGQobyksdC5hcHBlbmRDaGVja2VkPW8uY2hlY2tlZCx0LmNoZWNrQ2xvbmU9bC5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsZC5hdHRhY2hFdmVudCYmKGQuYXR0YWNoRXZlbnQoIm9uY2xpY2siLGZ1bmN0aW9uKCl7dC5ub0Nsb25lRXZlbnQ9ITF9KSxkLmNsb25lTm9kZSghMCkuY2xpY2soKSk7Zm9yKGYgaW57c3VibWl0OiEwLGNoYW5nZTohMCxmb2N1c2luOiEwfSlkLnNldEF0dHJpYnV0ZShjPSJvbiIrZiwidCIpLHRbZisiQnViYmxlcyJdPWMgaW4gZXx8ZC5hdHRyaWJ1dGVzW2NdLmV4cGFuZG89PT0hMTtkLnN0eWxlLmJhY2tncm91bmRDbGlwPSJjb250ZW50LWJveCIsZC5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPSIiLHQuY2xlYXJDbG9uZVN0eWxlPSJjb250ZW50LWJveCI9PT1kLnN0eWxlLmJhY2tncm91bmRDbGlwO2ZvcihmIGluIHgodCkpYnJlYWs7cmV0dXJuIHQub3duTGFzdD0iMCIhPT1mLHgoZnVuY3Rpb24oKXt2YXIgbixyLG8scz0icGFkZGluZzowO21hcmdpbjowO2JvcmRlcjowO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94OyIsbD1hLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJib2R5IilbMF07bCYmKG49YS5jcmVhdGVFbGVtZW50KCJkaXYiKSxuLnN0eWxlLmNzc1RleHQ9ImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDotOTk5OXB4O21hcmdpbi10b3A6MXB4IixsLmFwcGVuZENoaWxkKG4pLmFwcGVuZENoaWxkKGQpLGQuaW5uZXJIVE1MPSI8dGFibGU+PHRyPjx0ZD48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+IixvPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInRkIiksb1swXS5zdHlsZS5jc3NUZXh0PSJwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjA7ZGlzcGxheTpub25lIixwPTA9PT1vWzBdLm9mZnNldEhlaWdodCxvWzBdLnN0eWxlLmRpc3BsYXk9IiIsb1sxXS5zdHlsZS5kaXNwbGF5PSJub25lIix0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cz1wJiYwPT09b1swXS5vZmZzZXRIZWlnaHQsZC5pbm5lckhUTUw9IiIsZC5zdHlsZS5jc3NUZXh0PSJib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzoxcHg7Ym9yZGVyOjFweDtkaXNwbGF5OmJsb2NrO3dpZHRoOjRweDttYXJnaW4tdG9wOjElO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxJTsiLHguc3dhcChsLG51bGwhPWwuc3R5bGUuem9vbT97em9vbToxfTp7fSxmdW5jdGlvbigpe3QuYm94U2l6aW5nPTQ9PT1kLm9mZnNldFdpZHRofSksZS5nZXRDb21wdXRlZFN0eWxlJiYodC5waXhlbFBvc2l0aW9uPSIxJSIhPT0oZS5nZXRDb21wdXRlZFN0eWxlKGQsbnVsbCl8fHt9KS50b3AsdC5ib3hTaXppbmdSZWxpYWJsZT0iNHB4Ij09PShlLmdldENvbXB1dGVkU3R5bGUoZCxudWxsKXx8e3dpZHRoOiI0cHgifSkud2lkdGgscj1kLmFwcGVuZENoaWxkKGEuY3JlYXRlRWxlbWVudCgiZGl2IikpLHIuc3R5bGUuY3NzVGV4dD1kLnN0eWxlLmNzc1RleHQ9cyxyLnN0eWxlLm1hcmdpblJpZ2h0PXIuc3R5bGUud2lkdGg9IjAiLGQuc3R5bGUud2lkdGg9IjFweCIsdC5yZWxpYWJsZU1hcmdpblJpZ2h0PSFwYXJzZUZsb2F0KChlLmdldENvbXB1dGVkU3R5bGUocixudWxsKXx8e30pLm1hcmdpblJpZ2h0KSksdHlwZW9mIGQuc3R5bGUuem9vbSE9PWkmJihkLmlubmVySFRNTD0iIixkLnN0eWxlLmNzc1RleHQ9cysid2lkdGg6MXB4O3BhZGRpbmc6MXB4O2Rpc3BsYXk6aW5saW5lO3pvb206MSIsdC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0PTM9PT1kLm9mZnNldFdpZHRoLGQuc3R5bGUuZGlzcGxheT0iYmxvY2siLGQuaW5uZXJIVE1MPSI8ZGl2PjwvZGl2PiIsZC5maXJzdENoaWxkLnN0eWxlLndpZHRoPSI1cHgiLHQuc2hyaW5rV3JhcEJsb2Nrcz0zIT09ZC5vZmZzZXRXaWR0aCx0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQmJihsLnN0eWxlLnpvb209MSkpLGwucmVtb3ZlQ2hpbGQobiksbj1kPW89cj1udWxsKX0pLG49cz1sPXU9cj1vPW51bGwsdAp9KHt9KTt2YXIgQj0vKD86XHtbXHNcU10qXH18XFtbXHNcU10qXF0pJC8sUD0vKFtBLVpdKS9nO2Z1bmN0aW9uIFIoZSxuLHIsaSl7aWYoeC5hY2NlcHREYXRhKGUpKXt2YXIgbyxhLHM9eC5leHBhbmRvLGw9ZS5ub2RlVHlwZSx1PWw/eC5jYWNoZTplLGM9bD9lW3NdOmVbc10mJnM7aWYoYyYmdVtjXSYmKGl8fHVbY10uZGF0YSl8fHIhPT10fHwic3RyaW5nIiE9dHlwZW9mIG4pcmV0dXJuIGN8fChjPWw/ZVtzXT1wLnBvcCgpfHx4Lmd1aWQrKzpzKSx1W2NdfHwodVtjXT1sP3t9Ont0b0pTT046eC5ub29wfSksKCJvYmplY3QiPT10eXBlb2Ygbnx8ImZ1bmN0aW9uIj09dHlwZW9mIG4pJiYoaT91W2NdPXguZXh0ZW5kKHVbY10sbik6dVtjXS5kYXRhPXguZXh0ZW5kKHVbY10uZGF0YSxuKSksYT11W2NdLGl8fChhLmRhdGF8fChhLmRhdGE9e30pLGE9YS5kYXRhKSxyIT09dCYmKGFbeC5jYW1lbENhc2UobildPXIpLCJzdHJpbmciPT10eXBlb2Ygbj8obz1hW25dLG51bGw9PW8mJihvPWFbeC5jYW1lbENhc2UobildKSk6bz1hLG99fWZ1bmN0aW9uIFcoZSx0LG4pe2lmKHguYWNjZXB0RGF0YShlKSl7dmFyIHIsaSxvPWUubm9kZVR5cGUsYT1vP3guY2FjaGU6ZSxzPW8/ZVt4LmV4cGFuZG9dOnguZXhwYW5kbztpZihhW3NdKXtpZih0JiYocj1uP2Fbc106YVtzXS5kYXRhKSl7eC5pc0FycmF5KHQpP3Q9dC5jb25jYXQoeC5tYXAodCx4LmNhbWVsQ2FzZSkpOnQgaW4gcj90PVt0XToodD14LmNhbWVsQ2FzZSh0KSx0PXQgaW4gcj9bdF06dC5zcGxpdCgiICIpKSxpPXQubGVuZ3RoO3doaWxlKGktLSlkZWxldGUgclt0W2ldXTtpZihuPyFJKHIpOiF4LmlzRW1wdHlPYmplY3QocikpcmV0dXJufShufHwoZGVsZXRlIGFbc10uZGF0YSxJKGFbc10pKSkmJihvP3guY2xlYW5EYXRhKFtlXSwhMCk6eC5zdXBwb3J0LmRlbGV0ZUV4cGFuZG98fGEhPWEud2luZG93P2RlbGV0ZSBhW3NdOmFbc109bnVsbCl9fX14LmV4dGVuZCh7Y2FjaGU6e30sbm9EYXRhOnthcHBsZXQ6ITAsZW1iZWQ6ITAsb2JqZWN0OiJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDAifSxoYXNEYXRhOmZ1bmN0aW9uKGUpe3JldHVybiBlPWUubm9kZVR5cGU/eC5jYWNoZVtlW3guZXhwYW5kb11dOmVbeC5leHBhbmRvXSwhIWUmJiFJKGUpfSxkYXRhOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gUihlLHQsbil9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gVyhlLHQpfSxfZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFIoZSx0LG4sITApfSxfcmVtb3ZlRGF0YTpmdW5jdGlvbihlLHQpe3JldHVybiBXKGUsdCwhMCl9LGFjY2VwdERhdGE6ZnVuY3Rpb24oZSl7aWYoZS5ub2RlVHlwZSYmMSE9PWUubm9kZVR5cGUmJjkhPT1lLm5vZGVUeXBlKXJldHVybiExO3ZhciB0PWUubm9kZU5hbWUmJngubm9EYXRhW2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKV07cmV0dXJuIXR8fHQhPT0hMCYmZS5nZXRBdHRyaWJ1dGUoImNsYXNzaWQiKT09PXR9fSkseC5mbi5leHRlbmQoe2RhdGE6ZnVuY3Rpb24oZSxuKXt2YXIgcixpLG89bnVsbCxhPTAscz10aGlzWzBdO2lmKGU9PT10KXtpZih0aGlzLmxlbmd0aCYmKG89eC5kYXRhKHMpLDE9PT1zLm5vZGVUeXBlJiYheC5fZGF0YShzLCJwYXJzZWRBdHRycyIpKSl7Zm9yKHI9cy5hdHRyaWJ1dGVzO3IubGVuZ3RoPmE7YSsrKWk9clthXS5uYW1lLDA9PT1pLmluZGV4T2YoImRhdGEtIikmJihpPXguY2FtZWxDYXNlKGkuc2xpY2UoNSkpLCQocyxpLG9baV0pKTt4Ll9kYXRhKHMsInBhcnNlZEF0dHJzIiwhMCl9cmV0dXJuIG99cmV0dXJuIm9iamVjdCI9PXR5cGVvZiBlP3RoaXMuZWFjaChmdW5jdGlvbigpe3guZGF0YSh0aGlzLGUpfSk6YXJndW1lbnRzLmxlbmd0aD4xP3RoaXMuZWFjaChmdW5jdGlvbigpe3guZGF0YSh0aGlzLGUsbil9KTpzPyQocyxlLHguZGF0YShzLGUpKTpudWxsfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt4LnJlbW92ZURhdGEodGhpcyxlKX0pfX0pO2Z1bmN0aW9uICQoZSxuLHIpe2lmKHI9PT10JiYxPT09ZS5ub2RlVHlwZSl7dmFyIGk9ImRhdGEtIituLnJlcGxhY2UoUCwiLSQxIikudG9Mb3dlckNhc2UoKTtpZihyPWUuZ2V0QXR0cmlidXRlKGkpLCJzdHJpbmciPT10eXBlb2Ygcil7dHJ5e3I9InRydWUiPT09cj8hMDoiZmFsc2UiPT09cj8hMToibnVsbCI9PT1yP251bGw6K3IrIiI9PT1yPytyOkIudGVzdChyKT94LnBhcnNlSlNPTihyKTpyfWNhdGNoKG8pe314LmRhdGEoZSxuLHIpfWVsc2Ugcj10fXJldHVybiByfWZ1bmN0aW9uIEkoZSl7dmFyIHQ7Zm9yKHQgaW4gZSlpZigoImRhdGEiIT09dHx8IXguaXNFbXB0eU9iamVjdChlW3RdKSkmJiJ0b0pTT04iIT09dClyZXR1cm4hMTtyZXR1cm4hMH14LmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpO3JldHVybiBlPyhuPShufHwiZngiKSsicXVldWUiLGk9eC5fZGF0YShlLG4pLHImJighaXx8eC5pc0FycmF5KHIpP2k9eC5fZGF0YShlLG4seC5tYWtlQXJyYXkocikpOmkucHVzaChyKSksaXx8W10pOnR9LGRlcXVldWU6ZnVuY3Rpb24oZSx0KXt0PXR8fCJmeCI7dmFyIG49eC5xdWV1ZShlLHQpLHI9bi5sZW5ndGgsaT1uLnNoaWZ0KCksbz14Ll9xdWV1ZUhvb2tzKGUsdCksYT1mdW5jdGlvbigpe3guZGVxdWV1ZShlLHQpfTsiaW5wcm9ncmVzcyI9PT1pJiYoaT1uLnNoaWZ0KCksci0tKSxpJiYoImZ4Ij09PXQmJm4udW5zaGlmdCgiaW5wcm9ncmVzcyIpLGRlbGV0ZSBvLnN0b3AsaS5jYWxsKGUsYSxvKSksIXImJm8mJm8uZW1wdHkuZmlyZSgpfSxfcXVldWVIb29rczpmdW5jdGlvbihlLHQpe3ZhciBuPXQrInF1ZXVlSG9va3MiO3JldHVybiB4Ll9kYXRhKGUsbil8fHguX2RhdGEoZSxuLHtlbXB0eTp4LkNhbGxiYWNrcygib25jZSBtZW1vcnkiKS5hZGQoZnVuY3Rpb24oKXt4Ll9yZW1vdmVEYXRhKGUsdCsicXVldWUiKSx4Ll9yZW1vdmVEYXRhKGUsbil9KX0pfX0pLHguZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihlLG4pe3ZhciByPTI7cmV0dXJuInN0cmluZyIhPXR5cGVvZiBlJiYobj1lLGU9ImZ4IixyLS0pLHI+YXJndW1lbnRzLmxlbmd0aD94LnF1ZXVlKHRoaXNbMF0sZSk6bj09PXQ/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD14LnF1ZXVlKHRoaXMsZSxuKTt4Ll9xdWV1ZUhvb2tzKHRoaXMsZSksImZ4Ij09PWUmJiJpbnByb2dyZXNzIiE9PXRbMF0mJnguZGVxdWV1ZSh0aGlzLGUpfSl9LGRlcXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3guZGVxdWV1ZSh0aGlzLGUpfSl9LGRlbGF5OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9eC5meD94LmZ4LnNwZWVkc1tlXXx8ZTplLHQ9dHx8ImZ4Iix0aGlzLnF1ZXVlKHQsZnVuY3Rpb24odCxuKXt2YXIgcj1zZXRUaW1lb3V0KHQsZSk7bi5zdG9wPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHIpfX0pfSxjbGVhclF1ZXVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnF1ZXVlKGV8fCJmeCIsW10pfSxwcm9taXNlOmZ1bmN0aW9uKGUsbil7dmFyIHIsaT0xLG89eC5EZWZlcnJlZCgpLGE9dGhpcyxzPXRoaXMubGVuZ3RoLGw9ZnVuY3Rpb24oKXstLWl8fG8ucmVzb2x2ZVdpdGgoYSxbYV0pfTsic3RyaW5nIiE9dHlwZW9mIGUmJihuPWUsZT10KSxlPWV8fCJmeCI7d2hpbGUocy0tKXI9eC5fZGF0YShhW3NdLGUrInF1ZXVlSG9va3MiKSxyJiZyLmVtcHR5JiYoaSsrLHIuZW1wdHkuYWRkKGwpKTtyZXR1cm4gbCgpLG8ucHJvbWlzZShuKX19KTt2YXIgeixYLFU9L1tcdFxyXG5cZl0vZyxWPS9cci9nLFk9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdCkkL2ksSj0vXig/OmF8YXJlYSkkL2ksRz0vXig/OmNoZWNrZWR8c2VsZWN0ZWQpJC9pLFE9eC5zdXBwb3J0LmdldFNldEF0dHJpYnV0ZSxLPXguc3VwcG9ydC5pbnB1dDt4LmZuLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihlLHQpe3JldHVybiB4LmFjY2Vzcyh0aGlzLHguYXR0cixlLHQsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7eC5yZW1vdmVBdHRyKHRoaXMsZSl9KX0scHJvcDpmdW5jdGlvbihlLHQpe3JldHVybiB4LmFjY2Vzcyh0aGlzLHgucHJvcCxlLHQsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlUHJvcDpmdW5jdGlvbihlKXtyZXR1cm4gZT14LnByb3BGaXhbZV18fGUsdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dHJ5e3RoaXNbZV09dCxkZWxldGUgdGhpc1tlXX1jYXRjaChuKXt9fSl9LGFkZENsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG8sYT0wLHM9dGhpcy5sZW5ndGgsbD0ic3RyaW5nIj09dHlwZW9mIGUmJmU7aWYoeC5pc0Z1bmN0aW9uKGUpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24odCl7eCh0aGlzKS5hZGRDbGFzcyhlLmNhbGwodGhpcyx0LHRoaXMuY2xhc3NOYW1lKSl9KTtpZihsKWZvcih0PShlfHwiIikubWF0Y2goVCl8fFtdO3M+YTthKyspaWYobj10aGlzW2FdLHI9MT09PW4ubm9kZVR5cGUmJihuLmNsYXNzTmFtZT8oIiAiK24uY2xhc3NOYW1lKyIgIikucmVwbGFjZShVLCIgIik6IiAiKSl7bz0wO3doaWxlKGk9dFtvKytdKTA+ci5pbmRleE9mKCIgIitpKyIgIikmJihyKz1pKyIgIik7bi5jbGFzc05hbWU9eC50cmltKHIpfXJldHVybiB0aGlzfSxyZW1vdmVDbGFzczpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvLGE9MCxzPXRoaXMubGVuZ3RoLGw9MD09PWFyZ3VtZW50cy5sZW5ndGh8fCJzdHJpbmciPT10eXBlb2YgZSYmZTtpZih4LmlzRnVuY3Rpb24oZSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbih0KXt4KHRoaXMpLnJlbW92ZUNsYXNzKGUuY2FsbCh0aGlzLHQsdGhpcy5jbGFzc05hbWUpKX0pO2lmKGwpZm9yKHQ9KGV8fCIiKS5tYXRjaChUKXx8W107cz5hO2ErKylpZihuPXRoaXNbYV0scj0xPT09bi5ub2RlVHlwZSYmKG4uY2xhc3NOYW1lPygiICIrbi5jbGFzc05hbWUrIiAiKS5yZXBsYWNlKFUsIiAiKToiIikpe289MDt3aGlsZShpPXRbbysrXSl3aGlsZShyLmluZGV4T2YoIiAiK2krIiAiKT49MClyPXIucmVwbGFjZSgiICIraSsiICIsIiAiKTtuLmNsYXNzTmFtZT1lP3gudHJpbShyKToiIn1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oZSx0KXt2YXIgbj10eXBlb2YgZTtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiB0JiYic3RyaW5nIj09PW4/dD90aGlzLmFkZENsYXNzKGUpOnRoaXMucmVtb3ZlQ2xhc3MoZSk6eC5pc0Z1bmN0aW9uKGUpP3RoaXMuZWFjaChmdW5jdGlvbihuKXt4KHRoaXMpLnRvZ2dsZUNsYXNzKGUuY2FsbCh0aGlzLG4sdGhpcy5jbGFzc05hbWUsdCksdCl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXtpZigic3RyaW5nIj09PW4pe3ZhciB0LHI9MCxvPXgodGhpcyksYT1lLm1hdGNoKFQpfHxbXTt3aGlsZSh0PWFbcisrXSlvLmhhc0NsYXNzKHQpP28ucmVtb3ZlQ2xhc3ModCk6by5hZGRDbGFzcyh0KX1lbHNlKG49PT1pfHwiYm9vbGVhbiI9PT1uKSYmKHRoaXMuY2xhc3NOYW1lJiZ4Ll9kYXRhKHRoaXMsIl9fY2xhc3NOYW1lX18iLHRoaXMuY2xhc3NOYW1lKSx0aGlzLmNsYXNzTmFtZT10aGlzLmNsYXNzTmFtZXx8ZT09PSExPyIiOnguX2RhdGEodGhpcywiX19jbGFzc05hbWVfXyIpfHwiIil9KX0saGFzQ2xhc3M6ZnVuY3Rpb24oZSl7dmFyIHQ9IiAiK2UrIiAiLG49MCxyPXRoaXMubGVuZ3RoO2Zvcig7cj5uO24rKylpZigxPT09dGhpc1tuXS5ub2RlVHlwZSYmKCIgIit0aGlzW25dLmNsYXNzTmFtZSsiICIpLnJlcGxhY2UoVSwiICIpLmluZGV4T2YodCk+PTApcmV0dXJuITA7cmV0dXJuITF9LHZhbDpmdW5jdGlvbihlKXt2YXIgbixyLGksbz10aGlzWzBdO3tpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiBpPXguaXNGdW5jdGlvbihlKSx0aGlzLmVhY2goZnVuY3Rpb24obil7dmFyIG87MT09PXRoaXMubm9kZVR5cGUmJihvPWk/ZS5jYWxsKHRoaXMsbix4KHRoaXMpLnZhbCgpKTplLG51bGw9PW8/bz0iIjoibnVtYmVyIj09dHlwZW9mIG8/bys9IiI6eC5pc0FycmF5KG8pJiYobz14Lm1hcChvLGZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lPyIiOmUrIiJ9KSkscj14LnZhbEhvb2tzW3RoaXMudHlwZV18fHgudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxyJiYic2V0ImluIHImJnIuc2V0KHRoaXMsbywidmFsdWUiKSE9PXR8fCh0aGlzLnZhbHVlPW8pKX0pO2lmKG8pcmV0dXJuIHI9eC52YWxIb29rc1tvLnR5cGVdfHx4LnZhbEhvb2tzW28ubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sciYmImdldCJpbiByJiYobj1yLmdldChvLCJ2YWx1ZSIpKSE9PXQ/bjoobj1vLnZhbHVlLCJzdHJpbmciPT10eXBlb2Ygbj9uLnJlcGxhY2UoViwiIik6bnVsbD09bj8iIjpuKX19fSkseC5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihlKXt2YXIgdD14LmZpbmQuYXR0cihlLCJ2YWx1ZSIpO3JldHVybiBudWxsIT10P3Q6ZS50ZXh0fX0sc2VsZWN0OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQsbixyPWUub3B0aW9ucyxpPWUuc2VsZWN0ZWRJbmRleCxvPSJzZWxlY3Qtb25lIj09PWUudHlwZXx8MD5pLGE9bz9udWxsOltdLHM9bz9pKzE6ci5sZW5ndGgsbD0wPmk/czpvP2k6MDtmb3IoO3M+bDtsKyspaWYobj1yW2xdLCEoIW4uc2VsZWN0ZWQmJmwhPT1pfHwoeC5zdXBwb3J0Lm9wdERpc2FibGVkP24uZGlzYWJsZWQ6bnVsbCE9PW4uZ2V0QXR0cmlidXRlKCJkaXNhYmxlZCIpKXx8bi5wYXJlbnROb2RlLmRpc2FibGVkJiZ4Lm5vZGVOYW1lKG4ucGFyZW50Tm9kZSwib3B0Z3JvdXAiKSkpe2lmKHQ9eChuKS52YWwoKSxvKXJldHVybiB0O2EucHVzaCh0KX1yZXR1cm4gYX0sc2V0OmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpPWUub3B0aW9ucyxvPXgubWFrZUFycmF5KHQpLGE9aS5sZW5ndGg7d2hpbGUoYS0tKXI9aVthXSwoci5zZWxlY3RlZD14LmluQXJyYXkoeChyKS52YWwoKSxvKT49MCkmJihuPSEwKTtyZXR1cm4gbnx8KGUuc2VsZWN0ZWRJbmRleD0tMSksb319fSxhdHRyOmZ1bmN0aW9uKGUsbixyKXt2YXIgbyxhLHM9ZS5ub2RlVHlwZTtpZihlJiYzIT09cyYmOCE9PXMmJjIhPT1zKXJldHVybiB0eXBlb2YgZS5nZXRBdHRyaWJ1dGU9PT1pP3gucHJvcChlLG4scik6KDE9PT1zJiZ4LmlzWE1MRG9jKGUpfHwobj1uLnRvTG93ZXJDYXNlKCksbz14LmF0dHJIb29rc1tuXXx8KHguZXhwci5tYXRjaC5ib29sLnRlc3Qobik/WDp6KSkscj09PXQ/byYmImdldCJpbiBvJiZudWxsIT09KGE9by5nZXQoZSxuKSk/YTooYT14LmZpbmQuYXR0cihlLG4pLG51bGw9PWE/dDphKTpudWxsIT09cj9vJiYic2V0ImluIG8mJihhPW8uc2V0KGUscixuKSkhPT10P2E6KGUuc2V0QXR0cmlidXRlKG4scisiIikscik6KHgucmVtb3ZlQXR0cihlLG4pLHQpKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaT0wLG89dCYmdC5tYXRjaChUKTtpZihvJiYxPT09ZS5ub2RlVHlwZSl3aGlsZShuPW9baSsrXSlyPXgucHJvcEZpeFtuXXx8bix4LmV4cHIubWF0Y2guYm9vbC50ZXN0KG4pP0smJlF8fCFHLnRlc3Qobik/ZVtyXT0hMTplW3guY2FtZWxDYXNlKCJkZWZhdWx0LSIrbildPWVbcl09ITE6eC5hdHRyKGUsbiwiIiksZS5yZW1vdmVBdHRyaWJ1dGUoUT9uOnIpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihlLHQpe2lmKCF4LnN1cHBvcnQucmFkaW9WYWx1ZSYmInJhZGlvIj09PXQmJngubm9kZU5hbWUoZSwiaW5wdXQiKSl7dmFyIG49ZS52YWx1ZTtyZXR1cm4gZS5zZXRBdHRyaWJ1dGUoInR5cGUiLHQpLG4mJihlLnZhbHVlPW4pLHR9fX19LHByb3BGaXg6eyJmb3IiOiJodG1sRm9yIiwiY2xhc3MiOiJjbGFzc05hbWUifSxwcm9wOmZ1bmN0aW9uKGUsbixyKXt2YXIgaSxvLGEscz1lLm5vZGVUeXBlO2lmKGUmJjMhPT1zJiY4IT09cyYmMiE9PXMpcmV0dXJuIGE9MSE9PXN8fCF4LmlzWE1MRG9jKGUpLGEmJihuPXgucHJvcEZpeFtuXXx8bixvPXgucHJvcEhvb2tzW25dKSxyIT09dD9vJiYic2V0ImluIG8mJihpPW8uc2V0KGUscixuKSkhPT10P2k6ZVtuXT1yOm8mJiJnZXQiaW4gbyYmbnVsbCE9PShpPW8uZ2V0KGUsbikpP2k6ZVtuXX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXguZmluZC5hdHRyKGUsInRhYmluZGV4Iik7cmV0dXJuIHQ/cGFyc2VJbnQodCwxMCk6WS50ZXN0KGUubm9kZU5hbWUpfHxKLnRlc3QoZS5ub2RlTmFtZSkmJmUuaHJlZj8wOi0xfX19fSksWD17c2V0OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdD09PSExP3gucmVtb3ZlQXR0cihlLG4pOksmJlF8fCFHLnRlc3Qobik/ZS5zZXRBdHRyaWJ1dGUoIVEmJngucHJvcEZpeFtuXXx8bixuKTplW3guY2FtZWxDYXNlKCJkZWZhdWx0LSIrbildPWVbbl09ITAsbn19LHguZWFjaCh4LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goL1x3Ky9nKSxmdW5jdGlvbihlLG4pe3ZhciByPXguZXhwci5hdHRySGFuZGxlW25dfHx4LmZpbmQuYXR0cjt4LmV4cHIuYXR0ckhhbmRsZVtuXT1LJiZRfHwhRy50ZXN0KG4pP2Z1bmN0aW9uKGUsbixpKXt2YXIgbz14LmV4cHIuYXR0ckhhbmRsZVtuXSxhPWk/dDooeC5leHByLmF0dHJIYW5kbGVbbl09dCkhPXIoZSxuLGkpP24udG9Mb3dlckNhc2UoKTpudWxsO3JldHVybiB4LmV4cHIuYXR0ckhhbmRsZVtuXT1vLGF9OmZ1bmN0aW9uKGUsbixyKXtyZXR1cm4gcj90OmVbeC5jYW1lbENhc2UoImRlZmF1bHQtIituKV0/bi50b0xvd2VyQ2FzZSgpOm51bGx9fSksSyYmUXx8KHguYXR0ckhvb2tzLnZhbHVlPXtzZXQ6ZnVuY3Rpb24oZSxuLHIpe3JldHVybiB4Lm5vZGVOYW1lKGUsImlucHV0Iik/KGUuZGVmYXVsdFZhbHVlPW4sdCk6eiYmei5zZXQoZSxuLHIpfX0pLFF8fCh6PXtzZXQ6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpPWUuZ2V0QXR0cmlidXRlTm9kZShyKTtyZXR1cm4gaXx8ZS5zZXRBdHRyaWJ1dGVOb2RlKGk9ZS5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZShyKSksaS52YWx1ZT1uKz0iIiwidmFsdWUiPT09cnx8bj09PWUuZ2V0QXR0cmlidXRlKHIpP246dH19LHguZXhwci5hdHRySGFuZGxlLmlkPXguZXhwci5hdHRySGFuZGxlLm5hbWU9eC5leHByLmF0dHJIYW5kbGUuY29vcmRzPWZ1bmN0aW9uKGUsbixyKXt2YXIgaTtyZXR1cm4gcj90OihpPWUuZ2V0QXR0cmlidXRlTm9kZShuKSkmJiIiIT09aS52YWx1ZT9pLnZhbHVlOm51bGx9LHgudmFsSG9va3MuYnV0dG9uPXtnZXQ6ZnVuY3Rpb24oZSxuKXt2YXIgcj1lLmdldEF0dHJpYnV0ZU5vZGUobik7cmV0dXJuIHImJnIuc3BlY2lmaWVkP3IudmFsdWU6dH0sc2V0Onouc2V0fSx4LmF0dHJIb29rcy5jb250ZW50ZWRpdGFibGU9e3NldDpmdW5jdGlvbihlLHQsbil7ei5zZXQoZSwiIj09PXQ/ITE6dCxuKX19LHguZWFjaChbIndpZHRoIiwiaGVpZ2h0Il0sZnVuY3Rpb24oZSxuKXt4LmF0dHJIb29rc1tuXT17c2V0OmZ1bmN0aW9uKGUscil7cmV0dXJuIiI9PT1yPyhlLnNldEF0dHJpYnV0ZShuLCJhdXRvIikscik6dH19fSkpLHguc3VwcG9ydC5ocmVmTm9ybWFsaXplZHx8eC5lYWNoKFsiaHJlZiIsInNyYyJdLGZ1bmN0aW9uKGUsdCl7eC5wcm9wSG9va3NbdF09e2dldDpmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUodCw0KX19fSkseC5zdXBwb3J0LnN0eWxlfHwoeC5hdHRySG9va3Muc3R5bGU9e2dldDpmdW5jdGlvbihlKXtyZXR1cm4gZS5zdHlsZS5jc3NUZXh0fHx0fSxzZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5zdHlsZS5jc3NUZXh0PXQrIiJ9fSkseC5zdXBwb3J0Lm9wdFNlbGVjdGVkfHwoeC5wcm9wSG9va3Muc2VsZWN0ZWQ9e2dldDpmdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudE5vZGU7cmV0dXJuIHQmJih0LnNlbGVjdGVkSW5kZXgsdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCksbnVsbH19KSx4LmVhY2goWyJ0YWJJbmRleCIsInJlYWRPbmx5IiwibWF4TGVuZ3RoIiwiY2VsbFNwYWNpbmciLCJjZWxsUGFkZGluZyIsInJvd1NwYW4iLCJjb2xTcGFuIiwidXNlTWFwIiwiZnJhbWVCb3JkZXIiLCJjb250ZW50RWRpdGFibGUiXSxmdW5jdGlvbigpe3gucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldPXRoaXN9KSx4LnN1cHBvcnQuZW5jdHlwZXx8KHgucHJvcEZpeC5lbmN0eXBlPSJlbmNvZGluZyIpLHguZWFjaChbInJhZGlvIiwiY2hlY2tib3giXSxmdW5jdGlvbigpe3gudmFsSG9va3NbdGhpc109e3NldDpmdW5jdGlvbihlLG4pe3JldHVybiB4LmlzQXJyYXkobik/ZS5jaGVja2VkPXguaW5BcnJheSh4KGUpLnZhbCgpLG4pPj0wOnR9fSx4LnN1cHBvcnQuY2hlY2tPbnx8KHgudmFsSG9va3NbdGhpc10uZ2V0PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZS5nZXRBdHRyaWJ1dGUoInZhbHVlIik/Im9uIjplLnZhbHVlfSl9KTt2YXIgWj0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2ksZXQ9L15rZXkvLHR0PS9eKD86bW91c2V8Y29udGV4dG1lbnUpfGNsaWNrLyxudD0vXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8scnQ9L14oW14uXSopKD86XC4oLispfCkkLztmdW5jdGlvbiBpdCgpe3JldHVybiEwfWZ1bmN0aW9uIG90KCl7cmV0dXJuITF9ZnVuY3Rpb24gYXQoKXt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudH1jYXRjaChlKXt9fXguZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24oZSxuLHIsbyxhKXt2YXIgcyxsLHUsYyxwLGYsZCxoLGcsbSx5LHY9eC5fZGF0YShlKTtpZih2KXtyLmhhbmRsZXImJihjPXIscj1jLmhhbmRsZXIsYT1jLnNlbGVjdG9yKSxyLmd1aWR8fChyLmd1aWQ9eC5ndWlkKyspLChsPXYuZXZlbnRzKXx8KGw9di5ldmVudHM9e30pLChmPXYuaGFuZGxlKXx8KGY9di5oYW5kbGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiB4PT09aXx8ZSYmeC5ldmVudC50cmlnZ2VyZWQ9PT1lLnR5cGU/dDp4LmV2ZW50LmRpc3BhdGNoLmFwcGx5KGYuZWxlbSxhcmd1bWVudHMpfSxmLmVsZW09ZSksbj0obnx8IiIpLm1hdGNoKFQpfHxbIiJdLHU9bi5sZW5ndGg7d2hpbGUodS0tKXM9cnQuZXhlYyhuW3VdKXx8W10sZz15PXNbMV0sbT0oc1syXXx8IiIpLnNwbGl0KCIuIikuc29ydCgpLGcmJihwPXguZXZlbnQuc3BlY2lhbFtnXXx8e30sZz0oYT9wLmRlbGVnYXRlVHlwZTpwLmJpbmRUeXBlKXx8ZyxwPXguZXZlbnQuc3BlY2lhbFtnXXx8e30sZD14LmV4dGVuZCh7dHlwZTpnLG9yaWdUeXBlOnksZGF0YTpvLGhhbmRsZXI6cixndWlkOnIuZ3VpZCxzZWxlY3RvcjphLG5lZWRzQ29udGV4dDphJiZ4LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoYSksbmFtZXNwYWNlOm0uam9pbigiLiIpfSxjKSwoaD1sW2ddKXx8KGg9bFtnXT1bXSxoLmRlbGVnYXRlQ291bnQ9MCxwLnNldHVwJiZwLnNldHVwLmNhbGwoZSxvLG0sZikhPT0hMXx8KGUuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIoZyxmLCExKTplLmF0dGFjaEV2ZW50JiZlLmF0dGFjaEV2ZW50KCJvbiIrZyxmKSkpLHAuYWRkJiYocC5hZGQuY2FsbChlLGQpLGQuaGFuZGxlci5ndWlkfHwoZC5oYW5kbGVyLmd1aWQ9ci5ndWlkKSksYT9oLnNwbGljZShoLmRlbGVnYXRlQ291bnQrKywwLGQpOmgucHVzaChkKSx4LmV2ZW50Lmdsb2JhbFtnXT0hMCk7ZT1udWxsfX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLGwsdSxjLHAsZixkLGgsZyxtPXguaGFzRGF0YShlKSYmeC5fZGF0YShlKTtpZihtJiYoYz1tLmV2ZW50cykpe3Q9KHR8fCIiKS5tYXRjaChUKXx8WyIiXSx1PXQubGVuZ3RoO3doaWxlKHUtLSlpZihzPXJ0LmV4ZWModFt1XSl8fFtdLGQ9Zz1zWzFdLGg9KHNbMl18fCIiKS5zcGxpdCgiLiIpLnNvcnQoKSxkKXtwPXguZXZlbnQuc3BlY2lhbFtkXXx8e30sZD0ocj9wLmRlbGVnYXRlVHlwZTpwLmJpbmRUeXBlKXx8ZCxmPWNbZF18fFtdLHM9c1syXSYmUmVnRXhwKCIoXnxcXC4pIitoLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpLGw9bz1mLmxlbmd0aDt3aGlsZShvLS0pYT1mW29dLCFpJiZnIT09YS5vcmlnVHlwZXx8biYmbi5ndWlkIT09YS5ndWlkfHxzJiYhcy50ZXN0KGEubmFtZXNwYWNlKXx8ciYmciE9PWEuc2VsZWN0b3ImJigiKioiIT09cnx8IWEuc2VsZWN0b3IpfHwoZi5zcGxpY2UobywxKSxhLnNlbGVjdG9yJiZmLmRlbGVnYXRlQ291bnQtLSxwLnJlbW92ZSYmcC5yZW1vdmUuY2FsbChlLGEpKTtsJiYhZi5sZW5ndGgmJihwLnRlYXJkb3duJiZwLnRlYXJkb3duLmNhbGwoZSxoLG0uaGFuZGxlKSE9PSExfHx4LnJlbW92ZUV2ZW50KGUsZCxtLmhhbmRsZSksZGVsZXRlIGNbZF0pfWVsc2UgZm9yKGQgaW4gYyl4LmV2ZW50LnJlbW92ZShlLGQrdFt1XSxuLHIsITApO3guaXNFbXB0eU9iamVjdChjKSYmKGRlbGV0ZSBtLmhhbmRsZSx4Ll9yZW1vdmVEYXRhKGUsImV2ZW50cyIpKX19LHRyaWdnZXI6ZnVuY3Rpb24obixyLGksbyl7dmFyIHMsbCx1LGMscCxmLGQsaD1baXx8YV0sZz12LmNhbGwobiwidHlwZSIpP24udHlwZTpuLG09di5jYWxsKG4sIm5hbWVzcGFjZSIpP24ubmFtZXNwYWNlLnNwbGl0KCIuIik6W107aWYodT1mPWk9aXx8YSwzIT09aS5ub2RlVHlwZSYmOCE9PWkubm9kZVR5cGUmJiFudC50ZXN0KGcreC5ldmVudC50cmlnZ2VyZWQpJiYoZy5pbmRleE9mKCIuIik+PTAmJihtPWcuc3BsaXQoIi4iKSxnPW0uc2hpZnQoKSxtLnNvcnQoKSksbD0wPmcuaW5kZXhPZigiOiIpJiYib24iK2csbj1uW3guZXhwYW5kb10/bjpuZXcgeC5FdmVudChnLCJvYmplY3QiPT10eXBlb2YgbiYmbiksbi5pc1RyaWdnZXI9bz8yOjMsbi5uYW1lc3BhY2U9bS5qb2luKCIuIiksbi5uYW1lc3BhY2VfcmU9bi5uYW1lc3BhY2U/UmVnRXhwKCIoXnxcXC4pIittLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpOm51bGwsbi5yZXN1bHQ9dCxuLnRhcmdldHx8KG4udGFyZ2V0PWkpLHI9bnVsbD09cj9bbl06eC5tYWtlQXJyYXkocixbbl0pLHA9eC5ldmVudC5zcGVjaWFsW2ddfHx7fSxvfHwhcC50cmlnZ2VyfHxwLnRyaWdnZXIuYXBwbHkoaSxyKSE9PSExKSl7aWYoIW8mJiFwLm5vQnViYmxlJiYheC5pc1dpbmRvdyhpKSl7Zm9yKGM9cC5kZWxlZ2F0ZVR5cGV8fGcsbnQudGVzdChjK2cpfHwodT11LnBhcmVudE5vZGUpO3U7dT11LnBhcmVudE5vZGUpaC5wdXNoKHUpLGY9dTtmPT09KGkub3duZXJEb2N1bWVudHx8YSkmJmgucHVzaChmLmRlZmF1bHRWaWV3fHxmLnBhcmVudFdpbmRvd3x8ZSl9ZD0wO3doaWxlKCh1PWhbZCsrXSkmJiFuLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpbi50eXBlPWQ+MT9jOnAuYmluZFR5cGV8fGcscz0oeC5fZGF0YSh1LCJldmVudHMiKXx8e30pW24udHlwZV0mJnguX2RhdGEodSwiaGFuZGxlIikscyYmcy5hcHBseSh1LHIpLHM9bCYmdVtsXSxzJiZ4LmFjY2VwdERhdGEodSkmJnMuYXBwbHkmJnMuYXBwbHkodSxyKT09PSExJiZuLnByZXZlbnREZWZhdWx0KCk7aWYobi50eXBlPWcsIW8mJiFuLmlzRGVmYXVsdFByZXZlbnRlZCgpJiYoIXAuX2RlZmF1bHR8fHAuX2RlZmF1bHQuYXBwbHkoaC5wb3AoKSxyKT09PSExKSYmeC5hY2NlcHREYXRhKGkpJiZsJiZpW2ddJiYheC5pc1dpbmRvdyhpKSl7Zj1pW2xdLGYmJihpW2xdPW51bGwpLHguZXZlbnQudHJpZ2dlcmVkPWc7dHJ5e2lbZ10oKX1jYXRjaCh5KXt9eC5ldmVudC50cmlnZ2VyZWQ9dCxmJiYoaVtsXT1mKX1yZXR1cm4gbi5yZXN1bHR9fSxkaXNwYXRjaDpmdW5jdGlvbihlKXtlPXguZXZlbnQuZml4KGUpO3ZhciBuLHIsaSxvLGEscz1bXSxsPWcuY2FsbChhcmd1bWVudHMpLHU9KHguX2RhdGEodGhpcywiZXZlbnRzIil8fHt9KVtlLnR5cGVdfHxbXSxjPXguZXZlbnQuc3BlY2lhbFtlLnR5cGVdfHx7fTtpZihsWzBdPWUsZS5kZWxlZ2F0ZVRhcmdldD10aGlzLCFjLnByZURpc3BhdGNofHxjLnByZURpc3BhdGNoLmNhbGwodGhpcyxlKSE9PSExKXtzPXguZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLGUsdSksbj0wO3doaWxlKChvPXNbbisrXSkmJiFlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe2UuY3VycmVudFRhcmdldD1vLmVsZW0sYT0wO3doaWxlKChpPW8uaGFuZGxlcnNbYSsrXSkmJiFlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpKCFlLm5hbWVzcGFjZV9yZXx8ZS5uYW1lc3BhY2VfcmUudGVzdChpLm5hbWVzcGFjZSkpJiYoZS5oYW5kbGVPYmo9aSxlLmRhdGE9aS5kYXRhLHI9KCh4LmV2ZW50LnNwZWNpYWxbaS5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fGkuaGFuZGxlcikuYXBwbHkoby5lbGVtLGwpLHIhPT10JiYoZS5yZXN1bHQ9cik9PT0hMSYmKGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpKSl9cmV0dXJuIGMucG9zdERpc3BhdGNoJiZjLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsZSksZS5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihlLG4pe3ZhciByLGksbyxhLHM9W10sbD1uLmRlbGVnYXRlQ291bnQsdT1lLnRhcmdldDtpZihsJiZ1Lm5vZGVUeXBlJiYoIWUuYnV0dG9ufHwiY2xpY2siIT09ZS50eXBlKSlmb3IoO3UhPXRoaXM7dT11LnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PXUubm9kZVR5cGUmJih1LmRpc2FibGVkIT09ITB8fCJjbGljayIhPT1lLnR5cGUpKXtmb3Iobz1bXSxhPTA7bD5hO2ErKylpPW5bYV0scj1pLnNlbGVjdG9yKyIgIixvW3JdPT09dCYmKG9bcl09aS5uZWVkc0NvbnRleHQ/eChyLHRoaXMpLmluZGV4KHUpPj0wOnguZmluZChyLHRoaXMsbnVsbCxbdV0pLmxlbmd0aCksb1tyXSYmby5wdXNoKGkpO28ubGVuZ3RoJiZzLnB1c2goe2VsZW06dSxoYW5kbGVyczpvfSl9cmV0dXJuIG4ubGVuZ3RoPmwmJnMucHVzaCh7ZWxlbTp0aGlzLGhhbmRsZXJzOm4uc2xpY2UobCl9KSxzfSxmaXg6ZnVuY3Rpb24oZSl7aWYoZVt4LmV4cGFuZG9dKXJldHVybiBlO3ZhciB0LG4scixpPWUudHlwZSxvPWUscz10aGlzLmZpeEhvb2tzW2ldO3N8fCh0aGlzLmZpeEhvb2tzW2ldPXM9dHQudGVzdChpKT90aGlzLm1vdXNlSG9va3M6ZXQudGVzdChpKT90aGlzLmtleUhvb2tzOnt9KSxyPXMucHJvcHM/dGhpcy5wcm9wcy5jb25jYXQocy5wcm9wcyk6dGhpcy5wcm9wcyxlPW5ldyB4LkV2ZW50KG8pLHQ9ci5sZW5ndGg7d2hpbGUodC0tKW49clt0XSxlW25dPW9bbl07cmV0dXJuIGUudGFyZ2V0fHwoZS50YXJnZXQ9by5zcmNFbGVtZW50fHxhKSwzPT09ZS50YXJnZXQubm9kZVR5cGUmJihlLnRhcmdldD1lLnRhcmdldC5wYXJlbnROb2RlKSxlLm1ldGFLZXk9ISFlLm1ldGFLZXkscy5maWx0ZXI/cy5maWx0ZXIoZSxvKTplfSxwcm9wczoiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoIi5zcGxpdCgiICIpLGZpeEhvb2tzOnt9LGtleUhvb2tzOntwcm9wczoiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZSIuc3BsaXQoIiAiKSxmaWx0ZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbD09ZS53aGljaCYmKGUud2hpY2g9bnVsbCE9dC5jaGFyQ29kZT90LmNoYXJDb2RlOnQua2V5Q29kZSksZX19LG1vdXNlSG9va3M6e3Byb3BzOiJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgZnJvbUVsZW1lbnQgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnQiLnNwbGl0KCIgIiksZmlsdGVyOmZ1bmN0aW9uKGUsbil7dmFyIHIsaSxvLHM9bi5idXR0b24sbD1uLmZyb21FbGVtZW50O3JldHVybiBudWxsPT1lLnBhZ2VYJiZudWxsIT1uLmNsaWVudFgmJihpPWUudGFyZ2V0Lm93bmVyRG9jdW1lbnR8fGEsbz1pLmRvY3VtZW50RWxlbWVudCxyPWkuYm9keSxlLnBhZ2VYPW4uY2xpZW50WCsobyYmby5zY3JvbGxMZWZ0fHxyJiZyLnNjcm9sbExlZnR8fDApLShvJiZvLmNsaWVudExlZnR8fHImJnIuY2xpZW50TGVmdHx8MCksZS5wYWdlWT1uLmNsaWVudFkrKG8mJm8uc2Nyb2xsVG9wfHxyJiZyLnNjcm9sbFRvcHx8MCktKG8mJm8uY2xpZW50VG9wfHxyJiZyLmNsaWVudFRvcHx8MCkpLCFlLnJlbGF0ZWRUYXJnZXQmJmwmJihlLnJlbGF0ZWRUYXJnZXQ9bD09PWUudGFyZ2V0P24udG9FbGVtZW50OmwpLGUud2hpY2h8fHM9PT10fHwoZS53aGljaD0xJnM/MToyJnM/Mzo0JnM/MjowKSxlfX0sc3BlY2lhbDp7bG9hZDp7bm9CdWJibGU6ITB9LGZvY3VzOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYodGhpcyE9PWF0KCkmJnRoaXMuZm9jdXMpdHJ5e3JldHVybiB0aGlzLmZvY3VzKCksITF9Y2F0Y2goZSl7fX0sZGVsZWdhdGVUeXBlOiJmb2N1c2luIn0sYmx1cjp7dHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzPT09YXQoKSYmdGhpcy5ibHVyPyh0aGlzLmJsdXIoKSwhMSk6dH0sZGVsZWdhdGVUeXBlOiJmb2N1c291dCJ9LGNsaWNrOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIHgubm9kZU5hbWUodGhpcywiaW5wdXQiKSYmImNoZWNrYm94Ij09PXRoaXMudHlwZSYmdGhpcy5jbGljaz8odGhpcy5jbGljaygpLCExKTp0fSxfZGVmYXVsdDpmdW5jdGlvbihlKXtyZXR1cm4geC5ub2RlTmFtZShlLnRhcmdldCwiYSIpfX0sYmVmb3JldW5sb2FkOntwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oZSl7ZS5yZXN1bHQhPT10JiYoZS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlPWUucmVzdWx0KX19fSxzaW11bGF0ZTpmdW5jdGlvbihlLHQsbixyKXt2YXIgaT14LmV4dGVuZChuZXcgeC5FdmVudCxuLHt0eXBlOmUsaXNTaW11bGF0ZWQ6ITAsb3JpZ2luYWxFdmVudDp7fX0pO3I/eC5ldmVudC50cmlnZ2VyKGksbnVsbCx0KTp4LmV2ZW50LmRpc3BhdGNoLmNhbGwodCxpKSxpLmlzRGVmYXVsdFByZXZlbnRlZCgpJiZuLnByZXZlbnREZWZhdWx0KCl9fSx4LnJlbW92ZUV2ZW50PWEucmVtb3ZlRXZlbnRMaXN0ZW5lcj9mdW5jdGlvbihlLHQsbil7ZS5yZW1vdmVFdmVudExpc3RlbmVyJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxuLCExKX06ZnVuY3Rpb24oZSx0LG4pe3ZhciByPSJvbiIrdDtlLmRldGFjaEV2ZW50JiYodHlwZW9mIGVbcl09PT1pJiYoZVtyXT1udWxsKSxlLmRldGFjaEV2ZW50KHIsbikpfSx4LkV2ZW50PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiB4LkV2ZW50PyhlJiZlLnR5cGU/KHRoaXMub3JpZ2luYWxFdmVudD1lLHRoaXMudHlwZT1lLnR5cGUsdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZS5kZWZhdWx0UHJldmVudGVkfHxlLnJldHVyblZhbHVlPT09ITF8fGUuZ2V0UHJldmVudERlZmF1bHQmJmUuZ2V0UHJldmVudERlZmF1bHQoKT9pdDpvdCk6dGhpcy50eXBlPWUsbiYmeC5leHRlbmQodGhpcyxuKSx0aGlzLnRpbWVTdGFtcD1lJiZlLnRpbWVTdGFtcHx8eC5ub3coKSx0aGlzW3guZXhwYW5kb109ITAsdCk6bmV3IHguRXZlbnQoZSxuKX0seC5FdmVudC5wcm90b3R5cGU9e2lzRGVmYXVsdFByZXZlbnRlZDpvdCxpc1Byb3BhZ2F0aW9uU3RvcHBlZDpvdCxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDpvdCxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1pdCxlJiYoZS5wcmV2ZW50RGVmYXVsdD9lLnByZXZlbnREZWZhdWx0KCk6ZS5yZXR1cm5WYWx1ZT0hMSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWl0LGUmJihlLnN0b3BQcm9wYWdhdGlvbiYmZS5zdG9wUHJvcGFnYXRpb24oKSxlLmNhbmNlbEJ1YmJsZT0hMCl9LHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9aXQsdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LHguZWFjaCh7bW91c2VlbnRlcjoibW91c2VvdmVyIixtb3VzZWxlYXZlOiJtb3VzZW91dCJ9LGZ1bmN0aW9uKGUsdCl7eC5ldmVudC5zcGVjaWFsW2VdPXtkZWxlZ2F0ZVR5cGU6dCxiaW5kVHlwZTp0LGhhbmRsZTpmdW5jdGlvbihlKXt2YXIgbixyPXRoaXMsaT1lLnJlbGF0ZWRUYXJnZXQsbz1lLmhhbmRsZU9iajtyZXR1cm4oIWl8fGkhPT1yJiYheC5jb250YWlucyhyLGkpKSYmKGUudHlwZT1vLm9yaWdUeXBlLG49by5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxlLnR5cGU9dCksbn19fSkseC5zdXBwb3J0LnN1Ym1pdEJ1YmJsZXN8fCh4LmV2ZW50LnNwZWNpYWwuc3VibWl0PXtzZXR1cDpmdW5jdGlvbigpe3JldHVybiB4Lm5vZGVOYW1lKHRoaXMsImZvcm0iKT8hMTooeC5ldmVudC5hZGQodGhpcywiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0IixmdW5jdGlvbihlKXt2YXIgbj1lLnRhcmdldCxyPXgubm9kZU5hbWUobiwiaW5wdXQiKXx8eC5ub2RlTmFtZShuLCJidXR0b24iKT9uLmZvcm06dDtyJiYheC5fZGF0YShyLCJzdWJtaXRCdWJibGVzIikmJih4LmV2ZW50LmFkZChyLCJzdWJtaXQuX3N1Ym1pdCIsZnVuY3Rpb24oZSl7ZS5fc3VibWl0X2J1YmJsZT0hMH0pLHguX2RhdGEociwic3VibWl0QnViYmxlcyIsITApKX0pLHQpfSxwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oZSl7ZS5fc3VibWl0X2J1YmJsZSYmKGRlbGV0ZSBlLl9zdWJtaXRfYnViYmxlLHRoaXMucGFyZW50Tm9kZSYmIWUuaXNUcmlnZ2VyJiZ4LmV2ZW50LnNpbXVsYXRlKCJzdWJtaXQiLHRoaXMucGFyZW50Tm9kZSxlLCEwKSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7cmV0dXJuIHgubm9kZU5hbWUodGhpcywiZm9ybSIpPyExOih4LmV2ZW50LnJlbW92ZSh0aGlzLCIuX3N1Ym1pdCIpLHQpfX0pLHguc3VwcG9ydC5jaGFuZ2VCdWJibGVzfHwoeC5ldmVudC5zcGVjaWFsLmNoYW5nZT17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gWi50ZXN0KHRoaXMubm9kZU5hbWUpPygoImNoZWNrYm94Ij09PXRoaXMudHlwZXx8InJhZGlvIj09PXRoaXMudHlwZSkmJih4LmV2ZW50LmFkZCh0aGlzLCJwcm9wZXJ0eWNoYW5nZS5fY2hhbmdlIixmdW5jdGlvbihlKXsiY2hlY2tlZCI9PT1lLm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lJiYodGhpcy5fanVzdF9jaGFuZ2VkPSEwKX0pLHguZXZlbnQuYWRkKHRoaXMsImNsaWNrLl9jaGFuZ2UiLGZ1bmN0aW9uKGUpe3RoaXMuX2p1c3RfY2hhbmdlZCYmIWUuaXNUcmlnZ2VyJiYodGhpcy5fanVzdF9jaGFuZ2VkPSExKSx4LmV2ZW50LnNpbXVsYXRlKCJjaGFuZ2UiLHRoaXMsZSwhMCl9KSksITEpOih4LmV2ZW50LmFkZCh0aGlzLCJiZWZvcmVhY3RpdmF0ZS5fY2hhbmdlIixmdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldDtaLnRlc3QodC5ub2RlTmFtZSkmJiF4Ll9kYXRhKHQsImNoYW5nZUJ1YmJsZXMiKSYmKHguZXZlbnQuYWRkKHQsImNoYW5nZS5fY2hhbmdlIixmdW5jdGlvbihlKXshdGhpcy5wYXJlbnROb2RlfHxlLmlzU2ltdWxhdGVkfHxlLmlzVHJpZ2dlcnx8eC5ldmVudC5zaW11bGF0ZSgiY2hhbmdlIix0aGlzLnBhcmVudE5vZGUsZSwhMCl9KSx4Ll9kYXRhKHQsImNoYW5nZUJ1YmJsZXMiLCEwKSl9KSx0KX0saGFuZGxlOmZ1bmN0aW9uKGUpe3ZhciBuPWUudGFyZ2V0O3JldHVybiB0aGlzIT09bnx8ZS5pc1NpbXVsYXRlZHx8ZS5pc1RyaWdnZXJ8fCJyYWRpbyIhPT1uLnR5cGUmJiJjaGVja2JveCIhPT1uLnR5cGU/ZS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dH0sdGVhcmRvd246ZnVuY3Rpb24oKXtyZXR1cm4geC5ldmVudC5yZW1vdmUodGhpcywiLl9jaGFuZ2UiKSwhWi50ZXN0KHRoaXMubm9kZU5hbWUpfX0pLHguc3VwcG9ydC5mb2N1c2luQnViYmxlc3x8eC5lYWNoKHtmb2N1czoiZm9jdXNpbiIsYmx1cjoiZm9jdXNvdXQifSxmdW5jdGlvbihlLHQpe3ZhciBuPTAscj1mdW5jdGlvbihlKXt4LmV2ZW50LnNpbXVsYXRlKHQsZS50YXJnZXQseC5ldmVudC5maXgoZSksITApfTt4LmV2ZW50LnNwZWNpYWxbdF09e3NldHVwOmZ1bmN0aW9uKCl7MD09PW4rKyYmYS5hZGRFdmVudExpc3RlbmVyKGUsciwhMCl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7MD09PS0tbiYmYS5yZW1vdmVFdmVudExpc3RlbmVyKGUsciwhMCl9fX0pLHguZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihlLG4scixpLG8pe3ZhciBhLHM7aWYoIm9iamVjdCI9PXR5cGVvZiBlKXsic3RyaW5nIiE9dHlwZW9mIG4mJihyPXJ8fG4sbj10KTtmb3IoYSBpbiBlKXRoaXMub24oYSxuLHIsZVthXSxvKTtyZXR1cm4gdGhpc31pZihudWxsPT1yJiZudWxsPT1pPyhpPW4scj1uPXQpOm51bGw9PWkmJigic3RyaW5nIj09dHlwZW9mIG4/KGk9cixyPXQpOihpPXIscj1uLG49dCkpLGk9PT0hMSlpPW90O2Vsc2UgaWYoIWkpcmV0dXJuIHRoaXM7cmV0dXJuIDE9PT1vJiYocz1pLGk9ZnVuY3Rpb24oZSl7cmV0dXJuIHgoKS5vZmYoZSkscy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGkuZ3VpZD1zLmd1aWR8fChzLmd1aWQ9eC5ndWlkKyspKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt4LmV2ZW50LmFkZCh0aGlzLGUsaSxyLG4pfSl9LG9uZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5vbihlLHQsbixyLDEpfSxvZmY6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpLG87aWYoZSYmZS5wcmV2ZW50RGVmYXVsdCYmZS5oYW5kbGVPYmopcmV0dXJuIGk9ZS5oYW5kbGVPYmoseChlLmRlbGVnYXRlVGFyZ2V0KS5vZmYoaS5uYW1lc3BhY2U/aS5vcmlnVHlwZSsiLiIraS5uYW1lc3BhY2U6aS5vcmlnVHlwZSxpLnNlbGVjdG9yLGkuaGFuZGxlciksdGhpcztpZigib2JqZWN0Ij09dHlwZW9mIGUpe2ZvcihvIGluIGUpdGhpcy5vZmYobyxuLGVbb10pO3JldHVybiB0aGlzfXJldHVybihuPT09ITF8fCJmdW5jdGlvbiI9PXR5cGVvZiBuKSYmKHI9bixuPXQpLHI9PT0hMSYmKHI9b3QpLHRoaXMuZWFjaChmdW5jdGlvbigpe3guZXZlbnQucmVtb3ZlKHRoaXMsZSxyLG4pfSl9LHRyaWdnZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7eC5ldmVudC50cmlnZ2VyKGUsdCx0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihlLG4pe3ZhciByPXRoaXNbMF07cmV0dXJuIHI/eC5ldmVudC50cmlnZ2VyKGUsbixyLCEwKTp0fX0pO3ZhciBzdD0vXi5bXjojXFtcLixdKiQvLGx0PS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLHV0PXguZXhwci5tYXRjaC5uZWVkc0NvbnRleHQsY3Q9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07eC5mbi5leHRlbmQoe2ZpbmQ6ZnVuY3Rpb24oZSl7dmFyIHQsbj1bXSxyPXRoaXMsaT1yLmxlbmd0aDtpZigic3RyaW5nIiE9dHlwZW9mIGUpcmV0dXJuIHRoaXMucHVzaFN0YWNrKHgoZSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHQ9MDtpPnQ7dCsrKWlmKHguY29udGFpbnMoclt0XSx0aGlzKSlyZXR1cm4hMH0pKTtmb3IodD0wO2k+dDt0KyspeC5maW5kKGUsclt0XSxuKTtyZXR1cm4gbj10aGlzLnB1c2hTdGFjayhpPjE/eC51bmlxdWUobik6biksbi5zZWxlY3Rvcj10aGlzLnNlbGVjdG9yP3RoaXMuc2VsZWN0b3IrIiAiK2U6ZSxufSxoYXM6ZnVuY3Rpb24oZSl7dmFyIHQsbj14KGUsdGhpcykscj1uLmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodD0wO3I+dDt0KyspaWYoeC5jb250YWlucyh0aGlzLG5bdF0pKXJldHVybiEwfSl9LG5vdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZnQodGhpcyxlfHxbXSwhMCkpfSxmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGZ0KHRoaXMsZXx8W10sITEpKX0saXM6ZnVuY3Rpb24oZSl7cmV0dXJuISFmdCh0aGlzLCJzdHJpbmciPT10eXBlb2YgZSYmdXQudGVzdChlKT94KGUpOmV8fFtdLCExKS5sZW5ndGh9LGNsb3Nlc3Q6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTAsaT10aGlzLmxlbmd0aCxvPVtdLGE9dXQudGVzdChlKXx8InN0cmluZyIhPXR5cGVvZiBlP3goZSx0fHx0aGlzLmNvbnRleHQpOjA7Zm9yKDtpPnI7cisrKWZvcihuPXRoaXNbcl07biYmbiE9PXQ7bj1uLnBhcmVudE5vZGUpaWYoMTE+bi5ub2RlVHlwZSYmKGE/YS5pbmRleChuKT4tMToxPT09bi5ub2RlVHlwZSYmeC5maW5kLm1hdGNoZXNTZWxlY3RvcihuLGUpKSl7bj1vLnB1c2gobik7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKG8ubGVuZ3RoPjE/eC51bmlxdWUobyk6byl9LGluZGV4OmZ1bmN0aW9uKGUpe3JldHVybiBlPyJzdHJpbmciPT10eXBlb2YgZT94LmluQXJyYXkodGhpc1swXSx4KGUpKTp4LmluQXJyYXkoZS5qcXVlcnk/ZVswXTplLHRoaXMpOnRoaXNbMF0mJnRoaXNbMF0ucGFyZW50Tm9kZT90aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aDotMX0sYWRkOmZ1bmN0aW9uKGUsdCl7dmFyIG49InN0cmluZyI9PXR5cGVvZiBlP3goZSx0KTp4Lm1ha2VBcnJheShlJiZlLm5vZGVUeXBlP1tlXTplKSxyPXgubWVyZ2UodGhpcy5nZXQoKSxuKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soeC51bmlxdWUocikpfSxhZGRCYWNrOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmFkZChudWxsPT1lP3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKGUpKX19KTtmdW5jdGlvbiBwdChlLHQpe2RvIGU9ZVt0XTt3aGlsZShlJiYxIT09ZS5ub2RlVHlwZSk7cmV0dXJuIGV9eC5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiYxMSE9PXQubm9kZVR5cGU/dDpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiB4LmRpcihlLCJwYXJlbnROb2RlIil9LHBhcmVudHNVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHguZGlyKGUsInBhcmVudE5vZGUiLG4pfSxuZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBwdChlLCJuZXh0U2libGluZyIpfSxwcmV2OmZ1bmN0aW9uKGUpe3JldHVybiBwdChlLCJwcmV2aW91c1NpYmxpbmciKX0sbmV4dEFsbDpmdW5jdGlvbihlKXtyZXR1cm4geC5kaXIoZSwibmV4dFNpYmxpbmciKX0scHJldkFsbDpmdW5jdGlvbihlKXtyZXR1cm4geC5kaXIoZSwicHJldmlvdXNTaWJsaW5nIil9LG5leHRVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHguZGlyKGUsIm5leHRTaWJsaW5nIixuKX0scHJldlVudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4geC5kaXIoZSwicHJldmlvdXNTaWJsaW5nIixuKX0sc2libGluZ3M6ZnVuY3Rpb24oZSl7cmV0dXJuIHguc2libGluZygoZS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxlKX0sY2hpbGRyZW46ZnVuY3Rpb24oZSl7cmV0dXJuIHguc2libGluZyhlLmZpcnN0Q2hpbGQpfSxjb250ZW50czpmdW5jdGlvbihlKXtyZXR1cm4geC5ub2RlTmFtZShlLCJpZnJhbWUiKT9lLmNvbnRlbnREb2N1bWVudHx8ZS5jb250ZW50V2luZG93LmRvY3VtZW50OngubWVyZ2UoW10sZS5jaGlsZE5vZGVzKX19LGZ1bmN0aW9uKGUsdCl7eC5mbltlXT1mdW5jdGlvbihuLHIpe3ZhciBpPXgubWFwKHRoaXMsdCxuKTtyZXR1cm4iVW50aWwiIT09ZS5zbGljZSgtNSkmJihyPW4pLHImJiJzdHJpbmciPT10eXBlb2YgciYmKGk9eC5maWx0ZXIocixpKSksdGhpcy5sZW5ndGg+MSYmKGN0W2VdfHwoaT14LnVuaXF1ZShpKSksbHQudGVzdChlKSYmKGk9aS5yZXZlcnNlKCkpKSx0aGlzLnB1c2hTdGFjayhpKX19KSx4LmV4dGVuZCh7ZmlsdGVyOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10WzBdO3JldHVybiBuJiYoZT0iOm5vdCgiK2UrIikiKSwxPT09dC5sZW5ndGgmJjE9PT1yLm5vZGVUeXBlP3guZmluZC5tYXRjaGVzU2VsZWN0b3IocixlKT9bcl06W106eC5maW5kLm1hdGNoZXMoZSx4LmdyZXAodCxmdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV9KSl9LGRpcjpmdW5jdGlvbihlLG4scil7dmFyIGk9W10sbz1lW25dO3doaWxlKG8mJjkhPT1vLm5vZGVUeXBlJiYocj09PXR8fDEhPT1vLm5vZGVUeXBlfHwheChvKS5pcyhyKSkpMT09PW8ubm9kZVR5cGUmJmkucHVzaChvKSxvPW9bbl07cmV0dXJuIGl9LHNpYmxpbmc6ZnVuY3Rpb24oZSx0KXt2YXIgbj1bXTtmb3IoO2U7ZT1lLm5leHRTaWJsaW5nKTE9PT1lLm5vZGVUeXBlJiZlIT09dCYmbi5wdXNoKGUpO3JldHVybiBufX0pO2Z1bmN0aW9uIGZ0KGUsdCxuKXtpZih4LmlzRnVuY3Rpb24odCkpcmV0dXJuIHguZ3JlcChlLGZ1bmN0aW9uKGUscil7cmV0dXJuISF0LmNhbGwoZSxyLGUpIT09bn0pO2lmKHQubm9kZVR5cGUpcmV0dXJuIHguZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dCE9PW59KTtpZigic3RyaW5nIj09dHlwZW9mIHQpe2lmKHN0LnRlc3QodCkpcmV0dXJuIHguZmlsdGVyKHQsZSxuKTt0PXguZmlsdGVyKHQsZSl9cmV0dXJuIHguZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiB4LmluQXJyYXkoZSx0KT49MCE9PW59KX1mdW5jdGlvbiBkdChlKXt2YXIgdD1odC5zcGxpdCgifCIpLG49ZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7aWYobi5jcmVhdGVFbGVtZW50KXdoaWxlKHQubGVuZ3RoKW4uY3JlYXRlRWxlbWVudCh0LnBvcCgpKTtyZXR1cm4gbn12YXIgaHQ9ImFiYnJ8YXJ0aWNsZXxhc2lkZXxhdWRpb3xiZGl8Y2FudmFzfGRhdGF8ZGF0YWxpc3R8ZGV0YWlsc3xmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8aGVhZGVyfGhncm91cHxtYXJrfG1ldGVyfG5hdnxvdXRwdXR8cHJvZ3Jlc3N8c2VjdGlvbnxzdW1tYXJ5fHRpbWV8dmlkZW8iLGd0PS8galF1ZXJ5XGQrPSIoPzpudWxsfFxkKykiL2csbXQ9UmVnRXhwKCI8KD86IitodCsiKVtcXHMvPl0iLCJpIikseXQ9L15ccysvLHZ0PS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcdzpdKylbXj5dKilcLz4vZ2ksYnQ9LzwoW1x3Ol0rKS8seHQ9Lzx0Ym9keS9pLHd0PS88fCYjP1x3KzsvLFR0PS88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksQ3Q9L14oPzpjaGVja2JveHxyYWRpbykkL2ksTnQ9L2NoZWNrZWRccyooPzpbXj1dfD1ccyouY2hlY2tlZC4pL2ksa3Q9L14kfFwvKD86amF2YXxlY21hKXNjcmlwdC9pLEV0PS9edHJ1ZVwvKC4qKS8sU3Q9L15ccyo8ISg/OlxbQ0RBVEFcW3wtLSl8KD86XF1cXXwtLSk+XHMqJC9nLEF0PXtvcHRpb246WzEsIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz4iLCI8L3NlbGVjdD4iXSxsZWdlbmQ6WzEsIjxmaWVsZHNldD4iLCI8L2ZpZWxkc2V0PiJdLGFyZWE6WzEsIjxtYXA+IiwiPC9tYXA+Il0scGFyYW06WzEsIjxvYmplY3Q+IiwiPC9vYmplY3Q+Il0sdGhlYWQ6WzEsIjx0YWJsZT4iLCI8L3RhYmxlPiJdLHRyOlsyLCI8dGFibGU+PHRib2R5PiIsIjwvdGJvZHk+PC90YWJsZT4iXSxjb2w6WzIsIjx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+IiwiPC9jb2xncm91cD48L3RhYmxlPiJdLHRkOlszLCI8dGFibGU+PHRib2R5Pjx0cj4iLCI8L3RyPjwvdGJvZHk+PC90YWJsZT4iXSxfZGVmYXVsdDp4LnN1cHBvcnQuaHRtbFNlcmlhbGl6ZT9bMCwiIiwiIl06WzEsIlg8ZGl2PiIsIjwvZGl2PiJdfSxqdD1kdChhKSxEdD1qdC5hcHBlbmRDaGlsZChhLmNyZWF0ZUVsZW1lbnQoImRpdiIpKTtBdC5vcHRncm91cD1BdC5vcHRpb24sQXQudGJvZHk9QXQudGZvb3Q9QXQuY29sZ3JvdXA9QXQuY2FwdGlvbj1BdC50aGVhZCxBdC50aD1BdC50ZCx4LmZuLmV4dGVuZCh7dGV4dDpmdW5jdGlvbihlKXtyZXR1cm4geC5hY2Nlc3ModGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gZT09PXQ/eC50ZXh0KHRoaXMpOnRoaXMuZW1wdHkoKS5hcHBlbmQoKHRoaXNbMF0mJnRoaXNbMF0ub3duZXJEb2N1bWVudHx8YSkuY3JlYXRlVGV4dE5vZGUoZSkpfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihlKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIHQ9THQodGhpcyxlKTt0LmFwcGVuZENoaWxkKGUpfX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGUpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgdD1MdCh0aGlzLGUpO3QuaW5zZXJ0QmVmb3JlKGUsdC5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMubmV4dFNpYmxpbmcpfSl9LHJlbW92ZTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9ZT94LmZpbHRlcihlLHRoaXMpOnRoaXMsaT0wO2Zvcig7bnVsbCE9KG49cltpXSk7aSsrKXR8fDEhPT1uLm5vZGVUeXBlfHx4LmNsZWFuRGF0YShGdChuKSksbi5wYXJlbnROb2RlJiYodCYmeC5jb250YWlucyhuLm93bmVyRG9jdW1lbnQsbikmJl90KEZ0KG4sInNjcmlwdCIpKSxuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobikpO3JldHVybiB0aGlzfSxlbXB0eTpmdW5jdGlvbigpe3ZhciBlLHQ9MDtmb3IoO251bGwhPShlPXRoaXNbdF0pO3QrKyl7MT09PWUubm9kZVR5cGUmJnguY2xlYW5EYXRhKEZ0KGUsITEpKTt3aGlsZShlLmZpcnN0Q2hpbGQpZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpO2Uub3B0aW9ucyYmeC5ub2RlTmFtZShlLCJzZWxlY3QiKSYmKGUub3B0aW9ucy5sZW5ndGg9MCl9cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bnVsbD09ZT8hMTplLHQ9bnVsbD09dD9lOnQsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4geC5jbG9uZSh0aGlzLGUsdCl9KX0saHRtbDpmdW5jdGlvbihlKXtyZXR1cm4geC5hY2Nlc3ModGhpcyxmdW5jdGlvbihlKXt2YXIgbj10aGlzWzBdfHx7fSxyPTAsaT10aGlzLmxlbmd0aDtpZihlPT09dClyZXR1cm4gMT09PW4ubm9kZVR5cGU/bi5pbm5lckhUTUwucmVwbGFjZShndCwiIik6dDtpZighKCJzdHJpbmciIT10eXBlb2YgZXx8VHQudGVzdChlKXx8IXguc3VwcG9ydC5odG1sU2VyaWFsaXplJiZtdC50ZXN0KGUpfHwheC5zdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlJiZ5dC50ZXN0KGUpfHxBdFsoYnQuZXhlYyhlKXx8WyIiLCIiXSlbMV0udG9Mb3dlckNhc2UoKV0pKXtlPWUucmVwbGFjZSh2dCwiPCQxPjwvJDI+Iik7dHJ5e2Zvcig7aT5yO3IrKyluPXRoaXNbcl18fHt9LDE9PT1uLm5vZGVUeXBlJiYoeC5jbGVhbkRhdGEoRnQobiwhMSkpLG4uaW5uZXJIVE1MPWUpO249MH1jYXRjaChvKXt9fW4mJnRoaXMuZW1wdHkoKS5hcHBlbmQoZSl9LG51bGwsZSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgZT14Lm1hcCh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybltlLm5leHRTaWJsaW5nLGUucGFyZW50Tm9kZV19KSx0PTA7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKG4pe3ZhciByPWVbdCsrXSxpPWVbdCsrXTtpJiYociYmci5wYXJlbnROb2RlIT09aSYmKHI9dGhpcy5uZXh0U2libGluZykseCh0aGlzKS5yZW1vdmUoKSxpLmluc2VydEJlZm9yZShuLHIpKX0sITApLHQ/dGhpczp0aGlzLnJlbW92ZSgpfSxkZXRhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucmVtb3ZlKGUsITApfSxkb21NYW5pcDpmdW5jdGlvbihlLHQsbil7ZT1kLmFwcGx5KFtdLGUpO3ZhciByLGksbyxhLHMsbCx1PTAsYz10aGlzLmxlbmd0aCxwPXRoaXMsZj1jLTEsaD1lWzBdLGc9eC5pc0Z1bmN0aW9uKGgpO2lmKGd8fCEoMT49Y3x8InN0cmluZyIhPXR5cGVvZiBofHx4LnN1cHBvcnQuY2hlY2tDbG9uZSkmJk50LnRlc3QoaCkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihyKXt2YXIgaT1wLmVxKHIpO2cmJihlWzBdPWguY2FsbCh0aGlzLHIsaS5odG1sKCkpKSxpLmRvbU1hbmlwKGUsdCxuKX0pO2lmKGMmJihsPXguYnVpbGRGcmFnbWVudChlLHRoaXNbMF0ub3duZXJEb2N1bWVudCwhMSwhbiYmdGhpcykscj1sLmZpcnN0Q2hpbGQsMT09PWwuY2hpbGROb2Rlcy5sZW5ndGgmJihsPXIpLHIpKXtmb3IoYT14Lm1hcChGdChsLCJzY3JpcHQiKSxIdCksbz1hLmxlbmd0aDtjPnU7dSsrKWk9bCx1IT09ZiYmKGk9eC5jbG9uZShpLCEwLCEwKSxvJiZ4Lm1lcmdlKGEsRnQoaSwic2NyaXB0IikpKSx0LmNhbGwodGhpc1t1XSxpLHUpO2lmKG8pZm9yKHM9YVthLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LHgubWFwKGEscXQpLHU9MDtvPnU7dSsrKWk9YVt1XSxrdC50ZXN0KGkudHlwZXx8IiIpJiYheC5fZGF0YShpLCJnbG9iYWxFdmFsIikmJnguY29udGFpbnMocyxpKSYmKGkuc3JjP3guX2V2YWxVcmwoaS5zcmMpOnguZ2xvYmFsRXZhbCgoaS50ZXh0fHxpLnRleHRDb250ZW50fHxpLmlubmVySFRNTHx8IiIpLnJlcGxhY2UoU3QsIiIpKSk7bD1yPW51bGx9cmV0dXJuIHRoaXN9fSk7ZnVuY3Rpb24gTHQoZSx0KXtyZXR1cm4geC5ub2RlTmFtZShlLCJ0YWJsZSIpJiZ4Lm5vZGVOYW1lKDE9PT10Lm5vZGVUeXBlP3Q6dC5maXJzdENoaWxkLCJ0ciIpP2UuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInRib2R5IilbMF18fGUuYXBwZW5kQ2hpbGQoZS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRib2R5IikpOmV9ZnVuY3Rpb24gSHQoZSl7cmV0dXJuIGUudHlwZT0obnVsbCE9PXguZmluZC5hdHRyKGUsInR5cGUiKSkrIi8iK2UudHlwZSxlfWZ1bmN0aW9uIHF0KGUpe3ZhciB0PUV0LmV4ZWMoZS50eXBlKTtyZXR1cm4gdD9lLnR5cGU9dFsxXTplLnJlbW92ZUF0dHJpYnV0ZSgidHlwZSIpLGV9ZnVuY3Rpb24gX3QoZSx0KXt2YXIgbixyPTA7Zm9yKDtudWxsIT0obj1lW3JdKTtyKyspeC5fZGF0YShuLCJnbG9iYWxFdmFsIiwhdHx8eC5fZGF0YSh0W3JdLCJnbG9iYWxFdmFsIikpfWZ1bmN0aW9uIE10KGUsdCl7aWYoMT09PXQubm9kZVR5cGUmJnguaGFzRGF0YShlKSl7dmFyIG4scixpLG89eC5fZGF0YShlKSxhPXguX2RhdGEodCxvKSxzPW8uZXZlbnRzO2lmKHMpe2RlbGV0ZSBhLmhhbmRsZSxhLmV2ZW50cz17fTtmb3IobiBpbiBzKWZvcihyPTAsaT1zW25dLmxlbmd0aDtpPnI7cisrKXguZXZlbnQuYWRkKHQsbixzW25dW3JdKX1hLmRhdGEmJihhLmRhdGE9eC5leHRlbmQoe30sYS5kYXRhKSl9fWZ1bmN0aW9uIE90KGUsdCl7dmFyIG4scixpO2lmKDE9PT10Lm5vZGVUeXBlKXtpZihuPXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwheC5zdXBwb3J0Lm5vQ2xvbmVFdmVudCYmdFt4LmV4cGFuZG9dKXtpPXguX2RhdGEodCk7Zm9yKHIgaW4gaS5ldmVudHMpeC5yZW1vdmVFdmVudCh0LHIsaS5oYW5kbGUpO3QucmVtb3ZlQXR0cmlidXRlKHguZXhwYW5kbyl9InNjcmlwdCI9PT1uJiZ0LnRleHQhPT1lLnRleHQ/KEh0KHQpLnRleHQ9ZS50ZXh0LHF0KHQpKToib2JqZWN0Ij09PW4/KHQucGFyZW50Tm9kZSYmKHQub3V0ZXJIVE1MPWUub3V0ZXJIVE1MKSx4LnN1cHBvcnQuaHRtbDVDbG9uZSYmZS5pbm5lckhUTUwmJiF4LnRyaW0odC5pbm5lckhUTUwpJiYodC5pbm5lckhUTUw9ZS5pbm5lckhUTUwpKToiaW5wdXQiPT09biYmQ3QudGVzdChlLnR5cGUpPyh0LmRlZmF1bHRDaGVja2VkPXQuY2hlY2tlZD1lLmNoZWNrZWQsdC52YWx1ZSE9PWUudmFsdWUmJih0LnZhbHVlPWUudmFsdWUpKToib3B0aW9uIj09PW4/dC5kZWZhdWx0U2VsZWN0ZWQ9dC5zZWxlY3RlZD1lLmRlZmF1bHRTZWxlY3RlZDooImlucHV0Ij09PW58fCJ0ZXh0YXJlYSI9PT1uKSYmKHQuZGVmYXVsdFZhbHVlPWUuZGVmYXVsdFZhbHVlKX19eC5lYWNoKHthcHBlbmRUbzoiYXBwZW5kIixwcmVwZW5kVG86InByZXBlbmQiLGluc2VydEJlZm9yZToiYmVmb3JlIixpbnNlcnRBZnRlcjoiYWZ0ZXIiLHJlcGxhY2VBbGw6InJlcGxhY2VXaXRoIn0sZnVuY3Rpb24oZSx0KXt4LmZuW2VdPWZ1bmN0aW9uKGUpe3ZhciBuLHI9MCxpPVtdLG89eChlKSxhPW8ubGVuZ3RoLTE7Zm9yKDthPj1yO3IrKyluPXI9PT1hP3RoaXM6dGhpcy5jbG9uZSghMCkseChvW3JdKVt0XShuKSxoLmFwcGx5KGksbi5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGkpfX0pO2Z1bmN0aW9uIEZ0KGUsbil7dmFyIHIsbyxhPTAscz10eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZSE9PWk/ZS5nZXRFbGVtZW50c0J5VGFnTmFtZShufHwiKiIpOnR5cGVvZiBlLnF1ZXJ5U2VsZWN0b3JBbGwhPT1pP2UucXVlcnlTZWxlY3RvckFsbChufHwiKiIpOnQ7aWYoIXMpZm9yKHM9W10scj1lLmNoaWxkTm9kZXN8fGU7bnVsbCE9KG89clthXSk7YSsrKSFufHx4Lm5vZGVOYW1lKG8sbik/cy5wdXNoKG8pOngubWVyZ2UocyxGdChvLG4pKTtyZXR1cm4gbj09PXR8fG4mJngubm9kZU5hbWUoZSxuKT94Lm1lcmdlKFtlXSxzKTpzfWZ1bmN0aW9uIEJ0KGUpe0N0LnRlc3QoZS50eXBlKSYmKGUuZGVmYXVsdENoZWNrZWQ9ZS5jaGVja2VkKX14LmV4dGVuZCh7Y2xvbmU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsbD14LmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKTtpZih4LnN1cHBvcnQuaHRtbDVDbG9uZXx8eC5pc1hNTERvYyhlKXx8IW10LnRlc3QoIjwiK2Uubm9kZU5hbWUrIj4iKT9vPWUuY2xvbmVOb2RlKCEwKTooRHQuaW5uZXJIVE1MPWUub3V0ZXJIVE1MLER0LnJlbW92ZUNoaWxkKG89RHQuZmlyc3RDaGlsZCkpLCEoeC5zdXBwb3J0Lm5vQ2xvbmVFdmVudCYmeC5zdXBwb3J0Lm5vQ2xvbmVDaGVja2VkfHwxIT09ZS5ub2RlVHlwZSYmMTEhPT1lLm5vZGVUeXBlfHx4LmlzWE1MRG9jKGUpKSlmb3Iocj1GdChvKSxzPUZ0KGUpLGE9MDtudWxsIT0oaT1zW2FdKTsrK2EpclthXSYmT3QoaSxyW2FdKTtpZih0KWlmKG4pZm9yKHM9c3x8RnQoZSkscj1yfHxGdChvKSxhPTA7bnVsbCE9KGk9c1thXSk7YSsrKU10KGksclthXSk7ZWxzZSBNdChlLG8pO3JldHVybiByPUZ0KG8sInNjcmlwdCIpLHIubGVuZ3RoPjAmJl90KHIsIWwmJkZ0KGUsInNjcmlwdCIpKSxyPXM9aT1udWxsLG99LGJ1aWxkRnJhZ21lbnQ6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsbCx1LGMscD1lLmxlbmd0aCxmPWR0KHQpLGQ9W10saD0wO2Zvcig7cD5oO2grKylpZihvPWVbaF0sb3x8MD09PW8paWYoIm9iamVjdCI9PT14LnR5cGUobykpeC5tZXJnZShkLG8ubm9kZVR5cGU/W29dOm8pO2Vsc2UgaWYod3QudGVzdChvKSl7cz1zfHxmLmFwcGVuZENoaWxkKHQuY3JlYXRlRWxlbWVudCgiZGl2IikpLGw9KGJ0LmV4ZWMobyl8fFsiIiwiIl0pWzFdLnRvTG93ZXJDYXNlKCksYz1BdFtsXXx8QXQuX2RlZmF1bHQscy5pbm5lckhUTUw9Y1sxXStvLnJlcGxhY2UodnQsIjwkMT48LyQyPiIpK2NbMl0saT1jWzBdO3doaWxlKGktLSlzPXMubGFzdENoaWxkO2lmKCF4LnN1cHBvcnQubGVhZGluZ1doaXRlc3BhY2UmJnl0LnRlc3QobykmJmQucHVzaCh0LmNyZWF0ZVRleHROb2RlKHl0LmV4ZWMobylbMF0pKSwheC5zdXBwb3J0LnRib2R5KXtvPSJ0YWJsZSIhPT1sfHx4dC50ZXN0KG8pPyI8dGFibGU+IiE9PWNbMV18fHh0LnRlc3Qobyk/MDpzOnMuZmlyc3RDaGlsZCxpPW8mJm8uY2hpbGROb2Rlcy5sZW5ndGg7d2hpbGUoaS0tKXgubm9kZU5hbWUodT1vLmNoaWxkTm9kZXNbaV0sInRib2R5IikmJiF1LmNoaWxkTm9kZXMubGVuZ3RoJiZvLnJlbW92ZUNoaWxkKHUpfXgubWVyZ2UoZCxzLmNoaWxkTm9kZXMpLHMudGV4dENvbnRlbnQ9IiI7d2hpbGUocy5maXJzdENoaWxkKXMucmVtb3ZlQ2hpbGQocy5maXJzdENoaWxkKTtzPWYubGFzdENoaWxkfWVsc2UgZC5wdXNoKHQuY3JlYXRlVGV4dE5vZGUobykpO3MmJmYucmVtb3ZlQ2hpbGQocykseC5zdXBwb3J0LmFwcGVuZENoZWNrZWR8fHguZ3JlcChGdChkLCJpbnB1dCIpLEJ0KSxoPTA7d2hpbGUobz1kW2grK10paWYoKCFyfHwtMT09PXguaW5BcnJheShvLHIpKSYmKGE9eC5jb250YWlucyhvLm93bmVyRG9jdW1lbnQsbykscz1GdChmLmFwcGVuZENoaWxkKG8pLCJzY3JpcHQiKSxhJiZfdChzKSxuKSl7aT0wO3doaWxlKG89c1tpKytdKWt0LnRlc3Qoby50eXBlfHwiIikmJm4ucHVzaChvKX1yZXR1cm4gcz1udWxsLGZ9LGNsZWFuRGF0YTpmdW5jdGlvbihlLHQpe3ZhciBuLHIsbyxhLHM9MCxsPXguZXhwYW5kbyx1PXguY2FjaGUsYz14LnN1cHBvcnQuZGVsZXRlRXhwYW5kbyxmPXguZXZlbnQuc3BlY2lhbDtmb3IoO251bGwhPShuPWVbc10pO3MrKylpZigodHx8eC5hY2NlcHREYXRhKG4pKSYmKG89bltsXSxhPW8mJnVbb10pKXtpZihhLmV2ZW50cylmb3IociBpbiBhLmV2ZW50cylmW3JdP3guZXZlbnQucmVtb3ZlKG4scik6eC5yZW1vdmVFdmVudChuLHIsYS5oYW5kbGUpOwp1W29dJiYoZGVsZXRlIHVbb10sYz9kZWxldGUgbltsXTp0eXBlb2Ygbi5yZW1vdmVBdHRyaWJ1dGUhPT1pP24ucmVtb3ZlQXR0cmlidXRlKGwpOm5bbF09bnVsbCxwLnB1c2gobykpfX0sX2V2YWxVcmw6ZnVuY3Rpb24oZSl7cmV0dXJuIHguYWpheCh7dXJsOmUsdHlwZToiR0VUIixkYXRhVHlwZToic2NyaXB0Iixhc3luYzohMSxnbG9iYWw6ITEsInRocm93cyI6ITB9KX19KSx4LmZuLmV4dGVuZCh7d3JhcEFsbDpmdW5jdGlvbihlKXtpZih4LmlzRnVuY3Rpb24oZSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbih0KXt4KHRoaXMpLndyYXBBbGwoZS5jYWxsKHRoaXMsdCkpfSk7aWYodGhpc1swXSl7dmFyIHQ9eChlLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApO3RoaXNbMF0ucGFyZW50Tm9kZSYmdC5pbnNlcnRCZWZvcmUodGhpc1swXSksdC5tYXAoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3doaWxlKGUuZmlyc3RDaGlsZCYmMT09PWUuZmlyc3RDaGlsZC5ub2RlVHlwZSllPWUuZmlyc3RDaGlsZDtyZXR1cm4gZX0pLmFwcGVuZCh0aGlzKX1yZXR1cm4gdGhpc30sd3JhcElubmVyOmZ1bmN0aW9uKGUpe3JldHVybiB4LmlzRnVuY3Rpb24oZSk/dGhpcy5lYWNoKGZ1bmN0aW9uKHQpe3godGhpcykud3JhcElubmVyKGUuY2FsbCh0aGlzLHQpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PXgodGhpcyksbj10LmNvbnRlbnRzKCk7bi5sZW5ndGg/bi53cmFwQWxsKGUpOnQuYXBwZW5kKGUpfSl9LHdyYXA6ZnVuY3Rpb24oZSl7dmFyIHQ9eC5pc0Z1bmN0aW9uKGUpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24obil7eCh0aGlzKS53cmFwQWxsKHQ/ZS5jYWxsKHRoaXMsbik6ZSl9KX0sdW53cmFwOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpe3gubm9kZU5hbWUodGhpcywiYm9keSIpfHx4KHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyl9KS5lbmQoKX19KTt2YXIgUHQsUnQsV3QsJHQ9L2FscGhhXChbXildKlwpL2ksSXQ9L29wYWNpdHlccyo9XHMqKFteKV0qKS8senQ9L14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvLFh0PS9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxVdD0vXm1hcmdpbi8sVnQ9UmVnRXhwKCJeKCIrdysiKSguKikkIiwiaSIpLFl0PVJlZ0V4cCgiXigiK3crIikoPyFweClbYS16JV0rJCIsImkiKSxKdD1SZWdFeHAoIl4oWystXSk9KCIrdysiKSIsImkiKSxHdD17Qk9EWToiYmxvY2sifSxRdD17cG9zaXRpb246ImFic29sdXRlIix2aXNpYmlsaXR5OiJoaWRkZW4iLGRpc3BsYXk6ImJsb2NrIn0sS3Q9e2xldHRlclNwYWNpbmc6MCxmb250V2VpZ2h0OjQwMH0sWnQ9WyJUb3AiLCJSaWdodCIsIkJvdHRvbSIsIkxlZnQiXSxlbj1bIldlYmtpdCIsIk8iLCJNb3oiLCJtcyJdO2Z1bmN0aW9uIHRuKGUsdCl7aWYodCBpbiBlKXJldHVybiB0O3ZhciBuPXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKSxyPXQsaT1lbi5sZW5ndGg7d2hpbGUoaS0tKWlmKHQ9ZW5baV0rbix0IGluIGUpcmV0dXJuIHQ7cmV0dXJuIHJ9ZnVuY3Rpb24gbm4oZSx0KXtyZXR1cm4gZT10fHxlLCJub25lIj09PXguY3NzKGUsImRpc3BsYXkiKXx8IXguY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfWZ1bmN0aW9uIHJuKGUsdCl7dmFyIG4scixpLG89W10sYT0wLHM9ZS5sZW5ndGg7Zm9yKDtzPmE7YSsrKXI9ZVthXSxyLnN0eWxlJiYob1thXT14Ll9kYXRhKHIsIm9sZGRpc3BsYXkiKSxuPXIuc3R5bGUuZGlzcGxheSx0PyhvW2FdfHwibm9uZSIhPT1ufHwoci5zdHlsZS5kaXNwbGF5PSIiKSwiIj09PXIuc3R5bGUuZGlzcGxheSYmbm4ocikmJihvW2FdPXguX2RhdGEociwib2xkZGlzcGxheSIsbG4oci5ub2RlTmFtZSkpKSk6b1thXXx8KGk9bm4ociksKG4mJiJub25lIiE9PW58fCFpKSYmeC5fZGF0YShyLCJvbGRkaXNwbGF5IixpP246eC5jc3MociwiZGlzcGxheSIpKSkpO2ZvcihhPTA7cz5hO2ErKylyPWVbYV0sci5zdHlsZSYmKHQmJiJub25lIiE9PXIuc3R5bGUuZGlzcGxheSYmIiIhPT1yLnN0eWxlLmRpc3BsYXl8fChyLnN0eWxlLmRpc3BsYXk9dD9vW2FdfHwiIjoibm9uZSIpKTtyZXR1cm4gZX14LmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGUsbil7cmV0dXJuIHguYWNjZXNzKHRoaXMsZnVuY3Rpb24oZSxuLHIpe3ZhciBpLG8sYT17fSxzPTA7aWYoeC5pc0FycmF5KG4pKXtmb3Iobz1SdChlKSxpPW4ubGVuZ3RoO2k+cztzKyspYVtuW3NdXT14LmNzcyhlLG5bc10sITEsbyk7cmV0dXJuIGF9cmV0dXJuIHIhPT10P3guc3R5bGUoZSxuLHIpOnguY3NzKGUsbil9LGUsbixhcmd1bWVudHMubGVuZ3RoPjEpfSxzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIHJuKHRoaXMsITApfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIHJuKHRoaXMpfSx0b2dnbGU6ZnVuY3Rpb24oZSl7cmV0dXJuImJvb2xlYW4iPT10eXBlb2YgZT9lP3RoaXMuc2hvdygpOnRoaXMuaGlkZSgpOnRoaXMuZWFjaChmdW5jdGlvbigpe25uKHRoaXMpP3godGhpcykuc2hvdygpOngodGhpcykuaGlkZSgpfSl9fSkseC5leHRlbmQoe2Nzc0hvb2tzOntvcGFjaXR5OntnZXQ6ZnVuY3Rpb24oZSx0KXtpZih0KXt2YXIgbj1XdChlLCJvcGFjaXR5Iik7cmV0dXJuIiI9PT1uPyIxIjpufX19fSxjc3NOdW1iZXI6e2NvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwfSxjc3NQcm9wczp7ImZsb2F0Ijp4LnN1cHBvcnQuY3NzRmxvYXQ/ImNzc0Zsb2F0Ijoic3R5bGVGbG9hdCJ9LHN0eWxlOmZ1bmN0aW9uKGUsbixyLGkpe2lmKGUmJjMhPT1lLm5vZGVUeXBlJiY4IT09ZS5ub2RlVHlwZSYmZS5zdHlsZSl7dmFyIG8sYSxzLGw9eC5jYW1lbENhc2UobiksdT1lLnN0eWxlO2lmKG49eC5jc3NQcm9wc1tsXXx8KHguY3NzUHJvcHNbbF09dG4odSxsKSkscz14LmNzc0hvb2tzW25dfHx4LmNzc0hvb2tzW2xdLHI9PT10KXJldHVybiBzJiYiZ2V0ImluIHMmJihvPXMuZ2V0KGUsITEsaSkpIT09dD9vOnVbbl07aWYoYT10eXBlb2Ygciwic3RyaW5nIj09PWEmJihvPUp0LmV4ZWMocikpJiYocj0ob1sxXSsxKSpvWzJdK3BhcnNlRmxvYXQoeC5jc3MoZSxuKSksYT0ibnVtYmVyIiksIShudWxsPT1yfHwibnVtYmVyIj09PWEmJmlzTmFOKHIpfHwoIm51bWJlciIhPT1hfHx4LmNzc051bWJlcltsXXx8KHIrPSJweCIpLHguc3VwcG9ydC5jbGVhckNsb25lU3R5bGV8fCIiIT09cnx8MCE9PW4uaW5kZXhPZigiYmFja2dyb3VuZCIpfHwodVtuXT0iaW5oZXJpdCIpLHMmJiJzZXQiaW4gcyYmKHI9cy5zZXQoZSxyLGkpKT09PXQpKSl0cnl7dVtuXT1yfWNhdGNoKGMpe319fSxjc3M6ZnVuY3Rpb24oZSxuLHIsaSl7dmFyIG8sYSxzLGw9eC5jYW1lbENhc2Uobik7cmV0dXJuIG49eC5jc3NQcm9wc1tsXXx8KHguY3NzUHJvcHNbbF09dG4oZS5zdHlsZSxsKSkscz14LmNzc0hvb2tzW25dfHx4LmNzc0hvb2tzW2xdLHMmJiJnZXQiaW4gcyYmKGE9cy5nZXQoZSwhMCxyKSksYT09PXQmJihhPVd0KGUsbixpKSksIm5vcm1hbCI9PT1hJiZuIGluIEt0JiYoYT1LdFtuXSksIiI9PT1yfHxyPyhvPXBhcnNlRmxvYXQoYSkscj09PSEwfHx4LmlzTnVtZXJpYyhvKT9vfHwwOmEpOmF9fSksZS5nZXRDb21wdXRlZFN0eWxlPyhSdD1mdW5jdGlvbih0KXtyZXR1cm4gZS5nZXRDb21wdXRlZFN0eWxlKHQsbnVsbCl9LFd0PWZ1bmN0aW9uKGUsbixyKXt2YXIgaSxvLGEscz1yfHxSdChlKSxsPXM/cy5nZXRQcm9wZXJ0eVZhbHVlKG4pfHxzW25dOnQsdT1lLnN0eWxlO3JldHVybiBzJiYoIiIhPT1sfHx4LmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKXx8KGw9eC5zdHlsZShlLG4pKSxZdC50ZXN0KGwpJiZVdC50ZXN0KG4pJiYoaT11LndpZHRoLG89dS5taW5XaWR0aCxhPXUubWF4V2lkdGgsdS5taW5XaWR0aD11Lm1heFdpZHRoPXUud2lkdGg9bCxsPXMud2lkdGgsdS53aWR0aD1pLHUubWluV2lkdGg9byx1Lm1heFdpZHRoPWEpKSxsfSk6YS5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlJiYoUnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY3VycmVudFN0eWxlfSxXdD1mdW5jdGlvbihlLG4scil7dmFyIGksbyxhLHM9cnx8UnQoZSksbD1zP3Nbbl06dCx1PWUuc3R5bGU7cmV0dXJuIG51bGw9PWwmJnUmJnVbbl0mJihsPXVbbl0pLFl0LnRlc3QobCkmJiF6dC50ZXN0KG4pJiYoaT11LmxlZnQsbz1lLnJ1bnRpbWVTdHlsZSxhPW8mJm8ubGVmdCxhJiYoby5sZWZ0PWUuY3VycmVudFN0eWxlLmxlZnQpLHUubGVmdD0iZm9udFNpemUiPT09bj8iMWVtIjpsLGw9dS5waXhlbExlZnQrInB4Iix1LmxlZnQ9aSxhJiYoby5sZWZ0PWEpKSwiIj09PWw/ImF1dG8iOmx9KTtmdW5jdGlvbiBvbihlLHQsbil7dmFyIHI9VnQuZXhlYyh0KTtyZXR1cm4gcj9NYXRoLm1heCgwLHJbMV0tKG58fDApKSsoclsyXXx8InB4Iik6dH1mdW5jdGlvbiBhbihlLHQsbixyLGkpe3ZhciBvPW49PT0ocj8iYm9yZGVyIjoiY29udGVudCIpPzQ6IndpZHRoIj09PXQ/MTowLGE9MDtmb3IoOzQ+bztvKz0yKSJtYXJnaW4iPT09biYmKGErPXguY3NzKGUsbitadFtvXSwhMCxpKSkscj8oImNvbnRlbnQiPT09biYmKGEtPXguY3NzKGUsInBhZGRpbmciK1p0W29dLCEwLGkpKSwibWFyZ2luIiE9PW4mJihhLT14LmNzcyhlLCJib3JkZXIiK1p0W29dKyJXaWR0aCIsITAsaSkpKTooYSs9eC5jc3MoZSwicGFkZGluZyIrWnRbb10sITAsaSksInBhZGRpbmciIT09biYmKGErPXguY3NzKGUsImJvcmRlciIrWnRbb10rIldpZHRoIiwhMCxpKSkpO3JldHVybiBhfWZ1bmN0aW9uIHNuKGUsdCxuKXt2YXIgcj0hMCxpPSJ3aWR0aCI9PT10P2Uub2Zmc2V0V2lkdGg6ZS5vZmZzZXRIZWlnaHQsbz1SdChlKSxhPXguc3VwcG9ydC5ib3hTaXppbmcmJiJib3JkZXItYm94Ij09PXguY3NzKGUsImJveFNpemluZyIsITEsbyk7aWYoMD49aXx8bnVsbD09aSl7aWYoaT1XdChlLHQsbyksKDA+aXx8bnVsbD09aSkmJihpPWUuc3R5bGVbdF0pLFl0LnRlc3QoaSkpcmV0dXJuIGk7cj1hJiYoeC5zdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlfHxpPT09ZS5zdHlsZVt0XSksaT1wYXJzZUZsb2F0KGkpfHwwfXJldHVybiBpK2FuKGUsdCxufHwoYT8iYm9yZGVyIjoiY29udGVudCIpLHIsbykrInB4In1mdW5jdGlvbiBsbihlKXt2YXIgdD1hLG49R3RbZV07cmV0dXJuIG58fChuPXVuKGUsdCksIm5vbmUiIT09biYmbnx8KFB0PShQdHx8eCgiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPiIpLmNzcygiY3NzVGV4dCIsImRpc3BsYXk6YmxvY2sgIWltcG9ydGFudCIpKS5hcHBlbmRUbyh0LmRvY3VtZW50RWxlbWVudCksdD0oUHRbMF0uY29udGVudFdpbmRvd3x8UHRbMF0uY29udGVudERvY3VtZW50KS5kb2N1bWVudCx0LndyaXRlKCI8IWRvY3R5cGUgaHRtbD48aHRtbD48Ym9keT4iKSx0LmNsb3NlKCksbj11bihlLHQpLFB0LmRldGFjaCgpKSxHdFtlXT1uKSxufWZ1bmN0aW9uIHVuKGUsdCl7dmFyIG49eCh0LmNyZWF0ZUVsZW1lbnQoZSkpLmFwcGVuZFRvKHQuYm9keSkscj14LmNzcyhuWzBdLCJkaXNwbGF5Iik7cmV0dXJuIG4ucmVtb3ZlKCkscn14LmVhY2goWyJoZWlnaHQiLCJ3aWR0aCJdLGZ1bmN0aW9uKGUsbil7eC5jc3NIb29rc1tuXT17Z2V0OmZ1bmN0aW9uKGUscixpKXtyZXR1cm4gcj8wPT09ZS5vZmZzZXRXaWR0aCYmWHQudGVzdCh4LmNzcyhlLCJkaXNwbGF5IikpP3guc3dhcChlLFF0LGZ1bmN0aW9uKCl7cmV0dXJuIHNuKGUsbixpKX0pOnNuKGUsbixpKTp0fSxzZXQ6ZnVuY3Rpb24oZSx0LHIpe3ZhciBpPXImJlJ0KGUpO3JldHVybiBvbihlLHQscj9hbihlLG4scix4LnN1cHBvcnQuYm94U2l6aW5nJiYiYm9yZGVyLWJveCI9PT14LmNzcyhlLCJib3hTaXppbmciLCExLGkpLGkpOjApfX19KSx4LnN1cHBvcnQub3BhY2l0eXx8KHguY3NzSG9va3Mub3BhY2l0eT17Z2V0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIEl0LnRlc3QoKHQmJmUuY3VycmVudFN0eWxlP2UuY3VycmVudFN0eWxlLmZpbHRlcjplLnN0eWxlLmZpbHRlcil8fCIiKT8uMDEqcGFyc2VGbG9hdChSZWdFeHAuJDEpKyIiOnQ/IjEiOiIifSxzZXQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLnN0eWxlLHI9ZS5jdXJyZW50U3R5bGUsaT14LmlzTnVtZXJpYyh0KT8iYWxwaGEob3BhY2l0eT0iKzEwMCp0KyIpIjoiIixvPXImJnIuZmlsdGVyfHxuLmZpbHRlcnx8IiI7bi56b29tPTEsKHQ+PTF8fCIiPT09dCkmJiIiPT09eC50cmltKG8ucmVwbGFjZSgkdCwiIikpJiZuLnJlbW92ZUF0dHJpYnV0ZSYmKG4ucmVtb3ZlQXR0cmlidXRlKCJmaWx0ZXIiKSwiIj09PXR8fHImJiFyLmZpbHRlcil8fChuLmZpbHRlcj0kdC50ZXN0KG8pP28ucmVwbGFjZSgkdCxpKTpvKyIgIitpKX19KSx4KGZ1bmN0aW9uKCl7eC5zdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHR8fCh4LmNzc0hvb2tzLm1hcmdpblJpZ2h0PXtnZXQ6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gbj94LnN3YXAoZSx7ZGlzcGxheToiaW5saW5lLWJsb2NrIn0sV3QsW2UsIm1hcmdpblJpZ2h0Il0pOnR9fSksIXguc3VwcG9ydC5waXhlbFBvc2l0aW9uJiZ4LmZuLnBvc2l0aW9uJiZ4LmVhY2goWyJ0b3AiLCJsZWZ0Il0sZnVuY3Rpb24oZSxuKXt4LmNzc0hvb2tzW25dPXtnZXQ6ZnVuY3Rpb24oZSxyKXtyZXR1cm4gcj8ocj1XdChlLG4pLFl0LnRlc3Qocik/eChlKS5wb3NpdGlvbigpW25dKyJweCI6cik6dH19fSl9KSx4LmV4cHImJnguZXhwci5maWx0ZXJzJiYoeC5leHByLmZpbHRlcnMuaGlkZGVuPWZ1bmN0aW9uKGUpe3JldHVybiAwPj1lLm9mZnNldFdpZHRoJiYwPj1lLm9mZnNldEhlaWdodHx8IXguc3VwcG9ydC5yZWxpYWJsZUhpZGRlbk9mZnNldHMmJiJub25lIj09PShlLnN0eWxlJiZlLnN0eWxlLmRpc3BsYXl8fHguY3NzKGUsImRpc3BsYXkiKSl9LHguZXhwci5maWx0ZXJzLnZpc2libGU9ZnVuY3Rpb24oZSl7cmV0dXJuIXguZXhwci5maWx0ZXJzLmhpZGRlbihlKX0pLHguZWFjaCh7bWFyZ2luOiIiLHBhZGRpbmc6IiIsYm9yZGVyOiJXaWR0aCJ9LGZ1bmN0aW9uKGUsdCl7eC5jc3NIb29rc1tlK3RdPXtleHBhbmQ6ZnVuY3Rpb24obil7dmFyIHI9MCxpPXt9LG89InN0cmluZyI9PXR5cGVvZiBuP24uc3BsaXQoIiAiKTpbbl07Zm9yKDs0PnI7cisrKWlbZStadFtyXSt0XT1vW3JdfHxvW3ItMl18fG9bMF07cmV0dXJuIGl9fSxVdC50ZXN0KGUpfHwoeC5jc3NIb29rc1tlK3RdLnNldD1vbil9KTt2YXIgY249LyUyMC9nLHBuPS9cW1xdJC8sZm49L1xyP1xuL2csZG49L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLGhuPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTt4LmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHgucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgZT14LnByb3AodGhpcywiZWxlbWVudHMiKTtyZXR1cm4gZT94Lm1ha2VBcnJheShlKTp0aGlzfSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUmJiF4KHRoaXMpLmlzKCI6ZGlzYWJsZWQiKSYmaG4udGVzdCh0aGlzLm5vZGVOYW1lKSYmIWRuLnRlc3QoZSkmJih0aGlzLmNoZWNrZWR8fCFDdC50ZXN0KGUpKX0pLm1hcChmdW5jdGlvbihlLHQpe3ZhciBuPXgodGhpcykudmFsKCk7cmV0dXJuIG51bGw9PW4/bnVsbDp4LmlzQXJyYXkobik/eC5tYXAobixmdW5jdGlvbihlKXtyZXR1cm57bmFtZTp0Lm5hbWUsdmFsdWU6ZS5yZXBsYWNlKGZuLCJcclxuIil9fSk6e25hbWU6dC5uYW1lLHZhbHVlOm4ucmVwbGFjZShmbiwiXHJcbiIpfX0pLmdldCgpfX0pLHgucGFyYW09ZnVuY3Rpb24oZSxuKXt2YXIgcixpPVtdLG89ZnVuY3Rpb24oZSx0KXt0PXguaXNGdW5jdGlvbih0KT90KCk6bnVsbD09dD8iIjp0LGlbaS5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChlKSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KHQpfTtpZihuPT09dCYmKG49eC5hamF4U2V0dGluZ3MmJnguYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsKSx4LmlzQXJyYXkoZSl8fGUuanF1ZXJ5JiYheC5pc1BsYWluT2JqZWN0KGUpKXguZWFjaChlLGZ1bmN0aW9uKCl7byh0aGlzLm5hbWUsdGhpcy52YWx1ZSl9KTtlbHNlIGZvcihyIGluIGUpZ24ocixlW3JdLG4sbyk7cmV0dXJuIGkuam9pbigiJiIpLnJlcGxhY2UoY24sIisiKX07ZnVuY3Rpb24gZ24oZSx0LG4scil7dmFyIGk7aWYoeC5pc0FycmF5KHQpKXguZWFjaCh0LGZ1bmN0aW9uKHQsaSl7bnx8cG4udGVzdChlKT9yKGUsaSk6Z24oZSsiWyIrKCJvYmplY3QiPT10eXBlb2YgaT90OiIiKSsiXSIsaSxuLHIpfSk7ZWxzZSBpZihufHwib2JqZWN0IiE9PXgudHlwZSh0KSlyKGUsdCk7ZWxzZSBmb3IoaSBpbiB0KWduKGUrIlsiK2krIl0iLHRbaV0sbixyKX14LmVhY2goImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnUiLnNwbGl0KCIgIiksZnVuY3Rpb24oZSx0KXt4LmZuW3RdPWZ1bmN0aW9uKGUsbil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MD90aGlzLm9uKHQsbnVsbCxlLG4pOnRoaXMudHJpZ2dlcih0KX19KSx4LmZuLmV4dGVuZCh7aG92ZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5tb3VzZWVudGVyKGUpLm1vdXNlbGVhdmUodHx8ZSl9LGJpbmQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLm9uKGUsbnVsbCx0LG4pfSx1bmJpbmQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5vZmYoZSxudWxsLHQpfSxkZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5vbih0LGUsbixyKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGUsIioqIik6dGhpcy5vZmYodCxlfHwiKioiLG4pfX0pO3ZhciBtbix5bix2bj14Lm5vdygpLGJuPS9cPy8seG49LyMuKiQvLHduPS8oWz8mXSlfPVteJl0qLyxUbj0vXiguKj8pOlsgXHRdKihbXlxyXG5dKilccj8kL2dtLENuPS9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLE5uPS9eKD86R0VUfEhFQUQpJC8sa249L15cL1wvLyxFbj0vXihbXHcuKy1dKzopKD86XC9cLyhbXlwvPyM6XSopKD86OihcZCspfCl8KS8sU249eC5mbi5sb2FkLEFuPXt9LGpuPXt9LERuPSIqLyIuY29uY2F0KCIqIik7dHJ5e3luPW8uaHJlZn1jYXRjaChMbil7eW49YS5jcmVhdGVFbGVtZW50KCJhIikseW4uaHJlZj0iIix5bj15bi5ocmVmfW1uPUVuLmV4ZWMoeW4udG9Mb3dlckNhc2UoKSl8fFtdO2Z1bmN0aW9uIEhuKGUpe3JldHVybiBmdW5jdGlvbih0LG4peyJzdHJpbmciIT10eXBlb2YgdCYmKG49dCx0PSIqIik7dmFyIHIsaT0wLG89dC50b0xvd2VyQ2FzZSgpLm1hdGNoKFQpfHxbXTtpZih4LmlzRnVuY3Rpb24obikpd2hpbGUocj1vW2krK10pIisiPT09clswXT8ocj1yLnNsaWNlKDEpfHwiKiIsKGVbcl09ZVtyXXx8W10pLnVuc2hpZnQobikpOihlW3JdPWVbcl18fFtdKS5wdXNoKG4pfX1mdW5jdGlvbiBxbihlLG4scixpKXt2YXIgbz17fSxhPWU9PT1qbjtmdW5jdGlvbiBzKGwpe3ZhciB1O3JldHVybiBvW2xdPSEwLHguZWFjaChlW2xdfHxbXSxmdW5jdGlvbihlLGwpe3ZhciBjPWwobixyLGkpO3JldHVybiJzdHJpbmciIT10eXBlb2YgY3x8YXx8b1tjXT9hPyEodT1jKTp0OihuLmRhdGFUeXBlcy51bnNoaWZ0KGMpLHMoYyksITEpfSksdX1yZXR1cm4gcyhuLmRhdGFUeXBlc1swXSl8fCFvWyIqIl0mJnMoIioiKX1mdW5jdGlvbiBfbihlLG4pe3ZhciByLGksbz14LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKGkgaW4gbiluW2ldIT09dCYmKChvW2ldP2U6cnx8KHI9e30pKVtpXT1uW2ldKTtyZXR1cm4gciYmeC5leHRlbmQoITAsZSxyKSxlfXguZm4ubG9hZD1mdW5jdGlvbihlLG4scil7aWYoInN0cmluZyIhPXR5cGVvZiBlJiZTbilyZXR1cm4gU24uYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBpLG8sYSxzPXRoaXMsbD1lLmluZGV4T2YoIiAiKTtyZXR1cm4gbD49MCYmKGk9ZS5zbGljZShsLGUubGVuZ3RoKSxlPWUuc2xpY2UoMCxsKSkseC5pc0Z1bmN0aW9uKG4pPyhyPW4sbj10KTpuJiYib2JqZWN0Ij09dHlwZW9mIG4mJihhPSJQT1NUIikscy5sZW5ndGg+MCYmeC5hamF4KHt1cmw6ZSx0eXBlOmEsZGF0YVR5cGU6Imh0bWwiLGRhdGE6bn0pLmRvbmUoZnVuY3Rpb24oZSl7bz1hcmd1bWVudHMscy5odG1sKGk/eCgiPGRpdj4iKS5hcHBlbmQoeC5wYXJzZUhUTUwoZSkpLmZpbmQoaSk6ZSl9KS5jb21wbGV0ZShyJiZmdW5jdGlvbihlLHQpe3MuZWFjaChyLG98fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pLHRoaXN9LHguZWFjaChbImFqYXhTdGFydCIsImFqYXhTdG9wIiwiYWpheENvbXBsZXRlIiwiYWpheEVycm9yIiwiYWpheFN1Y2Nlc3MiLCJhamF4U2VuZCJdLGZ1bmN0aW9uKGUsdCl7eC5mblt0XT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5vbih0LGUpfX0pLHguZXh0ZW5kKHthY3RpdmU6MCxsYXN0TW9kaWZpZWQ6e30sZXRhZzp7fSxhamF4U2V0dGluZ3M6e3VybDp5bix0eXBlOiJHRVQiLGlzTG9jYWw6Q24udGVzdChtblsxXSksZ2xvYmFsOiEwLHByb2Nlc3NEYXRhOiEwLGFzeW5jOiEwLGNvbnRlbnRUeXBlOiJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLGFjY2VwdHM6eyIqIjpEbix0ZXh0OiJ0ZXh0L3BsYWluIixodG1sOiJ0ZXh0L2h0bWwiLHhtbDoiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCIsanNvbjoiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0In0sY29udGVudHM6e3htbDoveG1sLyxodG1sOi9odG1sLyxqc29uOi9qc29uL30scmVzcG9uc2VGaWVsZHM6e3htbDoicmVzcG9uc2VYTUwiLHRleHQ6InJlc3BvbnNlVGV4dCIsanNvbjoicmVzcG9uc2VKU09OIn0sY29udmVydGVyczp7IiogdGV4dCI6U3RyaW5nLCJ0ZXh0IGh0bWwiOiEwLCJ0ZXh0IGpzb24iOngucGFyc2VKU09OLCJ0ZXh0IHhtbCI6eC5wYXJzZVhNTH0sZmxhdE9wdGlvbnM6e3VybDohMCxjb250ZXh0OiEwfX0sYWpheFNldHVwOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/X24oX24oZSx4LmFqYXhTZXR0aW5ncyksdCk6X24oeC5hamF4U2V0dGluZ3MsZSl9LGFqYXhQcmVmaWx0ZXI6SG4oQW4pLGFqYXhUcmFuc3BvcnQ6SG4oam4pLGFqYXg6ZnVuY3Rpb24oZSxuKXsib2JqZWN0Ij09dHlwZW9mIGUmJihuPWUsZT10KSxuPW58fHt9O3ZhciByLGksbyxhLHMsbCx1LGMscD14LmFqYXhTZXR1cCh7fSxuKSxmPXAuY29udGV4dHx8cCxkPXAuY29udGV4dCYmKGYubm9kZVR5cGV8fGYuanF1ZXJ5KT94KGYpOnguZXZlbnQsaD14LkRlZmVycmVkKCksZz14LkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSxtPXAuc3RhdHVzQ29kZXx8e30seT17fSx2PXt9LGI9MCx3PSJjYW5jZWxlZCIsQz17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKDI9PT1iKXtpZighYyl7Yz17fTt3aGlsZSh0PVRuLmV4ZWMoYSkpY1t0WzFdLnRvTG93ZXJDYXNlKCldPXRbMl19dD1jW2UudG9Mb3dlckNhc2UoKV19cmV0dXJuIG51bGw9PXQ/bnVsbDp0fSxnZXRBbGxSZXNwb25zZUhlYWRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gMj09PWI/YTpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS50b0xvd2VyQ2FzZSgpO3JldHVybiBifHwoZT12W25dPXZbbl18fGUseVtlXT10KSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGUpe3JldHVybiBifHwocC5taW1lVHlwZT1lKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpaWYoMj5iKWZvcih0IGluIGUpbVt0XT1bbVt0XSxlW3RdXTtlbHNlIEMuYWx3YXlzKGVbQy5zdGF0dXNdKTtyZXR1cm4gdGhpc30sYWJvcnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZXx8dztyZXR1cm4gdSYmdS5hYm9ydCh0KSxrKDAsdCksdGhpc319O2lmKGgucHJvbWlzZShDKS5jb21wbGV0ZT1nLmFkZCxDLnN1Y2Nlc3M9Qy5kb25lLEMuZXJyb3I9Qy5mYWlsLHAudXJsPSgoZXx8cC51cmx8fHluKSsiIikucmVwbGFjZSh4biwiIikucmVwbGFjZShrbixtblsxXSsiLy8iKSxwLnR5cGU9bi5tZXRob2R8fG4udHlwZXx8cC5tZXRob2R8fHAudHlwZSxwLmRhdGFUeXBlcz14LnRyaW0ocC5kYXRhVHlwZXx8IioiKS50b0xvd2VyQ2FzZSgpLm1hdGNoKFQpfHxbIiJdLG51bGw9PXAuY3Jvc3NEb21haW4mJihyPUVuLmV4ZWMocC51cmwudG9Mb3dlckNhc2UoKSkscC5jcm9zc0RvbWFpbj0hKCFyfHxyWzFdPT09bW5bMV0mJnJbMl09PT1tblsyXSYmKHJbM118fCgiaHR0cDoiPT09clsxXT8iODAiOiI0NDMiKSk9PT0obW5bM118fCgiaHR0cDoiPT09bW5bMV0/IjgwIjoiNDQzIikpKSkscC5kYXRhJiZwLnByb2Nlc3NEYXRhJiYic3RyaW5nIiE9dHlwZW9mIHAuZGF0YSYmKHAuZGF0YT14LnBhcmFtKHAuZGF0YSxwLnRyYWRpdGlvbmFsKSkscW4oQW4scCxuLEMpLDI9PT1iKXJldHVybiBDO2w9cC5nbG9iYWwsbCYmMD09PXguYWN0aXZlKysmJnguZXZlbnQudHJpZ2dlcigiYWpheFN0YXJ0IikscC50eXBlPXAudHlwZS50b1VwcGVyQ2FzZSgpLHAuaGFzQ29udGVudD0hTm4udGVzdChwLnR5cGUpLG89cC51cmwscC5oYXNDb250ZW50fHwocC5kYXRhJiYobz1wLnVybCs9KGJuLnRlc3Qobyk/IiYiOiI/IikrcC5kYXRhLGRlbGV0ZSBwLmRhdGEpLHAuY2FjaGU9PT0hMSYmKHAudXJsPXduLnRlc3Qobyk/by5yZXBsYWNlKHduLCIkMV89Iit2bisrKTpvKyhibi50ZXN0KG8pPyImIjoiPyIpKyJfPSIrdm4rKykpLHAuaWZNb2RpZmllZCYmKHgubGFzdE1vZGlmaWVkW29dJiZDLnNldFJlcXVlc3RIZWFkZXIoIklmLU1vZGlmaWVkLVNpbmNlIix4Lmxhc3RNb2RpZmllZFtvXSkseC5ldGFnW29dJiZDLnNldFJlcXVlc3RIZWFkZXIoIklmLU5vbmUtTWF0Y2giLHguZXRhZ1tvXSkpLChwLmRhdGEmJnAuaGFzQ29udGVudCYmcC5jb250ZW50VHlwZSE9PSExfHxuLmNvbnRlbnRUeXBlKSYmQy5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLHAuY29udGVudFR5cGUpLEMuc2V0UmVxdWVzdEhlYWRlcigiQWNjZXB0IixwLmRhdGFUeXBlc1swXSYmcC5hY2NlcHRzW3AuZGF0YVR5cGVzWzBdXT9wLmFjY2VwdHNbcC5kYXRhVHlwZXNbMF1dKygiKiIhPT1wLmRhdGFUeXBlc1swXT8iLCAiK0RuKyI7IHE9MC4wMSI6IiIpOnAuYWNjZXB0c1siKiJdKTtmb3IoaSBpbiBwLmhlYWRlcnMpQy5zZXRSZXF1ZXN0SGVhZGVyKGkscC5oZWFkZXJzW2ldKTtpZihwLmJlZm9yZVNlbmQmJihwLmJlZm9yZVNlbmQuY2FsbChmLEMscCk9PT0hMXx8Mj09PWIpKXJldHVybiBDLmFib3J0KCk7dz0iYWJvcnQiO2ZvcihpIGlue3N1Y2Nlc3M6MSxlcnJvcjoxLGNvbXBsZXRlOjF9KUNbaV0ocFtpXSk7aWYodT1xbihqbixwLG4sQykpe0MucmVhZHlTdGF0ZT0xLGwmJmQudHJpZ2dlcigiYWpheFNlbmQiLFtDLHBdKSxwLmFzeW5jJiZwLnRpbWVvdXQ+MCYmKHM9c2V0VGltZW91dChmdW5jdGlvbigpe0MuYWJvcnQoInRpbWVvdXQiKX0scC50aW1lb3V0KSk7dHJ5e2I9MSx1LnNlbmQoeSxrKX1jYXRjaChOKXtpZighKDI+YikpdGhyb3cgTjtrKC0xLE4pfX1lbHNlIGsoLTEsIk5vIFRyYW5zcG9ydCIpO2Z1bmN0aW9uIGsoZSxuLHIsaSl7dmFyIGMseSx2LHcsVCxOPW47MiE9PWImJihiPTIscyYmY2xlYXJUaW1lb3V0KHMpLHU9dCxhPWl8fCIiLEMucmVhZHlTdGF0ZT1lPjA/NDowLGM9ZT49MjAwJiYzMDA+ZXx8MzA0PT09ZSxyJiYodz1NbihwLEMscikpLHc9T24ocCx3LEMsYyksYz8ocC5pZk1vZGlmaWVkJiYoVD1DLmdldFJlc3BvbnNlSGVhZGVyKCJMYXN0LU1vZGlmaWVkIiksVCYmKHgubGFzdE1vZGlmaWVkW29dPVQpLFQ9Qy5nZXRSZXNwb25zZUhlYWRlcigiZXRhZyIpLFQmJih4LmV0YWdbb109VCkpLDIwND09PWV8fCJIRUFEIj09PXAudHlwZT9OPSJub2NvbnRlbnQiOjMwND09PWU/Tj0ibm90bW9kaWZpZWQiOihOPXcuc3RhdGUseT13LmRhdGEsdj13LmVycm9yLGM9IXYpKToodj1OLChlfHwhTikmJihOPSJlcnJvciIsMD5lJiYoZT0wKSkpLEMuc3RhdHVzPWUsQy5zdGF0dXNUZXh0PShufHxOKSsiIixjP2gucmVzb2x2ZVdpdGgoZixbeSxOLENdKTpoLnJlamVjdFdpdGgoZixbQyxOLHZdKSxDLnN0YXR1c0NvZGUobSksbT10LGwmJmQudHJpZ2dlcihjPyJhamF4U3VjY2VzcyI6ImFqYXhFcnJvciIsW0MscCxjP3k6dl0pLGcuZmlyZVdpdGgoZixbQyxOXSksbCYmKGQudHJpZ2dlcigiYWpheENvbXBsZXRlIixbQyxwXSksLS14LmFjdGl2ZXx8eC5ldmVudC50cmlnZ2VyKCJhamF4U3RvcCIpKSl9cmV0dXJuIEN9LGdldEpTT046ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB4LmdldChlLHQsbiwianNvbiIpfSxnZXRTY3JpcHQ6ZnVuY3Rpb24oZSxuKXtyZXR1cm4geC5nZXQoZSx0LG4sInNjcmlwdCIpfX0pLHguZWFjaChbImdldCIsInBvc3QiXSxmdW5jdGlvbihlLG4pe3hbbl09ZnVuY3Rpb24oZSxyLGksbyl7cmV0dXJuIHguaXNGdW5jdGlvbihyKSYmKG89b3x8aSxpPXIscj10KSx4LmFqYXgoe3VybDplLHR5cGU6bixkYXRhVHlwZTpvLGRhdGE6cixzdWNjZXNzOml9KX19KTtmdW5jdGlvbiBNbihlLG4scil7dmFyIGksbyxhLHMsbD1lLmNvbnRlbnRzLHU9ZS5kYXRhVHlwZXM7d2hpbGUoIioiPT09dVswXSl1LnNoaWZ0KCksbz09PXQmJihvPWUubWltZVR5cGV8fG4uZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtVHlwZSIpKTtpZihvKWZvcihzIGluIGwpaWYobFtzXSYmbFtzXS50ZXN0KG8pKXt1LnVuc2hpZnQocyk7YnJlYWt9aWYodVswXWluIHIpYT11WzBdO2Vsc2V7Zm9yKHMgaW4gcil7aWYoIXVbMF18fGUuY29udmVydGVyc1tzKyIgIit1WzBdXSl7YT1zO2JyZWFrfWl8fChpPXMpfWE9YXx8aX1yZXR1cm4gYT8oYSE9PXVbMF0mJnUudW5zaGlmdChhKSxyW2FdKTp0fWZ1bmN0aW9uIE9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzLGwsdT17fSxjPWUuZGF0YVR5cGVzLnNsaWNlKCk7aWYoY1sxXSlmb3IoYSBpbiBlLmNvbnZlcnRlcnMpdVthLnRvTG93ZXJDYXNlKCldPWUuY29udmVydGVyc1thXTtvPWMuc2hpZnQoKTt3aGlsZShvKWlmKGUucmVzcG9uc2VGaWVsZHNbb10mJihuW2UucmVzcG9uc2VGaWVsZHNbb11dPXQpLCFsJiZyJiZlLmRhdGFGaWx0ZXImJih0PWUuZGF0YUZpbHRlcih0LGUuZGF0YVR5cGUpKSxsPW8sbz1jLnNoaWZ0KCkpaWYoIioiPT09bylvPWw7ZWxzZSBpZigiKiIhPT1sJiZsIT09byl7aWYoYT11W2wrIiAiK29dfHx1WyIqICIrb10sIWEpZm9yKGkgaW4gdSlpZihzPWkuc3BsaXQoIiAiKSxzWzFdPT09byYmKGE9dVtsKyIgIitzWzBdXXx8dVsiKiAiK3NbMF1dKSl7YT09PSEwP2E9dVtpXTp1W2ldIT09ITAmJihvPXNbMF0sYy51bnNoaWZ0KHNbMV0pKTticmVha31pZihhIT09ITApaWYoYSYmZVsidGhyb3dzIl0pdD1hKHQpO2Vsc2UgdHJ5e3Q9YSh0KX1jYXRjaChwKXtyZXR1cm57c3RhdGU6InBhcnNlcmVycm9yIixlcnJvcjphP3A6Ik5vIGNvbnZlcnNpb24gZnJvbSAiK2wrIiB0byAiK299fX1yZXR1cm57c3RhdGU6InN1Y2Nlc3MiLGRhdGE6dH19eC5hamF4U2V0dXAoe2FjY2VwdHM6e3NjcmlwdDoidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHQifSxjb250ZW50czp7c2NyaXB0Oi8oPzpqYXZhfGVjbWEpc2NyaXB0L30sY29udmVydGVyczp7InRleHQgc2NyaXB0IjpmdW5jdGlvbihlKXtyZXR1cm4geC5nbG9iYWxFdmFsKGUpLGV9fX0pLHguYWpheFByZWZpbHRlcigic2NyaXB0IixmdW5jdGlvbihlKXtlLmNhY2hlPT09dCYmKGUuY2FjaGU9ITEpLGUuY3Jvc3NEb21haW4mJihlLnR5cGU9IkdFVCIsZS5nbG9iYWw9ITEpfSkseC5hamF4VHJhbnNwb3J0KCJzY3JpcHQiLGZ1bmN0aW9uKGUpe2lmKGUuY3Jvc3NEb21haW4pe3ZhciBuLHI9YS5oZWFkfHx4KCJoZWFkIilbMF18fGEuZG9jdW1lbnRFbGVtZW50O3JldHVybntzZW5kOmZ1bmN0aW9uKHQsaSl7bj1hLmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpLG4uYXN5bmM9ITAsZS5zY3JpcHRDaGFyc2V0JiYobi5jaGFyc2V0PWUuc2NyaXB0Q2hhcnNldCksbi5zcmM9ZS51cmwsbi5vbmxvYWQ9bi5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oZSx0KXsodHx8IW4ucmVhZHlTdGF0ZXx8L2xvYWRlZHxjb21wbGV0ZS8udGVzdChuLnJlYWR5U3RhdGUpKSYmKG4ub25sb2FkPW4ub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsbi5wYXJlbnROb2RlJiZuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobiksbj1udWxsLHR8fGkoMjAwLCJzdWNjZXNzIikpfSxyLmluc2VydEJlZm9yZShuLHIuZmlyc3RDaGlsZCl9LGFib3J0OmZ1bmN0aW9uKCl7biYmbi5vbmxvYWQodCwhMCl9fX19KTt2YXIgRm49W10sQm49Lyg9KVw/KD89JnwkKXxcP1w/Lzt4LmFqYXhTZXR1cCh7anNvbnA6ImNhbGxiYWNrIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGU9Rm4ucG9wKCl8fHguZXhwYW5kbysiXyIrdm4rKztyZXR1cm4gdGhpc1tlXT0hMCxlfX0pLHguYWpheFByZWZpbHRlcigianNvbiBqc29ucCIsZnVuY3Rpb24obixyLGkpe3ZhciBvLGEscyxsPW4uanNvbnAhPT0hMSYmKEJuLnRlc3Qobi51cmwpPyJ1cmwiOiJzdHJpbmciPT10eXBlb2Ygbi5kYXRhJiYhKG4uY29udGVudFR5cGV8fCIiKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSYmQm4udGVzdChuLmRhdGEpJiYiZGF0YSIpO3JldHVybiBsfHwianNvbnAiPT09bi5kYXRhVHlwZXNbMF0/KG89bi5qc29ucENhbGxiYWNrPXguaXNGdW5jdGlvbihuLmpzb25wQ2FsbGJhY2spP24uanNvbnBDYWxsYmFjaygpOm4uanNvbnBDYWxsYmFjayxsP25bbF09bltsXS5yZXBsYWNlKEJuLCIkMSIrbyk6bi5qc29ucCE9PSExJiYobi51cmwrPShibi50ZXN0KG4udXJsKT8iJiI6Ij8iKStuLmpzb25wKyI9IitvKSxuLmNvbnZlcnRlcnNbInNjcmlwdCBqc29uIl09ZnVuY3Rpb24oKXtyZXR1cm4gc3x8eC5lcnJvcihvKyIgd2FzIG5vdCBjYWxsZWQiKSxzWzBdfSxuLmRhdGFUeXBlc1swXT0ianNvbiIsYT1lW29dLGVbb109ZnVuY3Rpb24oKXtzPWFyZ3VtZW50c30saS5hbHdheXMoZnVuY3Rpb24oKXtlW29dPWEsbltvXSYmKG4uanNvbnBDYWxsYmFjaz1yLmpzb25wQ2FsbGJhY2ssRm4ucHVzaChvKSkscyYmeC5pc0Z1bmN0aW9uKGEpJiZhKHNbMF0pLHM9YT10fSksInNjcmlwdCIpOnR9KTt2YXIgUG4sUm4sV249MCwkbj1lLkFjdGl2ZVhPYmplY3QmJmZ1bmN0aW9uKCl7dmFyIGU7Zm9yKGUgaW4gUG4pUG5bZV0odCwhMCl9O2Z1bmN0aW9uIEluKCl7dHJ5e3JldHVybiBuZXcgZS5YTUxIdHRwUmVxdWVzdH1jYXRjaCh0KXt9fWZ1bmN0aW9uIHpuKCl7dHJ5e3JldHVybiBuZXcgZS5BY3RpdmVYT2JqZWN0KCJNaWNyb3NvZnQuWE1MSFRUUCIpfWNhdGNoKHQpe319eC5hamF4U2V0dGluZ3MueGhyPWUuQWN0aXZlWE9iamVjdD9mdW5jdGlvbigpe3JldHVybiF0aGlzLmlzTG9jYWwmJkluKCl8fHpuKCl9OkluLFJuPXguYWpheFNldHRpbmdzLnhocigpLHguc3VwcG9ydC5jb3JzPSEhUm4mJiJ3aXRoQ3JlZGVudGlhbHMiaW4gUm4sUm49eC5zdXBwb3J0LmFqYXg9ISFSbixSbiYmeC5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKG4pe2lmKCFuLmNyb3NzRG9tYWlufHx4LnN1cHBvcnQuY29ycyl7dmFyIHI7cmV0dXJue3NlbmQ6ZnVuY3Rpb24oaSxvKXt2YXIgYSxzLGw9bi54aHIoKTtpZihuLnVzZXJuYW1lP2wub3BlbihuLnR5cGUsbi51cmwsbi5hc3luYyxuLnVzZXJuYW1lLG4ucGFzc3dvcmQpOmwub3BlbihuLnR5cGUsbi51cmwsbi5hc3luYyksbi54aHJGaWVsZHMpZm9yKHMgaW4gbi54aHJGaWVsZHMpbFtzXT1uLnhockZpZWxkc1tzXTtuLm1pbWVUeXBlJiZsLm92ZXJyaWRlTWltZVR5cGUmJmwub3ZlcnJpZGVNaW1lVHlwZShuLm1pbWVUeXBlKSxuLmNyb3NzRG9tYWlufHxpWyJYLVJlcXVlc3RlZC1XaXRoIl18fChpWyJYLVJlcXVlc3RlZC1XaXRoIl09IlhNTEh0dHBSZXF1ZXN0Iik7dHJ5e2ZvcihzIGluIGkpbC5zZXRSZXF1ZXN0SGVhZGVyKHMsaVtzXSl9Y2F0Y2godSl7fWwuc2VuZChuLmhhc0NvbnRlbnQmJm4uZGF0YXx8bnVsbCkscj1mdW5jdGlvbihlLGkpe3ZhciBzLHUsYyxwO3RyeXtpZihyJiYoaXx8ND09PWwucmVhZHlTdGF0ZSkpaWYocj10LGEmJihsLm9ucmVhZHlzdGF0ZWNoYW5nZT14Lm5vb3AsJG4mJmRlbGV0ZSBQblthXSksaSk0IT09bC5yZWFkeVN0YXRlJiZsLmFib3J0KCk7ZWxzZXtwPXt9LHM9bC5zdGF0dXMsdT1sLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLCJzdHJpbmciPT10eXBlb2YgbC5yZXNwb25zZVRleHQmJihwLnRleHQ9bC5yZXNwb25zZVRleHQpO3RyeXtjPWwuc3RhdHVzVGV4dH1jYXRjaChmKXtjPSIifXN8fCFuLmlzTG9jYWx8fG4uY3Jvc3NEb21haW4/MTIyMz09PXMmJihzPTIwNCk6cz1wLnRleHQ/MjAwOjQwNH19Y2F0Y2goZCl7aXx8bygtMSxkKX1wJiZvKHMsYyxwLHUpfSxuLmFzeW5jPzQ9PT1sLnJlYWR5U3RhdGU/c2V0VGltZW91dChyKTooYT0rK1duLCRuJiYoUG58fChQbj17fSx4KGUpLnVubG9hZCgkbikpLFBuW2FdPXIpLGwub25yZWFkeXN0YXRlY2hhbmdlPXIpOnIoKX0sYWJvcnQ6ZnVuY3Rpb24oKXtyJiZyKHQsITApfX19fSk7dmFyIFhuLFVuLFZuPS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxZbj1SZWdFeHAoIl4oPzooWystXSk9fCkoIit3KyIpKFthLXolXSopJCIsImkiKSxKbj0vcXVldWVIb29rcyQvLEduPVtucl0sUW49eyIqIjpbZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmNyZWF0ZVR3ZWVuKGUsdCkscj1uLmN1cigpLGk9WW4uZXhlYyh0KSxvPWkmJmlbM118fCh4LmNzc051bWJlcltlXT8iIjoicHgiKSxhPSh4LmNzc051bWJlcltlXXx8InB4IiE9PW8mJityKSYmWW4uZXhlYyh4LmNzcyhuLmVsZW0sZSkpLHM9MSxsPTIwO2lmKGEmJmFbM10hPT1vKXtvPW98fGFbM10saT1pfHxbXSxhPStyfHwxO2RvIHM9c3x8Ii41IixhLz1zLHguc3R5bGUobi5lbGVtLGUsYStvKTt3aGlsZShzIT09KHM9bi5jdXIoKS9yKSYmMSE9PXMmJi0tbCl9cmV0dXJuIGkmJihhPW4uc3RhcnQ9K2F8fCtyfHwwLG4udW5pdD1vLG4uZW5kPWlbMV0/YSsoaVsxXSsxKSppWzJdOitpWzJdKSxufV19O2Z1bmN0aW9uIEtuKCl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtYbj10fSksWG49eC5ub3coKX1mdW5jdGlvbiBabihlLHQsbil7dmFyIHIsaT0oUW5bdF18fFtdKS5jb25jYXQoUW5bIioiXSksbz0wLGE9aS5sZW5ndGg7Zm9yKDthPm87bysrKWlmKHI9aVtvXS5jYWxsKG4sdCxlKSlyZXR1cm4gcn1mdW5jdGlvbiBlcihlLHQsbil7dmFyIHIsaSxvPTAsYT1Hbi5sZW5ndGgscz14LkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCl7ZGVsZXRlIGwuZWxlbX0pLGw9ZnVuY3Rpb24oKXtpZihpKXJldHVybiExO3ZhciB0PVhufHxLbigpLG49TWF0aC5tYXgoMCx1LnN0YXJ0VGltZSt1LmR1cmF0aW9uLXQpLHI9bi91LmR1cmF0aW9ufHwwLG89MS1yLGE9MCxsPXUudHdlZW5zLmxlbmd0aDtmb3IoO2w+YTthKyspdS50d2VlbnNbYV0ucnVuKG8pO3JldHVybiBzLm5vdGlmeVdpdGgoZSxbdSxvLG5dKSwxPm8mJmw/bjoocy5yZXNvbHZlV2l0aChlLFt1XSksITEpfSx1PXMucHJvbWlzZSh7ZWxlbTplLHByb3BzOnguZXh0ZW5kKHt9LHQpLG9wdHM6eC5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e319LG4pLG9yaWdpbmFsUHJvcGVydGllczp0LG9yaWdpbmFsT3B0aW9uczpuLHN0YXJ0VGltZTpYbnx8S24oKSxkdXJhdGlvbjpuLmR1cmF0aW9uLHR3ZWVuczpbXSxjcmVhdGVUd2VlbjpmdW5jdGlvbih0LG4pe3ZhciByPXguVHdlZW4oZSx1Lm9wdHMsdCxuLHUub3B0cy5zcGVjaWFsRWFzaW5nW3RdfHx1Lm9wdHMuZWFzaW5nKTtyZXR1cm4gdS50d2VlbnMucHVzaChyKSxyfSxzdG9wOmZ1bmN0aW9uKHQpe3ZhciBuPTAscj10P3UudHdlZW5zLmxlbmd0aDowO2lmKGkpcmV0dXJuIHRoaXM7Zm9yKGk9ITA7cj5uO24rKyl1LnR3ZWVuc1tuXS5ydW4oMSk7cmV0dXJuIHQ/cy5yZXNvbHZlV2l0aChlLFt1LHRdKTpzLnJlamVjdFdpdGgoZSxbdSx0XSksdGhpc319KSxjPXUucHJvcHM7Zm9yKHRyKGMsdS5vcHRzLnNwZWNpYWxFYXNpbmcpO2E+bztvKyspaWYocj1HbltvXS5jYWxsKHUsZSxjLHUub3B0cykpcmV0dXJuIHI7cmV0dXJuIHgubWFwKGMsWm4sdSkseC5pc0Z1bmN0aW9uKHUub3B0cy5zdGFydCkmJnUub3B0cy5zdGFydC5jYWxsKGUsdSkseC5meC50aW1lcih4LmV4dGVuZChsLHtlbGVtOmUsYW5pbTp1LHF1ZXVlOnUub3B0cy5xdWV1ZX0pKSx1LnByb2dyZXNzKHUub3B0cy5wcm9ncmVzcykuZG9uZSh1Lm9wdHMuZG9uZSx1Lm9wdHMuY29tcGxldGUpLmZhaWwodS5vcHRzLmZhaWwpLmFsd2F5cyh1Lm9wdHMuYWx3YXlzKX1mdW5jdGlvbiB0cihlLHQpe3ZhciBuLHIsaSxvLGE7Zm9yKG4gaW4gZSlpZihyPXguY2FtZWxDYXNlKG4pLGk9dFtyXSxvPWVbbl0seC5pc0FycmF5KG8pJiYoaT1vWzFdLG89ZVtuXT1vWzBdKSxuIT09ciYmKGVbcl09byxkZWxldGUgZVtuXSksYT14LmNzc0hvb2tzW3JdLGEmJiJleHBhbmQiaW4gYSl7bz1hLmV4cGFuZChvKSxkZWxldGUgZVtyXTtmb3IobiBpbiBvKW4gaW4gZXx8KGVbbl09b1tuXSx0W25dPWkpfWVsc2UgdFtyXT1pfXguQW5pbWF0aW9uPXguZXh0ZW5kKGVyLHt0d2VlbmVyOmZ1bmN0aW9uKGUsdCl7eC5pc0Z1bmN0aW9uKGUpPyh0PWUsZT1bIioiXSk6ZT1lLnNwbGl0KCIgIik7dmFyIG4scj0wLGk9ZS5sZW5ndGg7Zm9yKDtpPnI7cisrKW49ZVtyXSxRbltuXT1RbltuXXx8W10sUW5bbl0udW5zaGlmdCh0KX0scHJlZmlsdGVyOmZ1bmN0aW9uKGUsdCl7dD9Hbi51bnNoaWZ0KGUpOkduLnB1c2goZSl9fSk7ZnVuY3Rpb24gbnIoZSx0LG4pe3ZhciByLGksbyxhLHMsbCx1PXRoaXMsYz17fSxwPWUuc3R5bGUsZj1lLm5vZGVUeXBlJiZubihlKSxkPXguX2RhdGEoZSwiZnhzaG93Iik7bi5xdWV1ZXx8KHM9eC5fcXVldWVIb29rcyhlLCJmeCIpLG51bGw9PXMudW5xdWV1ZWQmJihzLnVucXVldWVkPTAsbD1zLmVtcHR5LmZpcmUscy5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7cy51bnF1ZXVlZHx8bCgpfSkscy51bnF1ZXVlZCsrLHUuYWx3YXlzKGZ1bmN0aW9uKCl7dS5hbHdheXMoZnVuY3Rpb24oKXtzLnVucXVldWVkLS0seC5xdWV1ZShlLCJmeCIpLmxlbmd0aHx8cy5lbXB0eS5maXJlKCl9KX0pKSwxPT09ZS5ub2RlVHlwZSYmKCJoZWlnaHQiaW4gdHx8IndpZHRoImluIHQpJiYobi5vdmVyZmxvdz1bcC5vdmVyZmxvdyxwLm92ZXJmbG93WCxwLm92ZXJmbG93WV0sImlubGluZSI9PT14LmNzcyhlLCJkaXNwbGF5IikmJiJub25lIj09PXguY3NzKGUsImZsb2F0IikmJih4LnN1cHBvcnQuaW5saW5lQmxvY2tOZWVkc0xheW91dCYmImlubGluZSIhPT1sbihlLm5vZGVOYW1lKT9wLnpvb209MTpwLmRpc3BsYXk9ImlubGluZS1ibG9jayIpKSxuLm92ZXJmbG93JiYocC5vdmVyZmxvdz0iaGlkZGVuIix4LnN1cHBvcnQuc2hyaW5rV3JhcEJsb2Nrc3x8dS5hbHdheXMoZnVuY3Rpb24oKXtwLm92ZXJmbG93PW4ub3ZlcmZsb3dbMF0scC5vdmVyZmxvd1g9bi5vdmVyZmxvd1sxXSxwLm92ZXJmbG93WT1uLm92ZXJmbG93WzJdfSkpO2ZvcihyIGluIHQpaWYoaT10W3JdLFZuLmV4ZWMoaSkpe2lmKGRlbGV0ZSB0W3JdLG89b3x8InRvZ2dsZSI9PT1pLGk9PT0oZj8iaGlkZSI6InNob3ciKSljb250aW51ZTtjW3JdPWQmJmRbcl18fHguc3R5bGUoZSxyKX1pZigheC5pc0VtcHR5T2JqZWN0KGMpKXtkPyJoaWRkZW4iaW4gZCYmKGY9ZC5oaWRkZW4pOmQ9eC5fZGF0YShlLCJmeHNob3ciLHt9KSxvJiYoZC5oaWRkZW49IWYpLGY/eChlKS5zaG93KCk6dS5kb25lKGZ1bmN0aW9uKCl7eChlKS5oaWRlKCl9KSx1LmRvbmUoZnVuY3Rpb24oKXt2YXIgdDt4Ll9yZW1vdmVEYXRhKGUsImZ4c2hvdyIpO2Zvcih0IGluIGMpeC5zdHlsZShlLHQsY1t0XSl9KTtmb3IociBpbiBjKWE9Wm4oZj9kW3JdOjAscix1KSxyIGluIGR8fChkW3JdPWEuc3RhcnQsZiYmKGEuZW5kPWEuc3RhcnQsYS5zdGFydD0id2lkdGgiPT09cnx8ImhlaWdodCI9PT1yPzE6MCkpfX1mdW5jdGlvbiBycihlLHQsbixyLGkpe3JldHVybiBuZXcgcnIucHJvdG90eXBlLmluaXQoZSx0LG4scixpKX14LlR3ZWVuPXJyLHJyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6cnIsaW5pdDpmdW5jdGlvbihlLHQsbixyLGksbyl7dGhpcy5lbGVtPWUsdGhpcy5wcm9wPW4sdGhpcy5lYXNpbmc9aXx8InN3aW5nIix0aGlzLm9wdGlvbnM9dCx0aGlzLnN0YXJ0PXRoaXMubm93PXRoaXMuY3VyKCksdGhpcy5lbmQ9cix0aGlzLnVuaXQ9b3x8KHguY3NzTnVtYmVyW25dPyIiOiJweCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgZT1yci5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gZSYmZS5nZXQ/ZS5nZXQodGhpcyk6cnIucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGUpe3ZhciB0LG49cnIucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMucG9zPXQ9dGhpcy5vcHRpb25zLmR1cmF0aW9uP3guZWFzaW5nW3RoaXMuZWFzaW5nXShlLHRoaXMub3B0aW9ucy5kdXJhdGlvbiplLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOmUsdGhpcy5ub3c9KHRoaXMuZW5kLXRoaXMuc3RhcnQpKnQrdGhpcy5zdGFydCx0aGlzLm9wdGlvbnMuc3RlcCYmdGhpcy5vcHRpb25zLnN0ZXAuY2FsbCh0aGlzLmVsZW0sdGhpcy5ub3csdGhpcyksbiYmbi5zZXQ/bi5zZXQodGhpcyk6cnIucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKSx0aGlzfX0scnIucHJvdG90eXBlLmluaXQucHJvdG90eXBlPXJyLnByb3RvdHlwZSxyci5wcm9wSG9va3M9e19kZWZhdWx0OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIG51bGw9PWUuZWxlbVtlLnByb3BdfHxlLmVsZW0uc3R5bGUmJm51bGwhPWUuZWxlbS5zdHlsZVtlLnByb3BdPyh0PXguY3NzKGUuZWxlbSxlLnByb3AsIiIpLHQmJiJhdXRvIiE9PXQ/dDowKTplLmVsZW1bZS5wcm9wXX0sc2V0OmZ1bmN0aW9uKGUpe3guZnguc3RlcFtlLnByb3BdP3guZnguc3RlcFtlLnByb3BdKGUpOmUuZWxlbS5zdHlsZSYmKG51bGwhPWUuZWxlbS5zdHlsZVt4LmNzc1Byb3BzW2UucHJvcF1dfHx4LmNzc0hvb2tzW2UucHJvcF0pP3guc3R5bGUoZS5lbGVtLGUucHJvcCxlLm5vdytlLnVuaXQpOmUuZWxlbVtlLnByb3BdPWUubm93fX19LHJyLnByb3BIb29rcy5zY3JvbGxUb3A9cnIucHJvcEhvb2tzLnNjcm9sbExlZnQ9e3NldDpmdW5jdGlvbihlKXtlLmVsZW0ubm9kZVR5cGUmJmUuZWxlbS5wYXJlbnROb2RlJiYoZS5lbGVtW2UucHJvcF09ZS5ub3cpfX0seC5lYWNoKFsidG9nZ2xlIiwic2hvdyIsImhpZGUiXSxmdW5jdGlvbihlLHQpe3ZhciBuPXguZm5bdF07eC5mblt0XT1mdW5jdGlvbihlLHIsaSl7cmV0dXJuIG51bGw9PWV8fCJib29sZWFuIj09dHlwZW9mIGU/bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGlyKHQsITApLGUscixpKX19KSx4LmZuLmV4dGVuZCh7ZmFkZVRvOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLmZpbHRlcihubikuY3NzKCJvcGFjaXR5IiwwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7b3BhY2l0eTp0fSxlLG4scil9LGFuaW1hdGU6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9eC5pc0VtcHR5T2JqZWN0KGUpLG89eC5zcGVlZCh0LG4sciksYT1mdW5jdGlvbigpe3ZhciB0PWVyKHRoaXMseC5leHRlbmQoe30sZSksbyk7KGl8fHguX2RhdGEodGhpcywiZmluaXNoIikpJiZ0LnN0b3AoITApfTtyZXR1cm4gYS5maW5pc2g9YSxpfHxvLnF1ZXVlPT09ITE/dGhpcy5lYWNoKGEpOnRoaXMucXVldWUoby5xdWV1ZSxhKX0sc3RvcDpmdW5jdGlvbihlLG4scil7dmFyIGk9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdG9wO2RlbGV0ZSBlLnN0b3AsdChyKX07cmV0dXJuInN0cmluZyIhPXR5cGVvZiBlJiYocj1uLG49ZSxlPXQpLG4mJmUhPT0hMSYmdGhpcy5xdWV1ZShlfHwiZngiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD0hMCxuPW51bGwhPWUmJmUrInF1ZXVlSG9va3MiLG89eC50aW1lcnMsYT14Ll9kYXRhKHRoaXMpO2lmKG4pYVtuXSYmYVtuXS5zdG9wJiZpKGFbbl0pO2Vsc2UgZm9yKG4gaW4gYSlhW25dJiZhW25dLnN0b3AmJkpuLnRlc3QobikmJmkoYVtuXSk7Zm9yKG49by5sZW5ndGg7bi0tOylvW25dLmVsZW0hPT10aGlzfHxudWxsIT1lJiZvW25dLnF1ZXVlIT09ZXx8KG9bbl0uYW5pbS5zdG9wKHIpLHQ9ITEsby5zcGxpY2UobiwxKSk7KHR8fCFyKSYmeC5kZXF1ZXVlKHRoaXMsZSl9KX0sZmluaXNoOmZ1bmN0aW9uKGUpe3JldHVybiBlIT09ITEmJihlPWV8fCJmeCIpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0LG49eC5fZGF0YSh0aGlzKSxyPW5bZSsicXVldWUiXSxpPW5bZSsicXVldWVIb29rcyJdLG89eC50aW1lcnMsYT1yP3IubGVuZ3RoOjA7Zm9yKG4uZmluaXNoPSEwLHgucXVldWUodGhpcyxlLFtdKSxpJiZpLnN0b3AmJmkuc3RvcC5jYWxsKHRoaXMsITApLHQ9by5sZW5ndGg7dC0tOylvW3RdLmVsZW09PT10aGlzJiZvW3RdLnF1ZXVlPT09ZSYmKG9bdF0uYW5pbS5zdG9wKCEwKSxvLnNwbGljZSh0LDEpKTtmb3IodD0wO2E+dDt0Kyspclt0XSYmclt0XS5maW5pc2gmJnJbdF0uZmluaXNoLmNhbGwodGhpcyk7ZGVsZXRlIG4uZmluaXNofSl9fSk7ZnVuY3Rpb24gaXIoZSx0KXt2YXIgbixyPXtoZWlnaHQ6ZX0saT0wO2Zvcih0PXQ/MTowOzQ+aTtpKz0yLXQpbj1adFtpXSxyWyJtYXJnaW4iK25dPXJbInBhZGRpbmciK25dPWU7cmV0dXJuIHQmJihyLm9wYWNpdHk9ci53aWR0aD1lKSxyfXguZWFjaCh7c2xpZGVEb3duOmlyKCJzaG93Iiksc2xpZGVVcDppcigiaGlkZSIpLHNsaWRlVG9nZ2xlOmlyKCJ0b2dnbGUiKSxmYWRlSW46e29wYWNpdHk6InNob3cifSxmYWRlT3V0OntvcGFjaXR5OiJoaWRlIn0sZmFkZVRvZ2dsZTp7b3BhY2l0eToidG9nZ2xlIn19LGZ1bmN0aW9uKGUsdCl7eC5mbltlXT1mdW5jdGlvbihlLG4scil7cmV0dXJuIHRoaXMuYW5pbWF0ZSh0LGUsbixyKX19KSx4LnNwZWVkPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lJiYib2JqZWN0Ij09dHlwZW9mIGU/eC5leHRlbmQoe30sZSk6e2NvbXBsZXRlOm58fCFuJiZ0fHx4LmlzRnVuY3Rpb24oZSkmJmUsZHVyYXRpb246ZSxlYXNpbmc6biYmdHx8dCYmIXguaXNGdW5jdGlvbih0KSYmdH07cmV0dXJuIHIuZHVyYXRpb249eC5meC5vZmY/MDoibnVtYmVyIj09dHlwZW9mIHIuZHVyYXRpb24/ci5kdXJhdGlvbjpyLmR1cmF0aW9uIGluIHguZnguc3BlZWRzP3guZnguc3BlZWRzW3IuZHVyYXRpb25dOnguZnguc3BlZWRzLl9kZWZhdWx0LChudWxsPT1yLnF1ZXVlfHxyLnF1ZXVlPT09ITApJiYoci5xdWV1ZT0iZngiKSxyLm9sZD1yLmNvbXBsZXRlLHIuY29tcGxldGU9ZnVuY3Rpb24oKXt4LmlzRnVuY3Rpb24oci5vbGQpJiZyLm9sZC5jYWxsKHRoaXMpLHIucXVldWUmJnguZGVxdWV1ZSh0aGlzLHIucXVldWUpfSxyfSx4LmVhc2luZz17bGluZWFyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxzd2luZzpmdW5jdGlvbihlKXtyZXR1cm4uNS1NYXRoLmNvcyhlKk1hdGguUEkpLzJ9fSx4LnRpbWVycz1bXSx4LmZ4PXJyLnByb3RvdHlwZS5pbml0LHguZngudGljaz1mdW5jdGlvbigpe3ZhciBlLG49eC50aW1lcnMscj0wO2ZvcihYbj14Lm5vdygpO24ubGVuZ3RoPnI7cisrKWU9bltyXSxlKCl8fG5bcl0hPT1lfHxuLnNwbGljZShyLS0sMSk7bi5sZW5ndGh8fHguZnguc3RvcCgpLFhuPXR9LHguZngudGltZXI9ZnVuY3Rpb24oZSl7ZSgpJiZ4LnRpbWVycy5wdXNoKGUpJiZ4LmZ4LnN0YXJ0KCl9LHguZnguaW50ZXJ2YWw9MTMseC5meC5zdGFydD1mdW5jdGlvbigpe1VufHwoVW49c2V0SW50ZXJ2YWwoeC5meC50aWNrLHguZnguaW50ZXJ2YWwpKX0seC5meC5zdG9wPWZ1bmN0aW9uKCl7Y2xlYXJJbnRlcnZhbChVbiksVW49bnVsbH0seC5meC5zcGVlZHM9e3Nsb3c6NjAwLGZhc3Q6MjAwLF9kZWZhdWx0OjQwMH0seC5meC5zdGVwPXt9LHguZXhwciYmeC5leHByLmZpbHRlcnMmJih4LmV4cHIuZmlsdGVycy5hbmltYXRlZD1mdW5jdGlvbihlKXtyZXR1cm4geC5ncmVwKHgudGltZXJzLGZ1bmN0aW9uKHQpe3JldHVybiBlPT09dC5lbGVtfSkubGVuZ3RofSkseC5mbi5vZmZzZXQ9ZnVuY3Rpb24oZSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZT09PXQ/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24odCl7eC5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsZSx0KX0pO3ZhciBuLHIsbz17dG9wOjAsbGVmdDowfSxhPXRoaXNbMF0scz1hJiZhLm93bmVyRG9jdW1lbnQ7aWYocylyZXR1cm4gbj1zLmRvY3VtZW50RWxlbWVudCx4LmNvbnRhaW5zKG4sYSk/KHR5cGVvZiBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCE9PWkmJihvPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLHI9b3Iocykse3RvcDpvLnRvcCsoci5wYWdlWU9mZnNldHx8bi5zY3JvbGxUb3ApLShuLmNsaWVudFRvcHx8MCksbGVmdDpvLmxlZnQrKHIucGFnZVhPZmZzZXR8fG4uc2Nyb2xsTGVmdCktKG4uY2xpZW50TGVmdHx8MCl9KTpvfSx4Lm9mZnNldD17c2V0T2Zmc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj14LmNzcyhlLCJwb3NpdGlvbiIpOyJzdGF0aWMiPT09ciYmKGUuc3R5bGUucG9zaXRpb249InJlbGF0aXZlIik7dmFyIGk9eChlKSxvPWkub2Zmc2V0KCksYT14LmNzcyhlLCJ0b3AiKSxzPXguY3NzKGUsImxlZnQiKSxsPSgiYWJzb2x1dGUiPT09cnx8ImZpeGVkIj09PXIpJiZ4LmluQXJyYXkoImF1dG8iLFthLHNdKT4tMSx1PXt9LGM9e30scCxmO2w/KGM9aS5wb3NpdGlvbigpLHA9Yy50b3AsZj1jLmxlZnQpOihwPXBhcnNlRmxvYXQoYSl8fDAsZj1wYXJzZUZsb2F0KHMpfHwwKSx4LmlzRnVuY3Rpb24odCkmJih0PXQuY2FsbChlLG4sbykpLG51bGwhPXQudG9wJiYodS50b3A9dC50b3Atby50b3ArcCksbnVsbCE9dC5sZWZ0JiYodS5sZWZ0PXQubGVmdC1vLmxlZnQrZiksInVzaW5nImluIHQ/dC51c2luZy5jYWxsKGUsdSk6aS5jc3ModSl9fSx4LmZuLmV4dGVuZCh7cG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzWzBdKXt2YXIgZSx0LG49e3RvcDowLGxlZnQ6MH0scj10aGlzWzBdO3JldHVybiJmaXhlZCI9PT14LmNzcyhyLCJwb3NpdGlvbiIpP3Q9ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTooZT10aGlzLm9mZnNldFBhcmVudCgpLHQ9dGhpcy5vZmZzZXQoKSx4Lm5vZGVOYW1lKGVbMF0sImh0bWwiKXx8KG49ZS5vZmZzZXQoKSksbi50b3ArPXguY3NzKGVbMF0sImJvcmRlclRvcFdpZHRoIiwhMCksbi5sZWZ0Kz14LmNzcyhlWzBdLCJib3JkZXJMZWZ0V2lkdGgiLCEwKSkse3RvcDp0LnRvcC1uLnRvcC14LmNzcyhyLCJtYXJnaW5Ub3AiLCEwKSxsZWZ0OnQubGVmdC1uLmxlZnQteC5jc3MociwibWFyZ2luTGVmdCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXMub2Zmc2V0UGFyZW50fHxzO3doaWxlKGUmJiF4Lm5vZGVOYW1lKGUsImh0bWwiKSYmInN0YXRpYyI9PT14LmNzcyhlLCJwb3NpdGlvbiIpKWU9ZS5vZmZzZXRQYXJlbnQ7cmV0dXJuIGV8fHN9KX19KSx4LmVhY2goe3Njcm9sbExlZnQ6InBhZ2VYT2Zmc2V0IixzY3JvbGxUb3A6InBhZ2VZT2Zmc2V0In0sZnVuY3Rpb24oZSxuKXt2YXIgcj0vWS8udGVzdChuKTt4LmZuW2VdPWZ1bmN0aW9uKGkpe3JldHVybiB4LmFjY2Vzcyh0aGlzLGZ1bmN0aW9uKGUsaSxvKXt2YXIgYT1vcihlKTtyZXR1cm4gbz09PXQ/YT9uIGluIGE/YVtuXTphLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtpXTplW2ldOihhP2Euc2Nyb2xsVG8ocj94KGEpLnNjcm9sbExlZnQoKTpvLHI/bzp4KGEpLnNjcm9sbFRvcCgpKTplW2ldPW8sdCl9LGUsaSxhcmd1bWVudHMubGVuZ3RoLG51bGwpfX0pO2Z1bmN0aW9uIG9yKGUpe3JldHVybiB4LmlzV2luZG93KGUpP2U6OT09PWUubm9kZVR5cGU/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6ITF9eC5lYWNoKHtIZWlnaHQ6ImhlaWdodCIsV2lkdGg6IndpZHRoIn0sZnVuY3Rpb24oZSxuKXt4LmVhY2goe3BhZGRpbmc6ImlubmVyIitlLGNvbnRlbnQ6biwiIjoib3V0ZXIiK2V9LGZ1bmN0aW9uKHIsaSl7eC5mbltpXT1mdW5jdGlvbihpLG8pe3ZhciBhPWFyZ3VtZW50cy5sZW5ndGgmJihyfHwiYm9vbGVhbiIhPXR5cGVvZiBpKSxzPXJ8fChpPT09ITB8fG89PT0hMD8ibWFyZ2luIjoiYm9yZGVyIik7cmV0dXJuIHguYWNjZXNzKHRoaXMsZnVuY3Rpb24obixyLGkpe3ZhciBvO3JldHVybiB4LmlzV2luZG93KG4pP24uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyJjbGllbnQiK2VdOjk9PT1uLm5vZGVUeXBlPyhvPW4uZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KG4uYm9keVsic2Nyb2xsIitlXSxvWyJzY3JvbGwiK2VdLG4uYm9keVsib2Zmc2V0IitlXSxvWyJvZmZzZXQiK2VdLG9bImNsaWVudCIrZV0pKTppPT09dD94LmNzcyhuLHIscyk6eC5zdHlsZShuLHIsaSxzKX0sbixhP2k6dCxhLG51bGwpfX0pfSkseC5mbi5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGVuZ3RofSx4LmZuLmFuZFNlbGY9eC5mbi5hZGRCYWNrLCJvYmplY3QiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUmJiJvYmplY3QiPT10eXBlb2YgbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9eDooZS5qUXVlcnk9ZS4kPXgsImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKCJqcXVlcnkiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIHh9KSl9KSh3aW5kb3cpOwovKioKICogQGxpY2Vuc2UKICogTG8tRGFzaCAxLjMuMSAoQ3VzdG9tIEJ1aWxkKSA8aHR0cDovL2xvZGFzaC5jb20vPgogKiBCdWlsZDogYGxvZGFzaCAtbyAuL2Rpc3QvbG9kYXNoLmNvbXBhdC5qc2AKICogQ29weXJpZ2h0IDIwMTItMjAxMyBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz4KICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjQuNCA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvPgogKiBDb3B5cmlnaHQgMjAwOS0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBJbmMuCiAqIEF2YWlsYWJsZSB1bmRlciBNSVQgbGljZW5zZSA8aHR0cDovL2xvZGFzaC5jb20vbGljZW5zZT4KICovCjsoZnVuY3Rpb24od2luZG93KSB7CgogIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZSBFUzUgZW52aXJvbm1lbnRzICovCiAgdmFyIHVuZGVmaW5lZDsKCiAgLyoqIFVzZWQgdG8gcG9vbCBhcnJheXMgYW5kIG9iamVjdHMgdXNlZCBpbnRlcm5hbGx5ICovCiAgdmFyIGFycmF5UG9vbCA9IFtdLAogICAgICBvYmplY3RQb29sID0gW107CgogIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMgKi8KICB2YXIgaWRDb3VudGVyID0gMDsKCiAgLyoqIFVzZWQgaW50ZXJuYWxseSB0byBpbmRpY2F0ZSB2YXJpb3VzIHRoaW5ncyAqLwogIHZhciBpbmRpY2F0b3JPYmplY3QgPSB7fTsKCiAgLyoqIFVzZWQgdG8gcHJlZml4IGtleXMgdG8gYXZvaWQgaXNzdWVzIHdpdGggYF9fcHJvdG9fX2AgYW5kIHByb3BlcnRpZXMgb24gYE9iamVjdC5wcm90b3R5cGVgICovCiAgdmFyIGtleVByZWZpeCA9ICtuZXcgRGF0ZSArICcnOwoKICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB3aGVuIG9wdGltaXphdGlvbnMgYXJlIGVuYWJsZWQgZm9yIGxhcmdlIGFycmF5cyAqLwogIHZhciBsYXJnZUFycmF5U2l6ZSA9IDc1OwoKICAvKiogVXNlZCBhcyB0aGUgbWF4IHNpemUgb2YgdGhlIGBhcnJheVBvb2xgIGFuZCBgb2JqZWN0UG9vbGAgKi8KICB2YXIgbWF4UG9vbFNpemUgPSA0MDsKCiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZSAqLwogIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cYl9fcCBcKz0gJyc7L2csCiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXGIoX19wIFwrPSkgJycgXCsvZywKICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcKC4qP1wpfFxiX190XCkpIFwrXG4nJzsvZzsKCiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyAqLwogIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nOwoKICAvKioKICAgKiBVc2VkIHRvIG1hdGNoIEVTNiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzCiAgICogaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtNy44LjYKICAgKi8KICB2YXIgcmVFc1RlbXBsYXRlID0gL1wkXHsoW15cXH1dKig/OlxcLlteXFx9XSopKilcfS9nOwoKICAvKiogVXNlZCB0byBtYXRjaCByZWdleHAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMgKi8KICB2YXIgcmVGbGFncyA9IC9cdyokLzsKCiAgLyoqIFVzZWQgdG8gbWF0Y2ggImludGVycG9sYXRlIiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzICovCiAgdmFyIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcc1xTXSs/KSU+L2c7CgogIC8qKiBVc2VkIHRvIGRldGVjdCBmdW5jdGlvbnMgY29udGFpbmluZyBhIGB0aGlzYCByZWZlcmVuY2UgKi8KICB2YXIgcmVUaGlzID0gKHJlVGhpcyA9IC9cYnRoaXNcYi8pICYmIHJlVGhpcy50ZXN0KHJ1bkluQ29udGV4dCkgJiYgcmVUaGlzOwoKICAvKiogVXNlZCB0byBkZXRlY3QgYW5kIHRlc3Qgd2hpdGVzcGFjZSAqLwogIHZhciB3aGl0ZXNwYWNlID0gKAogICAgLy8gd2hpdGVzcGFjZQogICAgJyBcdFx4MEJcZlx4QTBcdWZlZmYnICsKCiAgICAvLyBsaW5lIHRlcm1pbmF0b3JzCiAgICAnXG5cclx1MjAyOFx1MjAyOScgKwoKICAgIC8vIHVuaWNvZGUgY2F0ZWdvcnkgIlpzIiBzcGFjZSBzZXBhcmF0b3JzCiAgICAnXHUxNjgwXHUxODBlXHUyMDAwXHUyMDAxXHUyMDAyXHUyMDAzXHUyMDA0XHUyMDA1XHUyMDA2XHUyMDA3XHUyMDA4XHUyMDA5XHUyMDBhXHUyMDJmXHUyMDVmXHUzMDAwJwogICk7CgogIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZSBhbmQgemVyb3MgdG8gYmUgcmVtb3ZlZCAqLwogIHZhciByZUxlYWRpbmdTcGFjZXNBbmRaZXJvcyA9IFJlZ0V4cCgnXlsnICsgd2hpdGVzcGFjZSArICddKjArKD89LiQpJyk7CgogIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycyAqLwogIHZhciByZU5vTWF0Y2ggPSAvKCReKS87CgogIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgY2hhcmFjdGVycyAqLwogIHZhciByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PiInXS9nOwoKICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMgKi8KICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcblxyXHRcdTIwMjhcdTIwMjlcXF0vZzsKCiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzICovCiAgdmFyIGNvbnRleHRQcm9wcyA9IFsKICAgICdBcnJheScsICdCb29sZWFuJywgJ0RhdGUnLCAnRXJyb3InLCAnRnVuY3Rpb24nLCAnTWF0aCcsICdOdW1iZXInLCAnT2JqZWN0JywKICAgICdSZWdFeHAnLCAnU3RyaW5nJywgJ18nLCAnYXR0YWNoRXZlbnQnLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ2lzTmFOJywKICAgICdwYXJzZUludCcsICdzZXRJbW1lZGlhdGUnLCAnc2V0VGltZW91dCcKICBdOwoKICAvKiogVXNlZCB0byBmaXggdGhlIEpTY3JpcHQgW1tEb250RW51bV1dIGJ1ZyAqLwogIHZhciBzaGFkb3dlZFByb3BzID0gWwogICAgJ2NvbnN0cnVjdG9yJywgJ2hhc093blByb3BlcnR5JywgJ2lzUHJvdG90eXBlT2YnLCAncHJvcGVydHlJc0VudW1lcmFibGUnLAogICAgJ3RvTG9jYWxlU3RyaW5nJywgJ3RvU3RyaW5nJywgJ3ZhbHVlT2YnCiAgXTsKCiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeSAqLwogIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAwOwoKICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHNob3J0Y3V0cyAqLwogIHZhciBhcmdzQ2xhc3MgPSAnW29iamVjdCBBcmd1bWVudHNdJywKICAgICAgYXJyYXlDbGFzcyA9ICdbb2JqZWN0IEFycmF5XScsCiAgICAgIGJvb2xDbGFzcyA9ICdbb2JqZWN0IEJvb2xlYW5dJywKICAgICAgZGF0ZUNsYXNzID0gJ1tvYmplY3QgRGF0ZV0nLAogICAgICBlcnJvckNsYXNzID0gJ1tvYmplY3QgRXJyb3JdJywKICAgICAgZnVuY0NsYXNzID0gJ1tvYmplY3QgRnVuY3Rpb25dJywKICAgICAgbnVtYmVyQ2xhc3MgPSAnW29iamVjdCBOdW1iZXJdJywKICAgICAgb2JqZWN0Q2xhc3MgPSAnW29iamVjdCBPYmplY3RdJywKICAgICAgcmVnZXhwQ2xhc3MgPSAnW29iamVjdCBSZWdFeHBdJywKICAgICAgc3RyaW5nQ2xhc3MgPSAnW29iamVjdCBTdHJpbmddJzsKCiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgb2JqZWN0IGNsYXNzaWZpY2F0aW9ucyB0aGF0IGBfLmNsb25lYCBzdXBwb3J0cyAqLwogIHZhciBjbG9uZWFibGVDbGFzc2VzID0ge307CiAgY2xvbmVhYmxlQ2xhc3Nlc1tmdW5jQ2xhc3NdID0gZmFsc2U7CiAgY2xvbmVhYmxlQ2xhc3Nlc1thcmdzQ2xhc3NdID0gY2xvbmVhYmxlQ2xhc3Nlc1thcnJheUNsYXNzXSA9CiAgY2xvbmVhYmxlQ2xhc3Nlc1tib29sQ2xhc3NdID0gY2xvbmVhYmxlQ2xhc3Nlc1tkYXRlQ2xhc3NdID0KICBjbG9uZWFibGVDbGFzc2VzW251bWJlckNsYXNzXSA9IGNsb25lYWJsZUNsYXNzZXNbb2JqZWN0Q2xhc3NdID0KICBjbG9uZWFibGVDbGFzc2VzW3JlZ2V4cENsYXNzXSA9IGNsb25lYWJsZUNsYXNzZXNbc3RyaW5nQ2xhc3NdID0gdHJ1ZTsKCiAgLyoqIFVzZWQgdG8gZGV0ZXJtaW5lIGlmIHZhbHVlcyBhcmUgb2YgdGhlIGxhbmd1YWdlIHR5cGUgT2JqZWN0ICovCiAgdmFyIG9iamVjdFR5cGVzID0gewogICAgJ2Jvb2xlYW4nOiBmYWxzZSwKICAgICdmdW5jdGlvbic6IHRydWUsCiAgICAnb2JqZWN0JzogdHJ1ZSwKICAgICdudW1iZXInOiBmYWxzZSwKICAgICdzdHJpbmcnOiBmYWxzZSwKICAgICd1bmRlZmluZWQnOiBmYWxzZQogIH07CgogIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzICovCiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7CiAgICAnXFwnOiAnXFwnLAogICAgIiciOiAiJyIsCiAgICAnXG4nOiAnbicsCiAgICAnXHInOiAncicsCiAgICAnXHQnOiAndCcsCiAgICAnXHUyMDI4JzogJ3UyMDI4JywKICAgICdcdTIwMjknOiAndTIwMjknCiAgfTsKCiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYCAqLwogIHZhciBmcmVlRXhwb3J0cyA9IG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzOwoKICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAgKi8KICB2YXIgZnJlZU1vZHVsZSA9IG9iamVjdFR5cGVzW3R5cGVvZiBtb2R1bGVdICYmIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cyAmJiBtb2R1bGU7CgogIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCwgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlLCBhbmQgdXNlIGl0IGFzIGB3aW5kb3dgICovCiAgdmFyIGZyZWVHbG9iYWwgPSBvYmplY3RUeXBlc1t0eXBlb2YgZ2xvYmFsXSAmJiBnbG9iYWw7CiAgaWYgKGZyZWVHbG9iYWwgJiYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsKSkgewogICAgd2luZG93ID0gZnJlZUdsb2JhbDsKICB9CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAvKioKICAgKiBBIGJhc2ljIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYmluYXJ5IHNlYXJjaGVzCiAgICogb3IgYGZyb21JbmRleGAgY29uc3RyYWludHMuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guCiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuCiAgICogQHBhcmFtIHtOdW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLgogICAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlIG9yIGAtMWAuCiAgICovCiAgZnVuY3Rpb24gYmFzaWNJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7CiAgICB2YXIgaW5kZXggPSAoZnJvbUluZGV4IHx8IDApIC0gMSwKICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7CgogICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHsKICAgICAgICByZXR1cm4gaW5kZXg7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiAtMTsKICB9CgogIC8qKgogICAqIEFuIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbnRhaW5zYCBmb3IgY2FjaGUgb2JqZWN0cyB0aGF0IG1pbWljcyB0aGUgcmV0dXJuCiAgICogc2lnbmF0dXJlIG9mIGBfLmluZGV4T2ZgIGJ5IHJldHVybmluZyBgMGAgaWYgdGhlIHZhbHVlIGlzIGZvdW5kLCBlbHNlIGAtMWAuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgb2JqZWN0IHRvIGluc3BlY3QuCiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuCiAgICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBgMGAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgLTFgLgogICAqLwogIGZ1bmN0aW9uIGNhY2hlSW5kZXhPZihjYWNoZSwgdmFsdWUpIHsKICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlOwogICAgY2FjaGUgPSBjYWNoZS5jYWNoZTsKCiAgICBpZiAodHlwZSA9PSAnYm9vbGVhbicgfHwgdmFsdWUgPT0gbnVsbCkgewogICAgICByZXR1cm4gY2FjaGVbdmFsdWVdOwogICAgfQogICAgaWYgKHR5cGUgIT0gJ251bWJlcicgJiYgdHlwZSAhPSAnc3RyaW5nJykgewogICAgICB0eXBlID0gJ29iamVjdCc7CiAgICB9CiAgICB2YXIga2V5ID0gdHlwZSA9PSAnbnVtYmVyJyA/IHZhbHVlIDoga2V5UHJlZml4ICsgdmFsdWU7CiAgICBjYWNoZSA9IGNhY2hlW3R5cGVdIHx8IChjYWNoZVt0eXBlXSA9IHt9KTsKCiAgICByZXR1cm4gdHlwZSA9PSAnb2JqZWN0JwogICAgICA/IChjYWNoZVtrZXldICYmIGJhc2ljSW5kZXhPZihjYWNoZVtrZXldLCB2YWx1ZSkgPiAtMSA/IDAgOiAtMSkKICAgICAgOiAoY2FjaGVba2V5XSA/IDAgOiAtMSk7CiAgfQoKICAvKioKICAgKiBBZGRzIGEgZ2l2ZW4gYHZhbHVlYCB0byB0aGUgY29ycmVzcG9uZGluZyBjYWNoZSBvYmplY3QuCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBhZGQgdG8gdGhlIGNhY2hlLgogICAqLwogIGZ1bmN0aW9uIGNhY2hlUHVzaCh2YWx1ZSkgewogICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZSwKICAgICAgICB0eXBlID0gdHlwZW9mIHZhbHVlOwoKICAgIGlmICh0eXBlID09ICdib29sZWFuJyB8fCB2YWx1ZSA9PSBudWxsKSB7CiAgICAgIGNhY2hlW3ZhbHVlXSA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICBpZiAodHlwZSAhPSAnbnVtYmVyJyAmJiB0eXBlICE9ICdzdHJpbmcnKSB7CiAgICAgICAgdHlwZSA9ICdvYmplY3QnOwogICAgICB9CiAgICAgIHZhciBrZXkgPSB0eXBlID09ICdudW1iZXInID8gdmFsdWUgOiBrZXlQcmVmaXggKyB2YWx1ZSwKICAgICAgICAgIHR5cGVDYWNoZSA9IGNhY2hlW3R5cGVdIHx8IChjYWNoZVt0eXBlXSA9IHt9KTsKCiAgICAgIGlmICh0eXBlID09ICdvYmplY3QnKSB7CiAgICAgICAgaWYgKCh0eXBlQ2FjaGVba2V5XSB8fCAodHlwZUNhY2hlW2tleV0gPSBbXSkpLnB1c2godmFsdWUpID09IHRoaXMuYXJyYXkubGVuZ3RoKSB7CiAgICAgICAgICBjYWNoZVt0eXBlXSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0eXBlQ2FjaGVba2V5XSA9IHRydWU7CiAgICAgIH0KICAgIH0KICB9CgogIC8qKgogICAqIFVzZWQgYnkgYF8ubWF4YCBhbmQgYF8ubWluYCBhcyB0aGUgZGVmYXVsdCBgY2FsbGJhY2tgIHdoZW4gYSBnaXZlbgogICAqIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZyB2YWx1ZS4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIFRoZSBjaGFyYWN0ZXIgdG8gaW5zcGVjdC4KICAgKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIHRoZSBjb2RlIHVuaXQgb2YgZ2l2ZW4gY2hhcmFjdGVyLgogICAqLwogIGZ1bmN0aW9uIGNoYXJBdENhbGxiYWNrKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUuY2hhckNvZGVBdCgwKTsKICB9CgogIC8qKgogICAqIFVzZWQgYnkgYHNvcnRCeWAgdG8gY29tcGFyZSB0cmFuc2Zvcm1lZCBgY29sbGVjdGlvbmAgdmFsdWVzLCBzdGFibGUgc29ydGluZwogICAqIHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGNvbXBhcmUgdG8gYGJgLgogICAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29tcGFyZSB0byBgYWAuCiAgICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3Igb2YgYDFgIG9yIGAtMWAuCiAgICovCiAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyhhLCBiKSB7CiAgICB2YXIgYWkgPSBhLmluZGV4LAogICAgICAgIGJpID0gYi5pbmRleDsKCiAgICBhID0gYS5jcml0ZXJpYTsKICAgIGIgPSBiLmNyaXRlcmlhOwoKICAgIC8vIGVuc3VyZSBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzCiAgICAvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MAogICAgaWYgKGEgIT09IGIpIHsKICAgICAgaWYgKGEgPiBiIHx8IHR5cGVvZiBhID09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgcmV0dXJuIDE7CiAgICAgIH0KICAgICAgaWYgKGEgPCBiIHx8IHR5cGVvZiBiID09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgcmV0dXJuIC0xOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gYWkgPCBiaSA/IC0xIDogMTsKICB9CgogIC8qKgogICAqIENyZWF0ZXMgYSBjYWNoZSBvYmplY3QgdG8gb3B0aW1pemUgbGluZWFyIHNlYXJjaGVzIG9mIGxhcmdlIGFycmF5cy4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gc2VhcmNoLgogICAqIEByZXR1cm5zIHtOdWxsfE9iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgb2JqZWN0IG9yIGBudWxsYCBpZiBjYWNoaW5nIHNob3VsZCBub3QgYmUgdXNlZC4KICAgKi8KICBmdW5jdGlvbiBjcmVhdGVDYWNoZShhcnJheSkgewogICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwoKICAgIHZhciBjYWNoZSA9IGdldE9iamVjdCgpOwogICAgY2FjaGVbJ2ZhbHNlJ10gPSBjYWNoZVsnbnVsbCddID0gY2FjaGVbJ3RydWUnXSA9IGNhY2hlWyd1bmRlZmluZWQnXSA9IGZhbHNlOwoKICAgIHZhciByZXN1bHQgPSBnZXRPYmplY3QoKTsKICAgIHJlc3VsdC5hcnJheSA9IGFycmF5OwogICAgcmVzdWx0LmNhY2hlID0gY2FjaGU7CiAgICByZXN1bHQucHVzaCA9IGNhY2hlUHVzaDsKCiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICByZXN1bHQucHVzaChhcnJheVtpbmRleF0pOwogICAgfQogICAgcmV0dXJuIGNhY2hlLm9iamVjdCA9PT0gZmFsc2UKICAgICAgPyAocmVsZWFzZU9iamVjdChyZXN1bHQpLCBudWxsKQogICAgICA6IHJlc3VsdDsKICB9CgogIC8qKgogICAqIFVzZWQgYnkgYHRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkCiAgICogc3RyaW5nIGxpdGVyYWxzLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2ggVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS4KICAgKiBAcmV0dXJucyB7U3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci4KICAgKi8KICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKG1hdGNoKSB7CiAgICByZXR1cm4gJ1xcJyArIHN0cmluZ0VzY2FwZXNbbWF0Y2hdOwogIH0KCiAgLyoqCiAgICogR2V0cyBhbiBhcnJheSBmcm9tIHRoZSBhcnJheSBwb29sIG9yIGNyZWF0ZXMgYSBuZXcgb25lIGlmIHRoZSBwb29sIGlzIGVtcHR5LgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBmcm9tIHRoZSBwb29sLgogICAqLwogIGZ1bmN0aW9uIGdldEFycmF5KCkgewogICAgcmV0dXJuIGFycmF5UG9vbC5wb3AoKSB8fCBbXTsKICB9CgogIC8qKgogICAqIEdldHMgYW4gb2JqZWN0IGZyb20gdGhlIG9iamVjdCBwb29sIG9yIGNyZWF0ZXMgYSBuZXcgb25lIGlmIHRoZSBwb29sIGlzIGVtcHR5LgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgb2JqZWN0IGZyb20gdGhlIHBvb2wuCiAgICovCiAgZnVuY3Rpb24gZ2V0T2JqZWN0KCkgewogICAgcmV0dXJuIG9iamVjdFBvb2wucG9wKCkgfHwgewogICAgICAnYXJncyc6ICcnLAogICAgICAnYXJyYXknOiBudWxsLAogICAgICAnYm90dG9tJzogJycsCiAgICAgICdjYWNoZSc6IG51bGwsCiAgICAgICdjcml0ZXJpYSc6IG51bGwsCiAgICAgICdmYWxzZSc6IGZhbHNlLAogICAgICAnZmlyc3RBcmcnOiAnJywKICAgICAgJ2luZGV4JzogMCwKICAgICAgJ2luaXQnOiAnJywKICAgICAgJ2xlYWRpbmcnOiBmYWxzZSwKICAgICAgJ2xvb3AnOiAnJywKICAgICAgJ21heFdhaXQnOiAwLAogICAgICAnbnVsbCc6IGZhbHNlLAogICAgICAnbnVtYmVyJzogbnVsbCwKICAgICAgJ29iamVjdCc6IG51bGwsCiAgICAgICdwdXNoJzogbnVsbCwKICAgICAgJ3NoYWRvd2VkUHJvcHMnOiBudWxsLAogICAgICAnc3RyaW5nJzogbnVsbCwKICAgICAgJ3RvcCc6ICcnLAogICAgICAndHJhaWxpbmcnOiBmYWxzZSwKICAgICAgJ3RydWUnOiBmYWxzZSwKICAgICAgJ3VuZGVmaW5lZCc6IGZhbHNlLAogICAgICAndXNlSGFzJzogZmFsc2UsCiAgICAgICd1c2VLZXlzJzogZmFsc2UsCiAgICAgICd2YWx1ZSc6IG51bGwKICAgIH07CiAgfQoKICAvKioKICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIERPTSBub2RlIGluIElFIDwgOS4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIERPTSBub2RlLCBlbHNlIGBmYWxzZWAuCiAgICovCiAgZnVuY3Rpb24gaXNOb2RlKHZhbHVlKSB7CiAgICAvLyBJRSA8IDkgcHJlc2VudHMgRE9NIG5vZGVzIGFzIGBPYmplY3RgIG9iamVjdHMgZXhjZXB0IHRoZXkgaGF2ZSBgdG9TdHJpbmdgCiAgICAvLyBtZXRob2RzIHRoYXQgYXJlIGB0eXBlb2ZgICJzdHJpbmciIGFuZCBzdGlsbCBjYW4gY29lcmNlIG5vZGVzIHRvIHN0cmluZ3MKICAgIHJldHVybiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgKHZhbHVlICsgJycpID09ICdzdHJpbmcnOwogIH0KCiAgLyoqCiAgICogQSBuby1vcGVyYXRpb24gZnVuY3Rpb24uCiAgICoKICAgKiBAcHJpdmF0ZQogICAqLwogIGZ1bmN0aW9uIG5vb3AoKSB7CiAgICAvLyBubyBvcGVyYXRpb24gcGVyZm9ybWVkCiAgfQoKICAvKioKICAgKiBSZWxlYXNlcyB0aGUgZ2l2ZW4gYGFycmF5YCBiYWNrIHRvIHRoZSBhcnJheSBwb29sLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byByZWxlYXNlLgogICAqLwogIGZ1bmN0aW9uIHJlbGVhc2VBcnJheShhcnJheSkgewogICAgYXJyYXkubGVuZ3RoID0gMDsKICAgIGlmIChhcnJheVBvb2wubGVuZ3RoIDwgbWF4UG9vbFNpemUpIHsKICAgICAgYXJyYXlQb29sLnB1c2goYXJyYXkpOwogICAgfQogIH0KCiAgLyoqCiAgICogUmVsZWFzZXMgdGhlIGdpdmVuIGBvYmplY3RgIGJhY2sgdG8gdGhlIG9iamVjdCBwb29sLgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byByZWxlYXNlLgogICAqLwogIGZ1bmN0aW9uIHJlbGVhc2VPYmplY3Qob2JqZWN0KSB7CiAgICB2YXIgY2FjaGUgPSBvYmplY3QuY2FjaGU7CiAgICBpZiAoY2FjaGUpIHsKICAgICAgcmVsZWFzZU9iamVjdChjYWNoZSk7CiAgICB9CiAgICBvYmplY3QuYXJyYXkgPSBvYmplY3QuY2FjaGUgPSBvYmplY3QuY3JpdGVyaWEgPSBvYmplY3Qub2JqZWN0ID0gb2JqZWN0Lm51bWJlciA9IG9iamVjdC5zdHJpbmcgPSBvYmplY3QudmFsdWUgPSBudWxsOwogICAgaWYgKG9iamVjdFBvb2wubGVuZ3RoIDwgbWF4UG9vbFNpemUpIHsKICAgICAgb2JqZWN0UG9vbC5wdXNoKG9iamVjdCk7CiAgICB9CiAgfQoKICAvKioKICAgKiBTbGljZXMgdGhlIGBjb2xsZWN0aW9uYCBmcm9tIHRoZSBgc3RhcnRgIGluZGV4IHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywKICAgKiB0aGUgYGVuZGAgaW5kZXguCiAgICoKICAgKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQsIGluc3RlYWQgb2YgYEFycmF5I3NsaWNlYCwgdG8gc3VwcG9ydCBub2RlIGxpc3RzCiAgICogaW4gSUUgPCA5IGFuZCB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZSByZXR1cm5lZC4KICAgKgogICAqIEBwcml2YXRlCiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNsaWNlLgogICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgaW5kZXguCiAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZCBUaGUgZW5kIGluZGV4LgogICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5LgogICAqLwogIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7CiAgICBzdGFydCB8fCAoc3RhcnQgPSAwKTsKICAgIGlmICh0eXBlb2YgZW5kID09ICd1bmRlZmluZWQnKSB7CiAgICAgIGVuZCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKICAgIH0KICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0IHx8IDAsCiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoIDwgMCA/IDAgOiBsZW5ndGgpOwoKICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtzdGFydCArIGluZGV4XTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgLyoqCiAgICogQ3JlYXRlIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBnaXZlbiBgY29udGV4dGAgb2JqZWN0LgogICAqCiAgICogQHN0YXRpYwogICAqIEBtZW1iZXJPZiBfCiAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD13aW5kb3ddIFRoZSBjb250ZXh0IG9iamVjdC4KICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLgogICAqLwogIGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7CiAgICAvLyBBdm9pZCBpc3N1ZXMgd2l0aCBzb21lIEVTMyBlbnZpcm9ubWVudHMgdGhhdCBhdHRlbXB0IHRvIHVzZSB2YWx1ZXMsIG5hbWVkCiAgICAvLyBhZnRlciBidWlsdC1pbiBjb25zdHJ1Y3RvcnMgbGlrZSBgT2JqZWN0YCwgZm9yIHRoZSBjcmVhdGlvbiBvZiBsaXRlcmFscy4KICAgIC8vIEVTNSBjbGVhcnMgdGhpcyB1cCBieSBzdGF0aW5nIHRoYXQgbGl0ZXJhbHMgbXVzdCB1c2UgYnVpbHQtaW4gY29uc3RydWN0b3JzLgogICAgLy8gU2VlIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDExLjEuNS4KICAgIGNvbnRleHQgPSBjb250ZXh0ID8gXy5kZWZhdWx0cyh3aW5kb3cuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayh3aW5kb3csIGNvbnRleHRQcm9wcykpIDogd2luZG93OwoKICAgIC8qKiBOYXRpdmUgY29uc3RydWN0b3IgcmVmZXJlbmNlcyAqLwogICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSwKICAgICAgICBCb29sZWFuID0gY29udGV4dC5Cb29sZWFuLAogICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsCiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLAogICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbiwKICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLAogICAgICAgIE51bWJlciA9IGNvbnRleHQuTnVtYmVyLAogICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LAogICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLAogICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLAogICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yOwoKICAgIC8qKgogICAgICogVXNlZCBmb3IgYEFycmF5YCBtZXRob2QgcmVmZXJlbmNlcy4KICAgICAqCiAgICAgKiBOb3JtYWxseSBgQXJyYXkucHJvdG90eXBlYCB3b3VsZCBzdWZmaWNlLCBob3dldmVyLCB1c2luZyBhbiBhcnJheSBsaXRlcmFsCiAgICAgKiBhdm9pZHMgaXNzdWVzIGluIE5hcndoYWwuCiAgICAgKi8KICAgIHZhciBhcnJheVJlZiA9IFtdOwoKICAgIC8qKiBVc2VkIGZvciBuYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMgKi8KICAgIHZhciBlcnJvclByb3RvID0gRXJyb3IucHJvdG90eXBlLAogICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwKICAgICAgICBzdHJpbmdQcm90byA9IFN0cmluZy5wcm90b3R5cGU7CgogICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgbm9Db25mbGljdGAgKi8KICAgIHZhciBvbGREYXNoID0gY29udGV4dC5fOwoKICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUgKi8KICAgIHZhciByZU5hdGl2ZSA9IFJlZ0V4cCgnXicgKwogICAgICBTdHJpbmcob2JqZWN0UHJvdG8udmFsdWVPZikKICAgICAgICAucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJykKICAgICAgICAucmVwbGFjZSgvdmFsdWVPZnxmb3IgW15cXV0rL2csICcuKz8nKSArICckJwogICAgKTsKCiAgICAvKiogTmF0aXZlIG1ldGhvZCBzaG9ydGN1dHMgKi8KICAgIHZhciBjZWlsID0gTWF0aC5jZWlsLAogICAgICAgIGNsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0LAogICAgICAgIGNvbmNhdCA9IGFycmF5UmVmLmNvbmNhdCwKICAgICAgICBmbG9vciA9IE1hdGguZmxvb3IsCiAgICAgICAgZm5Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICBnZXRQcm90b3R5cGVPZiA9IHJlTmF0aXZlLnRlc3QoZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YpICYmIGdldFByb3RvdHlwZU9mLAogICAgICAgIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHksCiAgICAgICAgcHVzaCA9IGFycmF5UmVmLnB1c2gsCiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSwKICAgICAgICBzZXRJbW1lZGlhdGUgPSBjb250ZXh0LnNldEltbWVkaWF0ZSwKICAgICAgICBzZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0LAogICAgICAgIHRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7CgogICAgLyogTmF0aXZlIG1ldGhvZCBzaG9ydGN1dHMgZm9yIG1ldGhvZHMgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMgKi8KICAgIHZhciBuYXRpdmVCaW5kID0gcmVOYXRpdmUudGVzdChuYXRpdmVCaW5kID0gdG9TdHJpbmcuYmluZCkgJiYgbmF0aXZlQmluZCwKICAgICAgICBuYXRpdmVDcmVhdGUgPSByZU5hdGl2ZS50ZXN0KG5hdGl2ZUNyZWF0ZSA9ICBPYmplY3QuY3JlYXRlKSAmJiBuYXRpdmVDcmVhdGUsCiAgICAgICAgbmF0aXZlSXNBcnJheSA9IHJlTmF0aXZlLnRlc3QobmF0aXZlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkpICYmIG5hdGl2ZUlzQXJyYXksCiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLAogICAgICAgIG5hdGl2ZUlzTmFOID0gY29udGV4dC5pc05hTiwKICAgICAgICBuYXRpdmVLZXlzID0gcmVOYXRpdmUudGVzdChuYXRpdmVLZXlzID0gT2JqZWN0LmtleXMpICYmIG5hdGl2ZUtleXMsCiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsCiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sCiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LAogICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLAogICAgICAgIG5hdGl2ZVNsaWNlID0gYXJyYXlSZWYuc2xpY2U7CgogICAgLyoqIERldGVjdCB2YXJpb3VzIGVudmlyb25tZW50cyAqLwogICAgdmFyIGlzSWVPcGVyYSA9IHJlTmF0aXZlLnRlc3QoY29udGV4dC5hdHRhY2hFdmVudCksCiAgICAgICAgaXNWOCA9IG5hdGl2ZUJpbmQgJiYgIS9cbnx0cnVlLy50ZXN0KG5hdGl2ZUJpbmQgKyBpc0llT3BlcmEpOwoKICAgIC8qKiBVc2VkIHRvIGxvb2t1cCBhIGJ1aWx0LWluIGNvbnN0cnVjdG9yIGJ5IFtbQ2xhc3NdXSAqLwogICAgdmFyIGN0b3JCeUNsYXNzID0ge307CiAgICBjdG9yQnlDbGFzc1thcnJheUNsYXNzXSA9IEFycmF5OwogICAgY3RvckJ5Q2xhc3NbYm9vbENsYXNzXSA9IEJvb2xlYW47CiAgICBjdG9yQnlDbGFzc1tkYXRlQ2xhc3NdID0gRGF0ZTsKICAgIGN0b3JCeUNsYXNzW2Z1bmNDbGFzc10gPSBGdW5jdGlvbjsKICAgIGN0b3JCeUNsYXNzW29iamVjdENsYXNzXSA9IE9iamVjdDsKICAgIGN0b3JCeUNsYXNzW251bWJlckNsYXNzXSA9IE51bWJlcjsKICAgIGN0b3JCeUNsYXNzW3JlZ2V4cENsYXNzXSA9IFJlZ0V4cDsKICAgIGN0b3JCeUNsYXNzW3N0cmluZ0NsYXNzXSA9IFN0cmluZzsKCiAgICAvKiogVXNlZCB0byBhdm9pZCBpdGVyYXRpbmcgbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyBpbiBJRSA8IDkgKi8KICAgIHZhciBub25FbnVtUHJvcHMgPSB7fTsKICAgIG5vbkVudW1Qcm9wc1thcnJheUNsYXNzXSA9IG5vbkVudW1Qcm9wc1tkYXRlQ2xhc3NdID0gbm9uRW51bVByb3BzW251bWJlckNsYXNzXSA9IHsgJ2NvbnN0cnVjdG9yJzogdHJ1ZSwgJ3RvTG9jYWxlU3RyaW5nJzogdHJ1ZSwgJ3RvU3RyaW5nJzogdHJ1ZSwgJ3ZhbHVlT2YnOiB0cnVlIH07CiAgICBub25FbnVtUHJvcHNbYm9vbENsYXNzXSA9IG5vbkVudW1Qcm9wc1tzdHJpbmdDbGFzc10gPSB7ICdjb25zdHJ1Y3Rvcic6IHRydWUsICd0b1N0cmluZyc6IHRydWUsICd2YWx1ZU9mJzogdHJ1ZSB9OwogICAgbm9uRW51bVByb3BzW2Vycm9yQ2xhc3NdID0gbm9uRW51bVByb3BzW2Z1bmNDbGFzc10gPSBub25FbnVtUHJvcHNbcmVnZXhwQ2xhc3NdID0geyAnY29uc3RydWN0b3InOiB0cnVlLCAndG9TdHJpbmcnOiB0cnVlIH07CiAgICBub25FbnVtUHJvcHNbb2JqZWN0Q2xhc3NdID0geyAnY29uc3RydWN0b3InOiB0cnVlIH07CgogICAgKGZ1bmN0aW9uKCkgewogICAgICB2YXIgbGVuZ3RoID0gc2hhZG93ZWRQcm9wcy5sZW5ndGg7CiAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgIHZhciBwcm9wID0gc2hhZG93ZWRQcm9wc1tsZW5ndGhdOwogICAgICAgIGZvciAodmFyIGNsYXNzTmFtZSBpbiBub25FbnVtUHJvcHMpIHsKICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG5vbkVudW1Qcm9wcywgY2xhc3NOYW1lKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChub25FbnVtUHJvcHNbY2xhc3NOYW1lXSwgcHJvcCkpIHsKICAgICAgICAgICAgbm9uRW51bVByb3BzW2NsYXNzTmFtZV1bcHJvcF0gPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0oKSk7CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0LCB3aGljaCB3cmFwcyB0aGUgZ2l2ZW4gYHZhbHVlYCwgdG8gZW5hYmxlIG1ldGhvZAogICAgICogY2hhaW5pbmcuCiAgICAgKgogICAgICogSW4gYWRkaXRpb24gdG8gTG8tRGFzaCBtZXRob2RzLCB3cmFwcGVycyBhbHNvIGhhdmUgdGhlIGZvbGxvd2luZyBgQXJyYXlgIG1ldGhvZHM6CiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgcmV2ZXJzZWAsIGBzaGlmdGAsIGBzbGljZWAsIGBzb3J0YCwgYHNwbGljZWAsCiAgICAgKiBhbmQgYHVuc2hpZnRgCiAgICAgKgogICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYHZhbHVlYCBtZXRob2QgaXMKICAgICAqIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuCiAgICAgKgogICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIGZ1bmN0aW9ucyBhcmU6CiAgICAgKiBgYWZ0ZXJgLCBgYXNzaWduYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNoYWluYCwgYGNvbXBhY3RgLAogICAgICogYGNvbXBvc2VgLCBgY29uY2F0YCwgYGNvdW50QnlgLCBgY3JlYXRlQ2FsbGJhY2tgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLAogICAgICogYGRlZmVyYCwgYGRlbGF5YCwgYGRpZmZlcmVuY2VgLCBgZmlsdGVyYCwgYGZsYXR0ZW5gLCBgZm9yRWFjaGAsIGBmb3JJbmAsCiAgICAgKiBgZm9yT3duYCwgYGZ1bmN0aW9uc2AsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludmVydGAsCiAgICAgKiBgaW52b2tlYCwgYGtleXNgLCBgbWFwYCwgYG1heGAsIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1pbmAsIGBvYmplY3RgLCBgb21pdGAsCiAgICAgKiBgb25jZWAsIGBwYWlyc2AsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwaWNrYCwgYHBsdWNrYCwgYHB1c2hgLCBgcmFuZ2VgLAogICAgICogYHJlamVjdGAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2h1ZmZsZWAsIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLAogICAgICogYHRhcGAsIGB0aHJvdHRsZWAsIGB0aW1lc2AsIGB0b0FycmF5YCwgYHRyYW5zZm9ybWAsIGB1bmlvbmAsIGB1bmlxYCwgYHVuc2hpZnRgLAogICAgICogYHVuemlwYCwgYHZhbHVlc2AsIGB3aGVyZWAsIGB3aXRob3V0YCwgYHdyYXBgLCBhbmQgYHppcGAKICAgICAqCiAgICAgKiBUaGUgbm9uLWNoYWluYWJsZSB3cmFwcGVyIGZ1bmN0aW9ucyBhcmU6CiAgICAgKiBgY2xvbmVgLCBgY2xvbmVEZWVwYCwgYGNvbnRhaW5zYCwgYGVzY2FwZWAsIGBldmVyeWAsIGBmaW5kYCwgYGhhc2AsCiAgICAgKiBgaWRlbnRpdHlgLCBgaW5kZXhPZmAsIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQm9vbGVhbmAsIGBpc0RhdGVgLAogICAgICogYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc05hTmAsCiAgICAgKiBgaXNOdWxsYCwgYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLCBgaXNTdHJpbmdgLAogICAgICogYGlzVW5kZWZpbmVkYCwgYGpvaW5gLCBgbGFzdEluZGV4T2ZgLCBgbWl4aW5gLCBgbm9Db25mbGljdGAsIGBwYXJzZUludGAsCiAgICAgKiBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLCBgcmVzdWx0YCwgYHNoaWZ0YCwgYHNpemVgLCBgc29tZWAsCiAgICAgKiBgc29ydGVkSW5kZXhgLCBgcnVuSW5Db250ZXh0YCwgYHRlbXBsYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYW5kIGB2YWx1ZWAKICAgICAqCiAgICAgKiBUaGUgd3JhcHBlciBmdW5jdGlvbnMgYGZpcnN0YCBhbmQgYGxhc3RgIHJldHVybiB3cmFwcGVkIHZhbHVlcyB3aGVuIGBuYCBpcwogICAgICogcGFzc2VkLCBvdGhlcndpc2UgdGhleSByZXR1cm4gdW53cmFwcGVkIHZhbHVlcy4KICAgICAqCiAgICAgKiBAbmFtZSBfCiAgICAgKiBAY29uc3RydWN0b3IKICAgICAqIEBhbGlhcyBjaGFpbgogICAgICogQGNhdGVnb3J5IENoYWluaW5nCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLgogICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhIGBsb2Rhc2hgIGluc3RhbmNlLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTsKICAgICAqCiAgICAgKiAvLyByZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZQogICAgICogd3JhcHBlZC5yZWR1Y2UoZnVuY3Rpb24oc3VtLCBudW0pIHsKICAgICAqICAgcmV0dXJuIHN1bSArIG51bTsKICAgICAqIH0pOwogICAgICogLy8gPT4gNgogICAgICoKICAgICAqIC8vIHJldHVybnMgYSB3cmFwcGVkIHZhbHVlCiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKGZ1bmN0aW9uKG51bSkgewogICAgICogICByZXR1cm4gbnVtICogbnVtOwogICAgICogfSk7CiAgICAgKgogICAgICogXy5pc0FycmF5KHNxdWFyZXMpOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqCiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqLwogICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7CiAgICAgIC8vIGRvbid0IHdyYXAgaWYgYWxyZWFkeSB3cmFwcGVkLCBldmVuIGlmIHdyYXBwZWQgYnkgYSBkaWZmZXJlbnQgYGxvZGFzaGAgY29uc3RydWN0b3IKICAgICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgIWlzQXJyYXkodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKQogICAgICAgPyB2YWx1ZQogICAgICAgOiBuZXcgbG9kYXNoV3JhcHBlcih2YWx1ZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBBIGZhc3QgcGF0aCBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLgogICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhIGBsb2Rhc2hgIGluc3RhbmNlLgogICAgICovCiAgICBmdW5jdGlvbiBsb2Rhc2hXcmFwcGVyKHZhbHVlKSB7CiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTsKICAgIH0KICAgIC8vIGVuc3VyZSBgbmV3IGxvZGFzaFdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBsb2Rhc2hgCiAgICBsb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGxvZGFzaC5wcm90b3R5cGU7CgogICAgLyoqCiAgICAgKiBBbiBvYmplY3QgdXNlZCB0byBmbGFnIGVudmlyb25tZW50cyBmZWF0dXJlcy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQHR5cGUgT2JqZWN0CiAgICAgKi8KICAgIHZhciBzdXBwb3J0ID0gbG9kYXNoLnN1cHBvcnQgPSB7fTsKCiAgICAoZnVuY3Rpb24oKSB7CiAgICAgIHZhciBjdG9yID0gZnVuY3Rpb24oKSB7IHRoaXMueCA9IDE7IH0sCiAgICAgICAgICBvYmplY3QgPSB7ICcwJzogMSwgJ2xlbmd0aCc6IDEgfSwKICAgICAgICAgIHByb3BzID0gW107CgogICAgICBjdG9yLnByb3RvdHlwZSA9IHsgJ3ZhbHVlT2YnOiAxLCAneSc6IDEgfTsKICAgICAgZm9yICh2YXIgcHJvcCBpbiBuZXcgY3RvcikgeyBwcm9wcy5wdXNoKHByb3ApOyB9CiAgICAgIGZvciAocHJvcCBpbiBhcmd1bWVudHMpIHsgfQoKICAgICAgLyoqCiAgICAgICAqIERldGVjdCBpZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIChhbGwgYnV0IE5hcndoYWwgYW5kIE9wZXJhIDwgMTAuNSkuCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnQKICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgKi8KICAgICAgc3VwcG9ydC5hcmdzT2JqZWN0ID0gYXJndW1lbnRzLmNvbnN0cnVjdG9yID09IE9iamVjdCAmJiAhKGFyZ3VtZW50cyBpbnN0YW5jZW9mIEFycmF5KTsKCiAgICAgIC8qKgogICAgICAgKiBEZXRlY3QgaWYgYW4gYGFyZ3VtZW50c2Agb2JqZWN0J3MgW1tDbGFzc11dIGlzIHJlc29sdmFibGUgKGFsbCBidXQgRmlyZWZveCA8IDQsIElFIDwgOSkuCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnQKICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgKi8KICAgICAgc3VwcG9ydC5hcmdzQ2xhc3MgPSBpc0FyZ3VtZW50cyhhcmd1bWVudHMpOwoKICAgICAgLyoqCiAgICAgICAqIERldGVjdCBpZiBgbmFtZWAgb3IgYG1lc3NhZ2VgIHByb3BlcnRpZXMgb2YgYEVycm9yLnByb3RvdHlwZWAgYXJlCiAgICAgICAqIGVudW1lcmFibGUgYnkgZGVmYXVsdC4gKElFIDwgOSwgU2FmYXJpIDwgNS4xKQogICAgICAgKgogICAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0CiAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICovCiAgICAgIHN1cHBvcnQuZW51bUVycm9yUHJvcHMgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGVycm9yUHJvdG8sICdtZXNzYWdlJykgfHwgcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChlcnJvclByb3RvLCAnbmFtZScpOwoKICAgICAgLyoqCiAgICAgICAqIERldGVjdCBpZiBgcHJvdG90eXBlYCBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhYmxlIGJ5IGRlZmF1bHQuCiAgICAgICAqCiAgICAgICAqIEZpcmVmb3ggPCAzLjYsIE9wZXJhID4gOS41MCAtIE9wZXJhIDwgMTEuNjAsIGFuZCBTYWZhcmkgPCA1LjEKICAgICAgICogKGlmIHRoZSBwcm90b3R5cGUgb3IgYSBwcm9wZXJ0eSBvbiB0aGUgcHJvdG90eXBlIGhhcyBiZWVuIHNldCkKICAgICAgICogaW5jb3JyZWN0bHkgc2V0cyBhIGZ1bmN0aW9uJ3MgYHByb3RvdHlwZWAgcHJvcGVydHkgW1tFbnVtZXJhYmxlXV0KICAgICAgICogdmFsdWUgdG8gYHRydWVgLgogICAgICAgKgogICAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0CiAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICovCiAgICAgIHN1cHBvcnQuZW51bVByb3RvdHlwZXMgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGN0b3IsICdwcm90b3R5cGUnKTsKCiAgICAgIC8qKgogICAgICAgKiBEZXRlY3QgaWYgYEZ1bmN0aW9uI2JpbmRgIGV4aXN0cyBhbmQgaXMgaW5mZXJyZWQgdG8gYmUgZmFzdCAoYWxsIGJ1dCBWOCkuCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnQKICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgKi8KICAgICAgc3VwcG9ydC5mYXN0QmluZCA9IG5hdGl2ZUJpbmQgJiYgIWlzVjg7CgogICAgICAvKioKICAgICAgICogRGV0ZWN0IGlmIG93biBwcm9wZXJ0aWVzIGFyZSBpdGVyYXRlZCBhZnRlciBpbmhlcml0ZWQgcHJvcGVydGllcyAoYWxsIGJ1dCBJRSA8IDkpLgogICAgICAgKgogICAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0CiAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICovCiAgICAgIHN1cHBvcnQub3duTGFzdCA9IHByb3BzWzBdICE9ICd4JzsKCiAgICAgIC8qKgogICAgICAgKiBEZXRlY3QgaWYgYGFyZ3VtZW50c2Agb2JqZWN0IGluZGV4ZXMgYXJlIG5vbi1lbnVtZXJhYmxlCiAgICAgICAqIChGaXJlZm94IDwgNCwgSUUgPCA5LCBQaGFudG9tSlMsIFNhZmFyaSA8IDUuMSkuCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnQKICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgKi8KICAgICAgc3VwcG9ydC5ub25FbnVtQXJncyA9IHByb3AgIT0gMDsKCiAgICAgIC8qKgogICAgICAgKiBEZXRlY3QgaWYgcHJvcGVydGllcyBzaGFkb3dpbmcgdGhvc2Ugb24gYE9iamVjdC5wcm90b3R5cGVgIGFyZSBub24tZW51bWVyYWJsZS4KICAgICAgICoKICAgICAgICogSW4gSUUgPCA5IGFuIG9iamVjdHMgb3duIHByb3BlcnRpZXMsIHNoYWRvd2luZyBub24tZW51bWVyYWJsZSBvbmVzLCBhcmUKICAgICAgICogbWFkZSBub24tZW51bWVyYWJsZSBhcyB3ZWxsIChhLmsuYSB0aGUgSlNjcmlwdCBbW0RvbnRFbnVtXV0gYnVnKS4KICAgICAgICoKICAgICAgICogQG1lbWJlck9mIF8uc3VwcG9ydAogICAgICAgKiBAdHlwZSBCb29sZWFuCiAgICAgICAqLwogICAgICBzdXBwb3J0Lm5vbkVudW1TaGFkb3dzID0gIS92YWx1ZU9mLy50ZXN0KHByb3BzKTsKCiAgICAgIC8qKgogICAgICAgKiBEZXRlY3QgaWYgYEFycmF5I3NoaWZ0YCBhbmQgYEFycmF5I3NwbGljZWAgYXVnbWVudCBhcnJheS1saWtlIG9iamVjdHMgY29ycmVjdGx5LgogICAgICAgKgogICAgICAgKiBGaXJlZm94IDwgMTAsIElFIGNvbXBhdGliaWxpdHkgbW9kZSwgYW5kIElFIDwgOSBoYXZlIGJ1Z2d5IEFycmF5IGBzaGlmdCgpYAogICAgICAgKiBhbmQgYHNwbGljZSgpYCBmdW5jdGlvbnMgdGhhdCBmYWlsIHRvIHJlbW92ZSB0aGUgbGFzdCBlbGVtZW50LCBgdmFsdWVbMF1gLAogICAgICAgKiBvZiBhcnJheS1saWtlIG9iamVjdHMgZXZlbiB0aG91Z2ggdGhlIGBsZW5ndGhgIHByb3BlcnR5IGlzIHNldCB0byBgMGAuCiAgICAgICAqIFRoZSBgc2hpZnQoKWAgbWV0aG9kIGlzIGJ1Z2d5IGluIElFIDggY29tcGF0aWJpbGl0eSBtb2RlLCB3aGlsZSBgc3BsaWNlKClgCiAgICAgICAqIGlzIGJ1Z2d5IHJlZ2FyZGxlc3Mgb2YgbW9kZSBpbiBJRSA8IDkgYW5kIGJ1Z2d5IGluIGNvbXBhdGliaWxpdHkgbW9kZSBpbiBJRSA5LgogICAgICAgKgogICAgICAgKiBAbWVtYmVyT2YgXy5zdXBwb3J0CiAgICAgICAqIEB0eXBlIEJvb2xlYW4KICAgICAgICovCiAgICAgIHN1cHBvcnQuc3BsaWNlT2JqZWN0cyA9IChhcnJheVJlZi5zcGxpY2UuY2FsbChvYmplY3QsIDAsIDEpLCAhb2JqZWN0WzBdKTsKCiAgICAgIC8qKgogICAgICAgKiBEZXRlY3QgbGFjayBvZiBzdXBwb3J0IGZvciBhY2Nlc3Npbmcgc3RyaW5nIGNoYXJhY3RlcnMgYnkgaW5kZXguCiAgICAgICAqCiAgICAgICAqIElFIDwgOCBjYW4ndCBhY2Nlc3MgY2hhcmFjdGVycyBieSBpbmRleCBhbmQgSUUgOCBjYW4gb25seSBhY2Nlc3MKICAgICAgICogY2hhcmFjdGVycyBieSBpbmRleCBvbiBzdHJpbmcgbGl0ZXJhbHMuCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnQKICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgKi8KICAgICAgc3VwcG9ydC51bmluZGV4ZWRDaGFycyA9ICgneCdbMF0gKyBPYmplY3QoJ3gnKVswXSkgIT0gJ3h4JzsKCiAgICAgIC8qKgogICAgICAgKiBEZXRlY3QgaWYgYSBET00gbm9kZSdzIFtbQ2xhc3NdXSBpcyByZXNvbHZhYmxlIChhbGwgYnV0IElFIDwgOSkKICAgICAgICogYW5kIHRoYXQgdGhlIEpTIGVuZ2luZSBlcnJvcnMgd2hlbiBhdHRlbXB0aW5nIHRvIGNvZXJjZSBhbiBvYmplY3QgdG8KICAgICAgICogYSBzdHJpbmcgd2l0aG91dCBhIGB0b1N0cmluZ2AgZnVuY3Rpb24uCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnN1cHBvcnQKICAgICAgICogQHR5cGUgQm9vbGVhbgogICAgICAgKi8KICAgICAgdHJ5IHsKICAgICAgICBzdXBwb3J0Lm5vZGVDbGFzcyA9ICEodG9TdHJpbmcuY2FsbChkb2N1bWVudCkgPT0gb2JqZWN0Q2xhc3MgJiYgISh7ICd0b1N0cmluZyc6IDAgfSArICcnKSk7CiAgICAgIH0gY2F0Y2goZSkgewogICAgICAgIHN1cHBvcnQubm9kZUNsYXNzID0gdHJ1ZTsKICAgICAgfQogICAgfSgxKSk7CgogICAgLyoqCiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IExvLURhc2ggYXJlIHNpbWlsYXIgdG8gdGhvc2UgaW4KICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikuIENoYW5nZSB0aGUgZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZQogICAgICogZGVsaW1pdGVycy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQHR5cGUgT2JqZWN0CiAgICAgKi8KICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0gewoKICAgICAgLyoqCiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLgogICAgICAgKgogICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzCiAgICAgICAqIEB0eXBlIFJlZ0V4cAogICAgICAgKi8KICAgICAgJ2VzY2FwZSc6IC88JS0oW1xzXFNdKz8pJT4vZywKCiAgICAgIC8qKgogICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC4KICAgICAgICoKICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncwogICAgICAgKiBAdHlwZSBSZWdFeHAKICAgICAgICovCiAgICAgICdldmFsdWF0ZSc6IC88JShbXHNcU10rPyklPi9nLAoKICAgICAgLyoqCiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LgogICAgICAgKgogICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzCiAgICAgICAqIEB0eXBlIFJlZ0V4cAogICAgICAgKi8KICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSwKCiAgICAgIC8qKgogICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MKICAgICAgICogQHR5cGUgU3RyaW5nCiAgICAgICAqLwogICAgICAndmFyaWFibGUnOiAnJywKCiAgICAgIC8qKgogICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuCiAgICAgICAqCiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MKICAgICAgICogQHR5cGUgT2JqZWN0CiAgICAgICAqLwogICAgICAnaW1wb3J0cyc6IHsKCiAgICAgICAgLyoqCiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLgogICAgICAgICAqCiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzCiAgICAgICAgICogQHR5cGUgRnVuY3Rpb24KICAgICAgICAgKi8KICAgICAgICAnXyc6IGxvZGFzaAogICAgICB9CiAgICB9OwoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8qKgogICAgICogVGhlIHRlbXBsYXRlIHVzZWQgdG8gY3JlYXRlIGl0ZXJhdG9yIGZ1bmN0aW9ucy4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIGRhdGEgb2JqZWN0IHVzZWQgdG8gcG9wdWxhdGUgdGhlIHRleHQuCiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBSZXR1cm5zIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dC4KICAgICAqLwogICAgdmFyIGl0ZXJhdG9yVGVtcGxhdGUgPSBmdW5jdGlvbihvYmopIHsKCiAgICAgIHZhciBfX3AgPSAndmFyIGluZGV4LCBpdGVyYWJsZSA9ICcgKwogICAgICAob2JqLmZpcnN0QXJnKSArCiAgICAgICcsIHJlc3VsdCA9ICcgKwogICAgICAob2JqLmluaXQpICsKICAgICAgJztcbmlmICghaXRlcmFibGUpIHJldHVybiByZXN1bHQ7XG4nICsKICAgICAgKG9iai50b3ApICsKICAgICAgJzsnOwogICAgICAgaWYgKG9iai5hcnJheSkgewogICAgICBfX3AgKz0gJ1xudmFyIGxlbmd0aCA9IGl0ZXJhYmxlLmxlbmd0aDsgaW5kZXggPSAtMTtcbmlmICgnICsKICAgICAgKG9iai5hcnJheSkgKwogICAgICAnKSB7ICAnOwogICAgICAgaWYgKHN1cHBvcnQudW5pbmRleGVkQ2hhcnMpIHsKICAgICAgX19wICs9ICdcbiAgaWYgKGlzU3RyaW5nKGl0ZXJhYmxlKSkge1xuICAgIGl0ZXJhYmxlID0gaXRlcmFibGUuc3BsaXQoXCdcJylcbiAgfSAgJzsKICAgICAgIH0KICAgICAgX19wICs9ICdcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAnICsKICAgICAgKG9iai5sb29wKSArCiAgICAgICc7XG4gIH1cbn1cbmVsc2UgeyAgJzsKICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ub25FbnVtQXJncykgewogICAgICBfX3AgKz0gJ1xuICB2YXIgbGVuZ3RoID0gaXRlcmFibGUubGVuZ3RoOyBpbmRleCA9IC0xO1xuICBpZiAobGVuZ3RoICYmIGlzQXJndW1lbnRzKGl0ZXJhYmxlKSkge1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpbmRleCArPSBcJ1wnO1xuICAgICAgJyArCiAgICAgIChvYmoubG9vcCkgKwogICAgICAnO1xuICAgIH1cbiAgfSBlbHNlIHsgICc7CiAgICAgICB9CgogICAgICAgaWYgKHN1cHBvcnQuZW51bVByb3RvdHlwZXMpIHsKICAgICAgX19wICs9ICdcbiAgdmFyIHNraXBQcm90byA9IHR5cGVvZiBpdGVyYWJsZSA9PSBcJ2Z1bmN0aW9uXCc7XG4gICc7CiAgICAgICB9CgogICAgICAgaWYgKHN1cHBvcnQuZW51bUVycm9yUHJvcHMpIHsKICAgICAgX19wICs9ICdcbiAgdmFyIHNraXBFcnJvclByb3BzID0gaXRlcmFibGUgPT09IGVycm9yUHJvdG8gfHwgaXRlcmFibGUgaW5zdGFuY2VvZiBFcnJvcjtcbiAgJzsKICAgICAgIH0KCiAgICAgICAgICB2YXIgY29uZGl0aW9ucyA9IFtdOyAgICBpZiAoc3VwcG9ydC5lbnVtUHJvdG90eXBlcykgeyBjb25kaXRpb25zLnB1c2goJyEoc2tpcFByb3RvICYmIGluZGV4ID09ICJwcm90b3R5cGUiKScpOyB9ICAgIGlmIChzdXBwb3J0LmVudW1FcnJvclByb3BzKSAgeyBjb25kaXRpb25zLnB1c2goJyEoc2tpcEVycm9yUHJvcHMgJiYgKGluZGV4ID09ICJtZXNzYWdlIiB8fCBpbmRleCA9PSAibmFtZSIpKScpOyB9CgogICAgICAgaWYgKG9iai51c2VIYXMgJiYgb2JqLnVzZUtleXMpIHsKICAgICAgX19wICs9ICdcbiAgdmFyIG93bkluZGV4ID0gLTEsXG4gICAgICBvd25Qcm9wcyA9IG9iamVjdFR5cGVzW3R5cGVvZiBpdGVyYWJsZV0gJiYga2V5cyhpdGVyYWJsZSksXG4gICAgICBsZW5ndGggPSBvd25Qcm9wcyA/IG93blByb3BzLmxlbmd0aCA6IDA7XG5cbiAgd2hpbGUgKCsrb3duSW5kZXggPCBsZW5ndGgpIHtcbiAgICBpbmRleCA9IG93blByb3BzW293bkluZGV4XTtcbic7CiAgICAgICAgICBpZiAoY29uZGl0aW9ucy5sZW5ndGgpIHsKICAgICAgX19wICs9ICcgICAgaWYgKCcgKwogICAgICAoY29uZGl0aW9ucy5qb2luKCcgJiYgJykpICsKICAgICAgJykge1xuICAnOwogICAgICAgfQogICAgICBfX3AgKz0gCiAgICAgIChvYmoubG9vcCkgKwogICAgICAnOyAgICAnOwogICAgICAgaWYgKGNvbmRpdGlvbnMubGVuZ3RoKSB7CiAgICAgIF9fcCArPSAnXG4gICAgfSc7CiAgICAgICB9CiAgICAgIF9fcCArPSAnXG4gIH0gICc7CiAgICAgICB9IGVsc2UgewogICAgICBfX3AgKz0gJ1xuICBmb3IgKGluZGV4IGluIGl0ZXJhYmxlKSB7XG4nOwogICAgICAgICAgaWYgKG9iai51c2VIYXMpIHsgY29uZGl0aW9ucy5wdXNoKCJoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0ZXJhYmxlLCBpbmRleCkiKTsgfSAgICBpZiAoY29uZGl0aW9ucy5sZW5ndGgpIHsKICAgICAgX19wICs9ICcgICAgaWYgKCcgKwogICAgICAoY29uZGl0aW9ucy5qb2luKCcgJiYgJykpICsKICAgICAgJykge1xuICAnOwogICAgICAgfQogICAgICBfX3AgKz0gCiAgICAgIChvYmoubG9vcCkgKwogICAgICAnOyAgICAnOwogICAgICAgaWYgKGNvbmRpdGlvbnMubGVuZ3RoKSB7CiAgICAgIF9fcCArPSAnXG4gICAgfSc7CiAgICAgICB9CiAgICAgIF9fcCArPSAnXG4gIH0gICAgJzsKICAgICAgIGlmIChzdXBwb3J0Lm5vbkVudW1TaGFkb3dzKSB7CiAgICAgIF9fcCArPSAnXG5cbiAgaWYgKGl0ZXJhYmxlICE9PSBvYmplY3RQcm90bykge1xuICAgIHZhciBjdG9yID0gaXRlcmFibGUuY29uc3RydWN0b3IsXG4gICAgICAgIGlzUHJvdG8gPSBpdGVyYWJsZSA9PT0gKGN0b3IgJiYgY3Rvci5wcm90b3R5cGUpLFxuICAgICAgICBjbGFzc05hbWUgPSBpdGVyYWJsZSA9PT0gc3RyaW5nUHJvdG8gPyBzdHJpbmdDbGFzcyA6IGl0ZXJhYmxlID09PSBlcnJvclByb3RvID8gZXJyb3JDbGFzcyA6IHRvU3RyaW5nLmNhbGwoaXRlcmFibGUpLFxuICAgICAgICBub25FbnVtID0gbm9uRW51bVByb3BzW2NsYXNzTmFtZV07XG4gICAgICAnOwogICAgICAgZm9yIChrID0gMDsgayA8IDc7IGsrKykgewogICAgICBfX3AgKz0gJ1xuICAgIGluZGV4ID0gXCcnICsKICAgICAgKG9iai5zaGFkb3dlZFByb3BzW2tdKSArCiAgICAgICdcJztcbiAgICBpZiAoKCEoaXNQcm90byAmJiBub25FbnVtW2luZGV4XSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbChpdGVyYWJsZSwgaW5kZXgpKSc7CiAgICAgICAgICAgICAgaWYgKCFvYmoudXNlSGFzKSB7CiAgICAgIF9fcCArPSAnIHx8ICghbm9uRW51bVtpbmRleF0gJiYgaXRlcmFibGVbaW5kZXhdICE9PSBvYmplY3RQcm90b1tpbmRleF0pJzsKICAgICAgIH0KICAgICAgX19wICs9ICcpIHtcbiAgICAgICcgKwogICAgICAob2JqLmxvb3ApICsKICAgICAgJztcbiAgICB9ICAgICAgJzsKICAgICAgIH0KICAgICAgX19wICs9ICdcbiAgfSAgICAnOwogICAgICAgfQoKICAgICAgIH0KCiAgICAgICBpZiAob2JqLmFycmF5IHx8IHN1cHBvcnQubm9uRW51bUFyZ3MpIHsKICAgICAgX19wICs9ICdcbn0nOwogICAgICAgfQogICAgICBfX3AgKz0gCiAgICAgIChvYmouYm90dG9tKSArCiAgICAgICc7XG5yZXR1cm4gcmVzdWx0JzsKCiAgICAgIHJldHVybiBfX3AKICAgIH07CgogICAgLyoqIFJldXNhYmxlIGl0ZXJhdG9yIG9wdGlvbnMgZm9yIGBhc3NpZ25gIGFuZCBgZGVmYXVsdHNgICovCiAgICB2YXIgZGVmYXVsdHNJdGVyYXRvck9wdGlvbnMgPSB7CiAgICAgICdhcmdzJzogJ29iamVjdCwgc291cmNlLCBndWFyZCcsCiAgICAgICd0b3AnOgogICAgICAgICd2YXIgYXJncyA9IGFyZ3VtZW50cyxcbicgKwogICAgICAgICcgICAgYXJnc0luZGV4ID0gMCxcbicgKwogICAgICAgICIgICAgYXJnc0xlbmd0aCA9IHR5cGVvZiBndWFyZCA9PSAnbnVtYmVyJyA/IDIgOiBhcmdzLmxlbmd0aDtcbiIgKwogICAgICAgICd3aGlsZSAoKythcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4nICsKICAgICAgICAnICBpdGVyYWJsZSA9IGFyZ3NbYXJnc0luZGV4XTtcbicgKwogICAgICAgICcgIGlmIChpdGVyYWJsZSAmJiBvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdKSB7JywKICAgICAgJ2xvb3AnOiAiaWYgKHR5cGVvZiByZXN1bHRbaW5kZXhdID09ICd1bmRlZmluZWQnKSByZXN1bHRbaW5kZXhdID0gaXRlcmFibGVbaW5kZXhdIiwKICAgICAgJ2JvdHRvbSc6ICcgIH1cbn0nCiAgICB9OwoKICAgIC8qKiBSZXVzYWJsZSBpdGVyYXRvciBvcHRpb25zIHNoYXJlZCBieSBgZWFjaGAsIGBmb3JJbmAsIGFuZCBgZm9yT3duYCAqLwogICAgdmFyIGVhY2hJdGVyYXRvck9wdGlvbnMgPSB7CiAgICAgICdhcmdzJzogJ2NvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnJywKICAgICAgJ3RvcCc6ICJjYWxsYmFjayA9IGNhbGxiYWNrICYmIHR5cGVvZiB0aGlzQXJnID09ICd1bmRlZmluZWQnID8gY2FsbGJhY2sgOiBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcpIiwKICAgICAgJ2FycmF5JzogInR5cGVvZiBsZW5ndGggPT0gJ251bWJlciciLAogICAgICAnbG9vcCc6ICdpZiAoY2FsbGJhY2soaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgY29sbGVjdGlvbikgPT09IGZhbHNlKSByZXR1cm4gcmVzdWx0JwogICAgfTsKCiAgICAvKiogUmV1c2FibGUgaXRlcmF0b3Igb3B0aW9ucyBmb3IgYGZvckluYCBhbmQgYGZvck93bmAgKi8KICAgIHZhciBmb3JPd25JdGVyYXRvck9wdGlvbnMgPSB7CiAgICAgICd0b3AnOiAnaWYgKCFvYmplY3RUeXBlc1t0eXBlb2YgaXRlcmFibGVdKSByZXR1cm4gcmVzdWx0O1xuJyArIGVhY2hJdGVyYXRvck9wdGlvbnMudG9wLAogICAgICAnYXJyYXknOiBmYWxzZQogICAgfTsKCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcKICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgcHJlcGVuZHMgYW55IGBwYXJ0aWFsQXJnc2AgdG8gdGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlCiAgICAgKiBib3VuZCBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQgb3IgdGhlIG1ldGhvZCBuYW1lLgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuCiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFsQXJncyBBbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2lkaWNhdG9yXSBVc2VkIHRvIGluZGljYXRlIGJpbmRpbmcgYnkga2V5IG9yIHBhcnRpYWxseQogICAgICogIGFwcGx5aW5nIGFyZ3VtZW50cyBmcm9tIHRoZSByaWdodC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiBjcmVhdGVCb3VuZChmdW5jLCB0aGlzQXJnLCBwYXJ0aWFsQXJncywgaW5kaWNhdG9yKSB7CiAgICAgIHZhciBpc0Z1bmMgPSBpc0Z1bmN0aW9uKGZ1bmMpLAogICAgICAgICAgaXNQYXJ0aWFsID0gIXBhcnRpYWxBcmdzLAogICAgICAgICAga2V5ID0gdGhpc0FyZzsKCiAgICAgIC8vIGp1Z2dsZSBhcmd1bWVudHMKICAgICAgaWYgKGlzUGFydGlhbCkgewogICAgICAgIHZhciByaWdodEluZGljYXRvciA9IGluZGljYXRvcjsKICAgICAgICBwYXJ0aWFsQXJncyA9IHRoaXNBcmc7CiAgICAgIH0KICAgICAgZWxzZSBpZiAoIWlzRnVuYykgewogICAgICAgIGlmICghaW5kaWNhdG9yKSB7CiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yOwogICAgICAgIH0KICAgICAgICB0aGlzQXJnID0gZnVuYzsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gYm91bmQoKSB7CiAgICAgICAgLy8gYEZ1bmN0aW9uI2JpbmRgIHNwZWMKICAgICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4zLjQuNQogICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLAogICAgICAgICAgICB0aGlzQmluZGluZyA9IGlzUGFydGlhbCA/IHRoaXMgOiB0aGlzQXJnOwoKICAgICAgICBpZiAoIWlzRnVuYykgewogICAgICAgICAgZnVuYyA9IHRoaXNBcmdba2V5XTsKICAgICAgICB9CiAgICAgICAgaWYgKHBhcnRpYWxBcmdzLmxlbmd0aCkgewogICAgICAgICAgYXJncyA9IGFyZ3MubGVuZ3RoCiAgICAgICAgICAgID8gKGFyZ3MgPSBuYXRpdmVTbGljZS5jYWxsKGFyZ3MpLCByaWdodEluZGljYXRvciA/IGFyZ3MuY29uY2F0KHBhcnRpYWxBcmdzKSA6IHBhcnRpYWxBcmdzLmNvbmNhdChhcmdzKSkKICAgICAgICAgICAgOiBwYXJ0aWFsQXJnczsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkgewogICAgICAgICAgLy8gZW5zdXJlIGBuZXcgYm91bmRgIGlzIGFuIGluc3RhbmNlIG9mIGBmdW5jYAogICAgICAgICAgdGhpc0JpbmRpbmcgPSBjcmVhdGVPYmplY3QoZnVuYy5wcm90b3R5cGUpOwoKICAgICAgICAgIC8vIG1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yCiAgICAgICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxMy4yLjIKICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTsKICAgICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTsKICAgICAgfQogICAgICByZXR1cm4gYm91bmQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGNvbXBpbGVkIGl0ZXJhdGlvbiBmdW5jdGlvbnMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uczEsIG9wdGlvbnMyLCAuLi5dIFRoZSBjb21waWxlIG9wdGlvbnMgb2JqZWN0KHMpLgogICAgICogIGFycmF5IC0gQSBzdHJpbmcgb2YgY29kZSB0byBkZXRlcm1pbmUgaWYgdGhlIGl0ZXJhYmxlIGlzIGFuIGFycmF5IG9yIGFycmF5LWxpa2UuCiAgICAgKiAgdXNlSGFzIC0gQSBib29sZWFuIHRvIHNwZWNpZnkgdXNpbmcgYGhhc093blByb3BlcnR5YCBjaGVja3MgaW4gdGhlIG9iamVjdCBsb29wLgogICAgICogIHVzZUtleXMgLSBBIGJvb2xlYW4gdG8gc3BlY2lmeSB1c2luZyBgXy5rZXlzYCBmb3Igb3duIHByb3BlcnR5IGl0ZXJhdGlvbi4KICAgICAqICBhcmdzIC0gQSBzdHJpbmcgb2YgY29tbWEgc2VwYXJhdGVkIGFyZ3VtZW50cyB0aGUgaXRlcmF0aW9uIGZ1bmN0aW9uIHdpbGwgYWNjZXB0LgogICAgICogIHRvcCAtIEEgc3RyaW5nIG9mIGNvZGUgdG8gZXhlY3V0ZSBiZWZvcmUgdGhlIGl0ZXJhdGlvbiBicmFuY2hlcy4KICAgICAqICBsb29wIC0gQSBzdHJpbmcgb2YgY29kZSB0byBleGVjdXRlIGluIHRoZSBvYmplY3QgbG9vcC4KICAgICAqICBib3R0b20gLSBBIHN0cmluZyBvZiBjb2RlIHRvIGV4ZWN1dGUgYWZ0ZXIgdGhlIGl0ZXJhdGlvbiBicmFuY2hlcy4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgZnVuY3Rpb24uCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNyZWF0ZUl0ZXJhdG9yKCkgewogICAgICB2YXIgZGF0YSA9IGdldE9iamVjdCgpOwoKICAgICAgLy8gZGF0YSBwcm9wZXJ0aWVzCiAgICAgIGRhdGEuc2hhZG93ZWRQcm9wcyA9IHNoYWRvd2VkUHJvcHM7CiAgICAgIC8vIGl0ZXJhdG9yIG9wdGlvbnMKICAgICAgZGF0YS5hcnJheSA9IGRhdGEuYm90dG9tID0gZGF0YS5sb29wID0gZGF0YS50b3AgPSAnJzsKICAgICAgZGF0YS5pbml0ID0gJ2l0ZXJhYmxlJzsKICAgICAgZGF0YS51c2VIYXMgPSB0cnVlOwogICAgICBkYXRhLnVzZUtleXMgPSAhIWtleXM7CgogICAgICAvLyBtZXJnZSBvcHRpb25zIGludG8gYSB0ZW1wbGF0ZSBkYXRhIG9iamVjdAogICAgICBmb3IgKHZhciBvYmplY3QsIGluZGV4ID0gMDsgb2JqZWN0ID0gYXJndW1lbnRzW2luZGV4XTsgaW5kZXgrKykgewogICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHsKICAgICAgICAgIGRhdGFba2V5XSA9IG9iamVjdFtrZXldOwogICAgICAgIH0KICAgICAgfQogICAgICB2YXIgYXJncyA9IGRhdGEuYXJnczsKICAgICAgZGF0YS5maXJzdEFyZyA9IC9eW14sXSsvLmV4ZWMoYXJncylbMF07CgogICAgICAvLyBjcmVhdGUgdGhlIGZ1bmN0aW9uIGZhY3RvcnkKICAgICAgdmFyIGZhY3RvcnkgPSBGdW5jdGlvbigKICAgICAgICAgICdlcnJvckNsYXNzLCBlcnJvclByb3RvLCBoYXNPd25Qcm9wZXJ0eSwgaXNBcmd1bWVudHMsIGlzQXJyYXksICcgKwogICAgICAgICAgJ2lzU3RyaW5nLCBrZXlzLCBsb2Rhc2gsIG9iamVjdFByb3RvLCBvYmplY3RUeXBlcywgbm9uRW51bVByb3BzLCAnICsKICAgICAgICAgICdzdHJpbmdDbGFzcywgc3RyaW5nUHJvdG8sIHRvU3RyaW5nJywKICAgICAgICAncmV0dXJuIGZ1bmN0aW9uKCcgKyBhcmdzICsgJykge1xuJyArIGl0ZXJhdG9yVGVtcGxhdGUoZGF0YSkgKyAnXG59JwogICAgICApOwoKICAgICAgcmVsZWFzZU9iamVjdChkYXRhKTsKCiAgICAgIC8vIHJldHVybiB0aGUgY29tcGlsZWQgZnVuY3Rpb24KICAgICAgcmV0dXJuIGZhY3RvcnkoCiAgICAgICAgZXJyb3JDbGFzcywgZXJyb3JQcm90bywgaGFzT3duUHJvcGVydHksIGlzQXJndW1lbnRzLCBpc0FycmF5LAogICAgICAgIGlzU3RyaW5nLCBrZXlzLCBsb2Rhc2gsIG9iamVjdFByb3RvLCBvYmplY3RUeXBlcywgbm9uRW51bVByb3BzLAogICAgICAgIHN0cmluZ0NsYXNzLCBzdHJpbmdQcm90bywgdG9TdHJpbmcKICAgICAgKTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBgcHJvdG90eXBlYC4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgcHJvdG90eXBlIG9iamVjdC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdChwcm90b3R5cGUpIHsKICAgICAgcmV0dXJuIGlzT2JqZWN0KHByb3RvdHlwZSkgPyBuYXRpdmVDcmVhdGUocHJvdG90eXBlKSA6IHt9OwogICAgfQogICAgLy8gZmFsbGJhY2sgZm9yIGJyb3dzZXJzIHdpdGhvdXQgYE9iamVjdC5jcmVhdGVgCiAgICBpZiAgKCFuYXRpdmVDcmVhdGUpIHsKICAgICAgdmFyIGNyZWF0ZU9iamVjdCA9IGZ1bmN0aW9uKHByb3RvdHlwZSkgewogICAgICAgIGlmIChpc09iamVjdChwcm90b3R5cGUpKSB7CiAgICAgICAgICBub29wLnByb3RvdHlwZSA9IHByb3RvdHlwZTsKICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgbm9vcDsKICAgICAgICAgIG5vb3AucHJvdG90eXBlID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdCB8fCB7fTsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIFVzZWQgYnkgYGVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaCBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLgogICAgICogQHJldHVybnMge1N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGVzY2FwZUh0bWxDaGFyKG1hdGNoKSB7CiAgICAgIHJldHVybiBodG1sRXNjYXBlc1ttYXRjaF07CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSAiaW5kZXhPZiIgZnVuY3Rpb24uIElmIHRoZSBgXy5pbmRleE9mYCBtZXRob2QgaXMKICAgICAqIGN1c3RvbWl6ZWQsIHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zCiAgICAgKiB0aGUgYGJhc2ljSW5kZXhPZmAgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgImluZGV4T2YiIGZ1bmN0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiBnZXRJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7CiAgICAgIHZhciByZXN1bHQgPSAocmVzdWx0ID0gbG9kYXNoLmluZGV4T2YpID09PSBpbmRleE9mID8gYmFzaWNJbmRleE9mIDogcmVzdWx0OwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQganVnZ2xlcyBhcmd1bWVudHMsIGFsbG93aW5nIGFyZ3VtZW50IG92ZXJsb2FkaW5nCiAgICAgKiBmb3IgYF8uZmxhdHRlbmAgYW5kIGBfLnVuaXFgLCBiZWZvcmUgcGFzc2luZyB0aGVtIHRvIHRoZSBnaXZlbiBgZnVuY2AuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuCiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi4KICAgICAqLwogICAgZnVuY3Rpb24gb3ZlcmxvYWRXcmFwcGVyKGZ1bmMpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBmbGFnLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICAgIC8vIGp1Z2dsZSBhcmd1bWVudHMKICAgICAgICBpZiAodHlwZW9mIGZsYWcgIT0gJ2Jvb2xlYW4nICYmIGZsYWcgIT0gbnVsbCkgewogICAgICAgICAgdGhpc0FyZyA9IGNhbGxiYWNrOwogICAgICAgICAgY2FsbGJhY2sgPSAhKHRoaXNBcmcgJiYgdGhpc0FyZ1tmbGFnXSA9PT0gYXJyYXkpID8gZmxhZyA6IHVuZGVmaW5lZDsKICAgICAgICAgIGZsYWcgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHsKICAgICAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZ1bmMoYXJyYXksIGZsYWcsIGNhbGxiYWNrLCB0aGlzQXJnKTsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIEEgZmFsbGJhY2sgaW1wbGVtZW50YXRpb24gb2YgYGlzUGxhaW5PYmplY3RgIHdoaWNoIGNoZWNrcyBpZiBhIGdpdmVuIGB2YWx1ZWAKICAgICAqIGlzIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3RvciwgYXNzdW1pbmcgb2JqZWN0cyBjcmVhdGVkCiAgICAgKiBieSB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IgaGF2ZSBubyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFuZCB0aGF0CiAgICAgKiB0aGVyZSBhcmUgbm8gYE9iamVjdC5wcm90b3R5cGVgIGV4dGVuc2lvbnMuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGB0cnVlYCwgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLgogICAgICovCiAgICBmdW5jdGlvbiBzaGltSXNQbGFpbk9iamVjdCh2YWx1ZSkgewogICAgICB2YXIgY3RvciwKICAgICAgICAgIHJlc3VsdDsKCiAgICAgIC8vIGF2b2lkIG5vbiBPYmplY3Qgb2JqZWN0cywgYGFyZ3VtZW50c2Agb2JqZWN0cywgYW5kIERPTSBlbGVtZW50cwogICAgICBpZiAoISh2YWx1ZSAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBvYmplY3RDbGFzcykgfHwKICAgICAgICAgIChjdG9yID0gdmFsdWUuY29uc3RydWN0b3IsIGlzRnVuY3Rpb24oY3RvcikgJiYgIShjdG9yIGluc3RhbmNlb2YgY3RvcikpIHx8CiAgICAgICAgICAoIXN1cHBvcnQuYXJnc0NsYXNzICYmIGlzQXJndW1lbnRzKHZhbHVlKSkgfHwKICAgICAgICAgICghc3VwcG9ydC5ub2RlQ2xhc3MgJiYgaXNOb2RlKHZhbHVlKSkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgLy8gSUUgPCA5IGl0ZXJhdGVzIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlZm9yZSBvd24gcHJvcGVydGllcy4gSWYgdGhlIGZpcnN0CiAgICAgIC8vIGl0ZXJhdGVkIHByb3BlcnR5IGlzIGFuIG9iamVjdCdzIG93biBwcm9wZXJ0eSB0aGVuIHRoZXJlIGFyZSBubyBpbmhlcml0ZWQKICAgICAgLy8gZW51bWVyYWJsZSBwcm9wZXJ0aWVzLgogICAgICBpZiAoc3VwcG9ydC5vd25MYXN0KSB7CiAgICAgICAgZm9ySW4odmFsdWUsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkgewogICAgICAgICAgcmVzdWx0ID0gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gZmFsc2U7CiAgICAgIH0KICAgICAgLy8gSW4gbW9zdCBlbnZpcm9ubWVudHMgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMgYXJlIGl0ZXJhdGVkIGJlZm9yZQogICAgICAvLyBpdHMgaW5oZXJpdGVkIHByb3BlcnRpZXMuIElmIHRoZSBsYXN0IGl0ZXJhdGVkIHByb3BlcnR5IGlzIGFuIG9iamVjdCdzCiAgICAgIC8vIG93biBwcm9wZXJ0eSB0aGVuIHRoZXJlIGFyZSBubyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLgogICAgICBmb3JJbih2YWx1ZSwgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgIHJlc3VsdCA9IGtleTsKICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCByZXN1bHQpOwogICAgfQoKICAgIC8qKgogICAgICogVXNlZCBieSBgdW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLgogICAgICoKICAgICAqIEBwcml2YXRlCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2ggVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLgogICAgICogQHJldHVybnMge1N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci4KICAgICAqLwogICAgZnVuY3Rpb24gdW5lc2NhcGVIdG1sQ2hhcihtYXRjaCkgewogICAgICByZXR1cm4gaHRtbFVuZXNjYXBlc1ttYXRjaF07CiAgICB9CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAsIGlmIHRoZSBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAoZnVuY3Rpb24oKSB7IHJldHVybiBfLmlzQXJndW1lbnRzKGFyZ3VtZW50cyk7IH0pKDEsIDIsIDMpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7CiAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcmdzQ2xhc3M7CiAgICB9CiAgICAvLyBmYWxsYmFjayBmb3IgYnJvd3NlcnMgdGhhdCBjYW4ndCBkZXRlY3QgYGFyZ3VtZW50c2Agb2JqZWN0cyBieSBbW0NsYXNzXV0KICAgIGlmICghc3VwcG9ydC5hcmdzQ2xhc3MpIHsKICAgICAgaXNBcmd1bWVudHMgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiB2YWx1ZSA/IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSA6IGZhbHNlOwogICAgICB9OwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAsIGlmIHRoZSBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIChmdW5jdGlvbigpIHsgcmV0dXJuIF8uaXNBcnJheShhcmd1bWVudHMpOyB9KSgpOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqCiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqLwogICAgdmFyIGlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiB2YWx1ZSA/ICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJyYXlDbGFzcykgOiBmYWxzZTsKICAgIH07CgogICAgLyoqCiAgICAgKiBBIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uIG9mIGBPYmplY3Qua2V5c2Agd2hpY2ggcHJvZHVjZXMgYW4gYXJyYXkgb2YgdGhlCiAgICAgKiBnaXZlbiBvYmplY3QncyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcy4KICAgICAqCiAgICAgKiBAcHJpdmF0ZQogICAgICogQHR5cGUgRnVuY3Rpb24KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLgogICAgICovCiAgICB2YXIgc2hpbUtleXMgPSBjcmVhdGVJdGVyYXRvcih7CiAgICAgICdhcmdzJzogJ29iamVjdCcsCiAgICAgICdpbml0JzogJ1tdJywKICAgICAgJ3RvcCc6ICdpZiAoIShvYmplY3RUeXBlc1t0eXBlb2Ygb2JqZWN0XSkpIHJldHVybiByZXN1bHQnLAogICAgICAnbG9vcCc6ICdyZXN1bHQucHVzaChpbmRleCknCiAgICB9KTsKCiAgICAvKioKICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY29tcG9zZWQgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8ua2V5cyh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9KTsKICAgICAqIC8vID0+IFsnb25lJywgJ3R3bycsICd0aHJlZSddIChvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkKICAgICAqLwogICAgdmFyIGtleXMgPSAhbmF0aXZlS2V5cyA/IHNoaW1LZXlzIDogZnVuY3Rpb24ob2JqZWN0KSB7CiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgICBpZiAoKHN1cHBvcnQuZW51bVByb3RvdHlwZXMgJiYgdHlwZW9mIG9iamVjdCA9PSAnZnVuY3Rpb24nKSB8fAogICAgICAgICAgKHN1cHBvcnQubm9uRW51bUFyZ3MgJiYgb2JqZWN0Lmxlbmd0aCAmJiBpc0FyZ3VtZW50cyhvYmplY3QpKSkgewogICAgICAgIHJldHVybiBzaGltS2V5cyhvYmplY3QpOwogICAgICB9CiAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7CiAgICB9OwoKICAgIC8qKgogICAgICogQSBmdW5jdGlvbiBjb21waWxlZCB0byBpdGVyYXRlIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgb2JqZWN0cywgYW5kCiAgICAgKiBzdHJpbmdzIGNvbnNpc3Rlbmx5IGFjcm9zcyBlbnZpcm9ubWVudHMsIGV4ZWN1dGluZyB0aGUgYGNhbGxiYWNrYCBmb3IgZWFjaAogICAgICogZWxlbWVudCBpbiB0aGUgYGNvbGxlY3Rpb25gLiBUaGUgYGNhbGxiYWNrYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQKICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuIENhbGxiYWNrcyBtYXkgZXhpdAogICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuCiAgICAgKgogICAgICogQHByaXZhdGUKICAgICAqIEB0eXBlIEZ1bmN0aW9uCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxTdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uCiAgICAgKiBAcGFyYW0ge01peGVkfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fFN0cmluZ30gUmV0dXJucyBgY29sbGVjdGlvbmAuCiAgICAgKi8KICAgIHZhciBiYXNpY0VhY2ggPSBjcmVhdGVJdGVyYXRvcihlYWNoSXRlcmF0b3JPcHRpb25zKTsKCiAgICAvKioKICAgICAqIFVzZWQgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXM6CiAgICAgKgogICAgICogVGhvdWdoIHRoZSBgPmAgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2UgYD5gIGFuZCBgL2AKICAgICAqIGRvbid0IHJlcXVpcmUgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmcgdW5sZXNzIHRoZXkncmUgcGFydAogICAgICogb2YgYSB0YWcgb3IgYW4gdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLgogICAgICogaHR0cDovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMgKHVuZGVyICJzZW1pLXJlbGF0ZWQgZnVuIGZhY3QiKQogICAgICovCiAgICB2YXIgaHRtbEVzY2FwZXMgPSB7CiAgICAgICcmJzogJyZhbXA7JywKICAgICAgJzwnOiAnJmx0OycsCiAgICAgICc+JzogJyZndDsnLAogICAgICAnIic6ICcmcXVvdDsnLAogICAgICAiJyI6ICcmIzM5OycKICAgIH07CgogICAgLyoqIFVzZWQgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMgKi8KICAgIHZhciBodG1sVW5lc2NhcGVzID0gaW52ZXJ0KGh0bWxFc2NhcGVzKTsKCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvKioKICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0KHMpIHRvIHRoZSBkZXN0aW5hdGlvbgogICAgICogb2JqZWN0LiBTdWJzZXF1ZW50IHNvdXJjZXMgd2lsbCBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMKICAgICAqIHNvdXJjZXMuIElmIGEgYGNhbGxiYWNrYCBmdW5jdGlvbiBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcHJvZHVjZQogICAgICogdGhlIGFzc2lnbmVkIHZhbHVlcy4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGgKICAgICAqIHR3byBhcmd1bWVudHM7IChvYmplY3RWYWx1ZSwgc291cmNlVmFsdWUpLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAdHlwZSBGdW5jdGlvbgogICAgICogQGFsaWFzIGV4dGVuZAogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC4KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc291cmNlMSwgc291cmNlMiwgLi4uXSBUaGUgc291cmNlIG9iamVjdHMuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduaW5nIHZhbHVlcy4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5hc3NpZ24oeyAnbmFtZSc6ICdtb2UnIH0sIHsgJ2FnZSc6IDQwIH0pOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfQogICAgICoKICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduLCBmdW5jdGlvbihhLCBiKSB7CiAgICAgKiAgIHJldHVybiB0eXBlb2YgYSA9PSAndW5kZWZpbmVkJyA/IGIgOiBhOwogICAgICogfSk7CiAgICAgKgogICAgICogdmFyIGZvb2QgPSB7ICduYW1lJzogJ2FwcGxlJyB9OwogICAgICogZGVmYXVsdHMoZm9vZCwgeyAnbmFtZSc6ICdiYW5hbmEnLCAndHlwZSc6ICdmcnVpdCcgfSk7CiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2FwcGxlJywgJ3R5cGUnOiAnZnJ1aXQnIH0KICAgICAqLwogICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUl0ZXJhdG9yKGRlZmF1bHRzSXRlcmF0b3JPcHRpb25zLCB7CiAgICAgICd0b3AnOgogICAgICAgIGRlZmF1bHRzSXRlcmF0b3JPcHRpb25zLnRvcC5yZXBsYWNlKCc7JywKICAgICAgICAgICc7XG4nICsKICAgICAgICAgICJpZiAoYXJnc0xlbmd0aCA+IDMgJiYgdHlwZW9mIGFyZ3NbYXJnc0xlbmd0aCAtIDJdID09ICdmdW5jdGlvbicpIHtcbiIgKwogICAgICAgICAgJyAgdmFyIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGFyZ3NbLS1hcmdzTGVuZ3RoIC0gMV0sIGFyZ3NbYXJnc0xlbmd0aC0tXSwgMik7XG4nICsKICAgICAgICAgICJ9IGVsc2UgaWYgKGFyZ3NMZW5ndGggPiAyICYmIHR5cGVvZiBhcmdzW2FyZ3NMZW5ndGggLSAxXSA9PSAnZnVuY3Rpb24nKSB7XG4iICsKICAgICAgICAgICcgIGNhbGxiYWNrID0gYXJnc1stLWFyZ3NMZW5ndGhdO1xuJyArCiAgICAgICAgICAnfScKICAgICAgICApLAogICAgICAnbG9vcCc6ICdyZXN1bHRbaW5kZXhdID0gY2FsbGJhY2sgPyBjYWxsYmFjayhyZXN1bHRbaW5kZXhdLCBpdGVyYWJsZVtpbmRleF0pIDogaXRlcmFibGVbaW5kZXhdJwogICAgfSk7CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHZhbHVlYC4gSWYgYGRlZXBgIGlzIGB0cnVlYCwgbmVzdGVkIG9iamVjdHMgd2lsbCBhbHNvCiAgICAgKiBiZSBjbG9uZWQsIG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgYXNzaWduZWQgYnkgcmVmZXJlbmNlLiBJZiBhIGBjYWxsYmFja2AKICAgICAqIGZ1bmN0aW9uIGlzIHBhc3NlZCwgaXQgd2lsbCBiZSBleGVjdXRlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWVzLiBJZgogICAgICogYGNhbGxiYWNrYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjbG9uaW5nIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuCiAgICAgKiBUaGUgYGNhbGxiYWNrYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtkZWVwPWZhbHNlXSBBIGZsYWcgdG8gaW5kaWNhdGUgYSBkZWVwIGNsb25lLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcgdmFsdWVzLgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHBhcmFtLSB7QXJyYXl9IFtzdGFja0E9W11dIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIG9iamVjdHMuCiAgICAgKiBAcGFyYW0tIHtBcnJheX0gW3N0YWNrQj1bXV0gQXNzb2NpYXRlcyBjbG9uZXMgd2l0aCBzb3VyY2UgY291bnRlcnBhcnRzLgogICAgICogQHJldHVybnMge01peGVkfSBSZXR1cm5zIHRoZSBjbG9uZWQgYHZhbHVlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIHN0b29nZXMgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnbGFycnknLCAnYWdlJzogNTAgfQogICAgICogXTsKICAgICAqCiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUoc3Rvb2dlcyk7CiAgICAgKiBzaGFsbG93WzBdID09PSBzdG9vZ2VzWzBdOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIHZhciBkZWVwID0gXy5jbG9uZShzdG9vZ2VzLCB0cnVlKTsKICAgICAqIGRlZXBbMF0gPT09IHN0b29nZXNbMF07CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8ubWl4aW4oewogICAgICogICAnY2xvbmUnOiBfLnBhcnRpYWxSaWdodChfLmNsb25lLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICogICAgIHJldHVybiBfLmlzRWxlbWVudCh2YWx1ZSkgPyB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpIDogdW5kZWZpbmVkOwogICAgICogICB9KQogICAgICogfSk7CiAgICAgKgogICAgICogdmFyIGNsb25lID0gXy5jbG9uZShkb2N1bWVudC5ib2R5KTsKICAgICAqIGNsb25lLmNoaWxkTm9kZXMubGVuZ3RoOwogICAgICogLy8gPT4gMAogICAgICovCiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSwgZGVlcCwgY2FsbGJhY2ssIHRoaXNBcmcsIHN0YWNrQSwgc3RhY2tCKSB7CiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTsKCiAgICAgIC8vIGFsbG93cyB3b3JraW5nIHdpdGggIkNvbGxlY3Rpb25zIiBtZXRob2RzIHdpdGhvdXQgdXNpbmcgdGhlaXIgYGNhbGxiYWNrYAogICAgICAvLyBhcmd1bWVudCwgYGluZGV4fGtleWAsIGZvciB0aGlzIG1ldGhvZCdzIGBjYWxsYmFja2AKICAgICAgaWYgKHR5cGVvZiBkZWVwICE9ICdib29sZWFuJyAmJiBkZWVwICE9IG51bGwpIHsKICAgICAgICB0aGlzQXJnID0gY2FsbGJhY2s7CiAgICAgICAgY2FsbGJhY2sgPSBkZWVwOwogICAgICAgIGRlZXAgPSBmYWxzZTsKICAgICAgfQogICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09ICdmdW5jdGlvbicpIHsKICAgICAgICBjYWxsYmFjayA9ICh0eXBlb2YgdGhpc0FyZyA9PSAndW5kZWZpbmVkJykKICAgICAgICAgID8gY2FsbGJhY2sKICAgICAgICAgIDogbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnLCAxKTsKCiAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2socmVzdWx0KTsKICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgIH0KICAgICAgLy8gaW5zcGVjdCBbW0NsYXNzXV0KICAgICAgdmFyIGlzT2JqID0gaXNPYmplY3QocmVzdWx0KTsKICAgICAgaWYgKGlzT2JqKSB7CiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwocmVzdWx0KTsKICAgICAgICBpZiAoIWNsb25lYWJsZUNsYXNzZXNbY2xhc3NOYW1lXSB8fCAoIXN1cHBvcnQubm9kZUNsYXNzICYmIGlzTm9kZShyZXN1bHQpKSkgewogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShyZXN1bHQpOwogICAgICB9CiAgICAgIC8vIHNoYWxsb3cgY2xvbmUKICAgICAgaWYgKCFpc09iaiB8fCAhZGVlcCkgewogICAgICAgIHJldHVybiBpc09iagogICAgICAgICAgPyAoaXNBcnIgPyBzbGljZShyZXN1bHQpIDogYXNzaWduKHt9LCByZXN1bHQpKQogICAgICAgICAgOiByZXN1bHQ7CiAgICAgIH0KICAgICAgdmFyIGN0b3IgPSBjdG9yQnlDbGFzc1tjbGFzc05hbWVdOwogICAgICBzd2l0Y2ggKGNsYXNzTmFtZSkgewogICAgICAgIGNhc2UgYm9vbENsYXNzOgogICAgICAgIGNhc2UgZGF0ZUNsYXNzOgogICAgICAgICAgcmV0dXJuIG5ldyBjdG9yKCtyZXN1bHQpOwoKICAgICAgICBjYXNlIG51bWJlckNsYXNzOgogICAgICAgIGNhc2Ugc3RyaW5nQ2xhc3M6CiAgICAgICAgICByZXR1cm4gbmV3IGN0b3IocmVzdWx0KTsKCiAgICAgICAgY2FzZSByZWdleHBDbGFzczoKICAgICAgICAgIHJldHVybiBjdG9yKHJlc3VsdC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZXN1bHQpKTsKICAgICAgfQogICAgICAvLyBjaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGNvcnJlc3BvbmRpbmcgY2xvbmUKICAgICAgdmFyIGluaXRlZFN0YWNrID0gIXN0YWNrQTsKICAgICAgc3RhY2tBIHx8IChzdGFja0EgPSBnZXRBcnJheSgpKTsKICAgICAgc3RhY2tCIHx8IChzdGFja0IgPSBnZXRBcnJheSgpKTsKCiAgICAgIHZhciBsZW5ndGggPSBzdGFja0EubGVuZ3RoOwogICAgICB3aGlsZSAobGVuZ3RoLS0pIHsKICAgICAgICBpZiAoc3RhY2tBW2xlbmd0aF0gPT0gdmFsdWUpIHsKICAgICAgICAgIHJldHVybiBzdGFja0JbbGVuZ3RoXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgLy8gaW5pdCBjbG9uZWQgb2JqZWN0CiAgICAgIHJlc3VsdCA9IGlzQXJyID8gY3RvcihyZXN1bHQubGVuZ3RoKSA6IHt9OwoKICAgICAgLy8gYWRkIGFycmF5IHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYAogICAgICBpZiAoaXNBcnIpIHsKICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2luZGV4JykpIHsKICAgICAgICAgIHJlc3VsdC5pbmRleCA9IHZhbHVlLmluZGV4OwogICAgICAgIH0KICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2lucHV0JykpIHsKICAgICAgICAgIHJlc3VsdC5pbnB1dCA9IHZhbHVlLmlucHV0OwogICAgICAgIH0KICAgICAgfQogICAgICAvLyBhZGQgdGhlIHNvdXJjZSB2YWx1ZSB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMKICAgICAgLy8gYW5kIGFzc29jaWF0ZSBpdCB3aXRoIGl0cyBjbG9uZQogICAgICBzdGFja0EucHVzaCh2YWx1ZSk7CiAgICAgIHN0YWNrQi5wdXNoKHJlc3VsdCk7CgogICAgICAvLyByZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpCiAgICAgIChpc0FyciA/IGJhc2ljRWFjaCA6IGZvck93bikodmFsdWUsIGZ1bmN0aW9uKG9ialZhbHVlLCBrZXkpIHsKICAgICAgICByZXN1bHRba2V5XSA9IGNsb25lKG9ialZhbHVlLCBkZWVwLCBjYWxsYmFjaywgdW5kZWZpbmVkLCBzdGFja0EsIHN0YWNrQik7CiAgICAgIH0pOwoKICAgICAgaWYgKGluaXRlZFN0YWNrKSB7CiAgICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQSk7CiAgICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQik7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBkZWVwIGNsb25lIG9mIGB2YWx1ZWAuIElmIGEgYGNhbGxiYWNrYCBmdW5jdGlvbiBpcyBwYXNzZWQsCiAgICAgKiBpdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZXMuIElmIGBjYWxsYmFja2AgcmV0dXJucwogICAgICogYHVuZGVmaW5lZGAsIGNsb25pbmcgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjYWxsYmFja2AKICAgICAqIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4KICAgICAqCiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZSBzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobS4gRnVuY3Rpb25zCiAgICAgKiBhbmQgRE9NIG5vZGVzIGFyZSAqKm5vdCoqIGNsb25lZC4gVGhlIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFuZAogICAgICogb2JqZWN0cyBjcmVhdGVkIGJ5IGNvbnN0cnVjdG9ycyBvdGhlciB0aGFuIGBPYmplY3RgIGFyZSBjbG9uZWQgdG8gcGxhaW4gYE9iamVjdGAgb2JqZWN0cy4KICAgICAqIFNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmZyYXN0cnVjdHVyZS5odG1sI2ludGVybmFsLXN0cnVjdHVyZWQtY2xvbmluZy1hbGdvcml0aG0uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZGVlcCBjbG9uZS4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nIHZhbHVlcy4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtNaXhlZH0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgYHZhbHVlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIHN0b29nZXMgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnbGFycnknLCAnYWdlJzogNTAgfQogICAgICogXTsKICAgICAqCiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKHN0b29nZXMpOwogICAgICogZGVlcFswXSA9PT0gc3Rvb2dlc1swXTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKgogICAgICogdmFyIHZpZXcgPSB7CiAgICAgKiAgICdsYWJlbCc6ICdkb2NzJywKICAgICAqICAgJ25vZGUnOiBlbGVtZW50CiAgICAgKiB9OwogICAgICoKICAgICAqIHZhciBjbG9uZSA9IF8uY2xvbmVEZWVwKHZpZXcsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgKiAgIHJldHVybiBfLmlzRWxlbWVudCh2YWx1ZSkgPyB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSkgOiB1bmRlZmluZWQ7CiAgICAgKiB9KTsKICAgICAqCiAgICAgKiBjbG9uZS5ub2RlID09IHZpZXcubm9kZTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgcmV0dXJuIGNsb25lKHZhbHVlLCB0cnVlLCBjYWxsYmFjaywgdGhpc0FyZyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdChzKSB0byB0aGUgZGVzdGluYXRpb24KICAgICAqIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBPbmNlIGEKICAgICAqIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCBkZWZhdWx0cyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSB3aWxsIGJlIGlnbm9yZWQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEB0eXBlIEZ1bmN0aW9uCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LgogICAgICogQHBhcmFtIHtPYmplY3R9IFtzb3VyY2UxLCBzb3VyY2UyLCAuLi5dIFRoZSBzb3VyY2Ugb2JqZWN0cy4KICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBBbGxvd3Mgd29ya2luZyB3aXRoIGBfLnJlZHVjZWAgd2l0aG91dCB1c2luZyBpdHMKICAgICAqICBjYWxsYmFjaydzIGBrZXlgIGFuZCBgb2JqZWN0YCBhcmd1bWVudHMgYXMgc291cmNlcy4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGZvb2QgPSB7ICduYW1lJzogJ2FwcGxlJyB9OwogICAgICogXy5kZWZhdWx0cyhmb29kLCB7ICduYW1lJzogJ2JhbmFuYScsICd0eXBlJzogJ2ZydWl0JyB9KTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYXBwbGUnLCAndHlwZSc6ICdmcnVpdCcgfQogICAgICovCiAgICB2YXIgZGVmYXVsdHMgPSBjcmVhdGVJdGVyYXRvcihkZWZhdWx0c0l0ZXJhdG9yT3B0aW9ucyk7CgogICAgLyoqCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBzaW1pbGFyIHRvIGBfLmZpbmRgLCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlCiAgICAgKiBlbGVtZW50IHRoYXQgcGFzc2VzIHRoZSBjYWxsYmFjayBjaGVjaywgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gc2VhcmNoLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8U3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyCiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZQogICAgICogIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge01peGVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZmluZEtleSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9LCBmdW5jdGlvbihudW0pIHsKICAgICAqICAgcmV0dXJuIG51bSAlIDIgPT0gMDsKICAgICAqIH0pOwogICAgICogLy8gPT4gJ2InCiAgICAgKi8KICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgcmVzdWx0OwogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZyk7CiAgICAgIGZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkgewogICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpKSB7CiAgICAgICAgICByZXN1bHQgPSBrZXk7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEl0ZXJhdGVzIG92ZXIgYG9iamVjdGAncyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMsIGV4ZWN1dGluZwogICAgICogdGhlIGBjYWxsYmFja2AgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBgY2FsbGJhY2tgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQKICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBDYWxsYmFja3MgbWF5IGV4aXQgaXRlcmF0aW9uCiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAdHlwZSBGdW5jdGlvbgogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIGZ1bmN0aW9uIERvZyhuYW1lKSB7CiAgICAgKiAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgKiB9CiAgICAgKgogICAgICogRG9nLnByb3RvdHlwZS5iYXJrID0gZnVuY3Rpb24oKSB7CiAgICAgKiAgIGFsZXJ0KCdXb29mLCB3b29mIScpOwogICAgICogfTsKICAgICAqCiAgICAgKiBfLmZvckluKG5ldyBEb2coJ0RhZ255JyksIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAqICAgYWxlcnQoa2V5KTsKICAgICAqIH0pOwogICAgICogLy8gPT4gYWxlcnRzICduYW1lJyBhbmQgJ2JhcmsnIChvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkKICAgICAqLwogICAgdmFyIGZvckluID0gY3JlYXRlSXRlcmF0b3IoZWFjaEl0ZXJhdG9yT3B0aW9ucywgZm9yT3duSXRlcmF0b3JPcHRpb25zLCB7CiAgICAgICd1c2VIYXMnOiBmYWxzZQogICAgfSk7CgogICAgLyoqCiAgICAgKiBJdGVyYXRlcyBvdmVyIGFuIG9iamVjdCdzIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMsIGV4ZWN1dGluZyB0aGUgYGNhbGxiYWNrYAogICAgICogZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBgY2FsbGJhY2tgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlCiAgICAgKiBhcmd1bWVudHM7ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBDYWxsYmFja3MgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkKICAgICAqIHJldHVybmluZyBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAdHlwZSBGdW5jdGlvbgogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZm9yT3duKHsgJzAnOiAnemVybycsICcxJzogJ29uZScsICdsZW5ndGgnOiAyIH0sIGZ1bmN0aW9uKG51bSwga2V5KSB7CiAgICAgKiAgIGFsZXJ0KGtleSk7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IGFsZXJ0cyAnMCcsICcxJywgYW5kICdsZW5ndGgnIChvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkKICAgICAqLwogICAgdmFyIGZvck93biA9IGNyZWF0ZUl0ZXJhdG9yKGVhY2hJdGVyYXRvck9wdGlvbnMsIGZvck93bkl0ZXJhdG9yT3B0aW9ucyk7CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgc29ydGVkIGFycmF5IG9mIGFsbCBlbnVtZXJhYmxlIHByb3BlcnRpZXMsIG93biBhbmQgaW5oZXJpdGVkLAogICAgICogb2YgYG9iamVjdGAgdGhhdCBoYXZlIGZ1bmN0aW9uIHZhbHVlcy4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIG1ldGhvZHMKICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyB0aGF0IGhhdmUgZnVuY3Rpb24gdmFsdWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmZ1bmN0aW9ucyhfKTsKICAgICAqIC8vID0+IFsnYWxsJywgJ2FueScsICdiaW5kJywgJ2JpbmRBbGwnLCAnY2xvbmUnLCAnY29tcGFjdCcsICdjb21wb3NlJywgLi4uXQogICAgICovCiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7CiAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7CiAgICAgICAgICByZXN1bHQucHVzaChrZXkpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiByZXN1bHQuc29ydCgpOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgb2JqZWN0IGBwcm9wZXJ0eWAgZXhpc3RzIGFuZCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSwKICAgICAqIGluc3RlYWQgb2YgYW4gaW5oZXJpdGVkIHByb3BlcnR5LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLgogICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IFRoZSBwcm9wZXJ0eSB0byBjaGVjayBmb3IuCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYga2V5IGlzIGEgZGlyZWN0IHByb3BlcnR5LCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaGFzKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCAnYicpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwcm9wZXJ0eSkgewogICAgICByZXR1cm4gb2JqZWN0ID8gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSA6IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gYG9iamVjdGAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LgogICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3JlYXRlZCBpbnZlcnRlZCBvYmplY3QuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqICBfLmludmVydCh7ICdmaXJzdCc6ICdtb2UnLCAnc2Vjb25kJzogJ2xhcnJ5JyB9KTsKICAgICAqIC8vID0+IHsgJ21vZSc6ICdmaXJzdCcsICdsYXJyeSc6ICdzZWNvbmQnIH0KICAgICAqLwogICAgZnVuY3Rpb24gaW52ZXJ0KG9iamVjdCkgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIHByb3BzID0ga2V5cyhvYmplY3QpLAogICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLAogICAgICAgICAgcmVzdWx0ID0ge307CgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07CiAgICAgICAgcmVzdWx0W29iamVjdFtrZXldXSA9IGtleTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuIHZhbHVlLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgYHRydWVgLCBpZiB0aGUgYHZhbHVlYCBpcyBhIGJvb2xlYW4gdmFsdWUsIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc0Jvb2xlYW4obnVsbCk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICovCiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHsKICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBib29sQ2xhc3M7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGRhdGUuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAsIGlmIHRoZSBgdmFsdWVgIGlzIGEgZGF0ZSwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPyAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IGRhdGVDbGFzcykgOiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAsIGlmIHRoZSBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPyB2YWx1ZS5ub2RlVHlwZSA9PT0gMSA6IGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZW1wdHkuIEFycmF5cywgc3RyaW5ncywgb3IgYGFyZ3VtZW50c2Agb2JqZWN0cyB3aXRoIGEKICAgICAqIGxlbmd0aCBvZiBgMGAgYW5kIG9iamVjdHMgd2l0aCBubyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFyZSBjb25zaWRlcmVkCiAgICAgKiAiZW1wdHkiLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGB0cnVlYCwgaWYgdGhlIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uaXNFbXB0eSh7fSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKgogICAgICogXy5pc0VtcHR5KCcnKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqLwogICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkgewogICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTsKICAgICAgaWYgKCF2YWx1ZSkgewogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0KICAgICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwodmFsdWUpLAogICAgICAgICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOwoKICAgICAgaWYgKChjbGFzc05hbWUgPT0gYXJyYXlDbGFzcyB8fCBjbGFzc05hbWUgPT0gc3RyaW5nQ2xhc3MgfHwKICAgICAgICAgIChzdXBwb3J0LmFyZ3NDbGFzcyA/IGNsYXNzTmFtZSA9PSBhcmdzQ2xhc3MgOiBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB8fAogICAgICAgICAgKGNsYXNzTmFtZSA9PSBvYmplY3RDbGFzcyAmJiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInICYmIGlzRnVuY3Rpb24odmFsdWUuc3BsaWNlKSkpIHsKICAgICAgICByZXR1cm4gIWxlbmd0aDsKICAgICAgfQogICAgICBmb3JPd24odmFsdWUsIGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiAocmVzdWx0ID0gZmFsc2UpOwogICAgICB9KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUKICAgICAqIGVxdWl2YWxlbnQgdG8gZWFjaCBvdGhlci4gSWYgYGNhbGxiYWNrYCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8KICAgICAqIGNvbXBhcmUgdmFsdWVzLiBJZiBgY2FsbGJhY2tgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zIHdpbGwgYmUgaGFuZGxlZAogICAgICogYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGNhbGxiYWNrYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aAogICAgICogdHdvIGFyZ3VtZW50czsgKGEsIGIpLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtNaXhlZH0gYSBUaGUgdmFsdWUgdG8gY29tcGFyZS4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IGIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaW5nIHZhbHVlcy4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEBwYXJhbS0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIGBhYCBvYmplY3RzLgogICAgICogQHBhcmFtLSB7QXJyYXl9IFtzdGFja0I9W11dIFRyYWNrcyB0cmF2ZXJzZWQgYGJgIG9iamVjdHMuCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAsIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIG1vZSA9IHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH07CiAgICAgKiB2YXIgY29weSA9IHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH07CiAgICAgKgogICAgICogbW9lID09IGNvcHk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uaXNFcXVhbChtb2UsIGNvcHkpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIHZhciB3b3JkcyA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddOwogICAgICogdmFyIG90aGVyV29yZHMgPSBbJ2hpJywgJ2dvb2RieWUnXTsKICAgICAqCiAgICAgKiBfLmlzRXF1YWwod29yZHMsIG90aGVyV29yZHMsIGZ1bmN0aW9uKGEsIGIpIHsKICAgICAqICAgdmFyIHJlR3JlZXQgPSAvXig/OmhlbGxvfGhpKSQvaSwKICAgICAqICAgICAgIGFHcmVldCA9IF8uaXNTdHJpbmcoYSkgJiYgcmVHcmVldC50ZXN0KGEpLAogICAgICogICAgICAgYkdyZWV0ID0gXy5pc1N0cmluZyhiKSAmJiByZUdyZWV0LnRlc3QoYik7CiAgICAgKgogICAgICogICByZXR1cm4gKGFHcmVldCB8fCBiR3JlZXQpID8gKGFHcmVldCA9PSBiR3JlZXQpIDogdW5kZWZpbmVkOwogICAgICogfSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzRXF1YWwoYSwgYiwgY2FsbGJhY2ssIHRoaXNBcmcsIHN0YWNrQSwgc3RhY2tCKSB7CiAgICAgIC8vIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCB3aGVuIGNvbXBhcmluZyBvYmplY3RzLCBgYWAgaGFzIGF0IGxlYXN0IHRoZSBwcm9wZXJ0aWVzIG9mIGBiYAogICAgICB2YXIgd2hlcmVJbmRpY2F0b3IgPSBjYWxsYmFjayA9PT0gaW5kaWNhdG9yT2JqZWN0OwogICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09ICdmdW5jdGlvbicgJiYgIXdoZXJlSW5kaWNhdG9yKSB7CiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDIpOwogICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhhLCBiKTsKICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgcmV0dXJuICEhcmVzdWx0OwogICAgICAgIH0KICAgICAgfQogICAgICAvLyBleGl0IGVhcmx5IGZvciBpZGVudGljYWwgdmFsdWVzCiAgICAgIGlmIChhID09PSBiKSB7CiAgICAgICAgLy8gdHJlYXQgYCswYCB2cy4gYC0wYCBhcyBub3QgZXF1YWwKICAgICAgICByZXR1cm4gYSAhPT0gMCB8fCAoMSAvIGEgPT0gMSAvIGIpOwogICAgICB9CiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGEsCiAgICAgICAgICBvdGhlclR5cGUgPSB0eXBlb2YgYjsKCiAgICAgIC8vIGV4aXQgZWFybHkgZm9yIHVubGlrZSBwcmltaXRpdmUgdmFsdWVzCiAgICAgIGlmIChhID09PSBhICYmCiAgICAgICAgICAoIWEgfHwgKHR5cGUgIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlICE9ICdvYmplY3QnKSkgJiYKICAgICAgICAgICghYiB8fCAob3RoZXJUeXBlICE9ICdmdW5jdGlvbicgJiYgb3RoZXJUeXBlICE9ICdvYmplY3QnKSkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgLy8gZXhpdCBlYXJseSBmb3IgYG51bGxgIGFuZCBgdW5kZWZpbmVkYCwgYXZvaWRpbmcgRVMzJ3MgRnVuY3Rpb24jY2FsbCBiZWhhdmlvcgogICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4zLjQuNAogICAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgewogICAgICAgIHJldHVybiBhID09PSBiOwogICAgICB9CiAgICAgIC8vIGNvbXBhcmUgW1tDbGFzc11dIG5hbWVzCiAgICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpLAogICAgICAgICAgb3RoZXJDbGFzcyA9IHRvU3RyaW5nLmNhbGwoYik7CgogICAgICBpZiAoY2xhc3NOYW1lID09IGFyZ3NDbGFzcykgewogICAgICAgIGNsYXNzTmFtZSA9IG9iamVjdENsYXNzOwogICAgICB9CiAgICAgIGlmIChvdGhlckNsYXNzID09IGFyZ3NDbGFzcykgewogICAgICAgIG90aGVyQ2xhc3MgPSBvYmplY3RDbGFzczsKICAgICAgfQogICAgICBpZiAoY2xhc3NOYW1lICE9IG90aGVyQ2xhc3MpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgc3dpdGNoIChjbGFzc05hbWUpIHsKICAgICAgICBjYXNlIGJvb2xDbGFzczoKICAgICAgICBjYXNlIGRhdGVDbGFzczoKICAgICAgICAgIC8vIGNvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtYmVycywgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzIGFuZCBib29sZWFucwogICAgICAgICAgLy8gdG8gYDFgIG9yIGAwYCwgdHJlYXRpbmcgaW52YWxpZCBkYXRlcyBjb2VyY2VkIHRvIGBOYU5gIGFzIG5vdCBlcXVhbAogICAgICAgICAgcmV0dXJuICthID09ICtiOwoKICAgICAgICBjYXNlIG51bWJlckNsYXNzOgogICAgICAgICAgLy8gdHJlYXQgYE5hTmAgdnMuIGBOYU5gIGFzIGVxdWFsCiAgICAgICAgICByZXR1cm4gKGEgIT0gK2EpCiAgICAgICAgICAgID8gYiAhPSArYgogICAgICAgICAgICAvLyBidXQgdHJlYXQgYCswYCB2cy4gYC0wYCBhcyBub3QgZXF1YWwKICAgICAgICAgICAgOiAoYSA9PSAwID8gKDEgLyBhID09IDEgLyBiKSA6IGEgPT0gK2IpOwoKICAgICAgICBjYXNlIHJlZ2V4cENsYXNzOgogICAgICAgIGNhc2Ugc3RyaW5nQ2xhc3M6CiAgICAgICAgICAvLyBjb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIChodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4xMC42LjQpCiAgICAgICAgICAvLyB0cmVhdCBzdHJpbmcgcHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3QgaW5zdGFuY2VzIGFzIGVxdWFsCiAgICAgICAgICByZXR1cm4gYSA9PSBTdHJpbmcoYik7CiAgICAgIH0KICAgICAgdmFyIGlzQXJyID0gY2xhc3NOYW1lID09IGFycmF5Q2xhc3M7CiAgICAgIGlmICghaXNBcnIpIHsKICAgICAgICAvLyB1bndyYXAgYW55IGBsb2Rhc2hgIHdyYXBwZWQgdmFsdWVzCiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYSwgJ19fd3JhcHBlZF9fICcpIHx8IGhhc093blByb3BlcnR5LmNhbGwoYiwgJ19fd3JhcHBlZF9fJykpIHsKICAgICAgICAgIHJldHVybiBpc0VxdWFsKGEuX193cmFwcGVkX18gfHwgYSwgYi5fX3dyYXBwZWRfXyB8fCBiLCBjYWxsYmFjaywgdGhpc0FyZywgc3RhY2tBLCBzdGFja0IpOwogICAgICAgIH0KICAgICAgICAvLyBleGl0IGZvciBmdW5jdGlvbnMgYW5kIERPTSBub2RlcwogICAgICAgIGlmIChjbGFzc05hbWUgIT0gb2JqZWN0Q2xhc3MgfHwgKCFzdXBwb3J0Lm5vZGVDbGFzcyAmJiAoaXNOb2RlKGEpIHx8IGlzTm9kZShiKSkpKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIC8vIGluIG9sZGVyIHZlcnNpb25zIG9mIE9wZXJhLCBgYXJndW1lbnRzYCBvYmplY3RzIGhhdmUgYEFycmF5YCBjb25zdHJ1Y3RvcnMKICAgICAgICB2YXIgY3RvckEgPSAhc3VwcG9ydC5hcmdzT2JqZWN0ICYmIGlzQXJndW1lbnRzKGEpID8gT2JqZWN0IDogYS5jb25zdHJ1Y3RvciwKICAgICAgICAgICAgY3RvckIgPSAhc3VwcG9ydC5hcmdzT2JqZWN0ICYmIGlzQXJndW1lbnRzKGIpID8gT2JqZWN0IDogYi5jb25zdHJ1Y3RvcjsKCiAgICAgICAgLy8gbm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwKICAgICAgICBpZiAoY3RvckEgIT0gY3RvckIgJiYgISgKICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGN0b3JBKSAmJiBjdG9yQSBpbnN0YW5jZW9mIGN0b3JBICYmCiAgICAgICAgICAgICAgaXNGdW5jdGlvbihjdG9yQikgJiYgY3RvckIgaW5zdGFuY2VvZiBjdG9yQgogICAgICAgICAgICApKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIC8vIGFzc3VtZSBjeWNsaWMgc3RydWN0dXJlcyBhcmUgZXF1YWwKICAgICAgLy8gdGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpYyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEKICAgICAgLy8gc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYCAoaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMTIuMykKICAgICAgdmFyIGluaXRlZFN0YWNrID0gIXN0YWNrQTsKICAgICAgc3RhY2tBIHx8IChzdGFja0EgPSBnZXRBcnJheSgpKTsKICAgICAgc3RhY2tCIHx8IChzdGFja0IgPSBnZXRBcnJheSgpKTsKCiAgICAgIHZhciBsZW5ndGggPSBzdGFja0EubGVuZ3RoOwogICAgICB3aGlsZSAobGVuZ3RoLS0pIHsKICAgICAgICBpZiAoc3RhY2tBW2xlbmd0aF0gPT0gYSkgewogICAgICAgICAgcmV0dXJuIHN0YWNrQltsZW5ndGhdID09IGI7CiAgICAgICAgfQogICAgICB9CiAgICAgIHZhciBzaXplID0gMDsKICAgICAgcmVzdWx0ID0gdHJ1ZTsKCiAgICAgIC8vIGFkZCBgYWAgYW5kIGBiYCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMKICAgICAgc3RhY2tBLnB1c2goYSk7CiAgICAgIHN0YWNrQi5wdXNoKGIpOwoKICAgICAgLy8gcmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKQogICAgICBpZiAoaXNBcnIpIHsKICAgICAgICBsZW5ndGggPSBhLmxlbmd0aDsKICAgICAgICBzaXplID0gYi5sZW5ndGg7CgogICAgICAgIC8vIGNvbXBhcmUgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5CiAgICAgICAgcmVzdWx0ID0gc2l6ZSA9PSBhLmxlbmd0aDsKICAgICAgICBpZiAoIXJlc3VsdCAmJiAhd2hlcmVJbmRpY2F0b3IpIHsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICAgIC8vIGRlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMKICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7CiAgICAgICAgICB2YXIgaW5kZXggPSBsZW5ndGgsCiAgICAgICAgICAgICAgdmFsdWUgPSBiW3NpemVdOwoKICAgICAgICAgIGlmICh3aGVyZUluZGljYXRvcikgewogICAgICAgICAgICB3aGlsZSAoaW5kZXgtLSkgewogICAgICAgICAgICAgIGlmICgocmVzdWx0ID0gaXNFcXVhbChhW2luZGV4XSwgdmFsdWUsIGNhbGxiYWNrLCB0aGlzQXJnLCBzdGFja0EsIHN0YWNrQikpKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoIShyZXN1bHQgPSBpc0VxdWFsKGFbc2l6ZV0sIHZhbHVlLCBjYWxsYmFjaywgdGhpc0FyZywgc3RhY2tBLCBzdGFja0IpKSkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfQogICAgICAvLyBkZWVwIGNvbXBhcmUgb2JqZWN0cyB1c2luZyBgZm9ySW5gLCBpbnN0ZWFkIG9mIGBmb3JPd25gLCB0byBhdm9pZCBgT2JqZWN0LmtleXNgCiAgICAgIC8vIHdoaWNoLCBpbiB0aGlzIGNhc2UsIGlzIG1vcmUgY29zdGx5CiAgICAgIGZvckluKGIsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGIpIHsKICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXkpKSB7CiAgICAgICAgICAvLyBjb3VudCB0aGUgbnVtYmVyIG9mIHByb3BlcnRpZXMuCiAgICAgICAgICBzaXplKys7CiAgICAgICAgICAvLyBkZWVwIGNvbXBhcmUgZWFjaCBwcm9wZXJ0eSB2YWx1ZS4KICAgICAgICAgIHJldHVybiAocmVzdWx0ID0gaGFzT3duUHJvcGVydHkuY2FsbChhLCBrZXkpICYmIGlzRXF1YWwoYVtrZXldLCB2YWx1ZSwgY2FsbGJhY2ssIHRoaXNBcmcsIHN0YWNrQSwgc3RhY2tCKSk7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGlmIChyZXN1bHQgJiYgIXdoZXJlSW5kaWNhdG9yKSB7CiAgICAgICAgLy8gZW5zdXJlIGJvdGggb2JqZWN0cyBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBwcm9wZXJ0aWVzCiAgICAgICAgZm9ySW4oYSwgZnVuY3Rpb24odmFsdWUsIGtleSwgYSkgewogICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYSwga2V5KSkgewogICAgICAgICAgICAvLyBgc2l6ZWAgd2lsbCBiZSBgLTFgIGlmIGBhYCBoYXMgbW9yZSBwcm9wZXJ0aWVzIHRoYW4gYGJgCiAgICAgICAgICAgIHJldHVybiAocmVzdWx0ID0gLS1zaXplID4gLTEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgIGlmIChpbml0ZWRTdGFjaykgewogICAgICAgIHJlbGVhc2VBcnJheShzdGFja0EpOwogICAgICAgIHJlbGVhc2VBcnJheShzdGFja0IpOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcywgb3IgY2FuIGJlIGNvZXJjZWQgdG8sIGEgZmluaXRlIG51bWJlci4KICAgICAqCiAgICAgKiBOb3RlOiBUaGlzIGlzIG5vdCB0aGUgc2FtZSBhcyBuYXRpdmUgYGlzRmluaXRlYCwgd2hpY2ggd2lsbCByZXR1cm4gdHJ1ZSBmb3IKICAgICAqIGJvb2xlYW5zIGFuZCBlbXB0eSBzdHJpbmdzLiBTZWUgaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMS4yLjUuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAsIGlmIHRoZSBgdmFsdWVgIGlzIGZpbml0ZSwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmlzRmluaXRlKC0xMDEpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIF8uaXNGaW5pdGUoJzEwJyk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKgogICAgICogXy5pc0Zpbml0ZSh0cnVlKTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKgogICAgICogXy5pc0Zpbml0ZSgnJyk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqLwogICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHsKICAgICAgcmV0dXJuIG5hdGl2ZUlzRmluaXRlKHZhbHVlKSAmJiAhbmF0aXZlSXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGB0cnVlYCwgaWYgdGhlIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHsKICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nOwogICAgfQogICAgLy8gZmFsbGJhY2sgZm9yIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpCiAgICBpZiAoaXNGdW5jdGlvbigveC8pKSB7CiAgICAgIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBmdW5jQ2xhc3M7CiAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGUgbGFuZ3VhZ2UgdHlwZSBvZiBPYmplY3QuCiAgICAgKiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYCkKICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGB0cnVlYCwgaWYgdGhlIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaXNPYmplY3Qoe30pOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqCiAgICAgKiBfLmlzT2JqZWN0KDEpOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqLwogICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHsKICAgICAgLy8gY2hlY2sgaWYgdGhlIHZhbHVlIGlzIHRoZSBFQ01BU2NyaXB0IGxhbmd1YWdlIHR5cGUgb2YgT2JqZWN0CiAgICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDgKICAgICAgLy8gYW5kIGF2b2lkIGEgVjggYnVnCiAgICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIyOTEKICAgICAgcmV0dXJuICEhKHZhbHVlICYmIG9iamVjdFR5cGVzW3R5cGVvZiB2YWx1ZV0pOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuCiAgICAgKgogICAgICogTm90ZTogVGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgbmF0aXZlIGBpc05hTmAsIHdoaWNoIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IKICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciB2YWx1ZXMuIFNlZSBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4xLjIuNC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGB0cnVlYCwgaWYgdGhlIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc05hTihOYU4pOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqCiAgICAgKiBpc05hTih1bmRlZmluZWQpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7CiAgICAgIC8vIGBOYU5gIGFzIGEgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZgogICAgICAvLyAocGVyZm9ybSB0aGUgW1tDbGFzc11dIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWUgaG9zdCBvYmplY3RzIGluIElFKQogICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZQogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgYHRydWVgLCBpZiB0aGUgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc051bGwobnVsbCk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKgogICAgICogXy5pc051bGwodW5kZWZpbmVkKTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIG51bWJlci4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay4KICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBSZXR1cm5zIGB0cnVlYCwgaWYgdGhlIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pc051bWJlcig4LjQgKiA1KTsKICAgICAqIC8vID0+IHRydWUKICAgICAqLwogICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHsKICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBudW1iZXJDbGFzczsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBhIGdpdmVuIGB2YWx1ZWAgaXMgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgYHRydWVgLCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIGZ1bmN0aW9uIFN0b29nZShuYW1lLCBhZ2UpIHsKICAgICAqICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAqICAgdGhpcy5hZ2UgPSBhZ2U7CiAgICAgKiB9CiAgICAgKgogICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBTdG9vZ2UoJ21vZScsIDQwKSk7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pOwogICAgICogLy8gPT4gZmFsc2UKICAgICAqCiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIHZhciBpc1BsYWluT2JqZWN0ID0gIWdldFByb3RvdHlwZU9mID8gc2hpbUlzUGxhaW5PYmplY3QgOiBmdW5jdGlvbih2YWx1ZSkgewogICAgICBpZiAoISh2YWx1ZSAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PSBvYmplY3RDbGFzcykgfHwgKCFzdXBwb3J0LmFyZ3NDbGFzcyAmJiBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHZhciB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiwKICAgICAgICAgIG9ialByb3RvID0gdHlwZW9mIHZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyAmJiAob2JqUHJvdG8gPSBnZXRQcm90b3R5cGVPZih2YWx1ZU9mKSkgJiYgZ2V0UHJvdG90eXBlT2Yob2JqUHJvdG8pOwoKICAgICAgcmV0dXJuIG9ialByb3RvCiAgICAgICAgPyAodmFsdWUgPT0gb2JqUHJvdG8gfHwgZ2V0UHJvdG90eXBlT2YodmFsdWUpID09IG9ialByb3RvKQogICAgICAgIDogc2hpbUlzUGxhaW5PYmplY3QodmFsdWUpOwogICAgfTsKCiAgICAvKioKICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcmVndWxhciBleHByZXNzaW9uLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLgogICAgICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgYHRydWVgLCBpZiB0aGUgYHZhbHVlYCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmlzUmVnRXhwKC9tb2UvKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqLwogICAgZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHsKICAgICAgcmV0dXJuICEhKHZhbHVlICYmIG9iamVjdFR5cGVzW3R5cGVvZiB2YWx1ZV0pICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09IHJlZ2V4cENsYXNzOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAsIGlmIHRoZSBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaXNTdHJpbmcoJ21vZScpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkgewogICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN0cmluZ0NsYXNzOwogICAgfQoKICAgIC8qKgogICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAsIGlmIHRoZSBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqLwogICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHsKICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAndW5kZWZpbmVkJzsKICAgIH0KCiAgICAvKioKICAgICAqIFJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHRoZSBzb3VyY2Ugb2JqZWN0KHMpLCB0aGF0CiAgICAgKiBkb24ndCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLCBpbnRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIFN1YnNlcXVlbnQgc291cmNlcwogICAgICogd2lsbCBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy4gSWYgYSBgY2FsbGJhY2tgIGZ1bmN0aW9uCiAgICAgKiBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24KICAgICAqIGFuZCBzb3VyY2UgcHJvcGVydGllcy4gSWYgYGNhbGxiYWNrYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIHdpbGwgYmUKICAgICAqIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGNhbGxiYWNrYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kCiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czsgKG9iamVjdFZhbHVlLCBzb3VyY2VWYWx1ZSkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3NvdXJjZTEsIHNvdXJjZTIsIC4uLl0gVGhlIHNvdXJjZSBvYmplY3RzLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdpbmcgcHJvcGVydGllcy4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2RlZXBJbmRpY2F0b3JdIEluZGljYXRlcyB0aGF0IGBzdGFja0FgIGFuZCBgc3RhY2tCYCBhcmUKICAgICAqICBhcnJheXMgb2YgdHJhdmVyc2VkIG9iamVjdHMsIGluc3RlYWQgb2Ygc291cmNlIG9iamVjdHMuCiAgICAgKiBAcGFyYW0tIHtBcnJheX0gW3N0YWNrQT1bXV0gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2Ugb2JqZWN0cy4KICAgICAqIEBwYXJhbS0ge0FycmF5fSBbc3RhY2tCPVtdXSBBc3NvY2lhdGVzIHZhbHVlcyB3aXRoIHNvdXJjZSBjb3VudGVycGFydHMuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBuYW1lcyA9IHsKICAgICAqICAgJ3N0b29nZXMnOiBbCiAgICAgKiAgICAgeyAnbmFtZSc6ICdtb2UnIH0sCiAgICAgKiAgICAgeyAnbmFtZSc6ICdsYXJyeScgfQogICAgICogICBdCiAgICAgKiB9OwogICAgICoKICAgICAqIHZhciBhZ2VzID0gewogICAgICogICAnc3Rvb2dlcyc6IFsKICAgICAqICAgICB7ICdhZ2UnOiA0MCB9LAogICAgICogICAgIHsgJ2FnZSc6IDUwIH0KICAgICAqICAgXQogICAgICogfTsKICAgICAqCiAgICAgKiBfLm1lcmdlKG5hbWVzLCBhZ2VzKTsKICAgICAqIC8vID0+IHsgJ3N0b29nZXMnOiBbeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9XSB9CiAgICAgKgogICAgICogdmFyIGZvb2QgPSB7CiAgICAgKiAgICdmcnVpdHMnOiBbJ2FwcGxlJ10sCiAgICAgKiAgICd2ZWdldGFibGVzJzogWydiZWV0J10KICAgICAqIH07CiAgICAgKgogICAgICogdmFyIG90aGVyRm9vZCA9IHsKICAgICAqICAgJ2ZydWl0cyc6IFsnYmFuYW5hJ10sCiAgICAgKiAgICd2ZWdldGFibGVzJzogWydjYXJyb3QnXQogICAgICogfTsKICAgICAqCiAgICAgKiBfLm1lcmdlKGZvb2QsIG90aGVyRm9vZCwgZnVuY3Rpb24oYSwgYikgewogICAgICogICByZXR1cm4gXy5pc0FycmF5KGEpID8gYS5jb25jYXQoYikgOiB1bmRlZmluZWQ7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IHsgJ2ZydWl0cyc6IFsnYXBwbGUnLCAnYmFuYW5hJ10sICd2ZWdldGFibGVzJzogWydiZWV0JywgJ2NhcnJvdF0gfQogICAgICovCiAgICBmdW5jdGlvbiBtZXJnZShvYmplY3QsIHNvdXJjZSwgZGVlcEluZGljYXRvcikgewogICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cywKICAgICAgICAgIGluZGV4ID0gMCwKICAgICAgICAgIGxlbmd0aCA9IDI7CgogICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHsKICAgICAgICByZXR1cm4gb2JqZWN0OwogICAgICB9CiAgICAgIGlmIChkZWVwSW5kaWNhdG9yID09PSBpbmRpY2F0b3JPYmplY3QpIHsKICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmdzWzNdLAogICAgICAgICAgICBzdGFja0EgPSBhcmdzWzRdLAogICAgICAgICAgICBzdGFja0IgPSBhcmdzWzVdOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBpbml0ZWRTdGFjayA9IHRydWU7CiAgICAgICAgc3RhY2tBID0gZ2V0QXJyYXkoKTsKICAgICAgICBzdGFja0IgPSBnZXRBcnJheSgpOwoKICAgICAgICAvLyBhbGxvd3Mgd29ya2luZyB3aXRoIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCB3aXRob3V0CiAgICAgICAgLy8gdXNpbmcgdGhlaXIgYGNhbGxiYWNrYCBhcmd1bWVudHMsIGBpbmRleHxrZXlgIGFuZCBgY29sbGVjdGlvbmAKICAgICAgICBpZiAodHlwZW9mIGRlZXBJbmRpY2F0b3IgIT0gJ251bWJlcicpIHsKICAgICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoOwogICAgICAgIH0KICAgICAgICBpZiAobGVuZ3RoID4gMyAmJiB0eXBlb2YgYXJnc1tsZW5ndGggLSAyXSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhhcmdzWy0tbGVuZ3RoIC0gMV0sIGFyZ3NbbGVuZ3RoLS1dLCAyKTsKICAgICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgdHlwZW9mIGFyZ3NbbGVuZ3RoIC0gMV0gPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgY2FsbGJhY2sgPSBhcmdzWy0tbGVuZ3RoXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICAoaXNBcnJheShhcmdzW2luZGV4XSkgPyBmb3JFYWNoIDogZm9yT3duKShhcmdzW2luZGV4XSwgZnVuY3Rpb24oc291cmNlLCBrZXkpIHsKICAgICAgICAgIHZhciBmb3VuZCwKICAgICAgICAgICAgICBpc0FyciwKICAgICAgICAgICAgICByZXN1bHQgPSBzb3VyY2UsCiAgICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTsKCiAgICAgICAgICBpZiAoc291cmNlICYmICgoaXNBcnIgPSBpc0FycmF5KHNvdXJjZSkpIHx8IGlzUGxhaW5PYmplY3Qoc291cmNlKSkpIHsKICAgICAgICAgICAgLy8gYXZvaWQgbWVyZ2luZyBwcmV2aW91c2x5IG1lcmdlZCBjeWNsaWMgc291cmNlcwogICAgICAgICAgICB2YXIgc3RhY2tMZW5ndGggPSBzdGFja0EubGVuZ3RoOwogICAgICAgICAgICB3aGlsZSAoc3RhY2tMZW5ndGgtLSkgewogICAgICAgICAgICAgIGlmICgoZm91bmQgPSBzdGFja0Fbc3RhY2tMZW5ndGhdID09IHNvdXJjZSkpIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gc3RhY2tCW3N0YWNrTGVuZ3RoXTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWZvdW5kKSB7CiAgICAgICAgICAgICAgdmFyIGlzU2hhbGxvdzsKICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKHZhbHVlLCBzb3VyY2UpOwogICAgICAgICAgICAgICAgaWYgKChpc1NoYWxsb3cgPSB0eXBlb2YgcmVzdWx0ICE9ICd1bmRlZmluZWQnKSkgewogICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKCFpc1NoYWxsb3cpIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gaXNBcnIKICAgICAgICAgICAgICAgICAgPyAoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdKQogICAgICAgICAgICAgICAgICA6IChpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDoge30pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvLyBhZGQgYHNvdXJjZWAgYW5kIGFzc29jaWF0ZWQgYHZhbHVlYCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMKICAgICAgICAgICAgICBzdGFja0EucHVzaChzb3VyY2UpOwogICAgICAgICAgICAgIHN0YWNrQi5wdXNoKHZhbHVlKTsKCiAgICAgICAgICAgICAgLy8gcmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykKICAgICAgICAgICAgICBpZiAoIWlzU2hhbGxvdykgewogICAgICAgICAgICAgICAgdmFsdWUgPSBtZXJnZSh2YWx1ZSwgc291cmNlLCBpbmRpY2F0b3JPYmplY3QsIGNhbGxiYWNrLCBzdGFja0EsIHN0YWNrQik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2sodmFsdWUsIHNvdXJjZSk7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNvdXJjZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3VsdDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaWYgKGluaXRlZFN0YWNrKSB7CiAgICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQSk7CiAgICAgICAgcmVsZWFzZUFycmF5KHN0YWNrQik7CiAgICAgIH0KICAgICAgcmV0dXJuIG9iamVjdDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGBvYmplY3RgIGV4Y2x1ZGluZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuCiAgICAgKiBQcm9wZXJ0eSBuYW1lcyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5cyBvZgogICAgICogcHJvcGVydHkgbmFtZXMuIElmIGEgYGNhbGxiYWNrYCBmdW5jdGlvbiBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgZXhlY3V0ZWQKICAgICAqIGZvciBlYWNoIHByb3BlcnR5IGluIHRoZSBgb2JqZWN0YCwgb21pdHRpbmcgdGhlIHByb3BlcnRpZXMgYGNhbGxiYWNrYAogICAgICogcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgYGNhbGxiYWNrYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQKICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOyAodmFsdWUsIGtleSwgb2JqZWN0KS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IE9iamVjdHMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gY2FsbGJhY2t8W3Byb3AxLCBwcm9wMiwgLi4uXSBUaGUgcHJvcGVydGllcyB0byBvbWl0CiAgICAgKiAgb3IgdGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aG91dCB0aGUgb21pdHRlZCBwcm9wZXJ0aWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLm9taXQoeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwgJ2FnZScpOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdtb2UnIH0KICAgICAqCiAgICAgKiBfLm9taXQoeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAqICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJzsKICAgICAqIH0pOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdtb2UnIH0KICAgICAqLwogICAgZnVuY3Rpb24gb21pdChvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBpbmRleE9mID0gZ2V0SW5kZXhPZigpLAogICAgICAgICAgaXNGdW5jID0gdHlwZW9mIGNhbGxiYWNrID09ICdmdW5jdGlvbicsCiAgICAgICAgICByZXN1bHQgPSB7fTsKCiAgICAgIGlmIChpc0Z1bmMpIHsKICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHByb3BzID0gY29uY2F0LmFwcGx5KGFycmF5UmVmLCBuYXRpdmVTbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpOwogICAgICB9CiAgICAgIGZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7CiAgICAgICAgaWYgKGlzRnVuYwogICAgICAgICAgICAgID8gIWNhbGxiYWNrKHZhbHVlLCBrZXksIG9iamVjdCkKICAgICAgICAgICAgICA6IGluZGV4T2YocHJvcHMsIGtleSkgPCAwCiAgICAgICAgICAgICkgewogICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhIHR3byBkaW1lbnNpb25hbCBhcnJheSBvZiB0aGUgZ2l2ZW4gb2JqZWN0J3Mga2V5LXZhbHVlIHBhaXJzLAogICAgICogaS5lLiBgW1trZXkxLCB2YWx1ZTFdLCBba2V5MiwgdmFsdWUyXV1gLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgbmV3IGFycmF5IG9mIGtleS12YWx1ZSBwYWlycy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5wYWlycyh7ICdtb2UnOiAzMCwgJ2xhcnJ5JzogNDAgfSk7CiAgICAgKiAvLyA9PiBbWydtb2UnLCAzMF0sIFsnbGFycnknLCA0MF1dIChvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkKICAgICAqLwogICAgZnVuY3Rpb24gcGFpcnMob2JqZWN0KSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgcHJvcHMgPSBrZXlzKG9iamVjdCksCiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsCiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpOwoKICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdOwogICAgICAgIHJlc3VsdFtpbmRleF0gPSBba2V5LCBvYmplY3Rba2V5XV07CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGBvYmplY3RgIGNvbXBvc2VkIG9mIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy4KICAgICAqIFByb3BlcnR5IG5hbWVzIG1heSBiZSBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHMgb3IgYXMgYXJyYXlzIG9mIHByb3BlcnR5CiAgICAgKiBuYW1lcy4gSWYgYGNhbGxiYWNrYCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgZXhlY3V0ZWQgZm9yIGVhY2ggcHJvcGVydHkgaW4gdGhlCiAgICAgKiBgb2JqZWN0YCwgcGlja2luZyB0aGUgcHJvcGVydGllcyBgY2FsbGJhY2tgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIGBjYWxsYmFja2AKICAgICAqIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBrZXksIG9iamVjdCkuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBPYmplY3RzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LgogICAgICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbnxTdHJpbmd9IGNhbGxiYWNrfFtwcm9wMSwgcHJvcDIsIC4uLl0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBpdGVyYXRpb24gb3IgcHJvcGVydGllcyB0byBwaWNrLCBlaXRoZXIgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHMgb3IgYXJyYXlzLgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBwcm9wZXJ0aWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnBpY2soeyAnbmFtZSc6ICdtb2UnLCAnX3VzZXJpZCc6ICdtb2UxJyB9LCAnbmFtZScpOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdtb2UnIH0KICAgICAqCiAgICAgKiBfLnBpY2soeyAnbmFtZSc6ICdtb2UnLCAnX3VzZXJpZCc6ICdtb2UxJyB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7CiAgICAgKiAgIHJldHVybiBrZXkuY2hhckF0KDApICE9ICdfJzsKICAgICAqIH0pOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdtb2UnIH0KICAgICAqLwogICAgZnVuY3Rpb24gcGljayhvYmplY3QsIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICAgIHByb3BzID0gY29uY2F0LmFwcGx5KGFycmF5UmVmLCBuYXRpdmVTbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpLAogICAgICAgICAgICBsZW5ndGggPSBpc09iamVjdChvYmplY3QpID8gcHJvcHMubGVuZ3RoIDogMDsKCiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07CiAgICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkgewogICAgICAgICAgICByZXN1bHRba2V5XSA9IG9iamVjdFtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZyk7CiAgICAgICAgZm9ySW4ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHsKICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwga2V5LCBvYmplY3QpKSB7CiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWAsIHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYW4gYG9iamVjdGAgdG8gYSBuZXcKICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBlbGVtZW50cwogICAgICogdGhyb3VnaCB0aGUgYGNhbGxiYWNrYCwgd2l0aCBlYWNoIGBjYWxsYmFja2AgZXhlY3V0aW9uIHBvdGVudGlhbGx5IG11dGF0aW5nCiAgICAgKiB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIFRoZSBgY2FsbGJhY2tgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZAogICAgICogd2l0aCBmb3VyIGFyZ3VtZW50czsgKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLiBDYWxsYmFja3MgbWF5IGV4aXQKICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uCiAgICAgKiBAcGFyYW0ge01peGVkfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuCiAgICAgKiBAcGFyYW0ge01peGVkfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7TWl4ZWR9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgc3F1YXJlcyA9IF8udHJhbnNmb3JtKFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF0sIGZ1bmN0aW9uKHJlc3VsdCwgbnVtKSB7CiAgICAgKiAgIG51bSAqPSBudW07CiAgICAgKiAgIGlmIChudW0gJSAyKSB7CiAgICAgKiAgICAgcmV0dXJuIHJlc3VsdC5wdXNoKG51bSkgPCAzOwogICAgICogICB9CiAgICAgKiB9KTsKICAgICAqIC8vID0+IFsxLCA5LCAyNV0KICAgICAqCiAgICAgKiB2YXIgbWFwcGVkID0gXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIGZ1bmN0aW9uKHJlc3VsdCwgbnVtLCBrZXkpIHsKICAgICAqICAgcmVzdWx0W2tleV0gPSBudW0gKiAzOwogICAgICogfSk7CiAgICAgKiAvLyA9PiB7ICdhJzogMywgJ2InOiA2LCAnYyc6IDkgfQogICAgICovCiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBjYWxsYmFjaywgYWNjdW11bGF0b3IsIHRoaXNBcmcpIHsKICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpOwogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgNCk7CgogICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkgewogICAgICAgIGlmIChpc0FycikgewogICAgICAgICAgYWNjdW11bGF0b3IgPSBbXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yLAogICAgICAgICAgICAgIHByb3RvID0gY3RvciAmJiBjdG9yLnByb3RvdHlwZTsKCiAgICAgICAgICBhY2N1bXVsYXRvciA9IGNyZWF0ZU9iamVjdChwcm90byk7CiAgICAgICAgfQogICAgICB9CiAgICAgIChpc0FyciA/IGJhc2ljRWFjaCA6IGZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkgewogICAgICAgIHJldHVybiBjYWxsYmFjayhhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpOwogICAgICB9KTsKICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBjb21wb3NlZCBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0cwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnZhbHVlcyh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9KTsKICAgICAqIC8vID0+IFsxLCAyLCAzXSAob3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpCiAgICAgKi8KICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHsKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBwcm9wcyA9IGtleXMob2JqZWN0KSwKICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCwKICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7CgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHJlc3VsdFtpbmRleF0gPSBvYmplY3RbcHJvcHNbaW5kZXhdXTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBmcm9tIHRoZSBzcGVjaWZpZWQgaW5kZXhlcywgb3Iga2V5cywgb2YgdGhlCiAgICAgKiBgY29sbGVjdGlvbmAuIEluZGV4ZXMgbWF5IGJlIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIGFyZ3VtZW50cyBvciBhcyBhcnJheXMKICAgICAqIG9mIGluZGV4ZXMuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7QXJyYXl8TnVtYmVyfFN0cmluZ30gW2luZGV4MSwgaW5kZXgyLCAuLi5dIFRoZSBpbmRleGVzIG9mCiAgICAgKiAgYGNvbGxlY3Rpb25gIHRvIHJldHJpZXZlLCBlaXRoZXIgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHMgb3IgYXJyYXlzLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGVsZW1lbnRzIGNvcnJlc3BvbmRpbmcgdG8gdGhlCiAgICAgKiAgcHJvdmlkZWQgaW5kZXhlcy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5hdChbJ2EnLCAnYicsICdjJywgJ2QnLCAnZSddLCBbMCwgMiwgNF0pOwogICAgICogLy8gPT4gWydhJywgJ2MnLCAnZSddCiAgICAgKgogICAgICogXy5hdChbJ21vZScsICdsYXJyeScsICdjdXJseSddLCAwLCAyKTsKICAgICAqIC8vID0+IFsnbW9lJywgJ2N1cmx5J10KICAgICAqLwogICAgZnVuY3Rpb24gYXQoY29sbGVjdGlvbikgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIHByb3BzID0gY29uY2F0LmFwcGx5KGFycmF5UmVmLCBuYXRpdmVTbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpLAogICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLAogICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTsKCiAgICAgIGlmIChzdXBwb3J0LnVuaW5kZXhlZENoYXJzICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKSB7CiAgICAgICAgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24uc3BsaXQoJycpOwogICAgICB9CiAgICAgIHdoaWxlKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICByZXN1bHRbaW5kZXhdID0gY29sbGVjdGlvbltwcm9wc1tpbmRleF1dOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgYSBnaXZlbiBgdGFyZ2V0YCBlbGVtZW50IGlzIHByZXNlbnQgaW4gYSBgY29sbGVjdGlvbmAgdXNpbmcgc3RyaWN0CiAgICAgKiBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCBpcyB1c2VkCiAgICAgKiBhcyB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIGluY2x1ZGUKICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IHRhcmdldCBUaGUgdmFsdWUgdG8gY2hlY2sgZm9yLgogICAgICogQHBhcmFtIHtOdW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLgogICAgICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBgdGFyZ2V0YCBlbGVtZW50IGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uY29udGFpbnMoWzEsIDIsIDNdLCAxKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqCiAgICAgKiBfLmNvbnRhaW5zKFsxLCAyLCAzXSwgMSwgMik7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIF8uY29udGFpbnMoeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwgJ21vZScpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIF8uY29udGFpbnMoJ2N1cmx5JywgJ3VyJyk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGNvbGxlY3Rpb24sIHRhcmdldCwgZnJvbUluZGV4KSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgaW5kZXhPZiA9IGdldEluZGV4T2YoKSwKICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDAsCiAgICAgICAgICByZXN1bHQgPSBmYWxzZTsKCiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggPCAwID8gbmF0aXZlTWF4KDAsIGxlbmd0aCArIGZyb21JbmRleCkgOiBmcm9tSW5kZXgpIHx8IDA7CiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGxlbmd0aCA9PSAnbnVtYmVyJykgewogICAgICAgIHJlc3VsdCA9IChpc1N0cmluZyhjb2xsZWN0aW9uKQogICAgICAgICAgPyBjb2xsZWN0aW9uLmluZGV4T2YodGFyZ2V0LCBmcm9tSW5kZXgpCiAgICAgICAgICA6IGluZGV4T2YoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgpCiAgICAgICAgKSA+IC0xOwogICAgICB9IGVsc2UgewogICAgICAgIGJhc2ljRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgaWYgKCsraW5kZXggPj0gZnJvbUluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiAhKHJlc3VsdCA9IHZhbHVlID09PSB0YXJnZXQpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIHJldHVybmVkIGZyb20gcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgdGhlCiAgICAgKiBgY29sbGVjdGlvbmAgdGhyb3VnaCB0aGUgZ2l2ZW4gYGNhbGxiYWNrYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2YgZWFjaCBrZXkKICAgICAqIGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgdGhlIGBjYWxsYmFja2AuIFRoZSBgY2FsbGJhY2tgCiAgICAgKiBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fFN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlcgogICAgICogIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUKICAgICAqICBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uY291bnRCeShbNC4zLCA2LjEsIDYuNF0sIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gTWF0aC5mbG9vcihudW0pOyB9KTsKICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfQogICAgICoKICAgICAqIF8uY291bnRCeShbNC4zLCA2LjEsIDYuNF0sIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gdGhpcy5mbG9vcihudW0pOyB9LCBNYXRoKTsKICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfQogICAgICoKICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpOwogICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvdW50QnkoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIHJlc3VsdCA9IHt9OwogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZyk7CgogICAgICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHsKICAgICAgICBrZXkgPSBTdHJpbmcoY2FsbGJhY2sodmFsdWUsIGtleSwgY29sbGVjdGlvbikpOwogICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSA/IHJlc3VsdFtrZXldKysgOiByZXN1bHRba2V5XSA9IDEpOwogICAgICB9KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIENoZWNrcyBpZiB0aGUgYGNhbGxiYWNrYCByZXR1cm5zIGEgdHJ1dGh5IHZhbHVlIGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGEKICAgICAqIGBjb2xsZWN0aW9uYC4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUKICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIGFsbAogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxTdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8U3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyCiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZQogICAgICogIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBjYWxsYmFjayBjaGVjaywKICAgICAqICBlbHNlIGBmYWxzZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7CiAgICAgKiAvLyA9PiBmYWxzZQogICAgICoKICAgICAqIHZhciBzdG9vZ2VzID0gWwogICAgICogICB7ICduYW1lJzogJ21vZScsICdhZ2UnOiA0MCB9LAogICAgICogICB7ICduYW1lJzogJ2xhcnJ5JywgJ2FnZSc6IDUwIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5ldmVyeShzdG9vZ2VzLCAnYWdlJyk7CiAgICAgKiAvLyA9PiB0cnVlCiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ud2hlcmUiIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5ldmVyeShzdG9vZ2VzLCB7ICdhZ2UnOiA1MCB9KTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciByZXN1bHQgPSB0cnVlOwogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZyk7CgogICAgICBpZiAoaXNBcnJheShjb2xsZWN0aW9uKSkgewogICAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDsKCiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICAgIGlmICghKHJlc3VsdCA9ICEhY2FsbGJhY2soY29sbGVjdGlvbltpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKSkpIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGJhc2ljRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHsKICAgICAgICAgIHJldHVybiAocmVzdWx0ID0gISFjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogRXhhbWluZXMgZWFjaCBlbGVtZW50IGluIGEgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzCiAgICAgKiB0aGUgYGNhbGxiYWNrYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBgY2FsbGJhY2tgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQKICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyBzZWxlY3QKICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fFN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlcgogICAgICogIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUKICAgICAqICBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyB0aGF0IHBhc3NlZCB0aGUgY2FsbGJhY2sgY2hlY2suCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBldmVucyA9IF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gJSAyID09IDA7IH0pOwogICAgICogLy8gPT4gWzIsIDQsIDZdCiAgICAgKgogICAgICogdmFyIGZvb2QgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnYXBwbGUnLCAgJ29yZ2FuaWMnOiBmYWxzZSwgJ3R5cGUnOiAnZnJ1aXQnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnY2Fycm90JywgJ29yZ2FuaWMnOiB0cnVlLCAgJ3R5cGUnOiAndmVnZXRhYmxlJyB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uZmlsdGVyKGZvb2QsICdvcmdhbmljJyk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdjYXJyb3QnLCAnb3JnYW5pYyc6IHRydWUsICd0eXBlJzogJ3ZlZ2V0YWJsZScgfV0KICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy53aGVyZSIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLmZpbHRlcihmb29kLCB7ICd0eXBlJzogJ2ZydWl0JyB9KTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2FwcGxlJywgJ29yZ2FuaWMnOiBmYWxzZSwgJ3R5cGUnOiAnZnJ1aXQnIH1dCiAgICAgKi8KICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnKTsKCiAgICAgIGlmIChpc0FycmF5KGNvbGxlY3Rpb24pKSB7CiAgICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoOwoKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07CiAgICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkgewogICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGJhc2ljRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHsKICAgICAgICAgIGlmIChjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogRXhhbWluZXMgZWFjaCBlbGVtZW50IGluIGEgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IHRoYXQgdGhlIGBjYWxsYmFja2AKICAgICAqIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUKICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIGRldGVjdCwgZmluZFdoZXJlCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fFN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxTdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIKICAgICAqICBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcGFzc2VkLCBpdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlCiAgICAgKiAgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0ge01peGVkfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7TWl4ZWR9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZmluZChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG51bSkgewogICAgICogICByZXR1cm4gbnVtICUgMiA9PSAwOwogICAgICogfSk7CiAgICAgKiAvLyA9PiAyCiAgICAgKgogICAgICogdmFyIGZvb2QgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnYXBwbGUnLCAgJ29yZ2FuaWMnOiBmYWxzZSwgJ3R5cGUnOiAnZnJ1aXQnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnYmFuYW5hJywgJ29yZ2FuaWMnOiB0cnVlLCAgJ3R5cGUnOiAnZnJ1aXQnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnYmVldCcsICAgJ29yZ2FuaWMnOiBmYWxzZSwgJ3R5cGUnOiAndmVnZXRhYmxlJyB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLndoZXJlIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uZmluZChmb29kLCB7ICd0eXBlJzogJ3ZlZ2V0YWJsZScgfSk7CiAgICAgKiAvLyA9PiB7ICduYW1lJzogJ2JlZXQnLCAnb3JnYW5pYyc6IGZhbHNlLCAndHlwZSc6ICd2ZWdldGFibGUnIH0KICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy5wbHVjayIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLmZpbmQoZm9vZCwgJ29yZ2FuaWMnKTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnYmFuYW5hJywgJ29yZ2FuaWMnOiB0cnVlLCAndHlwZSc6ICdmcnVpdCcgfQogICAgICovCiAgICBmdW5jdGlvbiBmaW5kKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnKTsKCiAgICAgIGlmIChpc0FycmF5KGNvbGxlY3Rpb24pKSB7CiAgICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoOwoKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07CiAgICAgICAgICBpZiAoY2FsbGJhY2sodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkgewogICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHZhciByZXN1bHQ7CiAgICAgICAgYmFzaWNFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikgewogICAgICAgICAgaWYgKGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHsKICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBJdGVyYXRlcyBvdmVyIGEgYGNvbGxlY3Rpb25gLCBleGVjdXRpbmcgdGhlIGBjYWxsYmFja2AgZm9yIGVhY2ggZWxlbWVudCBpbgogICAgICogdGhlIGBjb2xsZWN0aW9uYC4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUKICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLiBDYWxsYmFja3MgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5CiAgICAgKiBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAYWxpYXMgZWFjaAogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxTdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlciBpdGVyYXRpb24uCiAgICAgKiBAcGFyYW0ge01peGVkfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fFN0cmluZ30gUmV0dXJucyBgY29sbGVjdGlvbmAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8oWzEsIDIsIDNdKS5mb3JFYWNoKGFsZXJ0KS5qb2luKCcsJyk7CiAgICAgKiAvLyA9PiBhbGVydHMgZWFjaCBudW1iZXIgYW5kIHJldHVybnMgJzEsMiwzJwogICAgICoKICAgICAqIF8uZm9yRWFjaCh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9LCBhbGVydCk7CiAgICAgKiAvLyA9PiBhbGVydHMgZWFjaCBudW1iZXIgdmFsdWUgKG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKQogICAgICovCiAgICBmdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgdGhpc0FyZyA9PSAndW5kZWZpbmVkJyAmJiBpc0FycmF5KGNvbGxlY3Rpb24pKSB7CiAgICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoOwoKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgaWYgKGNhbGxiYWNrKGNvbGxlY3Rpb25baW5kZXhdLCBpbmRleCwgY29sbGVjdGlvbikgPT09IGZhbHNlKSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBiYXNpY0VhY2goY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpOwogICAgICB9CiAgICAgIHJldHVybiBjb2xsZWN0aW9uOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyByZXR1cm5lZCBmcm9tIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIHRoZQogICAgICogYGNvbGxlY3Rpb25gIHRocm91Z2ggdGhlIGBjYWxsYmFja2AuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mIGVhY2gga2V5IGlzCiAgICAgKiBhbiBhcnJheSBvZiBlbGVtZW50cyBwYXNzZWQgdG8gYGNhbGxiYWNrYCB0aGF0IHJldHVybmVkIHRoZSBrZXkuIFRoZSBgY2FsbGJhY2tgCiAgICAgKiBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAKICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxTdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8U3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyCiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZQogICAgICogIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5ncm91cEJ5KFs0LjIsIDYuMSwgNi40XSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiBNYXRoLmZsb29yKG51bSk7IH0pOwogICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuNF0gfQogICAgICoKICAgICAqIF8uZ3JvdXBCeShbNC4yLCA2LjEsIDYuNF0sIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gdGhpcy5mbG9vcihudW0pOyB9LCBNYXRoKTsKICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjRdIH0KICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy5wbHVjayIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLmdyb3VwQnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTsKICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfQogICAgICovCiAgICBmdW5jdGlvbiBncm91cEJ5KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcpOwoKICAgICAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7CiAgICAgICAga2V5ID0gU3RyaW5nKGNhbGxiYWNrKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKTsKICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkgPyByZXN1bHRba2V5XSA6IHJlc3VsdFtrZXldID0gW10pLnB1c2godmFsdWUpOwogICAgICB9KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBuYW1lZCBieSBgbWV0aG9kTmFtZWAgb24gZWFjaCBlbGVtZW50IGluIHRoZSBgY29sbGVjdGlvbmAsCiAgICAgKiByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQWRkaXRpb25hbCBhcmd1bWVudHMKICAgICAqIHdpbGwgYmUgcGFzc2VkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBtZXRob2ROYW1lYCBpcyBhIGZ1bmN0aW9uLCBpdCB3aWxsCiAgICAgKiBiZSBpbnZva2VkIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIHRoZSBgY29sbGVjdGlvbmAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yCiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFthcmcxLCBhcmcyLCAuLi5dIEFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIHRoZSByZXN1bHRzIG9mIGVhY2ggaW52b2tlZCBtZXRob2QuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaW52b2tlKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7CiAgICAgKiAvLyA9PiBbWzEsIDUsIDddLCBbMSwgMiwgM11dCiAgICAgKgogICAgICogXy5pbnZva2UoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpOwogICAgICogLy8gPT4gW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddXQogICAgICovCiAgICBmdW5jdGlvbiBpbnZva2UoY29sbGVjdGlvbiwgbWV0aG9kTmFtZSkgewogICAgICB2YXIgYXJncyA9IG5hdGl2ZVNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSwKICAgICAgICAgIGluZGV4ID0gLTEsCiAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YgbWV0aG9kTmFtZSA9PSAnZnVuY3Rpb24nLAogICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMCwKICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgPyBsZW5ndGggOiAwKTsKCiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICByZXN1bHRbKytpbmRleF0gPSAoaXNGdW5jID8gbWV0aG9kTmFtZSA6IHZhbHVlW21ldGhvZE5hbWVdKS5hcHBseSh2YWx1ZSwgYXJncyk7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gdGhlIGBjb2xsZWN0aW9uYAogICAgICogdGhyb3VnaCB0aGUgYGNhbGxiYWNrYC4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGgKICAgICAqIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIGNvbGxlY3QKICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fFN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlcgogICAgICogIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUKICAgICAqICBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGBjYWxsYmFja2AgZXhlY3V0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLm1hcChbMSwgMiwgM10sIGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICogMzsgfSk7CiAgICAgKiAvLyA9PiBbMywgNiwgOV0KICAgICAqCiAgICAgKiBfLm1hcCh7ICdvbmUnOiAxLCAndHdvJzogMiwgJ3RocmVlJzogMyB9LCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAqIDM7IH0pOwogICAgICogLy8gPT4gWzMsIDYsIDldIChvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkKICAgICAqCiAgICAgKiB2YXIgc3Rvb2dlcyA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwKICAgICAqICAgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8ubWFwKHN0b29nZXMsICduYW1lJyk7CiAgICAgKiAvLyA9PiBbJ21vZScsICdsYXJyeSddCiAgICAgKi8KICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDAsCiAgICAgICAgICByZXN1bHQgPSBBcnJheSh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDogMCk7CgogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZyk7CiAgICAgIGlmIChpc0FycmF5KGNvbGxlY3Rpb24pKSB7CiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBjYWxsYmFjayhjb2xsZWN0aW9uW2luZGV4XSwgaW5kZXgsIGNvbGxlY3Rpb24pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBiYXNpY0VhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikgewogICAgICAgICAgcmVzdWx0WysraW5kZXhdID0gY2FsbGJhY2sodmFsdWUsIGtleSwgY29sbGVjdGlvbik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHJpZXZlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBhbiBgYXJyYXlgLiBJZiBgY2FsbGJhY2tgIGlzIHBhc3NlZCwKICAgICAqIGl0IHdpbGwgYmUgZXhlY3V0ZWQgZm9yIGVhY2ggdmFsdWUgaW4gdGhlIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlCiAgICAgKiBjcml0ZXJpb24gYnkgd2hpY2ggdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8KICAgICAqIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikuCiAgICAgKgogICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHBhc3NlZCBmb3IgYGNhbGxiYWNrYCwgdGhlIGNyZWF0ZWQgIl8ucGx1Y2siIHN0eWxlCiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogSWYgYW4gb2JqZWN0IGlzIHBhc3NlZCBmb3IgYGNhbGxiYWNrYCwgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fFN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxTdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIKICAgICAqICBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcGFzc2VkLCBpdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlCiAgICAgKiAgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0ge01peGVkfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7TWl4ZWR9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7CiAgICAgKiAvLyA9PiA4CiAgICAgKgogICAgICogdmFyIHN0b29nZXMgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnbGFycnknLCAnYWdlJzogNTAgfQogICAgICogXTsKICAgICAqCiAgICAgKiBfLm1heChzdG9vZ2VzLCBmdW5jdGlvbihzdG9vZ2UpIHsgcmV0dXJuIHN0b29nZS5hZ2U7IH0pOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9OwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8ubWF4KHN0b29nZXMsICdhZ2UnKTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnbGFycnknLCAnYWdlJzogNTAgfTsKICAgICAqLwogICAgZnVuY3Rpb24gbWF4KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBjb21wdXRlZCA9IC1JbmZpbml0eSwKICAgICAgICAgIHJlc3VsdCA9IGNvbXB1dGVkOwoKICAgICAgaWYgKCFjYWxsYmFjayAmJiBpc0FycmF5KGNvbGxlY3Rpb24pKSB7CiAgICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoOwoKICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07CiAgICAgICAgICBpZiAodmFsdWUgPiByZXN1bHQpIHsKICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGNhbGxiYWNrID0gKCFjYWxsYmFjayAmJiBpc1N0cmluZyhjb2xsZWN0aW9uKSkKICAgICAgICAgID8gY2hhckF0Q2FsbGJhY2sKICAgICAgICAgIDogbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnKTsKCiAgICAgICAgYmFzaWNFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikgewogICAgICAgICAgdmFyIGN1cnJlbnQgPSBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pOwogICAgICAgICAgaWYgKGN1cnJlbnQgPiBjb21wdXRlZCkgewogICAgICAgICAgICBjb21wdXRlZCA9IGN1cnJlbnQ7CiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXRyaWV2ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYW4gYGFycmF5YC4gSWYgYGNhbGxiYWNrYCBpcyBwYXNzZWQsCiAgICAgKiBpdCB3aWxsIGJlIGV4ZWN1dGVkIGZvciBlYWNoIHZhbHVlIGluIHRoZSBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZQogICAgICogY3JpdGVyaW9uIGJ5IHdoaWNoIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBgY2FsbGJhY2tgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYAogICAgICogYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxTdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8U3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyCiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZQogICAgICogIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge01peGVkfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pOwogICAgICogLy8gPT4gMgogICAgICoKICAgICAqIHZhciBzdG9vZ2VzID0gWwogICAgICogICB7ICduYW1lJzogJ21vZScsICdhZ2UnOiA0MCB9LAogICAgICogICB7ICduYW1lJzogJ2xhcnJ5JywgJ2FnZSc6IDUwIH0KICAgICAqIF07CiAgICAgKgogICAgICogXy5taW4oc3Rvb2dlcywgZnVuY3Rpb24oc3Rvb2dlKSB7IHJldHVybiBzdG9vZ2UuYWdlOyB9KTsKICAgICAqIC8vID0+IHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5taW4oc3Rvb2dlcywgJ2FnZScpOwogICAgICogLy8gPT4geyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfTsKICAgICAqLwogICAgZnVuY3Rpb24gbWluKGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBjb21wdXRlZCA9IEluZmluaXR5LAogICAgICAgICAgcmVzdWx0ID0gY29tcHV0ZWQ7CgogICAgICBpZiAoIWNhbGxiYWNrICYmIGlzQXJyYXkoY29sbGVjdGlvbikpIHsKICAgICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7CgogICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBjb2xsZWN0aW9uW2luZGV4XTsKICAgICAgICAgIGlmICh2YWx1ZSA8IHJlc3VsdCkgewogICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2FsbGJhY2sgPSAoIWNhbGxiYWNrICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKQogICAgICAgICAgPyBjaGFyQXRDYWxsYmFjawogICAgICAgICAgOiBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcpOwoKICAgICAgICBiYXNpY0VhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgICB2YXIgY3VycmVudCA9IGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7CiAgICAgICAgICBpZiAoY3VycmVudCA8IGNvbXB1dGVkKSB7CiAgICAgICAgICAgIGNvbXB1dGVkID0gY3VycmVudDsKICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgb2YgYSBzcGVjaWZpZWQgcHJvcGVydHkgZnJvbSBhbGwgZWxlbWVudHMgaW4gdGhlIGBjb2xsZWN0aW9uYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQHR5cGUgRnVuY3Rpb24KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBUaGUgcHJvcGVydHkgdG8gcGx1Y2suCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgc3Rvb2dlcyA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwKICAgICAqICAgeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9CiAgICAgKiBdOwogICAgICoKICAgICAqIF8ucGx1Y2soc3Rvb2dlcywgJ25hbWUnKTsKICAgICAqIC8vID0+IFsnbW9lJywgJ2xhcnJ5J10KICAgICAqLwogICAgdmFyIHBsdWNrID0gbWFwOwoKICAgIC8qKgogICAgICogUmVkdWNlcyBhIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZwogICAgICogZWFjaCBlbGVtZW50IGluIHRoZSBgY29sbGVjdGlvbmAgdGhyb3VnaCB0aGUgYGNhbGxiYWNrYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlCiAgICAgKiBgY2FsbGJhY2tgIGV4ZWN1dGlvbiBjb25zdW1lcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cyBleGVjdXRpb24uCiAgICAgKiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdCBwYXNzZWQsIHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBgY29sbGVjdGlvbmAgd2lsbCBiZQogICAgICogdXNlZCBhcyB0aGUgaW5pdGlhbCBgYWNjdW11bGF0b3JgIHZhbHVlLiBUaGUgYGNhbGxiYWNrYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AKICAgICAqIGFuZCBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM7IChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyBmb2xkbCwgaW5qZWN0CiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fFN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFthY2N1bXVsYXRvcl0gSW5pdGlhbCB2YWx1ZSBvZiB0aGUgYWNjdW11bGF0b3IuCiAgICAgKiBAcGFyYW0ge01peGVkfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7TWl4ZWR9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgc3VtID0gXy5yZWR1Y2UoWzEsIDIsIDNdLCBmdW5jdGlvbihzdW0sIG51bSkgewogICAgICogICByZXR1cm4gc3VtICsgbnVtOwogICAgICogfSk7CiAgICAgKiAvLyA9PiA2CiAgICAgKgogICAgICogdmFyIG1hcHBlZCA9IF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCBmdW5jdGlvbihyZXN1bHQsIG51bSwga2V5KSB7CiAgICAgKiAgIHJlc3VsdFtrZXldID0gbnVtICogMzsKICAgICAqICAgcmV0dXJuIHJlc3VsdDsKICAgICAqIH0sIHt9KTsKICAgICAqIC8vID0+IHsgJ2EnOiAzLCAnYic6IDYsICdjJzogOSB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBjYWxsYmFjaywgYWNjdW11bGF0b3IsIHRoaXNBcmcpIHsKICAgICAgdmFyIG5vYWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMzsKICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDQpOwoKICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHsKICAgICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7CgogICAgICAgIGlmIChub2FjY3VtKSB7CiAgICAgICAgICBhY2N1bXVsYXRvciA9IGNvbGxlY3Rpb25bKytpbmRleF07CiAgICAgICAgfQogICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICBhY2N1bXVsYXRvciA9IGNhbGxiYWNrKGFjY3VtdWxhdG9yLCBjb2xsZWN0aW9uW2luZGV4XSwgaW5kZXgsIGNvbGxlY3Rpb24pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBiYXNpY0VhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgICBhY2N1bXVsYXRvciA9IG5vYWNjdW0KICAgICAgICAgICAgPyAobm9hY2N1bSA9IGZhbHNlLCB2YWx1ZSkKICAgICAgICAgICAgOiBjYWxsYmFjayhhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKQogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjsKICAgIH0KCiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIGlzIHNpbWlsYXIgdG8gYF8ucmVkdWNlYCwgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBhCiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAYWxpYXMgZm9sZHIKICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIgaXRlcmF0aW9uLgogICAgICogQHBhcmFtIHtNaXhlZH0gW2FjY3VtdWxhdG9yXSBJbml0aWFsIHZhbHVlIG9mIHRoZSBhY2N1bXVsYXRvci4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtNaXhlZH0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBsaXN0ID0gW1swLCAxXSwgWzIsIDNdLCBbNCwgNV1dOwogICAgICogdmFyIGZsYXQgPSBfLnJlZHVjZVJpZ2h0KGxpc3QsIGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEuY29uY2F0KGIpOyB9LCBbXSk7CiAgICAgKiAvLyA9PiBbNCwgNSwgMiwgMywgMCwgMV0KICAgICAqLwogICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgY2FsbGJhY2ssIGFjY3VtdWxhdG9yLCB0aGlzQXJnKSB7CiAgICAgIHZhciBpdGVyYWJsZSA9IGNvbGxlY3Rpb24sCiAgICAgICAgICBsZW5ndGggPSBjb2xsZWN0aW9uID8gY29sbGVjdGlvbi5sZW5ndGggOiAwLAogICAgICAgICAgbm9hY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzOwoKICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT0gJ251bWJlcicpIHsKICAgICAgICB2YXIgcHJvcHMgPSBrZXlzKGNvbGxlY3Rpb24pOwogICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDsKICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnVuaW5kZXhlZENoYXJzICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKSB7CiAgICAgICAgaXRlcmFibGUgPSBjb2xsZWN0aW9uLnNwbGl0KCcnKTsKICAgICAgfQogICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgNCk7CiAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgaW5kZXggPSBwcm9wcyA/IHByb3BzWy0tbGVuZ3RoXSA6IC0tbGVuZ3RoOwogICAgICAgIGFjY3VtdWxhdG9yID0gbm9hY2N1bQogICAgICAgICAgPyAobm9hY2N1bSA9IGZhbHNlLCBpdGVyYWJsZVtpbmRleF0pCiAgICAgICAgICA6IGNhbGxiYWNrKGFjY3VtdWxhdG9yLCBpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBjb2xsZWN0aW9uKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjsKICAgIH0KCiAgICAvKioKICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBhCiAgICAgKiBgY29sbGVjdGlvbmAgdGhhdCBgY2FsbGJhY2tgIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1dGh5IGZvci4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9ucwogICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8U3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fFN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlcgogICAgICogIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUKICAgICAqICBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGRpZCAqKm5vdCoqIHBhc3MgdGhlCiAgICAgKiAgY2FsbGJhY2sgY2hlY2suCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBvZGRzID0gXy5yZWplY3QoWzEsIDIsIDMsIDQsIDUsIDZdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIG51bSAlIDIgPT0gMDsgfSk7CiAgICAgKiAvLyA9PiBbMSwgMywgNV0KICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdhcHBsZScsICAnb3JnYW5pYyc6IGZhbHNlLCAndHlwZSc6ICdmcnVpdCcgfSwKICAgICAqICAgeyAnbmFtZSc6ICdjYXJyb3QnLCAnb3JnYW5pYyc6IHRydWUsICAndHlwZSc6ICd2ZWdldGFibGUnIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5yZWplY3QoZm9vZCwgJ29yZ2FuaWMnKTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2FwcGxlJywgJ29yZ2FuaWMnOiBmYWxzZSwgJ3R5cGUnOiAnZnJ1aXQnIH1dCiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ud2hlcmUiIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5yZWplY3QoZm9vZCwgeyAndHlwZSc6ICdmcnVpdCcgfSk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdjYXJyb3QnLCAnb3JnYW5pYyc6IHRydWUsICd0eXBlJzogJ3ZlZ2V0YWJsZScgfV0KICAgICAqLwogICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnKTsKICAgICAgcmV0dXJuIGZpbHRlcihjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gIWNhbGxiYWNrKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCBgYXJyYXlgIHZhbHVlcywgdXNpbmcgYSB2ZXJzaW9uIG9mIHRoZQogICAgICogRmlzaGVyLVlhdGVzIHNodWZmbGUuIFNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fFN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IHNodWZmbGVkIGNvbGxlY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNCwgNSwgNl0pOwogICAgICogLy8gPT4gWzQsIDEsIDYsIDMsIDUsIDJdCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDAsCiAgICAgICAgICByZXN1bHQgPSBBcnJheSh0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDogMCk7CgogICAgICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgdmFyIHJhbmQgPSBmbG9vcihuYXRpdmVSYW5kb20oKSAqICgrK2luZGV4ICsgMSkpOwogICAgICAgIHJlc3VsdFtpbmRleF0gPSByZXN1bHRbcmFuZF07CiAgICAgICAgcmVzdWx0W3JhbmRdID0gdmFsdWU7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogR2V0cyB0aGUgc2l6ZSBvZiB0aGUgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBgY29sbGVjdGlvbi5sZW5ndGhgIGZvciBhcnJheXMKICAgICAqIGFuZCBhcnJheS1saWtlIG9iamVjdHMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fFN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LgogICAgICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBgY29sbGVjdGlvbi5sZW5ndGhgIG9yIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnNpemUoWzEsIDJdKTsKICAgICAqIC8vID0+IDIKICAgICAqCiAgICAgKiBfLnNpemUoeyAnb25lJzogMSwgJ3R3byc6IDIsICd0aHJlZSc6IDMgfSk7CiAgICAgKiAvLyA9PiAzCiAgICAgKgogICAgICogXy5zaXplKCdjdXJseScpOwogICAgICogLy8gPT4gNQogICAgICovCiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHsKICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDA7CiAgICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInID8gbGVuZ3RoIDoga2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7CiAgICB9CgogICAgLyoqCiAgICAgKiBDaGVja3MgaWYgdGhlIGBjYWxsYmFja2AgcmV0dXJucyBhIHRydXRoeSB2YWx1ZSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGEKICAgICAqIGBjb2xsZWN0aW9uYC4gVGhlIGZ1bmN0aW9uIHJldHVybnMgYXMgc29vbiBhcyBpdCBmaW5kcyBwYXNzaW5nIHZhbHVlLCBhbmQKICAgICAqIGRvZXMgbm90IGl0ZXJhdGUgb3ZlciB0aGUgZW50aXJlIGBjb2xsZWN0aW9uYC4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8KICAgICAqIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIGFueQogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxTdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8U3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyCiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZQogICAgICogIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge0Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgY2FsbGJhY2sgY2hlY2ssCiAgICAgKiAgZWxzZSBgZmFsc2VgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pOwogICAgICogLy8gPT4gdHJ1ZQogICAgICoKICAgICAqIHZhciBmb29kID0gWwogICAgICogICB7ICduYW1lJzogJ2FwcGxlJywgICdvcmdhbmljJzogZmFsc2UsICd0eXBlJzogJ2ZydWl0JyB9LAogICAgICogICB7ICduYW1lJzogJ2NhcnJvdCcsICdvcmdhbmljJzogdHJ1ZSwgICd0eXBlJzogJ3ZlZ2V0YWJsZScgfQogICAgICogXTsKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy5wbHVjayIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLnNvbWUoZm9vZCwgJ29yZ2FuaWMnKTsKICAgICAqIC8vID0+IHRydWUKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy53aGVyZSIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLnNvbWUoZm9vZCwgeyAndHlwZSc6ICdtZWF0JyB9KTsKICAgICAqIC8vID0+IGZhbHNlCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgdmFyIHJlc3VsdDsKICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcpOwoKICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHsKICAgICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7CgogICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgICBpZiAoKHJlc3VsdCA9IGNhbGxiYWNrKGNvbGxlY3Rpb25baW5kZXhdLCBpbmRleCwgY29sbGVjdGlvbikpKSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBiYXNpY0VhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgICByZXR1cm4gIShyZXN1bHQgPSBjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICByZXR1cm4gISFyZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzLCBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSByZXN1bHRzIG9mCiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiB0aGUgYGNvbGxlY3Rpb25gIHRocm91Z2ggdGhlIGBjYWxsYmFja2AuIFRoaXMgbWV0aG9kCiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCB3aWxsIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mCiAgICAgKiBlcXVhbCBlbGVtZW50cy4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUKICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25zCiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxTdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8U3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyCiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZQogICAgICogIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIHNvcnRlZCBlbGVtZW50cy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5zb3J0QnkoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIE1hdGguc2luKG51bSk7IH0pOwogICAgICogLy8gPT4gWzMsIDEsIDJdCiAgICAgKgogICAgICogXy5zb3J0QnkoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsgcmV0dXJuIHRoaXMuc2luKG51bSk7IH0sIE1hdGgpOwogICAgICogLy8gPT4gWzMsIDEsIDJdCiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5zb3J0QnkoWydiYW5hbmEnLCAnc3RyYXdiZXJyeScsICdhcHBsZSddLCAnbGVuZ3RoJyk7CiAgICAgKiAvLyA9PiBbJ2FwcGxlJywgJ2JhbmFuYScsICdzdHJhd2JlcnJ5J10KICAgICAqLwogICAgZnVuY3Rpb24gc29ydEJ5KGNvbGxlY3Rpb24sIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGNvbGxlY3Rpb24ubGVuZ3RoIDogMCwKICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgPyBsZW5ndGggOiAwKTsKCiAgICAgIGNhbGxiYWNrID0gbG9kYXNoLmNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrLCB0aGlzQXJnKTsKICAgICAgZm9yRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgdmFyIG9iamVjdCA9IHJlc3VsdFsrK2luZGV4XSA9IGdldE9iamVjdCgpOwogICAgICAgIG9iamVjdC5jcml0ZXJpYSA9IGNhbGxiYWNrKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pOwogICAgICAgIG9iamVjdC5pbmRleCA9IGluZGV4OwogICAgICAgIG9iamVjdC52YWx1ZSA9IHZhbHVlOwogICAgICB9KTsKCiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7CiAgICAgIHJlc3VsdC5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpOwogICAgICB3aGlsZSAobGVuZ3RoLS0pIHsKICAgICAgICB2YXIgb2JqZWN0ID0gcmVzdWx0W2xlbmd0aF07CiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBvYmplY3QudmFsdWU7CiAgICAgICAgcmVsZWFzZU9iamVjdChvYmplY3QpOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDb252ZXJ0cyB0aGUgYGNvbGxlY3Rpb25gIHRvIGFuIGFycmF5LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fFN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBjb252ZXJ0LgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29udmVydGVkIGFycmF5LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAoZnVuY3Rpb24oKSB7IHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKS5zbGljZSgxKTsgfSkoMSwgMiwgMywgNCk7CiAgICAgKiAvLyA9PiBbMiwgMywgNF0KICAgICAqLwogICAgZnVuY3Rpb24gdG9BcnJheShjb2xsZWN0aW9uKSB7CiAgICAgIGlmIChjb2xsZWN0aW9uICYmIHR5cGVvZiBjb2xsZWN0aW9uLmxlbmd0aCA9PSAnbnVtYmVyJykgewogICAgICAgIHJldHVybiAoc3VwcG9ydC51bmluZGV4ZWRDaGFycyAmJiBpc1N0cmluZyhjb2xsZWN0aW9uKSkKICAgICAgICAgID8gY29sbGVjdGlvbi5zcGxpdCgnJykKICAgICAgICAgIDogc2xpY2UoY29sbGVjdGlvbik7CiAgICAgIH0KICAgICAgcmV0dXJuIHZhbHVlcyhjb2xsZWN0aW9uKTsKICAgIH0KCiAgICAvKioKICAgICAqIEV4YW1pbmVzIGVhY2ggZWxlbWVudCBpbiBhIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50cwogICAgICogdGhhdCBoYXZlIHRoZSBnaXZlbiBgcHJvcGVydGllc2AuIFdoZW4gY2hlY2tpbmcgYHByb3BlcnRpZXNgLCB0aGlzIG1ldGhvZAogICAgICogcGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQKICAgICAqIHRvIGVhY2ggb3RoZXIuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEB0eXBlIEZ1bmN0aW9uCiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnMKICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fFN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBmaWx0ZXIgYnkuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBnaXZlbiBgcHJvcGVydGllc2AuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBzdG9vZ2VzID0gWwogICAgICogICB7ICduYW1lJzogJ21vZScsICdhZ2UnOiA0MCB9LAogICAgICogICB7ICduYW1lJzogJ2xhcnJ5JywgJ2FnZSc6IDUwIH0KICAgICAqIF07CiAgICAgKgogICAgICogXy53aGVyZShzdG9vZ2VzLCB7ICdhZ2UnOiA0MCB9KTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ21vZScsICdhZ2UnOiA0MCB9XQogICAgICovCiAgICB2YXIgd2hlcmUgPSBmaWx0ZXI7CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgb2YgYGFycmF5YCByZW1vdmVkLiBUaGUgdmFsdWVzCiAgICAgKiBgZmFsc2VgLCBgbnVsbGAsIGAwYCwgYCIiYCwgYHVuZGVmaW5lZGAgYW5kIGBOYU5gIGFyZSBhbGwgZmFsc2V5LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBmaWx0ZXJlZCBhcnJheS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTsKICAgICAqIC8vID0+IFsxLCAyLCAzXQogICAgICovCiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLAogICAgICAgICAgcmVzdWx0ID0gW107CgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTsKICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCBlbGVtZW50cyBub3QgcHJlc2VudCBpbiB0aGUgb3RoZXIgYXJyYXlzCiAgICAgKiB1c2luZyBzdHJpY3QgZXF1YWxpdHkgZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy4KICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheTEsIGFycmF5MiwgLi4uXSBBcnJheXMgdG8gY2hlY2suCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgYGFycmF5YCBlbGVtZW50cyBub3QgcHJlc2VudCBpbiB0aGUKICAgICAqICBvdGhlciBhcnJheXMuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZGlmZmVyZW5jZShbMSwgMiwgMywgNCwgNV0sIFs1LCAyLCAxMF0pOwogICAgICogLy8gPT4gWzEsIDMsIDRdCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRpZmZlcmVuY2UoYXJyYXkpIHsKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLAogICAgICAgICAgc2VlbiA9IGNvbmNhdC5hcHBseShhcnJheVJlZiwgbmF0aXZlU2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSwKICAgICAgICAgIHJlc3VsdCA9IFtdOwoKICAgICAgdmFyIGlzTGFyZ2UgPSBsZW5ndGggPj0gbGFyZ2VBcnJheVNpemUgJiYgaW5kZXhPZiA9PT0gYmFzaWNJbmRleE9mOwoKICAgICAgaWYgKGlzTGFyZ2UpIHsKICAgICAgICB2YXIgY2FjaGUgPSBjcmVhdGVDYWNoZShzZWVuKTsKICAgICAgICBpZiAoY2FjaGUpIHsKICAgICAgICAgIGluZGV4T2YgPSBjYWNoZUluZGV4T2Y7CiAgICAgICAgICBzZWVuID0gY2FjaGU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlzTGFyZ2UgPSBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07CiAgICAgICAgaWYgKGluZGV4T2Yoc2VlbiwgdmFsdWUpIDwgMCkgewogICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoaXNMYXJnZSkgewogICAgICAgIHJlbGVhc2VPYmplY3Qoc2Vlbik7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIGlzIHNpbWlsYXIgdG8gYF8uZmluZGAsIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mCiAgICAgKiB0aGUgZWxlbWVudCB0aGF0IHBhc3NlcyB0aGUgY2FsbGJhY2sgY2hlY2ssIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8U3RyaW5nfSBbY2FsbGJhY2s9aWRlbnRpdHldIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyCiAgICAgKiAgaXRlcmF0aW9uLiBJZiBhIHByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZQogICAgICogIGEgIl8ucGx1Y2siIG9yICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge01peGVkfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmZpbmRJbmRleChbJ2FwcGxlJywgJ2JhbmFuYScsICdiZWV0J10sIGZ1bmN0aW9uKGZvb2QpIHsKICAgICAqICAgcmV0dXJuIC9eYi8udGVzdChmb29kKTsKICAgICAqIH0pOwogICAgICogLy8gPT4gMQogICAgICovCiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwOwoKICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcpOwogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIGlmIChjYWxsYmFjayhhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHsKICAgICAgICAgIHJldHVybiBpbmRleDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIC0xOwogICAgfQoKICAgIC8qKgogICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgYGFycmF5YC4gSWYgYSBudW1iZXIgYG5gIGlzIHBhc3NlZCwgdGhlIGZpcnN0CiAgICAgKiBgbmAgZWxlbWVudHMgb2YgdGhlIGBhcnJheWAgYXJlIHJldHVybmVkLiBJZiBhIGBjYWxsYmFja2AgZnVuY3Rpb24gaXMgcGFzc2VkLAogICAgICogZWxlbWVudHMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkgYXJlIHJldHVybmVkIGFzIGxvbmcgYXMgdGhlIGBjYWxsYmFja2AKICAgICAqIHJldHVybnMgdHJ1dGh5LiBUaGUgYGNhbGxiYWNrYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZQogICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBhcnJheSkuCiAgICAgKgogICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHBhc3NlZCBmb3IgYGNhbGxiYWNrYCwgdGhlIGNyZWF0ZWQgIl8ucGx1Y2siIHN0eWxlCiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogSWYgYW4gb2JqZWN0IGlzIHBhc3NlZCBmb3IgYGNhbGxiYWNrYCwgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAYWxpYXMgaGVhZCwgdGFrZQogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8TnVtYmVyfFN0cmluZ30gW2NhbGxiYWNrfG5dIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgZWxlbWVudCBvciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJldHVybi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yCiAgICAgKiAgb2JqZWN0IGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIKICAgICAqICBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge01peGVkfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50KHMpIG9mIGBhcnJheWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZmlyc3QoWzEsIDIsIDNdKTsKICAgICAqIC8vID0+IDEKICAgICAqCiAgICAgKiBfLmZpcnN0KFsxLCAyLCAzXSwgMik7CiAgICAgKiAvLyA9PiBbMSwgMl0KICAgICAqCiAgICAgKiBfLmZpcnN0KFsxLCAyLCAzXSwgZnVuY3Rpb24obnVtKSB7CiAgICAgKiAgIHJldHVybiBudW0gPCAzOwogICAgICogfSk7CiAgICAgKiAvLyA9PiBbMSwgMl0KICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdiYW5hbmEnLCAnb3JnYW5pYyc6IHRydWUgfSwKICAgICAqICAgeyAnbmFtZSc6ICdiZWV0JywgICAnb3JnYW5pYyc6IGZhbHNlIH0sCiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLnBsdWNrIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uZmlyc3QoZm9vZCwgJ29yZ2FuaWMnKTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2JhbmFuYScsICdvcmdhbmljJzogdHJ1ZSB9XQogICAgICoKICAgICAqIHZhciBmb29kID0gWwogICAgICogICB7ICduYW1lJzogJ2FwcGxlJywgICd0eXBlJzogJ2ZydWl0JyB9LAogICAgICogICB7ICduYW1lJzogJ2JhbmFuYScsICd0eXBlJzogJ2ZydWl0JyB9LAogICAgICogICB7ICduYW1lJzogJ2JlZXQnLCAgICd0eXBlJzogJ3ZlZ2V0YWJsZScgfQogICAgICogXTsKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy53aGVyZSIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLmZpcnN0KGZvb2QsIHsgJ3R5cGUnOiAnZnJ1aXQnIH0pOwogICAgICogLy8gPT4gW3sgJ25hbWUnOiAnYXBwbGUnLCAndHlwZSc6ICdmcnVpdCcgfSwgeyAnbmFtZSc6ICdiYW5hbmEnLCAndHlwZSc6ICdmcnVpdCcgfV0KICAgICAqLwogICAgZnVuY3Rpb24gZmlyc3QoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIGlmIChhcnJheSkgewogICAgICAgIHZhciBuID0gMCwKICAgICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwoKICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9ICdudW1iZXInICYmIGNhbGxiYWNrICE9IG51bGwpIHsKICAgICAgICAgIHZhciBpbmRleCA9IC0xOwogICAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcpOwogICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgY2FsbGJhY2soYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7CiAgICAgICAgICAgIG4rKzsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgbiA9IGNhbGxiYWNrOwogICAgICAgICAgaWYgKG4gPT0gbnVsbCB8fCB0aGlzQXJnKSB7CiAgICAgICAgICAgIHJldHVybiBhcnJheVswXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCAwLCBuYXRpdmVNaW4obmF0aXZlTWF4KDAsIG4pLCBsZW5ndGgpKTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogRmxhdHRlbnMgYSBuZXN0ZWQgYXJyYXkgKHRoZSBuZXN0aW5nIGNhbiBiZSB0byBhbnkgZGVwdGgpLiBJZiBgaXNTaGFsbG93YAogICAgICogaXMgdHJ1dGh5LCBgYXJyYXlgIHdpbGwgb25seSBiZSBmbGF0dGVuZWQgYSBzaW5nbGUgbGV2ZWwuIElmIGBjYWxsYmFja2AKICAgICAqIGlzIHBhc3NlZCwgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgaXMgcGFzc2VkIHRocm91Z2ggYSBgY2FsbGJhY2tgIGJlZm9yZQogICAgICogZmxhdHRlbmluZy4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUKICAgICAqIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpc1NoYWxsb3c9ZmFsc2VdIEEgZmxhZyB0byBpbmRpY2F0ZSBvbmx5IGZsYXR0ZW5pbmcgYSBzaW5nbGUgbGV2ZWwuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxTdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIKICAgICAqICBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcGFzc2VkLCBpdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlCiAgICAgKiAgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0ge01peGVkfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgZmxhdHRlbmVkIGFycmF5LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyXSwgWzMsIFtbNF1dXV0pOwogICAgICogLy8gPT4gWzEsIDIsIDMsIDRdOwogICAgICoKICAgICAqIF8uZmxhdHRlbihbMSwgWzJdLCBbMywgW1s0XV1dXSwgdHJ1ZSk7CiAgICAgKiAvLyA9PiBbMSwgMiwgMywgW1s0XV1dOwogICAgICoKICAgICAqIHZhciBzdG9vZ2VzID0gWwogICAgICogICB7ICduYW1lJzogJ2N1cmx5JywgJ3F1b3Rlcyc6IFsnT2gsIGEgd2lzZSBndXksIGVoPycsICdQb2lmZWN0ISddIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnbW9lJywgJ3F1b3Rlcyc6IFsnU3ByZWFkIG91dCEnLCAnWW91IGtudWNrbGVoZWFkISddIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5mbGF0dGVuKHN0b29nZXMsICdxdW90ZXMnKTsKICAgICAqIC8vID0+IFsnT2gsIGEgd2lzZSBndXksIGVoPycsICdQb2lmZWN0IScsICdTcHJlYWQgb3V0IScsICdZb3Uga251Y2tsZWhlYWQhJ10KICAgICAqLwogICAgdmFyIGZsYXR0ZW4gPSBvdmVybG9hZFdyYXBwZXIoZnVuY3Rpb24gZmxhdHRlbihhcnJheSwgaXNTaGFsbG93LCBjYWxsYmFjaykgewogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCwKICAgICAgICAgIHJlc3VsdCA9IFtdOwoKICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07CiAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgYXJyYXkpOwogICAgICAgIH0KICAgICAgICAvLyByZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpCiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7CiAgICAgICAgICBwdXNoLmFwcGx5KHJlc3VsdCwgaXNTaGFsbG93ID8gdmFsdWUgOiBmbGF0dGVuKHZhbHVlKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0pOwoKICAgIC8qKgogICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCB1c2luZwogICAgICogc3RyaWN0IGVxdWFsaXR5IGZvciBjb21wYXJpc29ucywgaS5lLiBgPT09YC4gSWYgdGhlIGBhcnJheWAgaXMgYWxyZWFkeQogICAgICogc29ydGVkLCBwYXNzaW5nIGB0cnVlYCBmb3IgYGZyb21JbmRleGAgd2lsbCBydW4gYSBmYXN0ZXIgYmluYXJ5IHNlYXJjaC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLgogICAgICogQHBhcmFtIHtCb29sZWFufE51bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20gb3IgYHRydWVgIHRvCiAgICAgKiAgcGVyZm9ybSBhIGJpbmFyeSBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC4KICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlIG9yIGAtMWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMywgMSwgMiwgM10sIDIpOwogICAgICogLy8gPT4gMQogICAgICoKICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMywgMSwgMiwgM10sIDIsIDMpOwogICAgICogLy8gPT4gNAogICAgICoKICAgICAqIF8uaW5kZXhPZihbMSwgMSwgMiwgMiwgMywgM10sIDIsIHRydWUpOwogICAgICogLy8gPT4gMgogICAgICovCiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7CiAgICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ID09ICdudW1iZXInKSB7CiAgICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKICAgICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4IDwgMCA/IG5hdGl2ZU1heCgwLCBsZW5ndGggKyBmcm9tSW5kZXgpIDogZnJvbUluZGV4IHx8IDApOwogICAgICB9IGVsc2UgaWYgKGZyb21JbmRleCkgewogICAgICAgIHZhciBpbmRleCA9IHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7CiAgICAgICAgcmV0dXJuIGFycmF5W2luZGV4XSA9PT0gdmFsdWUgPyBpbmRleCA6IC0xOwogICAgICB9CiAgICAgIHJldHVybiBhcnJheSA/IGJhc2ljSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkgOiAtMTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuIElmIGEgbnVtYmVyIGBuYCBpcyBwYXNzZWQsIHRoZQogICAgICogbGFzdCBgbmAgZWxlbWVudHMgYXJlIGV4Y2x1ZGVkIGZyb20gdGhlIHJlc3VsdC4gSWYgYSBgY2FsbGJhY2tgIGZ1bmN0aW9uCiAgICAgKiBpcyBwYXNzZWQsIGVsZW1lbnRzIGF0IHRoZSBlbmQgb2YgdGhlIGFycmF5IGFyZSBleGNsdWRlZCBmcm9tIHRoZSByZXN1bHQKICAgICAqIGFzIGxvbmcgYXMgdGhlIGBjYWxsYmFja2AgcmV0dXJucyB0cnV0aHkuIFRoZSBgY2FsbGJhY2tgIGlzIGJvdW5kIHRvCiAgICAgKiBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS4KICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBBcnJheXMKICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fE51bWJlcnxTdHJpbmd9IFtjYWxsYmFja3xuPTFdIFRoZSBmdW5jdGlvbiBjYWxsZWQKICAgICAqICBwZXIgZWxlbWVudCBvciB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGV4Y2x1ZGUuIElmIGEgcHJvcGVydHkgbmFtZSBvcgogICAgICogIG9iamVjdCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiCiAgICAgKiAgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIHNsaWNlIG9mIGBhcnJheWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pOwogICAgICogLy8gPT4gWzEsIDJdCiAgICAgKgogICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSwgMik7CiAgICAgKiAvLyA9PiBbMV0KICAgICAqCiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdLCBmdW5jdGlvbihudW0pIHsKICAgICAqICAgcmV0dXJuIG51bSA+IDE7CiAgICAgKiB9KTsKICAgICAqIC8vID0+IFsxXQogICAgICoKICAgICAqIHZhciBmb29kID0gWwogICAgICogICB7ICduYW1lJzogJ2JlZXQnLCAgICdvcmdhbmljJzogZmFsc2UgfSwKICAgICAqICAgeyAnbmFtZSc6ICdjYXJyb3QnLCAnb3JnYW5pYyc6IHRydWUgfQogICAgICogXTsKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy5wbHVjayIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLmluaXRpYWwoZm9vZCwgJ29yZ2FuaWMnKTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2JlZXQnLCAgICdvcmdhbmljJzogZmFsc2UgfV0KICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdiYW5hbmEnLCAndHlwZSc6ICdmcnVpdCcgfSwKICAgICAqICAgeyAnbmFtZSc6ICdiZWV0JywgICAndHlwZSc6ICd2ZWdldGFibGUnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnY2Fycm90JywgJ3R5cGUnOiAndmVnZXRhYmxlJyB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLndoZXJlIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8uaW5pdGlhbChmb29kLCB7ICd0eXBlJzogJ3ZlZ2V0YWJsZScgfSk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdiYW5hbmEnLCAndHlwZSc6ICdmcnVpdCcgfV0KICAgICAqLwogICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgaWYgKCFhcnJheSkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgICB2YXIgbiA9IDAsCiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7CgogICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9ICdudW1iZXInICYmIGNhbGxiYWNrICE9IG51bGwpIHsKICAgICAgICB2YXIgaW5kZXggPSBsZW5ndGg7CiAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcpOwogICAgICAgIHdoaWxlIChpbmRleC0tICYmIGNhbGxiYWNrKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkgewogICAgICAgICAgbisrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBuID0gKGNhbGxiYWNrID09IG51bGwgfHwgdGhpc0FyZykgPyAxIDogY2FsbGJhY2sgfHwgbjsKICAgICAgfQogICAgICByZXR1cm4gc2xpY2UoYXJyYXksIDAsIG5hdGl2ZU1pbihuYXRpdmVNYXgoMCwgbGVuZ3RoIC0gbiksIGxlbmd0aCkpOwogICAgfQoKICAgIC8qKgogICAgICogQ29tcHV0ZXMgdGhlIGludGVyc2VjdGlvbiBvZiBhbGwgdGhlIHBhc3NlZC1pbiBhcnJheXMgdXNpbmcgc3RyaWN0IGVxdWFsaXR5CiAgICAgKiBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBBcnJheXMKICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheTEsIGFycmF5MiwgLi4uXSBBcnJheXMgdG8gcHJvY2Vzcy4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiB1bmlxdWUgZWxlbWVudHMgdGhhdCBhcmUgcHJlc2VudAogICAgICogIGluICoqYWxsKiogb2YgdGhlIGFycmF5cy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5pbnRlcnNlY3Rpb24oWzEsIDIsIDNdLCBbMTAxLCAyLCAxLCAxMF0sIFsyLCAxXSk7CiAgICAgKiAvLyA9PiBbMSwgMl0KICAgICAqLwogICAgZnVuY3Rpb24gaW50ZXJzZWN0aW9uKGFycmF5KSB7CiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLAogICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLAogICAgICAgICAgYXJnc0luZGV4ID0gLTEsCiAgICAgICAgICBjYWNoZXMgPSBnZXRBcnJheSgpLAogICAgICAgICAgaW5kZXggPSAtMSwKICAgICAgICAgIGluZGV4T2YgPSBnZXRJbmRleE9mKCksCiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsCiAgICAgICAgICByZXN1bHQgPSBbXSwKICAgICAgICAgIHNlZW4gPSBnZXRBcnJheSgpOwoKICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkgewogICAgICAgIHZhciB2YWx1ZSA9IGFyZ3NbYXJnc0luZGV4XTsKICAgICAgICBjYWNoZXNbYXJnc0luZGV4XSA9IGluZGV4T2YgPT09IGJhc2ljSW5kZXhPZiAmJgogICAgICAgICAgKHZhbHVlID8gdmFsdWUubGVuZ3RoIDogMCkgPj0gbGFyZ2VBcnJheVNpemUgJiYKICAgICAgICAgIGNyZWF0ZUNhY2hlKGFyZ3NJbmRleCA/IGFyZ3NbYXJnc0luZGV4XSA6IHNlZW4pOwogICAgICB9CiAgICAgIG91dGVyOgogICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgewogICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1swXTsKICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTsKCiAgICAgICAgaWYgKChjYWNoZSA/IGNhY2hlSW5kZXhPZihjYWNoZSwgdmFsdWUpIDogaW5kZXhPZihzZWVuLCB2YWx1ZSkpIDwgMCkgewogICAgICAgICAgYXJnc0luZGV4ID0gYXJnc0xlbmd0aDsKICAgICAgICAgIChjYWNoZSB8fCBzZWVuKS5wdXNoKHZhbHVlKTsKICAgICAgICAgIHdoaWxlICgtLWFyZ3NJbmRleCkgewogICAgICAgICAgICBjYWNoZSA9IGNhY2hlc1thcmdzSW5kZXhdOwogICAgICAgICAgICBpZiAoKGNhY2hlID8gY2FjaGVJbmRleE9mKGNhY2hlLCB2YWx1ZSkgOiBpbmRleE9mKGFyZ3NbYXJnc0luZGV4XSwgdmFsdWUpKSA8IDApIHsKICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpOwogICAgICAgIH0KICAgICAgfQogICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7CiAgICAgICAgY2FjaGUgPSBjYWNoZXNbYXJnc0xlbmd0aF07CiAgICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgICByZWxlYXNlT2JqZWN0KGNhY2hlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmVsZWFzZUFycmF5KGNhY2hlcyk7CiAgICAgIHJlbGVhc2VBcnJheShzZWVuKTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiB0aGUgYGFycmF5YC4gSWYgYSBudW1iZXIgYG5gIGlzIHBhc3NlZCwgdGhlCiAgICAgKiBsYXN0IGBuYCBlbGVtZW50cyBvZiB0aGUgYGFycmF5YCBhcmUgcmV0dXJuZWQuIElmIGEgYGNhbGxiYWNrYCBmdW5jdGlvbgogICAgICogaXMgcGFzc2VkLCBlbGVtZW50cyBhdCB0aGUgZW5kIG9mIHRoZSBhcnJheSBhcmUgcmV0dXJuZWQgYXMgbG9uZyBhcyB0aGUKICAgICAqIGBjYWxsYmFja2AgcmV0dXJucyB0cnV0aHkuIFRoZSBgY2FsbGJhY2tgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQKICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM7KHZhbHVlLCBpbmRleCwgYXJyYXkpLgogICAgICoKICAgICAqCiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy5wbHVjayIgc3R5bGUKICAgICAqIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC4KICAgICAqCiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcGFzc2VkIGZvciBgY2FsbGJhY2tgLCB0aGUgY3JlYXRlZCAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2sKICAgICAqIHdpbGwgcmV0dXJuIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBvYmplY3QsCiAgICAgKiBlbHNlIGBmYWxzZWAuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBBcnJheXMKICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fE51bWJlcnxTdHJpbmd9IFtjYWxsYmFja3xuXSBUaGUgZnVuY3Rpb24gY2FsbGVkCiAgICAgKiAgcGVyIGVsZW1lbnQgb3IgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZXR1cm4uIElmIGEgcHJvcGVydHkgbmFtZSBvcgogICAgICogIG9iamVjdCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiCiAgICAgKiAgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtNaXhlZH0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50KHMpIG9mIGBhcnJheWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8ubGFzdChbMSwgMiwgM10pOwogICAgICogLy8gPT4gMwogICAgICoKICAgICAqIF8ubGFzdChbMSwgMiwgM10sIDIpOwogICAgICogLy8gPT4gWzIsIDNdCiAgICAgKgogICAgICogXy5sYXN0KFsxLCAyLCAzXSwgZnVuY3Rpb24obnVtKSB7CiAgICAgKiAgIHJldHVybiBudW0gPiAxOwogICAgICogfSk7CiAgICAgKiAvLyA9PiBbMiwgM10KICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdiZWV0JywgICAnb3JnYW5pYyc6IGZhbHNlIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnY2Fycm90JywgJ29yZ2FuaWMnOiB0cnVlIH0KICAgICAqIF07CiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5sYXN0KGZvb2QsICdvcmdhbmljJyk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdjYXJyb3QnLCAnb3JnYW5pYyc6IHRydWUgfV0KICAgICAqCiAgICAgKiB2YXIgZm9vZCA9IFsKICAgICAqICAgeyAnbmFtZSc6ICdiYW5hbmEnLCAndHlwZSc6ICdmcnVpdCcgfSwKICAgICAqICAgeyAnbmFtZSc6ICdiZWV0JywgICAndHlwZSc6ICd2ZWdldGFibGUnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnY2Fycm90JywgJ3R5cGUnOiAndmVnZXRhYmxlJyB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLndoZXJlIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8ubGFzdChmb29kLCB7ICd0eXBlJzogJ3ZlZ2V0YWJsZScgfSk7CiAgICAgKiAvLyA9PiBbeyAnbmFtZSc6ICdiZWV0JywgJ3R5cGUnOiAndmVnZXRhYmxlJyB9LCB7ICduYW1lJzogJ2NhcnJvdCcsICd0eXBlJzogJ3ZlZ2V0YWJsZScgfV0KICAgICAqLwogICAgZnVuY3Rpb24gbGFzdChhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgaWYgKGFycmF5KSB7CiAgICAgICAgdmFyIG4gPSAwLAogICAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7CgogICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ251bWJlcicgJiYgY2FsbGJhY2sgIT0gbnVsbCkgewogICAgICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoOwogICAgICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcpOwogICAgICAgICAgd2hpbGUgKGluZGV4LS0gJiYgY2FsbGJhY2soYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7CiAgICAgICAgICAgIG4rKzsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgbiA9IGNhbGxiYWNrOwogICAgICAgICAgaWYgKG4gPT0gbnVsbCB8fCB0aGlzQXJnKSB7CiAgICAgICAgICAgIHJldHVybiBhcnJheVtsZW5ndGggLSAxXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNsaWNlKGFycmF5LCBuYXRpdmVNYXgoMCwgbGVuZ3RoIC0gbikpOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgbGFzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgdXNpbmcgc3RyaWN0CiAgICAgKiBlcXVhbGl0eSBmb3IgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCBpcyB1c2VkCiAgICAgKiBhcyB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLgogICAgICogQHBhcmFtIHtOdW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS4KICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlIG9yIGAtMWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDMsIDEsIDIsIDNdLCAyKTsKICAgICAqIC8vID0+IDQKICAgICAqCiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAzLCAxLCAyLCAzXSwgMiwgMyk7CiAgICAgKiAvLyA9PiAxCiAgICAgKi8KICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7CiAgICAgIHZhciBpbmRleCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDsKICAgICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggPT0gJ251bWJlcicpIHsKICAgICAgICBpbmRleCA9IChmcm9tSW5kZXggPCAwID8gbmF0aXZlTWF4KDAsIGluZGV4ICsgZnJvbUluZGV4KSA6IG5hdGl2ZU1pbihmcm9tSW5kZXgsIGluZGV4IC0gMSkpICsgMTsKICAgICAgfQogICAgICB3aGlsZSAoaW5kZXgtLSkgewogICAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gaW5kZXg7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiAtMTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tCiAgICAgKiBgc3RhcnRgIHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIGBlbmRgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuCiAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLgogICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IHJhbmdlIGFycmF5LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnJhbmdlKDEwKTsKICAgICAqIC8vID0+IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5XQogICAgICoKICAgICAqIF8ucmFuZ2UoMSwgMTEpOwogICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXQogICAgICoKICAgICAqIF8ucmFuZ2UoMCwgMzAsIDUpOwogICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNSwgMjAsIDI1XQogICAgICoKICAgICAqIF8ucmFuZ2UoMCwgLTEwLCAtMSk7CiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtMywgLTQsIC01LCAtNiwgLTcsIC04LCAtOV0KICAgICAqCiAgICAgKiBfLnJhbmdlKDApOwogICAgICogLy8gPT4gW10KICAgICAqLwogICAgZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkgewogICAgICBzdGFydCA9ICtzdGFydCB8fCAwOwogICAgICBzdGVwID0gK3N0ZXAgfHwgMTsKCiAgICAgIGlmIChlbmQgPT0gbnVsbCkgewogICAgICAgIGVuZCA9IHN0YXJ0OwogICAgICAgIHN0YXJ0ID0gMDsKICAgICAgfQogICAgICAvLyB1c2UgYEFycmF5KGxlbmd0aClgIHNvIFY4IHdpbGwgYXZvaWQgdGhlIHNsb3dlciAiZGljdGlvbmFyeSIgbW9kZQogICAgICAvLyBodHRwOi8veW91dHUuYmUvWEFxSXBHVThaWmsjdD0xN20yNXMKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoMCwgY2VpbCgoZW5kIC0gc3RhcnQpIC8gc3RlcCkpLAogICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTsKCiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHN0YXJ0OwogICAgICAgIHN0YXJ0ICs9IHN0ZXA7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKioKICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5pbml0aWFsYCwgdGhpcyBtZXRob2QgZ2V0cyBhbGwgYnV0IHRoZSBmaXJzdCB2YWx1ZSBvZgogICAgICogYGFycmF5YC4gSWYgYSBudW1iZXIgYG5gIGlzIHBhc3NlZCwgdGhlIGZpcnN0IGBuYCB2YWx1ZXMgYXJlIGV4Y2x1ZGVkIGZyb20KICAgICAqIHRoZSByZXN1bHQuIElmIGEgYGNhbGxiYWNrYCBmdW5jdGlvbiBpcyBwYXNzZWQsIGVsZW1lbnRzIGF0IHRoZSBiZWdpbm5pbmcKICAgICAqIG9mIHRoZSBhcnJheSBhcmUgZXhjbHVkZWQgZnJvbSB0aGUgcmVzdWx0IGFzIGxvbmcgYXMgdGhlIGBjYWxsYmFja2AgcmV0dXJucwogICAgICogdHJ1dGh5LiBUaGUgYGNhbGxiYWNrYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZQogICAgICogYXJndW1lbnRzOyAodmFsdWUsIGluZGV4LCBhcnJheSkuCiAgICAgKgogICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHBhc3NlZCBmb3IgYGNhbGxiYWNrYCwgdGhlIGNyZWF0ZWQgIl8ucGx1Y2siIHN0eWxlCiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogSWYgYW4gb2JqZWN0IGlzIHBhc3NlZCBmb3IgYGNhbGxiYWNrYCwgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAYWxpYXMgZHJvcCwgdGFpbAogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8TnVtYmVyfFN0cmluZ30gW2NhbGxiYWNrfG49MV0gVGhlIGZ1bmN0aW9uIGNhbGxlZAogICAgICogIHBlciBlbGVtZW50IG9yIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZXhjbHVkZS4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yCiAgICAgKiAgb2JqZWN0IGlzIHBhc3NlZCwgaXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIKICAgICAqICBzdHlsZSBjYWxsYmFjaywgcmVzcGVjdGl2ZWx5LgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY2FsbGJhY2tgLgogICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgc2xpY2Ugb2YgYGFycmF5YC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5yZXN0KFsxLCAyLCAzXSk7CiAgICAgKiAvLyA9PiBbMiwgM10KICAgICAqCiAgICAgKiBfLnJlc3QoWzEsIDIsIDNdLCAyKTsKICAgICAqIC8vID0+IFszXQogICAgICoKICAgICAqIF8ucmVzdChbMSwgMiwgM10sIGZ1bmN0aW9uKG51bSkgewogICAgICogICByZXR1cm4gbnVtIDwgMzsKICAgICAqIH0pOwogICAgICogLy8gPT4gWzNdCiAgICAgKgogICAgICogdmFyIGZvb2QgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnYmFuYW5hJywgJ29yZ2FuaWMnOiB0cnVlIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnYmVldCcsICAgJ29yZ2FuaWMnOiBmYWxzZSB9LAogICAgICogXTsKICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy5wbHVjayIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLnJlc3QoZm9vZCwgJ29yZ2FuaWMnKTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2JlZXQnLCAnb3JnYW5pYyc6IGZhbHNlIH1dCiAgICAgKgogICAgICogdmFyIGZvb2QgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnYXBwbGUnLCAgJ3R5cGUnOiAnZnJ1aXQnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnYmFuYW5hJywgJ3R5cGUnOiAnZnJ1aXQnIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnYmVldCcsICAgJ3R5cGUnOiAndmVnZXRhYmxlJyB9CiAgICAgKiBdOwogICAgICoKICAgICAqIC8vIHVzaW5nICJfLndoZXJlIiBjYWxsYmFjayBzaG9ydGhhbmQKICAgICAqIF8ucmVzdChmb29kLCB7ICd0eXBlJzogJ2ZydWl0JyB9KTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2JlZXQnLCAndHlwZSc6ICd2ZWdldGFibGUnIH1dCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlc3QoYXJyYXksIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ251bWJlcicgJiYgY2FsbGJhY2sgIT0gbnVsbCkgewogICAgICAgIHZhciBuID0gMCwKICAgICAgICAgICAgaW5kZXggPSAtMSwKICAgICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwOwoKICAgICAgICBjYWxsYmFjayA9IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZyk7CiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgY2FsbGJhY2soYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7CiAgICAgICAgICBuKys7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIG4gPSAoY2FsbGJhY2sgPT0gbnVsbCB8fCB0aGlzQXJnKSA/IDEgOiBuYXRpdmVNYXgoMCwgY2FsbGJhY2spOwogICAgICB9CiAgICAgIHJldHVybiBzbGljZShhcnJheSwgbik7CiAgICB9CgogICAgLyoqCiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoIHRoZSBgdmFsdWVgCiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIHRoZSBzb3J0IG9yZGVyIG9mIHRoZQogICAgICogc29ydGVkIGBhcnJheWAuIElmIGBjYWxsYmFja2AgaXMgcGFzc2VkLCBpdCB3aWxsIGJlIGV4ZWN1dGVkIGZvciBgdmFsdWVgIGFuZAogICAgICogZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBgY2FsbGJhY2tgIGlzCiAgICAgKiBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuCiAgICAgKgogICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHBhc3NlZCBmb3IgYGNhbGxiYWNrYCwgdGhlIGNyZWF0ZWQgIl8ucGx1Y2siIHN0eWxlCiAgICAgKiBjYWxsYmFjayB3aWxsIHJldHVybiB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuCiAgICAgKgogICAgICogSWYgYW4gb2JqZWN0IGlzIHBhc3NlZCBmb3IgYGNhbGxiYWNrYCwgdGhlIGNyZWF0ZWQgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrCiAgICAgKiB3aWxsIHJldHVybiBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gb2JqZWN0LAogICAgICogZWxzZSBgZmFsc2VgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fFN0cmluZ30gW2NhbGxiYWNrPWlkZW50aXR5XSBUaGUgZnVuY3Rpb24gY2FsbGVkIHBlcgogICAgICogIGl0ZXJhdGlvbi4gSWYgYSBwcm9wZXJ0eSBuYW1lIG9yIG9iamVjdCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUKICAgICAqICBhICJfLnBsdWNrIiBvciAiXy53aGVyZSIgc3R5bGUgY2FsbGJhY2ssIHJlc3BlY3RpdmVseS4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSB2YWx1ZSBzaG91bGQgYmUgaW5zZXJ0ZWQKICAgICAqICBpbnRvIGBhcnJheWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uc29ydGVkSW5kZXgoWzIwLCAzMCwgNTBdLCA0MCk7CiAgICAgKiAvLyA9PiAyCiAgICAgKgogICAgICogLy8gdXNpbmcgIl8ucGx1Y2siIGNhbGxiYWNrIHNob3J0aGFuZAogICAgICogXy5zb3J0ZWRJbmRleChbeyAneCc6IDIwIH0sIHsgJ3gnOiAzMCB9LCB7ICd4JzogNTAgfV0sIHsgJ3gnOiA0MCB9LCAneCcpOwogICAgICogLy8gPT4gMgogICAgICoKICAgICAqIHZhciBkaWN0ID0gewogICAgICogICAnd29yZFRvTnVtYmVyJzogeyAndHdlbnR5JzogMjAsICd0aGlydHknOiAzMCwgJ2ZvdXJ0eSc6IDQwLCAnZmlmdHknOiA1MCB9CiAgICAgKiB9OwogICAgICoKICAgICAqIF8uc29ydGVkSW5kZXgoWyd0d2VudHknLCAndGhpcnR5JywgJ2ZpZnR5J10sICdmb3VydHknLCBmdW5jdGlvbih3b3JkKSB7CiAgICAgKiAgIHJldHVybiBkaWN0LndvcmRUb051bWJlclt3b3JkXTsKICAgICAqIH0pOwogICAgICogLy8gPT4gMgogICAgICoKICAgICAqIF8uc29ydGVkSW5kZXgoWyd0d2VudHknLCAndGhpcnR5JywgJ2ZpZnR5J10sICdmb3VydHknLCBmdW5jdGlvbih3b3JkKSB7CiAgICAgKiAgIHJldHVybiB0aGlzLndvcmRUb051bWJlclt3b3JkXTsKICAgICAqIH0sIGRpY3QpOwogICAgICogLy8gPT4gMgogICAgICovCiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIGNhbGxiYWNrLCB0aGlzQXJnKSB7CiAgICAgIHZhciBsb3cgPSAwLAogICAgICAgICAgaGlnaCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogbG93OwoKICAgICAgLy8gZXhwbGljaXRseSByZWZlcmVuY2UgYGlkZW50aXR5YCBmb3IgYmV0dGVyIGlubGluaW5nIGluIEZpcmVmb3gKICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayA/IGxvZGFzaC5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZywgMSkgOiBpZGVudGl0eTsKICAgICAgdmFsdWUgPSBjYWxsYmFjayh2YWx1ZSk7CgogICAgICB3aGlsZSAobG93IDwgaGlnaCkgewogICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDE7CiAgICAgICAgKGNhbGxiYWNrKGFycmF5W21pZF0pIDwgdmFsdWUpCiAgICAgICAgICA/IGxvdyA9IG1pZCArIDEKICAgICAgICAgIDogaGlnaCA9IG1pZDsKICAgICAgfQogICAgICByZXR1cm4gbG93OwogICAgfQoKICAgIC8qKgogICAgICogQ29tcHV0ZXMgdGhlIHVuaW9uIG9mIHRoZSBwYXNzZWQtaW4gYXJyYXlzIHVzaW5nIHN0cmljdCBlcXVhbGl0eSBmb3IKICAgICAqIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXkxLCBhcnJheTIsIC4uLl0gQXJyYXlzIHRvIHByb2Nlc3MuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIHRoYXQgYXJlCiAgICAgKiAgcHJlc2VudCBpbiBvbmUgb3IgbW9yZSBvZiB0aGUgYXJyYXlzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnVuaW9uKFsxLCAyLCAzXSwgWzEwMSwgMiwgMSwgMTBdLCBbMiwgMV0pOwogICAgICogLy8gPT4gWzEsIDIsIDMsIDEwMSwgMTBdCiAgICAgKi8KICAgIGZ1bmN0aW9uIHVuaW9uKGFycmF5KSB7CiAgICAgIGlmICghaXNBcnJheShhcnJheSkpIHsKICAgICAgICBhcmd1bWVudHNbMF0gPSBhcnJheSA/IG5hdGl2ZVNsaWNlLmNhbGwoYXJyYXkpIDogYXJyYXlSZWY7CiAgICAgIH0KICAgICAgcmV0dXJuIHVuaXEoY29uY2F0LmFwcGx5KGFycmF5UmVmLCBhcmd1bWVudHMpKTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtdmFsdWUtZnJlZSB2ZXJzaW9uIG9mIHRoZSBgYXJyYXlgIHVzaW5nIHN0cmljdCBlcXVhbGl0eQogICAgICogZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLiBJZiB0aGUgYGFycmF5YCBpcyBhbHJlYWR5IHNvcnRlZCwgcGFzc2luZyBgdHJ1ZWAKICAgICAqIGZvciBgaXNTb3J0ZWRgIHdpbGwgcnVuIGEgZmFzdGVyIGFsZ29yaXRobS4gSWYgYGNhbGxiYWNrYCBpcyBwYXNzZWQsIGVhY2gKICAgICAqIGVsZW1lbnQgb2YgYGFycmF5YCBpcyBwYXNzZWQgdGhyb3VnaCB0aGUgYGNhbGxiYWNrYCBiZWZvcmUgdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4KICAgICAqIFRoZSBgY2FsbGJhY2tgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czsgKHZhbHVlLCBpbmRleCwgYXJyYXkpLgogICAgICoKICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLnBsdWNrIiBzdHlsZQogICAgICogY2FsbGJhY2sgd2lsbCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LgogICAgICoKICAgICAqIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgZm9yIGBjYWxsYmFja2AsIHRoZSBjcmVhdGVkICJfLndoZXJlIiBzdHlsZSBjYWxsYmFjawogICAgICogd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuIG9iamVjdCwKICAgICAqIGVsc2UgYGZhbHNlYC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGFsaWFzIHVuaXF1ZQogICAgICogQGNhdGVnb3J5IEFycmF5cwogICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuCiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpc1NvcnRlZD1mYWxzZV0gQSBmbGFnIHRvIGluZGljYXRlIHRoYXQgdGhlIGBhcnJheWAgaXMgYWxyZWFkeSBzb3J0ZWQuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxTdHJpbmd9IFtjYWxsYmFjaz1pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGNhbGxlZCBwZXIKICAgICAqICBpdGVyYXRpb24uIElmIGEgcHJvcGVydHkgbmFtZSBvciBvYmplY3QgaXMgcGFzc2VkLCBpdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlCiAgICAgKiAgYSAiXy5wbHVjayIgb3IgIl8ud2hlcmUiIHN0eWxlIGNhbGxiYWNrLCByZXNwZWN0aXZlbHkuCiAgICAgKiBAcGFyYW0ge01peGVkfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBjYWxsYmFja2AuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBkdXBsaWNhdGUtdmFsdWUtZnJlZSBhcnJheS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy51bmlxKFsxLCAyLCAxLCAzLCAxXSk7CiAgICAgKiAvLyA9PiBbMSwgMiwgM10KICAgICAqCiAgICAgKiBfLnVuaXEoWzEsIDEsIDIsIDIsIDNdLCB0cnVlKTsKICAgICAqIC8vID0+IFsxLCAyLCAzXQogICAgICoKICAgICAqIF8udW5pcShbJ0EnLCAnYicsICdDJywgJ2EnLCAnQicsICdjJ10sIGZ1bmN0aW9uKGxldHRlcikgeyByZXR1cm4gbGV0dGVyLnRvTG93ZXJDYXNlKCk7IH0pOwogICAgICogLy8gPT4gWydBJywgJ2InLCAnQyddCiAgICAgKgogICAgICogXy51bmlxKFsxLCAyLjUsIDMsIDEuNSwgMiwgMy41XSwgZnVuY3Rpb24obnVtKSB7IHJldHVybiB0aGlzLmZsb29yKG51bSk7IH0sIE1hdGgpOwogICAgICogLy8gPT4gWzEsIDIuNSwgM10KICAgICAqCiAgICAgKiAvLyB1c2luZyAiXy5wbHVjayIgY2FsbGJhY2sgc2hvcnRoYW5kCiAgICAgKiBfLnVuaXEoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpOwogICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dCiAgICAgKi8KICAgIHZhciB1bmlxID0gb3ZlcmxvYWRXcmFwcGVyKGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgY2FsbGJhY2spIHsKICAgICAgdmFyIGluZGV4ID0gLTEsCiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLAogICAgICAgICAgcmVzdWx0ID0gW107CgogICAgICB2YXIgaXNMYXJnZSA9ICFpc1NvcnRlZCAmJiBsZW5ndGggPj0gbGFyZ2VBcnJheVNpemUgJiYgaW5kZXhPZiA9PT0gYmFzaWNJbmRleE9mLAogICAgICAgICAgc2VlbiA9IChjYWxsYmFjayB8fCBpc0xhcmdlKSA/IGdldEFycmF5KCkgOiByZXN1bHQ7CgogICAgICBpZiAoaXNMYXJnZSkgewogICAgICAgIHZhciBjYWNoZSA9IGNyZWF0ZUNhY2hlKHNlZW4pOwogICAgICAgIGlmIChjYWNoZSkgewogICAgICAgICAgaW5kZXhPZiA9IGNhY2hlSW5kZXhPZjsKICAgICAgICAgIHNlZW4gPSBjYWNoZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaXNMYXJnZSA9IGZhbHNlOwogICAgICAgICAgc2VlbiA9IGNhbGxiYWNrID8gc2VlbiA6IChyZWxlYXNlQXJyYXkoc2VlbiksIHJlc3VsdCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLAogICAgICAgICAgICBjb21wdXRlZCA9IGNhbGxiYWNrID8gY2FsbGJhY2sodmFsdWUsIGluZGV4LCBhcnJheSkgOiB2YWx1ZTsKCiAgICAgICAgaWYgKGlzU29ydGVkCiAgICAgICAgICAgICAgPyAhaW5kZXggfHwgc2VlbltzZWVuLmxlbmd0aCAtIDFdICE9PSBjb21wdXRlZAogICAgICAgICAgICAgIDogaW5kZXhPZihzZWVuLCBjb21wdXRlZCkgPCAwCiAgICAgICAgICAgICkgewogICAgICAgICAgaWYgKGNhbGxiYWNrIHx8IGlzTGFyZ2UpIHsKICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTsKICAgICAgICAgIH0KICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGlzTGFyZ2UpIHsKICAgICAgICByZWxlYXNlQXJyYXkoc2Vlbi5hcnJheSk7CiAgICAgICAgcmVsZWFzZU9iamVjdChzZWVuKTsKICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykgewogICAgICAgIHJlbGVhc2VBcnJheShzZWVuKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfSk7CgogICAgLyoqCiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy56aXBgLCB0aGlzIG1ldGhvZCBzcGxpdHMgZ3JvdXBzIG9mIGVsZW1lbnRzIGludG8gYXJyYXlzCiAgICAgKiBjb21wb3NlZCBvZiBlbGVtZW50cyBmcm9tIGVhY2ggZ3JvdXAgYXQgdGhlaXIgY29ycmVzcG9uZGluZyBpbmRleGVzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiB0aGUgY29tcG9zZWQgYXJyYXlzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnVuemlwKFtbJ21vZScsIDMwLCB0cnVlXSwgWydsYXJyeScsIDQwLCBmYWxzZV1dKTsKICAgICAqIC8vID0+IFtbJ21vZScsICdsYXJyeSddLCBbMzAsIDQwXSwgW3RydWUsIGZhbHNlXV07CiAgICAgKi8KICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPyBtYXgocGx1Y2soYXJyYXksICdsZW5ndGgnKSkgOiAwLAogICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoIDwgMCA/IDAgOiBsZW5ndGgpOwoKICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICByZXN1bHRbaW5kZXhdID0gcGx1Y2soYXJyYXksIGluZGV4KTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBvY2N1cnJlbmNlcyBvZiB0aGUgcGFzc2VkIHZhbHVlcyByZW1vdmVkIHVzaW5nCiAgICAgKiBzdHJpY3QgZXF1YWxpdHkgZm9yIGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsdGVyLgogICAgICogQHBhcmFtIHtNaXhlZH0gW3ZhbHVlMSwgdmFsdWUyLCAuLi5dIFZhbHVlcyB0byByZW1vdmUuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgZmlsdGVyZWQgYXJyYXkuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8ud2l0aG91dChbMSwgMiwgMSwgMCwgMywgMSwgNF0sIDAsIDEpOwogICAgICogLy8gPT4gWzIsIDMsIDRdCiAgICAgKi8KICAgIGZ1bmN0aW9uIHdpdGhvdXQoYXJyYXkpIHsKICAgICAgcmV0dXJuIGRpZmZlcmVuY2UoYXJyYXksIG5hdGl2ZVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBHcm91cHMgdGhlIGVsZW1lbnRzIG9mIGVhY2ggYXJyYXkgYXQgdGhlaXIgY29ycmVzcG9uZGluZyBpbmRleGVzLiBVc2VmdWwgZm9yCiAgICAgKiBzZXBhcmF0ZSBkYXRhIHNvdXJjZXMgdGhhdCBhcmUgY29vcmRpbmF0ZWQgdGhyb3VnaCBtYXRjaGluZyBhcnJheSBpbmRleGVzLgogICAgICogRm9yIGEgbWF0cml4IG9mIG5lc3RlZCBhcnJheXMsIGBfLnppcC5hcHBseSguLi4pYCBjYW4gdHJhbnNwb3NlIHRoZSBtYXRyaXgKICAgICAqIGluIGEgc2ltaWxhciBmYXNoaW9uLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXkxLCBhcnJheTIsIC4uLl0gQXJyYXlzIHRvIHByb2Nlc3MuCiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy56aXAoWydtb2UnLCAnbGFycnknXSwgWzMwLCA0MF0sIFt0cnVlLCBmYWxzZV0pOwogICAgICogLy8gPT4gW1snbW9lJywgMzAsIHRydWVdLCBbJ2xhcnJ5JywgNDAsIGZhbHNlXV0KICAgICAqLwogICAgZnVuY3Rpb24gemlwKGFycmF5KSB7CiAgICAgIHJldHVybiBhcnJheSA/IHVuemlwKGFyZ3VtZW50cykgOiBbXTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIGZyb20gYXJyYXlzIG9mIGBrZXlzYCBhbmQgYHZhbHVlc2AuIFBhc3MgZWl0aGVyCiAgICAgKiBhIHNpbmdsZSB0d28gZGltZW5zaW9uYWwgYXJyYXksIGkuZS4gYFtba2V5MSwgdmFsdWUxXSwgW2tleTIsIHZhbHVlMl1dYCwgb3IKICAgICAqIHR3byBhcnJheXMsIG9uZSBvZiBga2V5c2AgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIGB2YWx1ZXNgLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAYWxpYXMgb2JqZWN0CiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlzCiAgICAgKiBAcGFyYW0ge0FycmF5fSBrZXlzIFRoZSBhcnJheSBvZiBrZXlzLgogICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIGFycmF5IG9mIHZhbHVlcy4KICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBnaXZlbiBrZXlzIGFuZAogICAgICogIGNvcnJlc3BvbmRpbmcgdmFsdWVzLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnppcE9iamVjdChbJ21vZScsICdsYXJyeSddLCBbMzAsIDQwXSk7CiAgICAgKiAvLyA9PiB7ICdtb2UnOiAzMCwgJ2xhcnJ5JzogNDAgfQogICAgICovCiAgICBmdW5jdGlvbiB6aXBPYmplY3Qoa2V5cywgdmFsdWVzKSB7CiAgICAgIHZhciBpbmRleCA9IC0xLAogICAgICAgICAgbGVuZ3RoID0ga2V5cyA/IGtleXMubGVuZ3RoIDogMCwKICAgICAgICAgIHJlc3VsdCA9IHt9OwoKICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHsKICAgICAgICB2YXIga2V5ID0ga2V5c1tpbmRleF07CiAgICAgICAgaWYgKHZhbHVlcykgewogICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZXNbaW5kZXhdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHRba2V5WzBdXSA9IGtleVsxXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvKioKICAgICAqIElmIGBuYCBpcyBncmVhdGVyIHRoYW4gYDBgLCBhIGZ1bmN0aW9uIGlzIGNyZWF0ZWQgdGhhdCBpcyByZXN0cmljdGVkIHRvCiAgICAgKiBleGVjdXRpbmcgYGZ1bmNgLCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkCiAgICAgKiBmdW5jdGlvbiwgb25seSBhZnRlciBpdCBpcyBjYWxsZWQgYG5gIHRpbWVzLiBJZiBgbmAgaXMgbGVzcyB0aGFuIGAxYCwKICAgICAqIGBmdW5jYCBpcyBleGVjdXRlZCBpbW1lZGlhdGVseSwgd2l0aG91dCBhIGB0aGlzYCBiaW5kaW5nIG9yIGFkZGl0aW9uYWwKICAgICAqIGFyZ3VtZW50cywgYW5kIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7TnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGJlZm9yZQogICAgICogaXQgaXMgZXhlY3V0ZWQuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciByZW5kZXJOb3RlcyA9IF8uYWZ0ZXIobm90ZXMubGVuZ3RoLCByZW5kZXIpOwogICAgICogXy5mb3JFYWNoKG5vdGVzLCBmdW5jdGlvbihub3RlKSB7CiAgICAgKiAgIG5vdGUuYXN5bmNTYXZlKHsgJ3N1Y2Nlc3MnOiByZW5kZXJOb3RlcyB9KTsKICAgICAqIH0pOwogICAgICogLy8gYHJlbmRlck5vdGVzYCBpcyBydW4gb25jZSwgYWZ0ZXIgYWxsIG5vdGVzIGhhdmUgc2F2ZWQKICAgICAqLwogICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykgewogICAgICBpZiAobiA8IDEpIHsKICAgICAgICByZXR1cm4gZnVuYygpOwogICAgICB9CiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoLS1uIDwgMSkgewogICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYAogICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHByZXBlbmRzIGFueSBhZGRpdGlvbmFsIGBiaW5kYCBhcmd1bWVudHMgdG8gdGhvc2UKICAgICAqIHBhc3NlZCB0byB0aGUgYm91bmQgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuCiAgICAgKiBAcGFyYW0ge01peGVkfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFthcmcxLCBhcmcyLCAuLi5dIEFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgZnVuYyA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7CiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMubmFtZTsKICAgICAqIH07CiAgICAgKgogICAgICogZnVuYyA9IF8uYmluZChmdW5jLCB7ICduYW1lJzogJ21vZScgfSwgJ2hpJyk7CiAgICAgKiBmdW5jKCk7CiAgICAgKiAvLyA9PiAnaGkgbW9lJwogICAgICovCiAgICBmdW5jdGlvbiBiaW5kKGZ1bmMsIHRoaXNBcmcpIHsKICAgICAgLy8gdXNlIGBGdW5jdGlvbiNiaW5kYCBpZiBpdCBleGlzdHMgYW5kIGlzIGZhc3QKICAgICAgLy8gKGluIFY4IGBGdW5jdGlvbiNiaW5kYCBpcyBzbG93ZXIgZXhjZXB0IHdoZW4gcGFydGlhbGx5IGFwcGxpZWQpCiAgICAgIHJldHVybiBzdXBwb3J0LmZhc3RCaW5kIHx8IChuYXRpdmVCaW5kICYmIGFyZ3VtZW50cy5sZW5ndGggPiAyKQogICAgICAgID8gbmF0aXZlQmluZC5jYWxsLmFwcGx5KG5hdGl2ZUJpbmQsIGFyZ3VtZW50cykKICAgICAgICA6IGNyZWF0ZUJvdW5kKGZ1bmMsIHRoaXNBcmcsIG5hdGl2ZVNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBCaW5kcyBtZXRob2RzIG9uIGBvYmplY3RgIHRvIGBvYmplY3RgLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmcgbWV0aG9kLgogICAgICogTWV0aG9kIG5hbWVzIG1heSBiZSBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHMgb3IgYXMgYXJyYXlzIG9mIG1ldGhvZAogICAgICogbmFtZXMuIElmIG5vIG1ldGhvZCBuYW1lcyBhcmUgcHJvdmlkZWQsIGFsbCB0aGUgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBgb2JqZWN0YAogICAgICogd2lsbCBiZSBib3VuZC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbbWV0aG9kTmFtZTEsIG1ldGhvZE5hbWUyLCAuLi5dIE1ldGhvZCBuYW1lcyBvbiB0aGUgb2JqZWN0IHRvIGJpbmQuCiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgdmlldyA9IHsKICAgICAqICAnbGFiZWwnOiAnZG9jcycsCiAgICAgKiAgJ29uQ2xpY2snOiBmdW5jdGlvbigpIHsgYWxlcnQoJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpOyB9CiAgICAgKiB9OwogICAgICoKICAgICAqIF8uYmluZEFsbCh2aWV3KTsKICAgICAqIGpRdWVyeSgnI2RvY3MnKS5vbignY2xpY2snLCB2aWV3Lm9uQ2xpY2spOwogICAgICogLy8gPT4gYWxlcnRzICdjbGlja2VkIGRvY3MnLCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZAogICAgICovCiAgICBmdW5jdGlvbiBiaW5kQWxsKG9iamVjdCkgewogICAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGNvbmNhdC5hcHBseShhcnJheVJlZiwgbmF0aXZlU2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSA6IGZ1bmN0aW9ucyhvYmplY3QpLAogICAgICAgICAgaW5kZXggPSAtMSwKICAgICAgICAgIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aDsKCiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7CiAgICAgICAgdmFyIGtleSA9IGZ1bmNzW2luZGV4XTsKICAgICAgICBvYmplY3Rba2V5XSA9IGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCk7CiAgICAgIH0KICAgICAgcmV0dXJuIG9iamVjdDsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAKICAgICAqIGFuZCBwcmVwZW5kcyBhbnkgYWRkaXRpb25hbCBgYmluZEtleWAgYXJndW1lbnRzIHRvIHRob3NlIHBhc3NlZCB0byB0aGUgYm91bmQKICAgICAqIGZ1bmN0aW9uLiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvCiAgICAgKiByZWZlcmVuY2UgbWV0aG9kcyB0aGF0IHdpbGwgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4KICAgICAqIFNlZSBodHRwOi8vbWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRoZSBtZXRob2QgYmVsb25ncyB0by4KICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kLgogICAgICogQHBhcmFtIHtNaXhlZH0gW2FyZzEsIGFyZzIsIC4uLl0gQXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBvYmplY3QgPSB7CiAgICAgKiAgICduYW1lJzogJ21vZScsCiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nKSB7CiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy5uYW1lOwogICAgICogICB9CiAgICAgKiB9OwogICAgICoKICAgICAqIHZhciBmdW5jID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7CiAgICAgKiBmdW5jKCk7CiAgICAgKiAvLyA9PiAnaGkgbW9lJwogICAgICoKICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7CiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcsICcgKyB0aGlzLm5hbWUgKyAnISc7CiAgICAgKiB9OwogICAgICoKICAgICAqIGZ1bmMoKTsKICAgICAqIC8vID0+ICdoaSwgbW9lIScKICAgICAqLwogICAgZnVuY3Rpb24gYmluZEtleShvYmplY3QsIGtleSkgewogICAgICByZXR1cm4gY3JlYXRlQm91bmQob2JqZWN0LCBrZXksIG5hdGl2ZVNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSwgaW5kaWNhdG9yT2JqZWN0KTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiB0aGUgcGFzc2VkIGZ1bmN0aW9ucywKICAgICAqIHdoZXJlIGVhY2ggZnVuY3Rpb24gY29uc3VtZXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLgogICAgICogRm9yIGV4YW1wbGUsIGNvbXBvc2luZyB0aGUgZnVuY3Rpb25zIGBmKClgLCBgZygpYCwgYW5kIGBoKClgIHByb2R1Y2VzIGBmKGcoaCgpKSlgLgogICAgICogRWFjaCBmdW5jdGlvbiBpcyBleGVjdXRlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY29tcG9zZWQgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtmdW5jMSwgZnVuYzIsIC4uLl0gRnVuY3Rpb25zIHRvIGNvbXBvc2UuCiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NlZCBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGdyZWV0ID0gZnVuY3Rpb24obmFtZSkgeyByZXR1cm4gJ2hpICcgKyBuYW1lOyB9OwogICAgICogdmFyIGV4Y2xhaW0gPSBmdW5jdGlvbihzdGF0ZW1lbnQpIHsgcmV0dXJuIHN0YXRlbWVudCArICchJzsgfTsKICAgICAqIHZhciB3ZWxjb21lID0gXy5jb21wb3NlKGV4Y2xhaW0sIGdyZWV0KTsKICAgICAqIHdlbGNvbWUoJ21vZScpOwogICAgICogLy8gPT4gJ2hpIG1vZSEnCiAgICAgKi8KICAgIGZ1bmN0aW9uIGNvbXBvc2UoKSB7CiAgICAgIHZhciBmdW5jcyA9IGFyZ3VtZW50czsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLAogICAgICAgICAgICBsZW5ndGggPSBmdW5jcy5sZW5ndGg7CgogICAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgICAgYXJncyA9IFtmdW5jc1tsZW5ndGhdLmFwcGx5KHRoaXMsIGFyZ3MpXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGFyZ3NbMF07CiAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBQcm9kdWNlcyBhIGNhbGxiYWNrIGJvdW5kIHRvIGFuIG9wdGlvbmFsIGB0aGlzQXJnYC4gSWYgYGZ1bmNgIGlzIGEgcHJvcGVydHkKICAgICAqIG5hbWUsIHRoZSBjcmVhdGVkIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBnaXZlbiBlbGVtZW50LgogICAgICogSWYgYGZ1bmNgIGlzIGFuIG9iamVjdCwgdGhlIGNyZWF0ZWQgY2FsbGJhY2sgd2lsbCByZXR1cm4gYHRydWVgIGZvciBlbGVtZW50cwogICAgICogdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50IG9iamVjdCBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgd2lsbCByZXR1cm4gYGZhbHNlYC4KICAgICAqCiAgICAgKiBOb3RlOiBBbGwgTG8tRGFzaCBtZXRob2RzLCB0aGF0IGFjY2VwdCBhIGBjYWxsYmFja2AgYXJndW1lbnQsIHVzZSBgXy5jcmVhdGVDYWxsYmFja2AuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7TWl4ZWR9IFtmdW5jPWlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLgogICAgICogQHBhcmFtIHtNaXhlZH0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBjYWxsYmFjay4KICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYXJnQ291bnQ9M10gVGhlIG51bWJlciBvZiBhcmd1bWVudHMgdGhlIGNhbGxiYWNrIGFjY2VwdHMuCiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBjYWxsYmFjayBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIHN0b29nZXMgPSBbCiAgICAgKiAgIHsgJ25hbWUnOiAnbW9lJywgJ2FnZSc6IDQwIH0sCiAgICAgKiAgIHsgJ25hbWUnOiAnbGFycnknLCAnYWdlJzogNTAgfQogICAgICogXTsKICAgICAqCiAgICAgKiAvLyB3cmFwIHRvIGNyZWF0ZSBjdXN0b20gY2FsbGJhY2sgc2hvcnRoYW5kcwogICAgICogXy5jcmVhdGVDYWxsYmFjayA9IF8ud3JhcChfLmNyZWF0ZUNhbGxiYWNrLCBmdW5jdGlvbihmdW5jLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICogICB2YXIgbWF0Y2ggPSAvXiguKz8pX18oW2dsXXQpKC4rKSQvLmV4ZWMoY2FsbGJhY2spOwogICAgICogICByZXR1cm4gIW1hdGNoID8gZnVuYyhjYWxsYmFjaywgdGhpc0FyZykgOiBmdW5jdGlvbihvYmplY3QpIHsKICAgICAqICAgICByZXR1cm4gbWF0Y2hbMl0gPT0gJ2d0JyA/IG9iamVjdFttYXRjaFsxXV0gPiBtYXRjaFszXSA6IG9iamVjdFttYXRjaFsxXV0gPCBtYXRjaFszXTsKICAgICAqICAgfTsKICAgICAqIH0pOwogICAgICoKICAgICAqIF8uZmlsdGVyKHN0b29nZXMsICdhZ2VfX2d0NDUnKTsKICAgICAqIC8vID0+IFt7ICduYW1lJzogJ2xhcnJ5JywgJ2FnZSc6IDUwIH1dCiAgICAgKgogICAgICogLy8gY3JlYXRlIG1peGlucyB3aXRoIHN1cHBvcnQgZm9yICJfLnBsdWNrIiBhbmQgIl8ud2hlcmUiIGNhbGxiYWNrIHNob3J0aGFuZHMKICAgICAqIF8ubWl4aW4oewogICAgICogICAndG9Mb29rdXAnOiBmdW5jdGlvbihjb2xsZWN0aW9uLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICogICAgIGNhbGxiYWNrID0gXy5jcmVhdGVDYWxsYmFjayhjYWxsYmFjaywgdGhpc0FyZyk7CiAgICAgKiAgICAgcmV0dXJuIF8ucmVkdWNlKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgKiAgICAgICByZXR1cm4gKHJlc3VsdFtjYWxsYmFjayh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pXSA9IHZhbHVlLCByZXN1bHQpOwogICAgICogICAgIH0sIHt9KTsKICAgICAqICAgfQogICAgICogfSk7CiAgICAgKgogICAgICogXy50b0xvb2t1cChzdG9vZ2VzLCAnbmFtZScpOwogICAgICogLy8gPT4geyAnbW9lJzogeyAnbmFtZSc6ICdtb2UnLCAnYWdlJzogNDAgfSwgJ2xhcnJ5JzogeyAnbmFtZSc6ICdsYXJyeScsICdhZ2UnOiA1MCB9IH0KICAgICAqLwogICAgZnVuY3Rpb24gY3JlYXRlQ2FsbGJhY2soZnVuYywgdGhpc0FyZywgYXJnQ291bnQpIHsKICAgICAgaWYgKGZ1bmMgPT0gbnVsbCkgewogICAgICAgIHJldHVybiBpZGVudGl0eTsKICAgICAgfQogICAgICB2YXIgdHlwZSA9IHR5cGVvZiBmdW5jOwogICAgICBpZiAodHlwZSAhPSAnZnVuY3Rpb24nKSB7CiAgICAgICAgaWYgKHR5cGUgIT0gJ29iamVjdCcpIHsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHsKICAgICAgICAgICAgcmV0dXJuIG9iamVjdFtmdW5jXTsKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIHZhciBwcm9wcyA9IGtleXMoZnVuYyk7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aCwKICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTsKICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgICAgICBpZiAoIShyZXN1bHQgPSBpc0VxdWFsKG9iamVjdFtwcm9wc1tsZW5ndGhdXSwgZnVuY1twcm9wc1tsZW5ndGhdXSwgaW5kaWNhdG9yT2JqZWN0KSkpIHsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9OwogICAgICB9CiAgICAgIGlmICh0eXBlb2YgdGhpc0FyZyA9PSAndW5kZWZpbmVkJyB8fCAocmVUaGlzICYmICFyZVRoaXMudGVzdChmblRvU3RyaW5nLmNhbGwoZnVuYykpKSkgewogICAgICAgIHJldHVybiBmdW5jOwogICAgICB9CiAgICAgIGlmIChhcmdDb3VudCA9PT0gMSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSk7CiAgICAgICAgfTsKICAgICAgfQogICAgICBpZiAoYXJnQ291bnQgPT09IDIpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhLCBiKTsKICAgICAgICB9OwogICAgICB9CiAgICAgIGlmIChhcmdDb3VudCA9PT0gNCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbihhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7CiAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pOwogICAgICAgIH07CiAgICAgIH0KICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikgewogICAgICAgIHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgZGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiBgZnVuY2AgdW50aWwgYWZ0ZXIKICAgICAqIGB3YWl0YCBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXQgd2FzIGludm9rZWQuIFBhc3MKICAgICAqIGFuIGBvcHRpb25zYCBvYmplY3QgdG8gaW5kaWNhdGUgdGhhdCBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcKICAgICAqIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgZGVib3VuY2VkCiAgICAgKiBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBjYWxsLgogICAgICoKICAgICAqIE5vdGU6IElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCB3aWxsIGJlIGNhbGxlZAogICAgICogb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBpcwogICAgICogaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS4KICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LgogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgVGhlIG9wdGlvbnMgb2JqZWN0LgogICAgICogIFtsZWFkaW5nPWZhbHNlXSBBIGJvb2xlYW4gdG8gc3BlY2lmeSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC4KICAgICAqICBbbWF4V2FpdF0gVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGNhbGxlZC4KICAgICAqICBbdHJhaWxpbmc9dHJ1ZV0gQSBib29sZWFuIHRvIHNwZWNpZnkgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgbGF6eUxheW91dCA9IF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAzMDApOwogICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIGxhenlMYXlvdXQpOwogICAgICoKICAgICAqIGpRdWVyeSgnI3Bvc3Rib3gnKS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAyMDAsIHsKICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLAogICAgICogICAndHJhaWxpbmcnOiBmYWxzZQogICAgICogfSk7CiAgICAgKi8KICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHsKICAgICAgdmFyIGFyZ3MsCiAgICAgICAgICByZXN1bHQsCiAgICAgICAgICB0aGlzQXJnLAogICAgICAgICAgY2FsbENvdW50ID0gMCwKICAgICAgICAgIGxhc3RDYWxsZWQgPSAwLAogICAgICAgICAgbWF4V2FpdCA9IGZhbHNlLAogICAgICAgICAgbWF4VGltZW91dElkID0gbnVsbCwKICAgICAgICAgIHRpbWVvdXRJZCA9IG51bGwsCiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7CgogICAgICBmdW5jdGlvbiBjbGVhcigpIHsKICAgICAgICBjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTsKICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTsKICAgICAgICBjYWxsQ291bnQgPSAwOwogICAgICAgIG1heFRpbWVvdXRJZCA9IHRpbWVvdXRJZCA9IG51bGw7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGRlbGF5ZWQoKSB7CiAgICAgICAgdmFyIGlzQ2FsbGVkID0gdHJhaWxpbmcgJiYgKCFsZWFkaW5nIHx8IGNhbGxDb3VudCA+IDEpOwogICAgICAgIGNsZWFyKCk7CiAgICAgICAgaWYgKGlzQ2FsbGVkKSB7CiAgICAgICAgICBpZiAobWF4V2FpdCAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgbGFzdENhbGxlZCA9IG5ldyBEYXRlOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIG1heERlbGF5ZWQoKSB7CiAgICAgICAgY2xlYXIoKTsKICAgICAgICBpZiAodHJhaWxpbmcgfHwgKG1heFdhaXQgIT09IHdhaXQpKSB7CiAgICAgICAgICBsYXN0Q2FsbGVkID0gbmV3IERhdGU7CiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgd2FpdCA9IG5hdGl2ZU1heCgwLCB3YWl0IHx8IDApOwogICAgICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkgewogICAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZTsKICAgICAgICB0cmFpbGluZyA9IGZhbHNlOwogICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7CiAgICAgICAgbGVhZGluZyA9IG9wdGlvbnMubGVhZGluZzsKICAgICAgICBtYXhXYWl0ID0gJ21heFdhaXQnIGluIG9wdGlvbnMgJiYgbmF0aXZlTWF4KHdhaXQsIG9wdGlvbnMubWF4V2FpdCB8fCAwKTsKICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/IG9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZzsKICAgICAgfQogICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgICAgICB0aGlzQXJnID0gdGhpczsKICAgICAgICBjYWxsQ291bnQrKzsKCiAgICAgICAgLy8gYXZvaWQgaXNzdWVzIHdpdGggVGl0YW5pdW0gYW5kIGB1bmRlZmluZWRgIHRpbWVvdXQgaWRzCiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FwcGNlbGVyYXRvci90aXRhbml1bV9tb2JpbGUvYmxvYi8zXzFfMF9HQS9hbmRyb2lkL3RpdGFuaXVtL3NyYy9qYXZhL3RpL21vZHVsZXMvdGl0YW5pdW0vVGl0YW5pdW1Nb2R1bGUuamF2YSNMMTg1LUwxOTIKICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTsKCiAgICAgICAgaWYgKG1heFdhaXQgPT09IGZhbHNlKSB7CiAgICAgICAgICBpZiAobGVhZGluZyAmJiBjYWxsQ291bnQgPCAyKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZTsKICAgICAgICAgIGlmICghbWF4VGltZW91dElkICYmICFsZWFkaW5nKSB7CiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBub3c7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcmVtYWluaW5nID0gbWF4V2FpdCAtIChub3cgLSBsYXN0Q2FsbGVkKTsKICAgICAgICAgIGlmIChyZW1haW5pbmcgPD0gMCkgewogICAgICAgICAgICBjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTsKICAgICAgICAgICAgbWF4VGltZW91dElkID0gbnVsbDsKICAgICAgICAgICAgbGFzdENhbGxlZCA9IG5vdzsKICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgaWYgKCFtYXhUaW1lb3V0SWQpIHsKICAgICAgICAgICAgbWF4VGltZW91dElkID0gc2V0VGltZW91dChtYXhEZWxheWVkLCByZW1haW5pbmcpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAod2FpdCAhPT0gbWF4V2FpdCkgewogICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChkZWxheWVkLCB3YWl0KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIERlZmVycyBleGVjdXRpbmcgdGhlIGBmdW5jYCBmdW5jdGlvbiB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLgogICAgICogQWRkaXRpb25hbCBhcmd1bWVudHMgd2lsbCBiZSBwYXNzZWQgdG8gYGZ1bmNgIHdoZW4gaXQgaXMgaW52b2tlZC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuCiAgICAgKiBAcGFyYW0ge01peGVkfSBbYXJnMSwgYXJnMiwgLi4uXSBBcmd1bWVudHMgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoLgogICAgICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oKSB7IGFsZXJ0KCdkZWZlcnJlZCcpOyB9KTsKICAgICAqIC8vIHJldHVybnMgZnJvbSB0aGUgZnVuY3Rpb24gYmVmb3JlIGBhbGVydGAgaXMgY2FsbGVkCiAgICAgKi8KICAgIGZ1bmN0aW9uIGRlZmVyKGZ1bmMpIHsKICAgICAgdmFyIGFyZ3MgPSBuYXRpdmVTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIDEpOwogICAgfQogICAgLy8gdXNlIGBzZXRJbW1lZGlhdGVgIGlmIGl0J3MgYXZhaWxhYmxlIGluIE5vZGUuanMKICAgIGlmIChpc1Y4ICYmIGZyZWVNb2R1bGUgJiYgdHlwZW9mIHNldEltbWVkaWF0ZSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgIGRlZmVyID0gYmluZChzZXRJbW1lZGlhdGUsIGNvbnRleHQpOwogICAgfQoKICAgIC8qKgogICAgICogRXhlY3V0ZXMgdGhlIGBmdW5jYCBmdW5jdGlvbiBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBZGRpdGlvbmFsIGFyZ3VtZW50cwogICAgICogd2lsbCBiZSBwYXNzZWQgdG8gYGZ1bmNgIHdoZW4gaXQgaXMgaW52b2tlZC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuCiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBleGVjdXRpb24uCiAgICAgKiBAcGFyYW0ge01peGVkfSBbYXJnMSwgYXJnMiwgLi4uXSBBcmd1bWVudHMgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoLgogICAgICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBsb2cgPSBfLmJpbmQoY29uc29sZS5sb2csIGNvbnNvbGUpOwogICAgICogXy5kZWxheShsb2csIDEwMDAsICdsb2dnZWQgbGF0ZXInKTsKICAgICAqIC8vID0+ICdsb2dnZWQgbGF0ZXInIChBcHBlYXJzIGFmdGVyIG9uZSBzZWNvbmQuKQogICAgICovCiAgICBmdW5jdGlvbiBkZWxheShmdW5jLCB3YWl0KSB7CiAgICAgIHZhciBhcmdzID0gbmF0aXZlU2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwogICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTsKICAgIH0KCiAgICAvKioKICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzCiAgICAgKiBwYXNzZWQsIGl0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0CiAgICAgKiBiYXNlZCBvbiB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdAogICAgICogYXJndW1lbnQgcGFzc2VkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBjYWNoZSBrZXkuIFRoZSBgZnVuY2AKICAgICAqIGlzIGV4ZWN1dGVkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gVGhlIHJlc3VsdAogICAgICogY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gQSBmdW5jdGlvbiB1c2VkIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemluZyBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGZpYm9uYWNjaSA9IF8ubWVtb2l6ZShmdW5jdGlvbihuKSB7CiAgICAgKiAgIHJldHVybiBuIDwgMiA/IG4gOiBmaWJvbmFjY2kobiAtIDEpICsgZmlib25hY2NpKG4gLSAyKTsKICAgICAqIH0pOwogICAgICovCiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7CiAgICAgIGZ1bmN0aW9uIG1lbW9pemVkKCkgewogICAgICAgIHZhciBjYWNoZSA9IG1lbW9pemVkLmNhY2hlLAogICAgICAgICAgICBrZXkgPSBrZXlQcmVmaXggKyAocmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogYXJndW1lbnRzWzBdKTsKCiAgICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoY2FjaGUsIGtleSkKICAgICAgICAgID8gY2FjaGVba2V5XQogICAgICAgICAgOiAoY2FjaGVba2V5XSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgICAgIH0KICAgICAgbWVtb2l6ZWQuY2FjaGUgPSB7fTsKICAgICAgcmV0dXJuIG1lbW9pemVkOwogICAgfQoKICAgIC8qKgogICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBleGVjdXRlIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHMgdG8KICAgICAqIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGNhbGwuIFRoZSBgZnVuY2AgaXMgZXhlY3V0ZWQKICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25zCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTsKICAgICAqIGluaXRpYWxpemUoKTsKICAgICAqIGluaXRpYWxpemUoKTsKICAgICAqIC8vIGBpbml0aWFsaXplYCBleGVjdXRlcyBgY3JlYXRlQXBwbGljYXRpb25gIG9uY2UKICAgICAqLwogICAgZnVuY3Rpb24gb25jZShmdW5jKSB7CiAgICAgIHZhciByYW4sCiAgICAgICAgICByZXN1bHQ7CgogICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKHJhbikgewogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgICAgcmFuID0gdHJ1ZTsKICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgogICAgICAgIC8vIGNsZWFyIHRoZSBgZnVuY2AgdmFyaWFibGUgc28gdGhlIGZ1bmN0aW9uIG1heSBiZSBnYXJiYWdlIGNvbGxlY3RlZAogICAgICAgIGZ1bmMgPSBudWxsOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGludm9rZXMgYGZ1bmNgIHdpdGggYW55IGFkZGl0aW9uYWwKICAgICAqIGBwYXJ0aWFsYCBhcmd1bWVudHMgcHJlcGVuZGVkIHRvIHRob3NlIHBhc3NlZCB0byB0aGUgbmV3IGZ1bmN0aW9uLiBUaGlzCiAgICAgKiBtZXRob2QgaXMgc2ltaWxhciB0byBgXy5iaW5kYCwgZXhjZXB0IGl0IGRvZXMgKipub3QqKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uCiAgICAgKiBAcGFyYW0ge01peGVkfSBbYXJnMSwgYXJnMiwgLi4uXSBBcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuCiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIG5hbWUpIHsgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTsgfTsKICAgICAqIHZhciBoaSA9IF8ucGFydGlhbChncmVldCwgJ2hpJyk7CiAgICAgKiBoaSgnbW9lJyk7CiAgICAgKiAvLyA9PiAnaGkgbW9lJwogICAgICovCiAgICBmdW5jdGlvbiBwYXJ0aWFsKGZ1bmMpIHsKICAgICAgcmV0dXJuIGNyZWF0ZUJvdW5kKGZ1bmMsIG5hdGl2ZVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGlzIG1ldGhvZCBpcyBzaW1pbGFyIHRvIGBfLnBhcnRpYWxgLCBleGNlcHQgdGhhdCBgcGFydGlhbGAgYXJndW1lbnRzIGFyZQogICAgICogYXBwZW5kZWQgdG8gdGhvc2UgcGFzc2VkIHRvIHRoZSBuZXcgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uCiAgICAgKiBAcGFyYW0ge01peGVkfSBbYXJnMSwgYXJnMiwgLi4uXSBBcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuCiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGRlZmF1bHRzRGVlcCA9IF8ucGFydGlhbFJpZ2h0KF8ubWVyZ2UsIF8uZGVmYXVsdHMpOwogICAgICoKICAgICAqIHZhciBvcHRpb25zID0gewogICAgICogICAndmFyaWFibGUnOiAnZGF0YScsCiAgICAgKiAgICdpbXBvcnRzJzogeyAnanEnOiAkIH0KICAgICAqIH07CiAgICAgKgogICAgICogZGVmYXVsdHNEZWVwKG9wdGlvbnMsIF8udGVtcGxhdGVTZXR0aW5ncyk7CiAgICAgKgogICAgICogb3B0aW9ucy52YXJpYWJsZQogICAgICogLy8gPT4gJ2RhdGEnCiAgICAgKgogICAgICogb3B0aW9ucy5pbXBvcnRzCiAgICAgKiAvLyA9PiB7ICdfJzogXywgJ2pxJzogJCB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIHBhcnRpYWxSaWdodChmdW5jKSB7CiAgICAgIHJldHVybiBjcmVhdGVCb3VuZChmdW5jLCBuYXRpdmVTbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIG51bGwsIGluZGljYXRvck9iamVjdCk7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBleGVjdXRlZCwgd2lsbCBvbmx5IGNhbGwgdGhlIGBmdW5jYCBmdW5jdGlvbgogICAgICogYXQgbW9zdCBvbmNlIHBlciBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBQYXNzIGFuIGBvcHRpb25zYCBvYmplY3QgdG8KICAgICAqIGluZGljYXRlIHRoYXQgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlCiAgICAgKiBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsCiAgICAgKiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgY2FsbC4KICAgICAqCiAgICAgKiBOb3RlOiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2Agd2lsbCBiZSBjYWxsZWQKICAgICAqIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gaXMKICAgICAqIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IEZ1bmN0aW9ucwogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuCiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBleGVjdXRpb25zIHRvLgogICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgVGhlIG9wdGlvbnMgb2JqZWN0LgogICAgICogIFtsZWFkaW5nPXRydWVdIEEgYm9vbGVhbiB0byBzcGVjaWZ5IGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LgogICAgICogIFt0cmFpbGluZz10cnVlXSBBIGJvb2xlYW4gdG8gc3BlY2lmeSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuCiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApOwogICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIHRocm90dGxlZCk7CiAgICAgKgogICAgICogalF1ZXJ5KCcuaW50ZXJhY3RpdmUnKS5vbignY2xpY2snLCBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgewogICAgICogICAndHJhaWxpbmcnOiBmYWxzZQogICAgICogfSkpOwogICAgICovCiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7CiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSwKICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTsKCiAgICAgIGlmIChvcHRpb25zID09PSBmYWxzZSkgewogICAgICAgIGxlYWRpbmcgPSBmYWxzZTsKICAgICAgfSBlbHNlIGlmIChpc09iamVjdChvcHRpb25zKSkgewogICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/IG9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7CiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7CiAgICAgIH0KICAgICAgb3B0aW9ucyA9IGdldE9iamVjdCgpOwogICAgICBvcHRpb25zLmxlYWRpbmcgPSBsZWFkaW5nOwogICAgICBvcHRpb25zLm1heFdhaXQgPSB3YWl0OwogICAgICBvcHRpb25zLnRyYWlsaW5nID0gdHJhaWxpbmc7CgogICAgICB2YXIgcmVzdWx0ID0gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucyk7CiAgICAgIHJlbGVhc2VPYmplY3Qob3B0aW9ucyk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwYXNzZXMgYHZhbHVlYCB0byB0aGUgYHdyYXBwZXJgIGZ1bmN0aW9uIGFzIGl0cwogICAgICogZmlyc3QgYXJndW1lbnQuIEFkZGl0aW9uYWwgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgZnVuY3Rpb24gYXJlIGFwcGVuZGVkCiAgICAgKiB0byB0aG9zZSBwYXNzZWQgdG8gdGhlIGB3cmFwcGVyYCBmdW5jdGlvbi4gVGhlIGB3cmFwcGVyYCBpcyBleGVjdXRlZCB3aXRoCiAgICAgKiB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvbnMKICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgd3JhcHBlciBmdW5jdGlvbi4KICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgaGVsbG8gPSBmdW5jdGlvbihuYW1lKSB7IHJldHVybiAnaGVsbG8gJyArIG5hbWU7IH07CiAgICAgKiBoZWxsbyA9IF8ud3JhcChoZWxsbywgZnVuY3Rpb24oZnVuYykgewogICAgICogICByZXR1cm4gJ2JlZm9yZSwgJyArIGZ1bmMoJ21vZScpICsgJywgYWZ0ZXInOwogICAgICogfSk7CiAgICAgKiBoZWxsbygpOwogICAgICogLy8gPT4gJ2JlZm9yZSwgaGVsbG8gbW9lLCBhZnRlcicKICAgICAqLwogICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikgewogICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGFyZ3MgPSBbdmFsdWVdOwogICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTsKICAgICAgICByZXR1cm4gd3JhcHBlci5hcHBseSh0aGlzLCBhcmdzKTsKICAgICAgfTsKICAgIH0KCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvKioKICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIGAmYCwgYDxgLCBgPmAsIGAiYCwgYW5kIGAnYCBpbiBgc3RyaW5nYCB0byB0aGVpcgogICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gZXNjYXBlLgogICAgICogQHJldHVybnMge1N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8uZXNjYXBlKCdNb2UsIExhcnJ5ICYgQ3VybHknKTsKICAgICAqIC8vID0+ICdNb2UsIExhcnJ5ICZhbXA7IEN1cmx5JwogICAgICovCiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7CiAgICAgIHJldHVybiBzdHJpbmcgPT0gbnVsbCA/ICcnIDogU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKTsKICAgIH0KCiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBpdC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgQW55IHZhbHVlLgogICAgICogQHJldHVybnMge01peGVkfSBSZXR1cm5zIGB2YWx1ZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIHZhciBtb2UgPSB7ICduYW1lJzogJ21vZScgfTsKICAgICAqIG1vZSA9PT0gXy5pZGVudGl0eShtb2UpOwogICAgICogLy8gPT4gdHJ1ZQogICAgICovCiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBBZGRzIGZ1bmN0aW9ucyBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbiBhbmQgY2hhaW5hYmxlCiAgICAgKiB3cmFwcGVyLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3Qgb2YgZnVuY3Rpb24gcHJvcGVydGllcyB0byBhZGQgdG8gYGxvZGFzaGAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8ubWl4aW4oewogICAgICogICAnY2FwaXRhbGl6ZSc6IGZ1bmN0aW9uKHN0cmluZykgewogICAgICogICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTsKICAgICAqICAgfQogICAgICogfSk7CiAgICAgKgogICAgICogXy5jYXBpdGFsaXplKCdtb2UnKTsKICAgICAqIC8vID0+ICdNb2UnCiAgICAgKgogICAgICogXygnbW9lJykuY2FwaXRhbGl6ZSgpOwogICAgICogLy8gPT4gJ01vZScKICAgICAqLwogICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0KSB7CiAgICAgIGZvckVhY2goZnVuY3Rpb25zKG9iamVjdCksIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHsKICAgICAgICB2YXIgZnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXSA9IG9iamVjdFttZXRob2ROYW1lXTsKCiAgICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXywKICAgICAgICAgICAgICBhcmdzID0gW3ZhbHVlXTsKCiAgICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseShsb2Rhc2gsIGFyZ3MpOwogICAgICAgICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdmFsdWUgPT09IHJlc3VsdCkKICAgICAgICAgICAgPyB0aGlzCiAgICAgICAgICAgIDogbmV3IGxvZGFzaFdyYXBwZXIocmVzdWx0KTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFJldmVydHMgdGhlICdfJyB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG8KICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpOwogICAgICovCiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkgewogICAgICBjb250ZXh0Ll8gPSBvbGREYXNoOwogICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICAvKioKICAgICAqIENvbnZlcnRzIHRoZSBnaXZlbiBgdmFsdWVgIGludG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIGByYWRpeGAuCiAgICAgKiBJZiBgcmFkaXhgIGlzIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgdGhlCiAgICAgKiBgdmFsdWVgIGlzIGEgaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC4KICAgICAqCiAgICAgKiBOb3RlOiBUaGlzIG1ldGhvZCBhdm9pZHMgZGlmZmVyZW5jZXMgaW4gbmF0aXZlIEVTMyBhbmQgRVM1IGBwYXJzZUludGAKICAgICAqIGltcGxlbWVudGF0aW9ucy4gU2VlIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jRS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXJzZS4KICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcmFkaXhdIFRoZSByYWRpeCB1c2VkIHRvIGludGVycHJldCB0aGUgdmFsdWUgdG8gcGFyc2UuCiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIHRoZSBuZXcgaW50ZWdlciB2YWx1ZS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy5wYXJzZUludCgnMDgnKTsKICAgICAqIC8vID0+IDgKICAgICAqLwogICAgdmFyIHBhcnNlSW50ID0gbmF0aXZlUGFyc2VJbnQod2hpdGVzcGFjZSArICcwOCcpID09IDggPyBuYXRpdmVQYXJzZUludCA6IGZ1bmN0aW9uKHZhbHVlLCByYWRpeCkgewogICAgICAvLyBGaXJlZm94IGFuZCBPcGVyYSBzdGlsbCBmb2xsb3cgdGhlIEVTMyBzcGVjaWZpZWQgaW1wbGVtZW50YXRpb24gb2YgYHBhcnNlSW50YAogICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQoaXNTdHJpbmcodmFsdWUpID8gdmFsdWUucmVwbGFjZShyZUxlYWRpbmdTcGFjZXNBbmRaZXJvcywgJycpIDogdmFsdWUsIHJhZGl4IHx8IDApOwogICAgfTsKCiAgICAvKioKICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIGBtaW5gIGFuZCBgbWF4YCAoaW5jbHVzaXZlKS4gSWYgb25seSBvbmUKICAgICAqIGFyZ3VtZW50IGlzIHBhc3NlZCwgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXIgd2lsbCBiZSByZXR1cm5lZC4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHtOdW1iZXJ9IFttaW49MF0gVGhlIG1pbmltdW0gcG9zc2libGUgdmFsdWUuCiAgICAgKiBAcGFyYW0ge051bWJlcn0gW21heD0xXSBUaGUgbWF4aW11bSBwb3NzaWJsZSB2YWx1ZS4KICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgYSByYW5kb20gbnVtYmVyLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnJhbmRvbSgwLCA1KTsKICAgICAqIC8vID0+IGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNQogICAgICoKICAgICAqIF8ucmFuZG9tKDUpOwogICAgICogLy8gPT4gYWxzbyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDUKICAgICAqLwogICAgZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4KSB7CiAgICAgIGlmIChtaW4gPT0gbnVsbCAmJiBtYXggPT0gbnVsbCkgewogICAgICAgIG1heCA9IDE7CiAgICAgIH0KICAgICAgbWluID0gK21pbiB8fCAwOwogICAgICBpZiAobWF4ID09IG51bGwpIHsKICAgICAgICBtYXggPSBtaW47CiAgICAgICAgbWluID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICBtYXggPSArbWF4IHx8IDA7CiAgICAgIH0KICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTsKICAgICAgcmV0dXJuIChtaW4gJSAxIHx8IG1heCAlIDEpCiAgICAgICAgPyBtaW4gKyBuYXRpdmVNaW4ocmFuZCAqIChtYXggLSBtaW4gKyBwYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsnJykubGVuZ3RoIC0gMSkpKSwgbWF4KQogICAgICAgIDogbWluICsgZmxvb3IocmFuZCAqIChtYXggLSBtaW4gKyAxKSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZXNvbHZlcyB0aGUgdmFsdWUgb2YgYHByb3BlcnR5YCBvbiBgb2JqZWN0YC4gSWYgYHByb3BlcnR5YCBpcyBhIGZ1bmN0aW9uLAogICAgICogaXQgd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBvYmplY3RgIGFuZCBpdHMgcmVzdWx0IHJldHVybmVkLAogICAgICogZWxzZSB0aGUgcHJvcGVydHkgdmFsdWUgaXMgcmV0dXJuZWQuIElmIGBvYmplY3RgIGlzIGZhbHNleSwgdGhlbiBgdW5kZWZpbmVkYAogICAgICogaXMgcmV0dXJuZWQuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LgogICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IFRoZSBwcm9wZXJ0eSB0byBnZXQgdGhlIHZhbHVlIG9mLgogICAgICogQHJldHVybnMge01peGVkfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogdmFyIG9iamVjdCA9IHsKICAgICAqICAgJ2NoZWVzZSc6ICdjcnVtcGV0cycsCiAgICAgKiAgICdzdHVmZic6IGZ1bmN0aW9uKCkgewogICAgICogICAgIHJldHVybiAnbm9uc2Vuc2UnOwogICAgICogICB9CiAgICAgKiB9OwogICAgICoKICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2NoZWVzZScpOwogICAgICogLy8gPT4gJ2NydW1wZXRzJwogICAgICoKICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ3N0dWZmJyk7CiAgICAgKiAvLyA9PiAnbm9uc2Vuc2UnCiAgICAgKi8KICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHByb3BlcnR5KSB7CiAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA/IG9iamVjdFtwcm9wZXJ0eV0gOiB1bmRlZmluZWQ7CiAgICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKSA/IG9iamVjdFtwcm9wZXJ0eV0oKSA6IHZhbHVlOwogICAgfQoKICAgIC8qKgogICAgICogQSBtaWNyby10ZW1wbGF0aW5nIG1ldGhvZCB0aGF0IGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcwogICAgICogd2hpdGVzcGFjZSwgYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuCiAgICAgKgogICAgICogTm90ZTogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkLCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXMgc291cmNlVVJMcyBmb3IgZWFzaWVyCiAgICAgKiBkZWJ1Z2dpbmcuIFNlZSBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsCiAgICAgKgogICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWU6CiAgICAgKiBodHRwOi8vbG9kYXNoLmNvbS8jY3VzdG9tLWJ1aWxkcwogICAgICoKICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZToKICAgICAqIGh0dHA6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9zdGFibGUvZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbC5odG1sCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBjYXRlZ29yeSBVdGlsaXRpZXMKICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSB0ZW1wbGF0ZSB0ZXh0LgogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIGRhdGEgb2JqZWN0IHVzZWQgdG8gcG9wdWxhdGUgdGhlIHRleHQuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyBvYmplY3QuCiAgICAgKiAgZXNjYXBlIC0gVGhlICJlc2NhcGUiIGRlbGltaXRlciByZWdleHAuCiAgICAgKiAgZXZhbHVhdGUgLSBUaGUgImV2YWx1YXRlIiBkZWxpbWl0ZXIgcmVnZXhwLgogICAgICogIGludGVycG9sYXRlIC0gVGhlICJpbnRlcnBvbGF0ZSIgZGVsaW1pdGVyIHJlZ2V4cC4KICAgICAqICBzb3VyY2VVUkwgLSBUaGUgc291cmNlVVJMIG9mIHRoZSB0ZW1wbGF0ZSdzIGNvbXBpbGVkIHNvdXJjZS4KICAgICAqICB2YXJpYWJsZSAtIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLgogICAgICogQHJldHVybnMge0Z1bmN0aW9ufFN0cmluZ30gUmV0dXJucyBhIGNvbXBpbGVkIGZ1bmN0aW9uIHdoZW4gbm8gYGRhdGFgIG9iamVjdAogICAgICogIGlzIGdpdmVuLCBlbHNlIGl0IHJldHVybnMgdGhlIGludGVycG9sYXRlZCB0ZXh0LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiAvLyB1c2luZyBhIGNvbXBpbGVkIHRlbXBsYXRlCiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gbmFtZSAlPicpOwogICAgICogY29tcGlsZWQoeyAnbmFtZSc6ICdtb2UnIH0pOwogICAgICogLy8gPT4gJ2hlbGxvIG1vZScKICAgICAqCiAgICAgKiB2YXIgbGlzdCA9ICc8JSBfLmZvckVhY2gocGVvcGxlLCBmdW5jdGlvbihuYW1lKSB7ICU+PGxpPjwlPSBuYW1lICU+PC9saT48JSB9KTsgJT4nOwogICAgICogXy50ZW1wbGF0ZShsaXN0LCB7ICdwZW9wbGUnOiBbJ21vZScsICdsYXJyeSddIH0pOwogICAgICogLy8gPT4gJzxsaT5tb2U8L2xpPjxsaT5sYXJyeTwvbGk+JwogICAgICoKICAgICAqIC8vIHVzaW5nIHRoZSAiZXNjYXBlIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIEhUTUwgaW4gZGF0YSBwcm9wZXJ0eSB2YWx1ZXMKICAgICAqIF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nLCB7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7CiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+JwogICAgICoKICAgICAqIC8vIHVzaW5nIHRoZSBFUzYgZGVsaW1pdGVyIGFzIGFuIGFsdGVybmF0aXZlIHRvIHRoZSBkZWZhdWx0ICJpbnRlcnBvbGF0ZSIgZGVsaW1pdGVyCiAgICAgKiBfLnRlbXBsYXRlKCdoZWxsbyAkeyBuYW1lIH0nLCB7ICduYW1lJzogJ2N1cmx5JyB9KTsKICAgICAqIC8vID0+ICdoZWxsbyBjdXJseScKICAgICAqCiAgICAgKiAvLyB1c2luZyB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiAiZXZhbHVhdGUiIGRlbGltaXRlcnMKICAgICAqIF8udGVtcGxhdGUoJzwlIHByaW50KCJoZWxsbyAiICsgZXBpdGhldCk7ICU+IScsIHsgJ2VwaXRoZXQnOiAnc3Rvb2dlJyB9KTsKICAgICAqIC8vID0+ICdoZWxsbyBzdG9vZ2UhJwogICAgICoKICAgICAqIC8vIHVzaW5nIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzCiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7CiAgICAgKiAgICdpbnRlcnBvbGF0ZSc6IC97eyhbXHNcU10rPyl9fS9nCiAgICAgKiB9OwogICAgICoKICAgICAqIF8udGVtcGxhdGUoJ2hlbGxvIHt7IG5hbWUgfX0hJywgeyAnbmFtZSc6ICdtdXN0YWNoZScgfSk7CiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJwogICAgICoKICAgICAqIC8vIHVzaW5nIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZQogICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IG5hbWUgJT4nLCBudWxsLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7CiAgICAgKiBjb21waWxlZChkYXRhKTsKICAgICAqIC8vID0+IGZpbmQgdGhlIHNvdXJjZSBvZiAiZ3JlZXRpbmcuanN0IiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yCiAgICAgKgogICAgICogLy8gdXNpbmcgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlCiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS5uYW1lICU+IScsIG51bGwsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pOwogICAgICogY29tcGlsZWQuc291cmNlOwogICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkgewogICAgICogICB2YXIgX190LCBfX3AgPSAnJywgX19lID0gXy5lc2NhcGU7CiAgICAgKiAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLm5hbWUgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJzsKICAgICAqICAgcmV0dXJuIF9fcDsKICAgICAqIH0KICAgICAqCiAgICAgKiAvLyB1c2luZyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bAogICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBhIHN0YWNrIHRyYWNlCiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihjd2QsICdqc3QuanMnKSwgJ1wKICAgICAqICAgdmFyIEpTVCA9IHtcCiAgICAgKiAgICAgIm1haW4iOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1wKICAgICAqICAgfTtcCiAgICAgKiAnKTsKICAgICAqLwogICAgZnVuY3Rpb24gdGVtcGxhdGUodGV4dCwgZGF0YSwgb3B0aW9ucykgewogICAgICAvLyBiYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uCiAgICAgIC8vIGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvCiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMKICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVAogICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5nczsKICAgICAgdGV4dCB8fCAodGV4dCA9ICcnKTsKCiAgICAgIC8vIGF2b2lkIG1pc3NpbmcgZGVwZW5kZW5jaWVzIHdoZW4gYGl0ZXJhdG9yVGVtcGxhdGVgIGlzIG5vdCBkZWZpbmVkCiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0cyh7fSwgb3B0aW9ucywgc2V0dGluZ3MpOwoKICAgICAgdmFyIGltcG9ydHMgPSBkZWZhdWx0cyh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzKSwKICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSwKICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSB2YWx1ZXMoaW1wb3J0cyk7CgogICAgICB2YXIgaXNFdmFsdWF0aW5nLAogICAgICAgICAgaW5kZXggPSAwLAogICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCwKICAgICAgICAgIHNvdXJjZSA9ICJfX3AgKz0gJyI7CgogICAgICAvLyBjb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIKICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cCgKICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgKwogICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArCiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgKwogICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJwogICAgICAsICdnJyk7CgogICAgICB0ZXh0LnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7CiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7CgogICAgICAgIC8vIGVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2Fubm90IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscwogICAgICAgIHNvdXJjZSArPSB0ZXh0LnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpOwoKICAgICAgICAvLyByZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cwogICAgICAgIGlmIChlc2NhcGVWYWx1ZSkgewogICAgICAgICAgc291cmNlICs9ICInICtcbl9fZSgiICsgZXNjYXBlVmFsdWUgKyAiKSArXG4nIjsKICAgICAgICB9CiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHsKICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7CiAgICAgICAgICBzb3VyY2UgKz0gIic7XG4iICsgZXZhbHVhdGVWYWx1ZSArICI7XG5fX3AgKz0gJyI7CiAgICAgICAgfQogICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7CiAgICAgICAgICBzb3VyY2UgKz0gIicgK1xuKChfX3QgPSAoIiArIGludGVycG9sYXRlVmFsdWUgKyAiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXG4nIjsKICAgICAgICB9CiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7CgogICAgICAgIC8vIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgcmVxdWlyZXMgcmV0dXJuaW5nIHRoZSBgbWF0Y2hgCiAgICAgICAgLy8gc3RyaW5nIGluIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUKICAgICAgICByZXR1cm4gbWF0Y2g7CiAgICAgIH0pOwoKICAgICAgc291cmNlICs9ICInO1xuIjsKCiAgICAgIC8vIGlmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCwgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkCiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbgogICAgICB2YXIgdmFyaWFibGUgPSBvcHRpb25zLnZhcmlhYmxlLAogICAgICAgICAgaGFzVmFyaWFibGUgPSB2YXJpYWJsZTsKCiAgICAgIGlmICghaGFzVmFyaWFibGUpIHsKICAgICAgICB2YXJpYWJsZSA9ICdvYmonOwogICAgICAgIHNvdXJjZSA9ICd3aXRoICgnICsgdmFyaWFibGUgKyAnKSB7XG4nICsgc291cmNlICsgJ1xufVxuJzsKICAgICAgfQogICAgICAvLyBjbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MKICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpCiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJykKICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTsKCiAgICAgIC8vIGZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkKICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyB2YXJpYWJsZSArICcpIHtcbicgKwogICAgICAgIChoYXNWYXJpYWJsZSA/ICcnIDogdmFyaWFibGUgKyAnIHx8ICgnICsgdmFyaWFibGUgKyAnID0ge30pO1xuJykgKwogICAgICAgICJ2YXIgX190LCBfX3AgPSAnJywgX19lID0gXy5lc2NhcGUiICsKICAgICAgICAoaXNFdmFsdWF0aW5nCiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xuJyArCiAgICAgICAgICAgICJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cbiIKICAgICAgICAgIDogJztcbicKICAgICAgICApICsKICAgICAgICBzb3VyY2UgKwogICAgICAgICdyZXR1cm4gX19wXG59JzsKCiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZyBhbmQgd3JhcCBpbiBhIG11bHRpLWxpbmUgY29tbWVudCB0bwogICAgICAvLyBhdm9pZCBpc3N1ZXMgd2l0aCBOYXJ3aGFsLCBJRSBjb25kaXRpb25hbCBjb21waWxhdGlvbiwgYW5kIHRoZSBKUyBlbmdpbmUKICAgICAgLy8gZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMuCiAgICAgIC8vIGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwKICAgICAgdmFyIHNvdXJjZVVSTCA9ICdcbi8qXG4vL0Agc291cmNlVVJMPScgKyAob3B0aW9ucy5zb3VyY2VVUkwgfHwgJy9sb2Rhc2gvdGVtcGxhdGUvc291cmNlWycgKyAodGVtcGxhdGVDb3VudGVyKyspICsgJ10nKSArICdcbiovJzsKCiAgICAgIHRyeSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uKGltcG9ydHNLZXlzLCAncmV0dXJuICcgKyBzb3VyY2UgKyBzb3VyY2VVUkwpLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7CiAgICAgIH0gY2F0Y2goZSkgewogICAgICAgIGUuc291cmNlID0gc291cmNlOwogICAgICAgIHRocm93IGU7CiAgICAgIH0KICAgICAgaWYgKGRhdGEpIHsKICAgICAgICByZXR1cm4gcmVzdWx0KGRhdGEpOwogICAgICB9CiAgICAgIC8vIHByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIHZpYSBpdHMgYHRvU3RyaW5nYCBtZXRob2QsIGluCiAgICAgIC8vIHN1cHBvcnRlZCBlbnZpcm9ubWVudHMsIG9yIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvcgogICAgICAvLyBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMgZHVyaW5nIHRoZSBidWlsZCBwcm9jZXNzCiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBFeGVjdXRlcyB0aGUgYGNhbGxiYWNrYCBmdW5jdGlvbiBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cwogICAgICogb2YgZWFjaCBgY2FsbGJhY2tgIGV4ZWN1dGlvbi4gVGhlIGBjYWxsYmFja2AgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkCiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS4KICAgICAqCiAgICAgKiBAc3RhdGljCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IFV0aWxpdGllcwogICAgICogQHBhcmFtIHtOdW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBleGVjdXRlIHRoZSBjYWxsYmFjay4KICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiBjYWxsZWQgcGVyIGl0ZXJhdGlvbi4KICAgICAqIEBwYXJhbSB7TWl4ZWR9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGNhbGxiYWNrYC4KICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBhIG5ldyBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGBjYWxsYmFja2AgZXhlY3V0aW9uLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiB2YXIgZGljZVJvbGxzID0gXy50aW1lcygzLCBfLnBhcnRpYWwoXy5yYW5kb20sIDEsIDYpKTsKICAgICAqIC8vID0+IFszLCA2LCA0XQogICAgICoKICAgICAqIF8udGltZXMoMywgZnVuY3Rpb24obikgeyBtYWdlLmNhc3RTcGVsbChuKTsgfSk7CiAgICAgKiAvLyA9PiBjYWxscyBgbWFnZS5jYXN0U3BlbGwobilgIHRocmVlIHRpbWVzLCBwYXNzaW5nIGBuYCBvZiBgMGAsIGAxYCwgYW5kIGAyYCByZXNwZWN0aXZlbHkKICAgICAqCiAgICAgKiBfLnRpbWVzKDMsIGZ1bmN0aW9uKG4pIHsgdGhpcy5jYXN0KG4pOyB9LCBtYWdlKTsKICAgICAqIC8vID0+IGFsc28gY2FsbHMgYG1hZ2UuY2FzdFNwZWxsKG4pYCB0aHJlZSB0aW1lcwogICAgICovCiAgICBmdW5jdGlvbiB0aW1lcyhuLCBjYWxsYmFjaywgdGhpc0FyZykgewogICAgICBuID0gKG4gPSArbikgPiAtMSA/IG4gOiAwOwogICAgICB2YXIgaW5kZXggPSAtMSwKICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG4pOwoKICAgICAgY2FsbGJhY2sgPSBsb2Rhc2guY3JlYXRlQ2FsbGJhY2soY2FsbGJhY2ssIHRoaXNBcmcsIDEpOwogICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHsKICAgICAgICByZXN1bHRbaW5kZXhdID0gY2FsbGJhY2soaW5kZXgpOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgLCB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllcwogICAgICogYCZhbXA7YCwgYCZsdDtgLCBgJmd0O2AsIGAmcXVvdDtgLCBhbmQgYCYjMzk7YCBpbiBgc3RyaW5nYCB0byB0aGVpcgogICAgICogY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuCiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfLnVuZXNjYXBlKCdNb2UsIExhcnJ5ICZhbXA7IEN1cmx5Jyk7CiAgICAgKiAvLyA9PiAnTW9lLCBMYXJyeSAmIEN1cmx5JwogICAgICovCiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHsKICAgICAgcmV0dXJuIHN0cmluZyA9PSBudWxsID8gJycgOiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpOwogICAgfQoKICAgIC8qKgogICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBwYXNzZWQsIHRoZSBJRCB3aWxsIGJlIGFwcGVuZGVkIHRvIGl0LgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0aWVzCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3ByZWZpeF0gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC4KICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC4KICAgICAqIEBleGFtcGxlCiAgICAgKgogICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTsKICAgICAqIC8vID0+ICdjb250YWN0XzEwNCcKICAgICAqCiAgICAgKiBfLnVuaXF1ZUlkKCk7CiAgICAgKiAvLyA9PiAnMTA1JwogICAgICovCiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHsKICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7CiAgICAgIHJldHVybiBTdHJpbmcocHJlZml4ID09IG51bGwgPyAnJyA6IHByZWZpeCkgKyBpZDsKICAgIH0KCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvKioKICAgICAqIEludm9rZXMgYGludGVyY2VwdG9yYCB3aXRoIHRoZSBgdmFsdWVgIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgYW5kIHRoZW4KICAgICAqIHJldHVybnMgYHZhbHVlYC4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gInRhcCBpbnRvIiBhIG1ldGhvZCBjaGFpbiwKICAgICAqIGluIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLgogICAgICoKICAgICAqIEBzdGF0aWMKICAgICAqIEBtZW1iZXJPZiBfCiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5pbmcKICAgICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGBpbnRlcmNlcHRvcmAuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLgogICAgICogQHJldHVybnMge01peGVkfSBSZXR1cm5zIGB2YWx1ZWAuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8oWzEsIDIsIDMsIDRdKQogICAgICogIC5maWx0ZXIoZnVuY3Rpb24obnVtKSB7IHJldHVybiBudW0gJSAyID09IDA7IH0pCiAgICAgKiAgLnRhcChhbGVydCkKICAgICAqICAubWFwKGZ1bmN0aW9uKG51bSkgeyByZXR1cm4gbnVtICogbnVtOyB9KQogICAgICogIC52YWx1ZSgpOwogICAgICogLy8gPT4gLy8gWzIsIDRdIChhbGVydGVkKQogICAgICogLy8gPT4gWzQsIDE2XQogICAgICovCiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7CiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQoKICAgIC8qKgogICAgICogUHJvZHVjZXMgdGhlIGB0b1N0cmluZ2AgcmVzdWx0IG9mIHRoZSB3cmFwcGVkIHZhbHVlLgogICAgICoKICAgICAqIEBuYW1lIHRvU3RyaW5nCiAgICAgKiBAbWVtYmVyT2YgXwogICAgICogQGNhdGVnb3J5IENoYWluaW5nCiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcgcmVzdWx0LgogICAgICogQGV4YW1wbGUKICAgICAqCiAgICAgKiBfKFsxLCAyLCAzXSkudG9TdHJpbmcoKTsKICAgICAqIC8vID0+ICcxLDIsMycKICAgICAqLwogICAgZnVuY3Rpb24gd3JhcHBlclRvU3RyaW5nKCkgewogICAgICByZXR1cm4gU3RyaW5nKHRoaXMuX193cmFwcGVkX18pOwogICAgfQoKICAgIC8qKgogICAgICogRXh0cmFjdHMgdGhlIHdyYXBwZWQgdmFsdWUuCiAgICAgKgogICAgICogQG5hbWUgdmFsdWVPZgogICAgICogQG1lbWJlck9mIF8KICAgICAqIEBhbGlhcyB2YWx1ZQogICAgICogQGNhdGVnb3J5IENoYWluaW5nCiAgICAgKiBAcmV0dXJucyB7TWl4ZWR9IFJldHVybnMgdGhlIHdyYXBwZWQgdmFsdWUuCiAgICAgKiBAZXhhbXBsZQogICAgICoKICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZU9mKCk7CiAgICAgKiAvLyA9PiBbMSwgMiwgM10KICAgICAqLwogICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlT2YoKSB7CiAgICAgIHJldHVybiB0aGlzLl9fd3JhcHBlZF9fOwogICAgfQoKICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKICAgIC8vIGFkZCBmdW5jdGlvbnMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgd2hlbiBjaGFpbmluZwogICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7CiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduOwogICAgbG9kYXNoLmF0ID0gYXQ7CiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7CiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7CiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7CiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7CiAgICBsb2Rhc2guY29tcG9zZSA9IGNvbXBvc2U7CiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7CiAgICBsb2Rhc2guY3JlYXRlQ2FsbGJhY2sgPSBjcmVhdGVDYWxsYmFjazsKICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlOwogICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7CiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjsKICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5OwogICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlOwogICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjsKICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjsKICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDsKICAgIGxvZGFzaC5mb3JJbiA9IGZvckluOwogICAgbG9kYXNoLmZvck93biA9IGZvck93bjsKICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7CiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7CiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7CiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uOwogICAgbG9kYXNoLmludmVydCA9IGludmVydDsKICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7CiAgICBsb2Rhc2gua2V5cyA9IGtleXM7CiAgICBsb2Rhc2gubWFwID0gbWFwOwogICAgbG9kYXNoLm1heCA9IG1heDsKICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTsKICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlOwogICAgbG9kYXNoLm1pbiA9IG1pbjsKICAgIGxvZGFzaC5vbWl0ID0gb21pdDsKICAgIGxvZGFzaC5vbmNlID0gb25jZTsKICAgIGxvZGFzaC5wYWlycyA9IHBhaXJzOwogICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsOwogICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDsKICAgIGxvZGFzaC5waWNrID0gcGljazsKICAgIGxvZGFzaC5wbHVjayA9IHBsdWNrOwogICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7CiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0OwogICAgbG9kYXNoLnJlc3QgPSByZXN0OwogICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlOwogICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTsKICAgIGxvZGFzaC50YXAgPSB0YXA7CiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTsKICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzOwogICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5OwogICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTsKICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uOwogICAgbG9kYXNoLnVuaXEgPSB1bmlxOwogICAgbG9kYXNoLnVuemlwID0gdW56aXA7CiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzOwogICAgbG9kYXNoLndoZXJlID0gd2hlcmU7CiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7CiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7CiAgICBsb2Rhc2guemlwID0gemlwOwogICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDsKCiAgICAvLyBhZGQgYWxpYXNlcwogICAgbG9kYXNoLmNvbGxlY3QgPSBtYXA7CiAgICBsb2Rhc2guZHJvcCA9IHJlc3Q7CiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7CiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduOwogICAgbG9kYXNoLm1ldGhvZHMgPSBmdW5jdGlvbnM7CiAgICBsb2Rhc2gub2JqZWN0ID0gemlwT2JqZWN0OwogICAgbG9kYXNoLnNlbGVjdCA9IGZpbHRlcjsKICAgIGxvZGFzaC50YWlsID0gcmVzdDsKICAgIGxvZGFzaC51bmlxdWUgPSB1bmlxOwoKICAgIC8vIGFkZCBmdW5jdGlvbnMgdG8gYGxvZGFzaC5wcm90b3R5cGVgCiAgICBtaXhpbihsb2Rhc2gpOwoKICAgIC8vIGFkZCBVbmRlcnNjb3JlIGNvbXBhdAogICAgbG9kYXNoLmNoYWluID0gbG9kYXNoOwogICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfTsKCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvLyBhZGQgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgd2hlbiBjaGFpbmluZwogICAgbG9kYXNoLmNsb25lID0gY2xvbmU7CiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwOwogICAgbG9kYXNoLmNvbnRhaW5zID0gY29udGFpbnM7CiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlOwogICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7CiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7CiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4OwogICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5OwogICAgbG9kYXNoLmhhcyA9IGhhczsKICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5OwogICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mOwogICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7CiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7CiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuOwogICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTsKICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7CiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7CiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7CiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTsKICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjsKICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOOwogICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDsKICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyOwogICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7CiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7CiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDsKICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nOwogICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7CiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjsKICAgIGxvZGFzaC5taXhpbiA9IG1peGluOwogICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0OwogICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7CiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tOwogICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTsKICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0OwogICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDsKICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7CiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7CiAgICBsb2Rhc2guc29tZSA9IHNvbWU7CiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDsKICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlOwogICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7CiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDsKCiAgICAvLyBhZGQgYWxpYXNlcwogICAgbG9kYXNoLmFsbCA9IGV2ZXJ5OwogICAgbG9kYXNoLmFueSA9IHNvbWU7CiAgICBsb2Rhc2guZGV0ZWN0ID0gZmluZDsKICAgIGxvZGFzaC5maW5kV2hlcmUgPSBmaW5kOwogICAgbG9kYXNoLmZvbGRsID0gcmVkdWNlOwogICAgbG9kYXNoLmZvbGRyID0gcmVkdWNlUmlnaHQ7CiAgICBsb2Rhc2guaW5jbHVkZSA9IGNvbnRhaW5zOwogICAgbG9kYXNoLmluamVjdCA9IHJlZHVjZTsKCiAgICBmb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7CiAgICAgIGlmICghbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSkgewogICAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBhcmdzID0gW3RoaXMuX193cmFwcGVkX19dOwogICAgICAgICAgcHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpOwogICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobG9kYXNoLCBhcmdzKTsKICAgICAgICB9OwogICAgICB9CiAgICB9KTsKCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCiAgICAvLyBhZGQgZnVuY3Rpb25zIGNhcGFibGUgb2YgcmV0dXJuaW5nIHdyYXBwZWQgYW5kIHVud3JhcHBlZCB2YWx1ZXMgd2hlbiBjaGFpbmluZwogICAgbG9kYXNoLmZpcnN0ID0gZmlyc3Q7CiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7CgogICAgLy8gYWRkIGFsaWFzZXMKICAgIGxvZGFzaC50YWtlID0gZmlyc3Q7CiAgICBsb2Rhc2guaGVhZCA9IGZpcnN0OwoKICAgIGZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHsKICAgICAgaWYgKCFsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7CiAgICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXT0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jKHRoaXMuX193cmFwcGVkX18sIGNhbGxiYWNrLCB0aGlzQXJnKTsKICAgICAgICAgIHJldHVybiBjYWxsYmFjayA9PSBudWxsIHx8ICh0aGlzQXJnICYmIHR5cGVvZiBjYWxsYmFjayAhPSAnZnVuY3Rpb24nKQogICAgICAgICAgICA/IHJlc3VsdAogICAgICAgICAgICA6IG5ldyBsb2Rhc2hXcmFwcGVyKHJlc3VsdCk7CiAgICAgICAgfTsKICAgICAgfQogICAgfSk7CgogICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogICAgLyoqCiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuCiAgICAgKgogICAgICogQHN0YXRpYwogICAgICogQG1lbWJlck9mIF8KICAgICAqIEB0eXBlIFN0cmluZwogICAgICovCiAgICBsb2Rhc2guVkVSU0lPTiA9ICcxLjMuMSc7CgogICAgLy8gYWRkICJDaGFpbmluZyIgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyCiAgICBsb2Rhc2gucHJvdG90eXBlLnRvU3RyaW5nID0gd3JhcHBlclRvU3RyaW5nOwogICAgbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZU9mOwogICAgbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gd3JhcHBlclZhbHVlT2Y7CgogICAgLy8gYWRkIGBBcnJheWAgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMKICAgIGJhc2ljRWFjaChbJ2pvaW4nLCAncG9wJywgJ3NoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHsKICAgICAgdmFyIGZ1bmMgPSBhcnJheVJlZlttZXRob2ROYW1lXTsKICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMuX193cmFwcGVkX18sIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICB9KTsKCiAgICAvLyBhZGQgYEFycmF5YCBmdW5jdGlvbnMgdGhhdCByZXR1cm4gdGhlIHdyYXBwZWQgdmFsdWUKICAgIGJhc2ljRWFjaChbJ3B1c2gnLCAncmV2ZXJzZScsICdzb3J0JywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkgewogICAgICB2YXIgZnVuYyA9IGFycmF5UmVmW21ldGhvZE5hbWVdOwogICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgZnVuYy5hcHBseSh0aGlzLl9fd3JhcHBlZF9fLCBhcmd1bWVudHMpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9OwogICAgfSk7CgogICAgLy8gYWRkIGBBcnJheWAgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIG5ldyB3cmFwcGVkIHZhbHVlcwogICAgYmFzaWNFYWNoKFsnY29uY2F0JywgJ3NsaWNlJywgJ3NwbGljZSddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7CiAgICAgIHZhciBmdW5jID0gYXJyYXlSZWZbbWV0aG9kTmFtZV07CiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbmV3IGxvZGFzaFdyYXBwZXIoZnVuYy5hcHBseSh0aGlzLl9fd3JhcHBlZF9fLCBhcmd1bWVudHMpKTsKICAgICAgfTsKICAgIH0pOwoKICAgIC8vIGF2b2lkIGFycmF5LWxpa2Ugb2JqZWN0IGJ1Z3Mgd2l0aCBgQXJyYXkjc2hpZnRgIGFuZCBgQXJyYXkjc3BsaWNlYAogICAgLy8gaW4gRmlyZWZveCA8IDEwIGFuZCBJRSA8IDkKICAgIGlmICghc3VwcG9ydC5zcGxpY2VPYmplY3RzKSB7CiAgICAgIGJhc2ljRWFjaChbJ3BvcCcsICdzaGlmdCcsICdzcGxpY2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkgewogICAgICAgIHZhciBmdW5jID0gYXJyYXlSZWZbbWV0aG9kTmFtZV0sCiAgICAgICAgICAgIGlzU3BsaWNlID0gbWV0aG9kTmFtZSA9PSAnc3BsaWNlJzsKCiAgICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXywKICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmd1bWVudHMpOwoKICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgZGVsZXRlIHZhbHVlWzBdOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGlzU3BsaWNlID8gbmV3IGxvZGFzaFdyYXBwZXIocmVzdWx0KSA6IHJlc3VsdDsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gbG9kYXNoOwogIH0KCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgogIC8vIGV4cG9zZSBMby1EYXNoCiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTsKCiAgLy8gc29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2UgdGhlIGZvbGxvd2luZzoKICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHsKICAgIC8vIEV4cG9zZSBMby1EYXNoIHRvIHRoZSBnbG9iYWwgb2JqZWN0IGV2ZW4gd2hlbiBhbiBBTUQgbG9hZGVyIGlzIHByZXNlbnQgaW4KICAgIC8vIGNhc2UgTG8tRGFzaCB3YXMgaW5qZWN0ZWQgYnkgYSB0aGlyZC1wYXJ0eSBzY3JpcHQgYW5kIG5vdCBpbnRlbmRlZCB0byBiZQogICAgLy8gbG9hZGVkIGFzIGEgbW9kdWxlLiBUaGUgZ2xvYmFsIGFzc2lnbm1lbnQgY2FuIGJlIHJldmVydGVkIGluIHRoZSBMby1EYXNoCiAgICAvLyBtb2R1bGUgdmlhIGl0cyBgbm9Db25mbGljdCgpYCBtZXRob2QuCiAgICB3aW5kb3cuXyA9IF87CgogICAgLy8gZGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmUKICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlICJ1bmRlcnNjb3JlIiBtb2R1bGUKICAgIGRlZmluZShmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIF87CiAgICB9KTsKICB9CiAgLy8gY2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgYW4gYGV4cG9ydHNgIG9iamVjdAogIGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkgewogICAgLy8gaW4gTm9kZS5qcyBvciBSaW5nb0pTIHYwLjguMCsKICAgIGlmIChmcmVlTW9kdWxlKSB7CiAgICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXzsKICAgIH0KICAgIC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtCiAgICBlbHNlIHsKICAgICAgZnJlZUV4cG9ydHMuXyA9IF87CiAgICB9CiAgfQogIGVsc2UgewogICAgLy8gaW4gYSBicm93c2VyIG9yIFJoaW5vCiAgICB3aW5kb3cuXyA9IF87CiAgfQp9KHRoaXMpKTsvLyAgICAgQmFja2JvbmUuanMgMS4wLjAKCi8vICAgICAoYykgMjAxMC0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBJbmMuCi8vICAgICBCYWNrYm9uZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KLy8gICAgIEZvciBhbGwgZGV0YWlscyBhbmQgZG9jdW1lbnRhdGlvbjoKLy8gICAgIGh0dHA6Ly9iYWNrYm9uZWpzLm9yZwoKKGZ1bmN0aW9uKCl7CgogIC8vIEluaXRpYWwgU2V0dXAKICAvLyAtLS0tLS0tLS0tLS0tCgogIC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgKGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBgZXhwb3J0c2AKICAvLyBvbiB0aGUgc2VydmVyKS4KICB2YXIgcm9vdCA9IHRoaXM7CgogIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgQmFja2JvbmVgIHZhcmlhYmxlLCBzbyB0aGF0IGl0IGNhbiBiZQogIC8vIHJlc3RvcmVkIGxhdGVyIG9uLCBpZiBgbm9Db25mbGljdGAgaXMgdXNlZC4KICB2YXIgcHJldmlvdXNCYWNrYm9uZSA9IHJvb3QuQmFja2JvbmU7CgogIC8vIENyZWF0ZSBsb2NhbCByZWZlcmVuY2VzIHRvIGFycmF5IG1ldGhvZHMgd2UnbGwgd2FudCB0byB1c2UgbGF0ZXIuCiAgdmFyIGFycmF5ID0gW107CiAgdmFyIHB1c2ggPSBhcnJheS5wdXNoOwogIHZhciBzbGljZSA9IGFycmF5LnNsaWNlOwogIHZhciBzcGxpY2UgPSBhcnJheS5zcGxpY2U7CgogIC8vIFRoZSB0b3AtbGV2ZWwgbmFtZXNwYWNlLiBBbGwgcHVibGljIEJhY2tib25lIGNsYXNzZXMgYW5kIG1vZHVsZXMgd2lsbAogIC8vIGJlIGF0dGFjaGVkIHRvIHRoaXMuIEV4cG9ydGVkIGZvciBib3RoIHRoZSBicm93c2VyIGFuZCB0aGUgc2VydmVyLgogIHZhciBCYWNrYm9uZTsKICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICBCYWNrYm9uZSA9IGV4cG9ydHM7CiAgfSBlbHNlIHsKICAgIEJhY2tib25lID0gcm9vdC5CYWNrYm9uZSA9IHt9OwogIH0KCiAgLy8gQ3VycmVudCB2ZXJzaW9uIG9mIHRoZSBsaWJyYXJ5LiBLZWVwIGluIHN5bmMgd2l0aCBgcGFja2FnZS5qc29uYC4KICBCYWNrYm9uZS5WRVJTSU9OID0gJzEuMC4wJzsKCiAgLy8gUmVxdWlyZSBVbmRlcnNjb3JlLCBpZiB3ZSdyZSBvbiB0aGUgc2VydmVyLCBhbmQgaXQncyBub3QgYWxyZWFkeSBwcmVzZW50LgogIHZhciBfID0gcm9vdC5fOwogIGlmICghXyAmJiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnKSkgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTsKCiAgLy8gRm9yIEJhY2tib25lJ3MgcHVycG9zZXMsIGpRdWVyeSwgWmVwdG8sIEVuZGVyLCBvciBNeSBMaWJyYXJ5IChraWRkaW5nKSBvd25zCiAgLy8gdGhlIGAkYCB2YXJpYWJsZS4KICBCYWNrYm9uZS4kID0gcm9vdC5qUXVlcnkgfHwgcm9vdC5aZXB0byB8fCByb290LmVuZGVyIHx8IHJvb3QuJDsKCiAgLy8gUnVucyBCYWNrYm9uZS5qcyBpbiAqbm9Db25mbGljdCogbW9kZSwgcmV0dXJuaW5nIHRoZSBgQmFja2JvbmVgIHZhcmlhYmxlCiAgLy8gdG8gaXRzIHByZXZpb3VzIG93bmVyLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoaXMgQmFja2JvbmUgb2JqZWN0LgogIEJhY2tib25lLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHsKICAgIHJvb3QuQmFja2JvbmUgPSBwcmV2aW91c0JhY2tib25lOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgLy8gVHVybiBvbiBgZW11bGF0ZUhUVFBgIHRvIHN1cHBvcnQgbGVnYWN5IEhUVFAgc2VydmVycy4gU2V0dGluZyB0aGlzIG9wdGlvbgogIC8vIHdpbGwgZmFrZSBgIlBVVCJgIGFuZCBgIkRFTEVURSJgIHJlcXVlc3RzIHZpYSB0aGUgYF9tZXRob2RgIHBhcmFtZXRlciBhbmQKICAvLyBzZXQgYSBgWC1IdHRwLU1ldGhvZC1PdmVycmlkZWAgaGVhZGVyLgogIEJhY2tib25lLmVtdWxhdGVIVFRQID0gZmFsc2U7CgogIC8vIFR1cm4gb24gYGVtdWxhdGVKU09OYCB0byBzdXBwb3J0IGxlZ2FjeSBzZXJ2ZXJzIHRoYXQgY2FuJ3QgZGVhbCB3aXRoIGRpcmVjdAogIC8vIGBhcHBsaWNhdGlvbi9qc29uYCByZXF1ZXN0cyAuLi4gd2lsbCBlbmNvZGUgdGhlIGJvZHkgYXMKICAvLyBgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkYCBpbnN0ZWFkIGFuZCB3aWxsIHNlbmQgdGhlIG1vZGVsIGluIGEKICAvLyBmb3JtIHBhcmFtIG5hbWVkIGBtb2RlbGAuCiAgQmFja2JvbmUuZW11bGF0ZUpTT04gPSBmYWxzZTsKCiAgLy8gQmFja2JvbmUuRXZlbnRzCiAgLy8gLS0tLS0tLS0tLS0tLS0tCgogIC8vIEEgbW9kdWxlIHRoYXQgY2FuIGJlIG1peGVkIGluIHRvICphbnkgb2JqZWN0KiBpbiBvcmRlciB0byBwcm92aWRlIGl0IHdpdGgKICAvLyBjdXN0b20gZXZlbnRzLiBZb3UgbWF5IGJpbmQgd2l0aCBgb25gIG9yIHJlbW92ZSB3aXRoIGBvZmZgIGNhbGxiYWNrCiAgLy8gZnVuY3Rpb25zIHRvIGFuIGV2ZW50OyBgdHJpZ2dlcmAtaW5nIGFuIGV2ZW50IGZpcmVzIGFsbCBjYWxsYmFja3MgaW4KICAvLyBzdWNjZXNzaW9uLgogIC8vCiAgLy8gICAgIHZhciBvYmplY3QgPSB7fTsKICAvLyAgICAgXy5leHRlbmQob2JqZWN0LCBCYWNrYm9uZS5FdmVudHMpOwogIC8vICAgICBvYmplY3Qub24oJ2V4cGFuZCcsIGZ1bmN0aW9uKCl7IGFsZXJ0KCdleHBhbmRlZCcpOyB9KTsKICAvLyAgICAgb2JqZWN0LnRyaWdnZXIoJ2V4cGFuZCcpOwogIC8vCiAgdmFyIEV2ZW50cyA9IEJhY2tib25lLkV2ZW50cyA9IHsKCiAgICAvLyBCaW5kIGFuIGV2ZW50IHRvIGEgYGNhbGxiYWNrYCBmdW5jdGlvbi4gUGFzc2luZyBgImFsbCJgIHdpbGwgYmluZAogICAgLy8gdGhlIGNhbGxiYWNrIHRvIGFsbCBldmVudHMgZmlyZWQuCiAgICBvbjogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgaWYgKCFldmVudHNBcGkodGhpcywgJ29uJywgbmFtZSwgW2NhbGxiYWNrLCBjb250ZXh0XSkgfHwgIWNhbGxiYWNrKSByZXR1cm4gdGhpczsKICAgICAgdGhpcy5fZXZlbnRzIHx8ICh0aGlzLl9ldmVudHMgPSB7fSk7CiAgICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNbbmFtZV0gfHwgKHRoaXMuX2V2ZW50c1tuYW1lXSA9IFtdKTsKICAgICAgZXZlbnRzLnB1c2goe2NhbGxiYWNrOiBjYWxsYmFjaywgY29udGV4dDogY29udGV4dCwgY3R4OiBjb250ZXh0IHx8IHRoaXN9KTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIEJpbmQgYW4gZXZlbnQgdG8gb25seSBiZSB0cmlnZ2VyZWQgYSBzaW5nbGUgdGltZS4gQWZ0ZXIgdGhlIGZpcnN0IHRpbWUKICAgIC8vIHRoZSBjYWxsYmFjayBpcyBpbnZva2VkLCBpdCB3aWxsIGJlIHJlbW92ZWQuCiAgICBvbmNlOiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaywgY29udGV4dCkgewogICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAnb25jZScsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pIHx8ICFjYWxsYmFjaykgcmV0dXJuIHRoaXM7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIG9uY2UgPSBfLm9uY2UoZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZi5vZmYobmFtZSwgb25jZSk7CiAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfSk7CiAgICAgIG9uY2UuX2NhbGxiYWNrID0gY2FsbGJhY2s7CiAgICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIG9uY2UsIGNvbnRleHQpOwogICAgfSwKCiAgICAvLyBSZW1vdmUgb25lIG9yIG1hbnkgY2FsbGJhY2tzLiBJZiBgY29udGV4dGAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwKICAgIC8vIGNhbGxiYWNrcyB3aXRoIHRoYXQgZnVuY3Rpb24uIElmIGBjYWxsYmFja2AgaXMgbnVsbCwgcmVtb3ZlcyBhbGwKICAgIC8vIGNhbGxiYWNrcyBmb3IgdGhlIGV2ZW50LiBJZiBgbmFtZWAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwgYm91bmQKICAgIC8vIGNhbGxiYWNrcyBmb3IgYWxsIGV2ZW50cy4KICAgIG9mZjogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgdmFyIHJldGFpbiwgZXYsIGV2ZW50cywgbmFtZXMsIGksIGwsIGosIGs7CiAgICAgIGlmICghdGhpcy5fZXZlbnRzIHx8ICFldmVudHNBcGkodGhpcywgJ29mZicsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pKSByZXR1cm4gdGhpczsKICAgICAgaWYgKCFuYW1lICYmICFjYWxsYmFjayAmJiAhY29udGV4dCkgewogICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9OwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CgogICAgICBuYW1lcyA9IG5hbWUgPyBbbmFtZV0gOiBfLmtleXModGhpcy5fZXZlbnRzKTsKICAgICAgZm9yIChpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIG5hbWUgPSBuYW1lc1tpXTsKICAgICAgICBpZiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdKSB7CiAgICAgICAgICB0aGlzLl9ldmVudHNbbmFtZV0gPSByZXRhaW4gPSBbXTsKICAgICAgICAgIGlmIChjYWxsYmFjayB8fCBjb250ZXh0KSB7CiAgICAgICAgICAgIGZvciAoaiA9IDAsIGsgPSBldmVudHMubGVuZ3RoOyBqIDwgazsgaisrKSB7CiAgICAgICAgICAgICAgZXYgPSBldmVudHNbal07CiAgICAgICAgICAgICAgaWYgKChjYWxsYmFjayAmJiBjYWxsYmFjayAhPT0gZXYuY2FsbGJhY2sgJiYgY2FsbGJhY2sgIT09IGV2LmNhbGxiYWNrLl9jYWxsYmFjaykgfHwKICAgICAgICAgICAgICAgICAgKGNvbnRleHQgJiYgY29udGV4dCAhPT0gZXYuY29udGV4dCkpIHsKICAgICAgICAgICAgICAgIHJldGFpbi5wdXNoKGV2KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghcmV0YWluLmxlbmd0aCkgZGVsZXRlIHRoaXMuX2V2ZW50c1tuYW1lXTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBUcmlnZ2VyIG9uZSBvciBtYW55IGV2ZW50cywgZmlyaW5nIGFsbCBib3VuZCBjYWxsYmFja3MuIENhbGxiYWNrcyBhcmUKICAgIC8vIHBhc3NlZCB0aGUgc2FtZSBhcmd1bWVudHMgYXMgYHRyaWdnZXJgIGlzLCBhcGFydCBmcm9tIHRoZSBldmVudCBuYW1lCiAgICAvLyAodW5sZXNzIHlvdSdyZSBsaXN0ZW5pbmcgb24gYCJhbGwiYCwgd2hpY2ggd2lsbCBjYXVzZSB5b3VyIGNhbGxiYWNrIHRvCiAgICAvLyByZWNlaXZlIHRoZSB0cnVlIG5hbWUgb2YgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBhcmd1bWVudCkuCiAgICB0cmlnZ2VyOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgIGlmICghdGhpcy5fZXZlbnRzKSByZXR1cm4gdGhpczsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgIGlmICghZXZlbnRzQXBpKHRoaXMsICd0cmlnZ2VyJywgbmFtZSwgYXJncykpIHJldHVybiB0aGlzOwogICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdOwogICAgICB2YXIgYWxsRXZlbnRzID0gdGhpcy5fZXZlbnRzLmFsbDsKICAgICAgaWYgKGV2ZW50cykgdHJpZ2dlckV2ZW50cyhldmVudHMsIGFyZ3MpOwogICAgICBpZiAoYWxsRXZlbnRzKSB0cmlnZ2VyRXZlbnRzKGFsbEV2ZW50cywgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFRlbGwgdGhpcyBvYmplY3QgdG8gc3RvcCBsaXN0ZW5pbmcgdG8gZWl0aGVyIHNwZWNpZmljIGV2ZW50cyAuLi4gb3IKICAgIC8vIHRvIGV2ZXJ5IG9iamVjdCBpdCdzIGN1cnJlbnRseSBsaXN0ZW5pbmcgdG8uCiAgICBzdG9wTGlzdGVuaW5nOiBmdW5jdGlvbihvYmosIG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7CiAgICAgIGlmICghbGlzdGVuZXJzKSByZXR1cm4gdGhpczsKICAgICAgdmFyIGRlbGV0ZUxpc3RlbmVyID0gIW5hbWUgJiYgIWNhbGxiYWNrOwogICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSBjYWxsYmFjayA9IHRoaXM7CiAgICAgIGlmIChvYmopIChsaXN0ZW5lcnMgPSB7fSlbb2JqLl9saXN0ZW5lcklkXSA9IG9iajsKICAgICAgZm9yICh2YXIgaWQgaW4gbGlzdGVuZXJzKSB7CiAgICAgICAgbGlzdGVuZXJzW2lkXS5vZmYobmFtZSwgY2FsbGJhY2ssIHRoaXMpOwogICAgICAgIGlmIChkZWxldGVMaXN0ZW5lcikgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tpZF07CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogIH07CgogIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHNwbGl0IGV2ZW50IHN0cmluZ3MuCiAgdmFyIGV2ZW50U3BsaXR0ZXIgPSAvXHMrLzsKCiAgLy8gSW1wbGVtZW50IGZhbmN5IGZlYXR1cmVzIG9mIHRoZSBFdmVudHMgQVBJIHN1Y2ggYXMgbXVsdGlwbGUgZXZlbnQKICAvLyBuYW1lcyBgImNoYW5nZSBibHVyImAgYW5kIGpRdWVyeS1zdHlsZSBldmVudCBtYXBzIGB7Y2hhbmdlOiBhY3Rpb259YAogIC8vIGluIHRlcm1zIG9mIHRoZSBleGlzdGluZyBBUEkuCiAgdmFyIGV2ZW50c0FwaSA9IGZ1bmN0aW9uKG9iaiwgYWN0aW9uLCBuYW1lLCByZXN0KSB7CiAgICBpZiAoIW5hbWUpIHJldHVybiB0cnVlOwoKICAgIC8vIEhhbmRsZSBldmVudCBtYXBzLgogICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgewogICAgICBmb3IgKHZhciBrZXkgaW4gbmFtZSkgewogICAgICAgIG9ialthY3Rpb25dLmFwcGx5KG9iaiwgW2tleSwgbmFtZVtrZXldXS5jb25jYXQocmVzdCkpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLyBIYW5kbGUgc3BhY2Ugc2VwYXJhdGVkIGV2ZW50IG5hbWVzLgogICAgaWYgKGV2ZW50U3BsaXR0ZXIudGVzdChuYW1lKSkgewogICAgICB2YXIgbmFtZXMgPSBuYW1lLnNwbGl0KGV2ZW50U3BsaXR0ZXIpOwogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIG9ialthY3Rpb25dLmFwcGx5KG9iaiwgW25hbWVzW2ldXS5jb25jYXQocmVzdCkpOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICByZXR1cm4gdHJ1ZTsKICB9OwoKICAvLyBBIGRpZmZpY3VsdC10by1iZWxpZXZlLCBidXQgb3B0aW1pemVkIGludGVybmFsIGRpc3BhdGNoIGZ1bmN0aW9uIGZvcgogIC8vIHRyaWdnZXJpbmcgZXZlbnRzLiBUcmllcyB0byBrZWVwIHRoZSB1c3VhbCBjYXNlcyBzcGVlZHkgKG1vc3QgaW50ZXJuYWwKICAvLyBCYWNrYm9uZSBldmVudHMgaGF2ZSAzIGFyZ3VtZW50cykuCiAgdmFyIHRyaWdnZXJFdmVudHMgPSBmdW5jdGlvbihldmVudHMsIGFyZ3MpIHsKICAgIHZhciBldiwgaSA9IC0xLCBsID0gZXZlbnRzLmxlbmd0aCwgYTEgPSBhcmdzWzBdLCBhMiA9IGFyZ3NbMV0sIGEzID0gYXJnc1syXTsKICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHsKICAgICAgY2FzZSAwOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCk7IHJldHVybjsKICAgICAgY2FzZSAxOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEpOyByZXR1cm47CiAgICAgIGNhc2UgMjogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExLCBhMik7IHJldHVybjsKICAgICAgY2FzZSAzOiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5jYWxsKGV2LmN0eCwgYTEsIGEyLCBhMyk7IHJldHVybjsKICAgICAgZGVmYXVsdDogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suYXBwbHkoZXYuY3R4LCBhcmdzKTsKICAgIH0KICB9OwoKICB2YXIgbGlzdGVuTWV0aG9kcyA9IHtsaXN0ZW5UbzogJ29uJywgbGlzdGVuVG9PbmNlOiAnb25jZSd9OwoKICAvLyBJbnZlcnNpb24tb2YtY29udHJvbCB2ZXJzaW9ucyBvZiBgb25gIGFuZCBgb25jZWAuIFRlbGwgKnRoaXMqIG9iamVjdCB0bwogIC8vIGxpc3RlbiB0byBhbiBldmVudCBpbiBhbm90aGVyIG9iamVjdCAuLi4ga2VlcGluZyB0cmFjayBvZiB3aGF0IGl0J3MKICAvLyBsaXN0ZW5pbmcgdG8uCiAgXy5lYWNoKGxpc3Rlbk1ldGhvZHMsIGZ1bmN0aW9uKGltcGxlbWVudGF0aW9uLCBtZXRob2QpIHsKICAgIEV2ZW50c1ttZXRob2RdID0gZnVuY3Rpb24ob2JqLCBuYW1lLCBjYWxsYmFjaykgewogICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzIHx8ICh0aGlzLl9saXN0ZW5lcnMgPSB7fSk7CiAgICAgIHZhciBpZCA9IG9iai5fbGlzdGVuZXJJZCB8fCAob2JqLl9saXN0ZW5lcklkID0gXy51bmlxdWVJZCgnbCcpKTsKICAgICAgbGlzdGVuZXJzW2lkXSA9IG9iajsKICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgY2FsbGJhY2sgPSB0aGlzOwogICAgICBvYmpbaW1wbGVtZW50YXRpb25dKG5hbWUsIGNhbGxiYWNrLCB0aGlzKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwogIH0pOwoKICAvLyBBbGlhc2VzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KICBFdmVudHMuYmluZCAgID0gRXZlbnRzLm9uOwogIEV2ZW50cy51bmJpbmQgPSBFdmVudHMub2ZmOwoKICAvLyBBbGxvdyB0aGUgYEJhY2tib25lYCBvYmplY3QgdG8gc2VydmUgYXMgYSBnbG9iYWwgZXZlbnQgYnVzLCBmb3IgZm9sa3Mgd2hvCiAgLy8gd2FudCBnbG9iYWwgInB1YnN1YiIgaW4gYSBjb252ZW5pZW50IHBsYWNlLgogIF8uZXh0ZW5kKEJhY2tib25lLCBFdmVudHMpOwoKICAvLyBCYWNrYm9uZS5Nb2RlbAogIC8vIC0tLS0tLS0tLS0tLS0tCgogIC8vIEJhY2tib25lICoqTW9kZWxzKiogYXJlIHRoZSBiYXNpYyBkYXRhIG9iamVjdCBpbiB0aGUgZnJhbWV3b3JrIC0tCiAgLy8gZnJlcXVlbnRseSByZXByZXNlbnRpbmcgYSByb3cgaW4gYSB0YWJsZSBpbiBhIGRhdGFiYXNlIG9uIHlvdXIgc2VydmVyLgogIC8vIEEgZGlzY3JldGUgY2h1bmsgb2YgZGF0YSBhbmQgYSBidW5jaCBvZiB1c2VmdWwsIHJlbGF0ZWQgbWV0aG9kcyBmb3IKICAvLyBwZXJmb3JtaW5nIGNvbXB1dGF0aW9ucyBhbmQgdHJhbnNmb3JtYXRpb25zIG9uIHRoYXQgZGF0YS4KCiAgLy8gQ3JlYXRlIGEgbmV3IG1vZGVsIHdpdGggdGhlIHNwZWNpZmllZCBhdHRyaWJ1dGVzLiBBIGNsaWVudCBpZCAoYGNpZGApCiAgLy8gaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYW5kIGFzc2lnbmVkIGZvciB5b3UuCiAgdmFyIE1vZGVsID0gQmFja2JvbmUuTW9kZWwgPSBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7CiAgICB2YXIgZGVmYXVsdHM7CiAgICB2YXIgYXR0cnMgPSBhdHRyaWJ1dGVzIHx8IHt9OwogICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgIHRoaXMuY2lkID0gXy51bmlxdWVJZCgnYycpOwogICAgdGhpcy5hdHRyaWJ1dGVzID0ge307CiAgICBfLmV4dGVuZCh0aGlzLCBfLnBpY2sob3B0aW9ucywgbW9kZWxPcHRpb25zKSk7CiAgICBpZiAob3B0aW9ucy5wYXJzZSkgYXR0cnMgPSB0aGlzLnBhcnNlKGF0dHJzLCBvcHRpb25zKSB8fCB7fTsKICAgIGlmIChkZWZhdWx0cyA9IF8ucmVzdWx0KHRoaXMsICdkZWZhdWx0cycpKSB7CiAgICAgIGF0dHJzID0gXy5kZWZhdWx0cyh7fSwgYXR0cnMsIGRlZmF1bHRzKTsKICAgIH0KICAgIHRoaXMuc2V0KGF0dHJzLCBvcHRpb25zKTsKICAgIHRoaXMuY2hhbmdlZCA9IHt9OwogICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKCiAgLy8gQSBsaXN0IG9mIG9wdGlvbnMgdG8gYmUgYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlIG1vZGVsLCBpZiBwcm92aWRlZC4KICB2YXIgbW9kZWxPcHRpb25zID0gWyd1cmwnLCAndXJsUm9vdCcsICdjb2xsZWN0aW9uJ107CgogIC8vIEF0dGFjaCBhbGwgaW5oZXJpdGFibGUgbWV0aG9kcyB0byB0aGUgTW9kZWwgcHJvdG90eXBlLgogIF8uZXh0ZW5kKE1vZGVsLnByb3RvdHlwZSwgRXZlbnRzLCB7CgogICAgLy8gQSBoYXNoIG9mIGF0dHJpYnV0ZXMgd2hvc2UgY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWUgZGlmZmVyLgogICAgY2hhbmdlZDogbnVsbCwKCiAgICAvLyBUaGUgdmFsdWUgcmV0dXJuZWQgZHVyaW5nIHRoZSBsYXN0IGZhaWxlZCB2YWxpZGF0aW9uLgogICAgdmFsaWRhdGlvbkVycm9yOiBudWxsLAoKICAgIC8vIFRoZSBkZWZhdWx0IG5hbWUgZm9yIHRoZSBKU09OIGBpZGAgYXR0cmlidXRlIGlzIGAiaWQiYC4gTW9uZ29EQiBhbmQKICAgIC8vIENvdWNoREIgdXNlcnMgbWF5IHdhbnQgdG8gc2V0IHRoaXMgdG8gYCJfaWQiYC4KICAgIGlkQXR0cmlidXRlOiAnaWQnLAoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgbW9kZWwncyBgYXR0cmlidXRlc2Agb2JqZWN0LgogICAgdG9KU09OOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7CiAgICB9LAoKICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0IC0tIGJ1dCBvdmVycmlkZSB0aGlzIGlmIHlvdSBuZWVkCiAgICAvLyBjdXN0b20gc3luY2luZyBzZW1hbnRpY3MgZm9yICp0aGlzKiBwYXJ0aWN1bGFyIG1vZGVsLgogICAgc3luYzogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBCYWNrYm9uZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAoKICAgIC8vIEdldCB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLgogICAgZ2V0OiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbYXR0cl07CiAgICB9LAoKICAgIC8vIEdldCB0aGUgSFRNTC1lc2NhcGVkIHZhbHVlIG9mIGFuIGF0dHJpYnV0ZS4KICAgIGVzY2FwZTogZnVuY3Rpb24oYXR0cikgewogICAgICByZXR1cm4gXy5lc2NhcGUodGhpcy5nZXQoYXR0cikpOwogICAgfSwKCiAgICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXR0cmlidXRlIGNvbnRhaW5zIGEgdmFsdWUgdGhhdCBpcyBub3QgbnVsbAogICAgLy8gb3IgdW5kZWZpbmVkLgogICAgaGFzOiBmdW5jdGlvbihhdHRyKSB7CiAgICAgIHJldHVybiB0aGlzLmdldChhdHRyKSAhPSBudWxsOwogICAgfSwKCiAgICAvLyBTZXQgYSBoYXNoIG9mIG1vZGVsIGF0dHJpYnV0ZXMgb24gdGhlIG9iamVjdCwgZmlyaW5nIGAiY2hhbmdlImAuIFRoaXMgaXMKICAgIC8vIHRoZSBjb3JlIHByaW1pdGl2ZSBvcGVyYXRpb24gb2YgYSBtb2RlbCwgdXBkYXRpbmcgdGhlIGRhdGEgYW5kIG5vdGlmeWluZwogICAgLy8gYW55b25lIHdobyBuZWVkcyB0byBrbm93IGFib3V0IHRoZSBjaGFuZ2UgaW4gc3RhdGUuIFRoZSBoZWFydCBvZiB0aGUgYmVhc3QuCiAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsLCBvcHRpb25zKSB7CiAgICAgIHZhciBhdHRyLCBhdHRycywgdW5zZXQsIGNoYW5nZXMsIHNpbGVudCwgY2hhbmdpbmcsIHByZXYsIGN1cnJlbnQ7CiAgICAgIGlmIChrZXkgPT0gbnVsbCkgcmV0dXJuIHRoaXM7CgogICAgICAvLyBIYW5kbGUgYm90aCBgImtleSIsIHZhbHVlYCBhbmQgYHtrZXk6IHZhbHVlfWAgLXN0eWxlIGFyZ3VtZW50cy4KICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgYXR0cnMgPSBrZXk7CiAgICAgICAgb3B0aW9ucyA9IHZhbDsKICAgICAgfSBlbHNlIHsKICAgICAgICAoYXR0cnMgPSB7fSlba2V5XSA9IHZhbDsKICAgICAgfQoKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKCiAgICAgIC8vIFJ1biB2YWxpZGF0aW9uLgogICAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlOwoKICAgICAgLy8gRXh0cmFjdCBhdHRyaWJ1dGVzIGFuZCBvcHRpb25zLgogICAgICB1bnNldCAgICAgICAgICAgPSBvcHRpb25zLnVuc2V0OwogICAgICBzaWxlbnQgICAgICAgICAgPSBvcHRpb25zLnNpbGVudDsKICAgICAgY2hhbmdlcyAgICAgICAgID0gW107CiAgICAgIGNoYW5naW5nICAgICAgICA9IHRoaXMuX2NoYW5naW5nOwogICAgICB0aGlzLl9jaGFuZ2luZyAgPSB0cnVlOwoKICAgICAgaWYgKCFjaGFuZ2luZykgewogICAgICAgIHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTsKICAgICAgICB0aGlzLmNoYW5nZWQgPSB7fTsKICAgICAgfQogICAgICBjdXJyZW50ID0gdGhpcy5hdHRyaWJ1dGVzLCBwcmV2ID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzOwoKICAgICAgLy8gQ2hlY2sgZm9yIGNoYW5nZXMgb2YgYGlkYC4KICAgICAgaWYgKHRoaXMuaWRBdHRyaWJ1dGUgaW4gYXR0cnMpIHRoaXMuaWQgPSBhdHRyc1t0aGlzLmlkQXR0cmlidXRlXTsKCiAgICAgIC8vIEZvciBlYWNoIGBzZXRgIGF0dHJpYnV0ZSwgdXBkYXRlIG9yIGRlbGV0ZSB0aGUgY3VycmVudCB2YWx1ZS4KICAgICAgZm9yIChhdHRyIGluIGF0dHJzKSB7CiAgICAgICAgdmFsID0gYXR0cnNbYXR0cl07CiAgICAgICAgaWYgKCFfLmlzRXF1YWwoY3VycmVudFthdHRyXSwgdmFsKSkgY2hhbmdlcy5wdXNoKGF0dHIpOwogICAgICAgIGlmICghXy5pc0VxdWFsKHByZXZbYXR0cl0sIHZhbCkpIHsKICAgICAgICAgIHRoaXMuY2hhbmdlZFthdHRyXSA9IHZhbDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsZXRlIHRoaXMuY2hhbmdlZFthdHRyXTsKICAgICAgICB9CiAgICAgICAgdW5zZXQgPyBkZWxldGUgY3VycmVudFthdHRyXSA6IGN1cnJlbnRbYXR0cl0gPSB2YWw7CiAgICAgIH0KCiAgICAgIC8vIFRyaWdnZXIgYWxsIHJlbGV2YW50IGF0dHJpYnV0ZSBjaGFuZ2VzLgogICAgICBpZiAoIXNpbGVudCkgewogICAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCkgdGhpcy5fcGVuZGluZyA9IHRydWU7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGFuZ2VzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2U6JyArIGNoYW5nZXNbaV0sIHRoaXMsIGN1cnJlbnRbY2hhbmdlc1tpXV0sIG9wdGlvbnMpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gWW91IG1pZ2h0IGJlIHdvbmRlcmluZyB3aHkgdGhlcmUncyBhIGB3aGlsZWAgbG9vcCBoZXJlLiBDaGFuZ2VzIGNhbgogICAgICAvLyBiZSByZWN1cnNpdmVseSBuZXN0ZWQgd2l0aGluIGAiY2hhbmdlImAgZXZlbnRzLgogICAgICBpZiAoY2hhbmdpbmcpIHJldHVybiB0aGlzOwogICAgICBpZiAoIXNpbGVudCkgewogICAgICAgIHdoaWxlICh0aGlzLl9wZW5kaW5nKSB7CiAgICAgICAgICB0aGlzLl9wZW5kaW5nID0gZmFsc2U7CiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIHRoaXMsIG9wdGlvbnMpOwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLl9wZW5kaW5nID0gZmFsc2U7CiAgICAgIHRoaXMuX2NoYW5naW5nID0gZmFsc2U7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBSZW1vdmUgYW4gYXR0cmlidXRlIGZyb20gdGhlIG1vZGVsLCBmaXJpbmcgYCJjaGFuZ2UiYC4gYHVuc2V0YCBpcyBhIG5vb3AKICAgIC8vIGlmIHRoZSBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdC4KICAgIHVuc2V0OiBmdW5jdGlvbihhdHRyLCBvcHRpb25zKSB7CiAgICAgIHJldHVybiB0aGlzLnNldChhdHRyLCB2b2lkIDAsIF8uZXh0ZW5kKHt9LCBvcHRpb25zLCB7dW5zZXQ6IHRydWV9KSk7CiAgICB9LAoKICAgIC8vIENsZWFyIGFsbCBhdHRyaWJ1dGVzIG9uIHRoZSBtb2RlbCwgZmlyaW5nIGAiY2hhbmdlImAuCiAgICBjbGVhcjogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICB2YXIgYXR0cnMgPSB7fTsKICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuYXR0cmlidXRlcykgYXR0cnNba2V5XSA9IHZvaWQgMDsKICAgICAgcmV0dXJuIHRoaXMuc2V0KGF0dHJzLCBfLmV4dGVuZCh7fSwgb3B0aW9ucywge3Vuc2V0OiB0cnVlfSkpOwogICAgfSwKCiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIG1vZGVsIGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGAiY2hhbmdlImAgZXZlbnQuCiAgICAvLyBJZiB5b3Ugc3BlY2lmeSBhbiBhdHRyaWJ1dGUgbmFtZSwgZGV0ZXJtaW5lIGlmIHRoYXQgYXR0cmlidXRlIGhhcyBjaGFuZ2VkLgogICAgaGFzQ2hhbmdlZDogZnVuY3Rpb24oYXR0cikgewogICAgICBpZiAoYXR0ciA9PSBudWxsKSByZXR1cm4gIV8uaXNFbXB0eSh0aGlzLmNoYW5nZWQpOwogICAgICByZXR1cm4gXy5oYXModGhpcy5jaGFuZ2VkLCBhdHRyKTsKICAgIH0sCgogICAgLy8gUmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgYXR0cmlidXRlcyB0aGF0IGhhdmUgY2hhbmdlZCwgb3IKICAgIC8vIGZhbHNlIGlmIHRoZXJlIGFyZSBubyBjaGFuZ2VkIGF0dHJpYnV0ZXMuIFVzZWZ1bCBmb3IgZGV0ZXJtaW5pbmcgd2hhdAogICAgLy8gcGFydHMgb2YgYSB2aWV3IG5lZWQgdG8gYmUgdXBkYXRlZCBhbmQvb3Igd2hhdCBhdHRyaWJ1dGVzIG5lZWQgdG8gYmUKICAgIC8vIHBlcnNpc3RlZCB0byB0aGUgc2VydmVyLiBVbnNldCBhdHRyaWJ1dGVzIHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC4KICAgIC8vIFlvdSBjYW4gYWxzbyBwYXNzIGFuIGF0dHJpYnV0ZXMgb2JqZWN0IHRvIGRpZmYgYWdhaW5zdCB0aGUgbW9kZWwsCiAgICAvLyBkZXRlcm1pbmluZyBpZiB0aGVyZSAqd291bGQgYmUqIGEgY2hhbmdlLgogICAgY2hhbmdlZEF0dHJpYnV0ZXM6IGZ1bmN0aW9uKGRpZmYpIHsKICAgICAgaWYgKCFkaWZmKSByZXR1cm4gdGhpcy5oYXNDaGFuZ2VkKCkgPyBfLmNsb25lKHRoaXMuY2hhbmdlZCkgOiBmYWxzZTsKICAgICAgdmFyIHZhbCwgY2hhbmdlZCA9IGZhbHNlOwogICAgICB2YXIgb2xkID0gdGhpcy5fY2hhbmdpbmcgPyB0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMgOiB0aGlzLmF0dHJpYnV0ZXM7CiAgICAgIGZvciAodmFyIGF0dHIgaW4gZGlmZikgewogICAgICAgIGlmIChfLmlzRXF1YWwob2xkW2F0dHJdLCAodmFsID0gZGlmZlthdHRyXSkpKSBjb250aW51ZTsKICAgICAgICAoY2hhbmdlZCB8fCAoY2hhbmdlZCA9IHt9KSlbYXR0cl0gPSB2YWw7CiAgICAgIH0KICAgICAgcmV0dXJuIGNoYW5nZWQ7CiAgICB9LAoKICAgIC8vIEdldCB0aGUgcHJldmlvdXMgdmFsdWUgb2YgYW4gYXR0cmlidXRlLCByZWNvcmRlZCBhdCB0aGUgdGltZSB0aGUgbGFzdAogICAgLy8gYCJjaGFuZ2UiYCBldmVudCB3YXMgZmlyZWQuCiAgICBwcmV2aW91czogZnVuY3Rpb24oYXR0cikgewogICAgICBpZiAoYXR0ciA9PSBudWxsIHx8ICF0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMpIHJldHVybiBudWxsOwogICAgICByZXR1cm4gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzW2F0dHJdOwogICAgfSwKCiAgICAvLyBHZXQgYWxsIG9mIHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBtb2RlbCBhdCB0aGUgdGltZSBvZiB0aGUgcHJldmlvdXMKICAgIC8vIGAiY2hhbmdlImAgZXZlbnQuCiAgICBwcmV2aW91c0F0dHJpYnV0ZXM6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gXy5jbG9uZSh0aGlzLl9wcmV2aW91c0F0dHJpYnV0ZXMpOwogICAgfSwKCiAgICAvLyBGZXRjaCB0aGUgbW9kZWwgZnJvbSB0aGUgc2VydmVyLiBJZiB0aGUgc2VydmVyJ3MgcmVwcmVzZW50YXRpb24gb2YgdGhlCiAgICAvLyBtb2RlbCBkaWZmZXJzIGZyb20gaXRzIGN1cnJlbnQgYXR0cmlidXRlcywgdGhleSB3aWxsIGJlIG92ZXJyaWRkZW4sCiAgICAvLyB0cmlnZ2VyaW5nIGEgYCJjaGFuZ2UiYCBldmVudC4KICAgIGZldGNoOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9OwogICAgICBpZiAob3B0aW9ucy5wYXJzZSA9PT0gdm9pZCAwKSBvcHRpb25zLnBhcnNlID0gdHJ1ZTsKICAgICAgdmFyIG1vZGVsID0gdGhpczsKICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHsKICAgICAgICBpZiAoIW1vZGVsLnNldChtb2RlbC5wYXJzZShyZXNwLCBvcHRpb25zKSwgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgICAgbW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgICAgfTsKICAgICAgd3JhcEVycm9yKHRoaXMsIG9wdGlvbnMpOwogICAgICByZXR1cm4gdGhpcy5zeW5jKCdyZWFkJywgdGhpcywgb3B0aW9ucyk7CiAgICB9LAoKICAgIC8vIFNldCBhIGhhc2ggb2YgbW9kZWwgYXR0cmlidXRlcywgYW5kIHN5bmMgdGhlIG1vZGVsIHRvIHRoZSBzZXJ2ZXIuCiAgICAvLyBJZiB0aGUgc2VydmVyIHJldHVybnMgYW4gYXR0cmlidXRlcyBoYXNoIHRoYXQgZGlmZmVycywgdGhlIG1vZGVsJ3MKICAgIC8vIHN0YXRlIHdpbGwgYmUgYHNldGAgYWdhaW4uCiAgICBzYXZlOiBmdW5jdGlvbihrZXksIHZhbCwgb3B0aW9ucykgewogICAgICB2YXIgYXR0cnMsIG1ldGhvZCwgeGhyLCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzOwoKICAgICAgLy8gSGFuZGxlIGJvdGggYCJrZXkiLCB2YWx1ZWAgYW5kIGB7a2V5OiB2YWx1ZX1gIC1zdHlsZSBhcmd1bWVudHMuCiAgICAgIGlmIChrZXkgPT0gbnVsbCB8fCB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JykgewogICAgICAgIGF0dHJzID0ga2V5OwogICAgICAgIG9wdGlvbnMgPSB2YWw7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgKGF0dHJzID0ge30pW2tleV0gPSB2YWw7CiAgICAgIH0KCiAgICAgIC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIGFuZCBhdHRyaWJ1dGVzIGV4aXN0LCBzYXZlIGFjdHMgYXMgYHNldChhdHRyKS5zYXZlKG51bGwsIG9wdHMpYC4KICAgICAgaWYgKGF0dHJzICYmICghb3B0aW9ucyB8fCAhb3B0aW9ucy53YWl0KSAmJiAhdGhpcy5zZXQoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7CgogICAgICBvcHRpb25zID0gXy5leHRlbmQoe3ZhbGlkYXRlOiB0cnVlfSwgb3B0aW9ucyk7CgogICAgICAvLyBEbyBub3QgcGVyc2lzdCBpbnZhbGlkIG1vZGVscy4KICAgICAgaWYgKCF0aGlzLl92YWxpZGF0ZShhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTsKCiAgICAgIC8vIFNldCB0ZW1wb3JhcnkgYXR0cmlidXRlcyBpZiBge3dhaXQ6IHRydWV9YC4KICAgICAgaWYgKGF0dHJzICYmIG9wdGlvbnMud2FpdCkgewogICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IF8uZXh0ZW5kKHt9LCBhdHRyaWJ1dGVzLCBhdHRycyk7CiAgICAgIH0KCiAgICAgIC8vIEFmdGVyIGEgc3VjY2Vzc2Z1bCBzZXJ2ZXItc2lkZSBzYXZlLCB0aGUgY2xpZW50IGlzIChvcHRpb25hbGx5KQogICAgICAvLyB1cGRhdGVkIHdpdGggdGhlIHNlcnZlci1zaWRlIHN0YXRlLgogICAgICBpZiAob3B0aW9ucy5wYXJzZSA9PT0gdm9pZCAwKSBvcHRpb25zLnBhcnNlID0gdHJ1ZTsKICAgICAgdmFyIG1vZGVsID0gdGhpczsKICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7CiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHsKICAgICAgICAvLyBFbnN1cmUgYXR0cmlidXRlcyBhcmUgcmVzdG9yZWQgZHVyaW5nIHN5bmNocm9ub3VzIHNhdmVzLgogICAgICAgIG1vZGVsLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzOwogICAgICAgIHZhciBzZXJ2ZXJBdHRycyA9IG1vZGVsLnBhcnNlKHJlc3AsIG9wdGlvbnMpOwogICAgICAgIGlmIChvcHRpb25zLndhaXQpIHNlcnZlckF0dHJzID0gXy5leHRlbmQoYXR0cnMgfHwge30sIHNlcnZlckF0dHJzKTsKICAgICAgICBpZiAoXy5pc09iamVjdChzZXJ2ZXJBdHRycykgJiYgIW1vZGVsLnNldChzZXJ2ZXJBdHRycywgb3B0aW9ucykpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICAgIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgIH07CiAgICAgIHdyYXBFcnJvcih0aGlzLCBvcHRpb25zKTsKCiAgICAgIG1ldGhvZCA9IHRoaXMuaXNOZXcoKSA/ICdjcmVhdGUnIDogKG9wdGlvbnMucGF0Y2ggPyAncGF0Y2gnIDogJ3VwZGF0ZScpOwogICAgICBpZiAobWV0aG9kID09PSAncGF0Y2gnKSBvcHRpb25zLmF0dHJzID0gYXR0cnM7CiAgICAgIHhociA9IHRoaXMuc3luYyhtZXRob2QsIHRoaXMsIG9wdGlvbnMpOwoKICAgICAgLy8gUmVzdG9yZSBhdHRyaWJ1dGVzLgogICAgICBpZiAoYXR0cnMgJiYgb3B0aW9ucy53YWl0KSB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzOwoKICAgICAgcmV0dXJuIHhocjsKICAgIH0sCgogICAgLy8gRGVzdHJveSB0aGlzIG1vZGVsIG9uIHRoZSBzZXJ2ZXIgaWYgaXQgd2FzIGFscmVhZHkgcGVyc2lzdGVkLgogICAgLy8gT3B0aW1pc3RpY2FsbHkgcmVtb3ZlcyB0aGUgbW9kZWwgZnJvbSBpdHMgY29sbGVjdGlvbiwgaWYgaXQgaGFzIG9uZS4KICAgIC8vIElmIGB3YWl0OiB0cnVlYCBpcyBwYXNzZWQsIHdhaXRzIGZvciB0aGUgc2VydmVyIHRvIHJlc3BvbmQgYmVmb3JlIHJlbW92YWwuCiAgICBkZXN0cm95OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9OwogICAgICB2YXIgbW9kZWwgPSB0aGlzOwogICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKCiAgICAgIHZhciBkZXN0cm95ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgbW9kZWwudHJpZ2dlcignZGVzdHJveScsIG1vZGVsLCBtb2RlbC5jb2xsZWN0aW9uLCBvcHRpb25zKTsKICAgICAgfTsKCiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHsKICAgICAgICBpZiAob3B0aW9ucy53YWl0IHx8IG1vZGVsLmlzTmV3KCkpIGRlc3Ryb3koKTsKICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgICAgaWYgKCFtb2RlbC5pc05ldygpKSBtb2RlbC50cmlnZ2VyKCdzeW5jJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICB9OwoKICAgICAgaWYgKHRoaXMuaXNOZXcoKSkgewogICAgICAgIG9wdGlvbnMuc3VjY2VzcygpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7CgogICAgICB2YXIgeGhyID0gdGhpcy5zeW5jKCdkZWxldGUnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgaWYgKCFvcHRpb25zLndhaXQpIGRlc3Ryb3koKTsKICAgICAgcmV0dXJuIHhocjsKICAgIH0sCgogICAgLy8gRGVmYXVsdCBVUkwgZm9yIHRoZSBtb2RlbCdzIHJlcHJlc2VudGF0aW9uIG9uIHRoZSBzZXJ2ZXIgLS0gaWYgeW91J3JlCiAgICAvLyB1c2luZyBCYWNrYm9uZSdzIHJlc3RmdWwgbWV0aG9kcywgb3ZlcnJpZGUgdGhpcyB0byBjaGFuZ2UgdGhlIGVuZHBvaW50CiAgICAvLyB0aGF0IHdpbGwgYmUgY2FsbGVkLgogICAgdXJsOiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGJhc2UgPSBfLnJlc3VsdCh0aGlzLCAndXJsUm9vdCcpIHx8IF8ucmVzdWx0KHRoaXMuY29sbGVjdGlvbiwgJ3VybCcpIHx8IHVybEVycm9yKCk7CiAgICAgIGlmICh0aGlzLmlzTmV3KCkpIHJldHVybiBiYXNlOwogICAgICByZXR1cm4gYmFzZSArIChiYXNlLmNoYXJBdChiYXNlLmxlbmd0aCAtIDEpID09PSAnLycgPyAnJyA6ICcvJykgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5pZCk7CiAgICB9LAoKICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gdGhlIGhhc2ggb2YgYXR0cmlidXRlcyB0byBiZSBgc2V0YCBvbgogICAgLy8gdGhlIG1vZGVsLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBqdXN0IHRvIHBhc3MgdGhlIHJlc3BvbnNlIGFsb25nLgogICAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHJlc3A7CiAgICB9LAoKICAgIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIGlkZW50aWNhbCBhdHRyaWJ1dGVzIHRvIHRoaXMgb25lLgogICAgY2xvbmU6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5hdHRyaWJ1dGVzKTsKICAgIH0sCgogICAgLy8gQSBtb2RlbCBpcyBuZXcgaWYgaXQgaGFzIG5ldmVyIGJlZW4gc2F2ZWQgdG8gdGhlIHNlcnZlciwgYW5kIGxhY2tzIGFuIGlkLgogICAgaXNOZXc6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5pZCA9PSBudWxsOwogICAgfSwKCiAgICAvLyBDaGVjayBpZiB0aGUgbW9kZWwgaXMgY3VycmVudGx5IGluIGEgdmFsaWQgc3RhdGUuCiAgICBpc1ZhbGlkOiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZSh7fSwgXy5leHRlbmQob3B0aW9ucyB8fCB7fSwgeyB2YWxpZGF0ZTogdHJ1ZSB9KSk7CiAgICB9LAoKICAgIC8vIFJ1biB2YWxpZGF0aW9uIGFnYWluc3QgdGhlIG5leHQgY29tcGxldGUgc2V0IG9mIG1vZGVsIGF0dHJpYnV0ZXMsCiAgICAvLyByZXR1cm5pbmcgYHRydWVgIGlmIGFsbCBpcyB3ZWxsLiBPdGhlcndpc2UsIGZpcmUgYW4gYCJpbnZhbGlkImAgZXZlbnQuCiAgICBfdmFsaWRhdGU6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7CiAgICAgIGlmICghb3B0aW9ucy52YWxpZGF0ZSB8fCAhdGhpcy52YWxpZGF0ZSkgcmV0dXJuIHRydWU7CiAgICAgIGF0dHJzID0gXy5leHRlbmQoe30sIHRoaXMuYXR0cmlidXRlcywgYXR0cnMpOwogICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRpb25FcnJvciA9IHRoaXMudmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpIHx8IG51bGw7CiAgICAgIGlmICghZXJyb3IpIHJldHVybiB0cnVlOwogICAgICB0aGlzLnRyaWdnZXIoJ2ludmFsaWQnLCB0aGlzLCBlcnJvciwgXy5leHRlbmQob3B0aW9ucyB8fCB7fSwge3ZhbGlkYXRpb25FcnJvcjogZXJyb3J9KSk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgfSk7CgogIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHdlIHdhbnQgdG8gaW1wbGVtZW50IG9uIHRoZSBNb2RlbC4KICB2YXIgbW9kZWxNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdwYWlycycsICdpbnZlcnQnLCAncGljaycsICdvbWl0J107CgogIC8vIE1peCBpbiBlYWNoIFVuZGVyc2NvcmUgbWV0aG9kIGFzIGEgcHJveHkgdG8gYE1vZGVsI2F0dHJpYnV0ZXNgLgogIF8uZWFjaChtb2RlbE1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkgewogICAgTW9kZWwucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzLmF0dHJpYnV0ZXMpOwogICAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIGFyZ3MpOwogICAgfTsKICB9KTsKCiAgLy8gQmFja2JvbmUuQ29sbGVjdGlvbgogIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgLy8gSWYgbW9kZWxzIHRlbmQgdG8gcmVwcmVzZW50IGEgc2luZ2xlIHJvdyBvZiBkYXRhLCBhIEJhY2tib25lIENvbGxlY3Rpb24gaXMKICAvLyBtb3JlIGFuYWxhZ291cyB0byBhIHRhYmxlIGZ1bGwgb2YgZGF0YSAuLi4gb3IgYSBzbWFsbCBzbGljZSBvciBwYWdlIG9mIHRoYXQKICAvLyB0YWJsZSwgb3IgYSBjb2xsZWN0aW9uIG9mIHJvd3MgdGhhdCBiZWxvbmcgdG9nZXRoZXIgZm9yIGEgcGFydGljdWxhciByZWFzb24KICAvLyAtLSBhbGwgb2YgdGhlIG1lc3NhZ2VzIGluIHRoaXMgcGFydGljdWxhciBmb2xkZXIsIGFsbCBvZiB0aGUgZG9jdW1lbnRzCiAgLy8gYmVsb25naW5nIHRvIHRoaXMgcGFydGljdWxhciBhdXRob3IsIGFuZCBzbyBvbi4gQ29sbGVjdGlvbnMgbWFpbnRhaW4KICAvLyBpbmRleGVzIG9mIHRoZWlyIG1vZGVscywgYm90aCBpbiBvcmRlciwgYW5kIGZvciBsb29rdXAgYnkgYGlkYC4KCiAgLy8gQ3JlYXRlIGEgbmV3ICoqQ29sbGVjdGlvbioqLCBwZXJoYXBzIHRvIGNvbnRhaW4gYSBzcGVjaWZpYyB0eXBlIG9mIGBtb2RlbGAuCiAgLy8gSWYgYSBgY29tcGFyYXRvcmAgaXMgc3BlY2lmaWVkLCB0aGUgQ29sbGVjdGlvbiB3aWxsIG1haW50YWluCiAgLy8gaXRzIG1vZGVscyBpbiBzb3J0IG9yZGVyLCBhcyB0aGV5J3JlIGFkZGVkIGFuZCByZW1vdmVkLgogIHZhciBDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykgewogICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgIGlmIChvcHRpb25zLnVybCkgdGhpcy51cmwgPSBvcHRpb25zLnVybDsKICAgIGlmIChvcHRpb25zLm1vZGVsKSB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDsKICAgIGlmIChvcHRpb25zLmNvbXBhcmF0b3IgIT09IHZvaWQgMCkgdGhpcy5jb21wYXJhdG9yID0gb3B0aW9ucy5jb21wYXJhdG9yOwogICAgdGhpcy5fcmVzZXQoKTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgaWYgKG1vZGVscykgdGhpcy5yZXNldChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7CiAgfTsKCiAgLy8gRGVmYXVsdCBvcHRpb25zIGZvciBgQ29sbGVjdGlvbiNzZXRgLgogIHZhciBzZXRPcHRpb25zID0ge2FkZDogdHJ1ZSwgcmVtb3ZlOiB0cnVlLCBtZXJnZTogdHJ1ZX07CiAgdmFyIGFkZE9wdGlvbnMgPSB7YWRkOiB0cnVlLCBtZXJnZTogZmFsc2UsIHJlbW92ZTogZmFsc2V9OwoKICAvLyBEZWZpbmUgdGhlIENvbGxlY3Rpb24ncyBpbmhlcml0YWJsZSBtZXRob2RzLgogIF8uZXh0ZW5kKENvbGxlY3Rpb24ucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAvLyBUaGUgZGVmYXVsdCBtb2RlbCBmb3IgYSBjb2xsZWN0aW9uIGlzIGp1c3QgYSAqKkJhY2tib25lLk1vZGVsKiouCiAgICAvLyBUaGlzIHNob3VsZCBiZSBvdmVycmlkZGVuIGluIG1vc3QgY2FzZXMuCiAgICBtb2RlbDogTW9kZWwsCgogICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duCiAgICAvLyBpbml0aWFsaXphdGlvbiBsb2dpYy4KICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSwKCiAgICAvLyBUaGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhIENvbGxlY3Rpb24gaXMgYW4gYXJyYXkgb2YgdGhlCiAgICAvLyBtb2RlbHMnIGF0dHJpYnV0ZXMuCiAgICB0b0pTT046IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKG1vZGVsKXsgcmV0dXJuIG1vZGVsLnRvSlNPTihvcHRpb25zKTsgfSk7CiAgICB9LAoKICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0LgogICAgc3luYzogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBCYWNrYm9uZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9LAoKICAgIC8vIEFkZCBhIG1vZGVsLCBvciBsaXN0IG9mIG1vZGVscyB0byB0aGUgc2V0LgogICAgYWRkOiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIHRoaXMuc2V0KG1vZGVscywgXy5kZWZhdWx0cyhvcHRpb25zIHx8IHt9LCBhZGRPcHRpb25zKSk7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhIG1vZGVsLCBvciBhIGxpc3Qgb2YgbW9kZWxzIGZyb20gdGhlIHNldC4KICAgIHJlbW92ZTogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7CiAgICAgIG1vZGVscyA9IF8uaXNBcnJheShtb2RlbHMpID8gbW9kZWxzLnNsaWNlKCkgOiBbbW9kZWxzXTsKICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgdmFyIGksIGwsIGluZGV4LCBtb2RlbDsKICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICBtb2RlbCA9IHRoaXMuZ2V0KG1vZGVsc1tpXSk7CiAgICAgICAgaWYgKCFtb2RlbCkgY29udGludWU7CiAgICAgICAgZGVsZXRlIHRoaXMuX2J5SWRbbW9kZWwuaWRdOwogICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLmNpZF07CiAgICAgICAgaW5kZXggPSB0aGlzLmluZGV4T2YobW9kZWwpOwogICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgdGhpcy5sZW5ndGgtLTsKICAgICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB7CiAgICAgICAgICBvcHRpb25zLmluZGV4ID0gaW5kZXg7CiAgICAgICAgICBtb2RlbC50cmlnZ2VyKCdyZW1vdmUnLCBtb2RlbCwgdGhpcywgb3B0aW9ucyk7CiAgICAgICAgfQogICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZShtb2RlbCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFVwZGF0ZSBhIGNvbGxlY3Rpb24gYnkgYHNldGAtaW5nIGEgbmV3IGxpc3Qgb2YgbW9kZWxzLCBhZGRpbmcgbmV3IG9uZXMsCiAgICAvLyByZW1vdmluZyBtb2RlbHMgdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnQsIGFuZCBtZXJnaW5nIG1vZGVscyB0aGF0CiAgICAvLyBhbHJlYWR5IGV4aXN0IGluIHRoZSBjb2xsZWN0aW9uLCBhcyBuZWNlc3NhcnkuIFNpbWlsYXIgdG8gKipNb2RlbCNzZXQqKiwKICAgIC8vIHRoZSBjb3JlIG9wZXJhdGlvbiBmb3IgdXBkYXRpbmcgdGhlIGRhdGEgY29udGFpbmVkIGJ5IHRoZSBjb2xsZWN0aW9uLgogICAgc2V0OiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyA9IF8uZGVmYXVsdHMob3B0aW9ucyB8fCB7fSwgc2V0T3B0aW9ucyk7CiAgICAgIGlmIChvcHRpb25zLnBhcnNlKSBtb2RlbHMgPSB0aGlzLnBhcnNlKG1vZGVscywgb3B0aW9ucyk7CiAgICAgIGlmICghXy5pc0FycmF5KG1vZGVscykpIG1vZGVscyA9IG1vZGVscyA/IFttb2RlbHNdIDogW107CiAgICAgIHZhciBpLCBsLCBtb2RlbCwgYXR0cnMsIGV4aXN0aW5nLCBzb3J0OwogICAgICB2YXIgYXQgPSBvcHRpb25zLmF0OwogICAgICB2YXIgc29ydGFibGUgPSB0aGlzLmNvbXBhcmF0b3IgJiYgKGF0ID09IG51bGwpICYmIG9wdGlvbnMuc29ydCAhPT0gZmFsc2U7CiAgICAgIHZhciBzb3J0QXR0ciA9IF8uaXNTdHJpbmcodGhpcy5jb21wYXJhdG9yKSA/IHRoaXMuY29tcGFyYXRvciA6IG51bGw7CiAgICAgIHZhciB0b0FkZCA9IFtdLCB0b1JlbW92ZSA9IFtdLCBtb2RlbE1hcCA9IHt9OwoKICAgICAgLy8gVHVybiBiYXJlIG9iamVjdHMgaW50byBtb2RlbCByZWZlcmVuY2VzLCBhbmQgcHJldmVudCBpbnZhbGlkIG1vZGVscwogICAgICAvLyBmcm9tIGJlaW5nIGFkZGVkLgogICAgICBmb3IgKGkgPSAwLCBsID0gbW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIGlmICghKG1vZGVsID0gdGhpcy5fcHJlcGFyZU1vZGVsKG1vZGVsc1tpXSwgb3B0aW9ucykpKSBjb250aW51ZTsKCiAgICAgICAgLy8gSWYgYSBkdXBsaWNhdGUgaXMgZm91bmQsIHByZXZlbnQgaXQgZnJvbSBiZWluZyBhZGRlZCBhbmQKICAgICAgICAvLyBvcHRpb25hbGx5IG1lcmdlIGl0IGludG8gdGhlIGV4aXN0aW5nIG1vZGVsLgogICAgICAgIGlmIChleGlzdGluZyA9IHRoaXMuZ2V0KG1vZGVsKSkgewogICAgICAgICAgaWYgKG9wdGlvbnMucmVtb3ZlKSBtb2RlbE1hcFtleGlzdGluZy5jaWRdID0gdHJ1ZTsKICAgICAgICAgIGlmIChvcHRpb25zLm1lcmdlKSB7CiAgICAgICAgICAgIGV4aXN0aW5nLnNldChtb2RlbC5hdHRyaWJ1dGVzLCBvcHRpb25zKTsKICAgICAgICAgICAgaWYgKHNvcnRhYmxlICYmICFzb3J0ICYmIGV4aXN0aW5nLmhhc0NoYW5nZWQoc29ydEF0dHIpKSBzb3J0ID0gdHJ1ZTsKICAgICAgICAgIH0KCiAgICAgICAgLy8gVGhpcyBpcyBhIG5ldyBtb2RlbCwgcHVzaCBpdCB0byB0aGUgYHRvQWRkYCBsaXN0LgogICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5hZGQpIHsKICAgICAgICAgIHRvQWRkLnB1c2gobW9kZWwpOwoKICAgICAgICAgIC8vIExpc3RlbiB0byBhZGRlZCBtb2RlbHMnIGV2ZW50cywgYW5kIGluZGV4IG1vZGVscyBmb3IgbG9va3VwIGJ5CiAgICAgICAgICAvLyBgaWRgIGFuZCBieSBgY2lkYC4KICAgICAgICAgIG1vZGVsLm9uKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpOwogICAgICAgICAgdGhpcy5fYnlJZFttb2RlbC5jaWRdID0gbW9kZWw7CiAgICAgICAgICBpZiAobW9kZWwuaWQgIT0gbnVsbCkgdGhpcy5fYnlJZFttb2RlbC5pZF0gPSBtb2RlbDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIFJlbW92ZSBub25leGlzdGVudCBtb2RlbHMgaWYgYXBwcm9wcmlhdGUuCiAgICAgIGlmIChvcHRpb25zLnJlbW92ZSkgewogICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7ICsraSkgewogICAgICAgICAgaWYgKCFtb2RlbE1hcFsobW9kZWwgPSB0aGlzLm1vZGVsc1tpXSkuY2lkXSkgdG9SZW1vdmUucHVzaChtb2RlbCk7CiAgICAgICAgfQogICAgICAgIGlmICh0b1JlbW92ZS5sZW5ndGgpIHRoaXMucmVtb3ZlKHRvUmVtb3ZlLCBvcHRpb25zKTsKICAgICAgfQoKICAgICAgLy8gU2VlIGlmIHNvcnRpbmcgaXMgbmVlZGVkLCB1cGRhdGUgYGxlbmd0aGAgYW5kIHNwbGljZSBpbiBuZXcgbW9kZWxzLgogICAgICBpZiAodG9BZGQubGVuZ3RoKSB7CiAgICAgICAgaWYgKHNvcnRhYmxlKSBzb3J0ID0gdHJ1ZTsKICAgICAgICB0aGlzLmxlbmd0aCArPSB0b0FkZC5sZW5ndGg7CiAgICAgICAgaWYgKGF0ICE9IG51bGwpIHsKICAgICAgICAgIHNwbGljZS5hcHBseSh0aGlzLm1vZGVscywgW2F0LCAwXS5jb25jYXQodG9BZGQpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcHVzaC5hcHBseSh0aGlzLm1vZGVscywgdG9BZGQpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gU2lsZW50bHkgc29ydCB0aGUgY29sbGVjdGlvbiBpZiBhcHByb3ByaWF0ZS4KICAgICAgaWYgKHNvcnQpIHRoaXMuc29ydCh7c2lsZW50OiB0cnVlfSk7CgogICAgICBpZiAob3B0aW9ucy5zaWxlbnQpIHJldHVybiB0aGlzOwoKICAgICAgLy8gVHJpZ2dlciBgYWRkYCBldmVudHMuCiAgICAgIGZvciAoaSA9IDAsIGwgPSB0b0FkZC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgICAgICAobW9kZWwgPSB0b0FkZFtpXSkudHJpZ2dlcignYWRkJywgbW9kZWwsIHRoaXMsIG9wdGlvbnMpOwogICAgICB9CgogICAgICAvLyBUcmlnZ2VyIGBzb3J0YCBpZiB0aGUgY29sbGVjdGlvbiB3YXMgc29ydGVkLgogICAgICBpZiAoc29ydCkgdGhpcy50cmlnZ2VyKCdzb3J0JywgdGhpcywgb3B0aW9ucyk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBXaGVuIHlvdSBoYXZlIG1vcmUgaXRlbXMgdGhhbiB5b3Ugd2FudCB0byBhZGQgb3IgcmVtb3ZlIGluZGl2aWR1YWxseSwKICAgIC8vIHlvdSBjYW4gcmVzZXQgdGhlIGVudGlyZSBzZXQgd2l0aCBhIG5ldyBsaXN0IG9mIG1vZGVscywgd2l0aG91dCBmaXJpbmcKICAgIC8vIGFueSBncmFudWxhciBgYWRkYCBvciBgcmVtb3ZlYCBldmVudHMuIEZpcmVzIGByZXNldGAgd2hlbiBmaW5pc2hlZC4KICAgIC8vIFVzZWZ1bCBmb3IgYnVsayBvcGVyYXRpb25zIGFuZCBvcHRpbWl6YXRpb25zLgogICAgcmVzZXQ6IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykgewogICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZSh0aGlzLm1vZGVsc1tpXSk7CiAgICAgIH0KICAgICAgb3B0aW9ucy5wcmV2aW91c01vZGVscyA9IHRoaXMubW9kZWxzOwogICAgICB0aGlzLl9yZXNldCgpOwogICAgICB0aGlzLmFkZChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7CiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMudHJpZ2dlcigncmVzZXQnLCB0aGlzLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIEFkZCBhIG1vZGVsIHRvIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uCiAgICBwdXNoOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykgewogICAgICBtb2RlbCA9IHRoaXMuX3ByZXBhcmVNb2RlbChtb2RlbCwgb3B0aW9ucyk7CiAgICAgIHRoaXMuYWRkKG1vZGVsLCBfLmV4dGVuZCh7YXQ6IHRoaXMubGVuZ3RofSwgb3B0aW9ucykpOwogICAgICByZXR1cm4gbW9kZWw7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi4KICAgIHBvcDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICB2YXIgbW9kZWwgPSB0aGlzLmF0KHRoaXMubGVuZ3RoIC0gMSk7CiAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKCiAgICAvLyBBZGQgYSBtb2RlbCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLgogICAgdW5zaGlmdDogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHsKICAgICAgbW9kZWwgPSB0aGlzLl9wcmVwYXJlTW9kZWwobW9kZWwsIG9wdGlvbnMpOwogICAgICB0aGlzLmFkZChtb2RlbCwgXy5leHRlbmQoe2F0OiAwfSwgb3B0aW9ucykpOwogICAgICByZXR1cm4gbW9kZWw7CiAgICB9LAoKICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGVjdGlvbi4KICAgIHNoaWZ0OiBmdW5jdGlvbihvcHRpb25zKSB7CiAgICAgIHZhciBtb2RlbCA9IHRoaXMuYXQoMCk7CiAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIG1vZGVsOwogICAgfSwKCiAgICAvLyBTbGljZSBvdXQgYSBzdWItYXJyYXkgb2YgbW9kZWxzIGZyb20gdGhlIGNvbGxlY3Rpb24uCiAgICBzbGljZTogZnVuY3Rpb24oYmVnaW4sIGVuZCkgewogICAgICByZXR1cm4gdGhpcy5tb2RlbHMuc2xpY2UoYmVnaW4sIGVuZCk7CiAgICB9LAoKICAgIC8vIEdldCBhIG1vZGVsIGZyb20gdGhlIHNldCBieSBpZC4KICAgIGdldDogZnVuY3Rpb24ob2JqKSB7CiAgICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDsKICAgICAgcmV0dXJuIHRoaXMuX2J5SWRbb2JqLmlkICE9IG51bGwgPyBvYmouaWQgOiBvYmouY2lkIHx8IG9ial07CiAgICB9LAoKICAgIC8vIEdldCB0aGUgbW9kZWwgYXQgdGhlIGdpdmVuIGluZGV4LgogICAgYXQ6IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgIHJldHVybiB0aGlzLm1vZGVsc1tpbmRleF07CiAgICB9LAoKICAgIC8vIFJldHVybiBtb2RlbHMgd2l0aCBtYXRjaGluZyBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIHNpbXBsZSBjYXNlcyBvZgogICAgLy8gYGZpbHRlcmAuCiAgICB3aGVyZTogZnVuY3Rpb24oYXR0cnMsIGZpcnN0KSB7CiAgICAgIGlmIChfLmlzRW1wdHkoYXR0cnMpKSByZXR1cm4gZmlyc3QgPyB2b2lkIDAgOiBbXTsKICAgICAgcmV0dXJuIHRoaXNbZmlyc3QgPyAnZmluZCcgOiAnZmlsdGVyJ10oZnVuY3Rpb24obW9kZWwpIHsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHsKICAgICAgICAgIGlmIChhdHRyc1trZXldICE9PSBtb2RlbC5nZXQoa2V5KSkgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSk7CiAgICB9LAoKICAgIC8vIFJldHVybiB0aGUgZmlyc3QgbW9kZWwgd2l0aCBtYXRjaGluZyBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIHNpbXBsZSBjYXNlcwogICAgLy8gb2YgYGZpbmRgLgogICAgZmluZFdoZXJlOiBmdW5jdGlvbihhdHRycykgewogICAgICByZXR1cm4gdGhpcy53aGVyZShhdHRycywgdHJ1ZSk7CiAgICB9LAoKICAgIC8vIEZvcmNlIHRoZSBjb2xsZWN0aW9uIHRvIHJlLXNvcnQgaXRzZWxmLiBZb3UgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgdW5kZXIKICAgIC8vIG5vcm1hbCBjaXJjdW1zdGFuY2VzLCBhcyB0aGUgc2V0IHdpbGwgbWFpbnRhaW4gc29ydCBvcmRlciBhcyBlYWNoIGl0ZW0KICAgIC8vIGlzIGFkZGVkLgogICAgc29ydDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICBpZiAoIXRoaXMuY29tcGFyYXRvcikgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc29ydCBhIHNldCB3aXRob3V0IGEgY29tcGFyYXRvcicpOwogICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwoKICAgICAgLy8gUnVuIHNvcnQgYmFzZWQgb24gdHlwZSBvZiBgY29tcGFyYXRvcmAuCiAgICAgIGlmIChfLmlzU3RyaW5nKHRoaXMuY29tcGFyYXRvcikgfHwgdGhpcy5jb21wYXJhdG9yLmxlbmd0aCA9PT0gMSkgewogICAgICAgIHRoaXMubW9kZWxzID0gdGhpcy5zb3J0QnkodGhpcy5jb21wYXJhdG9yLCB0aGlzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLm1vZGVscy5zb3J0KF8uYmluZCh0aGlzLmNvbXBhcmF0b3IsIHRoaXMpKTsKICAgICAgfQoKICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy50cmlnZ2VyKCdzb3J0JywgdGhpcywgb3B0aW9ucyk7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBGaWd1cmUgb3V0IHRoZSBzbWFsbGVzdCBpbmRleCBhdCB3aGljaCBhIG1vZGVsIHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcwogICAgLy8gdG8gbWFpbnRhaW4gb3JkZXIuCiAgICBzb3J0ZWRJbmRleDogZnVuY3Rpb24obW9kZWwsIHZhbHVlLCBjb250ZXh0KSB7CiAgICAgIHZhbHVlIHx8ICh2YWx1ZSA9IHRoaXMuY29tcGFyYXRvcik7CiAgICAgIHZhciBpdGVyYXRvciA9IF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IGZ1bmN0aW9uKG1vZGVsKSB7CiAgICAgICAgcmV0dXJuIG1vZGVsLmdldCh2YWx1ZSk7CiAgICAgIH07CiAgICAgIHJldHVybiBfLnNvcnRlZEluZGV4KHRoaXMubW9kZWxzLCBtb2RlbCwgaXRlcmF0b3IsIGNvbnRleHQpOwogICAgfSwKCiAgICAvLyBQbHVjayBhbiBhdHRyaWJ1dGUgZnJvbSBlYWNoIG1vZGVsIGluIHRoZSBjb2xsZWN0aW9uLgogICAgcGx1Y2s6IGZ1bmN0aW9uKGF0dHIpIHsKICAgICAgcmV0dXJuIF8uaW52b2tlKHRoaXMubW9kZWxzLCAnZ2V0JywgYXR0cik7CiAgICB9LAoKICAgIC8vIEZldGNoIHRoZSBkZWZhdWx0IHNldCBvZiBtb2RlbHMgZm9yIHRoaXMgY29sbGVjdGlvbiwgcmVzZXR0aW5nIHRoZQogICAgLy8gY29sbGVjdGlvbiB3aGVuIHRoZXkgYXJyaXZlLiBJZiBgcmVzZXQ6IHRydWVgIGlzIHBhc3NlZCwgdGhlIHJlc3BvbnNlCiAgICAvLyBkYXRhIHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdGhlIGByZXNldGAgbWV0aG9kIGluc3RlYWQgb2YgYHNldGAuCiAgICBmZXRjaDogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTsKICAgICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7CiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzOwogICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7CiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHsKICAgICAgICB2YXIgbWV0aG9kID0gb3B0aW9ucy5yZXNldCA/ICdyZXNldCcgOiAnc2V0JzsKICAgICAgICBjb2xsZWN0aW9uW21ldGhvZF0ocmVzcCwgb3B0aW9ucyk7CiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MoY29sbGVjdGlvbiwgcmVzcCwgb3B0aW9ucyk7CiAgICAgICAgY29sbGVjdGlvbi50cmlnZ2VyKCdzeW5jJywgY29sbGVjdGlvbiwgcmVzcCwgb3B0aW9ucyk7CiAgICAgIH07CiAgICAgIHdyYXBFcnJvcih0aGlzLCBvcHRpb25zKTsKICAgICAgcmV0dXJuIHRoaXMuc3luYygncmVhZCcsIHRoaXMsIG9wdGlvbnMpOwogICAgfSwKCiAgICAvLyBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgYSBtb2RlbCBpbiB0aGlzIGNvbGxlY3Rpb24uIEFkZCB0aGUgbW9kZWwgdG8gdGhlCiAgICAvLyBjb2xsZWN0aW9uIGltbWVkaWF0ZWx5LCB1bmxlc3MgYHdhaXQ6IHRydWVgIGlzIHBhc3NlZCwgaW4gd2hpY2ggY2FzZSB3ZQogICAgLy8gd2FpdCBmb3IgdGhlIHNlcnZlciB0byBhZ3JlZS4KICAgIGNyZWF0ZTogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307CiAgICAgIGlmICghKG1vZGVsID0gdGhpcy5fcHJlcGFyZU1vZGVsKG1vZGVsLCBvcHRpb25zKSkpIHJldHVybiBmYWxzZTsKICAgICAgaWYgKCFvcHRpb25zLndhaXQpIHRoaXMuYWRkKG1vZGVsLCBvcHRpb25zKTsKICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzOwogICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzczsKICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCkgewogICAgICAgIGlmIChvcHRpb25zLndhaXQpIGNvbGxlY3Rpb24uYWRkKG1vZGVsLCBvcHRpb25zKTsKICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7CiAgICAgIH07CiAgICAgIG1vZGVsLnNhdmUobnVsbCwgb3B0aW9ucyk7CiAgICAgIHJldHVybiBtb2RlbDsKICAgIH0sCgogICAgLy8gKipwYXJzZSoqIGNvbnZlcnRzIGEgcmVzcG9uc2UgaW50byBhIGxpc3Qgb2YgbW9kZWxzIHRvIGJlIGFkZGVkIHRvIHRoZQogICAgLy8gY29sbGVjdGlvbi4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaXMganVzdCB0byBwYXNzIGl0IHRocm91Z2guCiAgICBwYXJzZTogZnVuY3Rpb24ocmVzcCwgb3B0aW9ucykgewogICAgICByZXR1cm4gcmVzcDsKICAgIH0sCgogICAgLy8gQ3JlYXRlIGEgbmV3IGNvbGxlY3Rpb24gd2l0aCBhbiBpZGVudGljYWwgbGlzdCBvZiBtb2RlbHMgYXMgdGhpcyBvbmUuCiAgICBjbG9uZTogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLm1vZGVscyk7CiAgICB9LAoKICAgIC8vIFByaXZhdGUgbWV0aG9kIHRvIHJlc2V0IGFsbCBpbnRlcm5hbCBzdGF0ZS4gQ2FsbGVkIHdoZW4gdGhlIGNvbGxlY3Rpb24KICAgIC8vIGlzIGZpcnN0IGluaXRpYWxpemVkIG9yIHJlc2V0LgogICAgX3Jlc2V0OiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5sZW5ndGggPSAwOwogICAgICB0aGlzLm1vZGVscyA9IFtdOwogICAgICB0aGlzLl9ieUlkICA9IHt9OwogICAgfSwKCiAgICAvLyBQcmVwYXJlIGEgaGFzaCBvZiBhdHRyaWJ1dGVzIChvciBvdGhlciBtb2RlbCkgdG8gYmUgYWRkZWQgdG8gdGhpcwogICAgLy8gY29sbGVjdGlvbi4KICAgIF9wcmVwYXJlTW9kZWw6IGZ1bmN0aW9uKGF0dHJzLCBvcHRpb25zKSB7CiAgICAgIGlmIChhdHRycyBpbnN0YW5jZW9mIE1vZGVsKSB7CiAgICAgICAgaWYgKCFhdHRycy5jb2xsZWN0aW9uKSBhdHRycy5jb2xsZWN0aW9uID0gdGhpczsKICAgICAgICByZXR1cm4gYXR0cnM7CiAgICAgIH0KICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsKICAgICAgb3B0aW9ucy5jb2xsZWN0aW9uID0gdGhpczsKICAgICAgdmFyIG1vZGVsID0gbmV3IHRoaXMubW9kZWwoYXR0cnMsIG9wdGlvbnMpOwogICAgICBpZiAoIW1vZGVsLl92YWxpZGF0ZShhdHRycywgb3B0aW9ucykpIHsKICAgICAgICB0aGlzLnRyaWdnZXIoJ2ludmFsaWQnLCB0aGlzLCBhdHRycywgb3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHJldHVybiBtb2RlbDsKICAgIH0sCgogICAgLy8gSW50ZXJuYWwgbWV0aG9kIHRvIHNldmVyIGEgbW9kZWwncyB0aWVzIHRvIGEgY29sbGVjdGlvbi4KICAgIF9yZW1vdmVSZWZlcmVuY2U6IGZ1bmN0aW9uKG1vZGVsKSB7CiAgICAgIGlmICh0aGlzID09PSBtb2RlbC5jb2xsZWN0aW9uKSBkZWxldGUgbW9kZWwuY29sbGVjdGlvbjsKICAgICAgbW9kZWwub2ZmKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpOwogICAgfSwKCiAgICAvLyBJbnRlcm5hbCBtZXRob2QgY2FsbGVkIGV2ZXJ5IHRpbWUgYSBtb2RlbCBpbiB0aGUgc2V0IGZpcmVzIGFuIGV2ZW50LgogICAgLy8gU2V0cyBuZWVkIHRvIHVwZGF0ZSB0aGVpciBpbmRleGVzIHdoZW4gbW9kZWxzIGNoYW5nZSBpZHMuIEFsbCBvdGhlcgogICAgLy8gZXZlbnRzIHNpbXBseSBwcm94eSB0aHJvdWdoLiAiYWRkIiBhbmQgInJlbW92ZSIgZXZlbnRzIHRoYXQgb3JpZ2luYXRlCiAgICAvLyBpbiBvdGhlciBjb2xsZWN0aW9ucyBhcmUgaWdub3JlZC4KICAgIF9vbk1vZGVsRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBtb2RlbCwgY29sbGVjdGlvbiwgb3B0aW9ucykgewogICAgICBpZiAoKGV2ZW50ID09PSAnYWRkJyB8fCBldmVudCA9PT0gJ3JlbW92ZScpICYmIGNvbGxlY3Rpb24gIT09IHRoaXMpIHJldHVybjsKICAgICAgaWYgKGV2ZW50ID09PSAnZGVzdHJveScpIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTsKICAgICAgaWYgKG1vZGVsICYmIGV2ZW50ID09PSAnY2hhbmdlOicgKyBtb2RlbC5pZEF0dHJpYnV0ZSkgewogICAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLnByZXZpb3VzKG1vZGVsLmlkQXR0cmlidXRlKV07CiAgICAgICAgaWYgKG1vZGVsLmlkICE9IG51bGwpIHRoaXMuX2J5SWRbbW9kZWwuaWRdID0gbW9kZWw7CiAgICAgIH0KICAgICAgdGhpcy50cmlnZ2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogIH0pOwoKICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB3ZSB3YW50IHRvIGltcGxlbWVudCBvbiB0aGUgQ29sbGVjdGlvbi4KICAvLyA5MCUgb2YgdGhlIGNvcmUgdXNlZnVsbmVzcyBvZiBCYWNrYm9uZSBDb2xsZWN0aW9ucyBpcyBhY3R1YWxseSBpbXBsZW1lbnRlZAogIC8vIHJpZ2h0IGhlcmU6CiAgdmFyIG1ldGhvZHMgPSBbJ2ZvckVhY2gnLCAnZWFjaCcsICdtYXAnLCAnY29sbGVjdCcsICdyZWR1Y2UnLCAnZm9sZGwnLAogICAgJ2luamVjdCcsICdyZWR1Y2VSaWdodCcsICdmb2xkcicsICdmaW5kJywgJ2RldGVjdCcsICdmaWx0ZXInLCAnc2VsZWN0JywKICAgICdyZWplY3QnLCAnZXZlcnknLCAnYWxsJywgJ3NvbWUnLCAnYW55JywgJ2luY2x1ZGUnLCAnY29udGFpbnMnLCAnaW52b2tlJywKICAgICdtYXgnLCAnbWluJywgJ3RvQXJyYXknLCAnc2l6ZScsICdmaXJzdCcsICdoZWFkJywgJ3Rha2UnLCAnaW5pdGlhbCcsICdyZXN0JywKICAgICd0YWlsJywgJ2Ryb3AnLCAnbGFzdCcsICd3aXRob3V0JywgJ2luZGV4T2YnLCAnc2h1ZmZsZScsICdsYXN0SW5kZXhPZicsCiAgICAnaXNFbXB0eScsICdjaGFpbiddOwoKICAvLyBNaXggaW4gZWFjaCBVbmRlcnNjb3JlIG1ldGhvZCBhcyBhIHByb3h5IHRvIGBDb2xsZWN0aW9uI21vZGVsc2AuCiAgXy5lYWNoKG1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkgewogICAgQ29sbGVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgYXJncy51bnNoaWZ0KHRoaXMubW9kZWxzKTsKICAgICAgcmV0dXJuIF9bbWV0aG9kXS5hcHBseShfLCBhcmdzKTsKICAgIH07CiAgfSk7CgogIC8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHRha2UgYSBwcm9wZXJ0eSBuYW1lIGFzIGFuIGFyZ3VtZW50LgogIHZhciBhdHRyaWJ1dGVNZXRob2RzID0gWydncm91cEJ5JywgJ2NvdW50QnknLCAnc29ydEJ5J107CgogIC8vIFVzZSBhdHRyaWJ1dGVzIGluc3RlYWQgb2YgcHJvcGVydGllcy4KICBfLmVhY2goYXR0cmlidXRlTWV0aG9kcywgZnVuY3Rpb24obWV0aG9kKSB7CiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHsKICAgICAgdmFyIGl0ZXJhdG9yID0gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlIDogZnVuY3Rpb24obW9kZWwpIHsKICAgICAgICByZXR1cm4gbW9kZWwuZ2V0KHZhbHVlKTsKICAgICAgfTsKICAgICAgcmV0dXJuIF9bbWV0aG9kXSh0aGlzLm1vZGVscywgaXRlcmF0b3IsIGNvbnRleHQpOwogICAgfTsKICB9KTsKCiAgLy8gQmFja2JvbmUuVmlldwogIC8vIC0tLS0tLS0tLS0tLS0KCiAgLy8gQmFja2JvbmUgVmlld3MgYXJlIGFsbW9zdCBtb3JlIGNvbnZlbnRpb24gdGhhbiB0aGV5IGFyZSBhY3R1YWwgY29kZS4gQSBWaWV3CiAgLy8gaXMgc2ltcGx5IGEgSmF2YVNjcmlwdCBvYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbG9naWNhbCBjaHVuayBvZiBVSSBpbiB0aGUKICAvLyBET00uIFRoaXMgbWlnaHQgYmUgYSBzaW5nbGUgaXRlbSwgYW4gZW50aXJlIGxpc3QsIGEgc2lkZWJhciBvciBwYW5lbCwgb3IKICAvLyBldmVuIHRoZSBzdXJyb3VuZGluZyBmcmFtZSB3aGljaCB3cmFwcyB5b3VyIHdob2xlIGFwcC4gRGVmaW5pbmcgYSBjaHVuayBvZgogIC8vIFVJIGFzIGEgKipWaWV3KiogYWxsb3dzIHlvdSB0byBkZWZpbmUgeW91ciBET00gZXZlbnRzIGRlY2xhcmF0aXZlbHksIHdpdGhvdXQKICAvLyBoYXZpbmcgdG8gd29ycnkgYWJvdXQgcmVuZGVyIG9yZGVyIC4uLiBhbmQgbWFrZXMgaXQgZWFzeSBmb3IgdGhlIHZpZXcgdG8KICAvLyByZWFjdCB0byBzcGVjaWZpYyBjaGFuZ2VzIGluIHRoZSBzdGF0ZSBvZiB5b3VyIG1vZGVscy4KCiAgLy8gQ3JlYXRpbmcgYSBCYWNrYm9uZS5WaWV3IGNyZWF0ZXMgaXRzIGluaXRpYWwgZWxlbWVudCBvdXRzaWRlIG9mIHRoZSBET00sCiAgLy8gaWYgYW4gZXhpc3RpbmcgZWxlbWVudCBpcyBub3QgcHJvdmlkZWQuLi4KICB2YXIgVmlldyA9IEJhY2tib25lLlZpZXcgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ3ZpZXcnKTsKICAgIHRoaXMuX2NvbmZpZ3VyZShvcHRpb25zIHx8IHt9KTsKICAgIHRoaXMuX2Vuc3VyZUVsZW1lbnQoKTsKICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpOwogIH07CgogIC8vIENhY2hlZCByZWdleCB0byBzcGxpdCBrZXlzIGZvciBgZGVsZWdhdGVgLgogIHZhciBkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIgPSAvXihcUyspXHMqKC4qKSQvOwoKICAvLyBMaXN0IG9mIHZpZXcgb3B0aW9ucyB0byBiZSBtZXJnZWQgYXMgcHJvcGVydGllcy4KICB2YXIgdmlld09wdGlvbnMgPSBbJ21vZGVsJywgJ2NvbGxlY3Rpb24nLCAnZWwnLCAnaWQnLCAnYXR0cmlidXRlcycsICdjbGFzc05hbWUnLCAndGFnTmFtZScsICdldmVudHMnXTsKCiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLlZpZXcqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogIF8uZXh0ZW5kKFZpZXcucHJvdG90eXBlLCBFdmVudHMsIHsKCiAgICAvLyBUaGUgZGVmYXVsdCBgdGFnTmFtZWAgb2YgYSBWaWV3J3MgZWxlbWVudCBpcyBgImRpdiJgLgogICAgdGFnTmFtZTogJ2RpdicsCgogICAgLy8galF1ZXJ5IGRlbGVnYXRlIGZvciBlbGVtZW50IGxvb2t1cCwgc2NvcGVkIHRvIERPTSBlbGVtZW50cyB3aXRoaW4gdGhlCiAgICAvLyBjdXJyZW50IHZpZXcuIFRoaXMgc2hvdWxkIGJlIHByZWZlcmVkIHRvIGdsb2JhbCBsb29rdXBzIHdoZXJlIHBvc3NpYmxlLgogICAgJDogZnVuY3Rpb24oc2VsZWN0b3IpIHsKICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoc2VsZWN0b3IpOwogICAgfSwKCiAgICAvLyBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd24KICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLgogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LAoKICAgIC8vICoqcmVuZGVyKiogaXMgdGhlIGNvcmUgZnVuY3Rpb24gdGhhdCB5b3VyIHZpZXcgc2hvdWxkIG92ZXJyaWRlLCBpbiBvcmRlcgogICAgLy8gdG8gcG9wdWxhdGUgaXRzIGVsZW1lbnQgKGB0aGlzLmVsYCksIHdpdGggdGhlIGFwcHJvcHJpYXRlIEhUTUwuIFRoZQogICAgLy8gY29udmVudGlvbiBpcyBmb3IgKipyZW5kZXIqKiB0byBhbHdheXMgcmV0dXJuIGB0aGlzYC4KICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSwKCiAgICAvLyBSZW1vdmUgdGhpcyB2aWV3IGJ5IHRha2luZyB0aGUgZWxlbWVudCBvdXQgb2YgdGhlIERPTSwgYW5kIHJlbW92aW5nIGFueQogICAgLy8gYXBwbGljYWJsZSBCYWNrYm9uZS5FdmVudHMgbGlzdGVuZXJzLgogICAgcmVtb3ZlOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy4kZWwucmVtb3ZlKCk7CiAgICAgIHRoaXMuc3RvcExpc3RlbmluZygpOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gQ2hhbmdlIHRoZSB2aWV3J3MgZWxlbWVudCAoYHRoaXMuZWxgIHByb3BlcnR5KSwgaW5jbHVkaW5nIGV2ZW50CiAgICAvLyByZS1kZWxlZ2F0aW9uLgogICAgc2V0RWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgZGVsZWdhdGUpIHsKICAgICAgaWYgKHRoaXMuJGVsKSB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTsKICAgICAgdGhpcy4kZWwgPSBlbGVtZW50IGluc3RhbmNlb2YgQmFja2JvbmUuJCA/IGVsZW1lbnQgOiBCYWNrYm9uZS4kKGVsZW1lbnQpOwogICAgICB0aGlzLmVsID0gdGhpcy4kZWxbMF07CiAgICAgIGlmIChkZWxlZ2F0ZSAhPT0gZmFsc2UpIHRoaXMuZGVsZWdhdGVFdmVudHMoKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFNldCBjYWxsYmFja3MsIHdoZXJlIGB0aGlzLmV2ZW50c2AgaXMgYSBoYXNoIG9mCiAgICAvLwogICAgLy8gKnsiZXZlbnQgc2VsZWN0b3IiOiAiY2FsbGJhY2sifSoKICAgIC8vCiAgICAvLyAgICAgewogICAgLy8gICAgICAgJ21vdXNlZG93biAudGl0bGUnOiAgJ2VkaXQnLAogICAgLy8gICAgICAgJ2NsaWNrIC5idXR0b24nOiAgICAgJ3NhdmUnCiAgICAvLyAgICAgICAnY2xpY2sgLm9wZW4nOiAgICAgICBmdW5jdGlvbihlKSB7IC4uLiB9CiAgICAvLyAgICAgfQogICAgLy8KICAgIC8vIHBhaXJzLiBDYWxsYmFja3Mgd2lsbCBiZSBib3VuZCB0byB0aGUgdmlldywgd2l0aCBgdGhpc2Agc2V0IHByb3Blcmx5LgogICAgLy8gVXNlcyBldmVudCBkZWxlZ2F0aW9uIGZvciBlZmZpY2llbmN5LgogICAgLy8gT21pdHRpbmcgdGhlIHNlbGVjdG9yIGJpbmRzIHRoZSBldmVudCB0byBgdGhpcy5lbGAuCiAgICAvLyBUaGlzIG9ubHkgd29ya3MgZm9yIGRlbGVnYXRlLWFibGUgZXZlbnRzOiBub3QgYGZvY3VzYCwgYGJsdXJgLCBhbmQKICAgIC8vIG5vdCBgY2hhbmdlYCwgYHN1Ym1pdGAsIGFuZCBgcmVzZXRgIGluIEludGVybmV0IEV4cGxvcmVyLgogICAgZGVsZWdhdGVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cykgewogICAgICBpZiAoIShldmVudHMgfHwgKGV2ZW50cyA9IF8ucmVzdWx0KHRoaXMsICdldmVudHMnKSkpKSByZXR1cm4gdGhpczsKICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7CiAgICAgIGZvciAodmFyIGtleSBpbiBldmVudHMpIHsKICAgICAgICB2YXIgbWV0aG9kID0gZXZlbnRzW2tleV07CiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24obWV0aG9kKSkgbWV0aG9kID0gdGhpc1tldmVudHNba2V5XV07CiAgICAgICAgaWYgKCFtZXRob2QpIGNvbnRpbnVlOwoKICAgICAgICB2YXIgbWF0Y2ggPSBrZXkubWF0Y2goZGVsZWdhdGVFdmVudFNwbGl0dGVyKTsKICAgICAgICB2YXIgZXZlbnROYW1lID0gbWF0Y2hbMV0sIHNlbGVjdG9yID0gbWF0Y2hbMl07CiAgICAgICAgbWV0aG9kID0gXy5iaW5kKG1ldGhvZCwgdGhpcyk7CiAgICAgICAgZXZlbnROYW1lICs9ICcuZGVsZWdhdGVFdmVudHMnICsgdGhpcy5jaWQ7CiAgICAgICAgaWYgKHNlbGVjdG9yID09PSAnJykgewogICAgICAgICAgdGhpcy4kZWwub24oZXZlbnROYW1lLCBtZXRob2QpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLiRlbC5vbihldmVudE5hbWUsIHNlbGVjdG9yLCBtZXRob2QpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gQ2xlYXJzIGFsbCBjYWxsYmFja3MgcHJldmlvdXNseSBib3VuZCB0byB0aGUgdmlldyB3aXRoIGBkZWxlZ2F0ZUV2ZW50c2AuCiAgICAvLyBZb3UgdXN1YWxseSBkb24ndCBuZWVkIHRvIHVzZSB0aGlzLCBidXQgbWF5IHdpc2ggdG8gaWYgeW91IGhhdmUgbXVsdGlwbGUKICAgIC8vIEJhY2tib25lIHZpZXdzIGF0dGFjaGVkIHRvIHRoZSBzYW1lIERPTSBlbGVtZW50LgogICAgdW5kZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuJGVsLm9mZignLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIFBlcmZvcm1zIHRoZSBpbml0aWFsIGNvbmZpZ3VyYXRpb24gb2YgYSBWaWV3IHdpdGggYSBzZXQgb2Ygb3B0aW9ucy4KICAgIC8vIEtleXMgd2l0aCBzcGVjaWFsIG1lYW5pbmcgKihlLmcuIG1vZGVsLCBjb2xsZWN0aW9uLCBpZCwgY2xhc3NOYW1lKSogYXJlCiAgICAvLyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGUgdmlldy4gIFNlZSBgdmlld09wdGlvbnNgIGZvciBhbiBleGhhdXN0aXZlCiAgICAvLyBsaXN0LgogICAgX2NvbmZpZ3VyZTogZnVuY3Rpb24ob3B0aW9ucykgewogICAgICBpZiAodGhpcy5vcHRpb25zKSBvcHRpb25zID0gXy5leHRlbmQoe30sIF8ucmVzdWx0KHRoaXMsICdvcHRpb25zJyksIG9wdGlvbnMpOwogICAgICBfLmV4dGVuZCh0aGlzLCBfLnBpY2sob3B0aW9ucywgdmlld09wdGlvbnMpKTsKICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICAgIH0sCgogICAgLy8gRW5zdXJlIHRoYXQgdGhlIFZpZXcgaGFzIGEgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uCiAgICAvLyBJZiBgdGhpcy5lbGAgaXMgYSBzdHJpbmcsIHBhc3MgaXQgdGhyb3VnaCBgJCgpYCwgdGFrZSB0aGUgZmlyc3QKICAgIC8vIG1hdGNoaW5nIGVsZW1lbnQsIGFuZCByZS1hc3NpZ24gaXQgdG8gYGVsYC4gT3RoZXJ3aXNlLCBjcmVhdGUKICAgIC8vIGFuIGVsZW1lbnQgZnJvbSB0aGUgYGlkYCwgYGNsYXNzTmFtZWAgYW5kIGB0YWdOYW1lYCBwcm9wZXJ0aWVzLgogICAgX2Vuc3VyZUVsZW1lbnQ6IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIXRoaXMuZWwpIHsKICAgICAgICB2YXIgYXR0cnMgPSBfLmV4dGVuZCh7fSwgXy5yZXN1bHQodGhpcywgJ2F0dHJpYnV0ZXMnKSk7CiAgICAgICAgaWYgKHRoaXMuaWQpIGF0dHJzLmlkID0gXy5yZXN1bHQodGhpcywgJ2lkJyk7CiAgICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lKSBhdHRyc1snY2xhc3MnXSA9IF8ucmVzdWx0KHRoaXMsICdjbGFzc05hbWUnKTsKICAgICAgICB2YXIgJGVsID0gQmFja2JvbmUuJCgnPCcgKyBfLnJlc3VsdCh0aGlzLCAndGFnTmFtZScpICsgJz4nKS5hdHRyKGF0dHJzKTsKICAgICAgICB0aGlzLnNldEVsZW1lbnQoJGVsLCBmYWxzZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zZXRFbGVtZW50KF8ucmVzdWx0KHRoaXMsICdlbCcpLCBmYWxzZSk7CiAgICAgIH0KICAgIH0KCiAgfSk7CgogIC8vIEJhY2tib25lLnN5bmMKICAvLyAtLS0tLS0tLS0tLS0tCgogIC8vIE92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gdG8gY2hhbmdlIHRoZSBtYW5uZXIgaW4gd2hpY2ggQmFja2JvbmUgcGVyc2lzdHMKICAvLyBtb2RlbHMgdG8gdGhlIHNlcnZlci4gWW91IHdpbGwgYmUgcGFzc2VkIHRoZSB0eXBlIG9mIHJlcXVlc3QsIGFuZCB0aGUKICAvLyBtb2RlbCBpbiBxdWVzdGlvbi4gQnkgZGVmYXVsdCwgbWFrZXMgYSBSRVNUZnVsIEFqYXggcmVxdWVzdAogIC8vIHRvIHRoZSBtb2RlbCdzIGB1cmwoKWAuIFNvbWUgcG9zc2libGUgY3VzdG9taXphdGlvbnMgY291bGQgYmU6CiAgLy8KICAvLyAqIFVzZSBgc2V0VGltZW91dGAgdG8gYmF0Y2ggcmFwaWQtZmlyZSB1cGRhdGVzIGludG8gYSBzaW5nbGUgcmVxdWVzdC4KICAvLyAqIFNlbmQgdXAgdGhlIG1vZGVscyBhcyBYTUwgaW5zdGVhZCBvZiBKU09OLgogIC8vICogUGVyc2lzdCBtb2RlbHMgdmlhIFdlYlNvY2tldHMgaW5zdGVhZCBvZiBBamF4LgogIC8vCiAgLy8gVHVybiBvbiBgQmFja2JvbmUuZW11bGF0ZUhUVFBgIGluIG9yZGVyIHRvIHNlbmQgYFBVVGAgYW5kIGBERUxFVEVgIHJlcXVlc3RzCiAgLy8gYXMgYFBPU1RgLCB3aXRoIGEgYF9tZXRob2RgIHBhcmFtZXRlciBjb250YWluaW5nIHRoZSB0cnVlIEhUVFAgbWV0aG9kLAogIC8vIGFzIHdlbGwgYXMgYWxsIHJlcXVlc3RzIHdpdGggdGhlIGJvZHkgYXMgYGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZGAKICAvLyBpbnN0ZWFkIG9mIGBhcHBsaWNhdGlvbi9qc29uYCB3aXRoIHRoZSBtb2RlbCBpbiBhIHBhcmFtIG5hbWVkIGBtb2RlbGAuCiAgLy8gVXNlZnVsIHdoZW4gaW50ZXJmYWNpbmcgd2l0aCBzZXJ2ZXItc2lkZSBsYW5ndWFnZXMgbGlrZSAqKlBIUCoqIHRoYXQgbWFrZQogIC8vIGl0IGRpZmZpY3VsdCB0byByZWFkIHRoZSBib2R5IG9mIGBQVVRgIHJlcXVlc3RzLgogIEJhY2tib25lLnN5bmMgPSBmdW5jdGlvbihtZXRob2QsIG1vZGVsLCBvcHRpb25zKSB7CiAgICB2YXIgdHlwZSA9IG1ldGhvZE1hcFttZXRob2RdOwoKICAgIC8vIERlZmF1bHQgb3B0aW9ucywgdW5sZXNzIHNwZWNpZmllZC4KICAgIF8uZGVmYXVsdHMob3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KSwgewogICAgICBlbXVsYXRlSFRUUDogQmFja2JvbmUuZW11bGF0ZUhUVFAsCiAgICAgIGVtdWxhdGVKU09OOiBCYWNrYm9uZS5lbXVsYXRlSlNPTgogICAgfSk7CgogICAgLy8gRGVmYXVsdCBKU09OLXJlcXVlc3Qgb3B0aW9ucy4KICAgIHZhciBwYXJhbXMgPSB7dHlwZTogdHlwZSwgZGF0YVR5cGU6ICdqc29uJ307CgogICAgLy8gRW5zdXJlIHRoYXQgd2UgaGF2ZSBhIFVSTC4KICAgIGlmICghb3B0aW9ucy51cmwpIHsKICAgICAgcGFyYW1zLnVybCA9IF8ucmVzdWx0KG1vZGVsLCAndXJsJykgfHwgdXJsRXJyb3IoKTsKICAgIH0KCiAgICAvLyBFbnN1cmUgdGhhdCB3ZSBoYXZlIHRoZSBhcHByb3ByaWF0ZSByZXF1ZXN0IGRhdGEuCiAgICBpZiAob3B0aW9ucy5kYXRhID09IG51bGwgJiYgbW9kZWwgJiYgKG1ldGhvZCA9PT0gJ2NyZWF0ZScgfHwgbWV0aG9kID09PSAndXBkYXRlJyB8fCBtZXRob2QgPT09ICdwYXRjaCcpKSB7CiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJzsKICAgICAgcGFyYW1zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmF0dHJzIHx8IG1vZGVsLnRvSlNPTihvcHRpb25zKSk7CiAgICB9CgogICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSlNPTiBieSBlbmNvZGluZyB0aGUgcmVxdWVzdCBpbnRvIGFuIEhUTUwtZm9ybS4KICAgIGlmIChvcHRpb25zLmVtdWxhdGVKU09OKSB7CiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOwogICAgICBwYXJhbXMuZGF0YSA9IHBhcmFtcy5kYXRhID8ge21vZGVsOiBwYXJhbXMuZGF0YX0gOiB7fTsKICAgIH0KCiAgICAvLyBGb3Igb2xkZXIgc2VydmVycywgZW11bGF0ZSBIVFRQIGJ5IG1pbWlja2luZyB0aGUgSFRUUCBtZXRob2Qgd2l0aCBgX21ldGhvZGAKICAgIC8vIEFuZCBhbiBgWC1IVFRQLU1ldGhvZC1PdmVycmlkZWAgaGVhZGVyLgogICAgaWYgKG9wdGlvbnMuZW11bGF0ZUhUVFAgJiYgKHR5cGUgPT09ICdQVVQnIHx8IHR5cGUgPT09ICdERUxFVEUnIHx8IHR5cGUgPT09ICdQQVRDSCcpKSB7CiAgICAgIHBhcmFtcy50eXBlID0gJ1BPU1QnOwogICAgICBpZiAob3B0aW9ucy5lbXVsYXRlSlNPTikgcGFyYW1zLmRhdGEuX21ldGhvZCA9IHR5cGU7CiAgICAgIHZhciBiZWZvcmVTZW5kID0gb3B0aW9ucy5iZWZvcmVTZW5kOwogICAgICBvcHRpb25zLmJlZm9yZVNlbmQgPSBmdW5jdGlvbih4aHIpIHsKICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1IVFRQLU1ldGhvZC1PdmVycmlkZScsIHR5cGUpOwogICAgICAgIGlmIChiZWZvcmVTZW5kKSByZXR1cm4gYmVmb3JlU2VuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfQoKICAgIC8vIERvbid0IHByb2Nlc3MgZGF0YSBvbiBhIG5vbi1HRVQgcmVxdWVzdC4KICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ0dFVCcgJiYgIW9wdGlvbnMuZW11bGF0ZUpTT04pIHsKICAgICAgcGFyYW1zLnByb2Nlc3NEYXRhID0gZmFsc2U7CiAgICB9CgogICAgLy8gSWYgd2UncmUgc2VuZGluZyBhIGBQQVRDSGAgcmVxdWVzdCwgYW5kIHdlJ3JlIGluIGFuIG9sZCBJbnRlcm5ldCBFeHBsb3JlcgogICAgLy8gdGhhdCBzdGlsbCBoYXMgQWN0aXZlWCBlbmFibGVkIGJ5IGRlZmF1bHQsIG92ZXJyaWRlIGpRdWVyeSB0byB1c2UgdGhhdAogICAgLy8gZm9yIFhIUiBpbnN0ZWFkLiBSZW1vdmUgdGhpcyBsaW5lIHdoZW4galF1ZXJ5IHN1cHBvcnRzIGBQQVRDSGAgb24gSUU4LgogICAgaWYgKHBhcmFtcy50eXBlID09PSAnUEFUQ0gnICYmIHdpbmRvdy5BY3RpdmVYT2JqZWN0ICYmCiAgICAgICAgICAhKHdpbmRvdy5leHRlcm5hbCAmJiB3aW5kb3cuZXh0ZXJuYWwubXNBY3RpdmVYRmlsdGVyaW5nRW5hYmxlZCkpIHsKICAgICAgcGFyYW1zLnhociA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICAgICAgfTsKICAgIH0KCiAgICAvLyBNYWtlIHRoZSByZXF1ZXN0LCBhbGxvd2luZyB0aGUgdXNlciB0byBvdmVycmlkZSBhbnkgQWpheCBvcHRpb25zLgogICAgdmFyIHhociA9IG9wdGlvbnMueGhyID0gQmFja2JvbmUuYWpheChfLmV4dGVuZChwYXJhbXMsIG9wdGlvbnMpKTsKICAgIG1vZGVsLnRyaWdnZXIoJ3JlcXVlc3QnLCBtb2RlbCwgeGhyLCBvcHRpb25zKTsKICAgIHJldHVybiB4aHI7CiAgfTsKCiAgLy8gTWFwIGZyb20gQ1JVRCB0byBIVFRQIGZvciBvdXIgZGVmYXVsdCBgQmFja2JvbmUuc3luY2AgaW1wbGVtZW50YXRpb24uCiAgdmFyIG1ldGhvZE1hcCA9IHsKICAgICdjcmVhdGUnOiAnUE9TVCcsCiAgICAndXBkYXRlJzogJ1BVVCcsCiAgICAncGF0Y2gnOiAgJ1BBVENIJywKICAgICdkZWxldGUnOiAnREVMRVRFJywKICAgICdyZWFkJzogICAnR0VUJwogIH07CgogIC8vIFNldCB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgQmFja2JvbmUuYWpheGAgdG8gcHJveHkgdGhyb3VnaCB0byBgJGAuCiAgLy8gT3ZlcnJpZGUgdGhpcyBpZiB5b3UnZCBsaWtlIHRvIHVzZSBhIGRpZmZlcmVudCBsaWJyYXJ5LgogIEJhY2tib25lLmFqYXggPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBCYWNrYm9uZS4kLmFqYXguYXBwbHkoQmFja2JvbmUuJCwgYXJndW1lbnRzKTsKICB9OwoKICAvLyBCYWNrYm9uZS5Sb3V0ZXIKICAvLyAtLS0tLS0tLS0tLS0tLS0KCiAgLy8gUm91dGVycyBtYXAgZmF1eC1VUkxzIHRvIGFjdGlvbnMsIGFuZCBmaXJlIGV2ZW50cyB3aGVuIHJvdXRlcyBhcmUKICAvLyBtYXRjaGVkLiBDcmVhdGluZyBhIG5ldyBvbmUgc2V0cyBpdHMgYHJvdXRlc2AgaGFzaCwgaWYgbm90IHNldCBzdGF0aWNhbGx5LgogIHZhciBSb3V0ZXIgPSBCYWNrYm9uZS5Sb3V0ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7CiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOwogICAgaWYgKG9wdGlvbnMucm91dGVzKSB0aGlzLnJvdXRlcyA9IG9wdGlvbnMucm91dGVzOwogICAgdGhpcy5fYmluZFJvdXRlcygpOwogICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKCiAgLy8gQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm9yIG1hdGNoaW5nIG5hbWVkIHBhcmFtIHBhcnRzIGFuZCBzcGxhdHRlZAogIC8vIHBhcnRzIG9mIHJvdXRlIHN0cmluZ3MuCiAgdmFyIG9wdGlvbmFsUGFyYW0gPSAvXCgoLio/KVwpL2c7CiAgdmFyIG5hbWVkUGFyYW0gICAgPSAvKFwoXD8pPzpcdysvZzsKICB2YXIgc3BsYXRQYXJhbSAgICA9IC9cKlx3Ky9nOwogIHZhciBlc2NhcGVSZWdFeHAgID0gL1tcLXt9XFtcXSs/LixcXFxeJHwjXHNdL2c7CgogIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5Sb3V0ZXIqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLgogIF8uZXh0ZW5kKFJvdXRlci5wcm90b3R5cGUsIEV2ZW50cywgewoKICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93bgogICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sCgogICAgLy8gTWFudWFsbHkgYmluZCBhIHNpbmdsZSBuYW1lZCByb3V0ZSB0byBhIGNhbGxiYWNrLiBGb3IgZXhhbXBsZToKICAgIC8vCiAgICAvLyAgICAgdGhpcy5yb3V0ZSgnc2VhcmNoLzpxdWVyeS9wOm51bScsICdzZWFyY2gnLCBmdW5jdGlvbihxdWVyeSwgbnVtKSB7CiAgICAvLyAgICAgICAuLi4KICAgIC8vICAgICB9KTsKICAgIC8vCiAgICByb3V0ZTogZnVuY3Rpb24ocm91dGUsIG5hbWUsIGNhbGxiYWNrKSB7CiAgICAgIGlmICghXy5pc1JlZ0V4cChyb3V0ZSkpIHJvdXRlID0gdGhpcy5fcm91dGVUb1JlZ0V4cChyb3V0ZSk7CiAgICAgIGlmIChfLmlzRnVuY3Rpb24obmFtZSkpIHsKICAgICAgICBjYWxsYmFjayA9IG5hbWU7CiAgICAgICAgbmFtZSA9ICcnOwogICAgICB9CiAgICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gdGhpc1tuYW1lXTsKICAgICAgdmFyIHJvdXRlciA9IHRoaXM7CiAgICAgIEJhY2tib25lLmhpc3Rvcnkucm91dGUocm91dGUsIGZ1bmN0aW9uKGZyYWdtZW50KSB7CiAgICAgICAgdmFyIGFyZ3MgPSByb3V0ZXIuX2V4dHJhY3RQYXJhbWV0ZXJzKHJvdXRlLCBmcmFnbWVudCk7CiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suYXBwbHkocm91dGVyLCBhcmdzKTsKICAgICAgICByb3V0ZXIudHJpZ2dlci5hcHBseShyb3V0ZXIsIFsncm91dGU6JyArIG5hbWVdLmNvbmNhdChhcmdzKSk7CiAgICAgICAgcm91dGVyLnRyaWdnZXIoJ3JvdXRlJywgbmFtZSwgYXJncyk7CiAgICAgICAgQmFja2JvbmUuaGlzdG9yeS50cmlnZ2VyKCdyb3V0ZScsIHJvdXRlciwgbmFtZSwgYXJncyk7CiAgICAgIH0pOwogICAgICByZXR1cm4gdGhpczsKICAgIH0sCgogICAgLy8gU2ltcGxlIHByb3h5IHRvIGBCYWNrYm9uZS5oaXN0b3J5YCB0byBzYXZlIGEgZnJhZ21lbnQgaW50byB0aGUgaGlzdG9yeS4KICAgIG5hdmlnYXRlOiBmdW5jdGlvbihmcmFnbWVudCwgb3B0aW9ucykgewogICAgICBCYWNrYm9uZS5oaXN0b3J5Lm5hdmlnYXRlKGZyYWdtZW50LCBvcHRpb25zKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9LAoKICAgIC8vIEJpbmQgYWxsIGRlZmluZWQgcm91dGVzIHRvIGBCYWNrYm9uZS5oaXN0b3J5YC4gV2UgaGF2ZSB0byByZXZlcnNlIHRoZQogICAgLy8gb3JkZXIgb2YgdGhlIHJvdXRlcyBoZXJlIHRvIHN1cHBvcnQgYmVoYXZpb3Igd2hlcmUgdGhlIG1vc3QgZ2VuZXJhbAogICAgLy8gcm91dGVzIGNhbiBiZSBkZWZpbmVkIGF0IHRoZSBib3R0b20gb2YgdGhlIHJvdXRlIG1hcC4KICAgIF9iaW5kUm91dGVzOiBmdW5jdGlvbigpIHsKICAgICAgaWYgKCF0aGlzLnJvdXRlcykgcmV0dXJuOwogICAgICB0aGlzLnJvdXRlcyA9IF8ucmVzdWx0KHRoaXMsICdyb3V0ZXMnKTsKICAgICAgdmFyIHJvdXRlLCByb3V0ZXMgPSBfLmtleXModGhpcy5yb3V0ZXMpOwogICAgICB3aGlsZSAoKHJvdXRlID0gcm91dGVzLnBvcCgpKSAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5yb3V0ZShyb3V0ZSwgdGhpcy5yb3V0ZXNbcm91dGVdKTsKICAgICAgfQogICAgfSwKCiAgICAvLyBDb252ZXJ0IGEgcm91dGUgc3RyaW5nIGludG8gYSByZWd1bGFyIGV4cHJlc3Npb24sIHN1aXRhYmxlIGZvciBtYXRjaGluZwogICAgLy8gYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbiBoYXNoLgogICAgX3JvdXRlVG9SZWdFeHA6IGZ1bmN0aW9uKHJvdXRlKSB7CiAgICAgIHJvdXRlID0gcm91dGUucmVwbGFjZShlc2NhcGVSZWdFeHAsICdcXCQmJykKICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKG9wdGlvbmFsUGFyYW0sICcoPzokMSk/JykKICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKG5hbWVkUGFyYW0sIGZ1bmN0aW9uKG1hdGNoLCBvcHRpb25hbCl7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25hbCA/IG1hdGNoIDogJyhbXlwvXSspJzsKICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAucmVwbGFjZShzcGxhdFBhcmFtLCAnKC4qPyknKTsKICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcm91dGUgKyAnJCcpOwogICAgfSwKCiAgICAvLyBHaXZlbiBhIHJvdXRlLCBhbmQgYSBVUkwgZnJhZ21lbnQgdGhhdCBpdCBtYXRjaGVzLCByZXR1cm4gdGhlIGFycmF5IG9mCiAgICAvLyBleHRyYWN0ZWQgZGVjb2RlZCBwYXJhbWV0ZXJzLiBFbXB0eSBvciB1bm1hdGNoZWQgcGFyYW1ldGVycyB3aWxsIGJlCiAgICAvLyB0cmVhdGVkIGFzIGBudWxsYCB0byBub3JtYWxpemUgY3Jvc3MtYnJvd3NlciBiZWhhdmlvci4KICAgIF9leHRyYWN0UGFyYW1ldGVyczogZnVuY3Rpb24ocm91dGUsIGZyYWdtZW50KSB7CiAgICAgIHZhciBwYXJhbXMgPSByb3V0ZS5leGVjKGZyYWdtZW50KS5zbGljZSgxKTsKICAgICAgcmV0dXJuIF8ubWFwKHBhcmFtcywgZnVuY3Rpb24ocGFyYW0pIHsKICAgICAgICByZXR1cm4gcGFyYW0gPyBkZWNvZGVVUklDb21wb25lbnQocGFyYW0pIDogbnVsbDsKICAgICAgfSk7CiAgICB9CgogIH0pOwoKICAvLyBCYWNrYm9uZS5IaXN0b3J5CiAgLy8gLS0tLS0tLS0tLS0tLS0tLQoKICAvLyBIYW5kbGVzIGNyb3NzLWJyb3dzZXIgaGlzdG9yeSBtYW5hZ2VtZW50LCBiYXNlZCBvbiBlaXRoZXIKICAvLyBbcHVzaFN0YXRlXShodHRwOi8vZGl2ZWludG9odG1sNS5pbmZvL2hpc3RvcnkuaHRtbCkgYW5kIHJlYWwgVVJMcywgb3IKICAvLyBbb25oYXNoY2hhbmdlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS93aW5kb3cub25oYXNoY2hhbmdlKQogIC8vIGFuZCBVUkwgZnJhZ21lbnRzLiBJZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBuZWl0aGVyIChvbGQgSUUsIG5hdGNoKSwKICAvLyBmYWxscyBiYWNrIHRvIHBvbGxpbmcuCiAgdmFyIEhpc3RvcnkgPSBCYWNrYm9uZS5IaXN0b3J5ID0gZnVuY3Rpb24oKSB7CiAgICB0aGlzLmhhbmRsZXJzID0gW107CiAgICBfLmJpbmRBbGwodGhpcywgJ2NoZWNrVXJsJyk7CgogICAgLy8gRW5zdXJlIHRoYXQgYEhpc3RvcnlgIGNhbiBiZSB1c2VkIG91dHNpZGUgb2YgdGhlIGJyb3dzZXIuCiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgdGhpcy5sb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjsKICAgICAgdGhpcy5oaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7CiAgICB9CiAgfTsKCiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBzdHJpcHBpbmcgYSBsZWFkaW5nIGhhc2gvc2xhc2ggYW5kIHRyYWlsaW5nIHNwYWNlLgogIHZhciByb3V0ZVN0cmlwcGVyID0gL15bI1wvXXxccyskL2c7CgogIC8vIENhY2hlZCByZWdleCBmb3Igc3RyaXBwaW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMuCiAgdmFyIHJvb3RTdHJpcHBlciA9IC9eXC8rfFwvKyQvZzsKCiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBkZXRlY3RpbmcgTVNJRS4KICB2YXIgaXNFeHBsb3JlciA9IC9tc2llIFtcdy5dKy87CgogIC8vIENhY2hlZCByZWdleCBmb3IgcmVtb3ZpbmcgYSB0cmFpbGluZyBzbGFzaC4KICB2YXIgdHJhaWxpbmdTbGFzaCA9IC9cLyQvOwoKICAvLyBIYXMgdGhlIGhpc3RvcnkgaGFuZGxpbmcgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQ/CiAgSGlzdG9yeS5zdGFydGVkID0gZmFsc2U7CgogIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5IaXN0b3J5KiogcHJvcGVydGllcyBhbmQgbWV0aG9kcy4KICBfLmV4dGVuZChIaXN0b3J5LnByb3RvdHlwZSwgRXZlbnRzLCB7CgogICAgLy8gVGhlIGRlZmF1bHQgaW50ZXJ2YWwgdG8gcG9sbCBmb3IgaGFzaCBjaGFuZ2VzLCBpZiBuZWNlc3NhcnksIGlzCiAgICAvLyB0d2VudHkgdGltZXMgYSBzZWNvbmQuCiAgICBpbnRlcnZhbDogNTAsCgogICAgLy8gR2V0cyB0aGUgdHJ1ZSBoYXNoIHZhbHVlLiBDYW5ub3QgdXNlIGxvY2F0aW9uLmhhc2ggZGlyZWN0bHkgZHVlIHRvIGJ1ZwogICAgLy8gaW4gRmlyZWZveCB3aGVyZSBsb2NhdGlvbi5oYXNoIHdpbGwgYWx3YXlzIGJlIGRlY29kZWQuCiAgICBnZXRIYXNoOiBmdW5jdGlvbih3aW5kb3cpIHsKICAgICAgdmFyIG1hdGNoID0gKHdpbmRvdyB8fCB0aGlzKS5sb2NhdGlvbi5ocmVmLm1hdGNoKC8jKC4qKSQvKTsKICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJzsKICAgIH0sCgogICAgLy8gR2V0IHRoZSBjcm9zcy1icm93c2VyIG5vcm1hbGl6ZWQgVVJMIGZyYWdtZW50LCBlaXRoZXIgZnJvbSB0aGUgVVJMLAogICAgLy8gdGhlIGhhc2gsIG9yIHRoZSBvdmVycmlkZS4KICAgIGdldEZyYWdtZW50OiBmdW5jdGlvbihmcmFnbWVudCwgZm9yY2VQdXNoU3RhdGUpIHsKICAgICAgaWYgKGZyYWdtZW50ID09IG51bGwpIHsKICAgICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlIHx8ICF0aGlzLl93YW50c0hhc2hDaGFuZ2UgfHwgZm9yY2VQdXNoU3RhdGUpIHsKICAgICAgICAgIGZyYWdtZW50ID0gdGhpcy5sb2NhdGlvbi5wYXRobmFtZTsKICAgICAgICAgIHZhciByb290ID0gdGhpcy5yb290LnJlcGxhY2UodHJhaWxpbmdTbGFzaCwgJycpOwogICAgICAgICAgaWYgKCFmcmFnbWVudC5pbmRleE9mKHJvb3QpKSBmcmFnbWVudCA9IGZyYWdtZW50LnN1YnN0cihyb290Lmxlbmd0aCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZyYWdtZW50ID0gdGhpcy5nZXRIYXNoKCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBmcmFnbWVudC5yZXBsYWNlKHJvdXRlU3RyaXBwZXIsICcnKTsKICAgIH0sCgogICAgLy8gU3RhcnQgdGhlIGhhc2ggY2hhbmdlIGhhbmRsaW5nLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBjdXJyZW50IFVSTCBtYXRjaGVzCiAgICAvLyBhbiBleGlzdGluZyByb3V0ZSwgYW5kIGBmYWxzZWAgb3RoZXJ3aXNlLgogICAgc3RhcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKICAgICAgaWYgKEhpc3Rvcnkuc3RhcnRlZCkgdGhyb3cgbmV3IEVycm9yKCJCYWNrYm9uZS5oaXN0b3J5IGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCIpOwogICAgICBIaXN0b3J5LnN0YXJ0ZWQgPSB0cnVlOwoKICAgICAgLy8gRmlndXJlIG91dCB0aGUgaW5pdGlhbCBjb25maWd1cmF0aW9uLiBEbyB3ZSBuZWVkIGFuIGlmcmFtZT8KICAgICAgLy8gSXMgcHVzaFN0YXRlIGRlc2lyZWQgLi4uIGlzIGl0IGF2YWlsYWJsZT8KICAgICAgdGhpcy5vcHRpb25zICAgICAgICAgID0gXy5leHRlbmQoe30sIHtyb290OiAnLyd9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpOwogICAgICB0aGlzLnJvb3QgICAgICAgICAgICAgPSB0aGlzLm9wdGlvbnMucm9vdDsKICAgICAgdGhpcy5fd2FudHNIYXNoQ2hhbmdlID0gdGhpcy5vcHRpb25zLmhhc2hDaGFuZ2UgIT09IGZhbHNlOwogICAgICB0aGlzLl93YW50c1B1c2hTdGF0ZSAgPSAhIXRoaXMub3B0aW9ucy5wdXNoU3RhdGU7CiAgICAgIHRoaXMuX2hhc1B1c2hTdGF0ZSAgICA9ICEhKHRoaXMub3B0aW9ucy5wdXNoU3RhdGUgJiYgdGhpcy5oaXN0b3J5ICYmIHRoaXMuaGlzdG9yeS5wdXNoU3RhdGUpOwogICAgICB2YXIgZnJhZ21lbnQgICAgICAgICAgPSB0aGlzLmdldEZyYWdtZW50KCk7CiAgICAgIHZhciBkb2NNb2RlICAgICAgICAgICA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTsKICAgICAgdmFyIG9sZElFICAgICAgICAgICAgID0gKGlzRXhwbG9yZXIuZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpICYmICghZG9jTW9kZSB8fCBkb2NNb2RlIDw9IDcpKTsKCiAgICAgIC8vIE5vcm1hbGl6ZSByb290IHRvIGFsd2F5cyBpbmNsdWRlIGEgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2guCiAgICAgIHRoaXMucm9vdCA9ICgnLycgKyB0aGlzLnJvb3QgKyAnLycpLnJlcGxhY2Uocm9vdFN0cmlwcGVyLCAnLycpOwoKICAgICAgaWYgKG9sZElFICYmIHRoaXMuX3dhbnRzSGFzaENoYW5nZSkgewogICAgICAgIHRoaXMuaWZyYW1lID0gQmFja2JvbmUuJCgnPGlmcmFtZSBzcmM9ImphdmFzY3JpcHQ6MCIgdGFiaW5kZXg9Ii0xIiAvPicpLmhpZGUoKS5hcHBlbmRUbygnYm9keScpWzBdLmNvbnRlbnRXaW5kb3c7CiAgICAgICAgdGhpcy5uYXZpZ2F0ZShmcmFnbWVudCk7CiAgICAgIH0KCiAgICAgIC8vIERlcGVuZGluZyBvbiB3aGV0aGVyIHdlJ3JlIHVzaW5nIHB1c2hTdGF0ZSBvciBoYXNoZXMsIGFuZCB3aGV0aGVyCiAgICAgIC8vICdvbmhhc2hjaGFuZ2UnIGlzIHN1cHBvcnRlZCwgZGV0ZXJtaW5lIGhvdyB3ZSBjaGVjayB0aGUgVVJMIHN0YXRlLgogICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlKSB7CiAgICAgICAgQmFja2JvbmUuJCh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRoaXMuY2hlY2tVcmwpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSAmJiAoJ29uaGFzaGNoYW5nZScgaW4gd2luZG93KSAmJiAhb2xkSUUpIHsKICAgICAgICBCYWNrYm9uZS4kKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCB0aGlzLmNoZWNrVXJsKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UpIHsKICAgICAgICB0aGlzLl9jaGVja1VybEludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5jaGVja1VybCwgdGhpcy5pbnRlcnZhbCk7CiAgICAgIH0KCiAgICAgIC8vIERldGVybWluZSBpZiB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgYmFzZSB1cmwsIGZvciBhIHB1c2hTdGF0ZSBsaW5rCiAgICAgIC8vIG9wZW5lZCBieSBhIG5vbi1wdXNoU3RhdGUgYnJvd3Nlci4KICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50OwogICAgICB2YXIgbG9jID0gdGhpcy5sb2NhdGlvbjsKICAgICAgdmFyIGF0Um9vdCA9IGxvYy5wYXRobmFtZS5yZXBsYWNlKC9bXlwvXSQvLCAnJCYvJykgPT09IHRoaXMucm9vdDsKCiAgICAgIC8vIElmIHdlJ3ZlIHN0YXJ0ZWQgb2ZmIHdpdGggYSByb3V0ZSBmcm9tIGEgYHB1c2hTdGF0ZWAtZW5hYmxlZCBicm93c2VyLAogICAgICAvLyBidXQgd2UncmUgY3VycmVudGx5IGluIGEgYnJvd3NlciB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBpdC4uLgogICAgICBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlICYmIHRoaXMuX3dhbnRzUHVzaFN0YXRlICYmICF0aGlzLl9oYXNQdXNoU3RhdGUgJiYgIWF0Um9vdCkgewogICAgICAgIHRoaXMuZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KG51bGwsIHRydWUpOwogICAgICAgIHRoaXMubG9jYXRpb24ucmVwbGFjZSh0aGlzLnJvb3QgKyB0aGlzLmxvY2F0aW9uLnNlYXJjaCArICcjJyArIHRoaXMuZnJhZ21lbnQpOwogICAgICAgIC8vIFJldHVybiBpbW1lZGlhdGVseSBhcyBicm93c2VyIHdpbGwgZG8gcmVkaXJlY3QgdG8gbmV3IHVybAogICAgICAgIHJldHVybiB0cnVlOwoKICAgICAgLy8gT3IgaWYgd2UndmUgc3RhcnRlZCBvdXQgd2l0aCBhIGhhc2gtYmFzZWQgcm91dGUsIGJ1dCB3ZSdyZSBjdXJyZW50bHkKICAgICAgLy8gaW4gYSBicm93c2VyIHdoZXJlIGl0IGNvdWxkIGJlIGBwdXNoU3RhdGVgLWJhc2VkIGluc3RlYWQuLi4KICAgICAgfSBlbHNlIGlmICh0aGlzLl93YW50c1B1c2hTdGF0ZSAmJiB0aGlzLl9oYXNQdXNoU3RhdGUgJiYgYXRSb290ICYmIGxvYy5oYXNoKSB7CiAgICAgICAgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0SGFzaCgpLnJlcGxhY2Uocm91dGVTdHJpcHBlciwgJycpOwogICAgICAgIHRoaXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIGRvY3VtZW50LnRpdGxlLCB0aGlzLnJvb3QgKyB0aGlzLmZyYWdtZW50ICsgbG9jLnNlYXJjaCk7CiAgICAgIH0KCiAgICAgIGlmICghdGhpcy5vcHRpb25zLnNpbGVudCkgcmV0dXJuIHRoaXMubG9hZFVybCgpOwogICAgfSwKCiAgICAvLyBEaXNhYmxlIEJhY2tib25lLmhpc3RvcnksIHBlcmhhcHMgdGVtcG9yYXJpbHkuIE5vdCB1c2VmdWwgaW4gYSByZWFsIGFwcCwKICAgIC8vIGJ1dCBwb3NzaWJseSB1c2VmdWwgZm9yIHVuaXQgdGVzdGluZyBSb3V0ZXJzLgogICAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICAgIEJhY2tib25lLiQod2luZG93KS5vZmYoJ3BvcHN0YXRlJywgdGhpcy5jaGVja1VybCkub2ZmKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7CiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fY2hlY2tVcmxJbnRlcnZhbCk7CiAgICAgIEhpc3Rvcnkuc3RhcnRlZCA9IGZhbHNlOwogICAgfSwKCiAgICAvLyBBZGQgYSByb3V0ZSB0byBiZSB0ZXN0ZWQgd2hlbiB0aGUgZnJhZ21lbnQgY2hhbmdlcy4gUm91dGVzIGFkZGVkIGxhdGVyCiAgICAvLyBtYXkgb3ZlcnJpZGUgcHJldmlvdXMgcm91dGVzLgogICAgcm91dGU6IGZ1bmN0aW9uKHJvdXRlLCBjYWxsYmFjaykgewogICAgICB0aGlzLmhhbmRsZXJzLnVuc2hpZnQoe3JvdXRlOiByb3V0ZSwgY2FsbGJhY2s6IGNhbGxiYWNrfSk7CiAgICB9LAoKICAgIC8vIENoZWNrcyB0aGUgY3VycmVudCBVUkwgdG8gc2VlIGlmIGl0IGhhcyBjaGFuZ2VkLCBhbmQgaWYgaXQgaGFzLAogICAgLy8gY2FsbHMgYGxvYWRVcmxgLCBub3JtYWxpemluZyBhY3Jvc3MgdGhlIGhpZGRlbiBpZnJhbWUuCiAgICBjaGVja1VybDogZnVuY3Rpb24oZSkgewogICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoKTsKICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZnJhZ21lbnQgJiYgdGhpcy5pZnJhbWUpIHsKICAgICAgICBjdXJyZW50ID0gdGhpcy5nZXRGcmFnbWVudCh0aGlzLmdldEhhc2godGhpcy5pZnJhbWUpKTsKICAgICAgfQogICAgICBpZiAoY3VycmVudCA9PT0gdGhpcy5mcmFnbWVudCkgcmV0dXJuIGZhbHNlOwogICAgICBpZiAodGhpcy5pZnJhbWUpIHRoaXMubmF2aWdhdGUoY3VycmVudCk7CiAgICAgIHRoaXMubG9hZFVybCgpIHx8IHRoaXMubG9hZFVybCh0aGlzLmdldEhhc2goKSk7CiAgICB9LAoKICAgIC8vIEF0dGVtcHQgdG8gbG9hZCB0aGUgY3VycmVudCBVUkwgZnJhZ21lbnQuIElmIGEgcm91dGUgc3VjY2VlZHMgd2l0aCBhCiAgICAvLyBtYXRjaCwgcmV0dXJucyBgdHJ1ZWAuIElmIG5vIGRlZmluZWQgcm91dGVzIG1hdGNoZXMgdGhlIGZyYWdtZW50LAogICAgLy8gcmV0dXJucyBgZmFsc2VgLgogICAgbG9hZFVybDogZnVuY3Rpb24oZnJhZ21lbnRPdmVycmlkZSkgewogICAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChmcmFnbWVudE92ZXJyaWRlKTsKICAgICAgdmFyIG1hdGNoZWQgPSBfLmFueSh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbihoYW5kbGVyKSB7CiAgICAgICAgaWYgKGhhbmRsZXIucm91dGUudGVzdChmcmFnbWVudCkpIHsKICAgICAgICAgIGhhbmRsZXIuY2FsbGJhY2soZnJhZ21lbnQpOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIG1hdGNoZWQ7CiAgICB9LAoKICAgIC8vIFNhdmUgYSBmcmFnbWVudCBpbnRvIHRoZSBoYXNoIGhpc3RvcnksIG9yIHJlcGxhY2UgdGhlIFVSTCBzdGF0ZSBpZiB0aGUKICAgIC8vICdyZXBsYWNlJyBvcHRpb24gaXMgcGFzc2VkLiBZb3UgYXJlIHJlc3BvbnNpYmxlIGZvciBwcm9wZXJseSBVUkwtZW5jb2RpbmcKICAgIC8vIHRoZSBmcmFnbWVudCBpbiBhZHZhbmNlLgogICAgLy8KICAgIC8vIFRoZSBvcHRpb25zIG9iamVjdCBjYW4gY29udGFpbiBgdHJpZ2dlcjogdHJ1ZWAgaWYgeW91IHdpc2ggdG8gaGF2ZSB0aGUKICAgIC8vIHJvdXRlIGNhbGxiYWNrIGJlIGZpcmVkIChub3QgdXN1YWxseSBkZXNpcmFibGUpLCBvciBgcmVwbGFjZTogdHJ1ZWAsIGlmCiAgICAvLyB5b3Ugd2lzaCB0byBtb2RpZnkgdGhlIGN1cnJlbnQgVVJMIHdpdGhvdXQgYWRkaW5nIGFuIGVudHJ5IHRvIHRoZSBoaXN0b3J5LgogICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7CiAgICAgIGlmICghSGlzdG9yeS5zdGFydGVkKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmICghb3B0aW9ucyB8fCBvcHRpb25zID09PSB0cnVlKSBvcHRpb25zID0ge3RyaWdnZXI6IG9wdGlvbnN9OwogICAgICBmcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoZnJhZ21lbnQgfHwgJycpOwogICAgICBpZiAodGhpcy5mcmFnbWVudCA9PT0gZnJhZ21lbnQpIHJldHVybjsKICAgICAgdGhpcy5mcmFnbWVudCA9IGZyYWdtZW50OwogICAgICB2YXIgdXJsID0gdGhpcy5yb290ICsgZnJhZ21lbnQ7CgogICAgICAvLyBJZiBwdXNoU3RhdGUgaXMgYXZhaWxhYmxlLCB3ZSB1c2UgaXQgdG8gc2V0IHRoZSBmcmFnbWVudCBhcyBhIHJlYWwgVVJMLgogICAgICBpZiAodGhpcy5faGFzUHVzaFN0YXRlKSB7CiAgICAgICAgdGhpcy5oaXN0b3J5W29wdGlvbnMucmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKHt9LCBkb2N1bWVudC50aXRsZSwgdXJsKTsKCiAgICAgIC8vIElmIGhhc2ggY2hhbmdlcyBoYXZlbid0IGJlZW4gZXhwbGljaXRseSBkaXNhYmxlZCwgdXBkYXRlIHRoZSBoYXNoCiAgICAgIC8vIGZyYWdtZW50IHRvIHN0b3JlIGhpc3RvcnkuCiAgICAgIH0gZWxzZSBpZiAodGhpcy5fd2FudHNIYXNoQ2hhbmdlKSB7CiAgICAgICAgdGhpcy5fdXBkYXRlSGFzaCh0aGlzLmxvY2F0aW9uLCBmcmFnbWVudCwgb3B0aW9ucy5yZXBsYWNlKTsKICAgICAgICBpZiAodGhpcy5pZnJhbWUgJiYgKGZyYWdtZW50ICE9PSB0aGlzLmdldEZyYWdtZW50KHRoaXMuZ2V0SGFzaCh0aGlzLmlmcmFtZSkpKSkgewogICAgICAgICAgLy8gT3BlbmluZyBhbmQgY2xvc2luZyB0aGUgaWZyYW1lIHRyaWNrcyBJRTcgYW5kIGVhcmxpZXIgdG8gcHVzaCBhCiAgICAgICAgICAvLyBoaXN0b3J5IGVudHJ5IG9uIGhhc2gtdGFnIGNoYW5nZS4gIFdoZW4gcmVwbGFjZSBpcyB0cnVlLCB3ZSBkb24ndAogICAgICAgICAgLy8gd2FudCB0aGlzLgogICAgICAgICAgaWYoIW9wdGlvbnMucmVwbGFjZSkgdGhpcy5pZnJhbWUuZG9jdW1lbnQub3BlbigpLmNsb3NlKCk7CiAgICAgICAgICB0aGlzLl91cGRhdGVIYXNoKHRoaXMuaWZyYW1lLmxvY2F0aW9uLCBmcmFnbWVudCwgb3B0aW9ucy5yZXBsYWNlKTsKICAgICAgICB9CgogICAgICAvLyBJZiB5b3UndmUgdG9sZCB1cyB0aGF0IHlvdSBleHBsaWNpdGx5IGRvbid0IHdhbnQgZmFsbGJhY2sgaGFzaGNoYW5nZS0KICAgICAgLy8gYmFzZWQgaGlzdG9yeSwgdGhlbiBgbmF2aWdhdGVgIGJlY29tZXMgYSBwYWdlIHJlZnJlc2guCiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb24uYXNzaWduKHVybCk7CiAgICAgIH0KICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlcikgdGhpcy5sb2FkVXJsKGZyYWdtZW50KTsKICAgIH0sCgogICAgLy8gVXBkYXRlIHRoZSBoYXNoIGxvY2F0aW9uLCBlaXRoZXIgcmVwbGFjaW5nIHRoZSBjdXJyZW50IGVudHJ5LCBvciBhZGRpbmcKICAgIC8vIGEgbmV3IG9uZSB0byB0aGUgYnJvd3NlciBoaXN0b3J5LgogICAgX3VwZGF0ZUhhc2g6IGZ1bmN0aW9uKGxvY2F0aW9uLCBmcmFnbWVudCwgcmVwbGFjZSkgewogICAgICBpZiAocmVwbGFjZSkgewogICAgICAgIHZhciBocmVmID0gbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8oamF2YXNjcmlwdDp8IykuKiQvLCAnJyk7CiAgICAgICAgbG9jYXRpb24ucmVwbGFjZShocmVmICsgJyMnICsgZnJhZ21lbnQpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFNvbWUgYnJvd3NlcnMgcmVxdWlyZSB0aGF0IGBoYXNoYCBjb250YWlucyBhIGxlYWRpbmcgIy4KICAgICAgICBsb2NhdGlvbi5oYXNoID0gJyMnICsgZnJhZ21lbnQ7CiAgICAgIH0KICAgIH0KCiAgfSk7CgogIC8vIENyZWF0ZSB0aGUgZGVmYXVsdCBCYWNrYm9uZS5oaXN0b3J5LgogIEJhY2tib25lLmhpc3RvcnkgPSBuZXcgSGlzdG9yeTsKCiAgLy8gSGVscGVycwogIC8vIC0tLS0tLS0KCiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvcnJlY3RseSBzZXQgdXAgdGhlIHByb3RvdHlwZSBjaGFpbiwgZm9yIHN1YmNsYXNzZXMuCiAgLy8gU2ltaWxhciB0byBgZ29vZy5pbmhlcml0c2AsIGJ1dCB1c2VzIGEgaGFzaCBvZiBwcm90b3R5cGUgcHJvcGVydGllcyBhbmQKICAvLyBjbGFzcyBwcm9wZXJ0aWVzIHRvIGJlIGV4dGVuZGVkLgogIHZhciBleHRlbmQgPSBmdW5jdGlvbihwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogICAgdmFyIHBhcmVudCA9IHRoaXM7CiAgICB2YXIgY2hpbGQ7CgogICAgLy8gVGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgbmV3IHN1YmNsYXNzIGlzIGVpdGhlciBkZWZpbmVkIGJ5IHlvdQogICAgLy8gKHRoZSAiY29uc3RydWN0b3IiIHByb3BlcnR5IGluIHlvdXIgYGV4dGVuZGAgZGVmaW5pdGlvbiksIG9yIGRlZmF1bHRlZAogICAgLy8gYnkgdXMgdG8gc2ltcGx5IGNhbGwgdGhlIHBhcmVudCdzIGNvbnN0cnVjdG9yLgogICAgaWYgKHByb3RvUHJvcHMgJiYgXy5oYXMocHJvdG9Qcm9wcywgJ2NvbnN0cnVjdG9yJykpIHsKICAgICAgY2hpbGQgPSBwcm90b1Byb3BzLmNvbnN0cnVjdG9yOwogICAgfSBlbHNlIHsKICAgICAgY2hpbGQgPSBmdW5jdGlvbigpeyByZXR1cm4gcGFyZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07CiAgICB9CgogICAgLy8gQWRkIHN0YXRpYyBwcm9wZXJ0aWVzIHRvIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgaWYgc3VwcGxpZWQuCiAgICBfLmV4dGVuZChjaGlsZCwgcGFyZW50LCBzdGF0aWNQcm9wcyk7CgogICAgLy8gU2V0IHRoZSBwcm90b3R5cGUgY2hhaW4gdG8gaW5oZXJpdCBmcm9tIGBwYXJlbnRgLCB3aXRob3V0IGNhbGxpbmcKICAgIC8vIGBwYXJlbnRgJ3MgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAgICB2YXIgU3Vycm9nYXRlID0gZnVuY3Rpb24oKXsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9OwogICAgU3Vycm9nYXRlLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7CiAgICBjaGlsZC5wcm90b3R5cGUgPSBuZXcgU3Vycm9nYXRlOwoKICAgIC8vIEFkZCBwcm90b3R5cGUgcHJvcGVydGllcyAoaW5zdGFuY2UgcHJvcGVydGllcykgdG8gdGhlIHN1YmNsYXNzLAogICAgLy8gaWYgc3VwcGxpZWQuCiAgICBpZiAocHJvdG9Qcm9wcykgXy5leHRlbmQoY2hpbGQucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKCiAgICAvLyBTZXQgYSBjb252ZW5pZW5jZSBwcm9wZXJ0eSBpbiBjYXNlIHRoZSBwYXJlbnQncyBwcm90b3R5cGUgaXMgbmVlZGVkCiAgICAvLyBsYXRlci4KICAgIGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7CgogICAgcmV0dXJuIGNoaWxkOwogIH07CgogIC8vIFNldCB1cCBpbmhlcml0YW5jZSBmb3IgdGhlIG1vZGVsLCBjb2xsZWN0aW9uLCByb3V0ZXIsIHZpZXcgYW5kIGhpc3RvcnkuCiAgTW9kZWwuZXh0ZW5kID0gQ29sbGVjdGlvbi5leHRlbmQgPSBSb3V0ZXIuZXh0ZW5kID0gVmlldy5leHRlbmQgPSBIaXN0b3J5LmV4dGVuZCA9IGV4dGVuZDsKCiAgLy8gVGhyb3cgYW4gZXJyb3Igd2hlbiBhIFVSTCBpcyBuZWVkZWQsIGFuZCBub25lIGlzIHN1cHBsaWVkLgogIHZhciB1cmxFcnJvciA9IGZ1bmN0aW9uKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdBICJ1cmwiIHByb3BlcnR5IG9yIGZ1bmN0aW9uIG11c3QgYmUgc3BlY2lmaWVkJyk7CiAgfTsKCiAgLy8gV3JhcCBhbiBvcHRpb25hbCBlcnJvciBjYWxsYmFjayB3aXRoIGEgZmFsbGJhY2sgZXJyb3IgZXZlbnQuCiAgdmFyIHdyYXBFcnJvciA9IGZ1bmN0aW9uIChtb2RlbCwgb3B0aW9ucykgewogICAgdmFyIGVycm9yID0gb3B0aW9ucy5lcnJvcjsKICAgIG9wdGlvbnMuZXJyb3IgPSBmdW5jdGlvbihyZXNwKSB7CiAgICAgIGlmIChlcnJvcikgZXJyb3IobW9kZWwsIHJlc3AsIG9wdGlvbnMpOwogICAgICBtb2RlbC50cmlnZ2VyKCdlcnJvcicsIG1vZGVsLCByZXNwLCBvcHRpb25zKTsKICAgIH07CiAgfTsKCn0pLmNhbGwodGhpcyk7CihmdW5jdGlvbihlKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgYm9vdHN0cmFwKWJvb3RzdHJhcCgibWFzdCIsZSk7ZWxzZSBpZigib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHMpbW9kdWxlLmV4cG9ydHM9ZSgpO2Vsc2UgaWYoImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoZSk7ZWxzZSBpZigidW5kZWZpbmVkIiE9dHlwZW9mIHNlcyl7aWYoIXNlcy5vaygpKXJldHVybjtzZXMubWFrZU1hc3Q9ZX1lbHNlInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Lk1hc3Q9ZSgpOmdsb2JhbC5NYXN0PWUoKX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxzZXMsYm9vdHN0cmFwLG1vZHVsZSxleHBvcnRzOwpyZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT0iZnVuY3Rpb24iJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrbysiJyIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCnZhciByZW5kZXJEYXRhQmluZGluZ3MgPSByZXF1aXJlKCcuL3JlbmRlckRhdGFCaW5kaW5ncycpOwoKCi8qKgogKiBCaW5kIGNvbGxlY3Rpb24gZXZlbnRzIHRvIGxpZmVjeWNsZSBldmVudCBoYW5kbGVycwogKi8KZXhwb3J0cy5jb2xsZWN0aW9uRXZlbnRzID0gZnVuY3Rpb24oKSB7CgkvLyBCaW5kIHRvIGNvbGxlY3Rpb24gZXZlbnRzIGlmIG9uZSB3YXMgcGFzc2VkIGluCglpZiAodGhpcy5jb2xsZWN0aW9uKSB7CgoJCS8vIExpc3RlbiB0byBldmVudHMKCQl0aGlzLmxpc3RlblRvKHRoaXMuY29sbGVjdGlvbiwgJ2FkZCcsIHRoaXMuYWZ0ZXJBZGQpOwoJCXRoaXMubGlzdGVuVG8odGhpcy5jb2xsZWN0aW9uLCAncmVtb3ZlJywgdGhpcy5hZnRlclJlbW92ZSk7CgkJdGhpcy5saXN0ZW5Ubyh0aGlzLmNvbGxlY3Rpb24sICdyZXNldCcsIHRoaXMuYWZ0ZXJSZXNldCk7Cgl9Cn07CgovKioKICogQmluZCBtb2RlbCBldmVudHMgdG8gbGlmZWN5Y2xlIGV2ZW50IGhhbmRsZXJzIGFuZCBhbHNvIGFsbG93cyBmb3IgaGFuZGxlcnMgdG8gZmlyZQogKiBvbiBjZXJ0YWluIG1vZGVsIGF0dHJpYnV0ZSBjaGFuZ2VzLgogKi8KZXhwb3J0cy5tb2RlbEV2ZW50cyA9IGZ1bmN0aW9uKCkgewoJdmFyIHNlbGYgPSB0aGlzOwoKCWlmICh0aGlzLm1vZGVsKSB7CgoJCS8vIExpc3RlbiBmb3IgYW55IGF0dHJpYnV0ZSBjaGFuZ2VzCgkJLy8gZS5nLgoJCS8vIC5hZnRlckNoYW5nZShtb2RlbCwgb3B0aW9ucykKCQkvLwoJCXRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgJ2NoYW5nZScsIGZ1bmN0aW9uIG1vZGVsQ2hhbmdlZCAobW9kZWwsIG9wdGlvbnMpIHsKCgkJCS8vIFJlbmRlciBkYXRhIGJpbmRpbmdzCgkJCXJlbmRlckRhdGFCaW5kaW5ncy5jYWxsKHNlbGYpOwoKCQkJLy8gUnVuIGN1c3RvbSBgYWZ0ZXJDaGFuZ2VgKCkgbWV0aG9kCgkJCWlmIChfLmlzRnVuY3Rpb24odGhpcy5hZnRlckNoYW5nZSkpIHsKCQkJCXRoaXMuYWZ0ZXJDaGFuZ2UobW9kZWwsIG9wdGlvbnMpOwoJCQl9CgkJfSk7CgoJCS8vIExpc3RlbiBmb3Igc3BlY2lmaWMgYXR0cmlidXRlIGNoYW5nZXMKCQkvLyBlLmcuCgkJLy8gLmFmdGVyQ2hhbmdlLmNvbG9yKG1vZGVsLCB2YWx1ZSwgb3B0aW9ucykKCQlpZiAoXy5pc09iamVjdCh0aGlzLmFmdGVyQ2hhbmdlKSkgewoJCQlfLmVhY2godGhpcy5hZnRlckNoYW5nZSwgZnVuY3Rpb24gKGhhbmRsZXIsIGF0dHJOYW1lKSB7CgoJCQkJLy8gQ2FsbCBoYW5kbGVyIHdpdGggbmV3VmFsIHRvIGtlZXAgYXJndW1lbnRzIHN0cmFpZ2h0Zm9yd2FyZAoJCQkJdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCAnY2hhbmdlOicgKyBhdHRyTmFtZSwgZnVuY3Rpb24gYXR0ckNoYW5nZWQgKG1vZGVsLCBuZXdWYWwpIHsKCQkJCQloYW5kbGVyLmNhbGwodGhpcywgbmV3VmFsKTsKCQkJCX0pOwoKCQkJfSwgdGhpcyk7CgkJfQoJfQp9OwoKLyoqCiAqIExpc3RlbnMgZm9yIGFuZCBydW5zIGhhbmRsZXJzIG9uIGdsb2JhbCBldmVudHMgdGhhdCBhcmUgbGlzdGVuZWQgZm9yIG9uIGEgY29tcG9uZW50LgogKi8KZXhwb3J0cy5nbG9iYWxUcmlnZ2VycyA9IGZ1bmN0aW9uKCkgewoKCXZhciBzZWxmID0gdGhpczsKCgl0aGlzLmxpc3RlblRvKEZSQU1FV09SSywgJ2FsbCcsIGZ1bmN0aW9uIChlUm91dGUpIHsKCgkJLy8gVHJpbSBvZmYgYWxsIGJ1dCB0aGUgZmlyc3QgYXJndW1lbnQgdG8gcGFzcyB0aHJvdWdoIHRvIGhhbmRsZXIKCQl2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CgkJYXJncy5zaGlmdCgpOwoKCQkvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBzdWJzY3JpcHRpb24gb24gdGhpcyBjb21wb25lbnQKCQkvLyBhbmQgbGlzdGVuIGZvciB0aGUgc3BlY2lmaWVkIGdsb2JhbCBldmVudHMKCQlfLmVhY2goc2VsZi5zdWJzY3JpcHRpb25zLCBmdW5jdGlvbihoYW5kbGVyLCBtYXRjaFBhdHRlcm4pIHsKCgkJCS8vIEdyYWIgcmVnZXggYW5kIHBhcmFtIHBhcnNpbmcgbG9naWMgZnJvbSBCYWNrYm9uZSBjb3JlCgkJCXZhciBleHRyYWN0UGFyYW1zID0gQmFja2JvbmUuUm91dGVyLnByb3RvdHlwZS5fZXh0cmFjdFBhcmFtZXRlcnMsCgkJCQljYWxjdWxhdGVSZWdleCA9IEJhY2tib25lLlJvdXRlci5wcm90b3R5cGUuX3JvdXRlVG9SZWdFeHA7CgoJCQkvLyBUcmltIHRyYWlsaW5nCgkJCW1hdGNoUGF0dGVybiA9IG1hdGNoUGF0dGVybi5yZXBsYWNlKC9cLyokL2csICcnKTsKCQkJLy8gYW5kIGVyIHNvcnQgb2YuLiBsZWFkaW5nLi4gc2xhc2hlcwoJCQltYXRjaFBhdHRlcm4gPSBtYXRjaFBhdHRlcm4ucmVwbGFjZSgvXihbI34lXSlcLyovZywgJyQxJyk7CgkJCS8vIFRPRE86IG9wdGltaXphdGlvbi0gdGhpcyByZWFsbHkgb25seSBoYXMgdG8gYmUgZG9uZSBvbmNlLCBvbiByYWlzZSgpLCB3ZSBzaG91bGQgZG8gdGhhdAoKCgkJCS8vIENvbWUgdXAgd2l0aCByZWdleCBmb3IgdGhpcyBtYXRjaFBhdHRlcm4KCQkJdmFyIHJlZ2V4ID0gY2FsY3VsYXRlUmVnZXgobWF0Y2hQYXR0ZXJuKTsKCgkJCS8vIElmIHRoaXMgbWF0Y2hQYXRlcm4gaXMgdGhpcyBpcyBub3QgYSBtYXRjaCBmb3IgdGhlIGV2ZW50LAoJCQkvLyBgY29udGludWVgIGl0IGFsb25nIHRvIGl0IGNhbiB0cnkgdGhlIG5leHQgbWF0Y2hQYXR0ZXJuCgkJCWlmICghZVJvdXRlLm1hdGNoKHJlZ2V4KSkgcmV0dXJuOwoKCQkJLy8gUGFyc2UgcGFyYW1ldGVycyBmb3IgdXNlIGFzIGFyZ3MgdG8gdGhlIGhhbmRsZXIKCQkJLy8gKG9yIGFuIGVtcHR5IGxpc3QgaWYgbm9uZSBleGlzdCkKCQkJdmFyIHBhcmFtcyA9IGV4dHJhY3RQYXJhbXMocmVnZXgsIGVSb3V0ZSk7CgoJCQkvLyBIYW5kbGUgc3RyaW5nIHJlZGlyZWN0cyB0byBmdW5jdGlvbiBuYW1lcwoJCQlpZiAoIV8uaXNGdW5jdGlvbihoYW5kbGVyKSkgewoJCQkJaGFuZGxlciA9IHNlbGZbaGFuZGxlcl07CgoJCQkJaWYgKCFoYW5kbGVyKSB7CgkJCQkJdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgdHJpZ2dlciBzdWJzY3JpcHRpb24gYmVjYXVzZSBvZiB1bmtub3duIGhhbmRsZXI6ICcgKyBoYW5kbGVyKTsKCQkJCX0KCQkJfQoKCQkJLy8gQmluZCBjb250ZXh0IGFuZCBhcmd1bWVudHMgdG8gc3Vic2NyaXB0aW9uIGhhbmRsZXIKCQkJaGFuZGxlci5hcHBseShzZWxmLCBfLnVuaW9uKGFyZ3MsIHBhcmFtcykpOwoKCQl9KTsKCX0pOwp9OwoKfSx7Ii4vcmVuZGVyRGF0YUJpbmRpbmdzIjoxMn1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogTW9kdWxlIGRlcGVuZGVuY2llcwogKi8KCnZhciBkZWxldGVBbGxSZWdpb25zID0gcmVxdWlyZSgnLi9kZWxldGVBbGxSZWdpb25zJyk7CgoKCgovKioKICogRlJBTUVXT1JLLkNvbXBvbmVudC5wcm90b3R5cGUuY2xvc2UKICoKICogU2FmZWx5IHphcCBldmVyeSB0cmFjZSBhYm91dCB0aGlzIGNvbXBvbmVudCBmcm9tIG1lbW9yeS4KICoKICovCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNsb3NlICgpIHsKCglGUkFNRVdPUksuZGVidWcoJ0Nsb3NlZCAnICsgdGhpcy5pZCArICcgY29tcG9uZW50LicpOwoJdmFyIHNlbGYgPSB0aGlzOwoKCS8vIENhbmNlbCBjdXJyZW50IHJlbmRlciBhbmQgY2xvc2Ugam9icywgaWYgdGhleSdyZSBydW5uaW5nCglpZiAodGhpcy5fcmVuZGVyaW5nKSB7CgkJc2VsZi5fcmVuZGVyaW5nQ2FuY2VsZWQgPSB0cnVlOwoJCXRoaXMuY2FuY2VsUmVuZGVyKCk7CgkJc2VsZi5fcmVuZGVyaW5nID0gZmFsc2U7Cgl9CglpZiAodGhpcy5fY2xvc2luZykgewoJCXRoaXMuY2FuY2VsQ2xvc2UoKTsKCQlzZWxmLl9jbG9zaW5nID0gZmFsc2U7Cgl9CgoJLy8gTG9jayBhY2Nlc3MgdG8gY2xvc2UoKQoJdGhpcy5fY2xvc2luZyA9IHRydWU7CgoJdGhpcy5iZWZvcmVDbG9zZShmdW5jdGlvbiAoKSB7CgoJCS8vID4gTk9URTogYHRoaXMuX2Nsb3Npbmc9ZmFsc2VgIGNhbiBhbmQgcHJvYmFibHkgc2hvdWxkIGJlIHJlbW92ZWQsCgkJLy8gPiBzaW5jZSBtdXRleCBpcyB1bm5lY2Vzc2FyeSBub3cgdGhhdCB0aGUgY29tcG9uZW50IGlzIHVwIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24KCQkvLyA+IFdhaXRpbmcgdG8gZG8gdGhpcyB1bnRpbCBpdCBjYW4gYmUgdGVzdGVkIGZ1cnRoZXIKCgkJLy8gVW5sb2NrIGNsb3NlKCkKCQlzZWxmLl9jbG9zaW5nID0gZmFsc2U7CgoJCS8vIFN0b3AgbGlzdGVuaW5nIHRvIGFsbCBnbG9iYWwgdHJpZ2dlcnMgKCV8IykKCgkJLy8gQ2xvc2UgYWxsIGNoaWxkIGNvbXBvbmVudHMKCQlkZWxldGVBbGxSZWdpb25zLmNhbGwoc2VsZik7CgoJCS8vIENhbGwgbmF0aXZlIGBCYWNrYm9uZS5WaWV3LnByb3RvdHlwZS5yZW1vdmUoKWAKCQkvLyB0byB1bmRlbGVnYXRlIGV2ZW50cywgZXRjLgoJCXNlbGYucmVtb3ZlKCk7CgoJfSk7Cn07Cgp9LHsiLi9kZWxldGVBbGxSZWdpb25zIjo2fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBDb252ZXJ0IHRlbXBsYXRlIEhUTUwgYW5kIGRhdGEgaW50byBhIGNvbXBpbGVkICR0ZW1wbGF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21waWxlVGVtcGxhdGUgKCkgewoKCS8vIENyZWF0ZSB0ZW1wbGF0ZSBkYXRhIGNvbnRleHQgYnkgcHJvdmlkaW5nIGFjY2VzcyB0byB0aGUgZ2xvYmFsIERhdGEgb2JqZWN0LAoJLy8gQWxzbyBmb2xkIGluIHRoZSBtb2RlbCBhc3NvY2lhdGVkIHdpdGggdGhpcyBjb21wb25lbnQsIGlmIHRoZXJlIGlzIG9uZQoJdmFyIHRlbXBsYXRlQ29udGV4dCA9IF8uZXh0ZW5kKHsKCgkJLy8gQWxsb3dzIHlvdSB0byBnZXQgYSBob2xkIG9mIGRhdGEsCgkJLy8gYnV0IHVzZSBhIGRlZmF1bHQgdmFsdWUgaWYgaXQgZG9lc24ndCBleGlzdAoJCWdldDogZnVuY3Rpb24gKGtleSwgZGVmYXVsdFZhbCkgewoJCQl2YXIgdmFsID0gdGVtcGxhdGVDb250ZXh0W2tleV07CgkJCWlmICh0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykgewoJCQkJdmFsID0gZGVmYXVsdFZhbDsKCQkJfQoJCQlyZXR1cm4gdmFsOwoJCX0KCX0sCgoJLy8gQWxsIEZSQU1FV09SSy5kYXRhIGlzIGF2YWlsYWJsZSBpbiBldmVyeSB0ZW1wbGF0ZQoJRlJBTUVXT1JLLmRhdGEpOwoKCS8vIElmIGEgbW9kZWwgaXMgcHJvdmlkZWQgZm9yIHRoaXMgY29tcG9uZW50LCBtYWtlIGl0IGF2YWlsYWJsZSBpbiB0aGlzIHRlbXBsYXRlCglpZiAodGhpcy5tb2RlbCkgewoJCV8uZXh0ZW5kKHRlbXBsYXRlQ29udGV4dCwgdGhpcy5tb2RlbC5hdHRyaWJ1dGVzKTsKCX0KCgkvLyBUZW1wbGF0ZSB0aGUgSFRNTCB3aXRoIHRoZSBkYXRhCgl2YXIgaHRtbDsKCXRyeSB7CgkJLy8gQWNjZXB0IHByZWNvbXBpbGVkIHRlbXBsYXRlcwoJCWlmIChfLmlzRnVuY3Rpb24odGhpcy50ZW1wbGF0ZSkpIHsKCQkJaHRtbCA9IHRoaXMudGVtcGxhdGUodGVtcGxhdGVDb250ZXh0KTsKCQl9CgkJLy8gT3IgcmF3IHN0cmluZ3MKCQllbHNlIGh0bWwgPSBfLnRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRlbXBsYXRlQ29udGV4dCk7Cgl9CgljYXRjaCAoZSkgewoJCXZhciBzdHIgPSBlLAoJCQlzdGFjayA9ICcnOwoKCQlpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7CgkJCXN0ciA9ICBlLnRvU3RyaW5nKCk7CgkJCXN0YWNrID0gZS5zdGFjazsKCQl9CgoJCS8vIE5PVEU6IFRoaXMgZXJyb3IgaXMgbm8gbG9uZ2VyIGEgdmFsaWQgZXJyb3IuCgkJLy8gRlJBTUVXT1JLLmVycm9yKHRoaXMuaWQgKyAnIDo6IENhbm5vdCByZW5kZXIoKSB0ZW1wbGF0ZSAocHJvYmFibHkgbWlzc2luZyBkYXRhKS5cblxuR290IHRoaXMgZXJyb3IgOjpcbicrc3RyLCdcbicpOwoJCWlmIChodG1sKSB7RlJBTUVXT1JLLnZlcmJvc2UoJ1RlbXBsYXRlIDo6ICcgKyBodG1sKTt9CgkJRlJBTUVXT1JLLnZlcmJvc2UoJ0Z1bGwgVGVtcGxhdGUgRXJyb3I6JyArICdcbicsc3RhY2spOwoJCUZSQU1FV09SSy52ZXJib3NlKCdcblxuTW9yZSBpbmZvcm1hdGlvbjonLCAnXG5cblRlbXBsYXRlIGNvbnRleHQgOjonLHRlbXBsYXRlQ29udGV4dCwgJ1xuXG50aGlzLm1vZGVsOjonLCB0aGlzLm1vZGVsKTsKCQlodG1sID0gXy5pc1N0cmluZyh0aGlzLnRlbXBsYXRlKSA/IHRoaXMudGVtcGxhdGUgOiBzdHI7Cgl9CgoJcmV0dXJuIGh0bWw7Cn07CgoKCn0se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogYGNsYXNzYCBkYXRhIGJpbmRpbmcKICogQHR5cGUge09iamVjdH0KICovCm1vZHVsZS5leHBvcnRzID0gewoJcmVnZXhwOiAvYmluZFwtY2xhc3NcLShbXi1dKykvLAoJZm46IGZ1bmN0aW9uICgkZWwsIG1vZGVsLCBtYXRjaGVzKSB7CgkJLy8gUmVnZXhwIG1hdGNoZXMgZm9yIHdpbGRjYXJkIHBhcmFtcyBpbiBhdHRyaWJ1dGUgbWF0Y2ggZXhwcmVzc2lvbgoJCXZhciBjbGFzc05hbWUgPSBtYXRjaGVzWzFdOwoKCQl2YXIgcmF3ID0gJGJvdW5kRWwuYXR0cignYmluZC1jbGFzcy0nICsgY2xhc3NOYW1lKTsKCQl2YXIgY2xlYW4gPSByYXcucmVwbGFjZSgvXkAvLCAnJyk7CgkJaWYgKCBtb2RlbC5nZXQoY2xlYW4pICkgewoJCQkkYm91bmRFbC5hZGRDbGFzcyhjbGFzc05hbWUpOwoJCX0KCQllbHNlIHsKCQkJJGJvdW5kRWwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTsKCQl9Cgl9Cn07CgoKfSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBgdGV4dGAgZGF0YSBiaW5kaW5nCiAqIEB0eXBlIHtPYmplY3R9CiAqLwoKbW9kdWxlLmV4cG9ydHMgPSB7CglyZWdleHA6IC9iaW5kLXRleHQvLAoJZm46IGZ1bmN0aW9uICgkZWwsIG1vZGVsKSB7CgkJdmFyIHJhdyA9ICRib3VuZEVsLmF0dHIoJ2JpbmQtdGV4dCcpOwoJCXZhciBjbGVhbiA9IHJhdy5yZXBsYWNlKC9eQC8sICcnKTsKCQkkYm91bmRFbC50ZXh0KCBtb2RlbC5nZXQoY2xlYW4pICk7Cgl9Cn07Cgp9LHt9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIElmIGFueSByZWdpb25zIGV4aXN0IGluIHRoaXMgY29tcG9uZW50LAogKiBlbXB0eSB0aGVtLCBhbmQgdGhlbiBkZWxldGUgdGhlbQogKi8KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVsZXRlQWxsUmVnaW9ucyAoKSB7CglfLmVhY2godGhpcy5yZWdpb25zLCBmdW5jdGlvbiAocmVnaW9uLCBrZXkpIHsKCQlyZWdpb24uZW1wdHkoKTsKCQlkZWxldGUgdGhpcy5yZWdpb25zW2tleV07Cgl9LCB0aGlzKTsKfTsKCn0se31dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogTW9kdWxlIGRlcGVuZGVuY2llcwogKi8KCnZhciBsaWZlY3ljbGVIb29rcyAgICAgPSByZXF1aXJlKCcuL2xpZmVjeWNsZUhvb2tzJyksCglsaWZlY3ljbGVFdmVudHMgICAgPSByZXF1aXJlKCcuL2xpZmVjeWNsZUV2ZW50cycpLAoJYmluZEV2ZW50cyAgICAgICAgID0gcmVxdWlyZSgnLi9iaW5kRXZlbnRzJyksCgljbG9zZUNvbXBvbmVudCAgICAgPSByZXF1aXJlKCcuL2Nsb3NlJyksCglyZW5kZXIgICAgICAgICAgICAgPSByZXF1aXJlKCcuL3JlbmRlcicpLAoJcmVuZGVyQ29sbGVjdGlvbiAgID0gcmVxdWlyZSgnLi9yZW5kZXJDb2xsZWN0aW9uJyksCgl2YWxpZGF0ZURlZmluaXRpb24gPSByZXF1aXJlKCcuL3ZhbGlkYXRlRGVmaW5pdGlvbicpOwoKCi8qKgogKiBGUkFNRVdPUksuQ29tcG9uZW50CiAqCiAqIENvbXBvbmVudCBpcyBhbiBleHRlbmRlZCBgQmFja2JvbmUuVmlld2AuIEl0IGFkZCBmZWF0dXJlcyBzdWNoIGFzIGF1dG9tYXRpYyBldmVudCBiaW5kaW5nLAogKiByZW5kZXJpbmcsIGxpZmVjeWNsZSBob29rcyBhbmQgZXZlbnRzLCBhbmQgbW9yZS4KICoKICogQGNvbnN0cnVjdG9yCiAqLwp2YXIgQ29tcG9uZW50ID0gbW9kdWxlLmV4cG9ydHMgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCgpOwoKCl8uZXh0ZW5kKENvbXBvbmVudC5wcm90b3R5cGUsIHsKCgkvLyBMaWZlY3ljbGUgSG9va3MKCWJlZm9yZVJlbmRlcjogZnVuY3Rpb24oY2IpIHsKCQlsaWZlY3ljbGVIb29rcy5iZWZvcmVSZW5kZXIuY2FsbCh0aGlzLCBjYik7Cgl9LAoJYmVmb3JlQ2xvc2U6IGZ1bmN0aW9uKGNiKSB7CgkJbGlmZWN5Y2xlSG9va3MuYmVmb3JlQ2xvc2UuY2FsbCh0aGlzLCBjYik7Cgl9LAoJYWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uKCkgewoJCWxpZmVjeWNsZUhvb2tzLmFmdGVyUmVuZGVyLmNhbGwodGhpcyk7Cgl9LAoJY2FuY2VsUmVuZGVyOiBmdW5jdGlvbigpIHsKCQlsaWZlY3ljbGVIb29rcy5jYW5jZWxSZW5kZXIuY2FsbCh0aGlzKTsKCX0sCgljYW5jZWxDbG9zZTogZnVuY3Rpb24oKSB7CgkJbGlmZWN5Y2xlSG9va3MuY2FuY2VsQ2xvc2UuY2FsbCh0aGlzKTsKCX0sCgoJLy8gTGlmZWN5Y2xlIEV2ZW50cwoJYWZ0ZXJDaGFuZ2U6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7CgkJbGlmZWN5Y2xlRXZlbnRzLmFmdGVyQ2hhbmdlLmNhbGwodGhpcywgbW9kZWwsIG9wdGlvbnMpOwoJfSwKCWFmdGVyQWRkOiBmdW5jdGlvbihtb2RlbCwgY29sbGVjdGlvbiwgb3B0aW9ucykgewoJCWxpZmVjeWNsZUV2ZW50cy5hZnRlckFkZC5jYWxsKHRoaXMsIG1vZGVsLCBjb2xsZWN0aW9uLCBvcHRpb25zKTsKCX0sCglhZnRlclJlbW92ZTogZnVuY3Rpb24obW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHsKCQlsaWZlY3ljbGVFdmVudHMuYWZ0ZXJSZW1vdmUuY2FsbCh0aGlzLCBtb2RlbCwgY29sbGVjdGlvbiwgb3B0aW9ucyk7Cgl9LAoJYWZ0ZXJSZXNldDogZnVuY3Rpb24oY29sbGVjdGlvbiwgb3B0aW9ucykgewoJCWxpZmVjeWNsZUV2ZW50cy5hZnRlclJlc2V0LmNhbGwodGhpcywgY29sbGVjdGlvbiwgb3B0aW9ucyk7Cgl9LAoKCS8vIFByb3RvdHlwZSBtZXRob2RzLgoJY2xvc2U6IGZ1bmN0aW9uKCkgewoJCWNsb3NlQ29tcG9uZW50LmNhbGwodGhpcyk7Cgl9LAoJcmVuZGVyOiBmdW5jdGlvbihhdEluZGV4KSB7CgkJcmVuZGVyLmNhbGwodGhpcywgYXRJbmRleCk7Cgl9LAoKCXJlbmRlckNvbGxlY3Rpb246IGZ1bmN0aW9uICgpIHsKCQl2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CgkJcmVuZGVyQ29sbGVjdGlvbi5hcHBseSh0aGlzLCBhcmdzKTsKCX0sCn0pOwoKCgoKQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ocHJvcGVydGllcykgewoKCXZhciBzZWxmID0gdGhpczsKCgkvLyBLZWVwIHRyYWNrIG9mIGEgY291bnRlciBmb3IgdXNlIGluIGdlbmVyYXRpbmcKCS8vIGlkcyBmb3IgYW5vbnltb3VzIGNvbXBvbmVudHMuCgl0aGlzLmFub255bW91c1JlZ2lvbkNvdW50ZXIgPSAwOwoKCS8vIERpc2FibGUgb3IgaXNzdWUgd2FybmluZ3MgYWJvdXQgY2VydGFpbiBwcm9wZXJ0aWVzCgkvLyBhbmQgbWV0aG9kcyB0byBhdm9pZCBjb25mdXNpb24KCXByb3BlcnRpZXMgPSB2YWxpZGF0ZURlZmluaXRpb24ocHJvcGVydGllcyk7CgoJLy8gRXh0ZW5kIGluc3RhbmNlIHcvIHNwZWNpZmllZCBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzCglfLmV4dGVuZCh0aGlzLCBwcm9wZXJ0aWVzKTsKCgkvLyBTdGFydCB3aXRoIGVtcHR5IHJlZ2lvbnMgb2JqZWN0Cgl0aGlzLnJlZ2lvbnMgPSB7fTsKCgkvLyBFbmNvdXJhZ2UgY2hpbGQgbWV0aG9kcyB0byB1c2UgdGhlIGNvbXBvbmVudCBjb250ZXh0CglfLmJpbmRBbGwodGhpcyk7Cn07Cgp9LHsiLi9iaW5kRXZlbnRzIjoxLCIuL2Nsb3NlIjoyLCIuL2xpZmVjeWNsZUV2ZW50cyI6OCwiLi9saWZlY3ljbGVIb29rcyI6OSwiLi9yZW5kZXIiOjEwLCIuL3JlbmRlckNvbGxlY3Rpb24iOjExLCIuL3ZhbGlkYXRlRGVmaW5pdGlvbiI6MTR9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gRmlyZWQgd2hlbiB0aGUgYm91bmQgbW9kZWwgaXMgdXBkYXRlZCAoYHRoaXMubW9kZWxgKQpleHBvcnRzLmFmdGVyQ2hhbmdlID0gZnVuY3Rpb24gKG1vZGVsLCBvcHRpb25zKSB7fTsKCi8vIEZpcmVkIHdoZW4gYSBtb2RlbCBpcyBhZGRlZCB0byB0aGUgYm91bmQgY29sbGVjdGlvbiAoYHRoaXMuY29sbGVjdGlvbmApCmV4cG9ydHMuYWZ0ZXJBZGQgPSBmdW5jdGlvbiAobW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHt9OwoKLy8gRmlyZWQgd2hlbiBhIG1vZGVsIGlzIHJlbW92ZWQgZnJvbSB0aGUgYm91bmQgY29sbGVjdGlvbiAoYHRoaXMuY29sbGVjdGlvbmApCmV4cG9ydHMuYWZ0ZXJSZW1vdmUgPSBmdW5jdGlvbiAobW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHt9OwoKLy8gRmlyZWQgd2hlbiB0aGUgYm91bmQgY29sbGVjdGlvbiBpcyB3aXBlZCAoYHRoaXMuY29sbGVjdGlvbmApCmV4cG9ydHMuYWZ0ZXJSZXNldCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCBvcHRpb25zKSB7fTsKCn0se31dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBGaXJlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIHZpZXcgaXMgaW5pdGlhbGx5IGNyZWF0ZWQKLy8gb25seSBmaXJlZCBhZnRlcndhcmRzIGlmIHRoaXMucmVuZGVyKCkgaXMgZXhwbGljaXRseSBjYWxsZWQKLy8gQ2FsbGJhY2sgbXVzdCBiZSBmaXJlZCEhCmV4cG9ydHMuYmVmb3JlUmVuZGVyID0gZnVuY3Rpb24gKGNiKSB7Y2IoKTt9OwoKLy8gRmlyZWQgYXV0b21hdGljYWxseSB3aGVuIHRoZSB2aWV3IGlzIGluaXRpYWxseSBjcmVhdGVkCi8vIG9ubHkgZmlyZWQgYWZ0ZXJ3YXJkcyBpZiB0aGlzLnJlbmRlcigpIGlzIGV4cGxpY2l0bHkgY2FsbGVkCmV4cG9ydHMuYWZ0ZXJSZW5kZXIgPSBmdW5jdGlvbiAoKSB7fTsKCi8vIEZpcmVkIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGUgdmlldyBpcyBjbG9zZWQKZXhwb3J0cy5iZWZvcmVDbG9zZSA9IGZ1bmN0aW9uIChjYikge2NiKCk7fTsKCi8vIEZpcmVkIGJlZm9yZSByZXJlbmRlcmluZyBvciBjbG9zaW5nIGEgdmlldyB0aGF0IGlzIGFscmVhZHkgd2FpdGluZyBvbiBhIGxvY2sKZXhwb3J0cy5jYW5jZWxSZW5kZXIgPSBmdW5jdGlvbiAoKSB7CglGUkFNRVdPUksud2FybignY2FuY2VsUmVuZGVyKCkgc2hvdWxkIGJlIGRlZmluZWQgaWYgYmVmb3JlQ2xvc2UoY2IpIG9yIGJlZm9yZVJlbmRlcihjYiknICsKCQkJCQkJCQkgJ2FyZSBiZWluZyB1c2VkIScpOwp9OwoKLy8gRmlyZWQgYmVmb3JlIHJlcmVuZGVyaW5nIG9yIGNsb3NpbmcgYSB2aWV3IHRoYXQgaXMgYWxyZWFkeSB3YWl0aW5nIG9uIGEgbG9jawpleHBvcnRzLmNhbmNlbENsb3NlID0gZnVuY3Rpb24gKCkgewoJRlJBTUVXT1JLLndhcm4oJ2NhbmNlbENsb3NlKCkgc2hvdWxkIGJlIGRlZmluZWQgaWYgYmVmb3JlQ2xvc2UoY2IpIG9yIGJlZm9yZVJlbmRlcihjYiknICsKCQkJCQkJCQkgJ2FyZSBiZWluZyB1c2VkIScpOwp9OwoKfSx7fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogTW9kdWxlIGRlcGVuZGVuY2llcwogKi8KCnZhciBET00gPSByZXF1aXJlICgnLi4vdXRpbHMvRE9NJyksCgkJcmVuZGVyRGF0YUJpbmRpbmdzID0gcmVxdWlyZSgnLi9yZW5kZXJEYXRhQmluZGluZ3MnKSwKCQljb21waWxlVGVtcGxhdGUgPSByZXF1aXJlKCcuL2NvbXBpbGVUZW1wbGF0ZScpLAoJCXJlbmRlclJlZ2lvbnMgPSByZXF1aXJlKCcuL3JlbmRlclJlZ2lvbnMnKSwKCQliaW5kRXZlbnRzID0gcmVxdWlyZSAoJy4vYmluZEV2ZW50cycpOwoKCgoKLyoqCiAqIFJ1biBIVE1MIHRlbXBsYXRlIHRocm91Z2ggZW5naW5lIGFuZCBhcHBlbmQgcmVzdWx0cyB0byBvdXRsZXQuIEFsc28gcmVyZW5kZXIgcmVnaW9ucy4KICogSWYgYXRJbmRleCBpcyBzcGVjaWZpZWQsIHRoZSBjb21wb25lbnQgaXMgcmVuZGVyZWQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uIHdpdGhpbiBpdHMKICogb3V0bGV0LiBPdGhlcndpc2UsIHRoZSBsYXN0IHBvc2l0aW9uIGlzIHVzZWQuCiAqCiAqIEBwYXJhbSB7TnVtYmVyfSBhdEluZGV4IFtUaGUgaW5kZXggaW4gd2hpY2ggdG8gcmVuZGVyIHRoaXMgZWxlbWVudF0KICovCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbmRlcihhdEluZGV4KSB7CgoJRlJBTUVXT1JLLmRlYnVnKHRoaXMuaWQgKyAnIDotLS06IFJlbmRlcmluZyBjb21wb25lbnQuLi4nKTsKCgl2YXIgc2VsZiA9IHRoaXM7CgoJLy8gQ2FuY2VsIGN1cnJlbnQgcmVuZGVyIGFuZCBjbG9zZSBqb2JzLCBpZiB0aGV5J3JlIHJ1bm5pbmcKCWlmICh0aGlzLl9yZW5kZXJpbmcpIHsKCQlGUkFNRVdPUksuZGVidWcodGhpcy5pZCArICcgOjogcmVuZGVyKCkgY2FuY2VsZWQuJyk7CgkJdGhpcy5fcmVuZGVyaW5nQ2FuY2VsZWQgPSB0cnVlOwoJCXRoaXMuY2FuY2VsUmVuZGVyKCk7CgkJdGhpcy5fcmVuZGVyaW5nID0gZmFsc2U7Cgl9CglpZiAodGhpcy5fY2xvc2luZykgewoJCUZSQU1FV09SSy5kZWJ1Zyh0aGlzLmlkICsgJyA6OiBjbG9zZSgpIGNhbmNlbGVkLicpOwoJCXRoaXMuY2FuY2VsQ2xvc2UoKTsKCQl0aGlzLl9jbG9zaW5nID0gZmFsc2U7Cgl9CgoJLy8gTG9jayBhY2Nlc3MgdG8gcmVuZGVyCgl0aGlzLl9yZW5kZXJpbmcgPSB0cnVlOwoKCS8vIFRyaWdnZXIgYmVmb3JlUmVuZGVyIG1ldGhvZAoJdGhpcy5iZWZvcmVSZW5kZXIoZnVuY3Rpb24gKCkgewoKCQkvLyBJZiByZW5kZXJpbmcgd2FzIGNhbmNlbGVkLCBicmVhayBvdXQKCQkvLyBkbyBub3QgcmVuZGVyLCBhbmQgZG8gbm90IGNhbGwgYWZ0ZXJSZW5kZXIoKQoJCWlmICggc2VsZi5fcmVuZGVyaW5nQ2FuY2VsZWQgKSB7CgkJCXJldHVybjsKCQl9CgoJCS8vIEJpbmQgdGhlIGV2ZW50cyBvbiBtb2RlbC9jb2xsZWN0aW9ucyBhbmQgZ2xvYmFsIHRyaWdnZXJlZCBldmVudHMuCgkJYmluZEV2ZW50cy5jb2xsZWN0aW9uRXZlbnRzLmNhbGwoc2VsZik7CgkJYmluZEV2ZW50cy5tb2RlbEV2ZW50cy5jYWxsKHNlbGYpOwoJCWJpbmRFdmVudHMuZ2xvYmFsVHJpZ2dlcnMuY2FsbChzZWxmKTsKCgkJLy8gVW5sb2NrIHJlbmRlcmluZyBtdXRleAoJCXNlbGYuX3JlbmRlcmluZyA9IGZhbHNlOwoKCQlpZiAoIXNlbGYuJG91dGxldCkgewoJCQl0aHJvdyBuZXcgRXJyb3Ioc2VsZi5pZCArICcgOjogVHJ5aW5nIHRvIHJlbmRlcigpLCBidXQgbm8gJG91dGxldCB3YXMgZGVmaW5lZCEnKTsKCQl9CgoJCS8vIEh5ZHJhdGUgY29tcGlsZWQgdGVtcGxhdGUKCQkvLyAoY29tYmluZXMgdGhlIHRlbXBsYXRlIGZ1bmN0aW9uIHdpdGggZGF0YSB0byByZXR1cm4gSFRNTCkKCQl2YXIgaHRtbCA9IGNvbXBpbGVUZW1wbGF0ZS5jYWxsKHNlbGYpOwoJCWlmICghaHRtbCkgewoJCQl0aHJvdyBuZXcgRXJyb3IodGhpcy5pZCArICcgOjogVW5hYmxlIHRvIHJlbmRlciBjb21wb25lbnQgYmVjYXVzZSB0ZW1wbGF0ZSBjb21waWxhdGlvbiBkaWQgbm90IHJldHVybiBhbnkgSFRNTC4nKTsKCQl9CgoJCS8vIFN0cmlwIHRyYWlsaW5nIGFuZCBsZWFkaW5nIHdoaXRlc3BhY2UgdG8gYXZvaWQgZmFsc2VseSBkaWFnbm9zaW5nCgkJLy8gbXVsdGlwbGUgZWxlbWVudHMsIHdoZW4gb25seSBvbmUgYWN0dWFsbHkgZXhpc3RzCgkJLy8gKHRoaXMgbWlzZGlhZ25vc2lzIHdyYXBzIHRoZSB0ZW1wbGF0ZSBpbiBhbiBleHRyYW5lb3VzIDxkaXY+KQoJCWh0bWwgPSBodG1sLnJlcGxhY2UoL15ccyovLCAnJyk7CgkJaHRtbCA9IGh0bWwucmVwbGFjZSgvXHMqJC8sICcnKTsKCQlodG1sID0gaHRtbC5yZXBsYWNlKC8oXHJ8XG4pKi8sICcnKTsKCgkJLy8gU3RyaXAgSFRNTCBjb21tZW50cywgdGhlbiBzdHJpcCB3aGl0ZXNwYWNlIGFnYWluCgkJLy8gKFRPRE86IG9wdGltaXplIHRoaXMpCgkJaHRtbCA9IGh0bWwucmVwbGFjZSgvKDwhLS0uKy0tPikqLywgJycpOwoJCWh0bWwgPSBodG1sLnJlcGxhY2UoL15ccyovLCAnJyk7CgkJaHRtbCA9IGh0bWwucmVwbGFjZSgvXHMqJC8sICcnKTsKCQlodG1sID0gaHRtbC5yZXBsYWNlKC8oXHJ8XG4pKi8sICcnKTsKCgkJLy8gUGFyc2UgYSBET00gbm9kZSBvciBzZXJpZXMgb2YgRE9NIG5vZGVzIGZyb20gdGhlIG5ld2x5IHRlbXBsYXRlZCBIVE1MCgkJdmFyIHBhcnNlZE5vZGVzID0gJC5wYXJzZUhUTUwoaHRtbCk7CgkJdmFyIGVsID0gcGFyc2VkTm9kZXNbMF07CgoJCS8vIElmIG5vIG5vZGVzIHdlcmUgcGFyc2VkLCB0aHJvdyBhbiBlcnJvcgoJCWlmIChwYXJzZWROb2Rlcy5sZW5ndGggPT09IDApIHsKCQkJdGhyb3cgbmV3IEVycm9yKHNlbGYuaWQgKyAnIDo6IHJlbmRlcigpIHJhbiBpbnRvIGEgcHJvYmxlbSByZW5kZXJpbmcgdGhlIHRlbXBsYXRlIHdpdGggSFRNTCA9PiBcbicraHRtbCk7CgkJfQoKCgoJCS8vIElmIHRoZXJlIGlzIG5vdCBvbmUgc2luZ2xlIHdyYXBwZXIgZWxlbWVudCwKCQkvLyBvciBpZiB0aGUgcmVuZGVyZWQgdGVtcGxhdGUgY29udGFpbnMgb25seSBhIHNpbmdsZSB0ZXh0IG5vZGUsCgkJZWxzZSBpZiAocGFyc2VkTm9kZXMubGVuZ3RoID4gMSB8fCBwYXJzZWROb2Rlc1swXS5ub2RlVHlwZSA9PT0gMykgewoKCQkJRlJBTUVXT1JLLmxvZyhzZWxmLmlkICsgJyA6OiBXcmFwcGluZyB0ZW1wbGF0ZSBpbiA8ZGl2Lz4uLi4nLCBwYXJzZWROb2Rlcyk7CgkJCWVsID0gJCgnPGRpdi8+JykuYXBwZW5kKGh0bWwpOwoJCQllbCA9IGVsWzBdOwoJCX0KCgkJLy8gKG9yIGp1c3QgYSBsb25lIHJlZ2lvbikKCQkvLyB3cmFwIHRoZSBodG1sIHVwIGluIGEgY29udGFpbmVyIDxkaXYvPgoJCS8vIGVsc2UgaWYgKAoJCS8vIAkkKHBhcnNlZE5vZGVzWzBdKS5pcygncmVnaW9uJykgfHwKCQkvLyAJJChwYXJzZWROb2Rlc1swXSkuYXR0cignZGF0YS1yZWdpb24nKSAhPT0gdW5kZWZpbmVkICkgewoJCS8vIAkvLyB1c2VkIHRvIHdyYXAgdGhpcyBzdHVmZiBpbiBhIGRpdiB0b28sIGJ1dCBub3QgYW55bW9yZQoJCS8vIAkvLyBzaW5jZSBpdCBtZXNzZXMgdy8gSFRNTCB0aGluZ3MgbGlrZSB0YWJsZXMKCQkvLyB9CgoKCgkJLy8gU2V0IEJhY2tib25lIGVsZW1lbnQgKGNhY2hlIGFuZCByZWRlbGVnYXRlIERPTSBldmVudHMpCgkJLy8gKFdpbGwgYWxzbyB1cGRhdGUgc2VsZi4kZWwpCgkJc2VsZi5zZXRFbGVtZW50KGVsKTsKCgoKCQkvLyBEZXRlY3QgYW5kIHJlbmRlciBhbGwgcmVnaW9ucyBhbmQgdGhlaXIgZGVzY2VuZGVudCBjb21wb25lbnRzIGFuZCByZWdpb25zCgkJcmVuZGVyUmVnaW9ucy5jYWxsKHNlbGYpOwoKCQkvLyBJbnNlcnQgdGhlIGVsZW1lbnQgYXQgdGhlIHByb3BlciBwbGFjZSBhbW9uZ3N0IHRoZSBvdXRsZXQncyBjaGlsZHJlbgoJCXZhciBuZWlnaGJvcnMgPSBzZWxmLiRvdXRsZXQuY2hpbGRyZW4oKTsKCQlpZiAoXy5pc0Zpbml0ZShhdEluZGV4KSAmJiBuZWlnaGJvcnMubGVuZ3RoID4gMCAmJiBuZWlnaGJvcnMubGVuZ3RoID4gYXRJbmRleCkgewoJCQluZWlnaGJvcnMuZXEoYXRJbmRleCkuYmVmb3JlKHNlbGYuJGVsKTsKCQl9CgoJCS8vIEJ1dCBpZiB0aGUgb3V0bGV0IGlzIGVtcHR5LCBvciB0aGVyZSdzIG5vIGF0SW5kZXgsIGp1c3Qgc3RpY2sgaXQgb24gdGhlIGVuZAoJCWVsc2Ugc2VsZi4kb3V0bGV0LmFwcGVuZChzZWxmLiRlbCk7CgoKCQkvLyBGbGFnIHdpdGggZGF0YS10ZW1wbGF0ZS1pZCBhdHRyaWJ1dGUKCQkvLyAodG8gbWFrZSB0ZW1wbGF0ZS9jb21wb25lbnQgYm91bmRhcmllcyBlYXNpZXIgdG8gcGljayBvdXQgaW4gdGhlIGluc3BlY3RvcikKCQlzZWxmLiRlbC5hdHRyKCdkYXRhLXRlbXBsYXRlLWlkJywgc2VsZi5pZCk7CgoKCgoJCS8vCgkJLy8gSWYgdGhlIHBhcmVudCBjb21wb25lbnQgaGFzIHJvdXRlIGxpc3RlbmVycyAoZS5nLiAjZm9vKQoJCS8vIHJ1biBhbnkgb2YgdGhlbSB0aGF0IG1hdGNoIGB3aW5kb3cubG9jYXRpb24uaGFzaGAuCgkJLy8gKGFmdGVyIHJlbmRlcmluZyB0aGUgdGVtcGxhdGUgYW5kIHJlZ2lvbnMgYnV0IEJFRk9SRSB0aGUgYGFmdGVyUmVuZGVyYAoJCS8vIGxpZmVjeWNsZSBjYWxsYmFjayBpcyB0cmlnZ2VyZWQpCgkJLy8KCQkvLyBub3Qgc3VyZSBpZiB0aGlzIGlzIGEgZ29vZCBpZGVhIGluIGdlbmVyYWwtLSBtYXliZSBjb25maWd1cmFibGUuLj8KCQkvLyBvciBvbmx5IGlmIGJhY2tib25lLmhpc3RvcnkgaXNuJ3QgcmVhZHkgeWV0PwoJCS8vCgkJLy8gZGlzYWJsaW5nIGZvciBub3cuLi4KCQkvLyBfLmVhY2goIE9iamVjdC5rZXlzKHNlbGYpLCBmdW5jdGlvbiAoa2V5KSB7CgkJLy8gCXZhciBtYXRjaGVkUm91dGUgPSBrZXkubWF0Y2gobmV3IFJlZ0V4cCgnL14nICt3aW5kb3cubG9jYXRpb24uaGFzaCArICcvJykpOwoJCS8vIAlpZiAoIW1hdGNoZWRSb3V0ZSkgcmV0dXJuOwoKCQkvLyAJdmFyIG1hdGNoZWRSb3V0ZUxpc3RlbmVyID0gc2VsZlttYXRjaGVkUm91dGVdOwoJCS8vIAltYXRjaGVkUm91dGVMaXN0ZW5lcigpOwoJCS8vIH0pOwoKCgkJLy8gRmluYWxseSwgdHJpZ2dlciBhZnRlclJlbmRlciBtZXRob2QKCQlzZWxmLmFmdGVyUmVuZGVyKCk7CgoKCQkvLyBSdW4gZGF0YSBiaW5kaW5ncwoJCS8vIFRPRE86IGRvbid0IGNhbGwgdGhpcyBoZXJlLS0ganVzdCBkbyB3aGVuIGluaXRpYWxseSBpbnNlcnRpbmcgdGhlIHRlbXBsYXRlIGludG8gdGhlIERPTQoJCS8vICh0aGlzIGlzIGluZWZmaWNpZW50KQoJCXJlbmRlckRhdGFCaW5kaW5ncy5jYWxsKHNlbGYpOwoKCgkJLy8gQWRkIGRhdGEgYXR0cmlidXRlcyB0byB0aGlzIGNvbXBvbmVudCdzICRlbCwgcHJvdmlkaW5nIGFjY2VzcwoJCS8vIHRvIHdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIHZhcmlvdXMgRE9NIGJpbmRpbmdzIGZyb20gc3R5bGVzaGVldHMuCgkJLy8gKGhhbmR5IGZvciBkaXNhYmxpbmcgdGV4dCBzZWxlY3Rpb24gYWNjb3JkaW5nbHksIGV0Yy4pCgkJLy8KCQkvLyAtPiBkaXNhYmxlIGZvciB0aGlzIGNvbXBvbmVudCB3aXRoIGB0aGlzLmF0dHJGbGFncyA9IGZhbHNlYAoJCS8vIC0+IG9yIGdsb2JhbGx5IHdpdGggYEZSQU1FV09SSy5hdHRyRmxhZ3MgPSBmYWxzZWAKCQkvLwoJCS8vIFRPRE86IG1ha2UgaXQgd29yayB3aXRoIGRlbGVnYXRlZCBET00gZXZlbnQgYmluZGluZ3MKCQkvLwoJCWlmIChzZWxmLmF0dHJGbGFncyAhPT0gZmFsc2UgJiYgRlJBTUVXT1JLLmF0dHJGbGFncyAhPT0gZmFsc2UpIHsKCQkJRE9NLmZsYWdCb3VuZEV2ZW50cyhzZWxmKTsKCQl9Cgl9KTsKfTsKCn0seyIuLi91dGlscy9ET00iOjMzLCIuL2JpbmRFdmVudHMiOjEsIi4vY29tcGlsZVRlbXBsYXRlIjozLCIuL3JlbmRlckRhdGFCaW5kaW5ncyI6MTIsIi4vcmVuZGVyUmVnaW9ucyI6MTN9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CgovKioKICogVE9ETzoKICogVHJ5IG91dCBhIGRpZmZlcmVudCBhcHByb2FjaCBmb3IgdGhlIGxvZ2ljIGluIGByZW5kZXJDb2xsZWN0aW9uYAogKiBiZWxvdyBieSBvdmVybG9hZGluZyBgcmVnaW9uLmF0dGFjaCgpYC4KICoKICogRXhhbXBsZSB1c2FnZTogKGluIHBhcmVudCBjb21wb25lbnQpCiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAqIHRoaXMuc29tZVJlZ2lvbi5hdHRhY2goJ1NvbWVPdGhlckNvbXBvbmVudCcseyBjb2xsZWN0aW9uOiBTb21lQ29sbGVjdGlvbiB9KQogKgogKiAtb3ItCiAqCiAqIHRoaXMuc29tZVJlZ2lvbi5yZXBlYXQoJ1NvbWVPdGhlckNvbXBvbmVudCcseyBjb2xsZWN0aW9uOiBTb21lQ29sbGVjdGlvbiB9KQogKi8KCi8qKgogKiByZW5kZXJDb2xsZWN0aW9uKCkKICoKICogUmV1c2FibGUgbG9naWMgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBpbnRvIGEgcmVnaW9uCiAqCiAqIFRPRE86IG1vdmUgb250byBSZWdpb24gb2JqZWN0IGluc3RlYWQuLi4gIFNlZSBnaXN0LgogKgogKiBAcGFyYW0ge09iamVjdH0gY29sbGVjdGlvbiAtIGRhdGEgc291cmNlCiAqIEBwYXJhbSB7T3B0aW9uc30gb3B0aW9ucwogKgkJOiBvcHRpb25zLml0ZW1UZW1wbGF0ZSB7U3RyaW5nfSAtIG5hbWUgb2YgdGVtcGxhdGUvY29tcG9uZW50IHRvIHVzZSBhcyBpdGVtCiAqCQk6IG9wdGlvbnMuaW50b1JlZ2lvbiB7T2JqZWN0fSAtIHRoZSBkZXN0aW5hdGlvbiByZWdpb24KICovCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHsKCgkvLyBSZXF1aXJlZDoKCWlmICh0eXBlb2YgY29sbGVjdGlvbiAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBFcnJvcigncmVuZGVyQ29sbGVjdGlvbiA6OiBVbmtub3duL2ludmFsaWQgY29sbGVjdGlvbiwgIicgKyAoY29sbGVjdGlvbiAmJiBjb2xsZWN0aW9uLnR5cGUpICsgJyInKTsKCWlmICghb3B0aW9ucy5pdGVtVGVtcGxhdGUpIHRocm93IG5ldyBFcnJvcigncmVuZGVyQ29sbGVjdGlvbiA6OiBvcHRpb25zLml0ZW1UZW1wbGF0ZSByZXF1aXJlZCEnKTsKCWlmICghb3B0aW9ucy5pbnRvUmVnaW9uKSB0aHJvdyBuZXcgRXJyb3IoJ3JlbmRlckNvbGxlY3Rpb24gOjogb3B0aW9ucy5pbnRvUmVnaW9uIHJlcXVpcmVkIScpOwoKCgkvLyBEZXRlcm1pbmUgY29sbGVjdGlvbk5hbWUKCXZhciBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24udHlwZTsKCgkvLyBUYXJnZXQgcmVnaW9uCgl2YXIgb3V0bGV0ID0gb3B0aW9ucy5pbnRvUmVnaW9uOwoKCS8vIFN1Yi1jb21wb25lbnQKCXZhciBzdWJjb21wb25lbnROYW1lID0gb3B0aW9ucy5pdGVtVGVtcGxhdGU7CgoJLy8gTmFtZSBvZiB0aGUgY29sbGVjdGlvbiBzdGF0ZSBhdHRyaWJ1dGUgdGhhdCB3aWxsZSBiZSBpbmplY3RlZCBpbnRvIHRoZSBIVE1MCgkvLyBVc2VkIGZvciB0aGUgZGVmYXVsdCByZW5kZXIgYmVoYXZpb3IuCgl2YXIgYm9keVN0YXRlQXR0cmlidXRlID0gJ2RhdGEtJyArIGNvbGxlY3Rpb25OYW1lICsgJy1zdGF0ZSc7CgoKCgoJLyoqCgkgKiBEZWZhdWx0IHJlbmRlciBtZXRob2RzCgkgKgoJICogT3ZlcnJpZGUgZGVmYXVsdCByZW5kZXIgbWV0aG9kcyB3aXRoIG9wdGlvbnMgaWYgc3BlY2lmaWVkCgkgKi8KCgkvLyBEZWZhdWx0IHJlbmRlciBsb2dpYyBmb3IgZXJyb3Igc3RhdGUgKGUuZy4gcmVkIHRleHQpCgl2YXIgcmVuZGVyRXJyb3IgPSBvcHRpb25zLnJlbmRlckVycm9yIHx8IGZ1bmN0aW9uIHJlbmRlckVycm9yICgpIHsKCQlGUkFNRVdPUksuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIGxvYWRpbmcgJyArIGNvbGxlY3Rpb25OYW1lICsgJyA6OlxuJywgY29sbGVjdGlvbi5lcnJvcik7CgoJCS8vIFNldCBhIGRhdGEgYXR0cmlidXRlIG9uIEhUTUwgYm9keQoJCSQoJ2JvZHknKS5hdHRyKGJvZHlTdGF0ZUF0dHJpYnV0ZSwgJ2Vycm9yJyk7Cgl9OwoKCS8vIERlZmF1bHQgcmVuZGVyIGxvZ2ljIGZvciBsb2FkaW5nIHN0YXRlIChlLmcuIHNwaW5uZXIpCgl2YXIgcmVuZGVyU3luY2luZyA9IG9wdGlvbnMucmVuZGVyU3luY2luZyB8fCBmdW5jdGlvbiByZW5kZXJTeW5jaW5nKCkgewoJCUZSQU1FV09SSy5sb2coJ0xvYWRpbmcgJyArIGNvbGxlY3Rpb25OYW1lICsgJy4uLicpOwoKCQkvLyBTZXQgc3RhdGUgYXR0cmlidXRlIG9uIEhUTUwgYm9keQoJCSQoJ2JvZHknKS5hdHRyKGJvZHlTdGF0ZUF0dHJpYnV0ZSwgJ3N5bmNpbmcnKTsKCX07CgoJLy8gRGVmYXVsdCByZW5kZXIgbG9naWMgdG8gY2xlYW4gdXAgYWZ0ZXIgYSBzdWNjZXNzZnVsIHN5bmMvbG9hZAoJdmFyIHJlbmRlclN5bmNlZCA9IG9wdGlvbnMucmVuZGVyU3luY2VkIHx8IGZ1bmN0aW9uIHJlbmRlclN5bmNlZCgpIHsKCQlGUkFNRVdPUksubG9nKGNvbGxlY3Rpb24ubGVuZ3RoICsgJyAnICsgY29sbGVjdGlvbk5hbWUgKyAnIGZldGNoZWQgc3VjY2Vzc2Z1bGx5LicpOwoKCQkvLyBTZXQgc3RhdGUgYXR0cmlidXRlIG9uIEhUTUwgYm9keQoJCSQoJ2JvZHknKS5hdHRyKGJvZHlTdGF0ZUF0dHJpYnV0ZSwgJ3JlYWR5Jyk7Cgl9OwoKCS8vIERlZmF1bHQgcmVuZGVyIGxvZ2ljIGZvciBpdGVtcyBpbiBjb2xsZWN0aW9uCgl2YXIgcmVuZGVyUmVzZXQgPSBvcHRpb25zLnJlbmRlclJlc2V0IHx8IGZ1bmN0aW9uIHJlbmRlclJlc2V0KCkgewoKCQkvLyBDbGVhbiBvdXQgdGhlIHJlZ2lvbiwgd3JhcCBpbiBhIHRyeS9jYXRjaCB0byBzdG9wIHRoZSBleGVjdXRpb24KCQl0cnkgewoJCQlvdXRsZXQuZW1wdHkoKTsKCQl9IGNhdGNoIChlKSB7fQoKCgkJLy8gVE9ETzogU21hcnQgbWVyZ2UgdG8gbWluaW1pemUgRE9NIHF1ZXJpZXMKCQljb2xsZWN0aW9uLmVhY2goZnVuY3Rpb24gKG1vZGVsKSB7CgkJCS8vIEZvciBlYWNoIG1vZGVsIGZvdW5kLCBhcHBlbmQgYSBzdWJjb21wb25lbnQgdG8gdGhlIHJlZ2lvbgoJCQlvdXRsZXQuYXBwZW5kKHN1YmNvbXBvbmVudE5hbWUsIHsgbW9kZWw6IG1vZGVsIH0pOwoJCX0pOwoJfTsKCgkvKioKCSAqIHJlbmRlckFkZCAoIG1vZGVsLCBbYXRJbmRleF0gKQoJICoKCSAqIEBwYXJhbSB7TW9kZWx9IG1vZGVsCQkJCQkJLSB0aGUgQmFja2JvbmUgbW9kZWwgdGhhdCB3YXMgYWRkZWQKCSAqIEBwYXJhbSB7SW50ZWdlcn0gYXRJbmRleAkJCQktIChvcHRpb25hbC0gZGVmYXVsdHMgdG8gY29sbGVjdGlvbi5sZW5ndGgpCgkgKgoJICogRGVmYXVsdCByZW5kZXIgbG9naWMgZm9yIHRoZSBjYXNlIHdoZXJlIGFuIGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGNvbGxlY3Rpb24uCgkgKi8KCXZhciByZW5kZXJBZGQgPSBvcHRpb25zLnJlbmRlckFkZCB8fCBmdW5jdGlvbiByZW5kZXJBZGQoIG1vZGVsLCBhdEluZGV4ICkgewoJCWlmICggdHlwZW9mIGF0SW5kZXggPT09ICdudW1iZXInKSB7CgkJCXJldHVybiBvdXRsZXQuaW5zZXJ0KGF0SW5kZXgsIHN1YmNvbXBvbmVudE5hbWUsIHsgbW9kZWw6IG1vZGVsIH0pOwoJCX0KCQlyZXR1cm4gb3V0bGV0LmFwcGVuZChzdWJjb21wb25lbnROYW1lLCB7IG1vZGVsOiBtb2RlbCB9KTsKCX07CgoJLyoqCgkgKiByZW5kZXJSZW1vdmUoIGF0SW5kZXggKQoJICoKCSAqIEBwYXJhbSB7SW50ZWdlcn0gYXRJbmRleAkJCS0gdGhlIGZvcm1lciBpbmRleCBvZiB0aGUgQmFja2JvbmUgbW9kZWwgdGhhdCB3YXMgcmVtb3ZlZAoJICoKCSAqIERlZmF1bHQgcmVuZGVyIGxvZ2ljIGZvciB0aGUgY2FzZSB3aGVyZSBhbiBpdGVtIGlzIHJlbW92ZWQgZnJvbSB0aGUgY29sbGVjdGlvbi4KCSAqLwoJdmFyIHJlbmRlclJlbW92ZSA9IG9wdGlvbnMucmVuZGVyUmVtb3ZlIHx8IGZ1bmN0aW9uIHJlbmRlclJlbW92ZSggYXRJbmRleCApIHsKCQlvdXRsZXQucmVtb3ZlKCBhdEluZGV4ICk7Cgl9OwoKCgoKCgoJLyoqCgkgKiBCb290c3RyYXAKCSAqCgkgKiBSZW5kZXJzIGluaXRpYWwgc3RhdGUgb2YgY29sbGVjdGlvbiBpbnRvIG91ciByZWdpb24KCSAqIHVzaW5nIG91ciBjaGlsZCB0ZW1wbGF0ZS4KCSAqLwoKCS8vIElmIG91ciBjb2xsZWN0aW9uIGlzIGZldGNoaW5nLCByZW5kZXIgdGhlIGZldGNoaW5nIChsb2FkaW5nKSBzdGF0ZS4KCWlmIChjb2xsZWN0aW9uLnN5bmNpbmcpIHsKCQlyZW5kZXJTeW5jaW5nKCk7Cgl9CgoKCS8vIElmIG91ciBjb2xsZWN0aW9uIGZhaWxlZCB0byBmZXRjaCAoaS5lLiByZWNlaXZlZCBhIDR4eCBvciA1eHggZXJyb3IgY29kZSkKCS8vIHJlbmRlciBhbiBlcnJvciBzdGF0ZQoJLy8KCS8vIEhhbmRsZSB0aGUgY2FzZSBvZiBtdWx0aXBsZSBlcnJvciBzdGF0ZXMgd2l0aCBkaWZmZXJlbnQgc3R5bGVzIGhlcmUgYXMgd2VsbC4KCWVsc2UgaWYgKGNvbGxlY3Rpb24uZXJyb3IpIHsKCQlyZW5kZXJFcnJvcigpOwoJfQoKCgkvLyBPdGhlcndpc2Ugb3VyIGNvbGxlY3Rpb24gaXMgbG9hZGVkIGFuZCByZWFkeSwKCS8vIHNvIGdvIGFoZWFkIGFuZCByZW5kZXIgaXQgaW50byB0aGUgdGFyZ2V0IHJlZ2lvbi4KCS8vCgkvLyAoYWx0ZXJuYXRpdmVseSBhdCB0aGlzIHBvaW50LCBhIGN1c3RvbSBgZW1wdHlgIHN0YXRlIG1heSBiZSByZW5kZXJlZCkKCS8vIGNvbnNvbGUubG9nKCdUaGUgY29sbGVjdGlvbiAnICsgc3ViY29tcG9uZW50TmFtZSArICctLS0tPicpOwoJZWxzZSByZW5kZXJSZXNldCgpOwoKCgoKCgoKCS8qKgoJICogQmluZCBldmVudHMKCSAqCgkgKiBMaXN0ZW4gZm9yIHN0YXRlIGNoYW5nZXMgKHN5bmNpbmcsIHN5bmNlZCwgc2VydmVyIGVycm9yLCBhZGQsIHJlbW92ZSwgc29ydCwgZXRjLikKCSAqIFRoZXNlIG1hbnVhbCBiaW5kaW5ncyBjYW4gYmUgcmVtb3ZlZCB3aGVuIGNvcmUgZnJhbWV3b3JrIHN1cHBvcnRzIHJlbmRlci10aW1lIGNvbGxlY3Rpb24KCSAqIGJpbmRpbmdzLiAgRm9yIG5vdywgZG9pbmcgaXQgdGhpcyB3YXkgcmF0aGVyIHRoYW4gcGF0Y2hpbmcgdGhlIGNvcmUgdG8gdGVzdCBvdXIgc3RydWN0dXJhbAoJICogYXNzdW1wdGlvbnMuCgkgKi8KCgkvLyBXaGVuIGEgZmV0Y2ggaXMgaW5pdGlhdGVkIGZyb20gdGhlIHNlcnZlci4uLgoJLy8KCS8vIChhZnRlciBgQmFja2JvbmUuc3luY2AgYmVnaW5zIGEgcmVtb3RlIHJlcXVlc3QpCgl0aGlzLmxpc3RlblRvKGNvbGxlY3Rpb24sICdyZXF1ZXN0JywgZnVuY3Rpb24gYWZ0ZXJSZXF1ZXN0ICgpIHsKCQlyZW5kZXJTeW5jaW5nKCk7Cgl9KTsKCgkvLyBXaGVuIGEgZmV0Y2ggY29tcGxldGVzIHN1Y2Nlc3NmdWxseSBhbmQgbmV3IGRhdGEgaXMgbG9hZGVkLi4uCgkvLwoJLy8gKGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGFscmVhZHkgaW5zdGFudGlhdGVkKQoJdGhpcy5saXN0ZW5Ubyhjb2xsZWN0aW9uLCAnc3luYycsIGZ1bmN0aW9uIGFmdGVyU3luYyAoKSB7CgkJcmVuZGVyU3luY2VkKCk7CgkJcmVuZGVyUmVzZXQoKTsKCX0pOwoKCS8vIFdoZW4gc2VydmVyIHNlbmRzIGEgcmVzcG9uc2Ugdy8gYW4gZXJyb3IgY29kZQoJLy8KCS8vIChhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBhbHJlYWR5IGluc3RhbnRpYXRlZCkKCXRoaXMubGlzdGVuVG8oY29sbGVjdGlvbiwgJ2Vycm9yJywgZnVuY3Rpb24gYWZ0ZXJTeW5jRXJyb3IgKGNvbGxlY3Rpb24sIHhocikgewoKCQkvLyBJZ25vcmUgYWJvcnQgImVycm9yIgoJCS8vCgkJLy8gV2h5PyBiZWNhdXNlIGl0J3Mgbm90IGFjdHVhbGx5IGFuIGVycm9yLgoJCS8vIE5vdCBzdXJlIHdoeSB0aGlzIHRyaWdnZXJzIEJhY2tib25lLkNvbGxlY3Rpb24ncyBgZXJyb3JgIGV2ZW50Li4uCgkJLy8KCQkvLyBJZiB0d28gZmV0Y2hlcyBvY2N1ciBvbiB0aGUgc2FtZSBjb2xsZWN0aW9uIGF0IHRoZSBzYW1lIHRpbWUsCgkJLy8gd2UgYWJvcnQgdGhlIG9sZCBYSFIgcmVxdWVzdCBvdXJzZWx2ZXMgaWYgaXQncyBzdGlsbCBydW5uaW5nKQoJCWlmICh4aHIgJiYgeGhyLnN0YXR1c1RleHQgPT09ICdhYm9ydCcpIHJldHVybjsKCgkJcmVuZGVyRXJyb3IoKTsKCX0pOwoKCS8vIFdoZW4gYSBtb2RlbCBpcyBhZGRlZC4uLgoJLy8KCS8vIExpc3RlbiBmb3IgbmV3IG1vZGVscywgYW5kIGluc2VydCBhIGNoaWxkIHRlbXBsYXRlCgkvLyBhdCB0aGUgYXBwcm9wcmlhdGUgaW5kZXggd2l0aGluIHRoZSByZWdpb24uCgl0aGlzLmxpc3RlblRvKGNvbGxlY3Rpb24sICdhZGQnLCBmdW5jdGlvbiBhZnRlckFkZCAoIG1vZGVsLCBjb2xsZWN0aW9uLCBvcHRpb25zICkgewoJCXJlbmRlckFkZCggbW9kZWwsIG9wdGlvbnMuYXQgKTsKCX0pOwoKCS8vIFdoZW4gYSBtb2RlbCBpcyByZW1vdmVkLi4uCgkvLwoJLy8gR3JhYiBtb2RlbCdzIHJlbGF0aXZlIGluZGV4IHdpdGhpbiBjb2xsZWN0aW9uIGFuZCByZW1vdmUKCS8vIHRoZSBjaGlsZCB0ZW1wbGF0ZSBhdCB0aGUgc2FtZSBpbmRleCB3aXRoaW4gdGhlIHJlZ2lvbi4KCXRoaXMubGlzdGVuVG8oY29sbGVjdGlvbiwgJ3JlbW92ZScsIGZ1bmN0aW9uIGFmdGVyUmVtb3ZlICggbW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMgKSB7CgkJcmVuZGVyUmVtb3ZlKCBvcHRpb25zLmluZGV4ICk7Cgl9KTsKCgoKfTsKCn0se31dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCgp2YXIgZGF0YUJpbmRpbmdzID0gewoJdGV4dCAgICA6IHJlcXVpcmUoJy4vZGF0YUJpbmRpbmdzL3RleHQnKSwKCSdjbGFzcycgOiByZXF1aXJlKCcuL2RhdGFCaW5kaW5ncy9jbGFzcycpCn07CgoKCi8qKgogKiBSZW5kZXIgbW9kZWwgYmluZGluZ3MuCiAqICAgKyBgYmluZC10ZXh0YAogKiAgICsgbW9yZSB0byBjb21lCiAqCiAqIENhbGxlZCBieSBDb21wb25lbnQgd2hlbiBpdHMgbW9kZWwgY2hhbmdlcy4KICovCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbmRlckRhdGFCaW5kaW5ncyAoKSB7CglGUkFNRVdPUksuZGVidWcoJ1JlbmRlcmluZyBkYXRhIGJpbmRpbmdzIGZvciAnLCB0aGlzLmlkLCdjb21wb25lbnQuLi4nKTsKCgkvLyBFbnN1cmUgdGhhdCBtb2RlbCBleGlzdHMKCWlmICghdGhpcy5tb2RlbCkgewoJCXRocm93IG5ldyBFcnJvcigKCQkJJ1RyeWluZyB0byBib290c3RyYXAgZGF0YSBiaW5kaW5ncyBmb3IgY29tcG9uZW50ICgnICsgdGhpcy5pZCArICcpLCAnICsKCQkJJ2J1dCBpdCBoYXMgbm8gbW9kZWwhJyk7Cgl9Cgl2YXIgbW9kZWwgPSB0aGlzLm1vZGVsOwoKCS8vIGpRdWVyeSBzZWxlY3RvciBmb3IgZ3JhYmJpbmcgYWxsIGVsZW1lbnRzIHcvIGRhdGEgYmluZGluZ3MKCXZhciBiaW5kaW5nU2VsZWN0b3IgPSAnW2JpbmQtdGV4dF0sIDptYXRjaEF0dHIoIl5iaW5kLWNsYXNzLSokIiknOwoKCS8vIEdldCBlbGVtZW50cyBpbiB0aGlzIGNvbXBvbmVudCB3aGljaCBoYXZlIGRhdGEgYmluZGluZ3MKCS8vIChpZ25vcmVzIGNvbnRlbnRzIG9mIHJlZ2lvbnMgaWYgdGhleSBleGlzdCkKCXZhciAkYm91bmRFbGVtZW50cyA9IF8kc2VsZWN0T3V0ZXIuY2FsbCh0aGlzLCBiaW5kaW5nU2VsZWN0b3IpOwoKCS8vIExvb3AgdGhyb3VnaCBlYWNoIGJvdW5kIGF0dHJpYnV0ZSBvZiBlYWNoIGJvdW5kIGVsZW1lbnQKCS8vIGFuZCBjYWxsIHRoZSBhcHByb3ByaWF0ZSByZW5kZXIgbWV0aG9kLgoJJGJvdW5kRWxlbWVudHMuZWFjaChmdW5jdGlvbiBlYWNoQm91bmRFbGVtZW50ICgpIHsKCQkkYm91bmRFbCA9ICQodGhpcyk7CgoJCXZhciBhbGxBdHRyaWJ1dGVzID0gJGJvdW5kRWxbMF0uYXR0cmlidXRlczsKCQlfLmVhY2goYWxsQXR0cmlidXRlcywgZnVuY3Rpb24gKGF0dHIpIHsKCQkJdmFyIGF0dHJOYW1lID0gYXR0ci5ub2RlTmFtZTsKCgkJCV8uZWFjaCggZGF0YUJpbmRpbmdzLCBmdW5jdGlvbiBlYWNoQmluZGluZ0Zvcm11bGEgKCBiaW5kaW5nICkgewoJCQkJdmFyIG1hdGNoZXMgPSBhdHRyTmFtZS5tYXRjaChiaW5kaW5nLnJlZ2V4cCk7CgkJCQlpZiAoIG1hdGNoZXMgKSB7CgkJCQkJYmluZGluZy5mbigkYm91bmRFbCwgbW9kZWwsIG1hdGNoZXMpOwoJCQkJfQoJCQl9KTsKCQl9KTsKCX0pOwp9OwoKCgoKLyoqCiAqIExvb2t1cCBzdWl0YWJsZSBlbGVtZW50cyB3aXRoaW4gdGhpcyBjb21wb25lbnQncyAkZWwgY29udGV4dC4KICogSWdub3JlIHJlZ2lvbnMsIGFuZCBpbmNsdWRlIHRoZSB0b3AtbGV2ZWwgZWxlbWVudC4KICoKICogQHBhcmFtIHtTdHJpbmd9IGJpbmRpbmdTZWxlY3RvciAtIERPTSBzZWxlY3RvciB0byB1c2UKICoKICogQGFwaSBwcml2YXRlCiAqLwoKZnVuY3Rpb24gXyRzZWxlY3RPdXRlciAoIGJpbmRpbmdTZWxlY3RvciApIHsKCgkvLyBMb29rdXAgbWF0Y2hlcwoJdmFyICRtYXRjaGVzID0gdGhpcy4kKGJpbmRpbmdTZWxlY3Rvcik7CgoJLy8gSWYgdG9wLWxldmVsIGVsZW1lbnQgaW4gdGVtcGxhdGUgaGFzIGEgZGF0YS1iaW5kaW5nLCBpbmNsdWRlIGl0CglpZiAodGhpcy4kZWwuZmlsdGVyKGJpbmRpbmdTZWxlY3RvcikpIHsKCQkkbWF0Y2hlcyA9ICQubWVyZ2UoJG1hdGNoZXMsIHRoaXMuJGVsKTsKCX0KCgkvLyBPbWl0IGFueXRoaW5nIGluc2lkZSBhIHJlZ2lvbiwgc2luY2UgdGhvc2UgYmluZGluZ3Mgd2lsbCBoYXZlIGFscmVhZHkKCS8vIGJlZW4gdGFrZW4gY2FyZSBvZiBieSBvbmUgb2YgdGhlIGRlc2NlbmRhbnQgY29tcG9uZW50KHMpIHdpdGhpbiB0aGUgcmVnaW9uLgoJLy8KCS8vIFRPRE86IG9wdGltaXplIHRvIGV4Y2x1ZGUgdGhlc2UgZWxlbWVudHMgZnJvbSB0aGUgb3JpZ2luYWwgRE9NIHNlbGVjdGlvbgoJJG1hdGNoZXMgPSAkbWF0Y2hlcy5ub3QoIHRoaXMuJCgncmVnaW9uICosIFtkYXRhLXJlZ2lvbl0gKicpICk7CgoJcmV0dXJuICRtYXRjaGVzOwp9CgoKCgoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vLwovLyAgICAgICAgICAgICAgICAgICAgICAgICB8fAovLyBUT0RPOiBtb3ZlIHRoaXMgdGhpbmcgICBcLwovLyAgICAgICBpbnRvIGB1dGlsc2AgcHJibHkKLy8KCi8qKgogKiBDcmVhdGUgcHNldWRvLXNlbGVjdG9yIGZvciBnZXR0aW5nIHdpbGRjYXJkIGRhdGEgYXR0cmlidXRlcy4KICoKICogVXNhZ2U6CiAqICQoIjptYXRjaEF0dHIoJ15kYXRhLScpIikKICoKICogU291cmNlOgogKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMzIyMjUwOS80ODY1NDcKICoKICogQGFwaSBwcml2YXRlCiAqLwoKalF1ZXJ5LmV4cHIucHNldWRvcy5tYXRjaEF0dHIgPSAkLmV4cHIuY3JlYXRlUHNldWRvKGZ1bmN0aW9uKGFyZykgewoKICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKGFyZyk7CiAgICByZXR1cm4gZnVuY3Rpb24oZWxlbSkgewogICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBlbGVtLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGF0dHIgPSBlbGVtLmF0dHJpYnV0ZXNbaV07CiAgICAgICAgICAgIGlmKHJlZ2V4cC50ZXN0KGF0dHIubmFtZSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH07Cn0pOwoKLy8gIC9cCi8vICB8fAovLwovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgoKCgoKCgoKCgoKCgoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLy8gICAgICAgICAgICAgICAgICAgICB8fAovLy8gQ1VSUkVOVExZIFVOVVNFRCAgICBcLwovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgoKLy8gUmVnZXhwcyBmb3IgZGV0ZWN0aW9uIG9mIHdpbGRjYXJkIG5hbWVkIHBhcmFtZXRlcnMgaW4gY3VzdG9tIGVsZW1lbnQgYXR0cmlidXRlIG5hbWVzLgovLyB2YXIgb3B0aW9uYWxQYXJhbSA9IC9cKCguKj8pXCkvZzsKLy8gdmFyIG5hbWVkUGFyYW0gPSAvKFwoXD8pPzpcdysvZzsKLy8gdmFyIHNwbGF0UGFyYW0gPSAvXCpcdysvZzsKLy8gdmFyIGVzY2FwZVJlZ0V4cCA9IC9bXC17fVxbXF0rPy4sXFxcXiR8I1xzXS9nOwoKCi8vIEJ1aWxkIHNlbGVjdG9yIGZvciBzdXBlcnNldCBvZiB0aGVzZSBiaW5kaW5ncwovLyB2YXIgX2F0dHJOYW1lVG9SZWdFeHAgPSBmdW5jdGlvbiggYXR0ckV4cHJlc3Npb24gKSB7CgovLyAJYXR0ckV4cHJlc3Npb24gPSBhdHRyRXhwcmVzc2lvbi5yZXBsYWNlKGVzY2FwZVJlZ0V4cCwgJ1xcJCYnKQovLyAJCS5yZXBsYWNlKG9wdGlvbmFsUGFyYW0sICcoPzokMSk/JykKLy8gCQkucmVwbGFjZShuYW1lZFBhcmFtLCBmdW5jdGlvbihtYXRjaCwgb3B0aW9uYWwpIHsKLy8gCQkJcmV0dXJuIG9wdGlvbmFsID8gbWF0Y2ggOiAnKFteXC9dKyknOwovLyAJCX0pCi8vIAkJLnJlcGxhY2Uoc3BsYXRQYXJhbSwgJyguKj8pJyk7Ci8vIAlyZXR1cm4gJ14nICsgYXR0ckV4cHJlc3Npb24gKyAnJCc7Ci8vIH07Ci8vIHZhciBfZXh0cmFjdFBhcmFtZXRlcnMgPSBmdW5jdGlvbihyZWdleHAsIGF0dHJOYW1lLCBhdHRyRXhwcmVzc2lvbikgewovLyAJdmFyIHBhcmFtVmFsdWVzID0gcmVnZXhwLmV4ZWMoYXR0ck5hbWUpLnNsaWNlKDEpOwovLyAJdmFyIHBhcmFtS2V5cyA9IG5hbWVkUGFyYW0uZXhlYyhhdHRyRXhwcmVzc2lvbik7CgovLyAJaWYgKCFwYXJhbUtleXMgfHwgIXBhcmFtVmFsdWVzKSByZXR1cm4ge307CgovLyAJdmFyIG5hbWVkUGFyYW1ldGVycyA9IHt9OwovLyAJY29uc29sZS5sb2coJ3BhcmFtVmFsdWVzOicscGFyYW1WYWx1ZXMpOwovLyAJXy5lYWNoKHBhcmFtVmFsdWVzLCBmdW5jdGlvbiBlYWNoTWF0Y2hpbmdQaWVjZSggcGFyYW0sIGkgKSB7Ci8vIAkJdmFyIGtleSA9IHBhcmFtS2V5c1tpXTsKLy8gCQlrZXkgPSBrZXkuc2xpY2UoMSk7IC8vIHJlbW92ZSBgOmAgZnJvbSBuYW1lZCBwYXJhbQovLyAJCW5hbWVkUGFyYW1ldGVyc1trZXldID0gcGFyYW1WYWx1ZXNbaV07Ci8vIAl9KTsKLy8gCXJldHVybiBuYW1lZFBhcmFtZXRlcnM7Ci8vIH07CgoKCi8vIC8qKgovLyAgKiBSZW5kZXIgYSBzaW5nbGUgYmluZGluZwovLyAgKi8KLy8gdmFyIF9yZW5kZXJCaW5kaW5nID0gZnVuY3Rpb24gKCRtYXRjaGVkRWwsIGRvbUF0dHJpYnV0ZU5hbWUsIG1vZGVsLCByZW5kZXJGbiwgbmFtZWRQYXJhbXMpIHsKLy8gCXZhciByYXdCaW5kaW5nID0gJG1hdGNoZWRFbC5hdHRyKCBkb21BdHRyaWJ1dGVOYW1lICk7Ci8vIAkvLyBJZiBlbGVtZW50IGRvZXNuJ3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIERPTSBhdHRyaWJ1dGUuLi4KLy8gCS8vIGZhaWwgc2lsZW50bHkuCi8vIAlpZiAoICFyYXdCaW5kaW5nICkgcmV0dXJuOwoKLy8gCS8vIGNvbnNvbGUubG9nKCdnZXR0aW5nICcsZG9tQXR0cmlidXRlTmFtZSwnb24nLCRtYXRjaGVkRWwpOwovLyAJdmFyIG1vZGVsQXR0cmlidXRlTmFtZSA9IHJhd0JpbmRpbmcucmVwbGFjZSgvXlxALywgJycpOwovLyAJRlJBTUVXT1JLLmRlYnVnKCdGb3VuZCBhIGJpbmRpbmcgOjonLCByYXdCaW5kaW5nLCAnOjonLCBuYW1lZFBhcmFtcyk7CgovLyAJLy8gSWYgbW9kZWwgZG9lc24ndCBjb250YWluIHRoZSBzcGVjaWZpZWQgYXR0cmlidXRlLi4uCi8vIAlpZiAoIHR5cGVvZiBtb2RlbC5hdHRyaWJ1dGVzW21vZGVsQXR0cmlidXRlTmFtZV0gPT09ICd1bmRlZmluZWQnICkgewoKLy8gCQkvLyBmYWlsIHNpbGVudGx5LgovLyAJCXJldHVybjsKLy8gCQkvLyBGUkFNRVdPUksud2FybignQ2Fubm90IGJpbmQgYEAnK21vZGVsQXR0cmlidXRlTmFtZSsnIGZvciB0ZW1wbGF0ZS9jb21wb25lbnQgJyArCi8vIAkJLy8gCSdgJyArIGNvbXBvbmVudC5pZCArJ2AuXG4nKwovLyAJCS8vIAknTm8gc3VjaCBhdHRyaWJ1dGUgZXhpc3RzIGluIHRoZSBjb21wb25lbnRcJ3MgbW9kZWwuJwovLyAJCS8vICk7Ci8vIAl9CgovLyAJLy8gUmVuZGVyIGEgZGF0YSBiaW5kaW5nCi8vIAl2YXIgYmluZGluZ1ZhbCA9IG1vZGVsLmdldChtb2RlbEF0dHJpYnV0ZU5hbWUpIHx8ICcnOwovLyAJcmVuZGVyRm4oICRtYXRjaGVkRWwsIGJpbmRpbmdWYWwsIG5hbWVkUGFyYW1zICk7Ci8vIH07CgoKLy8gLyoqCi8vICAqIFJlbmRlciB0aGUgc3BlY2lmaWVkIHR5cGUgb2YgZGF0YSBiaW5kaW5ncwovLyAgKgovLyAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwovLyAgKgkJQG9wdGlvbiB7RnVuY3Rpb259IHJlbmRlckZuICgkZWwsIHZhbCwgcGFyYW1zKQktPiBmdW5jdGlvbiB3aGljaCByZW5kZXJzIHRoZSBkYXRhIGJpbmRpbmcgZm9yIHRoZSBzcGVjaWZpZWQgZWxlbWVudAovLyAgKgkJCUBwYXJhbSB7SlF1ZXJ5RWxlbWVudH0gJGVsCi8vICAqCQkJQHBhcmFtIHs/fSB2YWwgLT4gdmFsdWUgb2YgYm91bmQgbW9kZWwgYXR0cmlidXRlCi8vICAqCQkJQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtPiBrZXllZCBvYmplY3Qgb2YgZHluYW1pYyBwYXJhbWV0ZXJzIGZyb20gdGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSBpdHNlbGYKLy8gICoJCUBvcHRpb24ge1N0cmluZ30gYXR0cmlidXRlIC0+IG5hbWUgb2YgYm91bmQgYXR0cmlidXRlLCBlLmcuICdiaW5kLXRleHQnCi8vICAqCQlAb3B0aW9uIHtDb21wb25lbnR9IGNvbXBvbmVudAovLyAgKgkJQG9wdGlvbiB7QmFja2JvbmUuTW9kZWx9IFttb2RlbF0gLSBkZWZhdWx0cyB0byBgY29tcG9uZW50Lm1vZGVsYAovLyAgKi8KLy8gdmFyIF9yZW5kZXJCaW5kaW5ncyA9IGZ1bmN0aW9uICggb3B0aW9ucyApIHsKLy8gCXZhciBjb21wb25lbnQgPSBvcHRpb25zLmNvbXBvbmVudDsKLy8gCXZhciBhdHRyaWJ1dGVFeHByZXNzaW9uID0gb3B0aW9ucy5hdHRyaWJ1dGU7Ci8vIAl2YXIgbW9kZWwgPSBvcHRpb25zLm1vZGVsIHx8IG9wdGlvbnMuY29tcG9uZW50Lm1vZGVsOwoKCi8vIAkvLyBDYWxjdWxhdGUgc3RyaW5nIHdoaWNoIGNhbiBiZSAibmV3LWVkIiBpbnRvIGEgUmVnRXhwCi8vIAl2YXIgYXR0clJlZ0V4cFN0ciA9IF9hdHRyTmFtZVRvUmVnRXhwKGF0dHJpYnV0ZUV4cHJlc3Npb24pOwovLyAJdmFyIGF0dHJSZWdFeHAgPSBuZXcgUmVnRXhwKGF0dHJSZWdFeHBTdHIpOwoKCi8vIAl2YXIgYm91bmRBdHRyU2VsZWN0b3IgPSAnOm1hdGNoQXR0cigiJyArIGF0dHJSZWdFeHBTdHIgKyAnIiknOwoKLy8gCS8vIEZpbmQgYWxsIHJlbGV2YW50IGRlc2NlbmRhbnQgZWxlbWVudHMKLy8gCXZhciAkbWF0Y2hlcyA9IF9nZXQkTWF0Y2hlcyhib3VuZEF0dHJTZWxlY3RvciwgY29tcG9uZW50KTsKCi8vIAkvLyBFYXJseSBleGl0IGZvciBzaW1wbGUgYmluZGluZ3MgKHcvbyBib3VuZCBwYXJhbXMpCi8vIAlpZiAoICFhdHRyaWJ1dGVFeHByZXNzaW9uLm1hdGNoKC9cOi8pKSB7Ci8vIAkJJG1hdGNoZXMuZWFjaChmdW5jdGlvbiAoKSB7Ci8vIAkJCV9yZW5kZXJCaW5kaW5nKCQodGhpcyksIGF0dHJpYnV0ZUV4cHJlc3Npb24sIG1vZGVsLCBvcHRpb25zLnJlbmRlckZuLCB7fSk7CgovLyAJCX0pOwovLyAJCXJldHVybjsKLy8gCX0KCi8vIAljb25zb2xlLmxvZygnXG5SZW5kZXJpbmcgcGFyYW1ldGVyaXplZCBkYXRhIGJpbmRpbmc6ICcsYXR0clJlZ0V4cCk7CgovLyAJLy8gVE9ETzogYmF0Y2ggaXQgdXAgc28gd2Ugb25seSBkbyBvbmUgRE9NIHF1ZXJ5Ci8vIAkkbWF0Y2hlcy5lYWNoKGZ1bmN0aW9uIGVhY2hFbGVtZW50V2l0aEFCaW5kaW5nICgpIHsKLy8gCQl2YXIgJG1hdGNoZWRFbCA9ICQodGhpcyk7CgovLyAJCS8vIEdldCBhbGwgYXR0cmlidXRlcyBmb3IgdGhpcyAkZWwgYW5kIGZpbHRlciBhIHNldCBvZiBtYXRjaGluZyBuYW1lcy9wYXJhbXMKLy8gCQl2YXIgYWxsRE9NQXR0ck5hbWVzID0gXy5tYXAoICRtYXRjaGVkRWxbMF0uYXR0cmlidXRlcywgZnVuY3Rpb24gKGVsKSB7Ci8vIAkJCXJldHVybiBlbC5ub2RlTmFtZTsKLy8gCQl9KTsKLy8gCQljb25zb2xlLmxvZygnYWxsRE9NQXR0ck5hbWVzIGZvciBlbCcsYWxsRE9NQXR0ck5hbWVzLCAkbWF0Y2hlZEVsKTsKLy8gCQl2YXIgbWF0Y2hpbmdET01BdHRycyA9IHt9OwovLyAJCV8uZWFjaCggYWxsRE9NQXR0ck5hbWVzLCBmdW5jdGlvbiBlYWNoQXR0cmlidXRlICggZG9tQXR0ck5hbWUgKSB7Ci8vIAkJCS8vIGNvbnNvbGUubG9nKCdjaGVja2luZycsZG9tQXR0ck5hbWUpOwovLyAJCQlpZiAoIGRvbUF0dHJOYW1lLm1hdGNoKGF0dHJSZWdFeHApKSB7Ci8vIAkJCQltYXRjaGluZ0RPTUF0dHJzW2RvbUF0dHJOYW1lXSA9IF9leHRyYWN0UGFyYW1ldGVycyggYXR0clJlZ0V4cCwgZG9tQXR0ck5hbWUsIGF0dHJpYnV0ZUV4cHJlc3Npb24gKTsKLy8gCQkJCS8vIGNvbnNvbGUubG9nKCcsIGdvdCcsbWF0Y2hpbmdET01BdHRyc1tkb21BdHRyTmFtZV0sICcgKCgoJyxkb21BdHRyTmFtZSwgYXR0cmlidXRlRXhwcmVzc2lvbik7Ci8vIAkJCX0KLy8gCQl9KTsKCgovLyAJCWNvbnNvbGUubG9nKCcgKioqKiBtYXRjaGluZ0RPTUF0dHJzIDo6JywgbWF0Y2hpbmdET01BdHRycyk7CgovLyAJCXRocm93IG5ldyBFcnJvcignaHdhYWEnKTsKLy8gCQlfLmVhY2gobWF0Y2hpbmdET01BdHRycywgZnVuY3Rpb24gKCBuYW1lZFBhcmFtcywgZG9tQXR0cmlidXRlTmFtZSApIHsKLy8gCQkJX3JlbmRlckJpbmRpbmcoJG1hdGNoZWRFbCwgZG9tQXR0cmlidXRlTmFtZSwgbW9kZWwsIG9wdGlvbnMucmVuZGVyRm4sIG5hbWVkUGFyYW1zKTsKLy8gCQl9KTsKCi8vIAl9KTsKLy8gfTsKCgoKCn0seyIuL2RhdGFCaW5kaW5ncy9jbGFzcyI6NCwiLi9kYXRhQmluZGluZ3MvdGV4dCI6NX1dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMKICovCnZhciBkZWxldGVBbGxSZWdpb25zID0gcmVxdWlyZSgnLi9kZWxldGVBbGxSZWdpb25zJyksCgllbDJEZWZhdWx0VGVtcGxhdGVJRCA9IHJlcXVpcmUoJy4uL3V0aWxzL2VsMkRlZmF1bHRUZW1wbGF0ZUlEJyk7CgoKCi8qKgogKiBJbnN0YW50aWF0ZSByZWdpb24gY29tcG9uZW50cyBhbmQgYXBwZW5kIGFueSBkZWZhdWx0CiAqIHRlbXBsYXRlcy9jb21wb25lbnRzIHRvIHRoZSBET00KICovCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbmRlclJlZ2lvbnMgKCkgewoJdmFyIHNlbGYgPSB0aGlzOwoKCWRlbGV0ZUFsbFJlZ2lvbnMoKTsKCgkvLyBUT0RPOiBnZXQgY2xvc2VzdCBkZXNjZW5kYW50IHJlZ2lvbnMsIG5vdCBhbGwgZGVzY2VuZGFudCByZWdpb25zCgoJLy8gRGV0ZWN0IGNoaWxkIHJlZ2lvbnMgaW4gdGVtcGxhdGUKCXZhciAkcmVnaW9ucyA9IHRoaXMuJCgncmVnaW9uLCBbZGF0YS1yZWdpb25dJyk7CgoJLy8gQnV0IGFsc28gY2hlY2sgdGhlIHRvcC1sZXZlbCBlbGVtZW50IG9mIHRoZSBjb21wb25lbnQncyB0ZW1wbGF0ZSBpdHNlbGYsCgkvLyBpbiBjYXNlIHRoZSB0b3AtbGV2ZWwgZWxlbWVudCBpcyBJVFMgT1dOIHJlZ2lvbgoJJHJlZ2lvbnMgPSAkcmVnaW9ucy5hZGQoIHRoaXMuJGVsLmZpbHRlcigncmVnaW9uLCBbZGF0YS1yZWdpb25dJykgKTsKCgkkcmVnaW9ucy5lYWNoKGZ1bmN0aW9uIChpLCBlbCkgewoKCQkvLyBEZXRlY3QgZGVmYXVsdCBjb21wb25lbnQgaWQgZm9yIGNoaWxkIHJlZ2lvbgoJCXZhciBkZWZhdWx0Q29tcG9uZW50SWQgPSBlbDJEZWZhdWx0VGVtcGxhdGVJRChlbCk7CgoJCS8vIEdlbmVyYXRlIGEgcmVnaW9uIGluc3RhbmNlIGZyb20gdGhlIGVsZW1lbnQKCQkvLyAobW9kaWZ5aW5nIHRoZSBET00gYXMgbmVjZXNzYXJ5KQoJCXZhciByZWdpb24gPSBGUkFNRVdPUksuUmVnaW9uLmZyb21FbGVtZW50KGVsLCBzZWxmKTsKCgkJLy8gSWYgcmVnaW9uIGhhcyBubyBpZCwgZ2VuZXJhdGUgYSB1bmlxdWUgcmVnaW9uIGlkIHcvaSB0aGlzIGNvbXBvbmVudAoJCS8vIHRoYXQgaXMgdW5saWtlbHkgdG8gY29sbGlkZSB3aXRoIG15IG90aGVyIG5hbWVkIHJlZ2lvbnMKCQlpZiAoIXJlZ2lvbi5pZCkgewoJCQlyZWdpb24uaWQgPSAnJysKCQkJCUZSQU1FV09SSy5vcHRpb25zLmZyYW1ld29ya0lkICsKCQkJCSdfX2Fub255bW91c19yZWdpb25fXycgKwoJCQkJc2VsZi5hbm9ueW1vdXNSZWdpb25Db3VudGVyOwoKCQkJLy8gSW5jcmVtZW50IGNvdW50ZXIgZm9yIG5leHQgdGltZQoJCQlzZWxmLmFub255bW91c1JlZ2lvbkNvdW50ZXIrKzsKCQl9CgoJCS8vIEtlZXAgdHJhY2sgb2YgcmVnaW9ucywgc2luY2Ugd2UgYXJlIHRoZSBwYXJlbnQgY29tcG9uZW50CgkJc2VsZi5yZWdpb25zW3JlZ2lvbi5pZF0gPSByZWdpb247CgoJCS8vIEFzIGxvbmcgYXMgdGhlcmUgYXJlIG5vIGNvbGxpc2lvbnMsIGFsc28gcHJvdmlkZSBhY2Nlc3MgdG8gdGhlIHJlZ2lvbgoJCS8vIG9uIHRoZSB0b3AgbGV2ZWwgb2YgdGhlIGNvbXBvbmVudCwgZS5nLiBzbyB5b3UgY2FuIGRvIGB0aGlzLm15UmVnaW9uYAoJCS8vIGluIHlvdXIgY29tcG9uZW50IG1ldGhvZHMuCgkJaWYgKCFzZWxmW3JlZ2lvbi5pZF0pIHsKCQkJc2VsZltyZWdpb24uaWRdID0gcmVnaW9uOwoJCX0KCX0pOwp9OwoKCn0seyIuLi91dGlscy9lbDJEZWZhdWx0VGVtcGxhdGVJRCI6MzQsIi4vZGVsZXRlQWxsUmVnaW9ucyI6Nn1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIENoZWNrIHRoZSBzcGVjaWZpZWQgZGVmaW5pdGlvbiBmb3Igb2J2aW91cyBtaXN0YWtlcywgZXNwZWNpYWxseSBsaWtlbHkgZGVwcmVjYXRpb25zIGFuZAogKiB2YWxpZGF0ZSB0aGF0IHRoZSBtb2RlbCBhbmQgY29sbGVjdGlvbnMgYXJlIGluc3RhbmNlcyBvZiBCYWNrYm9uZSdzIERhdGEgc3RydWN0dXJlcy4KICoKICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgW09iamVjdCBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBjb21wb25lbnRdCiAqLwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB2YWxpZGF0ZURlZmluaXRpb24ocHJvcGVydGllcykgewoKCWlmIChfLmlzT2JqZWN0KHByb3BlcnRpZXMpKSB7CgoJCS8vIERldGVybWluZSBjb21wb25lbnQgaWQKCQl2YXIgaWQgPSB0aGlzLmlkIHx8IHByb3BlcnRpZXMuaWQ7CgoJCWZ1bmN0aW9uIF92YWxpZGF0ZUJhY2tib25lSW5zdGFuY2UgKHR5cGUpIHsKCQkJdmFyIFR5cGUgPSB0eXBlWzBdLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpOwoKCQkJaWYgKCAhcHJvcGVydGllc1t0eXBlXSBpbnN0YW5jZW9mIEJhY2tib25lW1R5cGVdICkgewoKCQkJCUZyYW1ld29yay5lcnJvcigKCQkJCQknQ29tcG9uZW50ICgnICsgaWQgKyAnKSBoYXMgYW4gaW52YWxpZCAnICsgdHlwZSArICctLSBcbicgKwoJCQkJCSdJZiBgJyArIHR5cGUgKyAnYCBpcyBzcGVjaWZpZWQgZm9yIGEgY29tcG9uZW50LCAnICsKCQkJCQknaXQgbXVzdCBiZSBhbiAqaW5zdGFuY2UqIG9mIGEgQmFja2JvbmUuJyArIFR5cGUgKyAnLlxuJyk7CgoJCQkJaWYgKHByb3BlcnRpZXNbdHlwZV0gaW5zdGFuY2VvZiBCYWNrYm9uZVtUeXBlXS5jb25zdHJ1Y3RvcikgewoJCQkJCUZyYW1ld29yay5lcnJvcigKCQkJCQkJJ0l0IGxvb2tzIGxpa2UgYSBCYWNrYm9uZS4nICsgVHlwZSArICcgKnByb3RvdHlwZSogd2FzIHNwZWNpZmllZCBpbnN0ZWFkIG9mIGEgJyArCgkJCQkJCSdCYWNrYm9uZS4nICsgVHlwZSArICcgKmluc3RhbmNlKi5cbicgKwoJCQkJCQknUGxlYXNlIGBuZXdgIHVwIHRoZSAnICsgdHlwZSArICcgLWJlZm9yZS0gJyArIEZyYW1ld29yay5pZCArICcucmFpc2UoKSwnICsKCQkJCQkJJ29yIHVzZSBhIHdyYXBwZXIgZnVuY3Rpb24gdG8gYWNoaWV2ZSB0aGUgc2FtZSBlZmZlY3QsIGUuZy46XG4nICsKCQkJCQkJJ2AnICsgdHlwZSArICc6IGZ1bmN0aW9uICgpIHtcbnJldHVybiBuZXcgU29tZScgKyBUeXBlICsgJygpO1xufWAnCgkJCQkJKTsKCQkJCX0KCgkJCQlGcmFtZXdvcmsud2FybignSWdub3JpbmcgaW52YWxpZCAnICsgdHlwZSArICcgOjogJyArIHByb3BlcnRpZXNbdHlwZV0pOwoJCQkJZGVsZXRlIHByb3BlcnRpZXNbdHlwZV07CgkJCX0KCQl9CgoJCS8vIENoZWNrIHRoYXQgdGhpcy5jb2xsZWN0aW9uIGlzIGFjdHVhbGx5IGFuIGluc3RhbmNlIG9mIEJhY2tib25lLkNvbGxlY3Rpb24KCQkvLyBhbmQgdGhhdCB0aGlzLm1vZGVsIGlzIGFjdHVhbGx5IGFuIGluc3RhbmNlIG9mIEJhY2tib25lLk1vZGVsCgkJX3ZhbGlkYXRlQmFja2JvbmVJbnN0YW5jZSgnbW9kZWwnKTsKCQlfdmFsaWRhdGVCYWNrYm9uZUluc3RhbmNlKCdjb2xsZWN0aW9uJyk7CgoJCS8vIENsb25lIHByb3BlcnRpZXMgdG8gYXZvaWQgaW5hZHZlcnRlbnQgbW9kaWZpY2F0aW9ucwoJCXJldHVybiBfLmNsb25lKHByb3BlcnRpZXMpOwoJfQoKCWVsc2UgcmV0dXJuIHt9OwoKfQoKfSx7fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogUnVuIGRlZmluaXRpb24gbWV0aG9kcyB0byBnZXQgYWN0dWFsIGNvbXBvbmVudCBkZWZpbml0aW9ucy4KICogVGhpcyBpcyBkZWZlcnJlZCB0byBhdm9pZCBoYXZpbmcgdG8gdXNlIEJhY2tib25lJ3MgZnVuY3Rpb24gKCkge30gYXBwcm9hY2ggZm9yIHRoaW5ncwogKiBsaWtlIGNvbGxlY3Rpb25zLgogKi8KCi8qKgogKiBCdWlsZCB1cHMgYSBjb21wb25lbnQgZGVmaW5pdGlvbiBieSBydW5uaW5nIHRoZSBkZWZpbml0aW9uLiBXZSB0aGVuIGxpbmsgdGhlCiAqIGNvbXBvbmVudCBkZWZpbml0aW9uIHRvIGFuIGlkZW50aWZpZXIgaW4gYEZSQU1FV09SSy5jb21wb25lbnRzYC4KICoKICogQHBhcmFtICB7T2JqZWN0fSBjb21wb25lbnQgW09iamVjdCBjb250YWluaW5nIHRoZSBkZWZpbml0aW9uIGZ1bmN0aW9uIG9mIHRoZSBjb21wb25lbnRdCiAqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkQ29tcG9uZW50RGVmaW5pdGlvbihjb21wb25lbnQpIHsKCXZhciBjb21wb25lbnREZWYgPSBjb21wb25lbnQuZGVmaW5pdGlvbigpOwoKCWlmIChjb21wb25lbnQuaWRPdmVycmlkZSkgewoJCWlmIChjb21wb25lbnREZWYuaWQpIHsKCQkJdGhyb3cgbmV3IEVycm9yKGNvbXBvbmVudC5pZE92ZXJyaWRlICsgJzo6IENhbm5vdCBzcGVjaWZ5IGFuIGlkT3ZlcnJpZGUgaW4gLmRlZmluZSgpIGlmIGFuIGlkIHByb3BlcnR5ICgnK2NvbXBvbmVudERlZi5pZCsnKSBpcyBhbHJlYWR5IHNldCBpbiB5b3VyIGNvbXBvbmVudCBkZWZpbml0aW9uIVxuVXNhZ2U6IC5kZWZpbmUoW2lkT3ZlcnJpZGVdLCBkZWZpbml0aW9uKScpOwoJCX0KCQljb21wb25lbnREZWYuaWQgPSBjb21wb25lbnQuaWRPdmVycmlkZTsKCX0KCWlmICghY29tcG9uZW50RGVmLmlkKSB7CgkJdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgdXNlIC5kZWZpbmUoKSB3aXRob3V0IGRlZmluaW5nIGFuIGlkIHByb3BlcnR5IG9yIG92ZXJyaWRlIGluIHlvdXIgY29tcG9uZW50IVxuVXNhZ2U6IC5kZWZpbmUoW2lkT3ZlcnJpZGVdLCBkZWZpbml0aW9uKScpOwoJfQoJRlJBTUVXT1JLLmNvbXBvbmVudHNbY29tcG9uZW50RGVmLmlkXSA9IGNvbXBvbmVudERlZjsKfTsKCn0se31dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIE9wdGlvbmFsIG1ldGhvZCB0byByZXF1aXJlIGFwcCBjb21wb25lbnRzLiBSZXF1aXJlLmpzIGNhbiBiZSB1c2VkIGluc3RlYWQKICogYXMgbmVlZGVkLgogKgogKiBAcGFyYW0gIHtTdHJpbmd9IAlbKG9wdGlvbmFsKSBDb21wb25lbnQgaWQgb3ZlcnJpZGVdCiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBbRnVuY3Rpb24gRGVmaW5pdGlvbiBvZiBjb21wb25lbnRdCiAqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZShpZCwgZGVmaW5pdGlvbkZuKSB7CgkvLyBJZCBwYXJhbSBpcyBvcHRpb25hbAoJaWYgKCFkZWZpbml0aW9uRm4pIHsKCQlkZWZpbml0aW9uRm4gPSBpZDsKCQlpZCA9IG51bGw7Cgl9CgoJRlJBTUVXT1JLLl9kZWZpbmVRdWV1ZS5wdXNoKHsKCQlkZWZpbml0aW9uOiBkZWZpbml0aW9uRm4sCgkJaWRPdmVycmlkZTogaWQKCX0pOwp9OwoKfSx7fV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogTWFzdCBidWlsZCBmaWxlLiBUaGUgbWFpbiBmaWxlCiAqLwoKdmFyIGRlZmluZSA9IHJlcXVpcmUoJy4vZGVmaW5lL2luZGV4Jyk7CnZhciBSZWdpb24gPSByZXF1aXJlKCcuL3JlZ2lvbi9pbmRleCcpOwp2YXIgQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9jb21wb25lbnQvaW5kZXgnKTsKdmFyIHJhaXNlID0gcmVxdWlyZSgnLi9yYWlzZS9pbmRleCcpOwoKLyoqCiAqIEZyYW1ld29yayBjbGFzcyBkZWZpbml0aW9uIHRoYXQgd2lsbCBjcmVhdGUgYSBuZXcgZ2xvYmFsIGluc3RhbmNlIG9mIGEgY3VzdG9tIEZyYW1ld29yay4KICoKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgW29wdGlvbnMgaGFzaCB0byBpbml0aWFsaXplIHRoZSBjdXN0b20gZnJhbWV3b3JrIHdpdGhdCiAqLwp2YXIgRnJhbWV3b3JrID0gZnVuY3Rpb24ob3B0aW9ucykgewoKCS8vIFNldCB0aGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aG9zZSBub3QgcGFzc2VkIGluLgoJb3B0aW9ucyA9IF8uZGVmYXVsdHMob3B0aW9ucyB8fCB7fSwgewoJCXRocm90dGxlV2luZG93UmVzaXplOiAyMDAsCgkJbG9nTGV2ZWw6ICd3YXJuJywKCQlmcmFtZXdvcmtJZDogJ21hc3QnLAoJCXByb2R1Y3Rpb246IGZhbHNlLAoJCWxvZ2dlcjogdW5kZWZpbmVkLAoJCXNob3J0Y3V0OiB7CgkJCXRlbXBsYXRlOiB0cnVlLAoJCQljb3VudDogdHJ1ZQoJCX0KCX0pOwoKCS8vIFNldCBhIHN0YXJ0aW5nIHBvaW50IHRvIEJhY2tib25lIGFuZCBhZGQgYWRkaXRpb25hbCBhdHRyaWJ1dGUuCglfLmV4dGVuZCh0aGlzLCBCYWNrYm9uZSwgewoJCW9wdGlvbnM6IG9wdGlvbnMsCgkJdGVtcGxhdGVzOiB7fSwKCQljb21wb25lbnRzOiB7fSwKCQlkYXRhOiB7fSwKCQlfZGVmaW5lUXVldWU6IFtdLAoJCXJlZ2lvbnM6IHt9Cgl9KTsKCgkvKioKCSAqIEV4dGVuZCBGUkFNRVdPUksuQ29sbGVjdGlvbiB0byBtYWtlIGl0IGJldHRlcgoJICogKHNwZWNpZmljYWxseSwgdG8gYWRkIGVycm9yIGhhbmRsaW5nKQoJICovCgl2YXIgc2VsZiA9IHRoaXM7Cgl2YXIgb3JpZ2luYWxDb2xsZWN0aW9uID0gdGhpcy5Db2xsZWN0aW9uOwoJdGhpcy5Db2xsZWN0aW9uID0gb3JpZ2luYWxDb2xsZWN0aW9uLmV4dGVuZCh7CgoJCWluaXRpYWxpemU6IGZ1bmN0aW9uIChvcHRpb25zKSB7CgoJCQkvLyBPdmVycmlkZSBgY29sbGVjdGlvbi5mZXRjaCgpYAoJCQl0aGlzLl9mZXRjaCA9IHRoaXMuZmV0Y2g7CgkJCXRoaXMuZmV0Y2ggPSB0aGlzWydfZmV0Y2grKyddOwoJCX0sCgoKCQkvKioKCQkgKiBhZnRlckVycm9yCgkJICoKCQkgKiBMaWZlY3ljbGUgY2FsbGJhY2sgdG8gY2F0Y2ggd2hlbiBhIGZldGNoIGVycm9yIG9jY3VycwoJCSAqCgkJICogVE9ETzoKCQkgKiBQcm9iYWJseSByZW1vdmUgdGhpcy0tIHJlYXNvbmluZyA6OgoJCSAqIEluIG1vc3QgY2FzZXMsIHlvdSBhY3R1YWxseSBjYXJlIGFib3V0IHRoZSBlcnJvciBpbgoJCSAqIHRoZSByZWxldmFudCBjb21wb25lbnRzIHdobyBhcmUgdXNpbmcgdGhpcyBjb2xsZWN0aW9uLAoJCSAqIGluIHdoaWNoIGNhc2UgeW91J2QganVzdCBiaW5kIGFuIGVycm9yIGV2ZW50IGhhbmRsZXIuCgkJICovCgkJYWZ0ZXJFcnJvcjogZnVuY3Rpb24gKGNvbGxlY3Rpb24sIHhociwgb3B0aW9ucykgewoJCQkvLyB0aGlzIGV4aXN0cyBmb3IgeW91IHRvIG92ZXJyaWRlIGl0IQoJCX0sCgoKCgoJCS8qKgoJCSAqIE92ZXJyaWRlIEJhY2tib25lLkNvbGxlY3Rpb24ncyBgZmV0Y2goKWAKCQkgKiB0byBhbGxvdyBmb3IgYmV0dGVyIGVycm9yIGhhbmRsaW5nLgoJCSAqCgkJICogVE9ETzogcHVsbCB0aGlzIGludG8gQmFja2JvbmUuc3luYyBpbnN0ZWFkLi4KCQkgKiBvbmx5IHByb2JsZW0gaXMgY2xhc2hpbmcgd2l0aCBvdGhlciBzeW5jIG92ZXJyaWRlcwoJCSAqLwoJCSdfZmV0Y2grKyc6IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkJCXZhciBjb2xsZWN0aW9uID0gdGhpczsKCgkJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKCQkJLy8gTG9nIGEgZnJpZW5kbGllciAiTm8gVVJMIiBtZXNzYWdlOgoJCQlpZiAoICFjb2xsZWN0aW9uLnVybCApIHsKCQkJCXNlbGYuZXJyb3IoJ0Nhbm5vdCBmZXRjaCgpICcgKyBjb2xsZWN0aW9uLnR5cGUgKyAnIDo6IENvbGxlY3Rpb24gaGFzIG5vIFVSTCBmdW5jdGlvbi9wcm9wZXJ0eS4uLicpOwoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBPdmVycmlkZSBlcnJvciBoYW5kbGVyIHRvIG1peGluIGFuICdlcnJvcicgZXZlbnQKCQkJdmFyIG9yaWdpbmFsRXJyb3JIYW5kbGVyID0gb3B0aW9ucy5lcnJvcjsKCQkJdmFyIG9yaWdpbmFsU3VjY2Vzc0hhbmRsZXIgPSBvcHRpb25zLnN1Y2Nlc3M7CgkJCV8uZXh0ZW5kKG9wdGlvbnMsIHsKCQkJCXN1Y2Nlc3M6IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCB4aHIsIG9wdGlvbnMpIHsKCQkJCQl2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CgoJCQkJCS8vIE51bGwgb3V0IGBjb2xsZWN0aW9uLnN5bmNpbmdgCgkJCQkJY29sbGVjdGlvbi5zeW5jaW5nID0gbnVsbDsKCgkJCQkJLy8gVHJpZ2dlciBvcmlnaW5hbCBzdWNjZXNzIGhhbmRsZXIgaWYgc3BlY2lmaWVkCgkJCQkJLy8gb24gYGZldGNoKHtzdWNjZXNzOiBmdW5jdGlvbigpey8qLi4uKi99fSlgCgkJCQkJaWYgKG9yaWdpbmFsU3VjY2Vzc0hhbmRsZXIpIHsKCQkJCQkJcmV0dXJuIG9yaWdpbmFsU3VjY2Vzc0hhbmRsZXIuYXBwbHkoY29sbGVjdGlvbiwgYXJncyk7CgkJCQkJfQoJCQkJfSwKCQkJCWVycm9yOiBmdW5jdGlvbiAoY29sbGVjdGlvbiwgeGhyLCBvcHRpb25zKSB7CgkJCQkJdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOwoKCQkJCQkvLyBOdWxsIG91dCBgY29sbGVjdGlvbi5zeW5jaW5nYAoJCQkJCWNvbGxlY3Rpb24uc3luY2luZyA9IG51bGw7CgoJCQkJCS8vIElmIHRoaXMgaXMgYW4gImFib3J0IiwgaWdub3JlIGl0LSAoc3RhdGUgaGFzIGFscmVhZHkgYmVlbiB0YWtlbiBjYXJlIG9mKQoJCQkJCWlmICggeGhyICYmIHhoci5zdGF0dXNUZXh0PT09J2Fib3J0JyApIHJldHVybjsKCgkJCQkJLy8gU2V0IGBjb2xsZWN0aW9uLmVycm9yYCB1c2luZyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgZmV0Y2gKCQkJCQkvLyAodHJ5IGpzb24sIHRoZW4gcmVzcG9uc2UgdGV4dCwgdGhlbiBzdGF0dXMgY29kZSwgdGhlbiBqdXN0IGRlZmF1bHQgdG8gYHRydWVgKQoJCQkJCWNvbGxlY3Rpb24uZXJyb3IgPQoJCQkJCQkoIHhociAmJiB4aHIucmVzcG9uc2VKU09OICkgPyB4aHIucmVzcG9uc2VKU09OIDoKCQkJCQkJKCB4aHIgJiYgeGhyLnJlc3BvbnNlVGV4dCApID8geGhyLnJlc3BvbnNlVGV4dCA6CgkJCQkJCXRydWU7CgoKCQkJCQkvLyBDYWxsIGBhZnRlckVycm9yKClgCgkJCQkJY29sbGVjdGlvbi5hZnRlckVycm9yLmFwcGx5KGNvbGxlY3Rpb24sYXJncyk7CgoJCQkJCS8vIFRyaWdnZXIgb3JpZ2luYWwgZXJyb3IgaGFuZGxlciBpZiBzcGVjaWZpZWQKCQkJCQkvLyBvbiBgZmV0Y2goe2Vycm9yOiBmdW5jdGlvbigpey8qLi4uKi99fSlgCgkJCQkJaWYgKG9yaWdpbmFsRXJyb3JIYW5kbGVyKSB7CgkJCQkJCXJldHVybiBvcmlnaW5hbEVycm9ySGFuZGxlci5hcHBseShjb2xsZWN0aW9uLCBhcmdzKTsKCQkJCQl9CgkJCQl9CgkJCX0pOwoKCQkJLy8gTnVsbCBvdXQgYGNvbGxlY3Rpb24uZXJyb3JgCgkJCWNvbGxlY3Rpb24uZXJyb3IgPSBudWxsOwoKCQkJLy8gSWYgYGZldGNoYCBpcyBhbHJlYWR5IGluIHByb2dyZXNzLCBjYW5jZWwgaXQKCQkJLy8gYW5kIGZpcmUgb2ZmIGEgbmV3IG9uZS4KCQkJaWYgKGNvbGxlY3Rpb24uc3luY2luZykgewoJCQkJc2VsZi5sb2coJ0Fib3J0aW5nIHJ1bm5pbmcgYGZldGNoKClgIGluIG9yZGVyIHRvIHN0YXJ0IGEgbmV3IGBmZXRjaCgpYC4uLicpOwoJCQkJY29sbGVjdGlvbi5zeW5jaW5nLmFib3J0KCk7CgkJCX0KCgkJCS8vIENhbGwgb3JpZ2luYWwgYGZldGNoKClgIHVzaW5nIG91ciBtb25rZXktcGF0Y2hlZCBvcHRpb25zCgkJCXZhciB4aHIgPSBjb2xsZWN0aW9uLl9mZXRjaChvcHRpb25zKTsKCgkJCS8vIFNldCBgY29sbGVjdGlvbi5zeW5jaW5nYCB0byB0aGUgWEhSIG9iamVjdCBpbiB1c2UKCQkJY29sbGVjdGlvbi5zeW5jaW5nID0geGhyOwoKCQkJLy8gUmV0dXJuIHRoZSBYSFIgb2JqZWN0IHRvIG1haW50YWluIG9yaWdpbmFsIGBCYWNrYm9uZS5Db2xsZWN0aW9uLmZldGNoKClgIEFQSQoJCQlyZXR1cm4geGhyOwoJCX0KCgl9KTsKCgoJLy8gVGhyb3VnaG91dCB0aGUgc291cmNlIGNvZGUsIHRoZXJlIGFyZSBvcGVyYXRpb25zIG9uIGBGUkFNRVdPUktgIG9yIGNvZGUgdGhhdCBhY2Nlc3NlcwoJLy8gaXRzIGF0dHJpYnV0ZXMuIFNvIHdlIG1ha2UgYEZSQU1FV09SS2AgYWNjZXNzaWJsZS4KCS8vCgkvLyBOb3RlOgoJLy8gYEZSQU1FV09SS2Agd2lsbCBvbmx5IGJlIGEgZ2xvYmFsIHZhcmlhYmxlICoqIGR1cmluZyB0aGUgYnVpbGQgKioKCUZSQU1FV09SSyA9IHRoaXM7CgoKfTsKCi8vIEZyYW1ld29yayBwcm90b3R5cGUgbWV0aG9kcy4KRnJhbWV3b3JrLnByb3RvdHlwZS5SZWdpb24gPSBSZWdpb247CkZyYW1ld29yay5wcm90b3R5cGUuQ29tcG9uZW50ID0gQ29tcG9uZW50OwpGcmFtZXdvcmsucHJvdG90eXBlLmRlZmluZSA9IGRlZmluZTsKRnJhbWV3b3JrLnByb3RvdHlwZS5yYWlzZSA9IHJhaXNlOwoKCi8vIEluc3RhbnRpYXRlIEZyYW1ld29yayBpbnN0YW5jZQp2YXIgZnJhbWV3b3JrID0gbmV3IEZyYW1ld29yaygpOwoKLy8gVE9ETzogZnV0dXJlCi8vIFJhaXNlIGltbWVkaWF0ZWx5LCBhbmQgdGhlbiBhbGwgbmV3IG1vZGVscyAvIG5ldyBjb21wb25lbnRzIC8gY2hhbmdlcwovLyBzaG91bGQgYmUgZHluYW1pYyBhdCBydW50aW1lLgovLwovLyBGb3Igbm93LCBNYXN0LnJhaXNlKCkgaXMgc3RpbGwgbWFudWFsLgoKCi8vIEV4cG9zZSBpbnN0YW50aWF0ZWQgZnJhbWV3b3JrIHZpYSBVTUQ6Cm1vZHVsZS5leHBvcnRzID0gZnJhbWV3b3JrOwoKfSx7Ii4vY29tcG9uZW50L2luZGV4Ijo3LCIuL2RlZmluZS9pbmRleCI6MTYsIi4vcmFpc2UvaW5kZXgiOjIzLCIuL3JlZ2lvbi9pbmRleCI6Mjh9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKglMb2dnZXQgY29uc3RydWN0b3IgbWV0aG9kIHRoYXQgd2lsbCBzZXR1cCBGUkFNRVdPUksgdG8gbG9nIG1lc3NhZ2VzLgogKi8KCnZhciBzZXR1cExvZ2dlciA9IHJlcXVpcmUoJy4vc2V0dXAnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTG9nZ2VyKCkgewoKCS8vIFVwb24gaW5pdGlhbGl6YXRpb24sIHNldHVwIGxvZ2dlcgoJc2V0dXBMb2dnZXIoRlJBTUVXT1JLLm9wdGlvbnMubG9nTGV2ZWwpOwoKCS8vIEluIHN1cHBvcnRlZCBicm93c2VycywgYWxzbyBydW4gc2V0dXBMb2dnZXIgYWdhaW4KCS8vIHdoZW4gRlJBTUVXT1JLLmxvZ0xldmVsIGlzIHNldCBieSB0aGUgdXNlcgoJLy8gVE9ETzogZmluZCBhIHdheSB0byBkbyB0aGlzIHdpdGhvdXQgZGVwZW5kaW5nIG9uIF9fZGVmaW5lU2V0dGVyX18uCglpZiAoXy5pc0Z1bmN0aW9uKEZSQU1FV09SSy5fX2RlZmluZVNldHRlcl9fKSkgewoJCUZSQU1FV09SSy5fX2RlZmluZVNldHRlcl9fKCdsb2dMZXZlbCcsIGZ1bmN0aW9uIG9uQ2hhbmdlIChuZXdMb2dMZXZlbCkgewoJCQlzZXR1cExvZ2dlcihuZXdMb2dMZXZlbCk7CgkJfSk7Cgl9Cn07Cgp9LHsiLi9zZXR1cCI6MTl9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBTZXQgdXAgdGhlIGxvZyBmdW5jdGlvbnM6CiAqCiAqIEZSQU1FV09SSy5lcnJvcgogKiBGUkFNRVdPUksud2FybgogKiBGUkFNRVdPUksubG9nCiAqIEZSQU1FV09SSy5kZWJ1ZyAoKmxlZ2FjeSkKICogRlJBTUVXT1JLLnZlcmJvc2UKICoKICogQHBhcmFtICB7U3RyaW5nfSBsb2dMZXZlbCBbVGhlIGRlc2lyZWQgbG9nIGxldmVsIG9mIHRoZSBMb2dnZXJdCiAqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHVwTG9nZ2VyIChsb2dMZXZlbCkgewoKCXZhciBub29wID0gZnVuY3Rpb24gKCkge307CgoJLy8gSWYgbG9nIGlzIHNwZWNpZmllZCwgdXNlIGl0LCBvdGhlcndpc2UgdXNlIHRoZSBjb25zb2xlCglpZiAoRlJBTUVXT1JLLmxvZ2dlcikgewoJCUZSQU1FV09SSy5lcnJvciAgICAgPSBGUkFNRVdPUksubG9nZ2VyLmVycm9yOwoJCUZSQU1FV09SSy53YXJuICAgICAgPSBGUkFNRVdPUksubG9nZ2VyLndhcm47CgkJRlJBTUVXT1JLLmxvZyAgICAgICA9IEZSQU1FV09SSy5sb2dnZXIuZGVidWcgfHwgRlJBTUVXT1JLLmxvZ2dlcjsKCQlGUkFNRVdPUksudmVyYm9zZSAgID0gRlJBTUVXT1JLLmxvZ2dlci52ZXJib3NlOwoJfQoKCS8vIEluIElFLCB3ZSBjYW4ndCBkZWZhdWx0IHRvIHRoZSBicm93c2VyIGNvbnNvbGUgYmVjYXVzZSB0aGVyZSBJUyBOTyBCUk9XU0VSIENPTlNPTEUKCWVsc2UgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykgewoKCQkvLyBXZSBjYW5ub3QgY2FsbGVkIHRoZSAuYmluZCBtZXRob2Qgb24gdGhlIGNvbnNvbGUgbWV0aG9kcy4gV2UgYXJlIGluIGllIDkgb3IgOCwganVzdCBtYWtlCgkJLy8gZXZlcnlodGluZyBhIG5vb3AuCgkJaWYgKF8uaXNVbmRlZmluZWQoY29uc29sZS5sb2cuYmluZCkpICB7CgkJCUZSQU1FV09SSy5lcnJvciAgICAgPSBub29wOwoJCQlGUkFNRVdPUksud2FybiAgICAgID0gbm9vcDsKCQkJRlJBTUVXT1JLLmxvZyAgICAgICA9IG5vb3A7CgkJCUZSQU1FV09SSy5kZWJ1ZyAgICAgPSBub29wOwoJCQlGUkFNRVdPUksudmVyYm9zZSAgID0gbm9vcDsKCQl9CgoJCS8vIFdlIGFyZSBpbiBhIGZyaWVuZGx5IGJyb3dzZXIgbGlrZSBDaHJvbWUsIEZpcmVmb3gsIG9yIElFMTAKCQllbHNlIHsKCQkJRlJBTUVXT1JLLmVycm9yCQk9IGNvbnNvbGUuZXJyb3IgJiYgY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpOwoJCQlGUkFNRVdPUksud2FybgkJPSBjb25zb2xlLndhcm4gJiYgY29uc29sZS53YXJuLmJpbmQoY29uc29sZSk7CgkJCUZSQU1FV09SSy5sb2cJCQk9IGNvbnNvbGUuZGVidWcgJiYgY29uc29sZS5kZWJ1Zy5iaW5kKGNvbnNvbGUpOwoJCQlGUkFNRVdPUksudmVyYm9zZQk9IGNvbnNvbGUubG9nICYmIGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7CgoJCQkvLyBVc2UgbG9nIGxldmVsIGNvbmZpZyBpZiBwcm92aWRlZAoJCQlzd2l0Y2ggKGxvZ0xldmVsKSB7CgkJCQljYXNlICd2ZXJib3NlJzogYnJlYWs7CgoJCQkJY2FzZSAnZGVidWcnOgoJCQkJCUZSQU1FV09SSy52ZXJib3NlID0gbm9vcDsKCQkJCQlicmVhazsKCgkJCQljYXNlICd3YXJuJzoKCQkJCQlGUkFNRVdPUksudmVyYm9zZSA9IEZSQU1FV09SSy5sb2cgPSBub29wOwoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ2Vycm9yJzoKCQkJCQlGUkFNRVdPUksudmVyYm9zZSA9IEZSQU1FV09SSy5sb2cgPSBGUkFNRVdPUksud2FybiA9IG5vb3A7CgkJCQkJYnJlYWs7CgoJCQkJY2FzZSAnc2lsZW50JzoKCQkJCQlGUkFNRVdPUksudmVyYm9zZSA9IEZSQU1FV09SSy5sb2cgPSBGUkFNRVdPUksud2FybiA9IEZSQU1FV09SSy5lcnJvciA9IG5vb3A7CgkJCQkJYnJlYWs7CgoJCQkJZGVmYXVsdDoKCQkJCQl0aHJvdyBuZXcgRXJyb3IgKCdVbnJlY29nbml6ZWQgbG9nZ2luZyBsZXZlbCBjb25maWcgJyArCgkJCQkJJygnICsgRlJBTUVXT1JLLm9wdGlvbnMuZnJhbWV3b3JrSWQgKyAnLmxvZ0xldmVsID0gIicgKyBsb2dMZXZlbCArICciKScpOwoJCQl9CgoJCQkvLyBTdXBwb3J0IGZvciBgZGVidWdgIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQoJCQlGUkFNRVdPUksuZGVidWcgPSBGUkFNRVdPUksubG9nOwoKCQkJLy8gVmVyYm9zZSBzcGl0cyBvdXQgbG9nIGxldmVsCgkJCUZSQU1FV09SSy52ZXJib3NlKCdMb2cgbGV2ZWwgc2V0IHRvIDo6ICcsIGxvZ0xldmVsKTsKCQl9Cgl9Cn0KCn0se31dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIEdpdmVuIGEgY29tcG9uZW50IGRlZmluaXRpb24gYW5kIGl0cyBrZXksIHdlIHdpbGwgYnVpbGQgdXAgdGhlIGNvbXBvbmVudCBwcm90b3R5cGUgYW5kIG1lcmdlCiAqIHRoaXMgY29tcG9uZW50IHdpdGggaXRzIG1hdGNoaW5nIHRlbXBsYXRlLgogKgogKiBAcGFyYW0gIHtPYmplY3R9IGNvbXBvbmVudERlZiBbT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uXQogKiBAcGFyYW0gIHtTdHJpbmd9IGNvbXBvbmVudEtleSBbVGhlIGNvbXBvbmVudCBpZGVudGlmaWVyXQogKi8KCnZhciB0cmFuc2xhdGVTaG9ydGhhbmQgPSByZXF1aXJlKCcuLi91dGlscy9zaG9ydGhhbmQnKTsKdmFyIG9iak1hcCA9IHJlcXVpcmUoJy4uL3V0aWxzL29iak1hcCcpOwp2YXIgRXZlbnRzID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnRzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkQ29tcG9uZW50UHJvdG90eXBlKGNvbXBvbmVudERlZiwgY29tcG9uZW50S2V5KSB7CgoJLy8gSWYgY29tcG9uZW50IGlkIGlzIG5vdCBleHBsaWNpdGx5IHNldCwgdXNlIHRoZSBjb21wb25lbnRLZXkKCWlmICghY29tcG9uZW50RGVmLmlkKSB7CgkJY29tcG9uZW50RGVmLmlkID0gY29tcG9uZW50S2V5OwoJfQoKCS8vIFNlYXJjaCB0ZW1wbGF0ZXMKCXZhciB0ZW1wbGF0ZSA9IEZSQU1FV09SSy50ZW1wbGF0ZXNbY29tcG9uZW50RGVmLmlkXTsKCgkvLyBTYXZlIHJlZmVyZW5jZSB0byB0ZW1wbGF0ZSBpbiBjb21wb25lbnQgcHJvdG90eXBlCglGUkFNRVdPUksudmVyYm9zZShjb21wb25lbnREZWYuaWQgKyAnIDo6IFBhaXJpbmcgY29tcG9uZW50IHdpdGggdGVtcGxhdGUuLi4nKTsKCWNvbXBvbmVudERlZi50ZW1wbGF0ZSA9IHRlbXBsYXRlOwoKCS8vIFRyYW5zbGF0ZSByaWdodC1oYW5kIHNob3J0aGFuZCBmb3IgdG9wLWxldmVsIGtleXMKCWNvbXBvbmVudERlZiA9IG9iak1hcChjb21wb25lbnREZWYsIHRyYW5zbGF0ZVNob3J0aGFuZCk7CgoKCS8vIGFuZCBldmVudHMgb2JqZWN0CglpZiAoY29tcG9uZW50RGVmLmV2ZW50cykgewoJCWNvbXBvbmVudERlZi5ldmVudHMgPSBvYmpNYXAoCgkJCWNvbXBvbmVudERlZi5ldmVudHMsCgkJCXRyYW5zbGF0ZVNob3J0aGFuZAoJCSk7Cgl9CgoJLy8gYW5kIGFmdGVyQ2hhbmdlIGJpbmRpbmdzCglpZiAoXy5pc09iamVjdChjb21wb25lbnREZWYuYWZ0ZXJDaGFuZ2UpICYmICFfLmlzRnVuY3Rpb24oY29tcG9uZW50RGVmLmFmdGVyQ2hhbmdlKSkgewoJCWNvbXBvbmVudERlZi5hZnRlckNoYW5nZSA9IG9iak1hcCgKCQkJY29tcG9uZW50RGVmLmFmdGVyQ2hhbmdlLAoJCQl0cmFuc2xhdGVTaG9ydGhhbmQKCQkpOwoJfQoKCS8vIEdvIGFoZWFkIGFuZCB0dXJuIHRoZSBkZWZpbml0aW9uIGludG8gYSByZWFsIGNvbXBvbmVudCBwcm90b3R5cGUKCUZSQU1FV09SSy52ZXJib3NlKGNvbXBvbmVudERlZi5pZCArICcgOjogQnVpbGRpbmcgY29tcG9uZW50IHByb3RvdHlwZS4uLicpOwoJdmFyIGNvbXBvbmVudFByb3RvdHlwZSA9IEZSQU1FV09SSy5Db21wb25lbnQuZXh0ZW5kKGNvbXBvbmVudERlZik7CgoJLy8gRGlzY292ZXIgc3Vic2NyaXB0aW9ucwoJY29tcG9uZW50UHJvdG90eXBlLnByb3RvdHlwZS5zdWJzY3JpcHRpb25zID0ge307CgoJLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcHJvcGVydHkgb24gdGhpcyBjb21wb25lbnQgcHJvdG90eXBlCglfLmVhY2goY29tcG9uZW50UHJvdG90eXBlLnByb3RvdHlwZSwgZnVuY3Rpb24gKGhhbmRsZXIsIGtleSkgewoKCQkvLyBEZXRlY3QgRE9NIGV2ZW50cyBhbmQgc21hc2ggdGhlbSBpbnRvIHRoZSBldmVudHMgaGFzaAoJCXZhciBtYXRjaGVkRE9NRXZlbnRzID0ga2V5Lm1hdGNoKEV2ZW50c1snL0RPTUV2ZW50LyddKTsKCQlpZiAobWF0Y2hlZERPTUV2ZW50cykgewoJCQl2YXIgZXZlbnROYW1lID0gbWF0Y2hlZERPTUV2ZW50c1sxXTsKCQkJdmFyIGRlbGVnYXRlU2VsZWN0b3IgPSBtYXRjaGVkRE9NRXZlbnRzWzNdOwoKCQkJLy8gU3RvdyB0aGVtIGluIGV2ZW50cyBoYXNoCgkJCWNvbXBvbmVudFByb3RvdHlwZS5wcm90b3R5cGUuZXZlbnRzID0gY29tcG9uZW50UHJvdG90eXBlLnByb3RvdHlwZS5ldmVudHMgfHwge307CgkJCWNvbXBvbmVudFByb3RvdHlwZS5wcm90b3R5cGUuZXZlbnRzW2tleV0gPSBoYW5kbGVyOwoJCX0KCgkJLy8gQWRkIGFwcCBldmVudHMgKCUpLCByb3V0ZXMgKCMpLCBhbmQgZGF0YSBsaXN0ZW5lcnMgKH4pIHRvIHN1YnNjcmlwdGlvbnMgaGFzaAoJCWlmIChrZXkubWF0Y2goL14oJXwjfH4pLykpIHsKCQkJaWYgKF8uaXNTdHJpbmcoaGFuZGxlcikpIHsKCQkJCXRocm93IG5ldyBFcnJvcihjb21wb25lbnREZWYuaWQgKyAnOjogSW52YWxpZCBsaXN0ZW5lciBmb3Igc3Vic2NyaXB0aW9uOiAnICsga2V5ICsgJy5cbicgKwoJCQkJCSdEZWZpbmUgeW91ciBjYWxsYmFjayB3aXRoIGFuIGFub255bW91cyBmdW5jdGlvbiBpbnN0ZWFkIG9mIGEgc3RyaW5nLicKCQkJCSk7CgkJCX0KCQkJaWYgKCFfLmlzRnVuY3Rpb24oaGFuZGxlcikpIHsKCQkJCXRocm93IG5ldyBFcnJvcihjb21wb25lbnREZWYuaWQgKyc6OiBJbnZhbGlkIGxpc3RlbmVyIGZvciBzdWJzY3JpcHRpb246ICcgKyBrZXkpOwoJCQl9CgkJCWNvbXBvbmVudFByb3RvdHlwZS5wcm90b3R5cGUuc3Vic2NyaXB0aW9uc1trZXldID0gaGFuZGxlcjsKCQl9CgoJCS8vIEV4dGVuZCBvbmUgb3IgbW9yZSBvdGhlciBjb21wb25lbnRzCgkJZWxzZSBpZiAoa2V5ID09PSAnZXh0ZW5kQ29tcG9uZW50cycpIHsKCQkJdmFyIG9ialRvTWVyZ2UgPSB7fTsKCQkJXy5lYWNoKGhhbmRsZXIsIGZ1bmN0aW9uKGNoaWxkSWQpewoKCQkJCWlmICghRlJBTUVXT1JLLmNvbXBvbmVudHNbY2hpbGRJZF0pewoJCQkJCXRocm93IG5ldyBFcnJvcigKCQkJCQljb21wb25lbnREZWYuaWQgKyAnIDo6ICcgKwoJCQkJCSdUcnlpbmcgdG8gZGVmaW5lL2V4dGVuZCB0aGlzIGNvbXBvbmVudCBmcm9tIGAnICsgY2hpbGRJZCArICdgLCAnICsKCQkJCQknYnV0IG5vIGNvbXBvbmVudCB3aXRoIHRoYXQgaWQgY2FuIGJlIGZvdW5kLicKCQkJCQkpOwoJCQkJfQoKCQkJCV8uZXh0ZW5kKG9ialRvTWVyZ2UsIEZSQU1FV09SSy5jb21wb25lbnRzW2NoaWxkSWRdKTsKCQkJfSk7CgoJCQlfLmRlZmF1bHRzKGNvbXBvbmVudFByb3RvdHlwZS5wcm90b3R5cGUsIG9ialRvTWVyZ2UpOwoJCX0KCX0pOwoKCS8vIFNhdmUgcHJvdG90eXBlIGluIGdsb2JhbCBzZXQgZm9yIHRyYWNraW5nCglGUkFNRVdPUksuY29tcG9uZW50c1tjb21wb25lbnREZWYuaWRdID0gY29tcG9uZW50UHJvdG90eXBlOwp9OwoKfSx7Ii4uL3V0aWxzL2V2ZW50cyI6MzYsIi4uL3V0aWxzL29iak1hcCI6MzcsIi4uL3V0aWxzL3Nob3J0aGFuZCI6Mzh9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBNb2R1bGUgZGVwZW5kZW5jaWVzCiAqLwoKdmFyIGVsMkRlZmF1bHRUZW1wbGF0ZUlEID0gcmVxdWlyZSgnLi4vdXRpbHMvZWwyRGVmYXVsdFRlbXBsYXRlSUQnKTsKCgoKCgovKioKICogQ29sbGVjdCBhbnkgVE9QLUxFVkVMIHJlZ2lvbnMgd2l0aCB0aGUgZGVmYXVsdCB0ZW1wbGF0ZS9jb21wb25lbnQgc3BlY2lmaWVkIGluIHRoZSBIVE1MCiAqCiAqIE5vdGU6CiAqIFRoaXMgaXMgb25seSBydW4gb24gdGhlIG9yaWdpbmFsIEhUTUwgcGFnZSwgbm90IGluIGNsaWVudC1zaWRlIHRlbXBsYXRlcyEhIQogKiBGb3IgdGhhdCwgc2VlIGBsaWIvY29tcG9uZW50L3JlbmRlclJlZ2lvbnMuanNgLgogKgogKi8KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29sbGVjdFJlZ2lvbnMgKCkgewoKCgkvLyBHZXQgdG9wLWxldmVsIHJlZ2lvbnMuCgl2YXIgJHRvcExldmVsUmVnaW9ucyA9ICQoJ3JlZ2lvbiwgW2RhdGEtcmVnaW9uXScpLmZpbHRlcihmdW5jdGlvbigpIHsKCQlyZXR1cm4gJCh0aGlzKS5wYXJlbnRzKCdyZWdpb24sIFtkYXRhLXJlZ2lvbl0nKS5sZW5ndGggPT09IDA7Cgl9KTsKCgoJJHRvcExldmVsUmVnaW9ucy5lYWNoKGZ1bmN0aW9uKCkgewoJCXZhciBlbCA9IHRoaXM7CgkJdmFyICRlbCA9ICQodGhpcyk7CgoJCS8vIFByb3ZpZGUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIGxlZ2FjeSBub3RhdGlvbgoJCS8vIChub3JtYWxpemUgdG8gYHRlbXBsYXRlYCkKCQl2YXIgY29tcG9uZW50SWQgPSBlbDJEZWZhdWx0VGVtcGxhdGVJRChlbCk7CgoJCS8vIE5vdyBpbnN0YW50aWF0ZSB0aGUgYXBwcm9wcmlhdGUgZGVmYXVsdCBjb21wb25lbnQgaW4gZWFjaAoJCS8vIHJlZ2lvbiB3aXRoIGEgc3BlY2lmaWVkIHRlbXBsYXRlL2NvbXBvbmVudAoJCUZSQU1FV09SSy5SZWdpb24uZnJvbUVsZW1lbnQoZWwpOwoJfSk7Cgp9OwoKfSx7Ii4uL3V0aWxzL2VsMkRlZmF1bHRUZW1wbGF0ZUlEIjozNH1dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIExvYWQgYW55IHNjcmlwdCB0YWdzIG9uIHRoZSBwYWdlIHdpdGggdHlwZT0idGV4dC90ZW1wbGF0ZSIuCiAqCiAqIEByZXR1cm4ge09iamVjdH0gW09iamVjdCBjb25zaXN0aW5nIG9mIGEgdGVtcGxhdGUgaWRlbnRpZmllciBhbmQgaXRzIEhUTUwuXQogKi8KCnZhciBlbDJNYXN0SUQgPSByZXF1aXJlKCcuLi91dGlscy9lbDJNYXN0SUQnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29sbGVjdFRlbXBsYXRlc0Zyb21TY3JpcHRUYWdzKCkgewoJdmFyIHRlbXBsYXRlcyA9IHt9OwoKCSQoJ3NjcmlwdFt0eXBlPSJ0ZXh0L3RlbXBsYXRlIl0nKS5lYWNoKGZ1bmN0aW9uIChpLCBlbCkgewoJCXZhciBpZCA9IGVsMk1hc3RJRChlbCwgdHJ1ZSk7CgkJdGVtcGxhdGVzW2lkXSA9ICQoZWwpLmh0bWwoKTsKCgkJLy8gU3RyaXAgd2hpdGVzcGFjZSBsZWZ0b3ZlciBmcm9tIHNjcmlwdCB0YWdzCgkJdGVtcGxhdGVzW2lkXSA9IHRlbXBsYXRlc1tpZF0ucmVwbGFjZSgvXlxzKy8sJycpOwoJCXRlbXBsYXRlc1tpZF0gPSB0ZW1wbGF0ZXNbaWRdLnJlcGxhY2UoL1xzKyQvLCcnKTsKCgkJLy8gUmVtb3ZlIGZyb20gRE9NCgkJJChlbCkucmVtb3ZlKCk7Cgl9KTsKCglyZXR1cm4gdGVtcGxhdGVzOwp9OwoKfSx7Ii4uL3V0aWxzL2VsMk1hc3RJRCI6MzV9XSwyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBUaGlzIGlzIHRoZSBzdGFydGluZyBwb2ludCB0byB5b3VyIGFwcGxpY2F0aW9uLiAgWW91IHNob3VsZCBncmFiIHRlbXBsYXRlcyBhbmQgY29tcG9uZW50cwogKiBiZWZvcmUgY2FsbGluZyBGUkFNRVdPUksucmFpc2UoKSB1c2luZyBzb21ldGhpbmcgbGlrZSBSZXF1aXJlLmpzLgogKgogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwoJCWRhdGE6IHsgYXV0aGVudGljYXRlZDogZmFsc2UgfSwKCQl0ZW1wbGF0ZXM6IHsgY29tcG9uZW50TmFtZTogSFRNTE9yUHJlY29tcGlsZWRGbiB9LAoJCWNvbXBvbmVudHM6IHsgY29tcG9uZW50TmFtZTogQ29tcG9uZW50RGVmaW5pdGlvbiB9CiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiCiAqLwoKdmFyIExvZ2dlciA9IHJlcXVpcmUoJy4uL2xvZ2dlci9pbmRleCcpOwp2YXIgYnVpbGRDb21wb25lbnREZWZpbml0aW9uID0gcmVxdWlyZSgnLi4vZGVmaW5lL2J1aWxkRGVmaW5pdGlvbicpOwp2YXIgYnVpbGRDb21wb25lbnRQcm90b3R5cGUgPSByZXF1aXJlKCcuL2J1aWxkUHJvdG90eXBlJyk7CnZhciBjb2xsZWN0VGVtcGxhdGVzRnJvbVNjcmlwdFRhZ3MgPSByZXF1aXJlKCcuL2NvbGxlY3RUZW1wbGF0ZXNGcm9tU2NyaXB0VGFncycpOwp2YXIgY29sbGVjdFJlZ2lvbnMgPSByZXF1aXJlKCcuL2NvbGxlY3RSZWdpb25zJyk7CnZhciBzZXR1cFJvdXRlciA9IHJlcXVpcmUoJy4uL3JvdXRlci9pbmRleCcpOwoKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmFpc2Uob3B0aW9ucywgY2IpIHsKCgkvLyBJZiBvbmx5IG9uZSBhcmcgaXMgcHJlc2VudCwgdXNlIG9wdGlvbnMgYXMgY2FsbGJhY2sgaWYgcG9zc2libGUuCgkvLyBJZiBvcHRpb25zIGFyZSBub3QgZGVmaW5lZCwgdXNlIGFuIGVtcHR5IG9iamVjdC4KCWlmICghY2IgJiYgXy5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7CgkJY2IgPSBvcHRpb25zOwoJfQoJaWYgKCFfLmlzUGxhaW5PYmplY3Qob3B0aW9ucykpIHsKCQlvcHRpb25zID0ge307Cgl9CgoJLy8gSW50ZXJwcmV0IGBwcm9kdWN0aW9uYCBhcyBgbG9nTGV2ZWwgPT09ICdzaWxlbnQnYAoJaWYgKEZSQU1FV09SSy5vcHRpb25zLnByb2R1Y3Rpb24pIHsKCQlGUkFNRVdPUksub3B0aW9ucy5sb2dMZXZlbCA9ICdzaWxlbnQnOwoJfQoKCS8vIEluaXRpYWxpemUgbG9nZ2VyCgluZXcgTG9nZ2VyKCk7CgoJLy8gTWVyZ2UgZGF0YSBpbnRvIEZSQU1FV09SSy5kYXRhCglfLmV4dGVuZChGUkFNRVdPUksuZGF0YSwgb3B0aW9ucy5kYXRhIHx8IHt9KTsKCgkvLyBNZXJnZSBzcGVjaWZpZWQgdGVtcGxhdGVzIHdpdGggRlJBTUVXT1JLLnRlbXBsYXRlcwoJXy5leHRlbmQoRlJBTUVXT1JLLnRlbXBsYXRlcywgb3B0aW9ucy50ZW1wbGF0ZXMgfHwge30pOwoKCS8vIElmIEZSQU1FV09SSy5kZWZpbmUoKSB3YXMgdXNlZCwgYnVpbGQgdGhlIGxpc3Qgb2YgY29tcG9uZW50cwoJLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBkZWZpbmUgcXVldWUgYW5kIGNyZWF0ZSBlYWNoIGRlZmluaXRpb24KCV8uZWFjaChGUkFNRVdPUksuX2RlZmluZVF1ZXVlLCBidWlsZENvbXBvbmVudERlZmluaXRpb24pOwoKCS8vIE1lcmdlIHNwZWNpZmllZCBjb21wb25lbnRzIHcvIEZSQU1FV09SSy5jb21wb25lbnRzCglfLmV4dGVuZChGUkFNRVdPUksuY29tcG9uZW50cywgb3B0aW9ucy5jb21wb25lbnRzIHx8IHt9KTsKCgkvLyBCYWNrIHVwIGVhY2ggY29tcG9uZW50IGRlZmluaXRpb24gYmVmb3JlIHRyYW5zZm9ybWluZyBpdCBpbnRvIGEgbGl2ZSBwcm90b3R5cGUKCUZSQU1FV09SSy5jb21wb25lbnREZWZzID0gXy5jbG9uZShGUkFNRVdPUksuY29tcG9uZW50cyk7CgoJLy8gUnVuIHRoaXMgY2FsbCBiYWNrIHdoZW4gdGhlIERPTSBpcyByZWFkeQoJJChmdW5jdGlvbiAoKSB7CgoJCS8vIENvbGxlY3QgYW55IDxzY3JpcHQ+IHRhZyB0ZW1wbGF0ZXMgb24gdGhlIHBhZ2UKCQkvLyBhbmQgYWJzb3JiIHRoZW0gaW50byBGUkFNRVdPUksudGVtcGxhdGVzCgkJXy5leHRlbmQoRlJBTUVXT1JLLnRlbXBsYXRlcywgY29sbGVjdFRlbXBsYXRlc0Zyb21TY3JpcHRUYWdzKCkpOwoKCQkvLyBCdWlsZCBhY3R1YWwgcHJvdG90eXBlcyBmb3IgdGhlIGNvbXBvbmVudHMKCQkvLyAobmVlZCB0aGUgdGVtcGxhdGVzIGF0IHRoaXMgcG9pbnQgdG8gbWFrZSB0aGlzIHdvcmspCgkJXy5lYWNoKEZSQU1FV09SSy5jb21wb25lbnRzLCBidWlsZENvbXBvbmVudFByb3RvdHlwZSk7CgoJCS8vIEdyYWIgaW5pdGlhbCByZWdpb25zIGZyb20gRE9NCgkJY29sbGVjdFJlZ2lvbnMoKTsKCgkJLy8gQmluZCBnbG9iYWwgRE9NIGV2ZW50cyBhcyBGUkFNRVdPUksgZXZlbnRzCgkJLy8gKGUuZy4gJXdpbmRvdzpyZXNpemUpCgkJdmFyIHRyaWdnZXJSZXNpemVFdmVudCA9IF8uZGVib3VuY2UoZnVuY3Rpb24gKCkgewoJCQlGUkFNRVdPUksudHJpZ2dlcignJXdpbmRvdzpyZXNpemUnKTsKCQl9LCBGUkFNRVdPUksub3B0aW9ucy50aHJvdHRsZVdpbmRvd1Jlc2l6ZSB8fCAwKTsKCQkkKHdpbmRvdykucmVzaXplKHRyaWdnZXJSZXNpemVFdmVudCk7CgkJLy8gVE9ETzogYWRkIG1vcmUgZXZlbnRzIGFuZCBleHRyYXBvbGF0ZSB0aGlzIGxvZ2ljIHRvIGEgc2VwYXJhdGUgbW9kdWxlCgoJCS8vIERvIHRoZSBpbml0aWFsIHJvdXRpbmcgc2VxdWVuY2UKCQkvLyBMb29rIGF0IHRoZSAjZnJhZ21lbnQgdXJsIGFuZCBmaXJlIHRoZSBnbG9iYWwgcm91dGUgZXZlbnQKCQlzZXR1cFJvdXRlcigpOwoJCUZSQU1FV09SSy5oaXN0b3J5LnN0YXJ0KF8uZGVmYXVsdHMoewoJCQlwdXNoU3RhdGU6IHVuZGVmaW5lZCwKCQkJaGFzaENoYW5nZTogdW5kZWZpbmVkLAoJCQlyb290OiB1bmRlZmluZWQKCQl9LCBvcHRpb25zKSk7CgoJCWlmIChjYikgY2IoKTsKCX0pOwp9OwoKfSx7Ii4uL2RlZmluZS9idWlsZERlZmluaXRpb24iOjE1LCIuLi9sb2dnZXIvaW5kZXgiOjE4LCIuLi9yb3V0ZXIvaW5kZXgiOjMyLCIuL2J1aWxkUHJvdG90eXBlIjoyMCwiLi9jb2xsZWN0UmVnaW9ucyI6MjEsIi4vY29sbGVjdFRlbXBsYXRlc0Zyb21TY3JpcHRUYWdzIjoyMn1dLDI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIEFwcGVuZCBhIGNvbXBvbmVudCB0byB0aGUgZW5kIG9mIGEgcmVnaW9uLiBUaGlzIGNhbGxzIGluc2VydCBhdCB0aGUgbGFzdCBwb3NpdGlvbi4KICoKICogQHBhcmFtICB7U3RyaW5nfSBjb21wb25lbnRJZCBbVGhlIGNvbXBvbmVudCBpZCB0aGF0IHdlIHdhbnQgdG8gYXBwZW5kXQogKiBAcGFyYW0gIHtPYmplY3R9IHByb3BlcnRpZXMgIFtQcm9wZXJ0aWVzIHRvIGluc3RhbnRpYXRlIHRoZSBjb21wb25lbnQgd2l0aF0KICoKICogQHJldHVybiB7Q29tcG9uZW50fSAgICAgICAgICBbTmV3bHkgYXBwZW5kZWQgQ29tcG9uZW50XQogKi8KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhcHBlbmQoY29tcG9uZW50SWQsIHByb3BlcnRpZXMpIHsKCS8vIEluc2VydCBhdCBsYXN0IHBvc2l0aW9uCglyZXR1cm4gdGhpcy5pbnNlcnQodGhpcy5fY2hpbGRyZW4ubGVuZ3RoLCBjb21wb25lbnRJZCwgcHJvcGVydGllcyk7Cn07Cgp9LHt9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBTaG9ydGN1dCBmb3IgY2FsbGluZyBlbXB0eSgpIGFuZCB0aGVuIGFwcGVuZCgpLAogKiBUaGlzIGlzIHRoZSBnZW5lcmFsIHVzZSBjYXNlIGZvciBtYW5hZ2luZyBzdWJjb21wb25lbnRzCiAqIChlLmcuIHdoZW4gYSBuYXZiYXIgaXRlbSBpcyB0b3VjaGVkKQogKgogKiBAcGFyYW0gIHtTdHJpbmd9IGNvbXBvbmVudCAgW1RoZSBpZCBuYW1lIG9mIHRoZSBjb21wb25ldCB0aGF0IHlvdSB3YW50IHRvIGF0dGFjaF0KICogQHBhcmFtICB7T2JqZWN0fSBwcm9wZXJ0aWVzIFtQcm9wZXJ0aWVzIHRoYXQgdGhlIGF0dGFjaGVkIGNvbXBvbmVudCB3aWxsIGJlIGluaXRhbGl6ZWQgd2l0aF0KICoKICogQHJldHVybiB7Q29tcG9uZW50fSAJCQkJIFtOZXdseSBhdHRhY2hlZCBjb21wb25lbnRdCiAqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGF0dGFjaChjb21wb25lbnQsIHByb3BlcnRpZXMpIHsKCXRoaXMuZW1wdHkoKTsKCXJldHVybiB0aGlzLmFwcGVuZChjb21wb25lbnQsIHByb3BlcnRpZXMpOwp9OwoKfSx7fV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogcmVnaW9uLmVtcHR5KCApCiAqCiAqIEl0ZXJhdGUgb3ZlciBlYWNoIGNvbXBvbmVudCBpbiB0aGlzIHJlZ2lvbiBhbmQgY2FsbCAuY2xvc2UoKSBvbiBpdAogKi8KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbXB0eSgpIHsKCUZSQU1FV09SSy5kZWJ1Zyh0aGlzLnBhcmVudC5pZCArICcgOjogRW1wdHlpbmcgcmVnaW9uOiAnICsgdGhpcy5pZCk7Cgl3aGlsZSAodGhpcy5fY2hpbGRyZW4ubGVuZ3RoID4gMCkgewoJCXRoaXMucmVtb3ZlKDApOwoJfQp9OwoKfSx7fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogTW9kdWxlIGRlcGVuZGVuY2llcwogKi8KdmFyIGVsMk1hc3RJRCA9IHJlcXVpcmUoJy4uL3V0aWxzL2VsMk1hc3RJRCcpLAoJZWwyRGVmYXVsdFRlbXBsYXRlSUQgPSByZXF1aXJlKCcuLi91dGlscy9lbDJEZWZhdWx0VGVtcGxhdGVJRCcpOwoKCgovKioKICogRmFjdG9yeSBtZXRob2QgdG8gZ2VuZXJhdGUgYSBuZXcgcmVnaW9uIGluc3RhbmNlIGZyb20gYSBET00gZWxlbWVudAogKiBBbHNvIGltcGxlbWVudHMgYHRlbXBsYXRlYCBhbmQgYGNvdW50YCBkaXJlY3RpdmVzLCBhcyB3ZWxsIGFzIHN1cHBvcnQKICogZm9yIGVtYmVkZGVkIHRlbXBsYXRlcyBieSBjaGVja2luZyBgZWxgJ3MgaW5uZXJIVE1MLgogKgogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucwogKiBAcmV0dXJucyByZWdpb24gaW5zdGFuY2UKICovCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb21FbGVtZW50KGVsLCBwYXJlbnQpIHsKCgkvLyBJZiBwYXJlbnQgaXMgbm90IHNwZWNpZmllZCwgbWFrZS1iZWxpZXZlLgoJcGFyZW50ID0gcGFyZW50IHx8IHsgaWQ6ICcqJyB9OwoKCXZhciAkZWwgPSAkKGVsKTsKCgoJLy8gQnVpbGQgcmVnaW9uCgl2YXIgcmVnaW9uID0gbmV3IEZSQU1FV09SSy5SZWdpb24oewoJCWlkOiBlbDJNYXN0SUQoZWwpLAoJCSRlbDogJGVsLAoJCXBhcmVudDogcGFyZW50Cgl9KTsKCgkvLyBzZXQgZW1iZWRkZWQgY29tcG9uZW50IHRvIHN0cmluZyBvZiBjb21wb25lbnQgdGhhdCB3ZSB3YW50IHRvIHJlbmRlciBpbiB0aGlzIGFyZWEuCgl2YXIgZW1iZWRkZWRDb21wb25lbnQgPSByZWdpb24uZW1iZWRkZWRDb21wb25lbnQ7CglpZiAoXy5pc09iamVjdChlbWJlZGRlZENvbXBvbmVudCkpIHsKCQllbWJlZGRlZENvbXBvbmVudCA9IHJlZ2lvbi5lbWJlZGRlZENvbnRlbnQ7Cgl9CgoKCS8vIElmIGB0ZW1wbGF0ZWAgc2hvcnRjdXQgaXMgZW5hYmxlZCwgYXBwZW5kIHNwZWNpZmllZCBzdWItY29tcG9uZW50KHMpCgkvLyB0byB0aGUgcmVnaW9uIGF1dG9tYXRpY2FsbHkuIFdlIGFsc28gbWFrZSBzdXJlIHRoYXQgdGhlIHJlZ2lvbiBkb2VzbnQgaGF2ZQoJLy8gZW1iZWRkZWQgY29udGVudC4gSWYgaXQgZG9lcywgdGhlbiBkb250IGFwcGVuZCBpdCBpbi4KCWlmICggRlJBTUVXT1JLLm9wdGlvbnMuc2hvcnRjdXQudGVtcGxhdGUgJiYgZW1iZWRkZWRDb21wb25lbnQgJiYgIXJlZ2lvbi5oYXNDb250ZW50KSB7CgoJCS8vIElmIGBjb3VudGAgaXMgc2V0LCByZW5kZXIgc3ViLWNvbXBvbmVudCBzcGVjaWZpZWQgbnVtYmVyIG9mIHRpbWVzLgoJCS8vIGUuZy4gPHJlZ2lvbiB0ZW1wbGF0ZT0iRm9vIiBjb3VudD0iMyIgLz4KCQkvLwoJCS8vIChOb3RlIHRoYXQgaWYgdGhlIGBjb3VudGAgc2hvcnRjdXQgaXMgZGlzYWJsZWQsIGBjb3VudGAgaXMgYWx3YXlzID0gMSkKCQl2YXIgY291bnQ7CgkJaWYgKEZSQU1FV09SSy5vcHRpb25zLnNob3J0Y3V0LmNvdW50KSB7CgkJCWNvdW50ID0gKHR5cGVvZiAkZWwuYXR0cignY291bnQnKSAhPT0gJ3VuZGVmaW5lZCcpID8gJGVsLmF0dHIoJ2NvdW50JykgOiAxOwoJCX0KCgkJLy8gQXBwZW5kIHRoZSBzdWJjb21wb25lbnQgdGhlIGFwcHJvcHJpYXRlICMgb2YgdGltZXMuCgkJZm9yICh2YXIgaT0wOyBpIDwgY291bnQ7IGkrKyApIHsKCQkJcmVnaW9uLmFwcGVuZChlbWJlZGRlZENvbXBvbmVudCk7CgkJfQoKCQlGUkFNRVdPUksuZGVidWcoCgkJCXBhcmVudC5pZCArICcgOi06IEluc3RhbnRpYXRlZMKgbmV3IHJlZ2lvbicgKwoJCQkoIHJlZ2lvbi5pZCA/ICcgYCcgKyByZWdpb24uaWQgKyAnYCcgOiAnJyApICsKCQkJKCBlbWJlZGRlZENvbXBvbmVudCA/ICcgYW5kIHBvcHVsYXRlZCBpdCB3aXRoJyArCgkJCQkoIGNvdW50ID4gMSA/IGNvdW50ICsgJyBpbnN0YW5jZXMgb2YnIDogJyAxJyApICsKCQkJCScgYCcgKyBlbWJlZGRlZENvbXBvbmVudCArICdgJyA6ICcnCgkJCSkgKyAnLicKCQkpOwoJfQoKCXJldHVybiByZWdpb247Cn07Cgp9LHsiLi4vdXRpbHMvZWwyRGVmYXVsdFRlbXBsYXRlSUQiOjM0LCIuLi91dGlscy9lbDJNYXN0SUQiOjM1fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogTW9kdWxlIGRlcGVuZGVuY2llcwogKi8KCnZhciBpbnNlcnQgPSByZXF1aXJlKCcuL2luc2VydCcpLAoJcmVtb3ZlID0gcmVxdWlyZSgnLi9yZW1vdmUnKSwKCWVtcHR5ID0gcmVxdWlyZSgnLi9lbXB0eScpLAoJYXBwZW5kID0gcmVxdWlyZSgnLi9hcHBlbmQnKSwKCWF0dGFjaCA9IHJlcXVpcmUoJy4vYXR0YWNoJyksCglwcmVwZW5kID0gcmVxdWlyZSgnLi9wcmVwZW5kJyksCglmcm9tRWxlbWVudCA9IHJlcXVpcmUoJy4vZnJvbUVsZW1lbnQnKSwKCWVsMkRlZmF1bHRUZW1wbGF0ZUlEID0gcmVxdWlyZSgnLi4vdXRpbHMvZWwyRGVmYXVsdFRlbXBsYXRlSUQnKSwKCWJ1aWxkQ29tcG9uZW50UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vcmFpc2UvYnVpbGRQcm90b3R5cGUnKTsKCgovKioKICogRlJBTUVXT1JLLlJlZ2lvbgogKgogKiBAcGFyYW0gIHtPYmplY3R9IHByb3BlcnRpZXMKICoKICogQGNvbnN0cnVjdG9yCiAqLwoKdmFyIFJlZ2lvbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVnaW9uKHByb3BlcnRpZXMpIHsKCglfLmV4dGVuZCh0aGlzLCBGUkFNRVdPUksuRXZlbnRzKTsKCglpZiAoIXByb3BlcnRpZXMpIHsKCQlwcm9wZXJ0aWVzID0ge307Cgl9CglpZiAoIXByb3BlcnRpZXMuJGVsKSB7CgkJdGhyb3cgbmV3IEVycm9yKCdUcnlpbmcgdG8gaW5zdGFudGlhdGUgcmVnaW9uIHdpdGggbm8gJGVsIScpOwoJfQoKCS8vIEZvbGQgaW4gcHJvcGVydGllcyB0byBwcm90b3R5cGUKCV8uZXh0ZW5kKHRoaXMsIHByb3BlcnRpZXMpOwoKCS8vIElmIHRoZSByZWdpb24gaGFzIGEgY29tcG9uZW50L3RlbXBsYXRlIGlkZW50aWZpZXIsIChlLmcuIDxyZWdpb24gdGVtcGxhdGU9IkZvbyIgLz4pCgkvLyB3ZSdsbCB1c2UgdGhhdCBhcyB0aGUgYGVtYmVkZGVkQ29tcG9uZW50YC4KCXRoaXMuZW1iZWRkZWRDb21wb25lbnQgPSBlbDJEZWZhdWx0VGVtcGxhdGVJRCh0aGlzLiRlbFswXSk7CgoJLy8gTmV4dCwgY2hlY2sgaWYgdGhlIHJlZ2lvbiBoYXMgYW55IGVtYmVkZGVkIEhUTUwuCgl2YXIgZW1iZWRkZWRUZW1wbGF0ZSA9IHRoaXMuJGVsLmh0bWwoKTsKCgoKCS8vIFRyaW0gd2hpdGVzcGFjZSBmcm9tIGVtYmVkZGVkIHRlbXBsYXRlIGluIGNhc2UgaXQgd2FzIGluY2x1ZGVkIGJ5IGFjY2lkZW50LgoJZW1iZWRkZWRUZW1wbGF0ZSA9IGVtYmVkZGVkVGVtcGxhdGUgJiYgZW1iZWRkZWRUZW1wbGF0ZS5yZXBsYWNlKC9eXHMrLywgJycpOwoJZW1iZWRkZWRUZW1wbGF0ZSA9IGVtYmVkZGVkVGVtcGxhdGUgJiYgZW1iZWRkZWRUZW1wbGF0ZS5yZXBsYWNlKC9ccyskLywgJycpOwoKCS8vIEluc3RhbnRpYXRlIGFuIGFub255bW91cyBjb21wb25lbnQgZm9yIHRoZSBlbWJlZGRlZCB0ZW1wbGF0ZS4KCWlmIChlbWJlZGRlZFRlbXBsYXRlKSB7CgoJCS8vIEdpdmUgYW4gZmxhZyBzbyB3ZSBrbm93IHRoaXMgcmVnaW9uIGhhcyBlbWJlZGRlZCBjb250ZW50LgoJCXRoaXMuaGFzQ29udGVudCA9IHRydWU7CgoJCS8vIEFkZCB0aGlzIHRlbXBsYXRlIHRvIG91ciBjb2xsZWN0aW9uIG9mIGZyYW1ld29yayB0ZW1wbGF0ZXMuIFRoaXMgd2lsbCBhbGxvdyB1cyB0bwoJCS8vIHJlbmRlciB0aGlzIGNvbXBvbmVudCBpbiB0aGUgZnV0dXJlLgoJCUZSQU1FV09SSy50ZW1wbGF0ZXNbdGhpcy5lbWJlZGRlZENvbXBvbmVudF0gPSBlbWJlZGRlZFRlbXBsYXRlOwoKCQkvLyBJZiB0aGUgRnJhbWV3b3JrIGhhcyB0aGlzIGNvbXBvbmVudCByZWdpc3RlcmVkIGZvciB0aGlzIGVtYmVkZGVkIGNvbXBvbmVudCwKCQkvLyB0aGVuIGNyZWF0ZSBhIHByb3RvdHlwZSBvZiB0aGlzIGNvbXBuZW50LiBUaGlzIGFsbG93cyBoYXZpbmcgbG9naWMgZm9yIHRoaXMKCQkvLyBlbWJlZGRlZCBjb21wb25lbnQgaW4gYSBkaWZmZXJlbnQgY29tcG9uZW50IGZpbGUuCgkJaWYgKF8uaGFzKEZSQU1FV09SSy5jb21wb25lbnREZWZzLCB0aGlzLmVtYmVkZGVkQ29tcG9uZW50KSkgewoJCQl2YXIgY29tcG9uZW50RGVmID0gRlJBTUVXT1JLLmNvbXBvbmVudERlZnNbdGhpcy5lbWJlZGRlZENvbXBvbmVudF0sCgkJCQkJY29tcG9uZW50S2V5ID0gdGhpcy5lbWJlZGRlZENvbXBvbmVudDsKCgkJCWJ1aWxkQ29tcG9uZW50UHJvdG90eXBlKGNvbXBvbmVudERlZiwgY29tcG9uZW50S2V5KTsKCQl9CgoJCS8vIFdpcGUgdGhlIGVtYmVkZGVkIEhUTUwgZnJvbSB0aGUgRE9NLgoJCS8vIE5PVEU6IHRoaXMgc3RlcCBjb3VsZCBiZSBvbWl0dGVkLCBidXQgbGVhdmluZyBpdCBpbiBub3cgZm9yIHNhZmV0eS4KCQl0aGlzLiRlbC5lbXB0eSgpOwoKCQkvLyBFeHRlbmQgYSBjb21wb25lbnQgcHJvdG90eXBlLCB0aGVuIGluc3RhbnRpYXRlIHRoZSBjb21wb25lbnQsCgkJLy8gYnV0IGRvbid0IHJlbmRlciB5ZXQuICBJdCdzIGFscmVhZHkgcmVuZGVyZWQsIG1vc3RseSEgKGV4Y2VwdCBmb3IgSVRTIHJlZ2lvbnMpCgkJLy8gV2UnbGwgdXNlIHRoaXMgYW5vbnltb3VzIGNvbXBvbmVudCBpbnN0YW5jZSBhcyBvdXIgYGVtYmVkZGVkQ29tcG9uZW50YCBmb3IgdGhpcwoJCS8vIHJlZ2lvbi4KCQkvLyB2YXIgdGVtcGxhdGVQcm9wZXJ0aWVzID0gewoJCS8vIAl0ZW1wbGF0ZTogZW1iZWRkZWRUZW1wbGF0ZSwKCQkvLyAJaWQ6IHRoaXMuZW1iZWRkZWRDb21wb25lbnQKCQkvLyB9OwoKCQkvLyBzaG9ydGN1dCB0byBnZXQgaG9sZCBvZiBlbWJlZGRlZCBjb21wb25lbnQgaWQuCgkJdGhpcy5lbWJlZGRlZENvbnRlbnQgPSB0aGlzLmVtYmVkZGVkQ29tcG9uZW50OwoKCQkvLyB0aGlzLmVtYmVkZGVkQ29tcG9uZW50ID0gbmV3IChGUkFNRVdPUksuQ29tcG9uZW50LmV4dGVuZCh0ZW1wbGF0ZVByb3BlcnRpZXMpKShwcm9wZXJ0aWVzKTsKCQkvLyB0aGlzLmVtYmVkZGVkQ29tcG9uZW50ID0gbmV3IEZSQU1FV09SSy5Db21wb25lbnQodGVtcGxhdGVQcm9wZXJ0aWVzKTsKCQkvLyBjb25zb2xlLmxvZygnc29tZXRoaW5nJyk7CgoJfQoKCS8vIElmIG5laXRoZXIgYW4gaWQgbm9yIGEgYHRlbXBsYXRlYCB3YXMgc3BlY2lmaWVkLAoJLy8gd2UnbGwgdGhyb3cgYW4gZXJyb3IsIHNpbmNlIHRoZXJlJ3Mgbm8gd2F5IHRvIGdldCBhIGhvbGQgb2YgdGhlIHJlZ2lvbgoJaWYgKCAhdGhpcy5pZCAmJiAhdGhpcy5lbWJlZGRlZENvbXBvbmVudCApIHsKCgkJdGhyb3cgbmV3IEVycm9yKAoJCQl0aGlzLnBhcmVudC5pZCArICcgOjogQSByZWdpb24gaWRlbnRpZmllciAoZS5nLiBgZGF0YS1yZWdpb249ImZvbyJgKSBtYXkgJyArCgkJCSdvbmx5IGJlIG9taXR0ZWQgaWYgYSBkZWZhdWx0IHRlbXBsYXRlIGlzIHNwZWNpZmllZCwgZS5nLjpcbicgKwoJCQknZS5nLiA8cmVnaW9uIHRlbXBsYXRlPSJTb21lQ29tcG9uZW50Ij48L3JlZ2lvbj4nCgkJKTsKCX0KCgkvLyBTZXQgdXAgbGlzdCB0byBob3VzZSBjaGlsZCBjb21wb25lbnRzCgl0aGlzLl9jaGlsZHJlbiA9IFtdOwoKCV8uYmluZEFsbCh0aGlzKTsKCgkvLyBTZXQgdXAgY29udmVuaWVuY2UgYWNjZXNzIHRvIHRoaXMgcmVnaW9uIGluIHRoZSBnbG9iYWwgcmVnaW9uIGNhY2hlCglGUkFNRVdPUksucmVnaW9uc1t0aGlzLmlkXSA9IHRoaXM7Cn07CgpSZWdpb24uZnJvbUVsZW1lbnQgPSBmdW5jdGlvbihlbCwgcGFyZW50KSB7CglyZXR1cm4gZnJvbUVsZW1lbnQoZWwsIHBhcmVudCk7Cn07ClJlZ2lvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oYXRJbmRleCkgewoJcmV0dXJuIHJlbW92ZS5jYWxsKHRoaXMsIGF0SW5kZXgpOwp9OwpSZWdpb24ucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24oKSB7CglyZXR1cm4gZW1wdHkuY2FsbCh0aGlzKTsKfTsKUmVnaW9uLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihhdEluZGV4LCBjb21wb25lbnRJZCwgcHJvcGVydGllcykgewoJcmV0dXJuIGluc2VydC5jYWxsKHRoaXMsIGF0SW5kZXgsIGNvbXBvbmVudElkLCBwcm9wZXJ0aWVzKTsKfTsKUmVnaW9uLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihjb21wb25lbnRJZCwgcHJvcGVydGllcykgewoJcmV0dXJuIGFwcGVuZC5jYWxsKHRoaXMsIGNvbXBvbmVudElkLCBwcm9wZXJ0aWVzKTsKfTsKUmVnaW9uLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbihjb21wb25lbnQsIHByb3BlcnRpZXMpIHsKCXJldHVybiBhdHRhY2guY2FsbCh0aGlzLCBjb21wb25lbnQsIHByb3BlcnRpZXMpOwp9OwpSZWdpb24ucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbihjb21wb25lbnRJZCwgcHJvcGVydGllcykgewoJcmV0dXJuIHByZXBlbmQuY2FsbCh0aGlzLCBjb21wb25lbnRJZCwgcHJvcGVydGllcyk7Cn07Cgp9LHsiLi4vcmFpc2UvYnVpbGRQcm90b3R5cGUiOjIwLCIuLi91dGlscy9lbDJEZWZhdWx0VGVtcGxhdGVJRCI6MzQsIi4vYXBwZW5kIjoyNCwiLi9hdHRhY2giOjI1LCIuL2VtcHR5IjoyNiwiLi9mcm9tRWxlbWVudCI6MjcsIi4vaW5zZXJ0IjoyOSwiLi9wcmVwZW5kIjozMCwiLi9yZW1vdmUiOjMxfV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogcmVnaW9uLmluc2VydCggYXRJbmRleCwgY29tcG9uZW50SWQsIFtwcm9wZXJ0aWVzXSApCiAqCiAqIFRPRE86IHN1cHBvcnQgYSBsaXN0IG9mIHByb3BlcnRpZXMgb2JqZWN0cyBpbiBsaWV1IG9mIHRoZSBwcm9wZXJ0aWVzIG9iamVjdAogKi8KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5zZXJ0KGF0SW5kZXgsIGNvbXBvbmVudElkLCBwcm9wZXJ0aWVzKSB7CgoJdmFyIGVyciA9ICcnOwoJaWYgKCEoYXRJbmRleCB8fCBfLmlzRmluaXRlKGF0SW5kZXgpKSkgewoJCWVyciArPSB0aGlzLmlkICsgJy5pbnNlcnQoKSA6OiBObyBhdEluZGV4IHNwZWNpZmllZCEnOwoJfQoJZWxzZSBpZiAoIWNvbXBvbmVudElkKSB7CgkJZXJyICs9IHRoaXMuaWQgKyAnLmluc2VydCgpIDo6IE5vIGNvbXBvbmVudElkIHNwZWNpZmllZCEnOwoJfQoJaWYgKGVycikgewoJCXRocm93IG5ldyBFcnJvcihlcnIgKyAnXG5Vc2FnZTogaW5zZXJ0KGF0SW5kZXgsIGNvbXBvbmVudElkLCBbcHJvcGVydGllc10pJyk7Cgl9CgoJdmFyIGNvbXBvbmVudDsKCS8vIElmIGNvbXBvbmVudElkIGlzIGEgc3RyaW5nLCBsb29rIHVwIGNvbXBvbmVudCBwcm90b3R5cGUgYW5kIGluc3RhdGlhdGUKCWlmICgnc3RyaW5nJyA9PSB0eXBlb2YgY29tcG9uZW50SWQpIHsKCgkJdmFyIGNvbXBvbmVudFByb3RvdHlwZSA9IEZSQU1FV09SSy5jb21wb25lbnRzW2NvbXBvbmVudElkXTsKCgkJaWYgKCFjb21wb25lbnRQcm90b3R5cGUpIHsKCQkJdmFyIHRlbXBsYXRlID0gRlJBTUVXT1JLLnRlbXBsYXRlc1tjb21wb25lbnRJZF07CgkJCWlmICghdGVtcGxhdGUpIHsKCQkJCXRocm93IG5ldyBFcnJvciAoJ0luICcgKwoJCQkJCSh0aGlzLmlkIHx8ICdBbm9ueW1vdXMgcmVnaW9uJykgKyAnOjogVHJ5aW5nIHRvIGluc2VydCAnICsKCQkJCQljb21wb25lbnRJZCArICcsIGJ1dCBubyB0ZW1wbGF0ZSBleGlzdHMgd2l0aCB0aGF0IGlkLicpOwoJCQl9CgoJCQkvLyBJZiBubyBjb21wb25lbnQgcHJvdG90eXBlIGV4aXN0cyBmb3IgdGhlIHRlbXBsYXRlCgkJCS8vIHdpdGggdGhlIHNwZWNpZmlmZWQgaWQsIGNyZWF0ZSBhIHN0dWIgb25lIG9uIHRoZSBmbHkuCgkJCWNvbXBvbmVudFByb3RvdHlwZSA9IEZSQU1FV09SSy5Db21wb25lbnQuZXh0ZW5kKHsKCQkJCWlkOiBjb21wb25lbnRJZCwKCQkJCXRlbXBsYXRlOiB0ZW1wbGF0ZQoJCQl9KTsKCQl9CgoJCS8vIEluc3RhbnRpYXRlIGFuZCByZW5kZXIgdGhlIGNvbXBvbmVudCBpbnNpZGUgdGhpcyByZWdpb24KCQljb21wb25lbnQgPSBuZXcgY29tcG9uZW50UHJvdG90eXBlKF8uZXh0ZW5kKHsKCQkJJG91dGxldDogdGhpcy4kZWwKCQl9LCBwcm9wZXJ0aWVzIHx8IHt9KSk7CgoKCX0KCgkvLyBPdGhlcndpc2UgYXNzdW1lIGFuIGluc3RhbnRpYXRlZCBjb21wb25lbnQgb2JqZWN0IHdhcyBzZW50CgkvKiBUT0RPOiBDaGVjayB0aGF0IGNvbXBvbmVudCBvYmplY3QgaXMgdmFsaWQgKi8KCWVsc2UgewoJCWNvbXBvbmVudCA9IGNvbXBvbmVudElkOwoJCWNvbXBvbmVudC4kb3V0bGV0ID0gdGhpcy4kZWw7Cgl9CgoJLy8gU2F2ZSByZWZlcmVuY2UgdG8gcGFyZW50UmVnaW9uCgljb21wb25lbnQucGFyZW50UmVnaW9uID0gdGhpczsKCgkvLyBDaGVjayB0byBzZWUgaWYgdGhlIG1vZGVsIHdhcyBhbHJlYWR5IGRlZmluZWQuIElmIGl0IGlzLCB1c2UgdGhhdCBtb2RlbC4gSWYgbm90LCBhc3NpZ24gaXQKCS8vIHRoZSBwYXJlbnRzIG1vZGVsIGlmIGl0IGhhcyBvbmUsIG9yIGFzc2lnbiBpdCBhIG5ldyBiYWNrYm9uZSBpbnN0YW5jZS4KCWlmICghY29tcG9uZW50Lm1vZGVsKSB7CgkJY29tcG9uZW50Lm1vZGVsID0gdGhpcy5wYXJlbnQubW9kZWwgPyB0aGlzLnBhcmVudC5tb2RlbCA6IG5ldyBCYWNrYm9uZS5Nb2RlbCgpOwoJfQoKCS8vIFJlbmRlciBjb21wb25lbnQgaW50byB0aGlzIHJlZ2lvbgoJY29tcG9uZW50LnJlbmRlcihhdEluZGV4KTsKCgkvLyBBbmQga2VlcCB0cmFjayBvZiBpdCBpbiB0aGUgbGlzdCBvZiB0aGlzIHJlZ2lvbidzIGNoaWxkcmVuCgl0aGlzLl9jaGlsZHJlbi5zcGxpY2UoYXRJbmRleCwgMCwgY29tcG9uZW50KTsKCgkvLyBMb2cgZm9yIGRlYnVnZ2luZyBgY291bnRgIGRlY2xhcmF0aXZlCgl2YXIgZGVidWdTdHIgPSB0aGlzLnBhcmVudC5pZCArICcgOjogSW5zZXJ0ZWQgJyArIGNvbXBvbmVudElkICsgJyBpbnRvICc7CglpZiAodGhpcy5pZCkgZGVidWdTdHIgKz0gJ3JlZ2lvbjogJyArIHRoaXMuaWQgKyAnIGF0IGluZGV4ICcgKyBhdEluZGV4OwoJZWxzZSBkZWJ1Z1N0ciArPSAnYW5vbnltb3VzIHJlZ2lvbiBhdCBpbmRleCAnICsgYXRJbmRleDsKCUZSQU1FV09SSy52ZXJib3NlKGRlYnVnU3RyKTsKCglyZXR1cm4gY29tcG9uZW50OwoKfTsKCn0se31dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIFByZXBlbmQgYSBjb21wb25lbnQgdG8gdGhlIGJlZ2lubmluZyBvZiBhIHJlZ2lvbi4gVGhpcyBjYWxscyBpbnNlcnQgYXQgdGhlIGZpcnN0IHBvc2l0aW9uLgogKgogKiBAcGFyYW0gIHtTdHJpbmd9IGNvbXBvbmVudElkIFtUaGUgY29tcG9uZW50IGlkIHRoYXQgd2Ugd2FudCB0byBwcmVwZW5kIF0KICogQHBhcmFtICB7T2JqZWN0fSBwcm9wZXJ0aWVzICBbUHJvcGVydGllcyB0byBpbnN0YW50aWF0ZSB0aGUgY29tcG9uZW50IHdpdGhdCiAqCiAqIEByZXR1cm4ge0NvbXBvbmVudH0gICAgICAgICAgW05ld2x5IHByZXBlbmRlZCBDb21wb25lbnRdCiAqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByZXBlbmQoY29tcG9uZW50SWQsIHByb3BlcnRpZXMpIHsKCS8vIEluc2VydCBhdCBsYXN0IHBvc2l0aW9uCglyZXR1cm4gdGhpcy5pbnNlcnQoMCwgY29tcG9uZW50SWQsIHByb3BlcnRpZXMpOwp9OwoKfSx7fV0sMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogcmVnaW9uLnJlbW92ZSggYXRJbmRleCApCiAqCiAqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbW92ZShhdEluZGV4KSB7CgoJaWYgKCFhdEluZGV4ICYmICFfLmlzRmluaXRlKGF0SW5kZXgpKSB7CgkJdGhyb3cgbmV3IEVycm9yKHRoaXMuaWQgKyAnLnJlbW92ZSgpIDo6IE5vIGF0SW5kZXggc3BlY2lmaWVkISBcblVzYWdlOiByZW1vdmUoYXRJbmRleCknKTsKCX0KCgkvLyBSZW1vdmUgdGhlIGNvbXBvbmVudCBmcm9tIHRoZSBsaXN0Cgl2YXIgY29tcG9uZW50ID0gdGhpcy5fY2hpbGRyZW4uc3BsaWNlKGF0SW5kZXgsIDEpOwoJaWYgKCFjb21wb25lbnRbMF0pIHsKCgkJLy8gSWYgdGhlIGxpc3QgaXMgZW1wdHksIGZyZWFrIG91dAoJCXRocm93IG5ldyBFcnJvcih0aGlzLmlkICsgJy5yZW1vdmUoKSA6OiBUcnlpbmcgdG8gcmVtb3ZlIGEgY29tcG9uZW50IHRoYXQgZG9lc25cJ3QgZXhpc3QgYXQgaW5kZXggJyArIGF0SW5kZXgpOwoJfQoKCS8vIFNxdWVlemUgdGhlIGNvbXBvbmVudCB0byBkbyBnZXQgYWxsIHRoZSBiaW5keSBnb29kbmVzcyBvdXQKCWNvbXBvbmVudFswXS5jbG9zZSgpOwoKCUZSQU1FV09SSy5kZWJ1Zyh0aGlzLnBhcmVudC5pZCArICcgOjogUmVtb3ZlZCBjb21wb25lbnQgYXQgaW5kZXggJyArIGF0SW5kZXggKyAnIGZyb20gcmVnaW9uOiAnICsgdGhpcy5pZCk7Cn07Cgp9LHt9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBTZXRzIHVwIHRoZSBGUkFNRVdPUksgcm91dGVyLgogKi8KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByb3V0ZXJTZXR1cCgpIHsKCgkvLyBXaWxkY2FyZCByb3V0ZXMgdG8gZ2xvYmFsIGV2ZW50IGRlbGVnYXRvcgoJdmFyIHJvdXRlciA9IG5ldyBGUkFNRVdPUksuUm91dGVyKCk7Cglyb3V0ZXIucm91dGUoLyguKikvLCAncm91dGUnLCBmdW5jdGlvbiAocm91dGUpIHsKCgkJLy8gTm9ybWFsaXplIGhvbWUgcm91dGVzICgjIG9yIG51bGwpIHRvICcnCgkJaWYgKCFyb3V0ZSkgewoJCQlyb3V0ZSA9ICcnOwoJCX0KCgkJLy8gVHJpZ2dlciByb3V0ZQoJCUZSQU1FV09SSy50cmlnZ2VyKCcjJyArIHJvdXRlKTsKCX0pOwoKCS8vIEV4cG9zZSBgbmF2aWdhdGUoKWAgbWV0aG9kCglGUkFNRVdPUksubmF2aWdhdGUgPSBGUkFNRVdPUksuaGlzdG9yeS5uYXZpZ2F0ZTsKfQoKfSx7fV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogQmFyZS1ib25lcyBET00vVUkgdXRpbGl0aWVzCiAqLwoKdmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4vZXZlbnRzJyk7Cgp2YXIgRE9NID0gewoKCS8qKgoJICogRXhwb3NlIHRoZSAiRE9NbXktZXZlbnRlZG5lc3MiIG9mIGVsZW1lbnRzIHNvIHRoYXQgaXQncyBzZWxlY3RhYmxlIHZpYSBDU1MKCSAqIFlvdSBjYW4gdXNlIHRoaXMgdG8gYXBwbHkgYSBmZXcgY2hvaWNlIERPTSBtb2RpZmljYXRpb25zIG91dCB0aGUgZ2F0ZS0tCgkgKiAoZS5nLiB0d2Vha3MgdGFyZ2V0aW5nIGNvbW1vbiBpc3N1ZXMgdGhhdCB0eXBpY2FsbHkgZ2V0IGZvcmdvdHRlbiwgbGlrZSBkaXNhYmxpbmcgdGV4dCBzZWxlY3Rpb24pCgkgKgoJICogQHBhcmFtIHtDb21wb25lbnR9IGNvbXBvbmVudAoJICovCglmbGFnQm91bmRFdmVudHM6IGZ1bmN0aW9uICggY29tcG9uZW50ICkgewoKCQkvLyBUT0RPOiBwcm92aWRlIGFjY2VzcyB0byBib3VuZCBnbG9iYWwgZXZlbnRzICglKSBhbmQgcm91dGVzICgjKSBhcyB3ZWxsCgkJLy8gVE9ETzogZmxhZyBhbGwgRE9NIGV2ZW50cywgbm90IGp1c3QgY2xpY2sgYW5kIHRvdWNoCgoJCS8vIEJ1aWxkIHN1YnNldCBvZiBqdXN0IHRoZSBjbGljay90b3VjaCBldmVudHMKCQl2YXIgY2xpY2tPclRvdWNoRXZlbnRzID0gRXZlbnRzLnBhcnNlKAoJCQljb21wb25lbnQuZXZlbnRzLAoJCQl7IG9ubHk6IFsnY2xpY2snLCAndG91Y2gnLCAndG91Y2hzdGFydCcsICd0b3VjaGVuZCddIH0KCQkpOwoKCQkvLyBJZiBubyBjbGljay90b3VjaCBldmVudHMgZm91bmQsIGJhaWwgb3V0CgkJaWYgKCBjbGlja09yVG91Y2hFdmVudHMubGVuZ3RoIDwgMSApIHJldHVybjsKCgkJLy8gUXVlcnkgYWZmZWN0ZWQgZWxlbWVudHMgZnJvbSBET00KCQl2YXIgJGFmZmVjdGVkID0gRXZlbnRzLmdldEVsZW1lbnRzKGNsaWNrT3JUb3VjaEV2ZW50cywgY29tcG9uZW50KTsKCgkJLy8gTk9URTogRm9yIG5vdywgdGhpcyBpcyBhbHdheXMganVzdCAnY2xpY2snCgkJdmFyIGJvdW5kRXZlbnRzU3RyaW5nID0gJ2NsaWNrJzsKCgkJLy8gU2V0IGBkYXRhLUZSQU1FV09SSy1jbGlja2FibGVgIGN1c3RvbSBhdHRyaWJ1dGUKCQkvLyAodWkgbG9naWMgc2hvdWxkIGJlIGV4dGVuZGVkIGluIENTUykKCQkkYWZmZWN0ZWQuYXR0cignZGF0YS0nICsgRlJBTUVXT1JLLm9wdGlvbnMuZnJhbWV3b3JrSWQgKyAnLWV2ZW50cycsIGJvdW5kRXZlbnRzU3RyaW5nKTsKCgkJRlJBTUVXT1JLLnZlcmJvc2UoCgkJCWNvbXBvbmVudC5pZCArICcgOjogJyArCgkJCSdEaXNhYmxlZCB1c2VyIHRleHQgc2VsZWN0aW9uIG9uIGVsZW1lbnRzIHcvIGNsaWNrL3RvdWNoIGV2ZW50czonLAoJCQljbGlja09yVG91Y2hFdmVudHMsCgkJCSRhZmZlY3RlZAoJCSk7Cgl9Cn07Cgptb2R1bGUuZXhwb3J0cyA9IERPTTsKCn0seyIuL2V2ZW50cyI6MzZ9XSwzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBJbnNwZWN0IGEgRE9NIGVsZW1lbnQgYW5kIHNlZSBpZiBpdCBoYXMgYSBkZWZhdWx0IGNvbXBvbmVudC90ZW1wbGF0ZSBJRC4KICogUHJvdmlkZXMgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgbGF5ZXIsIGFuZCBub3JtYWxpemVzIHRoZSBzeW50YXggaW4gdGhlIERPTS4KICoKICogQHBhcmFtICB7RE9NRWxlbWVudH0gZWwKICogQHJldHVybiB7U3RyaW5nfSAgICBbdGhlIGlkIG9mIHRoZSBkZWZhdWx0IGNvbXBvbmVudC90ZW1wbGF0ZSwgaWYgb25lIHdhcyBzcGVjaWZpZWRdCiAqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbCkgewoKCS8vIFByb3ZpZGUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yCgkvLyBgZGVmYXVsdGAsIGBjb250ZW50c2AgYW5kIGB0ZW1wbGF0ZWAgbm90YXRpb24KCXZhciBjb21wb25lbnRJZCA9ICQoZWwpLmF0dHIoJ3RlbXBsYXRlJykgfHwgJChlbCkuYXR0cignZGVmYXVsdCcpIHx8ICQoZWwpLmF0dHIoJ2NvbnRlbnRzJyk7CgoJLy8gTm9ybWFsaXplIHRvIGB0ZW1wbGF0ZWAgYXR0cmlidXRlIGluIHRoZSBET00uCgkkKGVsKS5hdHRyKCd0ZW1wbGF0ZScsIGNvbXBvbmVudElkKTsKCglyZXR1cm4gY29tcG9uZW50SWQ7Cn07Cgp9LHt9XSwzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBHcmFicyB0aGUgTWFzdCBpZGVudGlmaWVyIGZyb20gYW4gSFRNTCBlbGVtZW50LgogKiBTdXBwb3J0cyBgaWRgLCBgZGF0YS1pZGAsIG9yIGBkYXRhLXJlZ2lvbmAKICoKICogQHBhcmFtICB7RE9NRWxlbWVudH0gZWwgICAgW3RoZSBET00gZWxlbWVudCB0byBpbnNwZWN0XQogKiBAcGFyYW0gIHtCb29sZWFufSByZXF1aXJlZCBbd2hldGhlciBhbiBpZGVudGlmaWVyIGlzIHJlcXVpcmVkXQogKgogKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICBbaWRlbnRpZmllcl0KICovCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVsMk1hc3RJRCAoZWwsIHJlcXVpcmVkKSB7CgoJdmFyIGlkID0gJChlbCkuYXR0cignaWQnKTsKCXZhciBkYXRhSWQgPSAkKGVsKS5hdHRyKCdkYXRhLWlkJykgfHwgJChlbCkuYXR0cignZGF0YS1yZWdpb24nKTsKCXZhciBjb250ZW50c0lkID0gJChlbCkuYXR0cignY29udGVudHMnKTsKCglpZiAoaWQgJiYgZGF0YUlkKSB7CgkJdGhyb3cgbmV3IEVycm9yKGlkICsgJyA6OiBDYW5ub3Qgc2V0IGJvdGggYGlkYCBhbmQgYGRhdGEtaWRgISAgUGxlYXNlIHVzZSBvbmUgb3IgdGhlIG90aGVyLiAgKGRhdGEtaWQgaXMgc2FmZXN0KScpOwoJfQoJaWYgKHJlcXVpcmVkICYmICFpZCAmJiAhZGF0YUlkKSB7CgkJdGhyb3cgbmV3IEVycm9yKCdObyBpZCBzcGVjaWZpZWQgaW4gZWxlbWVudCB3aGVyZSBpdCBpcyByZXF1aXJlZDpcbicgKyBlbCk7Cgl9CgoJcmV0dXJuIGlkIHx8IGRhdGFJZCB8fCBjb250ZW50c0lkOwp9OwoKfSx7fV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogVXRpbGl0eSBFdmVudCB0b29sa2l0CiAqLwoKdmFyIEV2ZW50cyA9IHsKCgkvKioKCSAqIFBhcnNlcyBhIGRpY3Rpb25hcnkgb2YgZXZlbnRzIGFuZCBvcHRpb25hbGx5IGZpbHRlcnMgYnkgdGhlIGV2ZW50IHR5cGUuIElmIHRoZSBldmVudAoJICoKCSAqIEBwYXJhbSAge09iamVjdH0gZXZlbnRzICBbQSBCYWNrYm9uZS5WaWV3IGV2ZW50cyBvYmplY3RdCgkgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMgW09wdGlvbnMgb2JqZWN0IHRoYXQgYWxsb3dzIHVzIHRvIGZpbHRlciBwYXJzaW5nIHRvIGNlcnRhaW4gZXZlbnQKCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNdCgkgKgoJICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIFtBcnJheSBjb250YWluaW5nIHBhcnNlZEV2ZW50cyB0aGF0IGFyZSBtYXRjaGluZyBldmVudCBrZXlzXQoJICovCglwYXJzZTogZnVuY3Rpb24gKGV2ZW50cywgb3B0aW9ucykgewoKCQl2YXIgZXZlbnRLZXlzID0gXy5rZXlzKGV2ZW50cyB8fCB7fSksCgkJCWxpbWl0RXZlbnRzLAoJCQlwYXJzZWRFdmVudHMgPSBbXTsKCgkJLy8gT3B0aW9uYWxseSBmaWx0ZXIgdXNpbmcgc2V0IG9mIGFjY2VwdGFibGUgZXZlbnQgdHlwZXMKCQlsaW1pdEV2ZW50cyA9IG9wdGlvbnMub25seTsKCQlldmVudEtleXMgPSBfLmZpbHRlcihldmVudEtleXMsIGZ1bmN0aW9uIGNoZWNrRXZlbnROYW1lIChldmVudEtleSkgewoKCQkJLy8gUGFyc2UgZXZlbnQgc3RyaW5nIGludG8gc2VtYW50aWMgcmVwcmVzZW50YXRpb24KCQkJdmFyIGV2ZW50ID0gRXZlbnRzLnBhcnNlRE9NRXZlbnQoZXZlbnRLZXkpOwoJCQlwYXJzZWRFdmVudHMucHVzaChldmVudCk7CgoJCQkvLyBPcHRpb25hbCBmaWx0ZXIKCQkJaWYgKGxpbWl0RXZlbnRzKSB7CgkJCQlyZXR1cm4gXy5jb250YWlucyhsaW1pdEV2ZW50cywgZXZlbnQubmFtZSk7CgkJCX0KCQkJcmV0dXJuIHRydWU7CgkJfSk7CgoJCXJldHVybiBwYXJzZWRFdmVudHM7Cgl9LAoKCS8qKgoJICogW2dldEVsZW1lbnRzIGRlc2NyaXB0aW9uXQoJICoKCSAqIEBwYXJhbSAge0FycmF5fSBzZW1hbnRpY0V2ZW50cyBbQSBsaXN0IG9mIHBhcnNlZCBldmVudCBvYmplY3RzXQoJICogQHBhcmFtICB7Q29tcG9uZW50fSBjb250ZXh0ICAgIFtJbnN0YW5jZSBvZiBhIGNvbXBvbmVudCB0byB1c2UgYXMgYSBzdGFydGluZyBwb2ludCBmb3IKCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIERPTSBxdWVyaWVzXQoJICoKCSAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgICAgICBbQW4gYXJyYXkgb2YgalF1ZXJ5IHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzXQoJICovCglnZXRFbGVtZW50czogZnVuY3Rpb24gKHNlbWFudGljRXZlbnRzLCBjb250ZXh0KSB7CgoJCS8vIENvbnRleHQgb3B0aW9uYWwKCQljb250ZXh0ID0gY29udGV4dCB8fCB7ICQ6ICQgfTsKCgkJLy8gSXRlcmF0aXZlbHkgYnVpbGQgYSBzZXQgb2YgYWZmZWN0ZWQgZWxlbWVudHMKCQl2YXIgJGFmZmVjdGVkID0gJCgpOwoJCV8uZWFjaChzZW1hbnRpY0V2ZW50cywgZnVuY3Rpb24gbG9va3VwRWxlbWVudHNGb3JFdmVudCAoZXZlbnQpIHsKCgkJCS8vIERldGVybWluZSBtYXRjaGVkIGVsZW1lbnRzCgkJCS8vIFVzZSBkZWxlZ2F0ZSBzZWxlY3RvciBpZiBzcGVjaWZpZWQKCQkJLy8gT3RoZXJ3aXNlLCBncmFiIHRoZSBlbGVtZW50IGZvciB0aGlzIGNvbXBvbmVudAoJCQl2YXIgJG1hdGNoZWQgPQlldmVudC5zZWxlY3RvciA/CgkJCQkJCQljb250ZXh0LiQoZXZlbnQuc2VsZWN0b3IpIDoKCQkJCQkJCWNvbnRleHQuJGVsOwoKCQkJLy8gQWRkIG1hdGNoZWQgZWxlbWVudHMgdG8gc2V0CgkJCSRhZmZlY3RlZCA9ICRhZmZlY3RlZC5hZGQoICRtYXRjaGVkICk7CgkJfSwgdGhpcyk7CgoJCXJldHVybiAkYWZmZWN0ZWQ7Cgl9LAoKCgoJLyoqCgkgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBldmVudCBrZXkgbWF0Y2hlcyBhIERPTSBldmVudC4KCSAqCgkgKiBAcGFyYW0gIHtTdHJpbmd9IGtleSBbS2V5IHRvIG1hdGNoIGFnYWluc3RdCgkgKgoJICogaWYgbm8gbWF0Y2ggaXMgZm91bmQKCSAqIEByZXR1cm4ge0Jvb2xlYW59IAkJW3JldHVybiBgZmFsc2VgXQoJICoKCSAqIG90aGVyd2lzZQoJICogQHJldHVybiB7T2JqZWN0fSAgCQlbT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBuYW1lYCBvZiB0aGUgRE9NIGVsZW1lbnQgYW5kIHRoZSBgc2VsZWN0b3JgXQoJICovCglwYXJzZURPTUV2ZW50OiBfLm1lbW9pemUoZnVuY3Rpb24oa2V5KSB7CgoJCXZhciBtYXRjaGVzID0ga2V5Lm1hdGNoKHRoaXNbJy9ET01FdmVudC8nXSk7CgoJCWlmICghbWF0Y2hlcyB8fCAhbWF0Y2hlc1sxXSkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlyZXR1cm4gewoJCQluYW1lOiBtYXRjaGVzWzFdLAoJCQlzZWxlY3RvcjogbWF0Y2hlc1szXQoJCX07Cgl9KSwKCgoJLyoqCgkgKiBTdXBwb3J0ZWQgImZpcnN0LWNsYXNzIiBET00gZXZlbnRzLgoJICogQHR5cGUge0FycmF5fQoJICovCgluYW1lczogWwoKCQkvLyBMb2NhbGl6ZWQgYnJvd3NlciBldmVudHMKCQkvLyAod29ya3Mgb24gaW5kaXZpZHVhbCBlbGVtZW50cykKCQknZXJyb3InLCAnc2Nyb2xsJywKCgkJLy8gTW91c2UgZXZlbnRzCgkJJ2NsaWNrJywgJ2RibGNsaWNrJywgJ21vdXNlZG93bicsICdtb3VzZXVwJywgJ2hvdmVyJywgJ21vdXNlZW50ZXInLCAnbW91c2VsZWF2ZScsCgkJJ21vdXNlb3ZlcicsICdtb3VzZW91dCcsICdtb3VzZW1vdmUnLAoKCQkvLyBLZXlib2FyZCBldmVudHMKCQkna2V5ZG93bicsICdrZXl1cCcsICdrZXlwcmVzcycsCgoJCS8vIEZvcm0gZXZlbnRzCgkJJ2JsdXInLCAnY2hhbmdlJywgJ2ZvY3VzJywgJ2ZvY3VzaW4nLCAnZm9jdXNvdXQnLCAnc2VsZWN0JywgJ3N1Ym1pdCcsCgoJCS8vIFJhdyB0b3VjaCBldmVudHMKCQkndG91Y2hzdGFydCcsICd0b3VjaGVuZCcsICd0b3VjaG1vdmUnLCAndG91Y2hjYW5jZWwnLAoKCQkvLyBNYW51ZmFjdHVyZWQgZXZlbnRzCgkJJ3RvdWNoJywKCgkJLy8gVE9ETzoKCQkncmlnaHRjbGljaycsICdjbGlja291dHNpZGUnCgldCn07CgoKCgovKioKICogUmVnZXhwIHRvIG1hdGNoICJmaXJzdCBjbGFzcyIgRE9NIGV2ZW50cwogKiAodGhlc2UgYXJlIGFsbG93ZWQgaW4gdGhlIHRvcCBsZXZlbCBvZiBhIGNvbXBvbmVudCBkZWZpbml0aW9uIGFzIG1ldGhvZCBrZXlzKQogKgkJaS5lLiAvXihjbGlja3xob3ZlcnxibHVyfGZvY3VzKSggKC4rKSkvCiAqCQkJWzFdID0+IGV2ZW50IG5hbWUKICoJCQlbM10gPT4gc2VsZWN0b3IKICovCgpFdmVudHNbJy9ET01FdmVudC8nXSA9IG5ldyBSZWdFeHAoJ14oJyArIF8ucmVkdWNlKEV2ZW50cy5uYW1lcywKCWZ1bmN0aW9uIGJ1aWxkUmVnZXhwKG1lbW8sIGV2ZW50TmFtZSwgaW5kZXgpIHsKCgkJLy8gT21pdCBgfGAgdGhlIGZpcnN0IHRpbWUKCQlpZiAoaW5kZXggPT09IDApIHsKCQkJcmV0dXJuIG1lbW8gKyBldmVudE5hbWU7CgkJfQoKCQlyZXR1cm4gbWVtbyArICd8JyArIGV2ZW50TmFtZTsKCX0sICcnKSArCicpKCAoLispKT8kJyk7Cgptb2R1bGUuZXhwb3J0cyA9IEV2ZW50czsKCn0se31dLDM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIE1hcCBhbiBvYmplY3QncyB2YWx1ZXMsIGFuZCByZXR1cm4gYSB2YWxpZCBvYmplY3QgKHRoaXMgZnVuY3Rpb24gaXMgaGFuZHkgYmVjYXVzZQogKiB1bmRlcnNjb3JlLm1hcCgpIHJldHVybnMgYSBsaXN0LCBub3QgYW4gb2JqZWN0LikKICoKICogQHBhcmFtIHtPYmplY3R9IG9iaiAgICAgICAgICAgIFtPYmplY3Qgd2hvcyB2YWx1ZXMgeW91IHdhbnQgdG8gbWFwXQogKiBAcGFyYW0gIHtGdW5jdGlvbn0gdHJhbnNmb3JtRm4gW0Z1bmN0aW9uIHRvIHRyYW5zZm9ybSBlYWNoIG9iamVjdCB2YWx1ZSBieV0KICoKICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICBbTmV3IG9iamVjdCB3aXRoIHRoZSB2YWx1ZXMgbWFwcGVkXQogKi8KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb2JqTWFwKG9iaiwgdHJhbnNmb3JtRm4pIHsKCXJldHVybiBfLm9iamVjdChfLmtleXMob2JqKSwgXy5tYXAob2JqLCB0cmFuc2Zvcm1GbikpOwp9OwoKCn0se31dLDM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIFRyYW5zbGF0ZSAqKnJpZ2h0LWhhbmQtc2lkZSBhYmJyZXZpYXRpb25zKiogaW50byBmdW5jdGlvbnMgdGhhdCBwZXJmb3JtCiAqIHRoZSBwcm9wZXIgYmVoYXZpb3JzLCBlLmcuCiAqCQkjYWJvdXRfbWUKICoJCSVtYWluTWVudTpvcGVuCiAqLwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2xhdGVTaG9ydGhhbmQodmFsdWUsIGtleSkgewoKCXZhciBtYXRjaGVzLCBmbjsKCgkvLyBJZiB0aGlzIGlzIGFuIGltcG9ydGFudCwgRlJBTUVXT1JLLXNwZWNpZmljIGRhdGEga2V5LAoJLy8gYW5kIGEgZnVuY3Rpb24gd2FzIHNwZWNpZmllZCwgcnVuIGl0IHRvIGdldCBpdHMgdmFsdWUKCS8vICh0aGlzIGlzIHRvIGtlZXAgcGFyaXR5IHdpdGggQmFja2JvbmUncyBzaW1pbGFyIGZ1bmN0aW9uYWxpdHkpCglpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSAmJiAoa2V5ID09PSAnY29sbGVjdGlvbicgfHwga2V5ID09PSAnbW9kZWwnKSkgewoJCXJldHVybiB2YWx1ZSgpOwoJfQoKCS8vIElnbm9yZSBvdGhlciBub24tc3RyaW5ncwoJaWYgKCFfLmlzU3RyaW5nKHZhbHVlKSkgewoJCXJldHVybiB2YWx1ZTsKCX0KCgkvLyBBbHNvIGlnbm9yZSBgdGVtcGxhdGVgCgkvLyBUT0RPOiB1c2UgYSBkaWZmZXJlbnQga2V5IGxhdGVyCglpZiAoa2V5ID09PSAndGVtcGxhdGUnKSByZXR1cm4gdmFsdWU7CgoJLy8gQWxzbyBpZ25vcmUgdGhpbmdzIHRoYXQgc3RhcnQgd2l0aCBfCglpZiAoa2V5Lm1hdGNoKC9eXy8pKSByZXR1cm4gdmFsdWU7CgoKCS8vIFJlZGlyZWN0cyB1c2VyIHRvIGNsaWVudC1zaWRlIFVSTCwgdy9vIGFmZmVjdGluZyBicm93c2VyIGhpc3RvcnkKCS8vIExpa2UgY2FsbGluZyBgQmFja2JvbmUuaGlzdG9yeS5uYXZpZ2F0ZSgnL2ZvbycsIHsgcmVwbGFjZTogdHJ1ZSB9KWAKCWlmICgobWF0Y2hlcyA9IHZhbHVlLm1hdGNoKC9eIyMoLipbXi5cc10pLykpICYmIG1hdGNoZXNbMV0pIHsKCQlmbiA9IGZ1bmN0aW9uIHJlZGlyZWN0QW5kQ292ZXJUcmFja3MoKSB7CgkJCXZhciB1cmwgPSBtYXRjaGVzWzFdOwoJCQlGUkFNRVdPUksuaGlzdG9yeS5uYXZpZ2F0ZSh1cmwsIHsKCQkJCXRyaWdnZXI6IHRydWUsCgkJCQlyZXBsYWNlOiB0cnVlCgkJCX0pOwoJCX07Cgl9CgkvLyBNZXRob2QgdG8gcmVkaXJlY3QgdXNlciB0byBhIGNsaWVudC1zaWRlIFVSTCwgdGhlbiBjYWxsIHRoZSBoYW5kbGVyCgllbHNlIGlmICgobWF0Y2hlcyA9IHZhbHVlLm1hdGNoKC9eIyguKlteLlxzXSspLykpICYmIG1hdGNoZXNbMV0pIHsKCQlmbiA9IGZ1bmN0aW9uIGNoYW5nZVVybEZyYWdtZW50KCkgewoJCQl2YXIgdXJsID0gbWF0Y2hlc1sxXTsKCQkJRlJBTUVXT1JLLmhpc3RvcnkubmF2aWdhdGUodXJsLCB7CgkJCQl0cmlnZ2VyOiB0cnVlCgkJCX0pOwoJCX07Cgl9CgkvLyBNZXRob2QgdG8gdHJpZ2dlciBnbG9iYWwgZXZlbnQKCWVsc2UgaWYgKChtYXRjaGVzID0gdmFsdWUubWF0Y2goL14oJS4qW14uXHNdKS8pKSAmJiBtYXRjaGVzWzFdKSB7CgkJZm4gPSBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQoKSB7CgkJCXZhciB0cmlnZ2VyID0gbWF0Y2hlc1sxXTsKCQkJRlJBTUVXT1JLLnZlcmJvc2UodGhpcy5pZCArICcgOjogVHJpZ2dlcmluZyBldmVudCAoJyArIHRyaWdnZXIgKyAnKS4uLicpOwoJCQlGUkFNRVdPUksudHJpZ2dlcih0cmlnZ2VyKTsKCQl9OwoJfQoJLy8gTWV0aG9kIHRvIGZpcmUgYSB0ZXN0IGFsZXJ0CgkvLyAodXNlIG1lc3NhZ2UsIGlmIHNwZWNpZmllZCkKCWVsc2UgaWYgKChtYXRjaGVzID0gdmFsdWUubWF0Y2goL14hISFccyooLipbXi5cc10pPy8pKSkgewoJCWZuID0gZnVuY3Rpb24gYmFuZ0FsZXJ0KGUpIHsKCgkJCS8vIElmIHNwZWNpZmllZCwgbWVzc2FnZSBpcyB1c2VkLCBvdGhlcndpc2UgJ0FsZXJ0IHRyaWdnZXJlZCEnCgkJCXZhciBtc2cgPSAobWF0Y2hlcyAmJiBtYXRjaGVzWzFdKSB8fCAnRGVidWcgYWxlcnQgKCEhISkgdHJpZ2dlcmVkISc7CgoJCQkvLyBPdGhlciBkaWFnbm9zdGljIGluZm9ybWF0aW9uCgkJCW1zZyArPSAnXG5cbkRpYWdub3N0aWNzXG49PT09PT09PT09PT09PT09PT09PT09PT1cbic7CgkJCWlmIChlICYmIGUuY3VycmVudFRhcmdldCkgewoJCQkJbXNnICs9ICdlLmN1cnJlbnRUYXJnZXQgOjogJyArIGUuY3VycmVudFRhcmdldDsKCQkJfQoJCQlpZiAodGhpcy5pZCkgewoJCQkJbXNnICs9ICd0aGlzLmlkIDo6ICcgKyB0aGlzLmlkOwoJCQl9CgoJCQlhbGVydChtc2cpOwoJCX07Cgl9CgoJLy8gTWV0aG9kIHRvIGxvZyBhIG1lc3NhZ2UgdG8gdGhlIGNvbnNvbGUKCS8vICh1c2UgbWVzc2FnZSwgaWYgc3BlY2lmaWVkKQoJZWxzZSBpZiAoKG1hdGNoZXMgPSB2YWx1ZS5tYXRjaCgvXj4+PlxzKiguKlteLlxzXSk/LykpKSB7CgoJCWZuID0gZnVuY3Rpb24gbG9nTWVzc2FnZShlKSB7CgoJCQkvLyBJZiBzcGVjaWZpZWQsIG1lc3NhZ2UgaXMgdXNlZCwgb3RoZXJ3aXNlIHVzZSBkZWZhdWx0CgkJCXZhciBtc2cgPSAobWF0Y2hlcyAmJiBtYXRjaGVzWzFdKSB8fCAnTG9nIG1lc3NhZ2UgKD4+PikgdHJpZ2dlcmVkISc7CgkJCUZSQU1FV09SSy5sb2cobXNnKTsKCQl9OwoJfQoKCS8vIE1ldGhvZCB0byBhdHRhY2ggdGhlIHNwZWNpZmllZCBjb21wb25lbnQvdGVtcGxhdGUgdG8gYSByZWdpb24KCWVsc2UgaWYgKAoJCSgobWF0Y2hlcyA9IHZhbHVlLm1hdGNoKC9eKFteLlxzXSspXHMqPFwtXHMqKC4qW14uXHNdKS8pKSAmJiBtYXRjaGVzWzFdICYmIG1hdGNoZXNbMl0pIHx8CgkJKChtYXRjaGVzID0gdmFsdWUubWF0Y2goL14oW14uXHNdKylccypcLT5ccyooLipbXi5cc10pLykpICYmIG1hdGNoZXNbMV0gJiYgbWF0Y2hlc1syXSAmJgoJCQkobWF0Y2hlc1sndG1wJ10gPSBtYXRjaGVzWzFdKSAmJiAobWF0Y2hlc1sxXSA9IG1hdGNoZXNbMl0pICYmIChtYXRjaGVzWzJdID0gbWF0Y2hlc1sndG1wJ10pKQoJKSB7CgkJZm4gPSBmdW5jdGlvbiBhdHRhY2hUZW1wbGF0ZSgpIHsKCgkJCS8vIFJlbW92ZSBhbGwgd2hpdGVzcGFjZSBmcm9tIG1hdGNoZXMKCQkJbWF0Y2hlc1sxXSA9IG1hdGNoZXNbMV0ucmVwbGFjZSgvKFxzKykvZywgJycpOwoJCQltYXRjaGVzWzJdID0gbWF0Y2hlc1syXS5yZXBsYWNlKC8oXHMrKS9nLCAnJyk7CgoJCQl2YXIgcmVnaW9uID0gbWF0Y2hlc1sxXTsKCQkJdmFyIHRlbXBsYXRlID0gbWF0Y2hlc1syXTsKCQkJRlJBTUVXT1JLLnZlcmJvc2UodGhpcy5pZCArICcgOjogQXR0YWNoaW5nIGAnICsgdGVtcGxhdGUgKyAnYCB0byBgJyArIHJlZ2lvbiArICdgLi4uJyk7CgoKCQkJaWYgKCF0aGlzW3JlZ2lvbl0pIHsKCQkJCUZSQU1FV09SSy5lcnJvcih0aGlzLmlkLCc6OiBUcnlpbmcgdG8gYXR0YWNoIHJlZ2lvbiB3aXRoIHNob3J0aGFuZCAoJyt2YWx1ZSsnKSwgYnV0IGNvdWxkIG5vdCBmaW5kIHJlZ2lvbiBgJytyZWdpb24rJ2AnKTsKCQkJCXJldHVybjsKCQkJfQoJCQl0aGlzW3JlZ2lvbl0uYXR0YWNoKHRlbXBsYXRlKTsKCQl9OwoJfQoKCgkvLyBNZXRob2QgdG8gdG9nZ2xlICghKSB0aGUgc3BlY2lmaWVkIG1vZGVsIGF0dHIKCWVsc2UgaWYgKChtYXRjaGVzID0gdmFsdWUubWF0Y2goL15cIVxzKlxAKC4qW14uXHNdKS8pKSAmJiBtYXRjaGVzWzFdKSB7CgkJZm4gPSBmdW5jdGlvbiB0b2dnbGVBdHRyKCkgewoJCQlGUkFNRVdPUksudmVyYm9zZSh0aGlzLmlkICsgJyA6OiBUb2dnbGluZyBhdHRyICgnICsgbWF0Y2hlc1sxXSArICcpLi4uJyk7CgkJCXZhciBvbGRBdHRyVmFsdWUgPSB0aGlzLm1vZGVsLmdldCggbWF0Y2hlc1sxXSApOwoKCQkJaWYgKG9sZEF0dHJWYWx1ZSkgewoJCQkJdGhpcy5tb2RlbC5zZXQoIG1hdGNoZXNbMV0sIGZhbHNlICk7CgkJCX0KCQkJZWxzZSB7CgkJCQl0aGlzLm1vZGVsLnNldCggbWF0Y2hlc1sxXSwgdHJ1ZSApOwoJCQl9CgkJfTsKCX0KCgkvLyBNZXRob2QgdG8gY2hhbmdlIHRoZSBzcGVjaWZpZWQgbW9kZWwgYXR0cgoJZWxzZSBpZiAoKG1hdGNoZXMgPSB2YWx1ZS5tYXRjaCgvXlxzKlxAKFtePV0rKT0oW149XSopXHMqJC8pKSkgewoKCQl2YXIgYXR0ck5hbWUgPSBtYXRjaGVzWzFdOwoJCXZhciBuZXdBdHRyVmFsdWUgPSBtYXRjaGVzWzJdOwoKCQlmbiA9IGZ1bmN0aW9uIGNoYW5nZUF0dHIoKSB7CgkJCXRoaXMubW9kZWwuc2V0KGF0dHJOYW1lLCBuZXdBdHRyVmFsdWUpOwoJCX07Cgl9CgoJLy8gTWV0aG9kIHRvIHJlbW92ZSB0aGUgbW9kZWwgZm9yIHRoZSBjdXJyZW50IGNvbXBvbmVudAoJZWxzZSBpZiAoKG1hdGNoZXMgPSB2YWx1ZS5tYXRjaCgvXlxzKlwtXHMqJC8pKSkgewoJCWZuID0gZnVuY3Rpb24gcmVtb3ZlTW9kZWwgKCkgewoKCQkJLy8gT25seSB3b3JrcyBpZiBtb2RlbCBiZWxvbmdzIHRvIGEgY29sbGVjdGlvbgoJCQlpZiAoIXRoaXMubW9kZWwuY29sbGVjdGlvbikgcmV0dXJuOwoKCQkJdGhpcy5tb2RlbC5jb2xsZWN0aW9uLnJlbW92ZSh0aGlzLm1vZGVsKTsKCQl9OwoJfQoKCgkvLyBkZXByZWNhdGluZyBjbGFzcyBtYW5pcHVsYXRpb24gc2hvcnRoYW5kCgkvLyAobm8gbmVlZCB0byBkbyBkb20gbWFuaXB1bGF0aW9uIHVubGVzcyBhYnNvbHV0ZWx5IG5lY2Vzc2FyeSkKCgkvLyAvLyBNZXRob2QgdG8gYWRkIHRoZSBzcGVjaWZpZWQgY2xhc3MKCS8vIGVsc2UgaWYgKChtYXRjaGVzID0gdmFsdWUubWF0Y2goL15cK1xzKlwuKC4qW14uXHNdKS8pKSAmJiBtYXRjaGVzWzFdKSB7CgkvLyAJZm4gPSBmdW5jdGlvbiBhZGRDbGFzcygpIHsKCS8vIAkJRlJBTUVXT1JLLnZlcmJvc2UodGhpcy5pZCArICcgOjogQWRkaW5nIGNsYXNzICgnICsgbWF0Y2hlc1sxXSArICcpLi4uJyk7CgkvLyAJCXRoaXMuJGVsLmFkZENsYXNzKG1hdGNoZXNbMV0pOwoJLy8gCX07CgkvLyB9CgkvLyAvLyBNZXRob2QgdG8gcmVtb3ZlIHRoZSBzcGVjaWZpZWQgY2xhc3MKCS8vIGVsc2UgaWYgKChtYXRjaGVzID0gdmFsdWUubWF0Y2goL15cLVxzKlwuKC4qW14uXHNdKS8pKSAmJiBtYXRjaGVzWzFdKSB7CgkvLyAJZm4gPSBmdW5jdGlvbiByZW1vdmVDbGFzcygpIHsKCS8vIAkJRlJBTUVXT1JLLnZlcmJvc2UodGhpcy5pZCArICcgOjogUmVtb3ZpbmcgY2xhc3MgKCcgKyBtYXRjaGVzWzFdICsgJykuLi4nKTsKCS8vIAkJdGhpcy4kZWwucmVtb3ZlQ2xhc3MobWF0Y2hlc1sxXSk7CgkvLyAJfTsKCS8vIH0KCS8vIC8vIE1ldGhvZCB0byB0b2dnbGUgdGhlIHNwZWNpZmllZCBjbGFzcwoJLy8gZWxzZSBpZiAoKG1hdGNoZXMgPSB2YWx1ZS5tYXRjaCgvXlwhXHMqXC4oLipbXi5cc10pLykpICYmIG1hdGNoZXNbMV0pIHsKCS8vIAlmbiA9IGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKCkgewoJLy8gCQlGUkFNRVdPUksudmVyYm9zZSh0aGlzLmlkICsgJyA6OiBUb2dnbGluZyBjbGFzcyAoJyArIG1hdGNoZXNbMV0gKyAnKS4uLicpOwoJLy8gCQl0aGlzLiRlbC50b2dnbGVDbGFzcyhtYXRjaGVzWzFdKTsKCS8vIAl9OwoJLy8gfQoKCS8vIFRPRE86CWFsbG93IGRlc2NlbmRhbnRzIHRvIGJlIGNvbnRyb2xsZWQgdmlhIHNob3J0aGFuZAoJLy8JCQllLmcuIDogJ2xpLnJvdyAtLmhpZ2hsaWdodGVkJwoJLy8JCQl3b3VsZCByZW1vdmUgdGhlIGBoaWdobGlnaHRlZGAgY2xhc3MgZnJvbSB0aGlzLiQoJ2xpLnJvdycpCgoKCS8vIElmIHNob3J0LWhhbmQgbWF0Y2hlZCwgcmV0dXJuIHRoZSBkZXJlZmVyZW5jZWQgZnVuY3Rpb24KCWlmIChmbikgewoKCQlGUkFNRVdPUksudmVyYm9zZSgnSW50ZXJwcmV0aW5nIG1lYW5pbmcgZnJvbSBzaG9ydGhhbmQgOjogYCcgKyB2YWx1ZSArICdgLi4uJyk7CgoJCS8vIEN1cnJ5IHRoZSByZXN1bHQgZnVuY3Rpb24gd2l0aCBhbnkgc3VmZml4IG1hdGNoZXMKCQl2YXIgY3VycmllZEZuID0gZm47CgoJCS8vIFRyYWlsaW5nIGAuYCBpbmRpY2F0ZXMgYW4gZS5zdG9wUHJvcGFnYXRpb24oKQoJCWlmICh2YWx1ZS5tYXRjaCgvXC5ccyokLykpIHsKCQkJY3VycmllZEZuID0gZnVuY3Rpb24gYW5kU3RvcFByb3BhZ2F0aW9uKGUpIHsKCgkJCQkvLyBCaW5kIChzbyBpdCBpbmhlcml0cyBjb21wb25lbnQgY29udGV4dCkgYW5kIGNhbGwgaW50ZXJpb3IgZnVuY3Rpb24KCQkJCWZuLmFwcGx5KHRoaXMpOwoKCQkJCS8vIHRoZW4gaW1tZWRpYXRlbHkgc3RvcCBldmVudCBidWJibGluZy9wcm9wYWdhdGlvbgoJCQkJaWYgKGUgJiYgZS5zdG9wUHJvcGFnYXRpb24pIHsKCQkJCQllLnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJfSBlbHNlIHsKCQkJCQlGUkFNRVdPUksud2FybigKCQkJCQkJdGhpcy5pZCArICcgOjogVHJhaWxpbmcgYC5gIHNob3J0aGFuZCB3YXMgdXNlZCB0byBpbnZva2UgYW4gJyArCgkJCQkJCSdlLnN0b3BQcm9wYWdhdGlvbigpLCBidXQgIicgKyB2YWx1ZSArICciIHdhcyBub3QgdHJpZ2dlcmVkIGJ5IGEgRE9NIGV2ZW50IVxuJyArCgkJCQkJCSdQcm9iYWJseSBiZXN0IHRvIGRvdWJsZS1jaGVjayB0aGlzIHdhcyB3aGF0IHlvdSBtZWFudCB0byBkby4nKTsKCQkJCX0KCQkJfTsKCQl9CgoJCXJldHVybiBjdXJyaWVkRm47Cgl9CgoKCS8vIE90aGVyd2lzZSwgaWYgbm8gc2hvcnQtaGFuZCBtYXRjaGVkLCBwYXNzIHRoZSBvcmlnaW5hbCB2YWx1ZQoJLy8gc3RyYWlnaHQgdGhyb3VnaAoJcmV0dXJuIHZhbHVlOwp9OwoKfSx7fV19LHt9LFsxN10pCi8vQCBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxjeUk2V3lJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdlkyOXRjRzl1Wlc1MEwySnBibVJGZG1WdWRITXVhbk1pTENJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdlkyOXRjRzl1Wlc1MEwyTnNiM05sTG1weklpd2lMMk52WkdVdmIzTnpMMjFoYzNRdmJHbGlMMk52YlhCdmJtVnVkQzlqYjIxd2FXeGxWR1Z0Y0d4aGRHVXVhbk1pTENJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdlkyOXRjRzl1Wlc1MEwyUmhkR0ZDYVc1a2FXNW5jeTlqYkdGemN5NXFjeUlzSWk5amIyUmxMMjl6Y3k5dFlYTjBMMnhwWWk5amIyMXdiMjVsYm5RdlpHRjBZVUpwYm1ScGJtZHpMM1JsZUhRdWFuTWlMQ0l2WTI5a1pTOXZjM012YldGemRDOXNhV0l2WTI5dGNHOXVaVzUwTDJSbGJHVjBaVUZzYkZKbFoybHZibk11YW5NaUxDSXZZMjlrWlM5dmMzTXZiV0Z6ZEM5c2FXSXZZMjl0Y0c5dVpXNTBMMmx1WkdWNExtcHpJaXdpTDJOdlpHVXZiM056TDIxaGMzUXZiR2xpTDJOdmJYQnZibVZ1ZEM5c2FXWmxZM2xqYkdWRmRtVnVkSE11YW5NaUxDSXZZMjlrWlM5dmMzTXZiV0Z6ZEM5c2FXSXZZMjl0Y0c5dVpXNTBMMnhwWm1WamVXTnNaVWh2YjJ0ekxtcHpJaXdpTDJOdlpHVXZiM056TDIxaGMzUXZiR2xpTDJOdmJYQnZibVZ1ZEM5eVpXNWtaWEl1YW5NaUxDSXZZMjlrWlM5dmMzTXZiV0Z6ZEM5c2FXSXZZMjl0Y0c5dVpXNTBMM0psYm1SbGNrTnZiR3hsWTNScGIyNHVhbk1pTENJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdlkyOXRjRzl1Wlc1MEwzSmxibVJsY2tSaGRHRkNhVzVrYVc1bmN5NXFjeUlzSWk5amIyUmxMMjl6Y3k5dFlYTjBMMnhwWWk5amIyMXdiMjVsYm5RdmNtVnVaR1Z5VW1WbmFXOXVjeTVxY3lJc0lpOWpiMlJsTDI5emN5OXRZWE4wTDJ4cFlpOWpiMjF3YjI1bGJuUXZkbUZzYVdSaGRHVkVaV1pwYm1sMGFXOXVMbXB6SWl3aUwyTnZaR1V2YjNOekwyMWhjM1F2YkdsaUwyUmxabWx1WlM5aWRXbHNaRVJsWm1sdWFYUnBiMjR1YW5NaUxDSXZZMjlrWlM5dmMzTXZiV0Z6ZEM5c2FXSXZaR1ZtYVc1bEwybHVaR1Y0TG1weklpd2lMMk52WkdVdmIzTnpMMjFoYzNRdmJHbGlMMmx1WkdWNExtcHpJaXdpTDJOdlpHVXZiM056TDIxaGMzUXZiR2xpTDJ4dloyZGxjaTlwYm1SbGVDNXFjeUlzSWk5amIyUmxMMjl6Y3k5dFlYTjBMMnhwWWk5c2IyZG5aWEl2YzJWMGRYQXVhbk1pTENJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdmNtRnBjMlV2WW5WcGJHUlFjbTkwYjNSNWNHVXVhbk1pTENJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdmNtRnBjMlV2WTI5c2JHVmpkRkpsWjJsdmJuTXVhbk1pTENJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdmNtRnBjMlV2WTI5c2JHVmpkRlJsYlhCc1lYUmxjMFp5YjIxVFkzSnBjSFJVWVdkekxtcHpJaXdpTDJOdlpHVXZiM056TDIxaGMzUXZiR2xpTDNKaGFYTmxMMmx1WkdWNExtcHpJaXdpTDJOdlpHVXZiM056TDIxaGMzUXZiR2xpTDNKbFoybHZiaTloY0hCbGJtUXVhbk1pTENJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdmNtVm5hVzl1TDJGMGRHRmphQzVxY3lJc0lpOWpiMlJsTDI5emN5OXRZWE4wTDJ4cFlpOXlaV2RwYjI0dlpXMXdkSGt1YW5NaUxDSXZZMjlrWlM5dmMzTXZiV0Z6ZEM5c2FXSXZjbVZuYVc5dUwyWnliMjFGYkdWdFpXNTBMbXB6SWl3aUwyTnZaR1V2YjNOekwyMWhjM1F2YkdsaUwzSmxaMmx2Ymk5cGJtUmxlQzVxY3lJc0lpOWpiMlJsTDI5emN5OXRZWE4wTDJ4cFlpOXlaV2RwYjI0dmFXNXpaWEowTG1weklpd2lMMk52WkdVdmIzTnpMMjFoYzNRdmJHbGlMM0psWjJsdmJpOXdjbVZ3Wlc1a0xtcHpJaXdpTDJOdlpHVXZiM056TDIxaGMzUXZiR2xpTDNKbFoybHZiaTl5WlcxdmRtVXVhbk1pTENJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdmNtOTFkR1Z5TDJsdVpHVjRMbXB6SWl3aUwyTnZaR1V2YjNOekwyMWhjM1F2YkdsaUwzVjBhV3h6TDBSUFRTNXFjeUlzSWk5amIyUmxMMjl6Y3k5dFlYTjBMMnhwWWk5MWRHbHNjeTlsYkRKRVpXWmhkV3gwVkdWdGNHeGhkR1ZKUkM1cWN5SXNJaTlqYjJSbEwyOXpjeTl0WVhOMEwyeHBZaTkxZEdsc2N5OWxiREpOWVhOMFNVUXVhbk1pTENJdlkyOWtaUzl2YzNNdmJXRnpkQzlzYVdJdmRYUnBiSE12WlhabGJuUnpMbXB6SWl3aUwyTnZaR1V2YjNOekwyMWhjM1F2YkdsaUwzVjBhV3h6TDI5aWFrMWhjQzVxY3lJc0lpOWpiMlJsTDI5emN5OXRZWE4wTDJ4cFlpOTFkR2xzY3k5emFHOXlkR2hoYm1RdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhJUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNaRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNMFJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNKQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5ZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGREwwWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRka0pCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONlRFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU12VGtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXk5U1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNMVJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJrUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXhRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU51UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXpURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzQkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6VkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzWkhRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXhRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONlFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU40UmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFdrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNSRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM0pKUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYUVaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU4yUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFrUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJ4Q1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM3BDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpGS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcVhHNGdLaUJOYjJSMWJHVWdaR1Z3Wlc1a1pXNWphV1Z6WEc0Z0tpOWNiblpoY2lCeVpXNWtaWEpFWVhSaFFtbHVaR2x1WjNNZ1BTQnlaWEYxYVhKbEtDY3VMM0psYm1SbGNrUmhkR0ZDYVc1a2FXNW5jeWNwTzF4dVhHNWNiaThxS2x4dUlDb2dRbWx1WkNCamIyeHNaV04wYVc5dUlHVjJaVzUwY3lCMGJ5QnNhV1psWTNsamJHVWdaWFpsYm5RZ2FHRnVaR3hsY25OY2JpQXFMMXh1Wlhod2IzSjBjeTVqYjJ4c1pXTjBhVzl1UlhabGJuUnpJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkQzh2SUVKcGJtUWdkRzhnWTI5c2JHVmpkR2x2YmlCbGRtVnVkSE1nYVdZZ2IyNWxJSGRoY3lCd1lYTnpaV1FnYVc1Y2JseDBhV1lnS0hSb2FYTXVZMjlzYkdWamRHbHZiaWtnZTF4dVhHNWNkRngwTHk4Z1RHbHpkR1Z1SUhSdklHVjJaVzUwYzF4dVhIUmNkSFJvYVhNdWJHbHpkR1Z1Vkc4b2RHaHBjeTVqYjJ4c1pXTjBhVzl1TENBbllXUmtKeXdnZEdocGN5NWhablJsY2tGa1pDazdYRzVjZEZ4MGRHaHBjeTVzYVhOMFpXNVVieWgwYUdsekxtTnZiR3hsWTNScGIyNHNJQ2R5WlcxdmRtVW5MQ0IwYUdsekxtRm1kR1Z5VW1WdGIzWmxLVHRjYmx4MFhIUjBhR2x6TG14cGMzUmxibFJ2S0hSb2FYTXVZMjlzYkdWamRHbHZiaXdnSjNKbGMyVjBKeXdnZEdocGN5NWhablJsY2xKbGMyVjBLVHRjYmx4MGZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCQ2FXNWtJRzF2WkdWc0lHVjJaVzUwY3lCMGJ5QnNhV1psWTNsamJHVWdaWFpsYm5RZ2FHRnVaR3hsY25NZ1lXNWtJR0ZzYzI4Z1lXeHNiM2R6SUdadmNpQm9ZVzVrYkdWeWN5QjBieUJtYVhKbFhHNGdLaUJ2YmlCalpYSjBZV2x1SUcxdlpHVnNJR0YwZEhKcFluVjBaU0JqYUdGdVoyVnpMbHh1SUNvdlhHNWxlSEJ2Y25SekxtMXZaR1ZzUlhabGJuUnpJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkSFpoY2lCelpXeG1JRDBnZEdocGN6dGNibHh1WEhScFppQW9kR2hwY3k1dGIyUmxiQ2tnZTF4dVhHNWNkRngwTHk4Z1RHbHpkR1Z1SUdadmNpQmhibmtnWVhSMGNtbGlkWFJsSUdOb1lXNW5aWE5jYmx4MFhIUXZMeUJsTG1jdVhHNWNkRngwTHk4Z0xtRm1kR1Z5UTJoaGJtZGxLRzF2WkdWc0xDQnZjSFJwYjI1ektWeHVYSFJjZEM4dlhHNWNkRngwZEdocGN5NXNhWE4wWlc1VWJ5aDBhR2x6TG0xdlpHVnNMQ0FuWTJoaGJtZGxKeXdnWm5WdVkzUnBiMjRnYlc5a1pXeERhR0Z1WjJWa0lDaHRiMlJsYkN3Z2IzQjBhVzl1Y3lrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJTWlc1a1pYSWdaR0YwWVNCaWFXNWthVzVuYzF4dVhIUmNkRngwY21WdVpHVnlSR0YwWVVKcGJtUnBibWR6TG1OaGJHd29jMlZzWmlrN1hHNWNibHgwWEhSY2RDOHZJRkoxYmlCamRYTjBiMjBnWUdGbWRHVnlRMmhoYm1kbFlDZ3BJRzFsZEdodlpGeHVYSFJjZEZ4MGFXWWdLRjh1YVhOR2RXNWpkR2x2YmloMGFHbHpMbUZtZEdWeVEyaGhibWRsS1NrZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG1GbWRHVnlRMmhoYm1kbEtHMXZaR1ZzTENCdmNIUnBiMjV6S1R0Y2JseDBYSFJjZEgxY2JseDBYSFI5S1R0Y2JseHVYSFJjZEM4dklFeHBjM1JsYmlCbWIzSWdjM0JsWTJsbWFXTWdZWFIwY21saWRYUmxJR05vWVc1blpYTmNibHgwWEhRdkx5QmxMbWN1WEc1Y2RGeDBMeThnTG1GbWRHVnlRMmhoYm1kbExtTnZiRzl5S0cxdlpHVnNMQ0IyWVd4MVpTd2diM0IwYVc5dWN5bGNibHgwWEhScFppQW9YeTVwYzA5aWFtVmpkQ2gwYUdsekxtRm1kR1Z5UTJoaGJtZGxLU2tnZTF4dVhIUmNkRngwWHk1bFlXTm9LSFJvYVhNdVlXWjBaWEpEYUdGdVoyVXNJR1oxYm1OMGFXOXVJQ2hvWVc1a2JHVnlMQ0JoZEhSeVRtRnRaU2tnZTF4dVhHNWNkRngwWEhSY2RDOHZJRU5oYkd3Z2FHRnVaR3hsY2lCM2FYUm9JRzVsZDFaaGJDQjBieUJyWldWd0lHRnlaM1Z0Wlc1MGN5QnpkSEpoYVdkb2RHWnZjbmRoY21SY2JseDBYSFJjZEZ4MGRHaHBjeTVzYVhOMFpXNVVieWgwYUdsekxtMXZaR1ZzTENBblkyaGhibWRsT2ljZ0t5QmhkSFJ5VG1GdFpTd2dablZ1WTNScGIyNGdZWFIwY2tOb1lXNW5aV1FnS0cxdlpHVnNMQ0J1WlhkV1lXd3BJSHRjYmx4MFhIUmNkRngwWEhSb1lXNWtiR1Z5TG1OaGJHd29kR2hwY3l3Z2JtVjNWbUZzS1R0Y2JseDBYSFJjZEZ4MGZTazdYRzVjYmx4MFhIUmNkSDBzSUhSb2FYTXBPMXh1WEhSY2RIMWNibHgwZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJNYVhOMFpXNXpJR1p2Y2lCaGJtUWdjblZ1Y3lCb1lXNWtiR1Z5Y3lCdmJpQm5iRzlpWVd3Z1pYWmxiblJ6SUhSb1lYUWdZWEpsSUd4cGMzUmxibVZrSUdadmNpQnZiaUJoSUdOdmJYQnZibVZ1ZEM1Y2JpQXFMMXh1Wlhod2IzSjBjeTVuYkc5aVlXeFVjbWxuWjJWeWN5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhHNWNkSFpoY2lCelpXeG1JRDBnZEdocGN6dGNibHh1WEhSMGFHbHpMbXhwYzNSbGJsUnZLRVpTUVUxRlYwOVNTeXdnSjJGc2JDY3NJR1oxYm1OMGFXOXVJQ2hsVW05MWRHVXBJSHRjYmx4dVhIUmNkQzh2SUZSeWFXMGdiMlptSUdGc2JDQmlkWFFnZEdobElHWnBjbk4wSUdGeVozVnRaVzUwSUhSdklIQmhjM01nZEdoeWIzVm5hQ0IwYnlCb1lXNWtiR1Z5WEc1Y2RGeDBkbUZ5SUdGeVozTWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1wTzF4dVhIUmNkR0Z5WjNNdWMyaHBablFvS1R0Y2JseHVYSFJjZEM4dklFbDBaWEpoZEdVZ2RHaHliM1ZuYUNCbFlXTm9JSE4xWW5OamNtbHdkR2x2YmlCdmJpQjBhR2x6SUdOdmJYQnZibVZ1ZEZ4dVhIUmNkQzh2SUdGdVpDQnNhWE4wWlc0Z1ptOXlJSFJvWlNCemNHVmphV1pwWldRZ1oyeHZZbUZzSUdWMlpXNTBjMXh1WEhSY2RGOHVaV0ZqYUNoelpXeG1Mbk4xWW5OamNtbHdkR2x2Ym5Nc0lHWjFibU4wYVc5dUtHaGhibVJzWlhJc0lHMWhkR05vVUdGMGRHVnliaWtnZTF4dVhHNWNkRngwWEhRdkx5QkhjbUZpSUhKbFoyVjRJR0Z1WkNCd1lYSmhiU0J3WVhKemFXNW5JR3h2WjJsaklHWnliMjBnUW1GamEySnZibVVnWTI5eVpWeHVYSFJjZEZ4MGRtRnlJR1Y0ZEhKaFkzUlFZWEpoYlhNZ1BTQkNZV05yWW05dVpTNVNiM1YwWlhJdWNISnZkRzkwZVhCbExsOWxlSFJ5WVdOMFVHRnlZVzFsZEdWeWN5eGNibHgwWEhSY2RGeDBZMkZzWTNWc1lYUmxVbVZuWlhnZ1BTQkNZV05yWW05dVpTNVNiM1YwWlhJdWNISnZkRzkwZVhCbExsOXliM1YwWlZSdlVtVm5SWGh3TzF4dVhHNWNkRngwWEhRdkx5QlVjbWx0SUhSeVlXbHNhVzVuWEc1Y2RGeDBYSFJ0WVhSamFGQmhkSFJsY200Z1BTQnRZWFJqYUZCaGRIUmxjbTR1Y21Wd2JHRmpaU2d2WEZ3dktpUXZaeXdnSnljcE8xeHVYSFJjZEZ4MEx5OGdZVzVrSUdWeUlITnZjblFnYjJZdUxpQnNaV0ZrYVc1bkxpNGdjMnhoYzJobGMxeHVYSFJjZEZ4MGJXRjBZMmhRWVhSMFpYSnVJRDBnYldGMFkyaFFZWFIwWlhKdUxuSmxjR3hoWTJVb0wxNG9XeU4rSlYwcFhGd3ZLaTluTENBbkpERW5LVHRjYmx4MFhIUmNkQzh2SUZSUFJFODZJRzl3ZEdsdGFYcGhkR2x2YmkwZ2RHaHBjeUJ5WldGc2JIa2diMjVzZVNCb1lYTWdkRzhnWW1VZ1pHOXVaU0J2Ym1ObExDQnZiaUJ5WVdselpTZ3BMQ0IzWlNCemFHOTFiR1FnWkc4Z2RHaGhkRnh1WEc1Y2JseDBYSFJjZEM4dklFTnZiV1VnZFhBZ2QybDBhQ0J5WldkbGVDQm1iM0lnZEdocGN5QnRZWFJqYUZCaGRIUmxjbTVjYmx4MFhIUmNkSFpoY2lCeVpXZGxlQ0E5SUdOaGJHTjFiR0YwWlZKbFoyVjRLRzFoZEdOb1VHRjBkR1Z5YmlrN1hHNWNibHgwWEhSY2RDOHZJRWxtSUhSb2FYTWdiV0YwWTJoUVlYUmxjbTRnYVhNZ2RHaHBjeUJwY3lCdWIzUWdZU0J0WVhSamFDQm1iM0lnZEdobElHVjJaVzUwTEZ4dVhIUmNkRngwTHk4Z1lHTnZiblJwYm5WbFlDQnBkQ0JoYkc5dVp5QjBieUJwZENCallXNGdkSEo1SUhSb1pTQnVaWGgwSUcxaGRHTm9VR0YwZEdWeWJseHVYSFJjZEZ4MGFXWWdLQ0ZsVW05MWRHVXViV0YwWTJnb2NtVm5aWGdwS1NCeVpYUjFjbTQ3WEc1Y2JseDBYSFJjZEM4dklGQmhjbk5sSUhCaGNtRnRaWFJsY25NZ1ptOXlJSFZ6WlNCaGN5QmhjbWR6SUhSdklIUm9aU0JvWVc1a2JHVnlYRzVjZEZ4MFhIUXZMeUFvYjNJZ1lXNGdaVzF3ZEhrZ2JHbHpkQ0JwWmlCdWIyNWxJR1Y0YVhOMEtWeHVYSFJjZEZ4MGRtRnlJSEJoY21GdGN5QTlJR1Y0ZEhKaFkzUlFZWEpoYlhNb2NtVm5aWGdzSUdWU2IzVjBaU2s3WEc1Y2JseDBYSFJjZEM4dklFaGhibVJzWlNCemRISnBibWNnY21Wa2FYSmxZM1J6SUhSdklHWjFibU4wYVc5dUlHNWhiV1Z6WEc1Y2RGeDBYSFJwWmlBb0lWOHVhWE5HZFc1amRHbHZiaWhvWVc1a2JHVnlLU2tnZTF4dVhIUmNkRngwWEhSb1lXNWtiR1Z5SUQwZ2MyVnNabHRvWVc1a2JHVnlYVHRjYmx4dVhIUmNkRngwWEhScFppQW9JV2hoYm1Sc1pYSXBJSHRjYmx4MFhIUmNkRngwWEhSMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBOaGJtNXZkQ0IwY21sbloyVnlJSE4xWW5OamNtbHdkR2x2YmlCaVpXTmhkWE5sSUc5bUlIVnVhMjV2ZDI0Z2FHRnVaR3hsY2pvZ0p5QXJJR2hoYm1Sc1pYSXBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFSnBibVFnWTI5dWRHVjRkQ0JoYm1RZ1lYSm5kVzFsYm5SeklIUnZJSE4xWW5OamNtbHdkR2x2YmlCb1lXNWtiR1Z5WEc1Y2RGeDBYSFJvWVc1a2JHVnlMbUZ3Y0d4NUtITmxiR1lzSUY4dWRXNXBiMjRvWVhKbmN5d2djR0Z5WVcxektTazdYRzVjYmx4MFhIUjlLVHRjYmx4MGZTazdYRzU5TzF4dUlpd2lMeW9xWEc0Z0tpQk5iMlIxYkdVZ1pHVndaVzVrWlc1amFXVnpYRzRnS2k5Y2JseHVkbUZ5SUdSbGJHVjBaVUZzYkZKbFoybHZibk1nUFNCeVpYRjFhWEpsS0NjdUwyUmxiR1YwWlVGc2JGSmxaMmx2Ym5NbktUdGNibHh1WEc1Y2JseHVMeW9xWEc0Z0tpQkdVa0ZOUlZkUFVrc3VRMjl0Y0c5dVpXNTBMbkJ5YjNSdmRIbHdaUzVqYkc5elpWeHVJQ3BjYmlBcUlGTmhabVZzZVNCNllYQWdaWFpsY25rZ2RISmhZMlVnWVdKdmRYUWdkR2hwY3lCamIyMXdiMjVsYm5RZ1puSnZiU0J0WlcxdmNua3VYRzRnS2x4dUlDb3ZYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWTJ4dmMyVWdLQ2tnZTF4dVhHNWNkRVpTUVUxRlYwOVNTeTVrWldKMVp5Z25RMnh2YzJWa0lDY2dLeUIwYUdsekxtbGtJQ3NnSnlCamIyMXdiMjVsYm5RdUp5azdYRzVjZEhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmx4dVhIUXZMeUJEWVc1alpXd2dZM1Z5Y21WdWRDQnlaVzVrWlhJZ1lXNWtJR05zYjNObElHcHZZbk1zSUdsbUlIUm9aWGtuY21VZ2NuVnVibWx1WjF4dVhIUnBaaUFvZEdocGN5NWZjbVZ1WkdWeWFXNW5LU0I3WEc1Y2RGeDBjMlZzWmk1ZmNtVnVaR1Z5YVc1blEyRnVZMlZzWldRZ1BTQjBjblZsTzF4dVhIUmNkSFJvYVhNdVkyRnVZMlZzVW1WdVpHVnlLQ2s3WEc1Y2RGeDBjMlZzWmk1ZmNtVnVaR1Z5YVc1bklEMGdabUZzYzJVN1hHNWNkSDFjYmx4MGFXWWdLSFJvYVhNdVgyTnNiM05wYm1jcElIdGNibHgwWEhSMGFHbHpMbU5oYm1ObGJFTnNiM05sS0NrN1hHNWNkRngwYzJWc1ppNWZZMnh2YzJsdVp5QTlJR1poYkhObE8xeHVYSFI5WEc1Y2JseDBMeThnVEc5amF5QmhZMk5sYzNNZ2RHOGdZMnh2YzJVb0tWeHVYSFIwYUdsekxsOWpiRzl6YVc1bklEMGdkSEoxWlR0Y2JseHVYSFIwYUdsekxtSmxabTl5WlVOc2IzTmxLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseHVYSFJjZEM4dklENGdUazlVUlRvZ1lIUm9hWE11WDJOc2IzTnBibWM5Wm1Gc2MyVmdJR05oYmlCaGJtUWdjSEp2WW1GaWJIa2djMmh2ZFd4a0lHSmxJSEpsYlc5MlpXUXNYRzVjZEZ4MEx5OGdQaUJ6YVc1alpTQnRkWFJsZUNCcGN5QjFibTVsWTJWemMyRnllU0J1YjNjZ2RHaGhkQ0IwYUdVZ1kyOXRjRzl1Wlc1MElHbHpJSFZ3SUdadmNpQm5ZWEppWVdkbElHTnZiR3hsWTNScGIyNWNibHgwWEhRdkx5QStJRmRoYVhScGJtY2dkRzhnWkc4Z2RHaHBjeUIxYm5ScGJDQnBkQ0JqWVc0Z1ltVWdkR1Z6ZEdWa0lHWjFjblJvWlhKY2JseHVYSFJjZEM4dklGVnViRzlqYXlCamJHOXpaU2dwWEc1Y2RGeDBjMlZzWmk1ZlkyeHZjMmx1WnlBOUlHWmhiSE5sTzF4dVhHNWNkRngwTHk4Z1UzUnZjQ0JzYVhOMFpXNXBibWNnZEc4Z1lXeHNJR2RzYjJKaGJDQjBjbWxuWjJWeWN5QW9KWHdqS1Z4dVhHNWNkRngwTHk4Z1EyeHZjMlVnWVd4c0lHTm9hV3hrSUdOdmJYQnZibVZ1ZEhOY2JseDBYSFJrWld4bGRHVkJiR3hTWldkcGIyNXpMbU5oYkd3b2MyVnNaaWs3WEc1Y2JseDBYSFF2THlCRFlXeHNJRzVoZEdsMlpTQmdRbUZqYTJKdmJtVXVWbWxsZHk1d2NtOTBiM1I1Y0dVdWNtVnRiM1psS0NsZ1hHNWNkRngwTHk4Z2RHOGdkVzVrWld4bFoyRjBaU0JsZG1WdWRITXNJR1YwWXk1Y2JseDBYSFJ6Wld4bUxuSmxiVzkyWlNncE8xeHVYRzVjZEgwcE8xeHVmVHRjYmlJc0lpOHFLbHh1SUNvZ1EyOXVkbVZ5ZENCMFpXMXdiR0YwWlNCSVZFMU1JR0Z1WkNCa1lYUmhJR2x1ZEc4Z1lTQmpiMjF3YVd4bFpDQWtkR1Z0Y0d4aGRHVmNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCamIyMXdhV3hsVkdWdGNHeGhkR1VnS0NrZ2UxeHVYRzVjZEM4dklFTnlaV0YwWlNCMFpXMXdiR0YwWlNCa1lYUmhJR052Ym5SbGVIUWdZbmtnY0hKdmRtbGthVzVuSUdGalkyVnpjeUIwYnlCMGFHVWdaMnh2WW1Gc0lFUmhkR0VnYjJKcVpXTjBMRnh1WEhRdkx5QkJiSE52SUdadmJHUWdhVzRnZEdobElHMXZaR1ZzSUdGemMyOWphV0YwWldRZ2QybDBhQ0IwYUdseklHTnZiWEJ2Ym1WdWRDd2dhV1lnZEdobGNtVWdhWE1nYjI1bFhHNWNkSFpoY2lCMFpXMXdiR0YwWlVOdmJuUmxlSFFnUFNCZkxtVjRkR1Z1WkNoN1hHNWNibHgwWEhRdkx5QkJiR3h2ZDNNZ2VXOTFJSFJ2SUdkbGRDQmhJR2h2YkdRZ2IyWWdaR0YwWVN4Y2JseDBYSFF2THlCaWRYUWdkWE5sSUdFZ1pHVm1ZWFZzZENCMllXeDFaU0JwWmlCcGRDQmtiMlZ6YmlkMElHVjRhWE4wWEc1Y2RGeDBaMlYwT2lCbWRXNWpkR2x2YmlBb2EyVjVMQ0JrWldaaGRXeDBWbUZzS1NCN1hHNWNkRngwWEhSMllYSWdkbUZzSUQwZ2RHVnRjR3hoZEdWRGIyNTBaWGgwVzJ0bGVWMDdYRzVjZEZ4MFhIUnBaaUFvZEhsd1pXOW1JSFpoYkNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JseDBYSFJjZEZ4MGRtRnNJRDBnWkdWbVlYVnNkRlpoYkR0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEhKbGRIVnliaUIyWVd3N1hHNWNkRngwZlZ4dVhIUjlMRnh1WEc1Y2RDOHZJRUZzYkNCR1VrRk5SVmRQVWtzdVpHRjBZU0JwY3lCaGRtRnBiR0ZpYkdVZ2FXNGdaWFpsY25rZ2RHVnRjR3hoZEdWY2JseDBSbEpCVFVWWFQxSkxMbVJoZEdFcE8xeHVYRzVjZEM4dklFbG1JR0VnYlc5a1pXd2dhWE1nY0hKdmRtbGtaV1FnWm05eUlIUm9hWE1nWTI5dGNHOXVaVzUwTENCdFlXdGxJR2wwSUdGMllXbHNZV0pzWlNCcGJpQjBhR2x6SUhSbGJYQnNZWFJsWEc1Y2RHbG1JQ2gwYUdsekxtMXZaR1ZzS1NCN1hHNWNkRngwWHk1bGVIUmxibVFvZEdWdGNHeGhkR1ZEYjI1MFpYaDBMQ0IwYUdsekxtMXZaR1ZzTG1GMGRISnBZblYwWlhNcE8xeHVYSFI5WEc1Y2JseDBMeThnVkdWdGNHeGhkR1VnZEdobElFaFVUVXdnZDJsMGFDQjBhR1VnWkdGMFlWeHVYSFIyWVhJZ2FIUnRiRHRjYmx4MGRISjVJSHRjYmx4MFhIUXZMeUJCWTJObGNIUWdjSEpsWTI5dGNHbHNaV1FnZEdWdGNHeGhkR1Z6WEc1Y2RGeDBhV1lnS0Y4dWFYTkdkVzVqZEdsdmJpaDBhR2x6TG5SbGJYQnNZWFJsS1NrZ2UxeHVYSFJjZEZ4MGFIUnRiQ0E5SUhSb2FYTXVkR1Z0Y0d4aGRHVW9kR1Z0Y0d4aGRHVkRiMjUwWlhoMEtUdGNibHgwWEhSOVhHNWNkRngwTHk4Z1QzSWdjbUYzSUhOMGNtbHVaM05jYmx4MFhIUmxiSE5sSUdoMGJXd2dQU0JmTG5SbGJYQnNZWFJsS0hSb2FYTXVkR1Z0Y0d4aGRHVXNJSFJsYlhCc1lYUmxRMjl1ZEdWNGRDazdYRzVjZEgxY2JseDBZMkYwWTJnZ0tHVXBJSHRjYmx4MFhIUjJZWElnYzNSeUlEMGdaU3hjYmx4MFhIUmNkSE4wWVdOcklEMGdKeWM3WEc1Y2JseDBYSFJwWmlBb1pTQnBibk4wWVc1alpXOW1JRVZ5Y205eUtTQjdYRzVjZEZ4MFhIUnpkSElnUFNBZ1pTNTBiMU4wY21sdVp5Z3BPMXh1WEhSY2RGeDBjM1JoWTJzZ1BTQmxMbk4wWVdOck8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFNVBWRVU2SUZSb2FYTWdaWEp5YjNJZ2FYTWdibThnYkc5dVoyVnlJR0VnZG1Gc2FXUWdaWEp5YjNJdVhHNWNkRngwTHk4Z1JsSkJUVVZYVDFKTExtVnljbTl5S0hSb2FYTXVhV1FnS3lBbklEbzZJRU5oYm01dmRDQnlaVzVrWlhJb0tTQjBaVzF3YkdGMFpTQW9jSEp2WW1GaWJIa2diV2x6YzJsdVp5QmtZWFJoS1M1Y1hHNWNYRzVIYjNRZ2RHaHBjeUJsY25KdmNpQTZPbHhjYmljcmMzUnlMQ2RjWEc0bktUdGNibHgwWEhScFppQW9hSFJ0YkNrZ2UwWlNRVTFGVjA5U1N5NTJaWEppYjNObEtDZFVaVzF3YkdGMFpTQTZPaUFuSUNzZ2FIUnRiQ2s3ZlZ4dVhIUmNkRVpTUVUxRlYwOVNTeTUyWlhKaWIzTmxLQ2RHZFd4c0lGUmxiWEJzWVhSbElFVnljbTl5T2ljZ0t5QW5YRnh1Snl4emRHRmpheWs3WEc1Y2RGeDBSbEpCVFVWWFQxSkxMblpsY21KdmMyVW9KMXhjYmx4Y2JrMXZjbVVnYVc1bWIzSnRZWFJwYjI0Nkp5d2dKMXhjYmx4Y2JsUmxiWEJzWVhSbElHTnZiblJsZUhRZ09qb25MSFJsYlhCc1lYUmxRMjl1ZEdWNGRDd2dKMXhjYmx4Y2JuUm9hWE11Ylc5a1pXdzZPaWNzSUhSb2FYTXViVzlrWld3cE8xeHVYSFJjZEdoMGJXd2dQU0JmTG1selUzUnlhVzVuS0hSb2FYTXVkR1Z0Y0d4aGRHVXBJRDhnZEdocGN5NTBaVzF3YkdGMFpTQTZJSE4wY2p0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCb2RHMXNPMXh1ZlR0Y2JseHVYRzRpTENJdktpcGNiaUFxSUdCamJHRnpjMkFnWkdGMFlTQmlhVzVrYVc1blhHNGdLaUJBZEhsd1pTQjdUMkpxWldOMGZWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JseDBjbVZuWlhod09pQXZZbWx1WkZ4Y0xXTnNZWE56WEZ3dEtGdGVMVjByS1M4c1hHNWNkR1p1T2lCbWRXNWpkR2x2YmlBb0pHVnNMQ0J0YjJSbGJDd2diV0YwWTJobGN5a2dlMXh1WEhSY2RDOHZJRkpsWjJWNGNDQnRZWFJqYUdWeklHWnZjaUIzYVd4a1kyRnlaQ0J3WVhKaGJYTWdhVzRnWVhSMGNtbGlkWFJsSUcxaGRHTm9JR1Y0Y0hKbGMzTnBiMjVjYmx4MFhIUjJZWElnWTJ4aGMzTk9ZVzFsSUQwZ2JXRjBZMmhsYzFzeFhUdGNibHh1WEhSY2RIWmhjaUJ5WVhjZ1BTQWtZbTkxYm1SRmJDNWhkSFJ5S0NkaWFXNWtMV05zWVhOekxTY2dLeUJqYkdGemMwNWhiV1VwTzF4dVhIUmNkSFpoY2lCamJHVmhiaUE5SUhKaGR5NXlaWEJzWVdObEtDOWVRQzhzSUNjbktUdGNibHgwWEhScFppQW9JRzF2WkdWc0xtZGxkQ2hqYkdWaGJpa2dLU0I3WEc1Y2RGeDBYSFFrWW05MWJtUkZiQzVoWkdSRGJHRnpjeWhqYkdGemMwNWhiV1VwTzF4dVhIUmNkSDFjYmx4MFhIUmxiSE5sSUh0Y2JseDBYSFJjZENSaWIzVnVaRVZzTG5KbGJXOTJaVU5zWVhOektHTnNZWE56VG1GdFpTazdYRzVjZEZ4MGZWeHVYSFI5WEc1OU8xeHVYRzRpTENJdktpcGNiaUFxSUdCMFpYaDBZQ0JrWVhSaElHSnBibVJwYm1kY2JpQXFJRUIwZVhCbElIdFBZbXBsWTNSOVhHNGdLaTljYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNWNkSEpsWjJWNGNEb2dMMkpwYm1RdGRHVjRkQzhzWEc1Y2RHWnVPaUJtZFc1amRHbHZiaUFvSkdWc0xDQnRiMlJsYkNrZ2UxeHVYSFJjZEhaaGNpQnlZWGNnUFNBa1ltOTFibVJGYkM1aGRIUnlLQ2RpYVc1a0xYUmxlSFFuS1R0Y2JseDBYSFIyWVhJZ1kyeGxZVzRnUFNCeVlYY3VjbVZ3YkdGalpTZ3ZYa0F2TENBbkp5azdYRzVjZEZ4MEpHSnZkVzVrUld3dWRHVjRkQ2dnYlc5a1pXd3VaMlYwS0dOc1pXRnVLU0FwTzF4dVhIUjlYRzU5TzF4dUlpd2lMeW9xWEc0Z0tpQkpaaUJoYm5rZ2NtVm5hVzl1Y3lCbGVHbHpkQ0JwYmlCMGFHbHpJR052YlhCdmJtVnVkQ3hjYmlBcUlHVnRjSFI1SUhSb1pXMHNJR0Z1WkNCMGFHVnVJR1JsYkdWMFpTQjBhR1Z0WEc0Z0tpOWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJrWld4bGRHVkJiR3hTWldkcGIyNXpJQ2dwSUh0Y2JseDBYeTVsWVdOb0tIUm9hWE11Y21WbmFXOXVjeXdnWm5WdVkzUnBiMjRnS0hKbFoybHZiaXdnYTJWNUtTQjdYRzVjZEZ4MGNtVm5hVzl1TG1WdGNIUjVLQ2s3WEc1Y2RGeDBaR1ZzWlhSbElIUm9hWE11Y21WbmFXOXVjMXRyWlhsZE8xeHVYSFI5TENCMGFHbHpLVHRjYm4wN1hHNGlMQ0l2S2lwY2JpQXFJRTF2WkhWc1pTQmtaWEJsYm1SbGJtTnBaWE5jYmlBcUwxeHVYRzUyWVhJZ2JHbG1aV041WTJ4bFNHOXZhM01nSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlzYVdabFkzbGpiR1ZJYjI5cmN5Y3BMRnh1WEhSc2FXWmxZM2xqYkdWRmRtVnVkSE1nSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMnhwWm1WamVXTnNaVVYyWlc1MGN5Y3BMRnh1WEhSaWFXNWtSWFpsYm5SeklDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMkpwYm1SRmRtVnVkSE1uS1N4Y2JseDBZMnh2YzJWRGIyMXdiMjVsYm5RZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5amJHOXpaU2NwTEZ4dVhIUnlaVzVrWlhJZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDNKbGJtUmxjaWNwTEZ4dVhIUnlaVzVrWlhKRGIyeHNaV04wYVc5dUlDQWdQU0J5WlhGMWFYSmxLQ2N1TDNKbGJtUmxja052Ykd4bFkzUnBiMjRuS1N4Y2JseDBkbUZzYVdSaGRHVkVaV1pwYm1sMGFXOXVJRDBnY21WeGRXbHlaU2duTGk5MllXeHBaR0YwWlVSbFptbHVhWFJwYjI0bktUdGNibHh1WEc0dktpcGNiaUFxSUVaU1FVMUZWMDlTU3k1RGIyMXdiMjVsYm5SY2JpQXFYRzRnS2lCRGIyMXdiMjVsYm5RZ2FYTWdZVzRnWlhoMFpXNWtaV1FnWUVKaFkydGliMjVsTGxacFpYZGdMaUJKZENCaFpHUWdabVZoZEhWeVpYTWdjM1ZqYUNCaGN5QmhkWFJ2YldGMGFXTWdaWFpsYm5RZ1ltbHVaR2x1Wnl4Y2JpQXFJSEpsYm1SbGNtbHVaeXdnYkdsbVpXTjVZMnhsSUdodmIydHpJR0Z1WkNCbGRtVnVkSE1zSUdGdVpDQnRiM0psTGx4dUlDcGNiaUFxSUVCamIyNXpkSEoxWTNSdmNseHVJQ292WEc1MllYSWdRMjl0Y0c5dVpXNTBJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JDWVdOclltOXVaUzVXYVdWM0xtVjRkR1Z1WkNncE8xeHVYRzVjYmw4dVpYaDBaVzVrS0VOdmJYQnZibVZ1ZEM1d2NtOTBiM1I1Y0dVc0lIdGNibHh1WEhRdkx5Qk1hV1psWTNsamJHVWdTRzl2YTNOY2JseDBZbVZtYjNKbFVtVnVaR1Z5T2lCbWRXNWpkR2x2Ymloallpa2dlMXh1WEhSY2RHeHBabVZqZVdOc1pVaHZiMnR6TG1KbFptOXlaVkpsYm1SbGNpNWpZV3hzS0hSb2FYTXNJR05pS1R0Y2JseDBmU3hjYmx4MFltVm1iM0psUTJ4dmMyVTZJR1oxYm1OMGFXOXVLR05pS1NCN1hHNWNkRngwYkdsbVpXTjVZMnhsU0c5dmEzTXVZbVZtYjNKbFEyeHZjMlV1WTJGc2JDaDBhR2x6TENCallpazdYRzVjZEgwc1hHNWNkR0ZtZEdWeVVtVnVaR1Z5T2lCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSc2FXWmxZM2xqYkdWSWIyOXJjeTVoWm5SbGNsSmxibVJsY2k1allXeHNLSFJvYVhNcE8xeHVYSFI5TEZ4dVhIUmpZVzVqWld4U1pXNWtaWEk2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEd4cFptVmplV05zWlVodmIydHpMbU5oYm1ObGJGSmxibVJsY2k1allXeHNLSFJvYVhNcE8xeHVYSFI5TEZ4dVhIUmpZVzVqWld4RGJHOXpaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwYkdsbVpXTjVZMnhsU0c5dmEzTXVZMkZ1WTJWc1EyeHZjMlV1WTJGc2JDaDBhR2x6S1R0Y2JseDBmU3hjYmx4dVhIUXZMeUJNYVdabFkzbGpiR1VnUlhabGJuUnpYRzVjZEdGbWRHVnlRMmhoYm1kbE9pQm1kVzVqZEdsdmJpaHRiMlJsYkN3Z2IzQjBhVzl1Y3lrZ2UxeHVYSFJjZEd4cFptVmplV05zWlVWMlpXNTBjeTVoWm5SbGNrTm9ZVzVuWlM1allXeHNLSFJvYVhNc0lHMXZaR1ZzTENCdmNIUnBiMjV6S1R0Y2JseDBmU3hjYmx4MFlXWjBaWEpCWkdRNklHWjFibU4wYVc5dUtHMXZaR1ZzTENCamIyeHNaV04wYVc5dUxDQnZjSFJwYjI1ektTQjdYRzVjZEZ4MGJHbG1aV041WTJ4bFJYWmxiblJ6TG1GbWRHVnlRV1JrTG1OaGJHd29kR2hwY3l3Z2JXOWtaV3dzSUdOdmJHeGxZM1JwYjI0c0lHOXdkR2x2Ym5NcE8xeHVYSFI5TEZ4dVhIUmhablJsY2xKbGJXOTJaVG9nWm5WdVkzUnBiMjRvYlc5a1pXd3NJR052Ykd4bFkzUnBiMjRzSUc5d2RHbHZibk1wSUh0Y2JseDBYSFJzYVdabFkzbGpiR1ZGZG1WdWRITXVZV1owWlhKU1pXMXZkbVV1WTJGc2JDaDBhR2x6TENCdGIyUmxiQ3dnWTI5c2JHVmpkR2x2Yml3Z2IzQjBhVzl1Y3lrN1hHNWNkSDBzWEc1Y2RHRm1kR1Z5VW1WelpYUTZJR1oxYm1OMGFXOXVLR052Ykd4bFkzUnBiMjRzSUc5d2RHbHZibk1wSUh0Y2JseDBYSFJzYVdabFkzbGpiR1ZGZG1WdWRITXVZV1owWlhKU1pYTmxkQzVqWVd4c0tIUm9hWE1zSUdOdmJHeGxZM1JwYjI0c0lHOXdkR2x2Ym5NcE8xeHVYSFI5TEZ4dVhHNWNkQzh2SUZCeWIzUnZkSGx3WlNCdFpYUm9iMlJ6TGx4dVhIUmpiRzl6WlRvZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFkyeHZjMlZEYjIxd2IyNWxiblF1WTJGc2JDaDBhR2x6S1R0Y2JseDBmU3hjYmx4MGNtVnVaR1Z5T2lCbWRXNWpkR2x2YmloaGRFbHVaR1Y0S1NCN1hHNWNkRngwY21WdVpHVnlMbU5oYkd3b2RHaHBjeXdnWVhSSmJtUmxlQ2s3WEc1Y2RIMHNYRzVjYmx4MGNtVnVaR1Z5UTI5c2JHVmpkR2x2YmpvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSY2RIWmhjaUJoY21keklEMGdRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpLVHRjYmx4MFhIUnlaVzVrWlhKRGIyeHNaV04wYVc5dUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNNcE8xeHVYSFI5TEZ4dWZTazdYRzVjYmx4dVhHNWNia052YlhCdmJtVnVkQzV3Y205MGIzUjVjR1V1YVc1cGRHbGhiR2w2WlNBOUlHWjFibU4wYVc5dUtIQnliM0JsY25ScFpYTXBJSHRjYmx4dVhIUjJZWElnYzJWc1ppQTlJSFJvYVhNN1hHNWNibHgwTHk4Z1MyVmxjQ0IwY21GamF5QnZaaUJoSUdOdmRXNTBaWElnWm05eUlIVnpaU0JwYmlCblpXNWxjbUYwYVc1blhHNWNkQzh2SUdsa2N5Qm1iM0lnWVc1dmJubHRiM1Z6SUdOdmJYQnZibVZ1ZEhNdVhHNWNkSFJvYVhNdVlXNXZibmx0YjNWelVtVm5hVzl1UTI5MWJuUmxjaUE5SURBN1hHNWNibHgwTHk4Z1JHbHpZV0pzWlNCdmNpQnBjM04xWlNCM1lYSnVhVzVuY3lCaFltOTFkQ0JqWlhKMFlXbHVJSEJ5YjNCbGNuUnBaWE5jYmx4MEx5OGdZVzVrSUcxbGRHaHZaSE1nZEc4Z1lYWnZhV1FnWTI5dVpuVnphVzl1WEc1Y2RIQnliM0JsY25ScFpYTWdQU0IyWVd4cFpHRjBaVVJsWm1sdWFYUnBiMjRvY0hKdmNHVnlkR2xsY3lrN1hHNWNibHgwTHk4Z1JYaDBaVzVrSUdsdWMzUmhibU5sSUhjdklITndaV05wWm1sbFpDQndjbTl3WlhKMGFXVnpJR0Z1WkNCdFpYUm9iMlJ6WEc1Y2RGOHVaWGgwWlc1a0tIUm9hWE1zSUhCeWIzQmxjblJwWlhNcE8xeHVYRzVjZEM4dklGTjBZWEowSUhkcGRHZ2daVzF3ZEhrZ2NtVm5hVzl1Y3lCdlltcGxZM1JjYmx4MGRHaHBjeTV5WldkcGIyNXpJRDBnZTMwN1hHNWNibHgwTHk4Z1JXNWpiM1Z5WVdkbElHTm9hV3hrSUcxbGRHaHZaSE1nZEc4Z2RYTmxJSFJvWlNCamIyMXdiMjVsYm5RZ1kyOXVkR1Y0ZEZ4dVhIUmZMbUpwYm1SQmJHd29kR2hwY3lrN1hHNTlPMXh1SWl3aUx5OGdSbWx5WldRZ2QyaGxiaUIwYUdVZ1ltOTFibVFnYlc5a1pXd2dhWE1nZFhCa1lYUmxaQ0FvWUhSb2FYTXViVzlrWld4Z0tWeHVaWGh3YjNKMGN5NWhablJsY2tOb1lXNW5aU0E5SUdaMWJtTjBhVzl1SUNodGIyUmxiQ3dnYjNCMGFXOXVjeWtnZTMwN1hHNWNiaTh2SUVacGNtVmtJSGRvWlc0Z1lTQnRiMlJsYkNCcGN5QmhaR1JsWkNCMGJ5QjBhR1VnWW05MWJtUWdZMjlzYkdWamRHbHZiaUFvWUhSb2FYTXVZMjlzYkdWamRHbHZibUFwWEc1bGVIQnZjblJ6TG1GbWRHVnlRV1JrSUQwZ1puVnVZM1JwYjI0Z0tHMXZaR1ZzTENCamIyeHNaV04wYVc5dUxDQnZjSFJwYjI1ektTQjdmVHRjYmx4dUx5OGdSbWx5WldRZ2QyaGxiaUJoSUcxdlpHVnNJR2x6SUhKbGJXOTJaV1FnWm5KdmJTQjBhR1VnWW05MWJtUWdZMjlzYkdWamRHbHZiaUFvWUhSb2FYTXVZMjlzYkdWamRHbHZibUFwWEc1bGVIQnZjblJ6TG1GbWRHVnlVbVZ0YjNabElEMGdablZ1WTNScGIyNGdLRzF2WkdWc0xDQmpiMnhzWldOMGFXOXVMQ0J2Y0hScGIyNXpLU0I3ZlR0Y2JseHVMeThnUm1seVpXUWdkMmhsYmlCMGFHVWdZbTkxYm1RZ1kyOXNiR1ZqZEdsdmJpQnBjeUIzYVhCbFpDQW9ZSFJvYVhNdVkyOXNiR1ZqZEdsdmJtQXBYRzVsZUhCdmNuUnpMbUZtZEdWeVVtVnpaWFFnUFNCbWRXNWpkR2x2YmlBb1kyOXNiR1ZqZEdsdmJpd2diM0IwYVc5dWN5a2dlMzA3WEc0aUxDSXZMeUJHYVhKbFpDQmhkWFJ2YldGMGFXTmhiR3g1SUhkb1pXNGdkR2hsSUhacFpYY2dhWE1nYVc1cGRHbGhiR3g1SUdOeVpXRjBaV1JjYmk4dklHOXViSGtnWm1seVpXUWdZV1owWlhKM1lYSmtjeUJwWmlCMGFHbHpMbkpsYm1SbGNpZ3BJR2x6SUdWNGNHeHBZMmwwYkhrZ1kyRnNiR1ZrWEc0dkx5QkRZV3hzWW1GamF5QnRkWE4wSUdKbElHWnBjbVZrSVNGY2JtVjRjRzl5ZEhNdVltVm1iM0psVW1WdVpHVnlJRDBnWm5WdVkzUnBiMjRnS0dOaUtTQjdZMklvS1R0OU8xeHVYRzR2THlCR2FYSmxaQ0JoZFhSdmJXRjBhV05oYkd4NUlIZG9aVzRnZEdobElIWnBaWGNnYVhNZ2FXNXBkR2xoYkd4NUlHTnlaV0YwWldSY2JpOHZJRzl1YkhrZ1ptbHlaV1FnWVdaMFpYSjNZWEprY3lCcFppQjBhR2x6TG5KbGJtUmxjaWdwSUdseklHVjRjR3hwWTJsMGJIa2dZMkZzYkdWa1hHNWxlSEJ2Y25SekxtRm1kR1Z5VW1WdVpHVnlJRDBnWm5WdVkzUnBiMjRnS0NrZ2UzMDdYRzVjYmk4dklFWnBjbVZrSUdGMWRHOXRZWFJwWTJGc2JIa2dkMmhsYmlCMGFHVWdkbWxsZHlCcGN5QmpiRzl6WldSY2JtVjRjRzl5ZEhNdVltVm1iM0psUTJ4dmMyVWdQU0JtZFc1amRHbHZiaUFvWTJJcElIdGpZaWdwTzMwN1hHNWNiaTh2SUVacGNtVmtJR0psWm05eVpTQnlaWEpsYm1SbGNtbHVaeUJ2Y2lCamJHOXphVzVuSUdFZ2RtbGxkeUIwYUdGMElHbHpJR0ZzY21WaFpIa2dkMkZwZEdsdVp5QnZiaUJoSUd4dlkydGNibVY0Y0c5eWRITXVZMkZ1WTJWc1VtVnVaR1Z5SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhSR1VrRk5SVmRQVWtzdWQyRnliaWduWTJGdVkyVnNVbVZ1WkdWeUtDa2djMmh2ZFd4a0lHSmxJR1JsWm1sdVpXUWdhV1lnWW1WbWIzSmxRMnh2YzJVb1kySXBJRzl5SUdKbFptOXlaVkpsYm1SbGNpaGpZaWtuSUN0Y2JseDBYSFJjZEZ4MFhIUmNkRngwWEhRZ0oyRnlaU0JpWldsdVp5QjFjMlZrSVNjcE8xeHVmVHRjYmx4dUx5OGdSbWx5WldRZ1ltVm1iM0psSUhKbGNtVnVaR1Z5YVc1bklHOXlJR05zYjNOcGJtY2dZU0IyYVdWM0lIUm9ZWFFnYVhNZ1lXeHlaV0ZrZVNCM1lXbDBhVzVuSUc5dUlHRWdiRzlqYTF4dVpYaHdiM0owY3k1allXNWpaV3hEYkc5elpTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBSbEpCVFVWWFQxSkxMbmRoY200b0oyTmhibU5sYkVOc2IzTmxLQ2tnYzJodmRXeGtJR0psSUdSbFptbHVaV1FnYVdZZ1ltVm1iM0psUTJ4dmMyVW9ZMklwSUc5eUlHSmxabTl5WlZKbGJtUmxjaWhqWWlrbklDdGNibHgwWEhSY2RGeDBYSFJjZEZ4MFhIUWdKMkZ5WlNCaVpXbHVaeUIxYzJWa0lTY3BPMXh1ZlR0Y2JpSXNJaThxS2x4dUlDb2dUVzlrZFd4bElHUmxjR1Z1WkdWdVkybGxjMXh1SUNvdlhHNWNiblpoY2lCRVQwMGdQU0J5WlhGMWFYSmxJQ2duTGk0dmRYUnBiSE12UkU5Tkp5a3NYRzVjZEZ4MGNtVnVaR1Z5UkdGMFlVSnBibVJwYm1keklEMGdjbVZ4ZFdseVpTZ25MaTl5Wlc1a1pYSkVZWFJoUW1sdVpHbHVaM01uS1N4Y2JseDBYSFJqYjIxd2FXeGxWR1Z0Y0d4aGRHVWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmJYQnBiR1ZVWlcxd2JHRjBaU2NwTEZ4dVhIUmNkSEpsYm1SbGNsSmxaMmx2Ym5NZ1BTQnlaWEYxYVhKbEtDY3VMM0psYm1SbGNsSmxaMmx2Ym5NbktTeGNibHgwWEhSaWFXNWtSWFpsYm5SeklEMGdjbVZ4ZFdseVpTQW9KeTR2WW1sdVpFVjJaVzUwY3ljcE8xeHVYRzVjYmx4dVhHNHZLaXBjYmlBcUlGSjFiaUJJVkUxTUlIUmxiWEJzWVhSbElIUm9jbTkxWjJnZ1pXNW5hVzVsSUdGdVpDQmhjSEJsYm1RZ2NtVnpkV3gwY3lCMGJ5QnZkWFJzWlhRdUlFRnNjMjhnY21WeVpXNWtaWElnY21WbmFXOXVjeTVjYmlBcUlFbG1JR0YwU1c1a1pYZ2dhWE1nYzNCbFkybG1hV1ZrTENCMGFHVWdZMjl0Y0c5dVpXNTBJR2x6SUhKbGJtUmxjbVZrSUdGMElIUm9aU0JuYVhabGJpQndiM05wZEdsdmJpQjNhWFJvYVc0Z2FYUnpYRzRnS2lCdmRYUnNaWFF1SUU5MGFHVnlkMmx6WlN3Z2RHaGxJR3hoYzNRZ2NHOXphWFJwYjI0Z2FYTWdkWE5sWkM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWVhSSmJtUmxlQ0JiVkdobElHbHVaR1Y0SUdsdUlIZG9hV05vSUhSdklISmxibVJsY2lCMGFHbHpJR1ZzWlcxbGJuUmRYRzRnS2k5Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQnlaVzVrWlhJb1lYUkpibVJsZUNrZ2UxeHVYRzVjZEVaU1FVMUZWMDlTU3k1a1pXSjFaeWgwYUdsekxtbGtJQ3NnSnlBNkxTMHRPaUJTWlc1a1pYSnBibWNnWTI5dGNHOXVaVzUwTGk0dUp5azdYRzVjYmx4MGRtRnlJSE5sYkdZZ1BTQjBhR2x6TzF4dVhHNWNkQzh2SUVOaGJtTmxiQ0JqZFhKeVpXNTBJSEpsYm1SbGNpQmhibVFnWTJ4dmMyVWdhbTlpY3l3Z2FXWWdkR2hsZVNkeVpTQnlkVzV1YVc1blhHNWNkR2xtSUNoMGFHbHpMbDl5Wlc1a1pYSnBibWNwSUh0Y2JseDBYSFJHVWtGTlJWZFBVa3N1WkdWaWRXY29kR2hwY3k1cFpDQXJJQ2NnT2pvZ2NtVnVaR1Z5S0NrZ1kyRnVZMlZzWldRdUp5azdYRzVjZEZ4MGRHaHBjeTVmY21WdVpHVnlhVzVuUTJGdVkyVnNaV1FnUFNCMGNuVmxPMXh1WEhSY2RIUm9hWE11WTJGdVkyVnNVbVZ1WkdWeUtDazdYRzVjZEZ4MGRHaHBjeTVmY21WdVpHVnlhVzVuSUQwZ1ptRnNjMlU3WEc1Y2RIMWNibHgwYVdZZ0tIUm9hWE11WDJOc2IzTnBibWNwSUh0Y2JseDBYSFJHVWtGTlJWZFBVa3N1WkdWaWRXY29kR2hwY3k1cFpDQXJJQ2NnT2pvZ1kyeHZjMlVvS1NCallXNWpaV3hsWkM0bktUdGNibHgwWEhSMGFHbHpMbU5oYm1ObGJFTnNiM05sS0NrN1hHNWNkRngwZEdocGN5NWZZMnh2YzJsdVp5QTlJR1poYkhObE8xeHVYSFI5WEc1Y2JseDBMeThnVEc5amF5QmhZMk5sYzNNZ2RHOGdjbVZ1WkdWeVhHNWNkSFJvYVhNdVgzSmxibVJsY21sdVp5QTlJSFJ5ZFdVN1hHNWNibHgwTHk4Z1ZISnBaMmRsY2lCaVpXWnZjbVZTWlc1a1pYSWdiV1YwYUc5a1hHNWNkSFJvYVhNdVltVm1iM0psVW1WdVpHVnlLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseHVYSFJjZEM4dklFbG1JSEpsYm1SbGNtbHVaeUIzWVhNZ1kyRnVZMlZzWldRc0lHSnlaV0ZySUc5MWRGeHVYSFJjZEM4dklHUnZJRzV2ZENCeVpXNWtaWElzSUdGdVpDQmtieUJ1YjNRZ1kyRnNiQ0JoWm5SbGNsSmxibVJsY2lncFhHNWNkRngwYVdZZ0tDQnpaV3htTGw5eVpXNWtaWEpwYm1kRFlXNWpaV3hsWkNBcElIdGNibHgwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCQ2FXNWtJSFJvWlNCbGRtVnVkSE1nYjI0Z2JXOWtaV3d2WTI5c2JHVmpkR2x2Ym5NZ1lXNWtJR2RzYjJKaGJDQjBjbWxuWjJWeVpXUWdaWFpsYm5SekxseHVYSFJjZEdKcGJtUkZkbVZ1ZEhNdVkyOXNiR1ZqZEdsdmJrVjJaVzUwY3k1allXeHNLSE5sYkdZcE8xeHVYSFJjZEdKcGJtUkZkbVZ1ZEhNdWJXOWtaV3hGZG1WdWRITXVZMkZzYkNoelpXeG1LVHRjYmx4MFhIUmlhVzVrUlhabGJuUnpMbWRzYjJKaGJGUnlhV2RuWlhKekxtTmhiR3dvYzJWc1ppazdYRzVjYmx4MFhIUXZMeUJWYm14dlkyc2djbVZ1WkdWeWFXNW5JRzExZEdWNFhHNWNkRngwYzJWc1ppNWZjbVZ1WkdWeWFXNW5JRDBnWm1Gc2MyVTdYRzVjYmx4MFhIUnBaaUFvSVhObGJHWXVKRzkxZEd4bGRDa2dlMXh1WEhSY2RGeDBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtITmxiR1l1YVdRZ0t5QW5JRG82SUZSeWVXbHVaeUIwYnlCeVpXNWtaWElvS1N3Z1luVjBJRzV2SUNSdmRYUnNaWFFnZDJGeklHUmxabWx1WldRaEp5azdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdTSGxrY21GMFpTQmpiMjF3YVd4bFpDQjBaVzF3YkdGMFpWeHVYSFJjZEM4dklDaGpiMjFpYVc1bGN5QjBhR1VnZEdWdGNHeGhkR1VnWm5WdVkzUnBiMjRnZDJsMGFDQmtZWFJoSUhSdklISmxkSFZ5YmlCSVZFMU1LVnh1WEhSY2RIWmhjaUJvZEcxc0lEMGdZMjl0Y0dsc1pWUmxiWEJzWVhSbExtTmhiR3dvYzJWc1ppazdYRzVjZEZ4MGFXWWdLQ0ZvZEcxc0tTQjdYRzVjZEZ4MFhIUjBhSEp2ZHlCdVpYY2dSWEp5YjNJb2RHaHBjeTVwWkNBcklDY2dPam9nVlc1aFlteGxJSFJ2SUhKbGJtUmxjaUJqYjIxd2IyNWxiblFnWW1WallYVnpaU0IwWlcxd2JHRjBaU0JqYjIxd2FXeGhkR2x2YmlCa2FXUWdibTkwSUhKbGRIVnliaUJoYm5rZ1NGUk5UQzRuS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCVGRISnBjQ0IwY21GcGJHbHVaeUJoYm1RZ2JHVmhaR2x1WnlCM2FHbDBaWE53WVdObElIUnZJR0YyYjJsa0lHWmhiSE5sYkhrZ1pHbGhaMjV2YzJsdVoxeHVYSFJjZEM4dklHMTFiSFJwY0d4bElHVnNaVzFsYm5SekxDQjNhR1Z1SUc5dWJIa2diMjVsSUdGamRIVmhiR3g1SUdWNGFYTjBjMXh1WEhSY2RDOHZJQ2gwYUdseklHMXBjMlJwWVdkdWIzTnBjeUIzY21Gd2N5QjBhR1VnZEdWdGNHeGhkR1VnYVc0Z1lXNGdaWGgwY21GdVpXOTFjeUE4WkdsMlBpbGNibHgwWEhSb2RHMXNJRDBnYUhSdGJDNXlaWEJzWVdObEtDOWVYRnh6S2k4c0lDY25LVHRjYmx4MFhIUm9kRzFzSUQwZ2FIUnRiQzV5WlhCc1lXTmxLQzljWEhNcUpDOHNJQ2NuS1R0Y2JseDBYSFJvZEcxc0lEMGdhSFJ0YkM1eVpYQnNZV05sS0M4b1hGeHlmRnhjYmlrcUx5d2dKeWNwTzF4dVhHNWNkRngwTHk4Z1UzUnlhWEFnU0ZSTlRDQmpiMjF0Wlc1MGN5d2dkR2hsYmlCemRISnBjQ0IzYUdsMFpYTndZV05sSUdGbllXbHVYRzVjZEZ4MEx5OGdLRlJQUkU4NklHOXdkR2x0YVhwbElIUm9hWE1wWEc1Y2RGeDBhSFJ0YkNBOUlHaDBiV3d1Y21Wd2JHRmpaU2d2S0R3aExTMHVLeTB0UGlrcUx5d2dKeWNwTzF4dVhIUmNkR2gwYld3Z1BTQm9kRzFzTG5KbGNHeGhZMlVvTDE1Y1hITXFMeXdnSnljcE8xeHVYSFJjZEdoMGJXd2dQU0JvZEcxc0xuSmxjR3hoWTJVb0wxeGNjeW9rTHl3Z0p5Y3BPMXh1WEhSY2RHaDBiV3dnUFNCb2RHMXNMbkpsY0d4aFkyVW9MeWhjWEhKOFhGeHVLU292TENBbkp5azdYRzVjYmx4MFhIUXZMeUJRWVhKelpTQmhJRVJQVFNCdWIyUmxJRzl5SUhObGNtbGxjeUJ2WmlCRVQwMGdibTlrWlhNZ1puSnZiU0IwYUdVZ2JtVjNiSGtnZEdWdGNHeGhkR1ZrSUVoVVRVeGNibHgwWEhSMllYSWdjR0Z5YzJWa1RtOWtaWE1nUFNBa0xuQmhjbk5sU0ZSTlRDaG9kRzFzS1R0Y2JseDBYSFIyWVhJZ1pXd2dQU0J3WVhKelpXUk9iMlJsYzFzd1hUdGNibHh1WEhSY2RDOHZJRWxtSUc1dklHNXZaR1Z6SUhkbGNtVWdjR0Z5YzJWa0xDQjBhSEp2ZHlCaGJpQmxjbkp2Y2x4dVhIUmNkR2xtSUNod1lYSnpaV1JPYjJSbGN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JseDBYSFJjZEhSb2NtOTNJRzVsZHlCRmNuSnZjaWh6Wld4bUxtbGtJQ3NnSnlBNk9pQnlaVzVrWlhJb0tTQnlZVzRnYVc1MGJ5QmhJSEJ5YjJKc1pXMGdjbVZ1WkdWeWFXNW5JSFJvWlNCMFpXMXdiR0YwWlNCM2FYUm9JRWhVVFV3Z1BUNGdYRnh1Snl0b2RHMXNLVHRjYmx4MFhIUjlYRzVjYmx4dVhHNWNkRngwTHk4Z1NXWWdkR2hsY21VZ2FYTWdibTkwSUc5dVpTQnphVzVuYkdVZ2QzSmhjSEJsY2lCbGJHVnRaVzUwTEZ4dVhIUmNkQzh2SUc5eUlHbG1JSFJvWlNCeVpXNWtaWEpsWkNCMFpXMXdiR0YwWlNCamIyNTBZV2x1Y3lCdmJteDVJR0VnYzJsdVoyeGxJSFJsZUhRZ2JtOWtaU3hjYmx4MFhIUmxiSE5sSUdsbUlDaHdZWEp6WldST2IyUmxjeTVzWlc1bmRHZ2dQaUF4SUh4OElIQmhjbk5sWkU1dlpHVnpXekJkTG01dlpHVlVlWEJsSUQwOVBTQXpLU0I3WEc1Y2JseDBYSFJjZEVaU1FVMUZWMDlTU3k1c2IyY29jMlZzWmk1cFpDQXJJQ2NnT2pvZ1YzSmhjSEJwYm1jZ2RHVnRjR3hoZEdVZ2FXNGdQR1JwZGk4K0xpNHVKeXdnY0dGeWMyVmtUbTlrWlhNcE8xeHVYSFJjZEZ4MFpXd2dQU0FrS0NjOFpHbDJMejRuS1M1aGNIQmxibVFvYUhSdGJDazdYRzVjZEZ4MFhIUmxiQ0E5SUdWc1d6QmRPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJQ2h2Y2lCcWRYTjBJR0VnYkc5dVpTQnlaV2RwYjI0cFhHNWNkRngwTHk4Z2QzSmhjQ0IwYUdVZ2FIUnRiQ0IxY0NCcGJpQmhJR052Ym5SaGFXNWxjaUE4WkdsMkx6NWNibHgwWEhRdkx5QmxiSE5sSUdsbUlDaGNibHgwWEhRdkx5QmNkQ1FvY0dGeWMyVmtUbTlrWlhOYk1GMHBMbWx6S0NkeVpXZHBiMjRuS1NCOGZGeHVYSFJjZEM4dklGeDBKQ2h3WVhKelpXUk9iMlJsYzFzd1hTa3VZWFIwY2lnblpHRjBZUzF5WldkcGIyNG5LU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDa2dlMXh1WEhSY2RDOHZJRngwTHk4Z2RYTmxaQ0IwYnlCM2NtRndJSFJvYVhNZ2MzUjFabVlnYVc0Z1lTQmthWFlnZEc5dkxDQmlkWFFnYm05MElHRnVlVzF2Y21WY2JseDBYSFF2THlCY2RDOHZJSE5wYm1ObElHbDBJRzFsYzNObGN5QjNMeUJJVkUxTUlIUm9hVzVuY3lCc2FXdGxJSFJoWW14bGMxeHVYSFJjZEM4dklIMWNibHh1WEc1Y2JseDBYSFF2THlCVFpYUWdRbUZqYTJKdmJtVWdaV3hsYldWdWRDQW9ZMkZqYUdVZ1lXNWtJSEpsWkdWc1pXZGhkR1VnUkU5TklHVjJaVzUwY3lsY2JseDBYSFF2THlBb1YybHNiQ0JoYkhOdklIVndaR0YwWlNCelpXeG1MaVJsYkNsY2JseDBYSFJ6Wld4bUxuTmxkRVZzWlcxbGJuUW9aV3dwTzF4dVhHNWNibHh1WEhSY2RDOHZJRVJsZEdWamRDQmhibVFnY21WdVpHVnlJR0ZzYkNCeVpXZHBiMjV6SUdGdVpDQjBhR1ZwY2lCa1pYTmpaVzVrWlc1MElHTnZiWEJ2Ym1WdWRITWdZVzVrSUhKbFoybHZibk5jYmx4MFhIUnlaVzVrWlhKU1pXZHBiMjV6TG1OaGJHd29jMlZzWmlrN1hHNWNibHgwWEhRdkx5Qkpibk5sY25RZ2RHaGxJR1ZzWlcxbGJuUWdZWFFnZEdobElIQnliM0JsY2lCd2JHRmpaU0JoYlc5dVozTjBJSFJvWlNCdmRYUnNaWFFuY3lCamFHbHNaSEpsYmx4dVhIUmNkSFpoY2lCdVpXbG5hR0p2Y25NZ1BTQnpaV3htTGlSdmRYUnNaWFF1WTJocGJHUnlaVzRvS1R0Y2JseDBYSFJwWmlBb1h5NXBjMFpwYm1sMFpTaGhkRWx1WkdWNEtTQW1KaUJ1WldsbmFHSnZjbk11YkdWdVozUm9JRDRnTUNBbUppQnVaV2xuYUdKdmNuTXViR1Z1WjNSb0lENGdZWFJKYm1SbGVDa2dlMXh1WEhSY2RGeDBibVZwWjJoaWIzSnpMbVZ4S0dGMFNXNWtaWGdwTG1KbFptOXlaU2h6Wld4bUxpUmxiQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUW5WMElHbG1JSFJvWlNCdmRYUnNaWFFnYVhNZ1pXMXdkSGtzSUc5eUlIUm9aWEpsSjNNZ2JtOGdZWFJKYm1SbGVDd2dhblZ6ZENCemRHbGpheUJwZENCdmJpQjBhR1VnWlc1a1hHNWNkRngwWld4elpTQnpaV3htTGlSdmRYUnNaWFF1WVhCd1pXNWtLSE5sYkdZdUpHVnNLVHRjYmx4dVhHNWNkRngwTHk4Z1JteGhaeUIzYVhSb0lHUmhkR0V0ZEdWdGNHeGhkR1V0YVdRZ1lYUjBjbWxpZFhSbFhHNWNkRngwTHk4Z0tIUnZJRzFoYTJVZ2RHVnRjR3hoZEdVdlkyOXRjRzl1Wlc1MElHSnZkVzVrWVhKcFpYTWdaV0Z6YVdWeUlIUnZJSEJwWTJzZ2IzVjBJR2x1SUhSb1pTQnBibk53WldOMGIzSXBYRzVjZEZ4MGMyVnNaaTRrWld3dVlYUjBjaWduWkdGMFlTMTBaVzF3YkdGMFpTMXBaQ2NzSUhObGJHWXVhV1FwTzF4dVhHNWNibHh1WEc1Y2RGeDBMeTljYmx4MFhIUXZMeUJKWmlCMGFHVWdjR0Z5Wlc1MElHTnZiWEJ2Ym1WdWRDQm9ZWE1nY205MWRHVWdiR2x6ZEdWdVpYSnpJQ2hsTG1jdUlDTm1iMjhwWEc1Y2RGeDBMeThnY25WdUlHRnVlU0J2WmlCMGFHVnRJSFJvWVhRZ2JXRjBZMmdnWUhkcGJtUnZkeTVzYjJOaGRHbHZiaTVvWVhOb1lDNWNibHgwWEhRdkx5QW9ZV1owWlhJZ2NtVnVaR1Z5YVc1bklIUm9aU0IwWlcxd2JHRjBaU0JoYm1RZ2NtVm5hVzl1Y3lCaWRYUWdRa1ZHVDFKRklIUm9aU0JnWVdaMFpYSlNaVzVrWlhKZ1hHNWNkRngwTHk4Z2JHbG1aV041WTJ4bElHTmhiR3hpWVdOcklHbHpJSFJ5YVdkblpYSmxaQ2xjYmx4MFhIUXZMMXh1WEhSY2RDOHZJRzV2ZENCemRYSmxJR2xtSUhSb2FYTWdhWE1nWVNCbmIyOWtJR2xrWldFZ2FXNGdaMlZ1WlhKaGJDMHRJRzFoZVdKbElHTnZibVpwWjNWeVlXSnNaUzR1UDF4dVhIUmNkQzh2SUc5eUlHOXViSGtnYVdZZ1ltRmphMkp2Ym1VdWFHbHpkRzl5ZVNCcGMyNG5kQ0J5WldGa2VTQjVaWFEvWEc1Y2RGeDBMeTljYmx4MFhIUXZMeUJrYVhOaFlteHBibWNnWm05eUlHNXZkeTR1TGx4dVhIUmNkQzh2SUY4dVpXRmphQ2dnVDJKcVpXTjBMbXRsZVhNb2MyVnNaaWtzSUdaMWJtTjBhVzl1SUNoclpYa3BJSHRjYmx4MFhIUXZMeUJjZEhaaGNpQnRZWFJqYUdWa1VtOTFkR1VnUFNCclpYa3ViV0YwWTJnb2JtVjNJRkpsWjBWNGNDZ25MMTRuSUN0M2FXNWtiM2N1Ykc5allYUnBiMjR1YUdGemFDQXJJQ2N2SnlrcE8xeHVYSFJjZEM4dklGeDBhV1lnS0NGdFlYUmphR1ZrVW05MWRHVXBJSEpsZEhWeWJqdGNibHh1WEhSY2RDOHZJRngwZG1GeUlHMWhkR05vWldSU2IzVjBaVXhwYzNSbGJtVnlJRDBnYzJWc1psdHRZWFJqYUdWa1VtOTFkR1ZkTzF4dVhIUmNkQzh2SUZ4MGJXRjBZMmhsWkZKdmRYUmxUR2x6ZEdWdVpYSW9LVHRjYmx4MFhIUXZMeUI5S1R0Y2JseHVYRzVjZEZ4MEx5OGdSbWx1WVd4c2VTd2dkSEpwWjJkbGNpQmhablJsY2xKbGJtUmxjaUJ0WlhSb2IyUmNibHgwWEhSelpXeG1MbUZtZEdWeVVtVnVaR1Z5S0NrN1hHNWNibHh1WEhSY2RDOHZJRkoxYmlCa1lYUmhJR0pwYm1ScGJtZHpYRzVjZEZ4MEx5OGdWRTlFVHpvZ1pHOXVKM1FnWTJGc2JDQjBhR2x6SUdobGNtVXRMU0JxZFhOMElHUnZJSGRvWlc0Z2FXNXBkR2xoYkd4NUlHbHVjMlZ5ZEdsdVp5QjBhR1VnZEdWdGNHeGhkR1VnYVc1MGJ5QjBhR1VnUkU5TlhHNWNkRngwTHk4Z0tIUm9hWE1nYVhNZ2FXNWxabVpwWTJsbGJuUXBYRzVjZEZ4MGNtVnVaR1Z5UkdGMFlVSnBibVJwYm1kekxtTmhiR3dvYzJWc1ppazdYRzVjYmx4dVhIUmNkQzh2SUVGa1pDQmtZWFJoSUdGMGRISnBZblYwWlhNZ2RHOGdkR2hwY3lCamIyMXdiMjVsYm5RbmN5QWtaV3dzSUhCeWIzWnBaR2x1WnlCaFkyTmxjM05jYmx4MFhIUXZMeUIwYnlCM2FHVjBhR1Z5SUhSb1pTQmxiR1Z0Wlc1MElHaGhjeUIyWVhKcGIzVnpJRVJQVFNCaWFXNWthVzVuY3lCbWNtOXRJSE4wZVd4bGMyaGxaWFJ6TGx4dVhIUmNkQzh2SUNob1lXNWtlU0JtYjNJZ1pHbHpZV0pzYVc1bklIUmxlSFFnYzJWc1pXTjBhVzl1SUdGalkyOXlaR2x1WjJ4NUxDQmxkR011S1Z4dVhIUmNkQzh2WEc1Y2RGeDBMeThnTFQ0Z1pHbHpZV0pzWlNCbWIzSWdkR2hwY3lCamIyMXdiMjVsYm5RZ2QybDBhQ0JnZEdocGN5NWhkSFJ5Um14aFozTWdQU0JtWVd4elpXQmNibHgwWEhRdkx5QXRQaUJ2Y2lCbmJHOWlZV3hzZVNCM2FYUm9JR0JHVWtGTlJWZFBVa3N1WVhSMGNrWnNZV2R6SUQwZ1ptRnNjMlZnWEc1Y2RGeDBMeTljYmx4MFhIUXZMeUJVVDBSUE9pQnRZV3RsSUdsMElIZHZjbXNnZDJsMGFDQmtaV3hsWjJGMFpXUWdSRTlOSUdWMlpXNTBJR0pwYm1ScGJtZHpYRzVjZEZ4MEx5OWNibHgwWEhScFppQW9jMlZzWmk1aGRIUnlSbXhoWjNNZ0lUMDlJR1poYkhObElDWW1JRVpTUVUxRlYwOVNTeTVoZEhSeVJteGhaM01nSVQwOUlHWmhiSE5sS1NCN1hHNWNkRngwWEhSRVQwMHVabXhoWjBKdmRXNWtSWFpsYm5SektITmxiR1lwTzF4dVhIUmNkSDFjYmx4MGZTazdYRzU5TzF4dUlpd2lYRzR2S2lwY2JpQXFJRlJQUkU4NlhHNGdLaUJVY25rZ2IzVjBJR0VnWkdsbVptVnlaVzUwSUdGd2NISnZZV05vSUdadmNpQjBhR1VnYkc5bmFXTWdhVzRnWUhKbGJtUmxja052Ykd4bFkzUnBiMjVnWEc0Z0tpQmlaV3h2ZHlCaWVTQnZkbVZ5Ykc5aFpHbHVaeUJnY21WbmFXOXVMbUYwZEdGamFDZ3BZQzVjYmlBcVhHNGdLaUJGZUdGdGNHeGxJSFZ6WVdkbE9pQW9hVzRnY0dGeVpXNTBJR052YlhCdmJtVnVkQ2xjYmlBcUlEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzRnS2lCMGFHbHpMbk52YldWU1pXZHBiMjR1WVhSMFlXTm9LQ2RUYjIxbFQzUm9aWEpEYjIxd2IyNWxiblFuTEhzZ1kyOXNiR1ZqZEdsdmJqb2dVMjl0WlVOdmJHeGxZM1JwYjI0Z2ZTbGNiaUFxWEc0Z0tpQXRiM0l0WEc0Z0tseHVJQ29nZEdocGN5NXpiMjFsVW1WbmFXOXVMbkpsY0dWaGRDZ25VMjl0WlU5MGFHVnlRMjl0Y0c5dVpXNTBKeXg3SUdOdmJHeGxZM1JwYjI0NklGTnZiV1ZEYjJ4c1pXTjBhVzl1SUgwcFhHNGdLaTljYmx4dUx5b3FYRzRnS2lCeVpXNWtaWEpEYjJ4c1pXTjBhVzl1S0NsY2JpQXFYRzRnS2lCU1pYVnpZV0pzWlNCc2IyZHBZeUIwYnlCeVpXNWtaWElnWVNCamIyeHNaV04wYVc5dUlHbHVkRzhnWVNCeVpXZHBiMjVjYmlBcVhHNGdLaUJVVDBSUE9pQnRiM1psSUc5dWRHOGdVbVZuYVc5dUlHOWlhbVZqZENCcGJuTjBaV0ZrTGk0dUlDQlRaV1VnWjJsemRDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1kyOXNiR1ZqZEdsdmJpQXRJR1JoZEdFZ2MyOTFjbU5sWEc0Z0tpQkFjR0Z5WVcwZ2UwOXdkR2x2Ym5OOUlHOXdkR2x2Ym5OY2JpQXFYSFJjZERvZ2IzQjBhVzl1Y3k1cGRHVnRWR1Z0Y0d4aGRHVWdlMU4wY21sdVozMGdMU0J1WVcxbElHOW1JSFJsYlhCc1lYUmxMMk52YlhCdmJtVnVkQ0IwYnlCMWMyVWdZWE1nYVhSbGJWeHVJQ3BjZEZ4ME9pQnZjSFJwYjI1ekxtbHVkRzlTWldkcGIyNGdlMDlpYW1WamRIMGdMU0IwYUdVZ1pHVnpkR2x1WVhScGIyNGdjbVZuYVc5dVhHNGdLaTljYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0dOdmJHeGxZM1JwYjI0c0lHOXdkR2x2Ym5NcElIdGNibHh1WEhRdkx5QlNaWEYxYVhKbFpEcGNibHgwYVdZZ0tIUjVjR1Z2WmlCamIyeHNaV04wYVc5dUlDRTlQU0FuYjJKcVpXTjBKeWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R5Wlc1a1pYSkRiMnhzWldOMGFXOXVJRG82SUZWdWEyNXZkMjR2YVc1MllXeHBaQ0JqYjJ4c1pXTjBhVzl1TENCY0lpY2dLeUFvWTI5c2JHVmpkR2x2YmlBbUppQmpiMnhzWldOMGFXOXVMblI1Y0dVcElDc2dKMXdpSnlrN1hHNWNkR2xtSUNnaGIzQjBhVzl1Y3k1cGRHVnRWR1Z0Y0d4aGRHVXBJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jbVZ1WkdWeVEyOXNiR1ZqZEdsdmJpQTZPaUJ2Y0hScGIyNXpMbWwwWlcxVVpXMXdiR0YwWlNCeVpYRjFhWEpsWkNFbktUdGNibHgwYVdZZ0tDRnZjSFJwYjI1ekxtbHVkRzlTWldkcGIyNHBJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jbVZ1WkdWeVEyOXNiR1ZqZEdsdmJpQTZPaUJ2Y0hScGIyNXpMbWx1ZEc5U1pXZHBiMjRnY21WeGRXbHlaV1FoSnlrN1hHNWNibHh1WEhRdkx5QkVaWFJsY20xcGJtVWdZMjlzYkdWamRHbHZiazVoYldWY2JseDBkbUZ5SUdOdmJHeGxZM1JwYjI1T1lXMWxJRDBnWTI5c2JHVmpkR2x2Ymk1MGVYQmxPMXh1WEc1Y2RDOHZJRlJoY21kbGRDQnlaV2RwYjI1Y2JseDBkbUZ5SUc5MWRHeGxkQ0E5SUc5d2RHbHZibk11YVc1MGIxSmxaMmx2Ymp0Y2JseHVYSFF2THlCVGRXSXRZMjl0Y0c5dVpXNTBYRzVjZEhaaGNpQnpkV0pqYjIxd2IyNWxiblJPWVcxbElEMGdiM0IwYVc5dWN5NXBkR1Z0VkdWdGNHeGhkR1U3WEc1Y2JseDBMeThnVG1GdFpTQnZaaUIwYUdVZ1kyOXNiR1ZqZEdsdmJpQnpkR0YwWlNCaGRIUnlhV0oxZEdVZ2RHaGhkQ0IzYVd4c1pTQmlaU0JwYm1wbFkzUmxaQ0JwYm5SdklIUm9aU0JJVkUxTVhHNWNkQzh2SUZWelpXUWdabTl5SUhSb1pTQmtaV1poZFd4MElISmxibVJsY2lCaVpXaGhkbWx2Y2k1Y2JseDBkbUZ5SUdKdlpIbFRkR0YwWlVGMGRISnBZblYwWlNBOUlDZGtZWFJoTFNjZ0t5QmpiMnhzWldOMGFXOXVUbUZ0WlNBcklDY3RjM1JoZEdVbk8xeHVYRzVjYmx4dVhHNWNkQzhxS2x4dVhIUWdLaUJFWldaaGRXeDBJSEpsYm1SbGNpQnRaWFJvYjJSelhHNWNkQ0FxWEc1Y2RDQXFJRTkyWlhKeWFXUmxJR1JsWm1GMWJIUWdjbVZ1WkdWeUlHMWxkR2h2WkhNZ2QybDBhQ0J2Y0hScGIyNXpJR2xtSUhOd1pXTnBabWxsWkZ4dVhIUWdLaTljYmx4dVhIUXZMeUJFWldaaGRXeDBJSEpsYm1SbGNpQnNiMmRwWXlCbWIzSWdaWEp5YjNJZ2MzUmhkR1VnS0dVdVp5NGdjbVZrSUhSbGVIUXBYRzVjZEhaaGNpQnlaVzVrWlhKRmNuSnZjaUE5SUc5d2RHbHZibk11Y21WdVpHVnlSWEp5YjNJZ2ZId2dablZ1WTNScGIyNGdjbVZ1WkdWeVJYSnliM0lnS0NrZ2UxeHVYSFJjZEVaU1FVMUZWMDlTU3k1bGNuSnZjaWduUVc0Z1pYSnliM0lnYjJOamRYSnlaV1FnZDJocGJHVWdiRzloWkdsdVp5QW5JQ3NnWTI5c2JHVmpkR2x2Yms1aGJXVWdLeUFuSURvNlhGeHVKeXdnWTI5c2JHVmpkR2x2Ymk1bGNuSnZjaWs3WEc1Y2JseDBYSFF2THlCVFpYUWdZU0JrWVhSaElHRjBkSEpwWW5WMFpTQnZiaUJJVkUxTUlHSnZaSGxjYmx4MFhIUWtLQ2RpYjJSNUp5a3VZWFIwY2loaWIyUjVVM1JoZEdWQmRIUnlhV0oxZEdVc0lDZGxjbkp2Y2ljcE8xeHVYSFI5TzF4dVhHNWNkQzh2SUVSbFptRjFiSFFnY21WdVpHVnlJR3h2WjJsaklHWnZjaUJzYjJGa2FXNW5JSE4wWVhSbElDaGxMbWN1SUhOd2FXNXVaWElwWEc1Y2RIWmhjaUJ5Wlc1a1pYSlRlVzVqYVc1bklEMGdiM0IwYVc5dWN5NXlaVzVrWlhKVGVXNWphVzVuSUh4OElHWjFibU4wYVc5dUlISmxibVJsY2xONWJtTnBibWNvS1NCN1hHNWNkRngwUmxKQlRVVlhUMUpMTG14dlp5Z25URzloWkdsdVp5QW5JQ3NnWTI5c2JHVmpkR2x2Yms1aGJXVWdLeUFuTGk0dUp5azdYRzVjYmx4MFhIUXZMeUJUWlhRZ2MzUmhkR1VnWVhSMGNtbGlkWFJsSUc5dUlFaFVUVXdnWW05a2VWeHVYSFJjZENRb0oySnZaSGtuS1M1aGRIUnlLR0p2WkhsVGRHRjBaVUYwZEhKcFluVjBaU3dnSjNONWJtTnBibWNuS1R0Y2JseDBmVHRjYmx4dVhIUXZMeUJFWldaaGRXeDBJSEpsYm1SbGNpQnNiMmRwWXlCMGJ5QmpiR1ZoYmlCMWNDQmhablJsY2lCaElITjFZMk5sYzNObWRXd2djM2x1WXk5c2IyRmtYRzVjZEhaaGNpQnlaVzVrWlhKVGVXNWpaV1FnUFNCdmNIUnBiMjV6TG5KbGJtUmxjbE41Ym1ObFpDQjhmQ0JtZFc1amRHbHZiaUJ5Wlc1a1pYSlRlVzVqWldRb0tTQjdYRzVjZEZ4MFJsSkJUVVZYVDFKTExteHZaeWhqYjJ4c1pXTjBhVzl1TG14bGJtZDBhQ0FySUNjZ0p5QXJJR052Ykd4bFkzUnBiMjVPWVcxbElDc2dKeUJtWlhSamFHVmtJSE4xWTJObGMzTm1kV3hzZVM0bktUdGNibHh1WEhSY2RDOHZJRk5sZENCemRHRjBaU0JoZEhSeWFXSjFkR1VnYjI0Z1NGUk5UQ0JpYjJSNVhHNWNkRngwSkNnblltOWtlU2NwTG1GMGRISW9ZbTlrZVZOMFlYUmxRWFIwY21saWRYUmxMQ0FuY21WaFpIa25LVHRjYmx4MGZUdGNibHh1WEhRdkx5QkVaV1poZFd4MElISmxibVJsY2lCc2IyZHBZeUJtYjNJZ2FYUmxiWE1nYVc0Z1kyOXNiR1ZqZEdsdmJseHVYSFIyWVhJZ2NtVnVaR1Z5VW1WelpYUWdQU0J2Y0hScGIyNXpMbkpsYm1SbGNsSmxjMlYwSUh4OElHWjFibU4wYVc5dUlISmxibVJsY2xKbGMyVjBLQ2tnZTF4dVhHNWNkRngwTHk4Z1EyeGxZVzRnYjNWMElIUm9aU0J5WldkcGIyNHNJSGR5WVhBZ2FXNGdZU0IwY25rdlkyRjBZMmdnZEc4Z2MzUnZjQ0IwYUdVZ1pYaGxZM1YwYVc5dVhHNWNkRngwZEhKNUlIdGNibHgwWEhSY2RHOTFkR3hsZEM1bGJYQjBlU2dwTzF4dVhIUmNkSDBnWTJGMFkyZ2dLR1VwSUh0OVhHNWNibHh1WEhSY2RDOHZJRlJQUkU4NklGTnRZWEowSUcxbGNtZGxJSFJ2SUcxcGJtbHRhWHBsSUVSUFRTQnhkV1Z5YVdWelhHNWNkRngwWTI5c2JHVmpkR2x2Ymk1bFlXTm9LR1oxYm1OMGFXOXVJQ2h0YjJSbGJDa2dlMXh1WEhSY2RGeDBMeThnUm05eUlHVmhZMmdnYlc5a1pXd2dabTkxYm1Rc0lHRndjR1Z1WkNCaElITjFZbU52YlhCdmJtVnVkQ0IwYnlCMGFHVWdjbVZuYVc5dVhHNWNkRngwWEhSdmRYUnNaWFF1WVhCd1pXNWtLSE4xWW1OdmJYQnZibVZ1ZEU1aGJXVXNJSHNnYlc5a1pXdzZJRzF2WkdWc0lIMHBPMXh1WEhSY2RIMHBPMXh1WEhSOU8xeHVYRzVjZEM4cUtseHVYSFFnS2lCeVpXNWtaWEpCWkdRZ0tDQnRiMlJsYkN3Z1cyRjBTVzVrWlhoZElDbGNibHgwSUNwY2JseDBJQ29nUUhCaGNtRnRJSHROYjJSbGJIMGdiVzlrWld4Y2RGeDBYSFJjZEZ4MFhIUXRJSFJvWlNCQ1lXTnJZbTl1WlNCdGIyUmxiQ0IwYUdGMElIZGhjeUJoWkdSbFpGeHVYSFFnS2lCQWNHRnlZVzBnZTBsdWRHVm5aWEo5SUdGMFNXNWtaWGhjZEZ4MFhIUmNkQzBnS0c5d2RHbHZibUZzTFNCa1pXWmhkV3gwY3lCMGJ5QmpiMnhzWldOMGFXOXVMbXhsYm1kMGFDbGNibHgwSUNwY2JseDBJQ29nUkdWbVlYVnNkQ0J5Wlc1a1pYSWdiRzluYVdNZ1ptOXlJSFJvWlNCallYTmxJSGRvWlhKbElHRnVJR2wwWlcwZ2FYTWdZV1JrWldRZ2RHOGdkR2hsSUdOdmJHeGxZM1JwYjI0dVhHNWNkQ0FxTDF4dVhIUjJZWElnY21WdVpHVnlRV1JrSUQwZ2IzQjBhVzl1Y3k1eVpXNWtaWEpCWkdRZ2ZId2dablZ1WTNScGIyNGdjbVZ1WkdWeVFXUmtLQ0J0YjJSbGJDd2dZWFJKYm1SbGVDQXBJSHRjYmx4MFhIUnBaaUFvSUhSNWNHVnZaaUJoZEVsdVpHVjRJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUc5MWRHeGxkQzVwYm5ObGNuUW9ZWFJKYm1SbGVDd2djM1ZpWTI5dGNHOXVaVzUwVG1GdFpTd2dleUJ0YjJSbGJEb2diVzlrWld3Z2ZTazdYRzVjZEZ4MGZWeHVYSFJjZEhKbGRIVnliaUJ2ZFhSc1pYUXVZWEJ3Wlc1a0tITjFZbU52YlhCdmJtVnVkRTVoYldVc0lIc2diVzlrWld3NklHMXZaR1ZzSUgwcE8xeHVYSFI5TzF4dVhHNWNkQzhxS2x4dVhIUWdLaUJ5Wlc1a1pYSlNaVzF2ZG1Vb0lHRjBTVzVrWlhnZ0tWeHVYSFFnS2x4dVhIUWdLaUJBY0dGeVlXMGdlMGx1ZEdWblpYSjlJR0YwU1c1a1pYaGNkRngwWEhRdElIUm9aU0JtYjNKdFpYSWdhVzVrWlhnZ2IyWWdkR2hsSUVKaFkydGliMjVsSUcxdlpHVnNJSFJvWVhRZ2QyRnpJSEpsYlc5MlpXUmNibHgwSUNwY2JseDBJQ29nUkdWbVlYVnNkQ0J5Wlc1a1pYSWdiRzluYVdNZ1ptOXlJSFJvWlNCallYTmxJSGRvWlhKbElHRnVJR2wwWlcwZ2FYTWdjbVZ0YjNabFpDQm1jbTl0SUhSb1pTQmpiMnhzWldOMGFXOXVMbHh1WEhRZ0tpOWNibHgwZG1GeUlISmxibVJsY2xKbGJXOTJaU0E5SUc5d2RHbHZibk11Y21WdVpHVnlVbVZ0YjNabElIeDhJR1oxYm1OMGFXOXVJSEpsYm1SbGNsSmxiVzkyWlNnZ1lYUkpibVJsZUNBcElIdGNibHgwWEhSdmRYUnNaWFF1Y21WdGIzWmxLQ0JoZEVsdVpHVjRJQ2s3WEc1Y2RIMDdYRzVjYmx4dVhHNWNibHh1WEc1Y2RDOHFLbHh1WEhRZ0tpQkNiMjkwYzNSeVlYQmNibHgwSUNwY2JseDBJQ29nVW1WdVpHVnljeUJwYm1sMGFXRnNJSE4wWVhSbElHOW1JR052Ykd4bFkzUnBiMjRnYVc1MGJ5QnZkWElnY21WbmFXOXVYRzVjZENBcUlIVnphVzVuSUc5MWNpQmphR2xzWkNCMFpXMXdiR0YwWlM1Y2JseDBJQ292WEc1Y2JseDBMeThnU1dZZ2IzVnlJR052Ykd4bFkzUnBiMjRnYVhNZ1ptVjBZMmhwYm1jc0lISmxibVJsY2lCMGFHVWdabVYwWTJocGJtY2dLR3h2WVdScGJtY3BJSE4wWVhSbExseHVYSFJwWmlBb1kyOXNiR1ZqZEdsdmJpNXplVzVqYVc1bktTQjdYRzVjZEZ4MGNtVnVaR1Z5VTNsdVkybHVaeWdwTzF4dVhIUjlYRzVjYmx4dVhIUXZMeUJKWmlCdmRYSWdZMjlzYkdWamRHbHZiaUJtWVdsc1pXUWdkRzhnWm1WMFkyZ2dLR2t1WlM0Z2NtVmpaV2wyWldRZ1lTQTBlSGdnYjNJZ05YaDRJR1Z5Y205eUlHTnZaR1VwWEc1Y2RDOHZJSEpsYm1SbGNpQmhiaUJsY25KdmNpQnpkR0YwWlZ4dVhIUXZMMXh1WEhRdkx5QklZVzVrYkdVZ2RHaGxJR05oYzJVZ2IyWWdiWFZzZEdsd2JHVWdaWEp5YjNJZ2MzUmhkR1Z6SUhkcGRHZ2daR2xtWm1WeVpXNTBJSE4wZVd4bGN5Qm9aWEpsSUdGeklIZGxiR3d1WEc1Y2RHVnNjMlVnYVdZZ0tHTnZiR3hsWTNScGIyNHVaWEp5YjNJcElIdGNibHgwWEhSeVpXNWtaWEpGY25KdmNpZ3BPMXh1WEhSOVhHNWNibHh1WEhRdkx5QlBkR2hsY25kcGMyVWdiM1Z5SUdOdmJHeGxZM1JwYjI0Z2FYTWdiRzloWkdWa0lHRnVaQ0J5WldGa2VTeGNibHgwTHk4Z2MyOGdaMjhnWVdobFlXUWdZVzVrSUhKbGJtUmxjaUJwZENCcGJuUnZJSFJvWlNCMFlYSm5aWFFnY21WbmFXOXVMbHh1WEhRdkwxeHVYSFF2THlBb1lXeDBaWEp1WVhScGRtVnNlU0JoZENCMGFHbHpJSEJ2YVc1MExDQmhJR04xYzNSdmJTQmdaVzF3ZEhsZ0lITjBZWFJsSUcxaGVTQmlaU0J5Wlc1a1pYSmxaQ2xjYmx4MEx5OGdZMjl1YzI5c1pTNXNiMmNvSjFSb1pTQmpiMnhzWldOMGFXOXVJQ2NnS3lCemRXSmpiMjF3YjI1bGJuUk9ZVzFsSUNzZ0p5MHRMUzArSnlrN1hHNWNkR1ZzYzJVZ2NtVnVaR1Z5VW1WelpYUW9LVHRjYmx4dVhHNWNibHh1WEc1Y2JseHVYSFF2S2lwY2JseDBJQ29nUW1sdVpDQmxkbVZ1ZEhOY2JseDBJQ3BjYmx4MElDb2dUR2x6ZEdWdUlHWnZjaUJ6ZEdGMFpTQmphR0Z1WjJWeklDaHplVzVqYVc1bkxDQnplVzVqWldRc0lITmxjblpsY2lCbGNuSnZjaXdnWVdSa0xDQnlaVzF2ZG1Vc0lITnZjblFzSUdWMFl5NHBYRzVjZENBcUlGUm9aWE5sSUcxaGJuVmhiQ0JpYVc1a2FXNW5jeUJqWVc0Z1ltVWdjbVZ0YjNabFpDQjNhR1Z1SUdOdmNtVWdabkpoYldWM2IzSnJJSE4xY0hCdmNuUnpJSEpsYm1SbGNpMTBhVzFsSUdOdmJHeGxZM1JwYjI1Y2JseDBJQ29nWW1sdVpHbHVaM011SUNCR2IzSWdibTkzTENCa2IybHVaeUJwZENCMGFHbHpJSGRoZVNCeVlYUm9aWElnZEdoaGJpQndZWFJqYUdsdVp5QjBhR1VnWTI5eVpTQjBieUIwWlhOMElHOTFjaUJ6ZEhKMVkzUjFjbUZzWEc1Y2RDQXFJR0Z6YzNWdGNIUnBiMjV6TGx4dVhIUWdLaTljYmx4dVhIUXZMeUJYYUdWdUlHRWdabVYwWTJnZ2FYTWdhVzVwZEdsaGRHVmtJR1p5YjIwZ2RHaGxJSE5sY25abGNpNHVMbHh1WEhRdkwxeHVYSFF2THlBb1lXWjBaWElnWUVKaFkydGliMjVsTG5ONWJtTmdJR0psWjJsdWN5QmhJSEpsYlc5MFpTQnlaWEYxWlhOMEtWeHVYSFIwYUdsekxteHBjM1JsYmxSdktHTnZiR3hsWTNScGIyNHNJQ2R5WlhGMVpYTjBKeXdnWm5WdVkzUnBiMjRnWVdaMFpYSlNaWEYxWlhOMElDZ3BJSHRjYmx4MFhIUnlaVzVrWlhKVGVXNWphVzVuS0NrN1hHNWNkSDBwTzF4dVhHNWNkQzh2SUZkb1pXNGdZU0JtWlhSamFDQmpiMjF3YkdWMFpYTWdjM1ZqWTJWemMyWjFiR3g1SUdGdVpDQnVaWGNnWkdGMFlTQnBjeUJzYjJGa1pXUXVMaTVjYmx4MEx5OWNibHgwTHk4Z0tHRm1kR1Z5SUhSb2FYTWdZMjl0Y0c5dVpXNTBJR2x6SUdGc2NtVmhaSGtnYVc1emRHRnVkR2xoZEdWa0tWeHVYSFIwYUdsekxteHBjM1JsYmxSdktHTnZiR3hsWTNScGIyNHNJQ2R6ZVc1akp5d2dablZ1WTNScGIyNGdZV1owWlhKVGVXNWpJQ2dwSUh0Y2JseDBYSFJ5Wlc1a1pYSlRlVzVqWldRb0tUdGNibHgwWEhSeVpXNWtaWEpTWlhObGRDZ3BPMXh1WEhSOUtUdGNibHh1WEhRdkx5QlhhR1Z1SUhObGNuWmxjaUJ6Wlc1a2N5QmhJSEpsYzNCdmJuTmxJSGN2SUdGdUlHVnljbTl5SUdOdlpHVmNibHgwTHk5Y2JseDBMeThnS0dGbWRHVnlJSFJvYVhNZ1kyOXRjRzl1Wlc1MElHbHpJR0ZzY21WaFpIa2dhVzV6ZEdGdWRHbGhkR1ZrS1Z4dVhIUjBhR2x6TG14cGMzUmxibFJ2S0dOdmJHeGxZM1JwYjI0c0lDZGxjbkp2Y2ljc0lHWjFibU4wYVc5dUlHRm1kR1Z5VTNsdVkwVnljbTl5SUNoamIyeHNaV04wYVc5dUxDQjRhSElwSUh0Y2JseHVYSFJjZEM4dklFbG5ibTl5WlNCaFltOXlkQ0JjSW1WeWNtOXlYQ0pjYmx4MFhIUXZMMXh1WEhSY2RDOHZJRmRvZVQ4Z1ltVmpZWFZ6WlNCcGRDZHpJRzV2ZENCaFkzUjFZV3hzZVNCaGJpQmxjbkp2Y2k1Y2JseDBYSFF2THlCT2IzUWdjM1Z5WlNCM2FIa2dkR2hwY3lCMGNtbG5aMlZ5Y3lCQ1lXTnJZbTl1WlM1RGIyeHNaV04wYVc5dUozTWdZR1Z5Y205eVlDQmxkbVZ1ZEM0dUxseHVYSFJjZEM4dlhHNWNkRngwTHk4Z1NXWWdkSGR2SUdabGRHTm9aWE1nYjJOamRYSWdiMjRnZEdobElITmhiV1VnWTI5c2JHVmpkR2x2YmlCaGRDQjBhR1VnYzJGdFpTQjBhVzFsTEZ4dVhIUmNkQzh2SUhkbElHRmliM0owSUhSb1pTQnZiR1FnV0VoU0lISmxjWFZsYzNRZ2IzVnljMlZzZG1WeklHbG1JR2wwSjNNZ2MzUnBiR3dnY25WdWJtbHVaeWxjYmx4MFhIUnBaaUFvZUdoeUlDWW1JSGhvY2k1emRHRjBkWE5VWlhoMElEMDlQU0FuWVdKdmNuUW5LU0J5WlhSMWNtNDdYRzVjYmx4MFhIUnlaVzVrWlhKRmNuSnZjaWdwTzF4dVhIUjlLVHRjYmx4dVhIUXZMeUJYYUdWdUlHRWdiVzlrWld3Z2FYTWdZV1JrWldRdUxpNWNibHgwTHk5Y2JseDBMeThnVEdsemRHVnVJR1p2Y2lCdVpYY2diVzlrWld4ekxDQmhibVFnYVc1elpYSjBJR0VnWTJocGJHUWdkR1Z0Y0d4aGRHVmNibHgwTHk4Z1lYUWdkR2hsSUdGd2NISnZjSEpwWVhSbElHbHVaR1Y0SUhkcGRHaHBiaUIwYUdVZ2NtVm5hVzl1TGx4dVhIUjBhR2x6TG14cGMzUmxibFJ2S0dOdmJHeGxZM1JwYjI0c0lDZGhaR1FuTENCbWRXNWpkR2x2YmlCaFpuUmxja0ZrWkNBb0lHMXZaR1ZzTENCamIyeHNaV04wYVc5dUxDQnZjSFJwYjI1eklDa2dlMXh1WEhSY2RISmxibVJsY2tGa1pDZ2diVzlrWld3c0lHOXdkR2x2Ym5NdVlYUWdLVHRjYmx4MGZTazdYRzVjYmx4MEx5OGdWMmhsYmlCaElHMXZaR1ZzSUdseklISmxiVzkyWldRdUxpNWNibHgwTHk5Y2JseDBMeThnUjNKaFlpQnRiMlJsYkNkeklISmxiR0YwYVhabElHbHVaR1Y0SUhkcGRHaHBiaUJqYjJ4c1pXTjBhVzl1SUdGdVpDQnlaVzF2ZG1WY2JseDBMeThnZEdobElHTm9hV3hrSUhSbGJYQnNZWFJsSUdGMElIUm9aU0J6WVcxbElHbHVaR1Y0SUhkcGRHaHBiaUIwYUdVZ2NtVm5hVzl1TGx4dVhIUjBhR2x6TG14cGMzUmxibFJ2S0dOdmJHeGxZM1JwYjI0c0lDZHlaVzF2ZG1VbkxDQm1kVzVqZEdsdmJpQmhablJsY2xKbGJXOTJaU0FvSUcxdlpHVnNMQ0JqYjJ4c1pXTjBhVzl1TENCdmNIUnBiMjV6SUNrZ2UxeHVYSFJjZEhKbGJtUmxjbEpsYlc5MlpTZ2diM0IwYVc5dWN5NXBibVJsZUNBcE8xeHVYSFI5S1R0Y2JseHVYRzVjYm4wN1hHNGlMQ0l2S2lwY2JpQXFJRTF2WkhWc1pTQmtaWEJsYm1SbGJtTnBaWE5jYmlBcUwxeHVYRzUyWVhJZ1pHRjBZVUpwYm1ScGJtZHpJRDBnZTF4dVhIUjBaWGgwSUNBZ0lEb2djbVZ4ZFdseVpTZ25MaTlrWVhSaFFtbHVaR2x1WjNNdmRHVjRkQ2NwTEZ4dVhIUW5ZMnhoYzNNbklEb2djbVZ4ZFdseVpTZ25MaTlrWVhSaFFtbHVaR2x1WjNNdlkyeGhjM01uS1Z4dWZUdGNibHh1WEc1Y2JpOHFLbHh1SUNvZ1VtVnVaR1Z5SUcxdlpHVnNJR0pwYm1ScGJtZHpMbHh1SUNvZ0lDQXJJR0JpYVc1a0xYUmxlSFJnWEc0Z0tpQWdJQ3NnYlc5eVpTQjBieUJqYjIxbFhHNGdLbHh1SUNvZ1EyRnNiR1ZrSUdKNUlFTnZiWEJ2Ym1WdWRDQjNhR1Z1SUdsMGN5QnRiMlJsYkNCamFHRnVaMlZ6TGx4dUlDb3ZYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnY21WdVpHVnlSR0YwWVVKcGJtUnBibWR6SUNncElIdGNibHgwUmxKQlRVVlhUMUpMTG1SbFluVm5LQ2RTWlc1a1pYSnBibWNnWkdGMFlTQmlhVzVrYVc1bmN5Qm1iM0lnSnl3Z2RHaHBjeTVwWkN3blkyOXRjRzl1Wlc1MExpNHVKeWs3WEc1Y2JseDBMeThnUlc1emRYSmxJSFJvWVhRZ2JXOWtaV3dnWlhocGMzUnpYRzVjZEdsbUlDZ2hkR2hwY3k1dGIyUmxiQ2tnZTF4dVhIUmNkSFJvY205M0lHNWxkeUJGY25KdmNpaGNibHgwWEhSY2RDZFVjbmxwYm1jZ2RHOGdZbTl2ZEhOMGNtRndJR1JoZEdFZ1ltbHVaR2x1WjNNZ1ptOXlJR052YlhCdmJtVnVkQ0FvSnlBcklIUm9hWE11YVdRZ0t5QW5LU3dnSnlBclhHNWNkRngwWEhRblluVjBJR2wwSUdoaGN5QnVieUJ0YjJSbGJDRW5LVHRjYmx4MGZWeHVYSFIyWVhJZ2JXOWtaV3dnUFNCMGFHbHpMbTF2WkdWc08xeHVYRzVjZEM4dklHcFJkV1Z5ZVNCelpXeGxZM1J2Y2lCbWIzSWdaM0poWW1KcGJtY2dZV3hzSUdWc1pXMWxiblJ6SUhjdklHUmhkR0VnWW1sdVpHbHVaM05jYmx4MGRtRnlJR0pwYm1ScGJtZFRaV3hsWTNSdmNpQTlJQ2RiWW1sdVpDMTBaWGgwWFN3Z09tMWhkR05vUVhSMGNpaGNJbDVpYVc1a0xXTnNZWE56TFNva1hDSXBKenRjYmx4dVhIUXZMeUJIWlhRZ1pXeGxiV1Z1ZEhNZ2FXNGdkR2hwY3lCamIyMXdiMjVsYm5RZ2QyaHBZMmdnYUdGMlpTQmtZWFJoSUdKcGJtUnBibWR6WEc1Y2RDOHZJQ2hwWjI1dmNtVnpJR052Ym5SbGJuUnpJRzltSUhKbFoybHZibk1nYVdZZ2RHaGxlU0JsZUdsemRDbGNibHgwZG1GeUlDUmliM1Z1WkVWc1pXMWxiblJ6SUQwZ1h5UnpaV3hsWTNSUGRYUmxjaTVqWVd4c0tIUm9hWE1zSUdKcGJtUnBibWRUWld4bFkzUnZjaWs3WEc1Y2JseDBMeThnVEc5dmNDQjBhSEp2ZFdkb0lHVmhZMmdnWW05MWJtUWdZWFIwY21saWRYUmxJRzltSUdWaFkyZ2dZbTkxYm1RZ1pXeGxiV1Z1ZEZ4dVhIUXZMeUJoYm1RZ1kyRnNiQ0IwYUdVZ1lYQndjbTl3Y21saGRHVWdjbVZ1WkdWeUlHMWxkR2h2WkM1Y2JseDBKR0p2ZFc1a1JXeGxiV1Z1ZEhNdVpXRmphQ2htZFc1amRHbHZiaUJsWVdOb1FtOTFibVJGYkdWdFpXNTBJQ2dwSUh0Y2JseDBYSFFrWW05MWJtUkZiQ0E5SUNRb2RHaHBjeWs3WEc1Y2JseDBYSFIyWVhJZ1lXeHNRWFIwY21saWRYUmxjeUE5SUNSaWIzVnVaRVZzV3pCZExtRjBkSEpwWW5WMFpYTTdYRzVjZEZ4MFh5NWxZV05vS0dGc2JFRjBkSEpwWW5WMFpYTXNJR1oxYm1OMGFXOXVJQ2hoZEhSeUtTQjdYRzVjZEZ4MFhIUjJZWElnWVhSMGNrNWhiV1VnUFNCaGRIUnlMbTV2WkdWT1lXMWxPMXh1WEc1Y2RGeDBYSFJmTG1WaFkyZ29JR1JoZEdGQ2FXNWthVzVuY3l3Z1puVnVZM1JwYjI0Z1pXRmphRUpwYm1ScGJtZEdiM0p0ZFd4aElDZ2dZbWx1WkdsdVp5QXBJSHRjYmx4MFhIUmNkRngwZG1GeUlHMWhkR05vWlhNZ1BTQmhkSFJ5VG1GdFpTNXRZWFJqYUNoaWFXNWthVzVuTG5KbFoyVjRjQ2s3WEc1Y2RGeDBYSFJjZEdsbUlDZ2diV0YwWTJobGN5QXBJSHRjYmx4MFhIUmNkRngwWEhSaWFXNWthVzVuTG1adUtDUmliM1Z1WkVWc0xDQnRiMlJsYkN3Z2JXRjBZMmhsY3lrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMHBPMXh1WEhSY2RIMHBPMXh1WEhSOUtUdGNibjA3WEc1Y2JseHVYRzVjYmk4cUtseHVJQ29nVEc5dmEzVndJSE4xYVhSaFlteGxJR1ZzWlcxbGJuUnpJSGRwZEdocGJpQjBhR2x6SUdOdmJYQnZibVZ1ZENkeklDUmxiQ0JqYjI1MFpYaDBMbHh1SUNvZ1NXZHViM0psSUhKbFoybHZibk1zSUdGdVpDQnBibU5zZFdSbElIUm9aU0IwYjNBdGJHVjJaV3dnWld4bGJXVnVkQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdZbWx1WkdsdVoxTmxiR1ZqZEc5eUlDMGdSRTlOSUhObGJHVmpkRzl5SUhSdklIVnpaVnh1SUNwY2JpQXFJRUJoY0drZ2NISnBkbUYwWlZ4dUlDb3ZYRzVjYm1aMWJtTjBhVzl1SUY4a2MyVnNaV04wVDNWMFpYSWdLQ0JpYVc1a2FXNW5VMlZzWldOMGIzSWdLU0I3WEc1Y2JseDBMeThnVEc5dmEzVndJRzFoZEdOb1pYTmNibHgwZG1GeUlDUnRZWFJqYUdWeklEMGdkR2hwY3k0a0tHSnBibVJwYm1kVFpXeGxZM1J2Y2lrN1hHNWNibHgwTHk4Z1NXWWdkRzl3TFd4bGRtVnNJR1ZzWlcxbGJuUWdhVzRnZEdWdGNHeGhkR1VnYUdGeklHRWdaR0YwWVMxaWFXNWthVzVuTENCcGJtTnNkV1JsSUdsMFhHNWNkR2xtSUNoMGFHbHpMaVJsYkM1bWFXeDBaWElvWW1sdVpHbHVaMU5sYkdWamRHOXlLU2tnZTF4dVhIUmNkQ1J0WVhSamFHVnpJRDBnSkM1dFpYSm5aU2drYldGMFkyaGxjeXdnZEdocGN5NGtaV3dwTzF4dVhIUjlYRzVjYmx4MEx5OGdUMjFwZENCaGJubDBhR2x1WnlCcGJuTnBaR1VnWVNCeVpXZHBiMjRzSUhOcGJtTmxJSFJvYjNObElHSnBibVJwYm1keklIZHBiR3dnYUdGMlpTQmhiSEpsWVdSNVhHNWNkQzh2SUdKbFpXNGdkR0ZyWlc0Z1kyRnlaU0J2WmlCaWVTQnZibVVnYjJZZ2RHaGxJR1JsYzJObGJtUmhiblFnWTI5dGNHOXVaVzUwS0hNcElIZHBkR2hwYmlCMGFHVWdjbVZuYVc5dUxseHVYSFF2TDF4dVhIUXZMeUJVVDBSUE9pQnZjSFJwYldsNlpTQjBieUJsZUdOc2RXUmxJSFJvWlhObElHVnNaVzFsYm5SeklHWnliMjBnZEdobElHOXlhV2RwYm1Gc0lFUlBUU0J6Wld4bFkzUnBiMjVjYmx4MEpHMWhkR05vWlhNZ1BTQWtiV0YwWTJobGN5NXViM1FvSUhSb2FYTXVKQ2duY21WbmFXOXVJQ29zSUZ0a1lYUmhMWEpsWjJsdmJsMGdLaWNwSUNrN1hHNWNibHgwY21WMGRYSnVJQ1J0WVhSamFHVnpPMXh1ZlZ4dVhHNWNibHh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4dlhHNHZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhmRnh1THk4Z1ZFOUVUem9nYlc5MlpTQjBhR2x6SUhSb2FXNW5JQ0FnWEZ3dlhHNHZMeUFnSUNBZ0lDQnBiblJ2SUdCMWRHbHNjMkFnY0hKaWJIbGNiaTh2WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsSUhCelpYVmtieTF6Wld4bFkzUnZjaUJtYjNJZ1oyVjBkR2x1WnlCM2FXeGtZMkZ5WkNCa1lYUmhJR0YwZEhKcFluVjBaWE11WEc0Z0tseHVJQ29nVlhOaFoyVTZYRzRnS2lBa0tGd2lPbTFoZEdOb1FYUjBjaWduWG1SaGRHRXRKeWxjSWlsY2JpQXFYRzRnS2lCVGIzVnlZMlU2WEc0Z0tpQm9kSFJ3T2k4dmMzUmhZMnR2ZG1WeVpteHZkeTVqYjIwdllTOHhNekl5TWpVd09TODBPRFkxTkRkY2JpQXFYRzRnS2lCQVlYQnBJSEJ5YVhaaGRHVmNiaUFxTDF4dVhHNXFVWFZsY25rdVpYaHdjaTV3YzJWMVpHOXpMbTFoZEdOb1FYUjBjaUE5SUNRdVpYaHdjaTVqY21WaGRHVlFjMlYxWkc4b1puVnVZM1JwYjI0b1lYSm5LU0I3WEc1Y2JpQWdJQ0IyWVhJZ2NtVm5aWGh3SUQwZ2JtVjNJRkpsWjBWNGNDaGhjbWNwTzF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGxiR1Z0S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaWgyWVhJZ2FTQTlJREE3SUdrZ1BDQmxiR1Z0TG1GMGRISnBZblYwWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoZEhSeUlEMGdaV3hsYlM1aGRIUnlhV0oxZEdWelcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9jbVZuWlhod0xuUmxjM1FvWVhSMGNpNXVZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5TzF4dWZTazdYRzVjYmk4dklDQXZYRnhjYmk4dklDQjhmRnh1THk5Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1WEc1Y2JseHVYRzVjYmx4dVhHNWNibHh1WEc1Y2JseHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh4OFhHNHZMeThnUTFWU1VrVk9WRXhaSUZWT1ZWTkZSQ0FnSUNCY1hDOWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzVjYmx4dUx5OGdVbVZuWlhod2N5Qm1iM0lnWkdWMFpXTjBhVzl1SUc5bUlIZHBiR1JqWVhKa0lHNWhiV1ZrSUhCaGNtRnRaWFJsY25NZ2FXNGdZM1Z6ZEc5dElHVnNaVzFsYm5RZ1lYUjBjbWxpZFhSbElHNWhiV1Z6TGx4dUx5OGdkbUZ5SUc5d2RHbHZibUZzVUdGeVlXMGdQU0F2WEZ3b0tDNHFQeWxjWENrdlp6dGNiaTh2SUhaaGNpQnVZVzFsWkZCaGNtRnRJRDBnTHloY1hDaGNYRDhwUHpwY1hIY3JMMmM3WEc0dkx5QjJZWElnYzNCc1lYUlFZWEpoYlNBOUlDOWNYQ3BjWEhjckwyYzdYRzR2THlCMllYSWdaWE5qWVhCbFVtVm5SWGh3SUQwZ0wxdGNYQzE3ZlZ4Y1cxeGNYU3MvTGl4Y1hGeGNYRnhlSkh3alhGeHpYUzluTzF4dVhHNWNiaTh2SUVKMWFXeGtJSE5sYkdWamRHOXlJR1p2Y2lCemRYQmxjbk5sZENCdlppQjBhR1Z6WlNCaWFXNWthVzVuYzF4dUx5OGdkbUZ5SUY5aGRIUnlUbUZ0WlZSdlVtVm5SWGh3SUQwZ1puVnVZM1JwYjI0b0lHRjBkSEpGZUhCeVpYTnphVzl1SUNrZ2UxeHVYRzR2THlCY2RHRjBkSEpGZUhCeVpYTnphVzl1SUQwZ1lYUjBja1Y0Y0hKbGMzTnBiMjR1Y21Wd2JHRmpaU2hsYzJOaGNHVlNaV2RGZUhBc0lDZGNYRnhjSkNZbktWeHVMeThnWEhSY2RDNXlaWEJzWVdObEtHOXdkR2x2Ym1Gc1VHRnlZVzBzSUNjb1B6b2tNU2svSnlsY2JpOHZJRngwWEhRdWNtVndiR0ZqWlNodVlXMWxaRkJoY21GdExDQm1kVzVqZEdsdmJpaHRZWFJqYUN3Z2IzQjBhVzl1WVd3cElIdGNiaTh2SUZ4MFhIUmNkSEpsZEhWeWJpQnZjSFJwYjI1aGJDQS9JRzFoZEdOb0lEb2dKeWhiWGx4Y0wxMHJLU2M3WEc0dkx5QmNkRngwZlNsY2JpOHZJRngwWEhRdWNtVndiR0ZqWlNoemNHeGhkRkJoY21GdExDQW5LQzRxUHlrbktUdGNiaTh2SUZ4MGNtVjBkWEp1SUNkZUp5QXJJR0YwZEhKRmVIQnlaWE56YVc5dUlDc2dKeVFuTzF4dUx5OGdmVHRjYmk4dklIWmhjaUJmWlhoMGNtRmpkRkJoY21GdFpYUmxjbk1nUFNCbWRXNWpkR2x2YmloeVpXZGxlSEFzSUdGMGRISk9ZVzFsTENCaGRIUnlSWGh3Y21WemMybHZiaWtnZTF4dUx5OGdYSFIyWVhJZ2NHRnlZVzFXWVd4MVpYTWdQU0J5WldkbGVIQXVaWGhsWXloaGRIUnlUbUZ0WlNrdWMyeHBZMlVvTVNrN1hHNHZMeUJjZEhaaGNpQndZWEpoYlV0bGVYTWdQU0J1WVcxbFpGQmhjbUZ0TG1WNFpXTW9ZWFIwY2tWNGNISmxjM05wYjI0cE8xeHVYRzR2THlCY2RHbG1JQ2doY0dGeVlXMUxaWGx6SUh4OElDRndZWEpoYlZaaGJIVmxjeWtnY21WMGRYSnVJSHQ5TzF4dVhHNHZMeUJjZEhaaGNpQnVZVzFsWkZCaGNtRnRaWFJsY25NZ1BTQjdmVHRjYmk4dklGeDBZMjl1YzI5c1pTNXNiMmNvSjNCaGNtRnRWbUZzZFdWek9pY3NjR0Z5WVcxV1lXeDFaWE1wTzF4dUx5OGdYSFJmTG1WaFkyZ29jR0Z5WVcxV1lXeDFaWE1zSUdaMWJtTjBhVzl1SUdWaFkyaE5ZWFJqYUdsdVoxQnBaV05sS0NCd1lYSmhiU3dnYVNBcElIdGNiaTh2SUZ4MFhIUjJZWElnYTJWNUlEMGdjR0Z5WVcxTFpYbHpXMmxkTzF4dUx5OGdYSFJjZEd0bGVTQTlJR3RsZVM1emJHbGpaU2d4S1RzZ0x5OGdjbVZ0YjNabElHQTZZQ0JtY205dElHNWhiV1ZrSUhCaGNtRnRYRzR2THlCY2RGeDBibUZ0WldSUVlYSmhiV1YwWlhKelcydGxlVjBnUFNCd1lYSmhiVlpoYkhWbGMxdHBYVHRjYmk4dklGeDBmU2s3WEc0dkx5QmNkSEpsZEhWeWJpQnVZVzFsWkZCaGNtRnRaWFJsY25NN1hHNHZMeUI5TzF4dVhHNWNibHh1THk4Z0x5b3FYRzR2THlBZ0tpQlNaVzVrWlhJZ1lTQnphVzVuYkdVZ1ltbHVaR2x1WjF4dUx5OGdJQ292WEc0dkx5QjJZWElnWDNKbGJtUmxja0pwYm1ScGJtY2dQU0JtZFc1amRHbHZiaUFvSkcxaGRHTm9aV1JGYkN3Z1pHOXRRWFIwY21saWRYUmxUbUZ0WlN3Z2JXOWtaV3dzSUhKbGJtUmxja1p1TENCdVlXMWxaRkJoY21GdGN5a2dlMXh1THk4Z1hIUjJZWElnY21GM1FtbHVaR2x1WnlBOUlDUnRZWFJqYUdWa1JXd3VZWFIwY2lnZ1pHOXRRWFIwY21saWRYUmxUbUZ0WlNBcE8xeHVMeThnWEhRdkx5QkpaaUJsYkdWdFpXNTBJR1J2WlhOdUozUWdZMjl1ZEdGcGJpQjBhR1VnYzNCbFkybG1hV1ZrSUVSUFRTQmhkSFJ5YVdKMWRHVXVMaTVjYmk4dklGeDBMeThnWm1GcGJDQnphV3hsYm5Sc2VTNWNiaTh2SUZ4MGFXWWdLQ0FoY21GM1FtbHVaR2x1WnlBcElISmxkSFZ5Ymp0Y2JseHVMeThnWEhRdkx5QmpiMjV6YjJ4bExteHZaeWduWjJWMGRHbHVaeUFuTEdSdmJVRjBkSEpwWW5WMFpVNWhiV1VzSjI5dUp5d2tiV0YwWTJobFpFVnNLVHRjYmk4dklGeDBkbUZ5SUcxdlpHVnNRWFIwY21saWRYUmxUbUZ0WlNBOUlISmhkMEpwYm1ScGJtY3VjbVZ3YkdGalpTZ3ZYbHhjUUM4c0lDY25LVHRjYmk4dklGeDBSbEpCVFVWWFQxSkxMbVJsWW5WbktDZEdiM1Z1WkNCaElHSnBibVJwYm1jZ09qb25MQ0J5WVhkQ2FXNWthVzVuTENBbk9qb25MQ0J1WVcxbFpGQmhjbUZ0Y3lrN1hHNWNiaTh2SUZ4MEx5OGdTV1lnYlc5a1pXd2daRzlsYzI0bmRDQmpiMjUwWVdsdUlIUm9aU0J6Y0dWamFXWnBaV1FnWVhSMGNtbGlkWFJsTGk0dVhHNHZMeUJjZEdsbUlDZ2dkSGx3Wlc5bUlHMXZaR1ZzTG1GMGRISnBZblYwWlhOYmJXOWtaV3hCZEhSeWFXSjFkR1ZPWVcxbFhTQTlQVDBnSjNWdVpHVm1hVzVsWkNjZ0tTQjdYRzVjYmk4dklGeDBYSFF2THlCbVlXbHNJSE5wYkdWdWRHeDVMbHh1THk4Z1hIUmNkSEpsZEhWeWJqdGNiaTh2SUZ4MFhIUXZMeUJHVWtGTlJWZFBVa3N1ZDJGeWJpZ25RMkZ1Ym05MElHSnBibVFnWUVBbksyMXZaR1ZzUVhSMGNtbGlkWFJsVG1GdFpTc25JR1p2Y2lCMFpXMXdiR0YwWlM5amIyMXdiMjVsYm5RZ0p5QXJYRzR2THlCY2RGeDBMeThnWEhRbllDY2dLeUJqYjIxd2IyNWxiblF1YVdRZ0t5ZGdMbHhjYmljclhHNHZMeUJjZEZ4MEx5OGdYSFFuVG04Z2MzVmphQ0JoZEhSeWFXSjFkR1VnWlhocGMzUnpJR2x1SUhSb1pTQmpiMjF3YjI1bGJuUmNYQ2R6SUcxdlpHVnNMaWRjYmk4dklGeDBYSFF2THlBcE8xeHVMeThnWEhSOVhHNWNiaTh2SUZ4MEx5OGdVbVZ1WkdWeUlHRWdaR0YwWVNCaWFXNWthVzVuWEc0dkx5QmNkSFpoY2lCaWFXNWthVzVuVm1Gc0lEMGdiVzlrWld3dVoyVjBLRzF2WkdWc1FYUjBjbWxpZFhSbFRtRnRaU2tnZkh3Z0p5YzdYRzR2THlCY2RISmxibVJsY2tadUtDQWtiV0YwWTJobFpFVnNMQ0JpYVc1a2FXNW5WbUZzTENCdVlXMWxaRkJoY21GdGN5QXBPMXh1THk4Z2ZUdGNibHh1WEc0dkx5QXZLaXBjYmk4dklDQXFJRkpsYm1SbGNpQjBhR1VnYzNCbFkybG1hV1ZrSUhSNWNHVWdiMllnWkdGMFlTQmlhVzVrYVc1bmMxeHVMeThnSUNwY2JpOHZJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpYRzR2THlBZ0tseDBYSFJBYjNCMGFXOXVJSHRHZFc1amRHbHZibjBnY21WdVpHVnlSbTRnS0NSbGJDd2dkbUZzTENCd1lYSmhiWE1wWEhRdFBpQm1kVzVqZEdsdmJpQjNhR2xqYUNCeVpXNWtaWEp6SUhSb1pTQmtZWFJoSUdKcGJtUnBibWNnWm05eUlIUm9aU0J6Y0dWamFXWnBaV1FnWld4bGJXVnVkRnh1THk4Z0lDcGNkRngwWEhSQWNHRnlZVzBnZTBwUmRXVnllVVZzWlcxbGJuUjlJQ1JsYkZ4dUx5OGdJQ3BjZEZ4MFhIUkFjR0Z5WVcwZ2V6OTlJSFpoYkNBdFBpQjJZV3gxWlNCdlppQmliM1Z1WkNCdGIyUmxiQ0JoZEhSeWFXSjFkR1ZjYmk4dklDQXFYSFJjZEZ4MFFIQmhjbUZ0SUh0UFltcGxZM1I5SUhCaGNtRnRjeUF0UGlCclpYbGxaQ0J2WW1wbFkzUWdiMllnWkhsdVlXMXBZeUJ3WVhKaGJXVjBaWEp6SUdaeWIyMGdkR2hsSUc1aGJXVWdiMllnZEdobElHRjBkSEpwWW5WMFpTQnBkSE5sYkdaY2JpOHZJQ0FxWEhSY2RFQnZjSFJwYjI0Z2UxTjBjbWx1WjMwZ1lYUjBjbWxpZFhSbElDMCtJRzVoYldVZ2IyWWdZbTkxYm1RZ1lYUjBjbWxpZFhSbExDQmxMbWN1SUNkaWFXNWtMWFJsZUhRblhHNHZMeUFnS2x4MFhIUkFiM0IwYVc5dUlIdERiMjF3YjI1bGJuUjlJR052YlhCdmJtVnVkRnh1THk4Z0lDcGNkRngwUUc5d2RHbHZiaUI3UW1GamEySnZibVV1VFc5a1pXeDlJRnR0YjJSbGJGMGdMU0JrWldaaGRXeDBjeUIwYnlCZ1kyOXRjRzl1Wlc1MExtMXZaR1ZzWUZ4dUx5OGdJQ292WEc0dkx5QjJZWElnWDNKbGJtUmxja0pwYm1ScGJtZHpJRDBnWm5WdVkzUnBiMjRnS0NCdmNIUnBiMjV6SUNrZ2UxeHVMeThnWEhSMllYSWdZMjl0Y0c5dVpXNTBJRDBnYjNCMGFXOXVjeTVqYjIxd2IyNWxiblE3WEc0dkx5QmNkSFpoY2lCaGRIUnlhV0oxZEdWRmVIQnlaWE56YVc5dUlEMGdiM0IwYVc5dWN5NWhkSFJ5YVdKMWRHVTdYRzR2THlCY2RIWmhjaUJ0YjJSbGJDQTlJRzl3ZEdsdmJuTXViVzlrWld3Z2ZId2diM0IwYVc5dWN5NWpiMjF3YjI1bGJuUXViVzlrWld3N1hHNWNibHh1THk4Z1hIUXZMeUJEWVd4amRXeGhkR1VnYzNSeWFXNW5JSGRvYVdOb0lHTmhiaUJpWlNCY0ltNWxkeTFsWkZ3aUlHbHVkRzhnWVNCU1pXZEZlSEJjYmk4dklGeDBkbUZ5SUdGMGRISlNaV2RGZUhCVGRISWdQU0JmWVhSMGNrNWhiV1ZVYjFKbFowVjRjQ2hoZEhSeWFXSjFkR1ZGZUhCeVpYTnphVzl1S1R0Y2JpOHZJRngwZG1GeUlHRjBkSEpTWldkRmVIQWdQU0J1WlhjZ1VtVm5SWGh3S0dGMGRISlNaV2RGZUhCVGRISXBPMXh1WEc1Y2JpOHZJRngwZG1GeUlHSnZkVzVrUVhSMGNsTmxiR1ZqZEc5eUlEMGdKenB0WVhSamFFRjBkSElvWENJbklDc2dZWFIwY2xKbFowVjRjRk4wY2lBcklDZGNJaWtuTzF4dVhHNHZMeUJjZEM4dklFWnBibVFnWVd4c0lISmxiR1YyWVc1MElHUmxjMk5sYm1SaGJuUWdaV3hsYldWdWRITmNiaTh2SUZ4MGRtRnlJQ1J0WVhSamFHVnpJRDBnWDJkbGRDUk5ZWFJqYUdWektHSnZkVzVrUVhSMGNsTmxiR1ZqZEc5eUxDQmpiMjF3YjI1bGJuUXBPMXh1WEc0dkx5QmNkQzh2SUVWaGNteDVJR1Y0YVhRZ1ptOXlJSE5wYlhCc1pTQmlhVzVrYVc1bmN5QW9keTl2SUdKdmRXNWtJSEJoY21GdGN5bGNiaTh2SUZ4MGFXWWdLQ0FoWVhSMGNtbGlkWFJsUlhod2NtVnpjMmx2Ymk1dFlYUmphQ2d2WEZ3Nkx5a3BJSHRjYmk4dklGeDBYSFFrYldGMFkyaGxjeTVsWVdOb0tHWjFibU4wYVc5dUlDZ3BJSHRjYmk4dklGeDBYSFJjZEY5eVpXNWtaWEpDYVc1a2FXNW5LQ1FvZEdocGN5a3NJR0YwZEhKcFluVjBaVVY0Y0hKbGMzTnBiMjRzSUcxdlpHVnNMQ0J2Y0hScGIyNXpMbkpsYm1SbGNrWnVMQ0I3ZlNrN1hHNWNiaTh2SUZ4MFhIUjlLVHRjYmk4dklGeDBYSFJ5WlhSMWNtNDdYRzR2THlCY2RIMWNibHh1THk4Z1hIUmpiMjV6YjJ4bExteHZaeWduWEZ4dVVtVnVaR1Z5YVc1bklIQmhjbUZ0WlhSbGNtbDZaV1FnWkdGMFlTQmlhVzVrYVc1bk9pQW5MR0YwZEhKU1pXZEZlSEFwTzF4dVhHNHZMeUJjZEM4dklGUlBSRTg2SUdKaGRHTm9JR2wwSUhWd0lITnZJSGRsSUc5dWJIa2daRzhnYjI1bElFUlBUU0J4ZFdWeWVWeHVMeThnWEhRa2JXRjBZMmhsY3k1bFlXTm9LR1oxYm1OMGFXOXVJR1ZoWTJoRmJHVnRaVzUwVjJsMGFFRkNhVzVrYVc1bklDZ3BJSHRjYmk4dklGeDBYSFIyWVhJZ0pHMWhkR05vWldSRmJDQTlJQ1FvZEdocGN5azdYRzVjYmk4dklGeDBYSFF2THlCSFpYUWdZV3hzSUdGMGRISnBZblYwWlhNZ1ptOXlJSFJvYVhNZ0pHVnNJR0Z1WkNCbWFXeDBaWElnWVNCelpYUWdiMllnYldGMFkyaHBibWNnYm1GdFpYTXZjR0Z5WVcxelhHNHZMeUJjZEZ4MGRtRnlJR0ZzYkVSUFRVRjBkSEpPWVcxbGN5QTlJRjh1YldGd0tDQWtiV0YwWTJobFpFVnNXekJkTG1GMGRISnBZblYwWlhNc0lHWjFibU4wYVc5dUlDaGxiQ2tnZTF4dUx5OGdYSFJjZEZ4MGNtVjBkWEp1SUdWc0xtNXZaR1ZPWVcxbE8xeHVMeThnWEhSY2RIMHBPMXh1THk4Z1hIUmNkR052Ym5OdmJHVXViRzluS0NkaGJHeEVUMDFCZEhSeVRtRnRaWE1nWm05eUlHVnNKeXhoYkd4RVQwMUJkSFJ5VG1GdFpYTXNJQ1J0WVhSamFHVmtSV3dwTzF4dUx5OGdYSFJjZEhaaGNpQnRZWFJqYUdsdVowUlBUVUYwZEhKeklEMGdlMzA3WEc0dkx5QmNkRngwWHk1bFlXTm9LQ0JoYkd4RVQwMUJkSFJ5VG1GdFpYTXNJR1oxYm1OMGFXOXVJR1ZoWTJoQmRIUnlhV0oxZEdVZ0tDQmtiMjFCZEhSeVRtRnRaU0FwSUh0Y2JpOHZJRngwWEhSY2RDOHZJR052Ym5OdmJHVXViRzluS0NkamFHVmphMmx1Wnljc1pHOXRRWFIwY2s1aGJXVXBPMXh1THk4Z1hIUmNkRngwYVdZZ0tDQmtiMjFCZEhSeVRtRnRaUzV0WVhSamFDaGhkSFJ5VW1WblJYaHdLU2tnZTF4dUx5OGdYSFJjZEZ4MFhIUnRZWFJqYUdsdVowUlBUVUYwZEhKelcyUnZiVUYwZEhKT1lXMWxYU0E5SUY5bGVIUnlZV04wVUdGeVlXMWxkR1Z5Y3lnZ1lYUjBjbEpsWjBWNGNDd2daRzl0UVhSMGNrNWhiV1VzSUdGMGRISnBZblYwWlVWNGNISmxjM05wYjI0Z0tUdGNiaTh2SUZ4MFhIUmNkRngwTHk4Z1kyOXVjMjlzWlM1c2IyY29KeXdnWjI5MEp5eHRZWFJqYUdsdVowUlBUVUYwZEhKelcyUnZiVUYwZEhKT1lXMWxYU3dnSnlBb0tDZ25MR1J2YlVGMGRISk9ZVzFsTENCaGRIUnlhV0oxZEdWRmVIQnlaWE56YVc5dUtUdGNiaTh2SUZ4MFhIUmNkSDFjYmk4dklGeDBYSFI5S1R0Y2JseHVYRzR2THlCY2RGeDBZMjl1YzI5c1pTNXNiMmNvSnlBcUtpb3FJRzFoZEdOb2FXNW5SRTlOUVhSMGNuTWdPam9uTENCdFlYUmphR2x1WjBSUFRVRjBkSEp6S1R0Y2JseHVMeThnWEhSY2RIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmFIZGhZV0VuS1R0Y2JpOHZJRngwWEhSZkxtVmhZMmdvYldGMFkyaHBibWRFVDAxQmRIUnljeXdnWm5WdVkzUnBiMjRnS0NCdVlXMWxaRkJoY21GdGN5d2daRzl0UVhSMGNtbGlkWFJsVG1GdFpTQXBJSHRjYmk4dklGeDBYSFJjZEY5eVpXNWtaWEpDYVc1a2FXNW5LQ1J0WVhSamFHVmtSV3dzSUdSdmJVRjBkSEpwWW5WMFpVNWhiV1VzSUcxdlpHVnNMQ0J2Y0hScGIyNXpMbkpsYm1SbGNrWnVMQ0J1WVcxbFpGQmhjbUZ0Y3lrN1hHNHZMeUJjZEZ4MGZTazdYRzVjYmk4dklGeDBmU2s3WEc0dkx5QjlPMXh1WEc1Y2JseHVJaXdpTHlvcVhHNGdLaUJOYjJSMWJHVWdaR1Z3Wlc1a1pXNWphV1Z6WEc0Z0tpOWNiblpoY2lCa1pXeGxkR1ZCYkd4U1pXZHBiMjV6SUQwZ2NtVnhkV2x5WlNnbkxpOWtaV3hsZEdWQmJHeFNaV2RwYjI1ekp5a3NYRzVjZEdWc01rUmxabUYxYkhSVVpXMXdiR0YwWlVsRUlEMGdjbVZ4ZFdseVpTZ25MaTR2ZFhScGJITXZaV3d5UkdWbVlYVnNkRlJsYlhCc1lYUmxTVVFuS1R0Y2JseHVYRzVjYmk4cUtseHVJQ29nU1c1emRHRnVkR2xoZEdVZ2NtVm5hVzl1SUdOdmJYQnZibVZ1ZEhNZ1lXNWtJR0Z3Y0dWdVpDQmhibmtnWkdWbVlYVnNkRnh1SUNvZ2RHVnRjR3hoZEdWekwyTnZiWEJ2Ym1WdWRITWdkRzhnZEdobElFUlBUVnh1SUNvdlhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdjbVZ1WkdWeVVtVm5hVzl1Y3lBb0tTQjdYRzVjZEhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmx4dVhIUmtaV3hsZEdWQmJHeFNaV2RwYjI1ektDazdYRzVjYmx4MEx5OGdWRTlFVHpvZ1oyVjBJR05zYjNObGMzUWdaR1Z6WTJWdVpHRnVkQ0J5WldkcGIyNXpMQ0J1YjNRZ1lXeHNJR1JsYzJObGJtUmhiblFnY21WbmFXOXVjMXh1WEc1Y2RDOHZJRVJsZEdWamRDQmphR2xzWkNCeVpXZHBiMjV6SUdsdUlIUmxiWEJzWVhSbFhHNWNkSFpoY2lBa2NtVm5hVzl1Y3lBOUlIUm9hWE11SkNnbmNtVm5hVzl1TENCYlpHRjBZUzF5WldkcGIyNWRKeWs3WEc1Y2JseDBMeThnUW5WMElHRnNjMjhnWTJobFkyc2dkR2hsSUhSdmNDMXNaWFpsYkNCbGJHVnRaVzUwSUc5bUlIUm9aU0JqYjIxd2IyNWxiblFuY3lCMFpXMXdiR0YwWlNCcGRITmxiR1lzWEc1Y2RDOHZJR2x1SUdOaGMyVWdkR2hsSUhSdmNDMXNaWFpsYkNCbGJHVnRaVzUwSUdseklFbFVVeUJQVjA0Z2NtVm5hVzl1WEc1Y2RDUnlaV2RwYjI1eklEMGdKSEpsWjJsdmJuTXVZV1JrS0NCMGFHbHpMaVJsYkM1bWFXeDBaWElvSjNKbFoybHZiaXdnVzJSaGRHRXRjbVZuYVc5dVhTY3BJQ2s3WEc1Y2JseDBKSEpsWjJsdmJuTXVaV0ZqYUNobWRXNWpkR2x2YmlBb2FTd2daV3dwSUh0Y2JseHVYSFJjZEM4dklFUmxkR1ZqZENCa1pXWmhkV3gwSUdOdmJYQnZibVZ1ZENCcFpDQm1iM0lnWTJocGJHUWdjbVZuYVc5dVhHNWNkRngwZG1GeUlHUmxabUYxYkhSRGIyMXdiMjVsYm5SSlpDQTlJR1ZzTWtSbFptRjFiSFJVWlcxd2JHRjBaVWxFS0dWc0tUdGNibHh1WEhSY2RDOHZJRWRsYm1WeVlYUmxJR0VnY21WbmFXOXVJR2x1YzNSaGJtTmxJR1p5YjIwZ2RHaGxJR1ZzWlcxbGJuUmNibHgwWEhRdkx5QW9iVzlrYVdaNWFXNW5JSFJvWlNCRVQwMGdZWE1nYm1WalpYTnpZWEo1S1Z4dVhIUmNkSFpoY2lCeVpXZHBiMjRnUFNCR1VrRk5SVmRQVWtzdVVtVm5hVzl1TG1aeWIyMUZiR1Z0Wlc1MEtHVnNMQ0J6Wld4bUtUdGNibHh1WEhSY2RDOHZJRWxtSUhKbFoybHZiaUJvWVhNZ2JtOGdhV1FzSUdkbGJtVnlZWFJsSUdFZ2RXNXBjWFZsSUhKbFoybHZiaUJwWkNCM0wya2dkR2hwY3lCamIyMXdiMjVsYm5SY2JseDBYSFF2THlCMGFHRjBJR2x6SUhWdWJHbHJaV3g1SUhSdklHTnZiR3hwWkdVZ2QybDBhQ0J0ZVNCdmRHaGxjaUJ1WVcxbFpDQnlaV2RwYjI1elhHNWNkRngwYVdZZ0tDRnlaV2RwYjI0dWFXUXBJSHRjYmx4MFhIUmNkSEpsWjJsdmJpNXBaQ0E5SUNjbksxeHVYSFJjZEZ4MFhIUkdVa0ZOUlZkUFVrc3ViM0IwYVc5dWN5NW1jbUZ0WlhkdmNtdEpaQ0FyWEc1Y2RGeDBYSFJjZENkZlgyRnViMjU1Ylc5MWMxOXlaV2RwYjI1Zlh5Y2dLMXh1WEhSY2RGeDBYSFJ6Wld4bUxtRnViMjU1Ylc5MWMxSmxaMmx2YmtOdmRXNTBaWEk3WEc1Y2JseDBYSFJjZEM4dklFbHVZM0psYldWdWRDQmpiM1Z1ZEdWeUlHWnZjaUJ1WlhoMElIUnBiV1ZjYmx4MFhIUmNkSE5sYkdZdVlXNXZibmx0YjNWelVtVm5hVzl1UTI5MWJuUmxjaXNyTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUV0bFpYQWdkSEpoWTJzZ2IyWWdjbVZuYVc5dWN5d2djMmx1WTJVZ2QyVWdZWEpsSUhSb1pTQndZWEpsYm5RZ1kyOXRjRzl1Wlc1MFhHNWNkRngwYzJWc1ppNXlaV2RwYjI1elczSmxaMmx2Ymk1cFpGMGdQU0J5WldkcGIyNDdYRzVjYmx4MFhIUXZMeUJCY3lCc2IyNW5JR0Z6SUhSb1pYSmxJR0Z5WlNCdWJ5QmpiMnhzYVhOcGIyNXpMQ0JoYkhOdklIQnliM1pwWkdVZ1lXTmpaWE56SUhSdklIUm9aU0J5WldkcGIyNWNibHgwWEhRdkx5QnZiaUIwYUdVZ2RHOXdJR3hsZG1Wc0lHOW1JSFJvWlNCamIyMXdiMjVsYm5Rc0lHVXVaeTRnYzI4Z2VXOTFJR05oYmlCa2J5QmdkR2hwY3k1dGVWSmxaMmx2Ym1CY2JseDBYSFF2THlCcGJpQjViM1Z5SUdOdmJYQnZibVZ1ZENCdFpYUm9iMlJ6TGx4dVhIUmNkR2xtSUNnaGMyVnNabHR5WldkcGIyNHVhV1JkS1NCN1hHNWNkRngwWEhSelpXeG1XM0psWjJsdmJpNXBaRjBnUFNCeVpXZHBiMjQ3WEc1Y2RGeDBmVnh1WEhSOUtUdGNibjA3WEc1Y2JpSXNJaThxS2x4dUlDb2dRMmhsWTJzZ2RHaGxJSE53WldOcFptbGxaQ0JrWldacGJtbDBhVzl1SUdadmNpQnZZblpwYjNWeklHMXBjM1JoYTJWekxDQmxjM0JsWTJsaGJHeDVJR3hwYTJWc2VTQmtaWEJ5WldOaGRHbHZibk1nWVc1a1hHNGdLaUIyWVd4cFpHRjBaU0IwYUdGMElIUm9aU0J0YjJSbGJDQmhibVFnWTI5c2JHVmpkR2x2Ym5NZ1lYSmxJR2x1YzNSaGJtTmxjeUJ2WmlCQ1lXTnJZbTl1WlNkeklFUmhkR0VnYzNSeWRXTjBkWEpsY3k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnY0hKdmNHVnlkR2xsY3lCYlQySnFaV04wSUdOdmJuUmhhVzVwYm1jZ2RHaGxJSEJ5YjNCbGNuUnBaWE1nYjJZZ2RHaGxJR052YlhCdmJtVnVkRjFjYmlBcUwxeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxSR1ZtYVc1cGRHbHZiaWh3Y205d1pYSjBhV1Z6S1NCN1hHNWNibHgwYVdZZ0tGOHVhWE5QWW1wbFkzUW9jSEp2Y0dWeWRHbGxjeWtwSUh0Y2JseHVYSFJjZEM4dklFUmxkR1Z5YldsdVpTQmpiMjF3YjI1bGJuUWdhV1JjYmx4MFhIUjJZWElnYVdRZ1BTQjBhR2x6TG1sa0lIeDhJSEJ5YjNCbGNuUnBaWE11YVdRN1hHNWNibHgwWEhSbWRXNWpkR2x2YmlCZmRtRnNhV1JoZEdWQ1lXTnJZbTl1WlVsdWMzUmhibU5sSUNoMGVYQmxLU0I3WEc1Y2RGeDBYSFIyWVhJZ1ZIbHdaU0E5SUhSNWNHVmJNRjB1ZEc5VmNIQmxja05oYzJVb0tTQXJJSFI1Y0dVdWMyeHBZMlVvTVNrN1hHNWNibHgwWEhSY2RHbG1JQ2dnSVhCeWIzQmxjblJwWlhOYmRIbHdaVjBnYVc1emRHRnVZMlZ2WmlCQ1lXTnJZbTl1WlZ0VWVYQmxYU0FwSUh0Y2JseHVYSFJjZEZ4MFhIUkdjbUZ0WlhkdmNtc3VaWEp5YjNJb1hHNWNkRngwWEhSY2RGeDBKME52YlhCdmJtVnVkQ0FvSnlBcklHbGtJQ3NnSnlrZ2FHRnpJR0Z1SUdsdWRtRnNhV1FnSnlBcklIUjVjR1VnS3lBbkxTMGdYRnh1SnlBclhHNWNkRngwWEhSY2RGeDBKMGxtSUdBbklDc2dkSGx3WlNBcklDZGdJR2x6SUhOd1pXTnBabWxsWkNCbWIzSWdZU0JqYjIxd2IyNWxiblFzSUNjZ0sxeHVYSFJjZEZ4MFhIUmNkQ2RwZENCdGRYTjBJR0psSUdGdUlDcHBibk4wWVc1alpTb2diMllnWVNCQ1lXTnJZbTl1WlM0bklDc2dWSGx3WlNBcklDY3VYRnh1SnlrN1hHNWNibHgwWEhSY2RGeDBhV1lnS0hCeWIzQmxjblJwWlhOYmRIbHdaVjBnYVc1emRHRnVZMlZ2WmlCQ1lXTnJZbTl1WlZ0VWVYQmxYUzVqYjI1emRISjFZM1J2Y2lrZ2UxeHVYSFJjZEZ4MFhIUmNkRVp5WVcxbGQyOXlheTVsY25KdmNpaGNibHgwWEhSY2RGeDBYSFJjZENkSmRDQnNiMjlyY3lCc2FXdGxJR0VnUW1GamEySnZibVV1SnlBcklGUjVjR1VnS3lBbklDcHdjbTkwYjNSNWNHVXFJSGRoY3lCemNHVmphV1pwWldRZ2FXNXpkR1ZoWkNCdlppQmhJQ2NnSzF4dVhIUmNkRngwWEhSY2RGeDBKMEpoWTJ0aWIyNWxMaWNnS3lCVWVYQmxJQ3NnSnlBcWFXNXpkR0Z1WTJVcUxseGNiaWNnSzF4dVhIUmNkRngwWEhSY2RGeDBKMUJzWldGelpTQmdibVYzWUNCMWNDQjBhR1VnSnlBcklIUjVjR1VnS3lBbklDMWlaV1p2Y21VdElDY2dLeUJHY21GdFpYZHZjbXN1YVdRZ0t5QW5MbkpoYVhObEtDa3NKeUFyWEc1Y2RGeDBYSFJjZEZ4MFhIUW5iM0lnZFhObElHRWdkM0poY0hCbGNpQm1kVzVqZEdsdmJpQjBieUJoWTJocFpYWmxJSFJvWlNCellXMWxJR1ZtWm1WamRDd2daUzVuTGpwY1hHNG5JQ3RjYmx4MFhIUmNkRngwWEhSY2RDZGdKeUFySUhSNWNHVWdLeUFuT2lCbWRXNWpkR2x2YmlBb0tTQjdYRnh1Y21WMGRYSnVJRzVsZHlCVGIyMWxKeUFySUZSNWNHVWdLeUFuS0NrN1hGeHVmV0FuWEc1Y2RGeDBYSFJjZEZ4MEtUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEVaeVlXMWxkMjl5YXk1M1lYSnVLQ2RKWjI1dmNtbHVaeUJwYm5aaGJHbGtJQ2NnS3lCMGVYQmxJQ3NnSnlBNk9pQW5JQ3NnY0hKdmNHVnlkR2xsYzF0MGVYQmxYU2s3WEc1Y2RGeDBYSFJjZEdSbGJHVjBaU0J3Y205d1pYSjBhV1Z6VzNSNWNHVmRPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRU5vWldOcklIUm9ZWFFnZEdocGN5NWpiMnhzWldOMGFXOXVJR2x6SUdGamRIVmhiR3g1SUdGdUlHbHVjM1JoYm1ObElHOW1JRUpoWTJ0aWIyNWxMa052Ykd4bFkzUnBiMjVjYmx4MFhIUXZMeUJoYm1RZ2RHaGhkQ0IwYUdsekxtMXZaR1ZzSUdseklHRmpkSFZoYkd4NUlHRnVJR2x1YzNSaGJtTmxJRzltSUVKaFkydGliMjVsTGsxdlpHVnNYRzVjZEZ4MFgzWmhiR2xrWVhSbFFtRmphMkp2Ym1WSmJuTjBZVzVqWlNnbmJXOWtaV3duS1R0Y2JseDBYSFJmZG1Gc2FXUmhkR1ZDWVdOclltOXVaVWx1YzNSaGJtTmxLQ2RqYjJ4c1pXTjBhVzl1SnlrN1hHNWNibHgwWEhRdkx5QkRiRzl1WlNCd2NtOXdaWEowYVdWeklIUnZJR0YyYjJsa0lHbHVZV1IyWlhKMFpXNTBJRzF2WkdsbWFXTmhkR2x2Ym5OY2JseDBYSFJ5WlhSMWNtNGdYeTVqYkc5dVpTaHdjbTl3WlhKMGFXVnpLVHRjYmx4MGZWeHVYRzVjZEdWc2MyVWdjbVYwZFhKdUlIdDlPMXh1WEc1OVhHNGlMQ0l2S2lwY2JpQXFJRkoxYmlCa1pXWnBibWwwYVc5dUlHMWxkR2h2WkhNZ2RHOGdaMlYwSUdGamRIVmhiQ0JqYjIxd2IyNWxiblFnWkdWbWFXNXBkR2x2Ym5NdVhHNGdLaUJVYUdseklHbHpJR1JsWm1WeWNtVmtJSFJ2SUdGMmIybGtJR2hoZG1sdVp5QjBieUIxYzJVZ1FtRmphMkp2Ym1VbmN5Qm1kVzVqZEdsdmJpQW9LU0I3ZlNCaGNIQnliMkZqYUNCbWIzSWdkR2hwYm1kelhHNGdLaUJzYVd0bElHTnZiR3hsWTNScGIyNXpMbHh1SUNvdlhHNWNiaThxS2x4dUlDb2dRblZwYkdRZ2RYQnpJR0VnWTI5dGNHOXVaVzUwSUdSbFptbHVhWFJwYjI0Z1lua2djblZ1Ym1sdVp5QjBhR1VnWkdWbWFXNXBkR2x2Ymk0Z1YyVWdkR2hsYmlCc2FXNXJJSFJvWlZ4dUlDb2dZMjl0Y0c5dVpXNTBJR1JsWm1sdWFYUnBiMjRnZEc4Z1lXNGdhV1JsYm5ScFptbGxjaUJwYmlCZ1JsSkJUVVZYVDFKTExtTnZiWEJ2Ym1WdWRITmdMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQWdlMDlpYW1WamRIMGdZMjl0Y0c5dVpXNTBJRnRQWW1wbFkzUWdZMjl1ZEdGcGJtbHVaeUIwYUdVZ1pHVm1hVzVwZEdsdmJpQm1kVzVqZEdsdmJpQnZaaUIwYUdVZ1kyOXRjRzl1Wlc1MFhWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUdKMWFXeGtRMjl0Y0c5dVpXNTBSR1ZtYVc1cGRHbHZiaWhqYjIxd2IyNWxiblFwSUh0Y2JseDBkbUZ5SUdOdmJYQnZibVZ1ZEVSbFppQTlJR052YlhCdmJtVnVkQzVrWldacGJtbDBhVzl1S0NrN1hHNWNibHgwYVdZZ0tHTnZiWEJ2Ym1WdWRDNXBaRTkyWlhKeWFXUmxLU0I3WEc1Y2RGeDBhV1lnS0dOdmJYQnZibVZ1ZEVSbFppNXBaQ2tnZTF4dVhIUmNkRngwZEdoeWIzY2dibVYzSUVWeWNtOXlLR052YlhCdmJtVnVkQzVwWkU5MlpYSnlhV1JsSUNzZ0p6bzZJRU5oYm01dmRDQnpjR1ZqYVdaNUlHRnVJR2xrVDNabGNuSnBaR1VnYVc0Z0xtUmxabWx1WlNncElHbG1JR0Z1SUdsa0lIQnliM0JsY25SNUlDZ25LMk52YlhCdmJtVnVkRVJsWmk1cFpDc25LU0JwY3lCaGJISmxZV1I1SUhObGRDQnBiaUI1YjNWeUlHTnZiWEJ2Ym1WdWRDQmtaV1pwYm1sMGFXOXVJVnhjYmxWellXZGxPaUF1WkdWbWFXNWxLRnRwWkU5MlpYSnlhV1JsWFN3Z1pHVm1hVzVwZEdsdmJpa25LVHRjYmx4MFhIUjlYRzVjZEZ4MFkyOXRjRzl1Wlc1MFJHVm1MbWxrSUQwZ1kyOXRjRzl1Wlc1MExtbGtUM1psY25KcFpHVTdYRzVjZEgxY2JseDBhV1lnS0NGamIyMXdiMjVsYm5SRVpXWXVhV1FwSUh0Y2JseDBYSFIwYUhKdmR5QnVaWGNnUlhKeWIzSW9KME5oYm01dmRDQjFjMlVnTG1SbFptbHVaU2dwSUhkcGRHaHZkWFFnWkdWbWFXNXBibWNnWVc0Z2FXUWdjSEp2Y0dWeWRIa2diM0lnYjNabGNuSnBaR1VnYVc0Z2VXOTFjaUJqYjIxd2IyNWxiblFoWEZ4dVZYTmhaMlU2SUM1a1pXWnBibVVvVzJsa1QzWmxjbkpwWkdWZExDQmtaV1pwYm1sMGFXOXVLU2NwTzF4dVhIUjlYRzVjZEVaU1FVMUZWMDlTU3k1amIyMXdiMjVsYm5SelcyTnZiWEJ2Ym1WdWRFUmxaaTVwWkYwZ1BTQmpiMjF3YjI1bGJuUkVaV1k3WEc1OU8xeHVJaXdpTHlvcVhHNGdLaUJQY0hScGIyNWhiQ0J0WlhSb2IyUWdkRzhnY21WeGRXbHlaU0JoY0hBZ1kyOXRjRzl1Wlc1MGN5NGdVbVZ4ZFdseVpTNXFjeUJqWVc0Z1ltVWdkWE5sWkNCcGJuTjBaV0ZrWEc0Z0tpQmhjeUJ1WldWa1pXUXVYRzRnS2x4dUlDb2dRSEJoY21GdElDQjdVM1J5YVc1bmZTQmNkRnNvYjNCMGFXOXVZV3dwSUVOdmJYQnZibVZ1ZENCcFpDQnZkbVZ5Y21sa1pWMWNiaUFxSUVCd1lYSmhiU0FnZTBaMWJtTjBhVzl1ZlNCYlJuVnVZM1JwYjI0Z1JHVm1hVzVwZEdsdmJpQnZaaUJqYjIxd2IyNWxiblJkWEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdaR1ZtYVc1bEtHbGtMQ0JrWldacGJtbDBhVzl1Um00cElIdGNibHgwTHk4Z1NXUWdjR0Z5WVcwZ2FYTWdiM0IwYVc5dVlXeGNibHgwYVdZZ0tDRmtaV1pwYm1sMGFXOXVSbTRwSUh0Y2JseDBYSFJrWldacGJtbDBhVzl1Um00Z1BTQnBaRHRjYmx4MFhIUnBaQ0E5SUc1MWJHdzdYRzVjZEgxY2JseHVYSFJHVWtGTlJWZFBVa3N1WDJSbFptbHVaVkYxWlhWbExuQjFjMmdvZTF4dVhIUmNkR1JsWm1sdWFYUnBiMjQ2SUdSbFptbHVhWFJwYjI1R2JpeGNibHgwWEhScFpFOTJaWEp5YVdSbE9pQnBaRnh1WEhSOUtUdGNibjA3WEc0aUxDSXZLaXBjYmlBcUlFMWhjM1FnWW5WcGJHUWdabWxzWlM0Z1ZHaGxJRzFoYVc0Z1ptbHNaVnh1SUNvdlhHNWNiblpoY2lCa1pXWnBibVVnUFNCeVpYRjFhWEpsS0NjdUwyUmxabWx1WlM5cGJtUmxlQ2NwTzF4dWRtRnlJRkpsWjJsdmJpQTlJSEpsY1hWcGNtVW9KeTR2Y21WbmFXOXVMMmx1WkdWNEp5azdYRzUyWVhJZ1EyOXRjRzl1Wlc1MElEMGdjbVZ4ZFdseVpTZ25MaTlqYjIxd2IyNWxiblF2YVc1a1pYZ25LVHRjYm5aaGNpQnlZV2x6WlNBOUlISmxjWFZwY21Vb0p5NHZjbUZwYzJVdmFXNWtaWGduS1R0Y2JseHVMeW9xWEc0Z0tpQkdjbUZ0WlhkdmNtc2dZMnhoYzNNZ1pHVm1hVzVwZEdsdmJpQjBhR0YwSUhkcGJHd2dZM0psWVhSbElHRWdibVYzSUdkc2IySmhiQ0JwYm5OMFlXNWpaU0J2WmlCaElHTjFjM1J2YlNCR2NtRnRaWGR2Y21zdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk1nVzI5d2RHbHZibk1nYUdGemFDQjBieUJwYm1sMGFXRnNhWHBsSUhSb1pTQmpkWE4wYjIwZ1puSmhiV1YzYjNKcklIZHBkR2hkWEc0Z0tpOWNiblpoY2lCR2NtRnRaWGR2Y21zZ1BTQm1kVzVqZEdsdmJpaHZjSFJwYjI1ektTQjdYRzVjYmx4MEx5OGdVMlYwSUhSb1pTQmtaV1poZFd4MElHOXdkR2x2Ym5NZ1ptOXlJSFJvYjNObElHNXZkQ0J3WVhOelpXUWdhVzR1WEc1Y2RHOXdkR2x2Ym5NZ1BTQmZMbVJsWm1GMWJIUnpLRzl3ZEdsdmJuTWdmSHdnZTMwc0lIdGNibHgwWEhSMGFISnZkSFJzWlZkcGJtUnZkMUpsYzJsNlpUb2dNakF3TEZ4dVhIUmNkR3h2WjB4bGRtVnNPaUFuZDJGeWJpY3NYRzVjZEZ4MFpuSmhiV1YzYjNKclNXUTZJQ2R0WVhOMEp5eGNibHgwWEhSd2NtOWtkV04wYVc5dU9pQm1ZV3h6WlN4Y2JseDBYSFJzYjJkblpYSTZJSFZ1WkdWbWFXNWxaQ3hjYmx4MFhIUnphRzl5ZEdOMWREb2dlMXh1WEhSY2RGeDBkR1Z0Y0d4aGRHVTZJSFJ5ZFdVc1hHNWNkRngwWEhSamIzVnVkRG9nZEhKMVpWeHVYSFJjZEgxY2JseDBmU2s3WEc1Y2JseDBMeThnVTJWMElHRWdjM1JoY25ScGJtY2djRzlwYm5RZ2RHOGdRbUZqYTJKdmJtVWdZVzVrSUdGa1pDQmhaR1JwZEdsdmJtRnNJR0YwZEhKcFluVjBaUzVjYmx4MFh5NWxlSFJsYm1Rb2RHaHBjeXdnUW1GamEySnZibVVzSUh0Y2JseDBYSFJ2Y0hScGIyNXpPaUJ2Y0hScGIyNXpMRnh1WEhSY2RIUmxiWEJzWVhSbGN6b2dlMzBzWEc1Y2RGeDBZMjl0Y0c5dVpXNTBjem9nZTMwc1hHNWNkRngwWkdGMFlUb2dlMzBzWEc1Y2RGeDBYMlJsWm1sdVpWRjFaWFZsT2lCYlhTeGNibHgwWEhSeVpXZHBiMjV6T2lCN2ZWeHVYSFI5S1R0Y2JseHVYSFF2S2lwY2JseDBJQ29nUlhoMFpXNWtJRVpTUVUxRlYwOVNTeTVEYjJ4c1pXTjBhVzl1SUhSdklHMWhhMlVnYVhRZ1ltVjBkR1Z5WEc1Y2RDQXFJQ2h6Y0dWamFXWnBZMkZzYkhrc0lIUnZJR0ZrWkNCbGNuSnZjaUJvWVc1a2JHbHVaeWxjYmx4MElDb3ZYRzVjZEhaaGNpQnpaV3htSUQwZ2RHaHBjenRjYmx4MGRtRnlJRzl5YVdkcGJtRnNRMjlzYkdWamRHbHZiaUE5SUhSb2FYTXVRMjlzYkdWamRHbHZianRjYmx4MGRHaHBjeTVEYjJ4c1pXTjBhVzl1SUQwZ2IzSnBaMmx1WVd4RGIyeHNaV04wYVc5dUxtVjRkR1Z1WkNoN1hHNWNibHgwWEhScGJtbDBhV0ZzYVhwbE9pQm1kVzVqZEdsdmJpQW9iM0IwYVc5dWN5a2dlMXh1WEc1Y2RGeDBYSFF2THlCUGRtVnljbWxrWlNCZ1kyOXNiR1ZqZEdsdmJpNW1aWFJqYUNncFlGeHVYSFJjZEZ4MGRHaHBjeTVmWm1WMFkyZ2dQU0IwYUdsekxtWmxkR05vTzF4dVhIUmNkRngwZEdocGN5NW1aWFJqYUNBOUlIUm9hWE5iSjE5bVpYUmphQ3NySjEwN1hHNWNkRngwZlN4Y2JseHVYRzVjZEZ4MEx5b3FYRzVjZEZ4MElDb2dZV1owWlhKRmNuSnZjbHh1WEhSY2RDQXFYRzVjZEZ4MElDb2dUR2xtWldONVkyeGxJR05oYkd4aVlXTnJJSFJ2SUdOaGRHTm9JSGRvWlc0Z1lTQm1aWFJqYUNCbGNuSnZjaUJ2WTJOMWNuTmNibHgwWEhRZ0tseHVYSFJjZENBcUlGUlBSRTg2WEc1Y2RGeDBJQ29nVUhKdlltRmliSGtnY21WdGIzWmxJSFJvYVhNdExTQnlaV0Z6YjI1cGJtY2dPanBjYmx4MFhIUWdLaUJKYmlCdGIzTjBJR05oYzJWekxDQjViM1VnWVdOMGRXRnNiSGtnWTJGeVpTQmhZbTkxZENCMGFHVWdaWEp5YjNJZ2FXNWNibHgwWEhRZ0tpQjBhR1VnY21Wc1pYWmhiblFnWTI5dGNHOXVaVzUwY3lCM2FHOGdZWEpsSUhWemFXNW5JSFJvYVhNZ1kyOXNiR1ZqZEdsdmJpeGNibHgwWEhRZ0tpQnBiaUIzYUdsamFDQmpZWE5sSUhsdmRTZGtJR3AxYzNRZ1ltbHVaQ0JoYmlCbGNuSnZjaUJsZG1WdWRDQm9ZVzVrYkdWeUxseHVYSFJjZENBcUwxeHVYSFJjZEdGbWRHVnlSWEp5YjNJNklHWjFibU4wYVc5dUlDaGpiMnhzWldOMGFXOXVMQ0I0YUhJc0lHOXdkR2x2Ym5NcElIdGNibHgwWEhSY2RDOHZJSFJvYVhNZ1pYaHBjM1J6SUdadmNpQjViM1VnZEc4Z2IzWmxjbkpwWkdVZ2FYUWhYRzVjZEZ4MGZTeGNibHh1WEc1Y2JseHVYSFJjZEM4cUtseHVYSFJjZENBcUlFOTJaWEp5YVdSbElFSmhZMnRpYjI1bExrTnZiR3hsWTNScGIyNG5jeUJnWm1WMFkyZ29LV0JjYmx4MFhIUWdLaUIwYnlCaGJHeHZkeUJtYjNJZ1ltVjBkR1Z5SUdWeWNtOXlJR2hoYm1Sc2FXNW5MbHh1WEhSY2RDQXFYRzVjZEZ4MElDb2dWRTlFVHpvZ2NIVnNiQ0IwYUdseklHbHVkRzhnUW1GamEySnZibVV1YzNsdVl5QnBibk4wWldGa0xpNWNibHgwWEhRZ0tpQnZibXg1SUhCeWIySnNaVzBnYVhNZ1kyeGhjMmhwYm1jZ2QybDBhQ0J2ZEdobGNpQnplVzVqSUc5MlpYSnlhV1JsYzF4dVhIUmNkQ0FxTDF4dVhIUmNkQ2RmWm1WMFkyZ3JLeWM2SUdaMWJtTjBhVzl1SUNodmNIUnBiMjV6S1NCN1hHNWNkRngwWEhSMllYSWdZMjlzYkdWamRHbHZiaUE5SUhSb2FYTTdYRzVjYmx4MFhIUmNkRzl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVYRzVjZEZ4MFhIUXZMeUJNYjJjZ1lTQm1jbWxsYm1Sc2FXVnlJRndpVG04Z1ZWSk1YQ0lnYldWemMyRm5aVHBjYmx4MFhIUmNkR2xtSUNnZ0lXTnZiR3hsWTNScGIyNHVkWEpzSUNrZ2UxeHVYSFJjZEZ4MFhIUnpaV3htTG1WeWNtOXlLQ2REWVc1dWIzUWdabVYwWTJnb0tTQW5JQ3NnWTI5c2JHVmpkR2x2Ymk1MGVYQmxJQ3NnSnlBNk9pQkRiMnhzWldOMGFXOXVJR2hoY3lCdWJ5QlZVa3dnWm5WdVkzUnBiMjR2Y0hKdmNHVnlkSGt1TGk0bktUdGNibHgwWEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJQZG1WeWNtbGtaU0JsY25KdmNpQm9ZVzVrYkdWeUlIUnZJRzFwZUdsdUlHRnVJQ2RsY25KdmNpY2daWFpsYm5SY2JseDBYSFJjZEhaaGNpQnZjbWxuYVc1aGJFVnljbTl5U0dGdVpHeGxjaUE5SUc5d2RHbHZibk11WlhKeWIzSTdYRzVjZEZ4MFhIUjJZWElnYjNKcFoybHVZV3hUZFdOalpYTnpTR0Z1Wkd4bGNpQTlJRzl3ZEdsdmJuTXVjM1ZqWTJWemN6dGNibHgwWEhSY2RGOHVaWGgwWlc1a0tHOXdkR2x2Ym5Nc0lIdGNibHgwWEhSY2RGeDBjM1ZqWTJWemN6b2dablZ1WTNScGIyNGdLR052Ykd4bFkzUnBiMjRzSUhob2Npd2diM0IwYVc5dWN5a2dlMXh1WEhSY2RGeDBYSFJjZEhaaGNpQmhjbWR6SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SektUdGNibHh1WEhSY2RGeDBYSFJjZEM4dklFNTFiR3dnYjNWMElHQmpiMnhzWldOMGFXOXVMbk41Ym1OcGJtZGdYRzVjZEZ4MFhIUmNkRngwWTI5c2JHVmpkR2x2Ymk1emVXNWphVzVuSUQwZ2JuVnNiRHRjYmx4dVhIUmNkRngwWEhSY2RDOHZJRlJ5YVdkblpYSWdiM0pwWjJsdVlXd2djM1ZqWTJWemN5Qm9ZVzVrYkdWeUlHbG1JSE53WldOcFptbGxaRnh1WEhSY2RGeDBYSFJjZEM4dklHOXVJR0JtWlhSamFDaDdjM1ZqWTJWemN6b2dablZ1WTNScGIyNG9LWHN2S2k0dUxpb3ZmWDBwWUZ4dVhIUmNkRngwWEhSY2RHbG1JQ2h2Y21sbmFXNWhiRk4xWTJObGMzTklZVzVrYkdWeUtTQjdYRzVjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnYjNKcFoybHVZV3hUZFdOalpYTnpTR0Z1Wkd4bGNpNWhjSEJzZVNoamIyeHNaV04wYVc5dUxDQmhjbWR6S1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDBzWEc1Y2RGeDBYSFJjZEdWeWNtOXlPaUJtZFc1amRHbHZiaUFvWTI5c2JHVmpkR2x2Yml3Z2VHaHlMQ0J2Y0hScGIyNXpLU0I3WEc1Y2RGeDBYSFJjZEZ4MGRtRnlJR0Z5WjNNZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXBPMXh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdUblZzYkNCdmRYUWdZR052Ykd4bFkzUnBiMjR1YzNsdVkybHVaMkJjYmx4MFhIUmNkRngwWEhSamIyeHNaV04wYVc5dUxuTjVibU5wYm1jZ1BTQnVkV3hzTzF4dVhHNWNkRngwWEhSY2RGeDBMeThnU1dZZ2RHaHBjeUJwY3lCaGJpQmNJbUZpYjNKMFhDSXNJR2xuYm05eVpTQnBkQzBnS0hOMFlYUmxJR2hoY3lCaGJISmxZV1I1SUdKbFpXNGdkR0ZyWlc0Z1kyRnlaU0J2WmlsY2JseDBYSFJjZEZ4MFhIUnBaaUFvSUhob2NpQW1KaUI0YUhJdWMzUmhkSFZ6VkdWNGREMDlQU2RoWW05eWRDY2dLU0J5WlhSMWNtNDdYRzVjYmx4MFhIUmNkRngwWEhRdkx5QlRaWFFnWUdOdmJHeGxZM1JwYjI0dVpYSnliM0pnSUhWemFXNW5JSFJvWlNCeVpYTndiMjV6WlNCbWNtOXRJSFJvWlNCbVpYUmphRnh1WEhSY2RGeDBYSFJjZEM4dklDaDBjbmtnYW5OdmJpd2dkR2hsYmlCeVpYTndiMjV6WlNCMFpYaDBMQ0IwYUdWdUlITjBZWFIxY3lCamIyUmxMQ0IwYUdWdUlHcDFjM1FnWkdWbVlYVnNkQ0IwYnlCZ2RISjFaV0FwWEc1Y2RGeDBYSFJjZEZ4MFkyOXNiR1ZqZEdsdmJpNWxjbkp2Y2lBOVhHNWNkRngwWEhSY2RGeDBYSFFvSUhob2NpQW1KaUI0YUhJdWNtVnpjRzl1YzJWS1UwOU9JQ2tnUHlCNGFISXVjbVZ6Y0c5dWMyVktVMDlPSURwY2JseDBYSFJjZEZ4MFhIUmNkQ2dnZUdoeUlDWW1JSGhvY2k1eVpYTndiMjV6WlZSbGVIUWdLU0EvSUhob2NpNXlaWE53YjI1elpWUmxlSFFnT2x4dVhIUmNkRngwWEhSY2RGeDBkSEoxWlR0Y2JseHVYRzVjZEZ4MFhIUmNkRngwTHk4Z1EyRnNiQ0JnWVdaMFpYSkZjbkp2Y2lncFlGeHVYSFJjZEZ4MFhIUmNkR052Ykd4bFkzUnBiMjR1WVdaMFpYSkZjbkp2Y2k1aGNIQnNlU2hqYjJ4c1pXTjBhVzl1TEdGeVozTXBPMXh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdWSEpwWjJkbGNpQnZjbWxuYVc1aGJDQmxjbkp2Y2lCb1lXNWtiR1Z5SUdsbUlITndaV05wWm1sbFpGeHVYSFJjZEZ4MFhIUmNkQzh2SUc5dUlHQm1aWFJqYUNoN1pYSnliM0k2SUdaMWJtTjBhVzl1S0NsN0x5b3VMaTRxTDMxOUtXQmNibHgwWEhSY2RGeDBYSFJwWmlBb2IzSnBaMmx1WVd4RmNuSnZja2hoYm1Sc1pYSXBJSHRjYmx4MFhIUmNkRngwWEhSY2RISmxkSFZ5YmlCdmNtbG5hVzVoYkVWeWNtOXlTR0Z1Wkd4bGNpNWhjSEJzZVNoamIyeHNaV04wYVc5dUxDQmhjbWR6S1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDBwTzF4dVhHNWNkRngwWEhRdkx5Qk9kV3hzSUc5MWRDQmdZMjlzYkdWamRHbHZiaTVsY25KdmNtQmNibHgwWEhSY2RHTnZiR3hsWTNScGIyNHVaWEp5YjNJZ1BTQnVkV3hzTzF4dVhHNWNkRngwWEhRdkx5QkpaaUJnWm1WMFkyaGdJR2x6SUdGc2NtVmhaSGtnYVc0Z2NISnZaM0psYzNNc0lHTmhibU5sYkNCcGRGeHVYSFJjZEZ4MEx5OGdZVzVrSUdacGNtVWdiMlptSUdFZ2JtVjNJRzl1WlM1Y2JseDBYSFJjZEdsbUlDaGpiMnhzWldOMGFXOXVMbk41Ym1OcGJtY3BJSHRjYmx4MFhIUmNkRngwYzJWc1ppNXNiMmNvSjBGaWIzSjBhVzVuSUhKMWJtNXBibWNnWUdabGRHTm9LQ2xnSUdsdUlHOXlaR1Z5SUhSdklITjBZWEowSUdFZ2JtVjNJR0JtWlhSamFDZ3BZQzR1TGljcE8xeHVYSFJjZEZ4MFhIUmpiMnhzWldOMGFXOXVMbk41Ym1OcGJtY3VZV0p2Y25Rb0tUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeThnUTJGc2JDQnZjbWxuYVc1aGJDQmdabVYwWTJnb0tXQWdkWE5wYm1jZ2IzVnlJRzF2Ym10bGVTMXdZWFJqYUdWa0lHOXdkR2x2Ym5OY2JseDBYSFJjZEhaaGNpQjRhSElnUFNCamIyeHNaV04wYVc5dUxsOW1aWFJqYUNodmNIUnBiMjV6S1R0Y2JseHVYSFJjZEZ4MEx5OGdVMlYwSUdCamIyeHNaV04wYVc5dUxuTjVibU5wYm1kZ0lIUnZJSFJvWlNCWVNGSWdiMkpxWldOMElHbHVJSFZ6WlZ4dVhIUmNkRngwWTI5c2JHVmpkR2x2Ymk1emVXNWphVzVuSUQwZ2VHaHlPMXh1WEc1Y2RGeDBYSFF2THlCU1pYUjFjbTRnZEdobElGaElVaUJ2WW1wbFkzUWdkRzhnYldGcGJuUmhhVzRnYjNKcFoybHVZV3dnWUVKaFkydGliMjVsTGtOdmJHeGxZM1JwYjI0dVptVjBZMmdvS1dBZ1FWQkpYRzVjZEZ4MFhIUnlaWFIxY200Z2VHaHlPMXh1WEhSY2RIMWNibHh1WEhSOUtUdGNibHh1WEc1Y2RDOHZJRlJvY205MVoyaHZkWFFnZEdobElITnZkWEpqWlNCamIyUmxMQ0IwYUdWeVpTQmhjbVVnYjNCbGNtRjBhVzl1Y3lCdmJpQmdSbEpCVFVWWFQxSkxZQ0J2Y2lCamIyUmxJSFJvWVhRZ1lXTmpaWE56WlhOY2JseDBMeThnYVhSeklHRjBkSEpwWW5WMFpYTXVJRk52SUhkbElHMWhhMlVnWUVaU1FVMUZWMDlTUzJBZ1lXTmpaWE56YVdKc1pTNWNibHgwTHk5Y2JseDBMeThnVG05MFpUcGNibHgwTHk4Z1lFWlNRVTFGVjA5U1MyQWdkMmxzYkNCdmJteDVJR0psSUdFZ1oyeHZZbUZzSUhaaGNtbGhZbXhsSUNvcUlHUjFjbWx1WnlCMGFHVWdZblZwYkdRZ0tpcGNibHgwUmxKQlRVVlhUMUpMSUQwZ2RHaHBjenRjYmx4dVhHNTlPMXh1WEc0dkx5QkdjbUZ0WlhkdmNtc2djSEp2ZEc5MGVYQmxJRzFsZEdodlpITXVYRzVHY21GdFpYZHZjbXN1Y0hKdmRHOTBlWEJsTGxKbFoybHZiaUE5SUZKbFoybHZianRjYmtaeVlXMWxkMjl5YXk1d2NtOTBiM1I1Y0dVdVEyOXRjRzl1Wlc1MElEMGdRMjl0Y0c5dVpXNTBPMXh1Um5KaGJXVjNiM0pyTG5CeWIzUnZkSGx3WlM1a1pXWnBibVVnUFNCa1pXWnBibVU3WEc1R2NtRnRaWGR2Y21zdWNISnZkRzkwZVhCbExuSmhhWE5sSUQwZ2NtRnBjMlU3WEc1Y2JseHVMeThnU1c1emRHRnVkR2xoZEdVZ1JuSmhiV1YzYjNKcklHbHVjM1JoYm1ObFhHNTJZWElnWm5KaGJXVjNiM0pySUQwZ2JtVjNJRVp5WVcxbGQyOXlheWdwTzF4dVhHNHZMeUJVVDBSUE9pQm1kWFIxY21WY2JpOHZJRkpoYVhObElHbHRiV1ZrYVdGMFpXeDVMQ0JoYm1RZ2RHaGxiaUJoYkd3Z2JtVjNJRzF2WkdWc2N5QXZJRzVsZHlCamIyMXdiMjVsYm5SeklDOGdZMmhoYm1kbGMxeHVMeThnYzJodmRXeGtJR0psSUdSNWJtRnRhV01nWVhRZ2NuVnVkR2x0WlM1Y2JpOHZYRzR2THlCR2IzSWdibTkzTENCTllYTjBMbkpoYVhObEtDa2dhWE1nYzNScGJHd2diV0Z1ZFdGc0xseHVYRzVjYmk4dklFVjRjRzl6WlNCcGJuTjBZVzUwYVdGMFpXUWdabkpoYldWM2IzSnJJSFpwWVNCVlRVUTZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1p5WVcxbGQyOXlhenRjYmlJc0lpOHFLbHh1SUNwY2RFeHZaMmRsZENCamIyNXpkSEoxWTNSdmNpQnRaWFJvYjJRZ2RHaGhkQ0IzYVd4c0lITmxkSFZ3SUVaU1FVMUZWMDlTU3lCMGJ5QnNiMmNnYldWemMyRm5aWE11WEc0Z0tpOWNibHh1ZG1GeUlITmxkSFZ3VEc5bloyVnlJRDBnY21WeGRXbHlaU2duTGk5elpYUjFjQ2NwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlFeHZaMmRsY2lncElIdGNibHh1WEhRdkx5QlZjRzl1SUdsdWFYUnBZV3hwZW1GMGFXOXVMQ0J6WlhSMWNDQnNiMmRuWlhKY2JseDBjMlYwZFhCTWIyZG5aWElvUmxKQlRVVlhUMUpMTG05d2RHbHZibk11Ykc5blRHVjJaV3dwTzF4dVhHNWNkQzh2SUVsdUlITjFjSEJ2Y25SbFpDQmljbTkzYzJWeWN5d2dZV3h6YnlCeWRXNGdjMlYwZFhCTWIyZG5aWElnWVdkaGFXNWNibHgwTHk4Z2QyaGxiaUJHVWtGTlJWZFBVa3N1Ykc5blRHVjJaV3dnYVhNZ2MyVjBJR0o1SUhSb1pTQjFjMlZ5WEc1Y2RDOHZJRlJQUkU4NklHWnBibVFnWVNCM1lYa2dkRzhnWkc4Z2RHaHBjeUIzYVhSb2IzVjBJR1JsY0dWdVpHbHVaeUJ2YmlCZlgyUmxabWx1WlZObGRIUmxjbDlmTGx4dVhIUnBaaUFvWHk1cGMwWjFibU4wYVc5dUtFWlNRVTFGVjA5U1N5NWZYMlJsWm1sdVpWTmxkSFJsY2w5ZktTa2dlMXh1WEhSY2RFWlNRVTFGVjA5U1N5NWZYMlJsWm1sdVpWTmxkSFJsY2w5ZktDZHNiMmRNWlhabGJDY3NJR1oxYm1OMGFXOXVJRzl1UTJoaGJtZGxJQ2h1WlhkTWIyZE1aWFpsYkNrZ2UxeHVYSFJjZEZ4MGMyVjBkWEJNYjJkblpYSW9ibVYzVEc5blRHVjJaV3dwTzF4dVhIUmNkSDBwTzF4dVhIUjlYRzU5TzF4dUlpd2lMeW9xWEc0Z0tpQlRaWFFnZFhBZ2RHaGxJR3h2WnlCbWRXNWpkR2x2Ym5NNlhHNGdLbHh1SUNvZ1JsSkJUVVZYVDFKTExtVnljbTl5WEc0Z0tpQkdVa0ZOUlZkUFVrc3VkMkZ5Ymx4dUlDb2dSbEpCVFVWWFQxSkxMbXh2WjF4dUlDb2dSbEpCVFVWWFQxSkxMbVJsWW5WbklDZ3FiR1ZuWVdONUtWeHVJQ29nUmxKQlRVVlhUMUpMTG5abGNtSnZjMlZjYmlBcVhHNGdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJR3h2WjB4bGRtVnNJRnRVYUdVZ1pHVnphWEpsWkNCc2IyY2diR1YyWld3Z2IyWWdkR2hsSUV4dloyZGxjbDFjYmlBcUwxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQnpaWFIxY0V4dloyZGxjaUFvYkc5blRHVjJaV3dwSUh0Y2JseHVYSFIyWVhJZ2JtOXZjQ0E5SUdaMWJtTjBhVzl1SUNncElIdDlPMXh1WEc1Y2RDOHZJRWxtSUd4dlp5QnBjeUJ6Y0dWamFXWnBaV1FzSUhWelpTQnBkQ3dnYjNSb1pYSjNhWE5sSUhWelpTQjBhR1VnWTI5dWMyOXNaVnh1WEhScFppQW9SbEpCVFVWWFQxSkxMbXh2WjJkbGNpa2dlMXh1WEhSY2RFWlNRVTFGVjA5U1N5NWxjbkp2Y2lBZ0lDQWdQU0JHVWtGTlJWZFBVa3N1Ykc5bloyVnlMbVZ5Y205eU8xeHVYSFJjZEVaU1FVMUZWMDlTU3k1M1lYSnVJQ0FnSUNBZ1BTQkdVa0ZOUlZkUFVrc3ViRzluWjJWeUxuZGhjbTQ3WEc1Y2RGeDBSbEpCVFVWWFQxSkxMbXh2WnlBZ0lDQWdJQ0E5SUVaU1FVMUZWMDlTU3k1c2IyZG5aWEl1WkdWaWRXY2dmSHdnUmxKQlRVVlhUMUpMTG14dloyZGxjanRjYmx4MFhIUkdVa0ZOUlZkUFVrc3VkbVZ5WW05elpTQWdJRDBnUmxKQlRVVlhUMUpMTG14dloyZGxjaTUyWlhKaWIzTmxPMXh1WEhSOVhHNWNibHgwTHk4Z1NXNGdTVVVzSUhkbElHTmhiaWQwSUdSbFptRjFiSFFnZEc4Z2RHaGxJR0p5YjNkelpYSWdZMjl1YzI5c1pTQmlaV05oZFhObElIUm9aWEpsSUVsVElFNVBJRUpTVDFkVFJWSWdRMDlPVTA5TVJWeHVYSFJsYkhObElHbG1JQ2gwZVhCbGIyWWdZMjl1YzI5c1pTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHh1WEhSY2RDOHZJRmRsSUdOaGJtNXZkQ0JqWVd4c1pXUWdkR2hsSUM1aWFXNWtJRzFsZEdodlpDQnZiaUIwYUdVZ1kyOXVjMjlzWlNCdFpYUm9iMlJ6TGlCWFpTQmhjbVVnYVc0Z2FXVWdPU0J2Y2lBNExDQnFkWE4wSUcxaGEyVmNibHgwWEhRdkx5QmxkbVZ5ZVdoMGFXNW5JR0VnYm05dmNDNWNibHgwWEhScFppQW9YeTVwYzFWdVpHVm1hVzVsWkNoamIyNXpiMnhsTG14dlp5NWlhVzVrS1NrZ0lIdGNibHgwWEhSY2RFWlNRVTFGVjA5U1N5NWxjbkp2Y2lBZ0lDQWdQU0J1YjI5d08xeHVYSFJjZEZ4MFJsSkJUVVZYVDFKTExuZGhjbTRnSUNBZ0lDQTlJRzV2YjNBN1hHNWNkRngwWEhSR1VrRk5SVmRQVWtzdWJHOW5JQ0FnSUNBZ0lEMGdibTl2Y0R0Y2JseDBYSFJjZEVaU1FVMUZWMDlTU3k1a1pXSjFaeUFnSUNBZ1BTQnViMjl3TzF4dVhIUmNkRngwUmxKQlRVVlhUMUpMTG5abGNtSnZjMlVnSUNBOUlHNXZiM0E3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnVjJVZ1lYSmxJR2x1SUdFZ1puSnBaVzVrYkhrZ1luSnZkM05sY2lCc2FXdGxJRU5vY205dFpTd2dSbWx5WldadmVDd2diM0lnU1VVeE1GeHVYSFJjZEdWc2MyVWdlMXh1WEhSY2RGeDBSbEpCVFVWWFQxSkxMbVZ5Y205eVhIUmNkRDBnWTI5dWMyOXNaUzVsY25KdmNpQW1KaUJqYjI1emIyeGxMbVZ5Y205eUxtSnBibVFvWTI5dWMyOXNaU2s3WEc1Y2RGeDBYSFJHVWtGTlJWZFBVa3N1ZDJGeWJseDBYSFE5SUdOdmJuTnZiR1V1ZDJGeWJpQW1KaUJqYjI1emIyeGxMbmRoY200dVltbHVaQ2hqYjI1emIyeGxLVHRjYmx4MFhIUmNkRVpTUVUxRlYwOVNTeTVzYjJkY2RGeDBYSFE5SUdOdmJuTnZiR1V1WkdWaWRXY2dKaVlnWTI5dWMyOXNaUzVrWldKMVp5NWlhVzVrS0dOdmJuTnZiR1VwTzF4dVhIUmNkRngwUmxKQlRVVlhUMUpMTG5abGNtSnZjMlZjZEQwZ1kyOXVjMjlzWlM1c2IyY2dKaVlnWTI5dWMyOXNaUzVzYjJjdVltbHVaQ2hqYjI1emIyeGxLVHRjYmx4dVhIUmNkRngwTHk4Z1ZYTmxJR3h2WnlCc1pYWmxiQ0JqYjI1bWFXY2dhV1lnY0hKdmRtbGtaV1JjYmx4MFhIUmNkSE4zYVhSamFDQW9iRzluVEdWMlpXd3BJSHRjYmx4MFhIUmNkRngwWTJGelpTQW5kbVZ5WW05elpTYzZJR0p5WldGck8xeHVYRzVjZEZ4MFhIUmNkR05oYzJVZ0oyUmxZblZuSnpwY2JseDBYSFJjZEZ4MFhIUkdVa0ZOUlZkUFVrc3VkbVZ5WW05elpTQTlJRzV2YjNBN1hHNWNkRngwWEhSY2RGeDBZbkpsWVdzN1hHNWNibHgwWEhSY2RGeDBZMkZ6WlNBbmQyRnliaWM2WEc1Y2RGeDBYSFJjZEZ4MFJsSkJUVVZYVDFKTExuWmxjbUp2YzJVZ1BTQkdVa0ZOUlZkUFVrc3ViRzluSUQwZ2JtOXZjRHRjYmx4MFhIUmNkRngwWEhSaWNtVmhhenRjYmx4dVhIUmNkRngwWEhSallYTmxJQ2RsY25KdmNpYzZYRzVjZEZ4MFhIUmNkRngwUmxKQlRVVlhUMUpMTG5abGNtSnZjMlVnUFNCR1VrRk5SVmRQVWtzdWJHOW5JRDBnUmxKQlRVVlhUMUpMTG5kaGNtNGdQU0J1YjI5d08xeHVYSFJjZEZ4MFhIUmNkR0p5WldGck8xeHVYRzVjZEZ4MFhIUmNkR05oYzJVZ0ozTnBiR1Z1ZENjNlhHNWNkRngwWEhSY2RGeDBSbEpCVFVWWFQxSkxMblpsY21KdmMyVWdQU0JHVWtGTlJWZFBVa3N1Ykc5bklEMGdSbEpCVFVWWFQxSkxMbmRoY200Z1BTQkdVa0ZOUlZkUFVrc3VaWEp5YjNJZ1BTQnViMjl3TzF4dVhIUmNkRngwWEhSY2RHSnlaV0ZyTzF4dVhHNWNkRngwWEhSY2RHUmxabUYxYkhRNlhHNWNkRngwWEhSY2RGeDBkR2h5YjNjZ2JtVjNJRVZ5Y205eUlDZ25WVzV5WldOdloyNXBlbVZrSUd4dloyZHBibWNnYkdWMlpXd2dZMjl1Wm1sbklDY2dLMXh1WEhSY2RGeDBYSFJjZENjb0p5QXJJRVpTUVUxRlYwOVNTeTV2Y0hScGIyNXpMbVp5WVcxbGQyOXlhMGxrSUNzZ0p5NXNiMmRNWlhabGJDQTlJRndpSnlBcklHeHZaMHhsZG1Wc0lDc2dKMXdpS1NjcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUXZMeUJUZFhCd2IzSjBJR1p2Y2lCZ1pHVmlkV2RnSUdadmNpQmlZV05yZDJGeVpITWdZMjl0Y0dGMGFXSnBiR2wwZVZ4dVhIUmNkRngwUmxKQlRVVlhUMUpMTG1SbFluVm5JRDBnUmxKQlRVVlhUMUpMTG14dlp6dGNibHh1WEhSY2RGeDBMeThnVm1WeVltOXpaU0J6Y0dsMGN5QnZkWFFnYkc5bklHeGxkbVZzWEc1Y2RGeDBYSFJHVWtGTlJWZFBVa3N1ZG1WeVltOXpaU2duVEc5bklHeGxkbVZzSUhObGRDQjBieUE2T2lBbkxDQnNiMmRNWlhabGJDazdYRzVjZEZ4MGZWeHVYSFI5WEc1OVhHNGlMQ0l2S2lwY2JpQXFJRWRwZG1WdUlHRWdZMjl0Y0c5dVpXNTBJR1JsWm1sdWFYUnBiMjRnWVc1a0lHbDBjeUJyWlhrc0lIZGxJSGRwYkd3Z1luVnBiR1FnZFhBZ2RHaGxJR052YlhCdmJtVnVkQ0J3Y205MGIzUjVjR1VnWVc1a0lHMWxjbWRsWEc0Z0tpQjBhR2x6SUdOdmJYQnZibVZ1ZENCM2FYUm9JR2wwY3lCdFlYUmphR2x1WnlCMFpXMXdiR0YwWlM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnSUh0UFltcGxZM1I5SUdOdmJYQnZibVZ1ZEVSbFppQmJUMkpxWldOMElHTnZiblJoYVc1cGJtY2dkR2hsSUdOdmJYQnZibVZ1ZENCa1pXWnBibWwwYVc5dVhWeHVJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0JqYjIxd2IyNWxiblJMWlhrZ1cxUm9aU0JqYjIxd2IyNWxiblFnYVdSbGJuUnBabWxsY2wxY2JpQXFMMXh1WEc1MllYSWdkSEpoYm5Oc1lYUmxVMmh2Y25Sb1lXNWtJRDBnY21WeGRXbHlaU2duTGk0dmRYUnBiSE12YzJodmNuUm9ZVzVrSnlrN1hHNTJZWElnYjJKcVRXRndJRDBnY21WeGRXbHlaU2duTGk0dmRYUnBiSE12YjJKcVRXRndKeWs3WEc1MllYSWdSWFpsYm5SeklEMGdjbVZ4ZFdseVpTZ25MaTR2ZFhScGJITXZaWFpsYm5Sekp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWW5WcGJHUkRiMjF3YjI1bGJuUlFjbTkwYjNSNWNHVW9ZMjl0Y0c5dVpXNTBSR1ZtTENCamIyMXdiMjVsYm5STFpYa3BJSHRjYmx4dVhIUXZMeUJKWmlCamIyMXdiMjVsYm5RZ2FXUWdhWE1nYm05MElHVjRjR3hwWTJsMGJIa2djMlYwTENCMWMyVWdkR2hsSUdOdmJYQnZibVZ1ZEV0bGVWeHVYSFJwWmlBb0lXTnZiWEJ2Ym1WdWRFUmxaaTVwWkNrZ2UxeHVYSFJjZEdOdmJYQnZibVZ1ZEVSbFppNXBaQ0E5SUdOdmJYQnZibVZ1ZEV0bGVUdGNibHgwZlZ4dVhHNWNkQzh2SUZObFlYSmphQ0IwWlcxd2JHRjBaWE5jYmx4MGRtRnlJSFJsYlhCc1lYUmxJRDBnUmxKQlRVVlhUMUpMTG5SbGJYQnNZWFJsYzF0amIyMXdiMjVsYm5SRVpXWXVhV1JkTzF4dVhHNWNkQzh2SUZOaGRtVWdjbVZtWlhKbGJtTmxJSFJ2SUhSbGJYQnNZWFJsSUdsdUlHTnZiWEJ2Ym1WdWRDQndjbTkwYjNSNWNHVmNibHgwUmxKQlRVVlhUMUpMTG5abGNtSnZjMlVvWTI5dGNHOXVaVzUwUkdWbUxtbGtJQ3NnSnlBNk9pQlFZV2x5YVc1bklHTnZiWEJ2Ym1WdWRDQjNhWFJvSUhSbGJYQnNZWFJsTGk0dUp5azdYRzVjZEdOdmJYQnZibVZ1ZEVSbFppNTBaVzF3YkdGMFpTQTlJSFJsYlhCc1lYUmxPMXh1WEc1Y2RDOHZJRlJ5WVc1emJHRjBaU0J5YVdkb2RDMW9ZVzVrSUhOb2IzSjBhR0Z1WkNCbWIzSWdkRzl3TFd4bGRtVnNJR3RsZVhOY2JseDBZMjl0Y0c5dVpXNTBSR1ZtSUQwZ2IySnFUV0Z3S0dOdmJYQnZibVZ1ZEVSbFppd2dkSEpoYm5Oc1lYUmxVMmh2Y25Sb1lXNWtLVHRjYmx4dVhHNWNkQzh2SUdGdVpDQmxkbVZ1ZEhNZ2IySnFaV04wWEc1Y2RHbG1JQ2hqYjIxd2IyNWxiblJFWldZdVpYWmxiblJ6S1NCN1hHNWNkRngwWTI5dGNHOXVaVzUwUkdWbUxtVjJaVzUwY3lBOUlHOWlhazFoY0NoY2JseDBYSFJjZEdOdmJYQnZibVZ1ZEVSbFppNWxkbVZ1ZEhNc1hHNWNkRngwWEhSMGNtRnVjMnhoZEdWVGFHOXlkR2hoYm1SY2JseDBYSFFwTzF4dVhIUjlYRzVjYmx4MEx5OGdZVzVrSUdGbWRHVnlRMmhoYm1kbElHSnBibVJwYm1kelhHNWNkR2xtSUNoZkxtbHpUMkpxWldOMEtHTnZiWEJ2Ym1WdWRFUmxaaTVoWm5SbGNrTm9ZVzVuWlNrZ0ppWWdJVjh1YVhOR2RXNWpkR2x2YmloamIyMXdiMjVsYm5SRVpXWXVZV1owWlhKRGFHRnVaMlVwS1NCN1hHNWNkRngwWTI5dGNHOXVaVzUwUkdWbUxtRm1kR1Z5UTJoaGJtZGxJRDBnYjJKcVRXRndLRnh1WEhSY2RGeDBZMjl0Y0c5dVpXNTBSR1ZtTG1GbWRHVnlRMmhoYm1kbExGeHVYSFJjZEZ4MGRISmhibk5zWVhSbFUyaHZjblJvWVc1a1hHNWNkRngwS1R0Y2JseDBmVnh1WEc1Y2RDOHZJRWR2SUdGb1pXRmtJR0Z1WkNCMGRYSnVJSFJvWlNCa1pXWnBibWwwYVc5dUlHbHVkRzhnWVNCeVpXRnNJR052YlhCdmJtVnVkQ0J3Y205MGIzUjVjR1ZjYmx4MFJsSkJUVVZYVDFKTExuWmxjbUp2YzJVb1kyOXRjRzl1Wlc1MFJHVm1MbWxrSUNzZ0p5QTZPaUJDZFdsc1pHbHVaeUJqYjIxd2IyNWxiblFnY0hKdmRHOTBlWEJsTGk0dUp5azdYRzVjZEhaaGNpQmpiMjF3YjI1bGJuUlFjbTkwYjNSNWNHVWdQU0JHVWtGTlJWZFBVa3N1UTI5dGNHOXVaVzUwTG1WNGRHVnVaQ2hqYjIxd2IyNWxiblJFWldZcE8xeHVYRzVjZEM4dklFUnBjMk52ZG1WeUlITjFZbk5qY21sd2RHbHZibk5jYmx4MFkyOXRjRzl1Wlc1MFVISnZkRzkwZVhCbExuQnliM1J2ZEhsd1pTNXpkV0p6WTNKcGNIUnBiMjV6SUQwZ2UzMDdYRzVjYmx4MEx5OGdTWFJsY21GMFpTQjBhSEp2ZFdkb0lHVmhZMmdnY0hKdmNHVnlkSGtnYjI0Z2RHaHBjeUJqYjIxd2IyNWxiblFnY0hKdmRHOTBlWEJsWEc1Y2RGOHVaV0ZqYUNoamIyMXdiMjVsYm5SUWNtOTBiM1I1Y0dVdWNISnZkRzkwZVhCbExDQm1kVzVqZEdsdmJpQW9hR0Z1Wkd4bGNpd2dhMlY1S1NCN1hHNWNibHgwWEhRdkx5QkVaWFJsWTNRZ1JFOU5JR1YyWlc1MGN5QmhibVFnYzIxaGMyZ2dkR2hsYlNCcGJuUnZJSFJvWlNCbGRtVnVkSE1nYUdGemFGeHVYSFJjZEhaaGNpQnRZWFJqYUdWa1JFOU5SWFpsYm5SeklEMGdhMlY1TG0xaGRHTm9LRVYyWlc1MGMxc25MMFJQVFVWMlpXNTBMeWRkS1R0Y2JseDBYSFJwWmlBb2JXRjBZMmhsWkVSUFRVVjJaVzUwY3lrZ2UxeHVYSFJjZEZ4MGRtRnlJR1YyWlc1MFRtRnRaU0E5SUcxaGRHTm9aV1JFVDAxRmRtVnVkSE5iTVYwN1hHNWNkRngwWEhSMllYSWdaR1ZzWldkaGRHVlRaV3hsWTNSdmNpQTlJRzFoZEdOb1pXUkVUMDFGZG1WdWRITmJNMTA3WEc1Y2JseDBYSFJjZEM4dklGTjBiM2NnZEdobGJTQnBiaUJsZG1WdWRITWdhR0Z6YUZ4dVhIUmNkRngwWTI5dGNHOXVaVzUwVUhKdmRHOTBlWEJsTG5CeWIzUnZkSGx3WlM1bGRtVnVkSE1nUFNCamIyMXdiMjVsYm5SUWNtOTBiM1I1Y0dVdWNISnZkRzkwZVhCbExtVjJaVzUwY3lCOGZDQjdmVHRjYmx4MFhIUmNkR052YlhCdmJtVnVkRkJ5YjNSdmRIbHdaUzV3Y205MGIzUjVjR1V1WlhabGJuUnpXMnRsZVYwZ1BTQm9ZVzVrYkdWeU8xeHVYSFJjZEgxY2JseHVYSFJjZEM4dklFRmtaQ0JoY0hBZ1pYWmxiblJ6SUNnbEtTd2djbTkxZEdWeklDZ2pLU3dnWVc1a0lHUmhkR0VnYkdsemRHVnVaWEp6SUNoK0tTQjBieUJ6ZFdKelkzSnBjSFJwYjI1eklHaGhjMmhjYmx4MFhIUnBaaUFvYTJWNUxtMWhkR05vS0M5ZUtDVjhJM3grS1M4cEtTQjdYRzVjZEZ4MFhIUnBaaUFvWHk1cGMxTjBjbWx1Wnlob1lXNWtiR1Z5S1NrZ2UxeHVYSFJjZEZ4MFhIUjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1kyOXRjRzl1Wlc1MFJHVm1MbWxrSUNzZ0p6bzZJRWx1ZG1Gc2FXUWdiR2x6ZEdWdVpYSWdabTl5SUhOMVluTmpjbWx3ZEdsdmJqb2dKeUFySUd0bGVTQXJJQ2N1WEZ4dUp5QXJYRzVjZEZ4MFhIUmNkRngwSjBSbFptbHVaU0I1YjNWeUlHTmhiR3hpWVdOcklIZHBkR2dnWVc0Z1lXNXZibmx0YjNWeklHWjFibU4wYVc5dUlHbHVjM1JsWVdRZ2IyWWdZU0J6ZEhKcGJtY3VKMXh1WEhSY2RGeDBYSFFwTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwYVdZZ0tDRmZMbWx6Um5WdVkzUnBiMjRvYUdGdVpHeGxjaWtwSUh0Y2JseDBYSFJjZEZ4MGRHaHliM2NnYm1WM0lFVnljbTl5S0dOdmJYQnZibVZ1ZEVSbFppNXBaQ0FySnpvNklFbHVkbUZzYVdRZ2JHbHpkR1Z1WlhJZ1ptOXlJSE4xWW5OamNtbHdkR2x2YmpvZ0p5QXJJR3RsZVNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSamIyMXdiMjVsYm5SUWNtOTBiM1I1Y0dVdWNISnZkRzkwZVhCbExuTjFZbk5qY21sd2RHbHZibk5iYTJWNVhTQTlJR2hoYm1Sc1pYSTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdSWGgwWlc1a0lHOXVaU0J2Y2lCdGIzSmxJRzkwYUdWeUlHTnZiWEJ2Ym1WdWRITmNibHgwWEhSbGJITmxJR2xtSUNoclpYa2dQVDA5SUNkbGVIUmxibVJEYjIxd2IyNWxiblJ6SnlrZ2UxeHVYSFJjZEZ4MGRtRnlJRzlpYWxSdlRXVnlaMlVnUFNCN2ZUdGNibHgwWEhSY2RGOHVaV0ZqYUNob1lXNWtiR1Z5TENCbWRXNWpkR2x2YmloamFHbHNaRWxrS1h0Y2JseHVYSFJjZEZ4MFhIUnBaaUFvSVVaU1FVMUZWMDlTU3k1amIyMXdiMjVsYm5SelcyTm9hV3hrU1dSZEtYdGNibHgwWEhSY2RGeDBYSFIwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzVjZEZ4MFhIUmNkRngwWTI5dGNHOXVaVzUwUkdWbUxtbGtJQ3NnSnlBNk9pQW5JQ3RjYmx4MFhIUmNkRngwWEhRblZISjVhVzVuSUhSdklHUmxabWx1WlM5bGVIUmxibVFnZEdocGN5QmpiMjF3YjI1bGJuUWdabkp2YlNCZ0p5QXJJR05vYVd4a1NXUWdLeUFuWUN3Z0p5QXJYRzVjZEZ4MFhIUmNkRngwSjJKMWRDQnVieUJqYjIxd2IyNWxiblFnZDJsMGFDQjBhR0YwSUdsa0lHTmhiaUJpWlNCbWIzVnVaQzRuWEc1Y2RGeDBYSFJjZEZ4MEtUdGNibHgwWEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJjZEY4dVpYaDBaVzVrS0c5aWFsUnZUV1Z5WjJVc0lFWlNRVTFGVjA5U1N5NWpiMjF3YjI1bGJuUnpXMk5vYVd4a1NXUmRLVHRjYmx4MFhIUmNkSDBwTzF4dVhHNWNkRngwWEhSZkxtUmxabUYxYkhSektHTnZiWEJ2Ym1WdWRGQnliM1J2ZEhsd1pTNXdjbTkwYjNSNWNHVXNJRzlpYWxSdlRXVnlaMlVwTzF4dVhIUmNkSDFjYmx4MGZTazdYRzVjYmx4MEx5OGdVMkYyWlNCd2NtOTBiM1I1Y0dVZ2FXNGdaMnh2WW1Gc0lITmxkQ0JtYjNJZ2RISmhZMnRwYm1kY2JseDBSbEpCVFVWWFQxSkxMbU52YlhCdmJtVnVkSE5iWTI5dGNHOXVaVzUwUkdWbUxtbGtYU0E5SUdOdmJYQnZibVZ1ZEZCeWIzUnZkSGx3WlR0Y2JuMDdYRzRpTENJdktpcGNiaUFxSUUxdlpIVnNaU0JrWlhCbGJtUmxibU5wWlhOY2JpQXFMMXh1WEc1MllYSWdaV3d5UkdWbVlYVnNkRlJsYlhCc1lYUmxTVVFnUFNCeVpYRjFhWEpsS0NjdUxpOTFkR2xzY3k5bGJESkVaV1poZFd4MFZHVnRjR3hoZEdWSlJDY3BPMXh1WEc1Y2JseHVYRzVjYmk4cUtseHVJQ29nUTI5c2JHVmpkQ0JoYm5rZ1ZFOVFMVXhGVmtWTUlISmxaMmx2Ym5NZ2QybDBhQ0IwYUdVZ1pHVm1ZWFZzZENCMFpXMXdiR0YwWlM5amIyMXdiMjVsYm5RZ2MzQmxZMmxtYVdWa0lHbHVJSFJvWlNCSVZFMU1YRzRnS2x4dUlDb2dUbTkwWlRwY2JpQXFJRlJvYVhNZ2FYTWdiMjVzZVNCeWRXNGdiMjRnZEdobElHOXlhV2RwYm1Gc0lFaFVUVXdnY0dGblpTd2dibTkwSUdsdUlHTnNhV1Z1ZEMxemFXUmxJSFJsYlhCc1lYUmxjeUVoSVZ4dUlDb2dSbTl5SUhSb1lYUXNJSE5sWlNCZ2JHbGlMMk52YlhCdmJtVnVkQzl5Wlc1a1pYSlNaV2RwYjI1ekxtcHpZQzVjYmlBcVhHNGdLaTljYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCamIyeHNaV04wVW1WbmFXOXVjeUFvS1NCN1hHNWNibHh1WEhRdkx5QkhaWFFnZEc5d0xXeGxkbVZzSUhKbFoybHZibk11WEc1Y2RIWmhjaUFrZEc5d1RHVjJaV3hTWldkcGIyNXpJRDBnSkNnbmNtVm5hVzl1TENCYlpHRjBZUzF5WldkcGIyNWRKeWt1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQWtLSFJvYVhNcExuQmhjbVZ1ZEhNb0ozSmxaMmx2Yml3Z1cyUmhkR0V0Y21WbmFXOXVYU2NwTG14bGJtZDBhQ0E5UFQwZ01EdGNibHgwZlNrN1hHNWNibHh1WEhRa2RHOXdUR1YyWld4U1pXZHBiMjV6TG1WaFkyZ29ablZ1WTNScGIyNG9LU0I3WEc1Y2RGeDBkbUZ5SUdWc0lEMGdkR2hwY3p0Y2JseDBYSFIyWVhJZ0pHVnNJRDBnSkNoMGFHbHpLVHRjYmx4dVhIUmNkQzh2SUZCeWIzWnBaR1VnWW1GamEzZGhjbVJ6SUdOdmJYQmhkR2xpYVd4cGRIa2dabTl5SUd4bFoyRmplU0J1YjNSaGRHbHZibHh1WEhSY2RDOHZJQ2h1YjNKdFlXeHBlbVVnZEc4Z1lIUmxiWEJzWVhSbFlDbGNibHgwWEhSMllYSWdZMjl0Y0c5dVpXNTBTV1FnUFNCbGJESkVaV1poZFd4MFZHVnRjR3hoZEdWSlJDaGxiQ2s3WEc1Y2JseDBYSFF2THlCT2IzY2dhVzV6ZEdGdWRHbGhkR1VnZEdobElHRndjSEp2Y0hKcFlYUmxJR1JsWm1GMWJIUWdZMjl0Y0c5dVpXNTBJR2x1SUdWaFkyaGNibHgwWEhRdkx5QnlaV2RwYjI0Z2QybDBhQ0JoSUhOd1pXTnBabWxsWkNCMFpXMXdiR0YwWlM5amIyMXdiMjVsYm5SY2JseDBYSFJHVWtGTlJWZFBVa3N1VW1WbmFXOXVMbVp5YjIxRmJHVnRaVzUwS0dWc0tUdGNibHgwZlNrN1hHNWNibjA3WEc0aUxDSXZLaXBjYmlBcUlFeHZZV1FnWVc1NUlITmpjbWx3ZENCMFlXZHpJRzl1SUhSb1pTQndZV2RsSUhkcGRHZ2dkSGx3WlQxY0luUmxlSFF2ZEdWdGNHeGhkR1ZjSWk1Y2JpQXFYRzRnS2lCQWNtVjBkWEp1SUh0UFltcGxZM1I5SUZ0UFltcGxZM1FnWTI5dWMybHpkR2x1WnlCdlppQmhJSFJsYlhCc1lYUmxJR2xrWlc1MGFXWnBaWElnWVc1a0lHbDBjeUJJVkUxTUxsMWNiaUFxTDF4dVhHNTJZWElnWld3eVRXRnpkRWxFSUQwZ2NtVnhkV2x5WlNnbkxpNHZkWFJwYkhNdlpXd3lUV0Z6ZEVsRUp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWTI5c2JHVmpkRlJsYlhCc1lYUmxjMFp5YjIxVFkzSnBjSFJVWVdkektDa2dlMXh1WEhSMllYSWdkR1Z0Y0d4aGRHVnpJRDBnZTMwN1hHNWNibHgwSkNnbmMyTnlhWEIwVzNSNWNHVTlYQ0owWlhoMEwzUmxiWEJzWVhSbFhDSmRKeWt1WldGamFDaG1kVzVqZEdsdmJpQW9hU3dnWld3cElIdGNibHgwWEhSMllYSWdhV1FnUFNCbGJESk5ZWE4wU1VRb1pXd3NJSFJ5ZFdVcE8xeHVYSFJjZEhSbGJYQnNZWFJsYzF0cFpGMGdQU0FrS0dWc0tTNW9kRzFzS0NrN1hHNWNibHgwWEhRdkx5QlRkSEpwY0NCM2FHbDBaWE53WVdObElHeGxablJ2ZG1WeUlHWnliMjBnYzJOeWFYQjBJSFJoWjNOY2JseDBYSFIwWlcxd2JHRjBaWE5iYVdSZElEMGdkR1Z0Y0d4aGRHVnpXMmxrWFM1eVpYQnNZV05sS0M5ZVhGeHpLeThzSnljcE8xeHVYSFJjZEhSbGJYQnNZWFJsYzF0cFpGMGdQU0IwWlcxd2JHRjBaWE5iYVdSZExuSmxjR3hoWTJVb0wxeGNjeXNrTHl3bkp5azdYRzVjYmx4MFhIUXZMeUJTWlcxdmRtVWdabkp2YlNCRVQwMWNibHgwWEhRa0tHVnNLUzV5WlcxdmRtVW9LVHRjYmx4MGZTazdYRzVjYmx4MGNtVjBkWEp1SUhSbGJYQnNZWFJsY3p0Y2JuMDdYRzRpTENJdktpcGNiaUFxSUZSb2FYTWdhWE1nZEdobElITjBZWEowYVc1bklIQnZhVzUwSUhSdklIbHZkWElnWVhCd2JHbGpZWFJwYjI0dUlDQlpiM1VnYzJodmRXeGtJR2R5WVdJZ2RHVnRjR3hoZEdWeklHRnVaQ0JqYjIxd2IyNWxiblJ6WEc0Z0tpQmlaV1p2Y21VZ1kyRnNiR2x1WnlCR1VrRk5SVmRQVWtzdWNtRnBjMlVvS1NCMWMybHVaeUJ6YjIxbGRHaHBibWNnYkdsclpTQlNaWEYxYVhKbExtcHpMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1elhHNWNkRngwWkdGMFlUb2dleUJoZFhSb1pXNTBhV05oZEdWa09pQm1ZV3h6WlNCOUxGeHVYSFJjZEhSbGJYQnNZWFJsY3pvZ2V5QmpiMjF3YjI1bGJuUk9ZVzFsT2lCSVZFMU1UM0pRY21WamIyMXdhV3hsWkVadUlIMHNYRzVjZEZ4MFkyOXRjRzl1Wlc1MGN6b2dleUJqYjIxd2IyNWxiblJPWVcxbE9pQkRiMjF3YjI1bGJuUkVaV1pwYm1sMGFXOXVJSDFjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHTmlYRzRnS2k5Y2JseHVkbUZ5SUV4dloyZGxjaUE5SUhKbGNYVnBjbVVvSnk0dUwyeHZaMmRsY2k5cGJtUmxlQ2NwTzF4dWRtRnlJR0oxYVd4a1EyOXRjRzl1Wlc1MFJHVm1hVzVwZEdsdmJpQTlJSEpsY1hWcGNtVW9KeTR1TDJSbFptbHVaUzlpZFdsc1pFUmxabWx1YVhScGIyNG5LVHRjYm5aaGNpQmlkV2xzWkVOdmJYQnZibVZ1ZEZCeWIzUnZkSGx3WlNBOUlISmxjWFZwY21Vb0p5NHZZblZwYkdSUWNtOTBiM1I1Y0dVbktUdGNiblpoY2lCamIyeHNaV04wVkdWdGNHeGhkR1Z6Um5KdmJWTmpjbWx3ZEZSaFozTWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmJHeGxZM1JVWlcxd2JHRjBaWE5HY205dFUyTnlhWEIwVkdGbmN5Y3BPMXh1ZG1GeUlHTnZiR3hsWTNSU1pXZHBiMjV6SUQwZ2NtVnhkV2x5WlNnbkxpOWpiMnhzWldOMFVtVm5hVzl1Y3ljcE8xeHVkbUZ5SUhObGRIVndVbTkxZEdWeUlEMGdjbVZ4ZFdseVpTZ25MaTR2Y205MWRHVnlMMmx1WkdWNEp5azdYRzVjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCeVlXbHpaU2h2Y0hScGIyNXpMQ0JqWWlrZ2UxeHVYRzVjZEM4dklFbG1JRzl1YkhrZ2IyNWxJR0Z5WnlCcGN5QndjbVZ6Wlc1MExDQjFjMlVnYjNCMGFXOXVjeUJoY3lCallXeHNZbUZqYXlCcFppQndiM056YVdKc1pTNWNibHgwTHk4Z1NXWWdiM0IwYVc5dWN5QmhjbVVnYm05MElHUmxabWx1WldRc0lIVnpaU0JoYmlCbGJYQjBlU0J2WW1wbFkzUXVYRzVjZEdsbUlDZ2hZMklnSmlZZ1h5NXBjMFoxYm1OMGFXOXVLRzl3ZEdsdmJuTXBLU0I3WEc1Y2RGeDBZMklnUFNCdmNIUnBiMjV6TzF4dVhIUjlYRzVjZEdsbUlDZ2hYeTVwYzFCc1lXbHVUMkpxWldOMEtHOXdkR2x2Ym5NcEtTQjdYRzVjZEZ4MGIzQjBhVzl1Y3lBOUlIdDlPMXh1WEhSOVhHNWNibHgwTHk4Z1NXNTBaWEp3Y21WMElHQndjbTlrZFdOMGFXOXVZQ0JoY3lCZ2JHOW5UR1YyWld3Z1BUMDlJQ2R6YVd4bGJuUW5ZRnh1WEhScFppQW9SbEpCVFVWWFQxSkxMbTl3ZEdsdmJuTXVjSEp2WkhWamRHbHZiaWtnZTF4dVhIUmNkRVpTUVUxRlYwOVNTeTV2Y0hScGIyNXpMbXh2WjB4bGRtVnNJRDBnSjNOcGJHVnVkQ2M3WEc1Y2RIMWNibHh1WEhRdkx5QkpibWwwYVdGc2FYcGxJR3h2WjJkbGNseHVYSFJ1WlhjZ1RHOW5aMlZ5S0NrN1hHNWNibHgwTHk4Z1RXVnlaMlVnWkdGMFlTQnBiblJ2SUVaU1FVMUZWMDlTU3k1a1lYUmhYRzVjZEY4dVpYaDBaVzVrS0VaU1FVMUZWMDlTU3k1a1lYUmhMQ0J2Y0hScGIyNXpMbVJoZEdFZ2ZId2dlMzBwTzF4dVhHNWNkQzh2SUUxbGNtZGxJSE53WldOcFptbGxaQ0IwWlcxd2JHRjBaWE1nZDJsMGFDQkdVa0ZOUlZkUFVrc3VkR1Z0Y0d4aGRHVnpYRzVjZEY4dVpYaDBaVzVrS0VaU1FVMUZWMDlTU3k1MFpXMXdiR0YwWlhNc0lHOXdkR2x2Ym5NdWRHVnRjR3hoZEdWeklIeDhJSHQ5S1R0Y2JseHVYSFF2THlCSlppQkdVa0ZOUlZkUFVrc3VaR1ZtYVc1bEtDa2dkMkZ6SUhWelpXUXNJR0oxYVd4a0lIUm9aU0JzYVhOMElHOW1JR052YlhCdmJtVnVkSE5jYmx4MEx5OGdTWFJsY21GMFpTQjBhSEp2ZFdkb0lIUm9aU0JrWldacGJtVWdjWFZsZFdVZ1lXNWtJR055WldGMFpTQmxZV05vSUdSbFptbHVhWFJwYjI1Y2JseDBYeTVsWVdOb0tFWlNRVTFGVjA5U1N5NWZaR1ZtYVc1bFVYVmxkV1VzSUdKMWFXeGtRMjl0Y0c5dVpXNTBSR1ZtYVc1cGRHbHZiaWs3WEc1Y2JseDBMeThnVFdWeVoyVWdjM0JsWTJsbWFXVmtJR052YlhCdmJtVnVkSE1nZHk4Z1JsSkJUVVZYVDFKTExtTnZiWEJ2Ym1WdWRITmNibHgwWHk1bGVIUmxibVFvUmxKQlRVVlhUMUpMTG1OdmJYQnZibVZ1ZEhNc0lHOXdkR2x2Ym5NdVkyOXRjRzl1Wlc1MGN5QjhmQ0I3ZlNrN1hHNWNibHgwTHk4Z1FtRmpheUIxY0NCbFlXTm9JR052YlhCdmJtVnVkQ0JrWldacGJtbDBhVzl1SUdKbFptOXlaU0IwY21GdWMyWnZjbTFwYm1jZ2FYUWdhVzUwYnlCaElHeHBkbVVnY0hKdmRHOTBlWEJsWEc1Y2RFWlNRVTFGVjA5U1N5NWpiMjF3YjI1bGJuUkVaV1p6SUQwZ1h5NWpiRzl1WlNoR1VrRk5SVmRQVWtzdVkyOXRjRzl1Wlc1MGN5azdYRzVjYmx4MEx5OGdVblZ1SUhSb2FYTWdZMkZzYkNCaVlXTnJJSGRvWlc0Z2RHaGxJRVJQVFNCcGN5QnlaV0ZrZVZ4dVhIUWtLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseHVYSFJjZEM4dklFTnZiR3hsWTNRZ1lXNTVJRHh6WTNKcGNIUStJSFJoWnlCMFpXMXdiR0YwWlhNZ2IyNGdkR2hsSUhCaFoyVmNibHgwWEhRdkx5QmhibVFnWVdKemIzSmlJSFJvWlcwZ2FXNTBieUJHVWtGTlJWZFBVa3N1ZEdWdGNHeGhkR1Z6WEc1Y2RGeDBYeTVsZUhSbGJtUW9SbEpCVFVWWFQxSkxMblJsYlhCc1lYUmxjeXdnWTI5c2JHVmpkRlJsYlhCc1lYUmxjMFp5YjIxVFkzSnBjSFJVWVdkektDa3BPMXh1WEc1Y2RGeDBMeThnUW5WcGJHUWdZV04wZFdGc0lIQnliM1J2ZEhsd1pYTWdabTl5SUhSb1pTQmpiMjF3YjI1bGJuUnpYRzVjZEZ4MEx5OGdLRzVsWldRZ2RHaGxJSFJsYlhCc1lYUmxjeUJoZENCMGFHbHpJSEJ2YVc1MElIUnZJRzFoYTJVZ2RHaHBjeUIzYjNKcktWeHVYSFJjZEY4dVpXRmphQ2hHVWtGTlJWZFBVa3N1WTI5dGNHOXVaVzUwY3l3Z1luVnBiR1JEYjIxd2IyNWxiblJRY205MGIzUjVjR1VwTzF4dVhHNWNkRngwTHk4Z1IzSmhZaUJwYm1sMGFXRnNJSEpsWjJsdmJuTWdabkp2YlNCRVQwMWNibHgwWEhSamIyeHNaV04wVW1WbmFXOXVjeWdwTzF4dVhHNWNkRngwTHk4Z1FtbHVaQ0JuYkc5aVlXd2dSRTlOSUdWMlpXNTBjeUJoY3lCR1VrRk5SVmRQVWtzZ1pYWmxiblJ6WEc1Y2RGeDBMeThnS0dVdVp5NGdKWGRwYm1SdmR6cHlaWE5wZW1VcFhHNWNkRngwZG1GeUlIUnlhV2RuWlhKU1pYTnBlbVZGZG1WdWRDQTlJRjh1WkdWaWIzVnVZMlVvWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFJjZEZ4MFJsSkJUVVZYVDFKTExuUnlhV2RuWlhJb0p5VjNhVzVrYjNjNmNtVnphWHBsSnlrN1hHNWNkRngwZlN3Z1JsSkJUVVZYVDFKTExtOXdkR2x2Ym5NdWRHaHliM1IwYkdWWGFXNWtiM2RTWlhOcGVtVWdmSHdnTUNrN1hHNWNkRngwSkNoM2FXNWtiM2NwTG5KbGMybDZaU2gwY21sbloyVnlVbVZ6YVhwbFJYWmxiblFwTzF4dVhIUmNkQzh2SUZSUFJFODZJR0ZrWkNCdGIzSmxJR1YyWlc1MGN5QmhibVFnWlhoMGNtRndiMnhoZEdVZ2RHaHBjeUJzYjJkcFl5QjBieUJoSUhObGNHRnlZWFJsSUcxdlpIVnNaVnh1WEc1Y2RGeDBMeThnUkc4Z2RHaGxJR2x1YVhScFlXd2djbTkxZEdsdVp5QnpaWEYxWlc1alpWeHVYSFJjZEM4dklFeHZiMnNnWVhRZ2RHaGxJQ05tY21GbmJXVnVkQ0IxY213Z1lXNWtJR1pwY21VZ2RHaGxJR2RzYjJKaGJDQnliM1YwWlNCbGRtVnVkRnh1WEhSY2RITmxkSFZ3VW05MWRHVnlLQ2s3WEc1Y2RGeDBSbEpCVFVWWFQxSkxMbWhwYzNSdmNua3VjM1JoY25Rb1h5NWtaV1poZFd4MGN5aDdYRzVjZEZ4MFhIUndkWE5vVTNSaGRHVTZJSFZ1WkdWbWFXNWxaQ3hjYmx4MFhIUmNkR2hoYzJoRGFHRnVaMlU2SUhWdVpHVm1hVzVsWkN4Y2JseDBYSFJjZEhKdmIzUTZJSFZ1WkdWbWFXNWxaRnh1WEhSY2RIMHNJRzl3ZEdsdmJuTXBLVHRjYmx4dVhIUmNkR2xtSUNoallpa2dZMklvS1R0Y2JseDBmU2s3WEc1OU8xeHVJaXdpTHlvcVhHNGdLaUJCY0hCbGJtUWdZU0JqYjIxd2IyNWxiblFnZEc4Z2RHaGxJR1Z1WkNCdlppQmhJSEpsWjJsdmJpNGdWR2hwY3lCallXeHNjeUJwYm5ObGNuUWdZWFFnZEdobElHeGhjM1FnY0c5emFYUnBiMjR1WEc0Z0tseHVJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0JqYjIxd2IyNWxiblJKWkNCYlZHaGxJR052YlhCdmJtVnVkQ0JwWkNCMGFHRjBJSGRsSUhkaGJuUWdkRzhnWVhCd1pXNWtYVnh1SUNvZ1FIQmhjbUZ0SUNCN1QySnFaV04wZlNCd2NtOXdaWEowYVdWeklDQmJVSEp2Y0dWeWRHbGxjeUIwYnlCcGJuTjBZVzUwYVdGMFpTQjBhR1VnWTI5dGNHOXVaVzUwSUhkcGRHaGRYRzRnS2x4dUlDb2dRSEpsZEhWeWJpQjdRMjl0Y0c5dVpXNTBmU0FnSUNBZ0lDQWdJQ0JiVG1WM2JIa2dZWEJ3Wlc1a1pXUWdRMjl0Y0c5dVpXNTBYVnh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHRndjR1Z1WkNoamIyMXdiMjVsYm5SSlpDd2djSEp2Y0dWeWRHbGxjeWtnZTF4dVhIUXZMeUJKYm5ObGNuUWdZWFFnYkdGemRDQndiM05wZEdsdmJseHVYSFJ5WlhSMWNtNGdkR2hwY3k1cGJuTmxjblFvZEdocGN5NWZZMmhwYkdSeVpXNHViR1Z1WjNSb0xDQmpiMjF3YjI1bGJuUkpaQ3dnY0hKdmNHVnlkR2xsY3lrN1hHNTlPMXh1SWl3aUx5b3FYRzRnS2lCVGFHOXlkR04xZENCbWIzSWdZMkZzYkdsdVp5QmxiWEIwZVNncElHRnVaQ0IwYUdWdUlHRndjR1Z1WkNncExGeHVJQ29nVkdocGN5QnBjeUIwYUdVZ1oyVnVaWEpoYkNCMWMyVWdZMkZ6WlNCbWIzSWdiV0Z1WVdkcGJtY2djM1ZpWTI5dGNHOXVaVzUwYzF4dUlDb2dLR1V1Wnk0Z2QyaGxiaUJoSUc1aGRtSmhjaUJwZEdWdElHbHpJSFJ2ZFdOb1pXUXBYRzRnS2x4dUlDb2dRSEJoY21GdElDQjdVM1J5YVc1bmZTQmpiMjF3YjI1bGJuUWdJRnRVYUdVZ2FXUWdibUZ0WlNCdlppQjBhR1VnWTI5dGNHOXVaWFFnZEdoaGRDQjViM1VnZDJGdWRDQjBieUJoZEhSaFkyaGRYRzRnS2lCQWNHRnlZVzBnSUh0UFltcGxZM1I5SUhCeWIzQmxjblJwWlhNZ1cxQnliM0JsY25ScFpYTWdkR2hoZENCMGFHVWdZWFIwWVdOb1pXUWdZMjl0Y0c5dVpXNTBJSGRwYkd3Z1ltVWdhVzVwZEdGc2FYcGxaQ0IzYVhSb1hWeHVJQ3BjYmlBcUlFQnlaWFIxY200Z2UwTnZiWEJ2Ym1WdWRIMGdYSFJjZEZ4MFhIUWdXMDVsZDJ4NUlHRjBkR0ZqYUdWa0lHTnZiWEJ2Ym1WdWRGMWNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCaGRIUmhZMmdvWTI5dGNHOXVaVzUwTENCd2NtOXdaWEowYVdWektTQjdYRzVjZEhSb2FYTXVaVzF3ZEhrb0tUdGNibHgwY21WMGRYSnVJSFJvYVhNdVlYQndaVzVrS0dOdmJYQnZibVZ1ZEN3Z2NISnZjR1Z5ZEdsbGN5azdYRzU5TzF4dUlpd2lMeW9xWEc0Z0tpQnlaV2RwYjI0dVpXMXdkSGtvSUNsY2JpQXFYRzRnS2lCSmRHVnlZWFJsSUc5MlpYSWdaV0ZqYUNCamIyMXdiMjVsYm5RZ2FXNGdkR2hwY3lCeVpXZHBiMjRnWVc1a0lHTmhiR3dnTG1Oc2IzTmxLQ2tnYjI0Z2FYUmNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCbGJYQjBlU2dwSUh0Y2JseDBSbEpCVFVWWFQxSkxMbVJsWW5WbktIUm9hWE11Y0dGeVpXNTBMbWxrSUNzZ0p5QTZPaUJGYlhCMGVXbHVaeUJ5WldkcGIyNDZJQ2NnS3lCMGFHbHpMbWxrS1R0Y2JseDBkMmhwYkdVZ0tIUm9hWE11WDJOb2FXeGtjbVZ1TG14bGJtZDBhQ0ErSURBcElIdGNibHgwWEhSMGFHbHpMbkpsYlc5MlpTZ3dLVHRjYmx4MGZWeHVmVHRjYmlJc0lpOHFLbHh1SUNvZ1RXOWtkV3hsSUdSbGNHVnVaR1Z1WTJsbGMxeHVJQ292WEc1MllYSWdaV3d5VFdGemRFbEVJRDBnY21WeGRXbHlaU2duTGk0dmRYUnBiSE12Wld3eVRXRnpkRWxFSnlrc1hHNWNkR1ZzTWtSbFptRjFiSFJVWlcxd2JHRjBaVWxFSUQwZ2NtVnhkV2x5WlNnbkxpNHZkWFJwYkhNdlpXd3lSR1ZtWVhWc2RGUmxiWEJzWVhSbFNVUW5LVHRjYmx4dVhHNWNiaThxS2x4dUlDb2dSbUZqZEc5eWVTQnRaWFJvYjJRZ2RHOGdaMlZ1WlhKaGRHVWdZU0J1WlhjZ2NtVm5hVzl1SUdsdWMzUmhibU5sSUdaeWIyMGdZU0JFVDAwZ1pXeGxiV1Z1ZEZ4dUlDb2dRV3h6YnlCcGJYQnNaVzFsYm5SeklHQjBaVzF3YkdGMFpXQWdZVzVrSUdCamIzVnVkR0FnWkdseVpXTjBhWFpsY3l3Z1lYTWdkMlZzYkNCaGN5QnpkWEJ3YjNKMFhHNGdLaUJtYjNJZ1pXMWlaV1JrWldRZ2RHVnRjR3hoZEdWeklHSjVJR05vWldOcmFXNW5JR0JsYkdBbmN5QnBibTVsY2toVVRVd3VYRzRnS2x4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5OY2JpQXFJRUJ5WlhSMWNtNXpJSEpsWjJsdmJpQnBibk4wWVc1alpWeHVJQ292WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z1puSnZiVVZzWlcxbGJuUW9aV3dzSUhCaGNtVnVkQ2tnZTF4dVhHNWNkQzh2SUVsbUlIQmhjbVZ1ZENCcGN5QnViM1FnYzNCbFkybG1hV1ZrTENCdFlXdGxMV0psYkdsbGRtVXVYRzVjZEhCaGNtVnVkQ0E5SUhCaGNtVnVkQ0I4ZkNCN0lHbGtPaUFuS2ljZ2ZUdGNibHh1WEhSMllYSWdKR1ZzSUQwZ0pDaGxiQ2s3WEc1Y2JseHVYSFF2THlCQ2RXbHNaQ0J5WldkcGIyNWNibHgwZG1GeUlISmxaMmx2YmlBOUlHNWxkeUJHVWtGTlJWZFBVa3N1VW1WbmFXOXVLSHRjYmx4MFhIUnBaRG9nWld3eVRXRnpkRWxFS0dWc0tTeGNibHgwWEhRa1pXdzZJQ1JsYkN4Y2JseDBYSFJ3WVhKbGJuUTZJSEJoY21WdWRGeHVYSFI5S1R0Y2JseHVYSFF2THlCelpYUWdaVzFpWldSa1pXUWdZMjl0Y0c5dVpXNTBJSFJ2SUhOMGNtbHVaeUJ2WmlCamIyMXdiMjVsYm5RZ2RHaGhkQ0IzWlNCM1lXNTBJSFJ2SUhKbGJtUmxjaUJwYmlCMGFHbHpJR0Z5WldFdVhHNWNkSFpoY2lCbGJXSmxaR1JsWkVOdmJYQnZibVZ1ZENBOUlISmxaMmx2Ymk1bGJXSmxaR1JsWkVOdmJYQnZibVZ1ZER0Y2JseDBhV1lnS0Y4dWFYTlBZbXBsWTNRb1pXMWlaV1JrWldSRGIyMXdiMjVsYm5RcEtTQjdYRzVjZEZ4MFpXMWlaV1JrWldSRGIyMXdiMjVsYm5RZ1BTQnlaV2RwYjI0dVpXMWlaV1JrWldSRGIyNTBaVzUwTzF4dVhIUjlYRzVjYmx4dVhIUXZMeUJKWmlCZ2RHVnRjR3hoZEdWZ0lITm9iM0owWTNWMElHbHpJR1Z1WVdKc1pXUXNJR0Z3Y0dWdVpDQnpjR1ZqYVdacFpXUWdjM1ZpTFdOdmJYQnZibVZ1ZENoektWeHVYSFF2THlCMGJ5QjBhR1VnY21WbmFXOXVJR0YxZEc5dFlYUnBZMkZzYkhrdUlGZGxJR0ZzYzI4Z2JXRnJaU0J6ZFhKbElIUm9ZWFFnZEdobElISmxaMmx2YmlCa2IyVnpiblFnYUdGMlpWeHVYSFF2THlCbGJXSmxaR1JsWkNCamIyNTBaVzUwTGlCSlppQnBkQ0JrYjJWekxDQjBhR1Z1SUdSdmJuUWdZWEJ3Wlc1a0lHbDBJR2x1TGx4dVhIUnBaaUFvSUVaU1FVMUZWMDlTU3k1dmNIUnBiMjV6TG5Ob2IzSjBZM1YwTG5SbGJYQnNZWFJsSUNZbUlHVnRZbVZrWkdWa1EyOXRjRzl1Wlc1MElDWW1JQ0Z5WldkcGIyNHVhR0Z6UTI5dWRHVnVkQ2tnZTF4dVhHNWNkRngwTHk4Z1NXWWdZR052ZFc1MFlDQnBjeUJ6WlhRc0lISmxibVJsY2lCemRXSXRZMjl0Y0c5dVpXNTBJSE53WldOcFptbGxaQ0J1ZFcxaVpYSWdiMllnZEdsdFpYTXVYRzVjZEZ4MEx5OGdaUzVuTGlBOGNtVm5hVzl1SUhSbGJYQnNZWFJsUFZ3aVJtOXZYQ0lnWTI5MWJuUTlYQ0l6WENJZ0x6NWNibHgwWEhRdkwxeHVYSFJjZEM4dklDaE9iM1JsSUhSb1lYUWdhV1lnZEdobElHQmpiM1Z1ZEdBZ2MyaHZjblJqZFhRZ2FYTWdaR2x6WVdKc1pXUXNJR0JqYjNWdWRHQWdhWE1nWVd4M1lYbHpJRDBnTVNsY2JseDBYSFIyWVhJZ1kyOTFiblE3WEc1Y2RGeDBhV1lnS0VaU1FVMUZWMDlTU3k1dmNIUnBiMjV6TG5Ob2IzSjBZM1YwTG1OdmRXNTBLU0I3WEc1Y2RGeDBYSFJqYjNWdWRDQTlJQ2gwZVhCbGIyWWdKR1ZzTG1GMGRISW9KMk52ZFc1MEp5a2dJVDA5SUNkMWJtUmxabWx1WldRbktTQS9JQ1JsYkM1aGRIUnlLQ2RqYjNWdWRDY3BJRG9nTVR0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCQmNIQmxibVFnZEdobElITjFZbU52YlhCdmJtVnVkQ0IwYUdVZ1lYQndjbTl3Y21saGRHVWdJeUJ2WmlCMGFXMWxjeTVjYmx4MFhIUm1iM0lnS0haaGNpQnBQVEE3SUdrZ1BDQmpiM1Z1ZERzZ2FTc3JJQ2tnZTF4dVhIUmNkRngwY21WbmFXOXVMbUZ3Y0dWdVpDaGxiV0psWkdSbFpFTnZiWEJ2Ym1WdWRDazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MFJsSkJUVVZYVDFKTExtUmxZblZuS0Z4dVhIUmNkRngwY0dGeVpXNTBMbWxrSUNzZ0p5QTZMVG9nU1c1emRHRnVkR2xoZEdWa3dxQnVaWGNnY21WbmFXOXVKeUFyWEc1Y2RGeDBYSFFvSUhKbFoybHZiaTVwWkNBL0lDY2dZQ2NnS3lCeVpXZHBiMjR1YVdRZ0t5QW5ZQ2NnT2lBbkp5QXBJQ3RjYmx4MFhIUmNkQ2dnWlcxaVpXUmtaV1JEYjIxd2IyNWxiblFnUHlBbklHRnVaQ0J3YjNCMWJHRjBaV1FnYVhRZ2QybDBhQ2NnSzF4dVhIUmNkRngwWEhRb0lHTnZkVzUwSUQ0Z01TQS9JR052ZFc1MElDc2dKeUJwYm5OMFlXNWpaWE1nYjJZbklEb2dKeUF4SnlBcElDdGNibHgwWEhSY2RGeDBKeUJnSnlBcklHVnRZbVZrWkdWa1EyOXRjRzl1Wlc1MElDc2dKMkFuSURvZ0p5ZGNibHgwWEhSY2RDa2dLeUFuTGlkY2JseDBYSFFwTzF4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUhKbFoybHZianRjYm4wN1hHNGlMQ0l2S2lwY2JpQXFJRTF2WkhWc1pTQmtaWEJsYm1SbGJtTnBaWE5jYmlBcUwxeHVYRzUyWVhJZ2FXNXpaWEowSUQwZ2NtVnhkV2x5WlNnbkxpOXBibk5sY25RbktTeGNibHgwY21WdGIzWmxJRDBnY21WeGRXbHlaU2duTGk5eVpXMXZkbVVuS1N4Y2JseDBaVzF3ZEhrZ1BTQnlaWEYxYVhKbEtDY3VMMlZ0Y0hSNUp5a3NYRzVjZEdGd2NHVnVaQ0E5SUhKbGNYVnBjbVVvSnk0dllYQndaVzVrSnlrc1hHNWNkR0YwZEdGamFDQTlJSEpsY1hWcGNtVW9KeTR2WVhSMFlXTm9KeWtzWEc1Y2RIQnlaWEJsYm1RZ1BTQnlaWEYxYVhKbEtDY3VMM0J5WlhCbGJtUW5LU3hjYmx4MFpuSnZiVVZzWlcxbGJuUWdQU0J5WlhGMWFYSmxLQ2N1TDJaeWIyMUZiR1Z0Wlc1MEp5a3NYRzVjZEdWc01rUmxabUYxYkhSVVpXMXdiR0YwWlVsRUlEMGdjbVZ4ZFdseVpTZ25MaTR2ZFhScGJITXZaV3d5UkdWbVlYVnNkRlJsYlhCc1lYUmxTVVFuS1N4Y2JseDBZblZwYkdSRGIyMXdiMjVsYm5SUWNtOTBiM1I1Y0dVZ1BTQnlaWEYxYVhKbEtDY3VMaTl5WVdselpTOWlkV2xzWkZCeWIzUnZkSGx3WlNjcE8xeHVYRzVjYmk4cUtseHVJQ29nUmxKQlRVVlhUMUpMTGxKbFoybHZibHh1SUNwY2JpQXFJRUJ3WVhKaGJTQWdlMDlpYW1WamRIMGdjSEp2Y0dWeWRHbGxjMXh1SUNwY2JpQXFJRUJqYjI1emRISjFZM1J2Y2x4dUlDb3ZYRzVjYm5aaGNpQlNaV2RwYjI0Z1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlISmxaMmx2Ymlod2NtOXdaWEowYVdWektTQjdYRzVjYmx4MFh5NWxlSFJsYm1Rb2RHaHBjeXdnUmxKQlRVVlhUMUpMTGtWMlpXNTBjeWs3WEc1Y2JseDBhV1lnS0NGd2NtOXdaWEowYVdWektTQjdYRzVjZEZ4MGNISnZjR1Z5ZEdsbGN5QTlJSHQ5TzF4dVhIUjlYRzVjZEdsbUlDZ2hjSEp2Y0dWeWRHbGxjeTRrWld3cElIdGNibHgwWEhSMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFSeWVXbHVaeUIwYnlCcGJuTjBZVzUwYVdGMFpTQnlaV2RwYjI0Z2QybDBhQ0J1YnlBa1pXd2hKeWs3WEc1Y2RIMWNibHh1WEhRdkx5QkdiMnhrSUdsdUlIQnliM0JsY25ScFpYTWdkRzhnY0hKdmRHOTBlWEJsWEc1Y2RGOHVaWGgwWlc1a0tIUm9hWE1zSUhCeWIzQmxjblJwWlhNcE8xeHVYRzVjZEM4dklFbG1JSFJvWlNCeVpXZHBiMjRnYUdGeklHRWdZMjl0Y0c5dVpXNTBMM1JsYlhCc1lYUmxJR2xrWlc1MGFXWnBaWElzSUNobExtY3VJRHh5WldkcGIyNGdkR1Z0Y0d4aGRHVTlYQ0pHYjI5Y0lpQXZQaWxjYmx4MEx5OGdkMlVuYkd3Z2RYTmxJSFJvWVhRZ1lYTWdkR2hsSUdCbGJXSmxaR1JsWkVOdmJYQnZibVZ1ZEdBdVhHNWNkSFJvYVhNdVpXMWlaV1JrWldSRGIyMXdiMjVsYm5RZ1BTQmxiREpFWldaaGRXeDBWR1Z0Y0d4aGRHVkpSQ2gwYUdsekxpUmxiRnN3WFNrN1hHNWNibHgwTHk4Z1RtVjRkQ3dnWTJobFkyc2dhV1lnZEdobElISmxaMmx2YmlCb1lYTWdZVzU1SUdWdFltVmtaR1ZrSUVoVVRVd3VYRzVjZEhaaGNpQmxiV0psWkdSbFpGUmxiWEJzWVhSbElEMGdkR2hwY3k0a1pXd3VhSFJ0YkNncE8xeHVYRzVjYmx4dVhIUXZMeUJVY21sdElIZG9hWFJsYzNCaFkyVWdabkp2YlNCbGJXSmxaR1JsWkNCMFpXMXdiR0YwWlNCcGJpQmpZWE5sSUdsMElIZGhjeUJwYm1Oc2RXUmxaQ0JpZVNCaFkyTnBaR1Z1ZEM1Y2JseDBaVzFpWldSa1pXUlVaVzF3YkdGMFpTQTlJR1Z0WW1Wa1pHVmtWR1Z0Y0d4aGRHVWdKaVlnWlcxaVpXUmtaV1JVWlcxd2JHRjBaUzV5WlhCc1lXTmxLQzllWEZ4ekt5OHNJQ2NuS1R0Y2JseDBaVzFpWldSa1pXUlVaVzF3YkdGMFpTQTlJR1Z0WW1Wa1pHVmtWR1Z0Y0d4aGRHVWdKaVlnWlcxaVpXUmtaV1JVWlcxd2JHRjBaUzV5WlhCc1lXTmxLQzljWEhNckpDOHNJQ2NuS1R0Y2JseHVYSFF2THlCSmJuTjBZVzUwYVdGMFpTQmhiaUJoYm05dWVXMXZkWE1nWTI5dGNHOXVaVzUwSUdadmNpQjBhR1VnWlcxaVpXUmtaV1FnZEdWdGNHeGhkR1V1WEc1Y2RHbG1JQ2hsYldKbFpHUmxaRlJsYlhCc1lYUmxLU0I3WEc1Y2JseDBYSFF2THlCSGFYWmxJR0Z1SUdac1lXY2djMjhnZDJVZ2EyNXZkeUIwYUdseklISmxaMmx2YmlCb1lYTWdaVzFpWldSa1pXUWdZMjl1ZEdWdWRDNWNibHgwWEhSMGFHbHpMbWhoYzBOdmJuUmxiblFnUFNCMGNuVmxPMXh1WEc1Y2RGeDBMeThnUVdSa0lIUm9hWE1nZEdWdGNHeGhkR1VnZEc4Z2IzVnlJR052Ykd4bFkzUnBiMjRnYjJZZ1puSmhiV1YzYjNKcklIUmxiWEJzWVhSbGN5NGdWR2hwY3lCM2FXeHNJR0ZzYkc5M0lIVnpJSFJ2WEc1Y2RGeDBMeThnY21WdVpHVnlJSFJvYVhNZ1kyOXRjRzl1Wlc1MElHbHVJSFJvWlNCbWRYUjFjbVV1WEc1Y2RGeDBSbEpCVFVWWFQxSkxMblJsYlhCc1lYUmxjMXQwYUdsekxtVnRZbVZrWkdWa1EyOXRjRzl1Wlc1MFhTQTlJR1Z0WW1Wa1pHVmtWR1Z0Y0d4aGRHVTdYRzVjYmx4MFhIUXZMeUJKWmlCMGFHVWdSbkpoYldWM2IzSnJJR2hoY3lCMGFHbHpJR052YlhCdmJtVnVkQ0J5WldkcGMzUmxjbVZrSUdadmNpQjBhR2x6SUdWdFltVmtaR1ZrSUdOdmJYQnZibVZ1ZEN4Y2JseDBYSFF2THlCMGFHVnVJR055WldGMFpTQmhJSEJ5YjNSdmRIbHdaU0J2WmlCMGFHbHpJR052YlhCdVpXNTBMaUJVYUdseklHRnNiRzkzY3lCb1lYWnBibWNnYkc5bmFXTWdabTl5SUhSb2FYTmNibHgwWEhRdkx5QmxiV0psWkdSbFpDQmpiMjF3YjI1bGJuUWdhVzRnWVNCa2FXWm1aWEpsYm5RZ1kyOXRjRzl1Wlc1MElHWnBiR1V1WEc1Y2RGeDBhV1lnS0Y4dWFHRnpLRVpTUVUxRlYwOVNTeTVqYjIxd2IyNWxiblJFWldaekxDQjBhR2x6TG1WdFltVmtaR1ZrUTI5dGNHOXVaVzUwS1NrZ2UxeHVYSFJjZEZ4MGRtRnlJR052YlhCdmJtVnVkRVJsWmlBOUlFWlNRVTFGVjA5U1N5NWpiMjF3YjI1bGJuUkVaV1p6VzNSb2FYTXVaVzFpWldSa1pXUkRiMjF3YjI1bGJuUmRMRnh1WEhSY2RGeDBYSFJjZEdOdmJYQnZibVZ1ZEV0bGVTQTlJSFJvYVhNdVpXMWlaV1JrWldSRGIyMXdiMjVsYm5RN1hHNWNibHgwWEhSY2RHSjFhV3hrUTI5dGNHOXVaVzUwVUhKdmRHOTBlWEJsS0dOdmJYQnZibVZ1ZEVSbFppd2dZMjl0Y0c5dVpXNTBTMlY1S1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCWGFYQmxJSFJvWlNCbGJXSmxaR1JsWkNCSVZFMU1JR1p5YjIwZ2RHaGxJRVJQVFM1Y2JseDBYSFF2THlCT1QxUkZPaUIwYUdseklITjBaWEFnWTI5MWJHUWdZbVVnYjIxcGRIUmxaQ3dnWW5WMElHeGxZWFpwYm1jZ2FYUWdhVzRnYm05M0lHWnZjaUJ6WVdabGRIa3VYRzVjZEZ4MGRHaHBjeTRrWld3dVpXMXdkSGtvS1R0Y2JseHVYSFJjZEM4dklFVjRkR1Z1WkNCaElHTnZiWEJ2Ym1WdWRDQndjbTkwYjNSNWNHVXNJSFJvWlc0Z2FXNXpkR0Z1ZEdsaGRHVWdkR2hsSUdOdmJYQnZibVZ1ZEN4Y2JseDBYSFF2THlCaWRYUWdaRzl1SjNRZ2NtVnVaR1Z5SUhsbGRDNGdJRWwwSjNNZ1lXeHlaV0ZrZVNCeVpXNWtaWEpsWkN3Z2JXOXpkR3g1SVNBb1pYaGpaWEIwSUdadmNpQkpWRk1nY21WbmFXOXVjeWxjYmx4MFhIUXZMeUJYWlNkc2JDQjFjMlVnZEdocGN5QmhibTl1ZVcxdmRYTWdZMjl0Y0c5dVpXNTBJR2x1YzNSaGJtTmxJR0Z6SUc5MWNpQmdaVzFpWldSa1pXUkRiMjF3YjI1bGJuUmdJR1p2Y2lCMGFHbHpYRzVjZEZ4MEx5OGdjbVZuYVc5dUxseHVYSFJjZEM4dklIWmhjaUIwWlcxd2JHRjBaVkJ5YjNCbGNuUnBaWE1nUFNCN1hHNWNkRngwTHk4Z1hIUjBaVzF3YkdGMFpUb2daVzFpWldSa1pXUlVaVzF3YkdGMFpTeGNibHgwWEhRdkx5QmNkR2xrT2lCMGFHbHpMbVZ0WW1Wa1pHVmtRMjl0Y0c5dVpXNTBYRzVjZEZ4MEx5OGdmVHRjYmx4dVhIUmNkQzh2SUhOb2IzSjBZM1YwSUhSdklHZGxkQ0JvYjJ4a0lHOW1JR1Z0WW1Wa1pHVmtJR052YlhCdmJtVnVkQ0JwWkM1Y2JseDBYSFIwYUdsekxtVnRZbVZrWkdWa1EyOXVkR1Z1ZENBOUlIUm9hWE11WlcxaVpXUmtaV1JEYjIxd2IyNWxiblE3WEc1Y2JseDBYSFF2THlCMGFHbHpMbVZ0WW1Wa1pHVmtRMjl0Y0c5dVpXNTBJRDBnYm1WM0lDaEdVa0ZOUlZkUFVrc3VRMjl0Y0c5dVpXNTBMbVY0ZEdWdVpDaDBaVzF3YkdGMFpWQnliM0JsY25ScFpYTXBLU2h3Y205d1pYSjBhV1Z6S1R0Y2JseDBYSFF2THlCMGFHbHpMbVZ0WW1Wa1pHVmtRMjl0Y0c5dVpXNTBJRDBnYm1WM0lFWlNRVTFGVjA5U1N5NURiMjF3YjI1bGJuUW9kR1Z0Y0d4aGRHVlFjbTl3WlhKMGFXVnpLVHRjYmx4MFhIUXZMeUJqYjI1emIyeGxMbXh2WnlnbmMyOXRaWFJvYVc1bkp5azdYRzVjYmx4MGZWeHVYRzVjZEM4dklFbG1JRzVsYVhSb1pYSWdZVzRnYVdRZ2JtOXlJR0VnWUhSbGJYQnNZWFJsWUNCM1lYTWdjM0JsWTJsbWFXVmtMRnh1WEhRdkx5QjNaU2RzYkNCMGFISnZkeUJoYmlCbGNuSnZjaXdnYzJsdVkyVWdkR2hsY21VbmN5QnVieUIzWVhrZ2RHOGdaMlYwSUdFZ2FHOXNaQ0J2WmlCMGFHVWdjbVZuYVc5dVhHNWNkR2xtSUNnZ0lYUm9hWE11YVdRZ0ppWWdJWFJvYVhNdVpXMWlaV1JrWldSRGIyMXdiMjVsYm5RZ0tTQjdYRzVjYmx4MFhIUjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNWNkRngwWEhSMGFHbHpMbkJoY21WdWRDNXBaQ0FySUNjZ09qb2dRU0J5WldkcGIyNGdhV1JsYm5ScFptbGxjaUFvWlM1bkxpQmdaR0YwWVMxeVpXZHBiMjQ5WENKbWIyOWNJbUFwSUcxaGVTQW5JQ3RjYmx4MFhIUmNkQ2R2Ym14NUlHSmxJRzl0YVhSMFpXUWdhV1lnWVNCa1pXWmhkV3gwSUhSbGJYQnNZWFJsSUdseklITndaV05wWm1sbFpDd2daUzVuTGpwY1hHNG5JQ3RjYmx4MFhIUmNkQ2RsTG1jdUlEeHlaV2RwYjI0Z2RHVnRjR3hoZEdVOVhDSlRiMjFsUTI5dGNHOXVaVzUwWENJK1BDOXlaV2RwYjI0K0oxeHVYSFJjZENrN1hHNWNkSDFjYmx4dVhIUXZMeUJUWlhRZ2RYQWdiR2x6ZENCMGJ5Qm9iM1Z6WlNCamFHbHNaQ0JqYjIxd2IyNWxiblJ6WEc1Y2RIUm9hWE11WDJOb2FXeGtjbVZ1SUQwZ1cxMDdYRzVjYmx4MFh5NWlhVzVrUVd4c0tIUm9hWE1wTzF4dVhHNWNkQzh2SUZObGRDQjFjQ0JqYjI1MlpXNXBaVzVqWlNCaFkyTmxjM01nZEc4Z2RHaHBjeUJ5WldkcGIyNGdhVzRnZEdobElHZHNiMkpoYkNCeVpXZHBiMjRnWTJGamFHVmNibHgwUmxKQlRVVlhUMUpMTG5KbFoybHZibk5iZEdocGN5NXBaRjBnUFNCMGFHbHpPMXh1ZlR0Y2JseHVVbVZuYVc5dUxtWnliMjFGYkdWdFpXNTBJRDBnWm5WdVkzUnBiMjRvWld3c0lIQmhjbVZ1ZENrZ2UxeHVYSFJ5WlhSMWNtNGdabkp2YlVWc1pXMWxiblFvWld3c0lIQmhjbVZ1ZENrN1hHNTlPMXh1VW1WbmFXOXVMbkJ5YjNSdmRIbHdaUzV5WlcxdmRtVWdQU0JtZFc1amRHbHZiaWhoZEVsdVpHVjRLU0I3WEc1Y2RISmxkSFZ5YmlCeVpXMXZkbVV1WTJGc2JDaDBhR2x6TENCaGRFbHVaR1Y0S1R0Y2JuMDdYRzVTWldkcGIyNHVjSEp2ZEc5MGVYQmxMbVZ0Y0hSNUlEMGdablZ1WTNScGIyNG9LU0I3WEc1Y2RISmxkSFZ5YmlCbGJYQjBlUzVqWVd4c0tIUm9hWE1wTzF4dWZUdGNibEpsWjJsdmJpNXdjbTkwYjNSNWNHVXVhVzV6WlhKMElEMGdablZ1WTNScGIyNG9ZWFJKYm1SbGVDd2dZMjl0Y0c5dVpXNTBTV1FzSUhCeWIzQmxjblJwWlhNcElIdGNibHgwY21WMGRYSnVJR2x1YzJWeWRDNWpZV3hzS0hSb2FYTXNJR0YwU1c1a1pYZ3NJR052YlhCdmJtVnVkRWxrTENCd2NtOXdaWEowYVdWektUdGNibjA3WEc1U1pXZHBiMjR1Y0hKdmRHOTBlWEJsTG1Gd2NHVnVaQ0E5SUdaMWJtTjBhVzl1S0dOdmJYQnZibVZ1ZEVsa0xDQndjbTl3WlhKMGFXVnpLU0I3WEc1Y2RISmxkSFZ5YmlCaGNIQmxibVF1WTJGc2JDaDBhR2x6TENCamIyMXdiMjVsYm5SSlpDd2djSEp2Y0dWeWRHbGxjeWs3WEc1OU8xeHVVbVZuYVc5dUxuQnliM1J2ZEhsd1pTNWhkSFJoWTJnZ1BTQm1kVzVqZEdsdmJpaGpiMjF3YjI1bGJuUXNJSEJ5YjNCbGNuUnBaWE1wSUh0Y2JseDBjbVYwZFhKdUlHRjBkR0ZqYUM1allXeHNLSFJvYVhNc0lHTnZiWEJ2Ym1WdWRDd2djSEp2Y0dWeWRHbGxjeWs3WEc1OU8xeHVVbVZuYVc5dUxuQnliM1J2ZEhsd1pTNXdjbVZ3Wlc1a0lEMGdablZ1WTNScGIyNG9ZMjl0Y0c5dVpXNTBTV1FzSUhCeWIzQmxjblJwWlhNcElIdGNibHgwY21WMGRYSnVJSEJ5WlhCbGJtUXVZMkZzYkNoMGFHbHpMQ0JqYjIxd2IyNWxiblJKWkN3Z2NISnZjR1Z5ZEdsbGN5azdYRzU5TzF4dUlpd2lMeW9xWEc0Z0tpQnlaV2RwYjI0dWFXNXpaWEowS0NCaGRFbHVaR1Y0TENCamIyMXdiMjVsYm5SSlpDd2dXM0J5YjNCbGNuUnBaWE5kSUNsY2JpQXFYRzRnS2lCVVQwUlBPaUJ6ZFhCd2IzSjBJR0VnYkdsemRDQnZaaUJ3Y205d1pYSjBhV1Z6SUc5aWFtVmpkSE1nYVc0Z2JHbGxkU0J2WmlCMGFHVWdjSEp2Y0dWeWRHbGxjeUJ2WW1wbFkzUmNiaUFxTDF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHbHVjMlZ5ZENoaGRFbHVaR1Y0TENCamIyMXdiMjVsYm5SSlpDd2djSEp2Y0dWeWRHbGxjeWtnZTF4dVhHNWNkSFpoY2lCbGNuSWdQU0FuSnp0Y2JseDBhV1lnS0NFb1lYUkpibVJsZUNCOGZDQmZMbWx6Um1sdWFYUmxLR0YwU1c1a1pYZ3BLU2tnZTF4dVhIUmNkR1Z5Y2lBclBTQjBhR2x6TG1sa0lDc2dKeTVwYm5ObGNuUW9LU0E2T2lCT2J5QmhkRWx1WkdWNElITndaV05wWm1sbFpDRW5PMXh1WEhSOVhHNWNkR1ZzYzJVZ2FXWWdLQ0ZqYjIxd2IyNWxiblJKWkNrZ2UxeHVYSFJjZEdWeWNpQXJQU0IwYUdsekxtbGtJQ3NnSnk1cGJuTmxjblFvS1NBNk9pQk9ieUJqYjIxd2IyNWxiblJKWkNCemNHVmphV1pwWldRaEp6dGNibHgwZlZ4dVhIUnBaaUFvWlhKeUtTQjdYRzVjZEZ4MGRHaHliM2NnYm1WM0lFVnljbTl5S0dWeWNpQXJJQ2RjWEc1VmMyRm5aVG9nYVc1elpYSjBLR0YwU1c1a1pYZ3NJR052YlhCdmJtVnVkRWxrTENCYmNISnZjR1Z5ZEdsbGMxMHBKeWs3WEc1Y2RIMWNibHh1WEhSMllYSWdZMjl0Y0c5dVpXNTBPMXh1WEhRdkx5QkpaaUJqYjIxd2IyNWxiblJKWkNCcGN5QmhJSE4wY21sdVp5d2diRzl2YXlCMWNDQmpiMjF3YjI1bGJuUWdjSEp2ZEc5MGVYQmxJR0Z1WkNCcGJuTjBZWFJwWVhSbFhHNWNkR2xtSUNnbmMzUnlhVzVuSnlBOVBTQjBlWEJsYjJZZ1kyOXRjRzl1Wlc1MFNXUXBJSHRjYmx4dVhIUmNkSFpoY2lCamIyMXdiMjVsYm5SUWNtOTBiM1I1Y0dVZ1BTQkdVa0ZOUlZkUFVrc3VZMjl0Y0c5dVpXNTBjMXRqYjIxd2IyNWxiblJKWkYwN1hHNWNibHgwWEhScFppQW9JV052YlhCdmJtVnVkRkJ5YjNSdmRIbHdaU2tnZTF4dVhIUmNkRngwZG1GeUlIUmxiWEJzWVhSbElEMGdSbEpCVFVWWFQxSkxMblJsYlhCc1lYUmxjMXRqYjIxd2IyNWxiblJKWkYwN1hHNWNkRngwWEhScFppQW9JWFJsYlhCc1lYUmxLU0I3WEc1Y2RGeDBYSFJjZEhSb2NtOTNJRzVsZHlCRmNuSnZjaUFvSjBsdUlDY2dLMXh1WEhSY2RGeDBYSFJjZENoMGFHbHpMbWxrSUh4OElDZEJibTl1ZVcxdmRYTWdjbVZuYVc5dUp5a2dLeUFuT2pvZ1ZISjVhVzVuSUhSdklHbHVjMlZ5ZENBbklDdGNibHgwWEhSY2RGeDBYSFJqYjIxd2IyNWxiblJKWkNBcklDY3NJR0oxZENCdWJ5QjBaVzF3YkdGMFpTQmxlR2x6ZEhNZ2QybDBhQ0IwYUdGMElHbGtMaWNwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhRdkx5QkpaaUJ1YnlCamIyMXdiMjVsYm5RZ2NISnZkRzkwZVhCbElHVjRhWE4wY3lCbWIzSWdkR2hsSUhSbGJYQnNZWFJsWEc1Y2RGeDBYSFF2THlCM2FYUm9JSFJvWlNCemNHVmphV1pwWm1Wa0lHbGtMQ0JqY21WaGRHVWdZU0J6ZEhWaUlHOXVaU0J2YmlCMGFHVWdabXg1TGx4dVhIUmNkRngwWTI5dGNHOXVaVzUwVUhKdmRHOTBlWEJsSUQwZ1JsSkJUVVZYVDFKTExrTnZiWEJ2Ym1WdWRDNWxlSFJsYm1Rb2UxeHVYSFJjZEZ4MFhIUnBaRG9nWTI5dGNHOXVaVzUwU1dRc1hHNWNkRngwWEhSY2RIUmxiWEJzWVhSbE9pQjBaVzF3YkdGMFpWeHVYSFJjZEZ4MGZTazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdTVzV6ZEdGdWRHbGhkR1VnWVc1a0lISmxibVJsY2lCMGFHVWdZMjl0Y0c5dVpXNTBJR2x1YzJsa1pTQjBhR2x6SUhKbFoybHZibHh1WEhSY2RHTnZiWEJ2Ym1WdWRDQTlJRzVsZHlCamIyMXdiMjVsYm5SUWNtOTBiM1I1Y0dVb1h5NWxlSFJsYm1Rb2UxeHVYSFJjZEZ4MEpHOTFkR3hsZERvZ2RHaHBjeTRrWld4Y2JseDBYSFI5TENCd2NtOXdaWEowYVdWeklIeDhJSHQ5S1NrN1hHNWNibHh1WEhSOVhHNWNibHgwTHk4Z1QzUm9aWEozYVhObElHRnpjM1Z0WlNCaGJpQnBibk4wWVc1MGFXRjBaV1FnWTI5dGNHOXVaVzUwSUc5aWFtVmpkQ0IzWVhNZ2MyVnVkRnh1WEhRdktpQlVUMFJQT2lCRGFHVmpheUIwYUdGMElHTnZiWEJ2Ym1WdWRDQnZZbXBsWTNRZ2FYTWdkbUZzYVdRZ0tpOWNibHgwWld4elpTQjdYRzVjZEZ4MFkyOXRjRzl1Wlc1MElEMGdZMjl0Y0c5dVpXNTBTV1E3WEc1Y2RGeDBZMjl0Y0c5dVpXNTBMaVJ2ZFhSc1pYUWdQU0IwYUdsekxpUmxiRHRjYmx4MGZWeHVYRzVjZEM4dklGTmhkbVVnY21WbVpYSmxibU5sSUhSdklIQmhjbVZ1ZEZKbFoybHZibHh1WEhSamIyMXdiMjVsYm5RdWNHRnlaVzUwVW1WbmFXOXVJRDBnZEdocGN6dGNibHh1WEhRdkx5QkRhR1ZqYXlCMGJ5QnpaV1VnYVdZZ2RHaGxJRzF2WkdWc0lIZGhjeUJoYkhKbFlXUjVJR1JsWm1sdVpXUXVJRWxtSUdsMElHbHpMQ0IxYzJVZ2RHaGhkQ0J0YjJSbGJDNGdTV1lnYm05MExDQmhjM05wWjI0Z2FYUmNibHgwTHk4Z2RHaGxJSEJoY21WdWRITWdiVzlrWld3Z2FXWWdhWFFnYUdGeklHOXVaU3dnYjNJZ1lYTnphV2R1SUdsMElHRWdibVYzSUdKaFkydGliMjVsSUdsdWMzUmhibU5sTGx4dVhIUnBaaUFvSVdOdmJYQnZibVZ1ZEM1dGIyUmxiQ2tnZTF4dVhIUmNkR052YlhCdmJtVnVkQzV0YjJSbGJDQTlJSFJvYVhNdWNHRnlaVzUwTG0xdlpHVnNJRDhnZEdocGN5NXdZWEpsYm5RdWJXOWtaV3dnT2lCdVpYY2dRbUZqYTJKdmJtVXVUVzlrWld3b0tUdGNibHgwZlZ4dVhHNWNkQzh2SUZKbGJtUmxjaUJqYjIxd2IyNWxiblFnYVc1MGJ5QjBhR2x6SUhKbFoybHZibHh1WEhSamIyMXdiMjVsYm5RdWNtVnVaR1Z5S0dGMFNXNWtaWGdwTzF4dVhHNWNkQzh2SUVGdVpDQnJaV1Z3SUhSeVlXTnJJRzltSUdsMElHbHVJSFJvWlNCc2FYTjBJRzltSUhSb2FYTWdjbVZuYVc5dUozTWdZMmhwYkdSeVpXNWNibHgwZEdocGN5NWZZMmhwYkdSeVpXNHVjM0JzYVdObEtHRjBTVzVrWlhnc0lEQXNJR052YlhCdmJtVnVkQ2s3WEc1Y2JseDBMeThnVEc5bklHWnZjaUJrWldKMVoyZHBibWNnWUdOdmRXNTBZQ0JrWldOc1lYSmhkR2wyWlZ4dVhIUjJZWElnWkdWaWRXZFRkSElnUFNCMGFHbHpMbkJoY21WdWRDNXBaQ0FySUNjZ09qb2dTVzV6WlhKMFpXUWdKeUFySUdOdmJYQnZibVZ1ZEVsa0lDc2dKeUJwYm5SdklDYzdYRzVjZEdsbUlDaDBhR2x6TG1sa0tTQmtaV0oxWjFOMGNpQXJQU0FuY21WbmFXOXVPaUFuSUNzZ2RHaHBjeTVwWkNBcklDY2dZWFFnYVc1a1pYZ2dKeUFySUdGMFNXNWtaWGc3WEc1Y2RHVnNjMlVnWkdWaWRXZFRkSElnS3owZ0oyRnViMjU1Ylc5MWN5QnlaV2RwYjI0Z1lYUWdhVzVrWlhnZ0p5QXJJR0YwU1c1a1pYZzdYRzVjZEVaU1FVMUZWMDlTU3k1MlpYSmliM05sS0dSbFluVm5VM1J5S1R0Y2JseHVYSFJ5WlhSMWNtNGdZMjl0Y0c5dVpXNTBPMXh1WEc1OU8xeHVJaXdpTHlvcVhHNGdLaUJRY21Wd1pXNWtJR0VnWTI5dGNHOXVaVzUwSUhSdklIUm9aU0JpWldkcGJtNXBibWNnYjJZZ1lTQnlaV2RwYjI0dUlGUm9hWE1nWTJGc2JITWdhVzV6WlhKMElHRjBJSFJvWlNCbWFYSnpkQ0J3YjNOcGRHbHZiaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJR052YlhCdmJtVnVkRWxrSUZ0VWFHVWdZMjl0Y0c5dVpXNTBJR2xrSUhSb1lYUWdkMlVnZDJGdWRDQjBieUJ3Y21Wd1pXNWtJRjFjYmlBcUlFQndZWEpoYlNBZ2UwOWlhbVZqZEgwZ2NISnZjR1Z5ZEdsbGN5QWdXMUJ5YjNCbGNuUnBaWE1nZEc4Z2FXNXpkR0Z1ZEdsaGRHVWdkR2hsSUdOdmJYQnZibVZ1ZENCM2FYUm9YVnh1SUNwY2JpQXFJRUJ5WlhSMWNtNGdlME52YlhCdmJtVnVkSDBnSUNBZ0lDQWdJQ0FnVzA1bGQyeDVJSEJ5WlhCbGJtUmxaQ0JEYjIxd2IyNWxiblJkWEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdjSEpsY0dWdVpDaGpiMjF3YjI1bGJuUkpaQ3dnY0hKdmNHVnlkR2xsY3lrZ2UxeHVYSFF2THlCSmJuTmxjblFnWVhRZ2JHRnpkQ0J3YjNOcGRHbHZibHh1WEhSeVpYUjFjbTRnZEdocGN5NXBibk5sY25Rb01Dd2dZMjl0Y0c5dVpXNTBTV1FzSUhCeWIzQmxjblJwWlhNcE8xeHVmVHRjYmlJc0lpOHFLbHh1SUNvZ2NtVm5hVzl1TG5KbGJXOTJaU2dnWVhSSmJtUmxlQ0FwWEc0Z0tseHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUhKbGJXOTJaU2hoZEVsdVpHVjRLU0I3WEc1Y2JseDBhV1lnS0NGaGRFbHVaR1Y0SUNZbUlDRmZMbWx6Um1sdWFYUmxLR0YwU1c1a1pYZ3BLU0I3WEc1Y2RGeDBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtIUm9hWE11YVdRZ0t5QW5MbkpsYlc5MlpTZ3BJRG82SUU1dklHRjBTVzVrWlhnZ2MzQmxZMmxtYVdWa0lTQmNYRzVWYzJGblpUb2djbVZ0YjNabEtHRjBTVzVrWlhncEp5azdYRzVjZEgxY2JseHVYSFF2THlCU1pXMXZkbVVnZEdobElHTnZiWEJ2Ym1WdWRDQm1jbTl0SUhSb1pTQnNhWE4wWEc1Y2RIWmhjaUJqYjIxd2IyNWxiblFnUFNCMGFHbHpMbDlqYUdsc1pISmxiaTV6Y0d4cFkyVW9ZWFJKYm1SbGVDd2dNU2s3WEc1Y2RHbG1JQ2doWTI5dGNHOXVaVzUwV3pCZEtTQjdYRzVjYmx4MFhIUXZMeUJKWmlCMGFHVWdiR2x6ZENCcGN5QmxiWEIwZVN3Z1puSmxZV3NnYjNWMFhHNWNkRngwZEdoeWIzY2dibVYzSUVWeWNtOXlLSFJvYVhNdWFXUWdLeUFuTG5KbGJXOTJaU2dwSURvNklGUnllV2x1WnlCMGJ5QnlaVzF2ZG1VZ1lTQmpiMjF3YjI1bGJuUWdkR2hoZENCa2IyVnpibHhjSjNRZ1pYaHBjM1FnWVhRZ2FXNWtaWGdnSnlBcklHRjBTVzVrWlhncE8xeHVYSFI5WEc1Y2JseDBMeThnVTNGMVpXVjZaU0IwYUdVZ1kyOXRjRzl1Wlc1MElIUnZJR1J2SUdkbGRDQmhiR3dnZEdobElHSnBibVI1SUdkdmIyUnVaWE56SUc5MWRGeHVYSFJqYjIxd2IyNWxiblJiTUYwdVkyeHZjMlVvS1R0Y2JseHVYSFJHVWtGTlJWZFBVa3N1WkdWaWRXY29kR2hwY3k1d1lYSmxiblF1YVdRZ0t5QW5JRG82SUZKbGJXOTJaV1FnWTI5dGNHOXVaVzUwSUdGMElHbHVaR1Y0SUNjZ0t5QmhkRWx1WkdWNElDc2dKeUJtY205dElISmxaMmx2YmpvZ0p5QXJJSFJvYVhNdWFXUXBPMXh1ZlR0Y2JpSXNJaThxS2x4dUlDb2dVMlYwY3lCMWNDQjBhR1VnUmxKQlRVVlhUMUpMSUhKdmRYUmxjaTVjYmlBcUwxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQnliM1YwWlhKVFpYUjFjQ2dwSUh0Y2JseHVYSFF2THlCWGFXeGtZMkZ5WkNCeWIzVjBaWE1nZEc4Z1oyeHZZbUZzSUdWMlpXNTBJR1JsYkdWbllYUnZjbHh1WEhSMllYSWdjbTkxZEdWeUlEMGdibVYzSUVaU1FVMUZWMDlTU3k1U2IzVjBaWElvS1R0Y2JseDBjbTkxZEdWeUxuSnZkWFJsS0M4b0xpb3BMeXdnSjNKdmRYUmxKeXdnWm5WdVkzUnBiMjRnS0hKdmRYUmxLU0I3WEc1Y2JseDBYSFF2THlCT2IzSnRZV3hwZW1VZ2FHOXRaU0J5YjNWMFpYTWdLQ01nYjNJZ2JuVnNiQ2tnZEc4Z0p5ZGNibHgwWEhScFppQW9JWEp2ZFhSbEtTQjdYRzVjZEZ4MFhIUnliM1YwWlNBOUlDY25PMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRlJ5YVdkblpYSWdjbTkxZEdWY2JseDBYSFJHVWtGTlJWZFBVa3N1ZEhKcFoyZGxjaWduSXljZ0t5QnliM1YwWlNrN1hHNWNkSDBwTzF4dVhHNWNkQzh2SUVWNGNHOXpaU0JnYm1GMmFXZGhkR1VvS1dBZ2JXVjBhRzlrWEc1Y2RFWlNRVTFGVjA5U1N5NXVZWFpwWjJGMFpTQTlJRVpTUVUxRlYwOVNTeTVvYVhOMGIzSjVMbTVoZG1sbllYUmxPMXh1ZlZ4dUlpd2lMeW9xWEc0Z0tpQkNZWEpsTFdKdmJtVnpJRVJQVFM5VlNTQjFkR2xzYVhScFpYTmNiaUFxTDF4dVhHNTJZWElnUlhabGJuUnpJRDBnY21WeGRXbHlaU2duTGk5bGRtVnVkSE1uS1R0Y2JseHVkbUZ5SUVSUFRTQTlJSHRjYmx4dVhIUXZLaXBjYmx4MElDb2dSWGh3YjNObElIUm9aU0JjSWtSUFRXMTVMV1YyWlc1MFpXUnVaWE56WENJZ2IyWWdaV3hsYldWdWRITWdjMjhnZEdoaGRDQnBkQ2R6SUhObGJHVmpkR0ZpYkdVZ2RtbGhJRU5UVTF4dVhIUWdLaUJaYjNVZ1kyRnVJSFZ6WlNCMGFHbHpJSFJ2SUdGd2NHeDVJR0VnWm1WM0lHTm9iMmxqWlNCRVQwMGdiVzlrYVdacFkyRjBhVzl1Y3lCdmRYUWdkR2hsSUdkaGRHVXRMVnh1WEhRZ0tpQW9aUzVuTGlCMGQyVmhhM01nZEdGeVoyVjBhVzVuSUdOdmJXMXZiaUJwYzNOMVpYTWdkR2hoZENCMGVYQnBZMkZzYkhrZ1oyVjBJR1p2Y21kdmRIUmxiaXdnYkdsclpTQmthWE5oWW14cGJtY2dkR1Y0ZENCelpXeGxZM1JwYjI0cFhHNWNkQ0FxWEc1Y2RDQXFJRUJ3WVhKaGJTQjdRMjl0Y0c5dVpXNTBmU0JqYjIxd2IyNWxiblJjYmx4MElDb3ZYRzVjZEdac1lXZENiM1Z1WkVWMlpXNTBjem9nWm5WdVkzUnBiMjRnS0NCamIyMXdiMjVsYm5RZ0tTQjdYRzVjYmx4MFhIUXZMeUJVVDBSUE9pQndjbTkyYVdSbElHRmpZMlZ6Y3lCMGJ5QmliM1Z1WkNCbmJHOWlZV3dnWlhabGJuUnpJQ2dsS1NCaGJtUWdjbTkxZEdWeklDZ2pLU0JoY3lCM1pXeHNYRzVjZEZ4MEx5OGdWRTlFVHpvZ1pteGhaeUJoYkd3Z1JFOU5JR1YyWlc1MGN5d2dibTkwSUdwMWMzUWdZMnhwWTJzZ1lXNWtJSFJ2ZFdOb1hHNWNibHgwWEhRdkx5QkNkV2xzWkNCemRXSnpaWFFnYjJZZ2FuVnpkQ0IwYUdVZ1kyeHBZMnN2ZEc5MVkyZ2daWFpsYm5SelhHNWNkRngwZG1GeUlHTnNhV05yVDNKVWIzVmphRVYyWlc1MGN5QTlJRVYyWlc1MGN5NXdZWEp6WlNoY2JseDBYSFJjZEdOdmJYQnZibVZ1ZEM1bGRtVnVkSE1zWEc1Y2RGeDBYSFI3SUc5dWJIazZJRnNuWTJ4cFkyc25MQ0FuZEc5MVkyZ25MQ0FuZEc5MVkyaHpkR0Z5ZENjc0lDZDBiM1ZqYUdWdVpDZGRJSDFjYmx4MFhIUXBPMXh1WEc1Y2RGeDBMeThnU1dZZ2JtOGdZMnhwWTJzdmRHOTFZMmdnWlhabGJuUnpJR1p2ZFc1a0xDQmlZV2xzSUc5MWRGeHVYSFJjZEdsbUlDZ2dZMnhwWTJ0UGNsUnZkV05vUlhabGJuUnpMbXhsYm1kMGFDQThJREVnS1NCeVpYUjFjbTQ3WEc1Y2JseDBYSFF2THlCUmRXVnllU0JoWm1abFkzUmxaQ0JsYkdWdFpXNTBjeUJtY205dElFUlBUVnh1WEhSY2RIWmhjaUFrWVdabVpXTjBaV1FnUFNCRmRtVnVkSE11WjJWMFJXeGxiV1Z1ZEhNb1kyeHBZMnRQY2xSdmRXTm9SWFpsYm5SekxDQmpiMjF3YjI1bGJuUXBPMXh1WEc1Y2RGeDBMeThnVGs5VVJUb2dSbTl5SUc1dmR5d2dkR2hwY3lCcGN5QmhiSGRoZVhNZ2FuVnpkQ0FuWTJ4cFkyc25YRzVjZEZ4MGRtRnlJR0p2ZFc1a1JYWmxiblJ6VTNSeWFXNW5JRDBnSjJOc2FXTnJKenRjYmx4dVhIUmNkQzh2SUZObGRDQmdaR0YwWVMxR1VrRk5SVmRQVWtzdFkyeHBZMnRoWW14bFlDQmpkWE4wYjIwZ1lYUjBjbWxpZFhSbFhHNWNkRngwTHk4Z0tIVnBJR3h2WjJsaklITm9iM1ZzWkNCaVpTQmxlSFJsYm1SbFpDQnBiaUJEVTFNcFhHNWNkRngwSkdGbVptVmpkR1ZrTG1GMGRISW9KMlJoZEdFdEp5QXJJRVpTUVUxRlYwOVNTeTV2Y0hScGIyNXpMbVp5WVcxbGQyOXlhMGxrSUNzZ0p5MWxkbVZ1ZEhNbkxDQmliM1Z1WkVWMlpXNTBjMU4wY21sdVp5azdYRzVjYmx4MFhIUkdVa0ZOUlZkUFVrc3VkbVZ5WW05elpTaGNibHgwWEhSY2RHTnZiWEJ2Ym1WdWRDNXBaQ0FySUNjZ09qb2dKeUFyWEc1Y2RGeDBYSFFuUkdsellXSnNaV1FnZFhObGNpQjBaWGgwSUhObGJHVmpkR2x2YmlCdmJpQmxiR1Z0Wlc1MGN5QjNMeUJqYkdsamF5OTBiM1ZqYUNCbGRtVnVkSE02Snl4Y2JseDBYSFJjZEdOc2FXTnJUM0pVYjNWamFFVjJaVzUwY3l4Y2JseDBYSFJjZENSaFptWmxZM1JsWkZ4dVhIUmNkQ2s3WEc1Y2RIMWNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1JFOU5PMXh1SWl3aUx5b3FYRzRnS2lCSmJuTndaV04wSUdFZ1JFOU5JR1ZzWlcxbGJuUWdZVzVrSUhObFpTQnBaaUJwZENCb1lYTWdZU0JrWldaaGRXeDBJR052YlhCdmJtVnVkQzkwWlcxd2JHRjBaU0JKUkM1Y2JpQXFJRkJ5YjNacFpHVnpJR0poWTJ0M1lYSmtjeTFqYjIxd1lYUnBZbWxzYVhSNUlHeGhlV1Z5TENCaGJtUWdibTl5YldGc2FYcGxjeUIwYUdVZ2MzbHVkR0Y0SUdsdUlIUm9aU0JFVDAwdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUNCN1JFOU5SV3hsYldWdWRIMGdaV3hjYmlBcUlFQnlaWFIxY200Z2UxTjBjbWx1WjMwZ0lDQWdXM1JvWlNCcFpDQnZaaUIwYUdVZ1pHVm1ZWFZzZENCamIyMXdiMjVsYm5RdmRHVnRjR3hoZEdVc0lHbG1JRzl1WlNCM1lYTWdjM0JsWTJsbWFXVmtYVnh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlDaGxiQ2tnZTF4dVhHNWNkQzh2SUZCeWIzWnBaR1VnWW1GamEzZGhjbVJ6SUdOdmJYQmhkR2xpYVd4cGRIa2dabTl5WEc1Y2RDOHZJR0JrWldaaGRXeDBZQ3dnWUdOdmJuUmxiblJ6WUNCaGJtUWdZSFJsYlhCc1lYUmxZQ0J1YjNSaGRHbHZibHh1WEhSMllYSWdZMjl0Y0c5dVpXNTBTV1FnUFNBa0tHVnNLUzVoZEhSeUtDZDBaVzF3YkdGMFpTY3BJSHg4SUNRb1pXd3BMbUYwZEhJb0oyUmxabUYxYkhRbktTQjhmQ0FrS0dWc0tTNWhkSFJ5S0NkamIyNTBaVzUwY3ljcE8xeHVYRzVjZEM4dklFNXZjbTFoYkdsNlpTQjBieUJnZEdWdGNHeGhkR1ZnSUdGMGRISnBZblYwWlNCcGJpQjBhR1VnUkU5TkxseHVYSFFrS0dWc0tTNWhkSFJ5S0NkMFpXMXdiR0YwWlNjc0lHTnZiWEJ2Ym1WdWRFbGtLVHRjYmx4dVhIUnlaWFIxY200Z1kyOXRjRzl1Wlc1MFNXUTdYRzU5TzF4dUlpd2lMeW9xWEc0Z0tpQkhjbUZpY3lCMGFHVWdUV0Z6ZENCcFpHVnVkR2xtYVdWeUlHWnliMjBnWVc0Z1NGUk5UQ0JsYkdWdFpXNTBMbHh1SUNvZ1UzVndjRzl5ZEhNZ1lHbGtZQ3dnWUdSaGRHRXRhV1JnTENCdmNpQmdaR0YwWVMxeVpXZHBiMjVnWEc0Z0tseHVJQ29nUUhCaGNtRnRJQ0I3UkU5TlJXeGxiV1Z1ZEgwZ1pXd2dJQ0FnVzNSb1pTQkVUMDBnWld4bGJXVnVkQ0IwYnlCcGJuTndaV04wWFZ4dUlDb2dRSEJoY21GdElDQjdRbTl2YkdWaGJuMGdjbVZ4ZFdseVpXUWdXM2RvWlhSb1pYSWdZVzRnYVdSbGJuUnBabWxsY2lCcGN5QnlaWEYxYVhKbFpGMWNiaUFxWEc0Z0tpQkFjbVYwZFhKdUlIdFRkSEpwYm1kOUlDQWdJQ0FnSUNBZ0lDQmJhV1JsYm5ScFptbGxjbDFjYmlBcUwxeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJR1ZzTWsxaGMzUkpSQ0FvWld3c0lISmxjWFZwY21Wa0tTQjdYRzVjYmx4MGRtRnlJR2xrSUQwZ0pDaGxiQ2t1WVhSMGNpZ25hV1FuS1R0Y2JseDBkbUZ5SUdSaGRHRkpaQ0E5SUNRb1pXd3BMbUYwZEhJb0oyUmhkR0V0YVdRbktTQjhmQ0FrS0dWc0tTNWhkSFJ5S0Nka1lYUmhMWEpsWjJsdmJpY3BPMXh1WEhSMllYSWdZMjl1ZEdWdWRITkpaQ0E5SUNRb1pXd3BMbUYwZEhJb0oyTnZiblJsYm5Sekp5azdYRzVjYmx4MGFXWWdLR2xrSUNZbUlHUmhkR0ZKWkNrZ2UxeHVYSFJjZEhSb2NtOTNJRzVsZHlCRmNuSnZjaWhwWkNBcklDY2dPam9nUTJGdWJtOTBJSE5sZENCaWIzUm9JR0JwWkdBZ1lXNWtJR0JrWVhSaExXbGtZQ0VnSUZCc1pXRnpaU0IxYzJVZ2IyNWxJRzl5SUhSb1pTQnZkR2hsY2k0Z0lDaGtZWFJoTFdsa0lHbHpJSE5oWm1WemRDa25LVHRjYmx4MGZWeHVYSFJwWmlBb2NtVnhkV2x5WldRZ0ppWWdJV2xrSUNZbUlDRmtZWFJoU1dRcElIdGNibHgwWEhSMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjA1dklHbGtJSE53WldOcFptbGxaQ0JwYmlCbGJHVnRaVzUwSUhkb1pYSmxJR2wwSUdseklISmxjWFZwY21Wa09seGNiaWNnS3lCbGJDazdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdhV1FnZkh3Z1pHRjBZVWxrSUh4OElHTnZiblJsYm5SelNXUTdYRzU5TzF4dUlpd2lMeW9xWEc0Z0tpQlZkR2xzYVhSNUlFVjJaVzUwSUhSdmIyeHJhWFJjYmlBcUwxeHVYRzUyWVhJZ1JYWmxiblJ6SUQwZ2UxeHVYRzVjZEM4cUtseHVYSFFnS2lCUVlYSnpaWE1nWVNCa2FXTjBhVzl1WVhKNUlHOW1JR1YyWlc1MGN5QmhibVFnYjNCMGFXOXVZV3hzZVNCbWFXeDBaWEp6SUdKNUlIUm9aU0JsZG1WdWRDQjBlWEJsTGlCSlppQjBhR1VnWlhabGJuUmNibHgwSUNwY2JseDBJQ29nUUhCaGNtRnRJQ0I3VDJKcVpXTjBmU0JsZG1WdWRITWdJRnRCSUVKaFkydGliMjVsTGxacFpYY2daWFpsYm5SeklHOWlhbVZqZEYxY2JseDBJQ29nUUhCaGNtRnRJQ0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJRnRQY0hScGIyNXpJRzlpYW1WamRDQjBhR0YwSUdGc2JHOTNjeUIxY3lCMGJ5Qm1hV3gwWlhJZ2NHRnljMmx1WnlCMGJ5QmpaWEowWVdsdUlHVjJaVzUwWEc1Y2RDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlhOZFhHNWNkQ0FxWEc1Y2RDQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNWZTQWdJQ0FnSUNBZ0lDQmJRWEp5WVhrZ1kyOXVkR0ZwYm1sdVp5QndZWEp6WldSRmRtVnVkSE1nZEdoaGRDQmhjbVVnYldGMFkyaHBibWNnWlhabGJuUWdhMlY1YzExY2JseDBJQ292WEc1Y2RIQmhjbk5sT2lCbWRXNWpkR2x2YmlBb1pYWmxiblJ6TENCdmNIUnBiMjV6S1NCN1hHNWNibHgwWEhSMllYSWdaWFpsYm5STFpYbHpJRDBnWHk1clpYbHpLR1YyWlc1MGN5QjhmQ0I3ZlNrc1hHNWNkRngwWEhSc2FXMXBkRVYyWlc1MGN5eGNibHgwWEhSY2RIQmhjbk5sWkVWMlpXNTBjeUE5SUZ0ZE8xeHVYRzVjZEZ4MEx5OGdUM0IwYVc5dVlXeHNlU0JtYVd4MFpYSWdkWE5wYm1jZ2MyVjBJRzltSUdGalkyVndkR0ZpYkdVZ1pYWmxiblFnZEhsd1pYTmNibHgwWEhSc2FXMXBkRVYyWlc1MGN5QTlJRzl3ZEdsdmJuTXViMjVzZVR0Y2JseDBYSFJsZG1WdWRFdGxlWE1nUFNCZkxtWnBiSFJsY2lobGRtVnVkRXRsZVhNc0lHWjFibU4wYVc5dUlHTm9aV05yUlhabGJuUk9ZVzFsSUNobGRtVnVkRXRsZVNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJRWVhKelpTQmxkbVZ1ZENCemRISnBibWNnYVc1MGJ5QnpaVzFoYm5ScFl5QnlaWEJ5WlhObGJuUmhkR2x2Ymx4dVhIUmNkRngwZG1GeUlHVjJaVzUwSUQwZ1JYWmxiblJ6TG5CaGNuTmxSRTlOUlhabGJuUW9aWFpsYm5STFpYa3BPMXh1WEhSY2RGeDBjR0Z5YzJWa1JYWmxiblJ6TG5CMWMyZ29aWFpsYm5RcE8xeHVYRzVjZEZ4MFhIUXZMeUJQY0hScGIyNWhiQ0JtYVd4MFpYSmNibHgwWEhSY2RHbG1JQ2hzYVcxcGRFVjJaVzUwY3lrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z1h5NWpiMjUwWVdsdWN5aHNhVzFwZEVWMlpXNTBjeXdnWlhabGJuUXVibUZ0WlNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSeVpYUjFjbTRnZEhKMVpUdGNibHgwWEhSOUtUdGNibHh1WEhSY2RISmxkSFZ5YmlCd1lYSnpaV1JGZG1WdWRITTdYRzVjZEgwc1hHNWNibHgwTHlvcVhHNWNkQ0FxSUZ0blpYUkZiR1Z0Wlc1MGN5QmtaWE5qY21sd2RHbHZibDFjYmx4MElDcGNibHgwSUNvZ1FIQmhjbUZ0SUNCN1FYSnlZWGw5SUhObGJXRnVkR2xqUlhabGJuUnpJRnRCSUd4cGMzUWdiMllnY0dGeWMyVmtJR1YyWlc1MElHOWlhbVZqZEhOZFhHNWNkQ0FxSUVCd1lYSmhiU0FnZTBOdmJYQnZibVZ1ZEgwZ1kyOXVkR1Y0ZENBZ0lDQmJTVzV6ZEdGdVkyVWdiMllnWVNCamIyMXdiMjVsYm5RZ2RHOGdkWE5sSUdGeklHRWdjM1JoY25ScGJtY2djRzlwYm5RZ1ptOXlYRzVjZENBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdobElFUlBUU0J4ZFdWeWFXVnpYVnh1WEhRZ0tseHVYSFFnS2lCQWNtVjBkWEp1SUh0QmNuSmhlWDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXMEZ1SUdGeWNtRjVJRzltSUdwUmRXVnllU0J6WlhRZ2IyWWdiV0YwWTJobFpDQmxiR1Z0Wlc1MGMxMWNibHgwSUNvdlhHNWNkR2RsZEVWc1pXMWxiblJ6T2lCbWRXNWpkR2x2YmlBb2MyVnRZVzUwYVdORmRtVnVkSE1zSUdOdmJuUmxlSFFwSUh0Y2JseHVYSFJjZEM4dklFTnZiblJsZUhRZ2IzQjBhVzl1WVd4Y2JseDBYSFJqYjI1MFpYaDBJRDBnWTI5dWRHVjRkQ0I4ZkNCN0lDUTZJQ1FnZlR0Y2JseHVYSFJjZEM4dklFbDBaWEpoZEdsMlpXeDVJR0oxYVd4a0lHRWdjMlYwSUc5bUlHRm1abVZqZEdWa0lHVnNaVzFsYm5SelhHNWNkRngwZG1GeUlDUmhabVpsWTNSbFpDQTlJQ1FvS1R0Y2JseDBYSFJmTG1WaFkyZ29jMlZ0WVc1MGFXTkZkbVZ1ZEhNc0lHWjFibU4wYVc5dUlHeHZiMnQxY0VWc1pXMWxiblJ6Um05eVJYWmxiblFnS0dWMlpXNTBLU0I3WEc1Y2JseDBYSFJjZEM4dklFUmxkR1Z5YldsdVpTQnRZWFJqYUdWa0lHVnNaVzFsYm5SelhHNWNkRngwWEhRdkx5QlZjMlVnWkdWc1pXZGhkR1VnYzJWc1pXTjBiM0lnYVdZZ2MzQmxZMmxtYVdWa1hHNWNkRngwWEhRdkx5QlBkR2hsY25kcGMyVXNJR2R5WVdJZ2RHaGxJR1ZzWlcxbGJuUWdabTl5SUhSb2FYTWdZMjl0Y0c5dVpXNTBYRzVjZEZ4MFhIUjJZWElnSkcxaGRHTm9aV1FnUFZ4MFpYWmxiblF1YzJWc1pXTjBiM0lnUDF4dVhIUmNkRngwWEhSY2RGeDBYSFJqYjI1MFpYaDBMaVFvWlhabGJuUXVjMlZzWldOMGIzSXBJRHBjYmx4MFhIUmNkRngwWEhSY2RGeDBZMjl1ZEdWNGRDNGtaV3c3WEc1Y2JseDBYSFJjZEM4dklFRmtaQ0J0WVhSamFHVmtJR1ZzWlcxbGJuUnpJSFJ2SUhObGRGeHVYSFJjZEZ4MEpHRm1abVZqZEdWa0lEMGdKR0ZtWm1WamRHVmtMbUZrWkNnZ0pHMWhkR05vWldRZ0tUdGNibHgwWEhSOUxDQjBhR2x6S1R0Y2JseHVYSFJjZEhKbGRIVnliaUFrWVdabVpXTjBaV1E3WEc1Y2RIMHNYRzVjYmx4dVhHNWNkQzhxS2x4dVhIUWdLaUJTWlhSMWNtNXpJSGRvWlhSb1pYSWdkR2hsSUhOd1pXTnBabWxsWkNCbGRtVnVkQ0JyWlhrZ2JXRjBZMmhsY3lCaElFUlBUU0JsZG1WdWRDNWNibHgwSUNwY2JseDBJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0JyWlhrZ1cwdGxlU0IwYnlCdFlYUmphQ0JoWjJGcGJuTjBYVnh1WEhRZ0tseHVYSFFnS2lCcFppQnVieUJ0WVhSamFDQnBjeUJtYjNWdVpGeHVYSFFnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlNCY2RGeDBXM0psZEhWeWJpQmdabUZzYzJWZ1hWeHVYSFFnS2x4dVhIUWdLaUJ2ZEdobGNuZHBjMlZjYmx4MElDb2dRSEpsZEhWeWJpQjdUMkpxWldOMGZTQWdYSFJjZEZ0UFltcGxZM1FnWTI5dWRHRnBibWx1WnlCMGFHVWdZRzVoYldWZ0lHOW1JSFJvWlNCRVQwMGdaV3hsYldWdWRDQmhibVFnZEdobElHQnpaV3hsWTNSdmNtQmRYRzVjZENBcUwxeHVYSFJ3WVhKelpVUlBUVVYyWlc1ME9pQmZMbTFsYlc5cGVtVW9ablZ1WTNScGIyNG9hMlY1S1NCN1hHNWNibHgwWEhSMllYSWdiV0YwWTJobGN5QTlJR3RsZVM1dFlYUmphQ2gwYUdseld5Y3ZSRTlOUlhabGJuUXZKMTBwTzF4dVhHNWNkRngwYVdZZ0tDRnRZWFJqYUdWeklIeDhJQ0Z0WVhSamFHVnpXekZkS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUh0Y2JseDBYSFJjZEc1aGJXVTZJRzFoZEdOb1pYTmJNVjBzWEc1Y2RGeDBYSFJ6Wld4bFkzUnZjam9nYldGMFkyaGxjMXN6WFZ4dVhIUmNkSDA3WEc1Y2RIMHBMRnh1WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRk4xY0hCdmNuUmxaQ0JjSW1acGNuTjBMV05zWVhOelhDSWdSRTlOSUdWMlpXNTBjeTVjYmx4MElDb2dRSFI1Y0dVZ2UwRnljbUY1ZlZ4dVhIUWdLaTljYmx4MGJtRnRaWE02SUZ0Y2JseHVYSFJjZEM4dklFeHZZMkZzYVhwbFpDQmljbTkzYzJWeUlHVjJaVzUwYzF4dVhIUmNkQzh2SUNoM2IzSnJjeUJ2YmlCcGJtUnBkbWxrZFdGc0lHVnNaVzFsYm5SektWeHVYSFJjZENkbGNuSnZjaWNzSUNkelkzSnZiR3duTEZ4dVhHNWNkRngwTHk4Z1RXOTFjMlVnWlhabGJuUnpYRzVjZEZ4MEoyTnNhV05ySnl3Z0oyUmliR05zYVdOckp5d2dKMjF2ZFhObFpHOTNiaWNzSUNkdGIzVnpaWFZ3Snl3Z0oyaHZkbVZ5Snl3Z0oyMXZkWE5sWlc1MFpYSW5MQ0FuYlc5MWMyVnNaV0YyWlNjc1hHNWNkRngwSjIxdmRYTmxiM1psY2ljc0lDZHRiM1Z6Wlc5MWRDY3NJQ2R0YjNWelpXMXZkbVVuTEZ4dVhHNWNkRngwTHk4Z1MyVjVZbTloY21RZ1pYWmxiblJ6WEc1Y2RGeDBKMnRsZVdSdmQyNG5MQ0FuYTJWNWRYQW5MQ0FuYTJWNWNISmxjM01uTEZ4dVhHNWNkRngwTHk4Z1JtOXliU0JsZG1WdWRITmNibHgwWEhRbllteDFjaWNzSUNkamFHRnVaMlVuTENBblptOWpkWE1uTENBblptOWpkWE5wYmljc0lDZG1iMk4xYzI5MWRDY3NJQ2R6Wld4bFkzUW5MQ0FuYzNWaWJXbDBKeXhjYmx4dVhIUmNkQzh2SUZKaGR5QjBiM1ZqYUNCbGRtVnVkSE5jYmx4MFhIUW5kRzkxWTJoemRHRnlkQ2NzSUNkMGIzVmphR1Z1WkNjc0lDZDBiM1ZqYUcxdmRtVW5MQ0FuZEc5MVkyaGpZVzVqWld3bkxGeHVYRzVjZEZ4MEx5OGdUV0Z1ZFdaaFkzUjFjbVZrSUdWMlpXNTBjMXh1WEhSY2RDZDBiM1ZqYUNjc1hHNWNibHgwWEhRdkx5QlVUMFJQT2x4dVhIUmNkQ2R5YVdkb2RHTnNhV05ySnl3Z0oyTnNhV05yYjNWMGMybGtaU2RjYmx4MFhWeHVmVHRjYmx4dVhHNWNibHh1THlvcVhHNGdLaUJTWldkbGVIQWdkRzhnYldGMFkyZ2dYQ0ptYVhKemRDQmpiR0Z6YzF3aUlFUlBUU0JsZG1WdWRITmNiaUFxSUNoMGFHVnpaU0JoY21VZ1lXeHNiM2RsWkNCcGJpQjBhR1VnZEc5d0lHeGxkbVZzSUc5bUlHRWdZMjl0Y0c5dVpXNTBJR1JsWm1sdWFYUnBiMjRnWVhNZ2JXVjBhRzlrSUd0bGVYTXBYRzRnS2x4MFhIUnBMbVV1SUM5ZUtHTnNhV05yZkdodmRtVnlmR0pzZFhKOFptOWpkWE1wS0NBb0xpc3BLUzljYmlBcVhIUmNkRngwV3pGZElEMCtJR1YyWlc1MElHNWhiV1ZjYmlBcVhIUmNkRngwV3pOZElEMCtJSE5sYkdWamRHOXlYRzRnS2k5Y2JseHVSWFpsYm5Seld5Y3ZSRTlOUlhabGJuUXZKMTBnUFNCdVpYY2dVbVZuUlhod0tDZGVLQ2NnS3lCZkxuSmxaSFZqWlNoRmRtVnVkSE11Ym1GdFpYTXNYRzVjZEdaMWJtTjBhVzl1SUdKMWFXeGtVbVZuWlhod0tHMWxiVzhzSUdWMlpXNTBUbUZ0WlN3Z2FXNWtaWGdwSUh0Y2JseHVYSFJjZEM4dklFOXRhWFFnWUh4Z0lIUm9aU0JtYVhKemRDQjBhVzFsWEc1Y2RGeDBhV1lnS0dsdVpHVjRJRDA5UFNBd0tTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2JXVnRieUFySUdWMlpXNTBUbUZ0WlR0Y2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdiV1Z0YnlBcklDZDhKeUFySUdWMlpXNTBUbUZ0WlR0Y2JseDBmU3dnSnljcElDdGNiaWNwS0NBb0xpc3BLVDhrSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdSWFpsYm5Sek8xeHVJaXdpTHlvcVhHNGdLaUJOWVhBZ1lXNGdiMkpxWldOMEozTWdkbUZzZFdWekxDQmhibVFnY21WMGRYSnVJR0VnZG1Gc2FXUWdiMkpxWldOMElDaDBhR2x6SUdaMWJtTjBhVzl1SUdseklHaGhibVI1SUdKbFkyRjFjMlZjYmlBcUlIVnVaR1Z5YzJOdmNtVXViV0Z3S0NrZ2NtVjBkWEp1Y3lCaElHeHBjM1FzSUc1dmRDQmhiaUJ2WW1wbFkzUXVLVnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZZbW9nSUNBZ0lDQWdJQ0FnSUNCYlQySnFaV04wSUhkb2IzTWdkbUZzZFdWeklIbHZkU0IzWVc1MElIUnZJRzFoY0YxY2JpQXFJRUJ3WVhKaGJTQWdlMFoxYm1OMGFXOXVmU0IwY21GdWMyWnZjbTFHYmlCYlJuVnVZM1JwYjI0Z2RHOGdkSEpoYm5ObWIzSnRJR1ZoWTJnZ2IySnFaV04wSUhaaGJIVmxJR0o1WFZ4dUlDcGNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXMDVsZHlCdlltcGxZM1FnZDJsMGFDQjBhR1VnZG1Gc2RXVnpJRzFoY0hCbFpGMWNiaUFxTDF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHOWlhazFoY0Nodlltb3NJSFJ5WVc1elptOXliVVp1S1NCN1hHNWNkSEpsZEhWeWJpQmZMbTlpYW1WamRDaGZMbXRsZVhNb2IySnFLU3dnWHk1dFlYQW9iMkpxTENCMGNtRnVjMlp2Y20xR2Jpa3BPMXh1ZlR0Y2JseHVJaXdpTHlvcVhHNGdLaUJVY21GdWMyeGhkR1VnS2lweWFXZG9kQzFvWVc1a0xYTnBaR1VnWVdKaWNtVjJhV0YwYVc5dWN5b3FJR2x1ZEc4Z1puVnVZM1JwYjI1eklIUm9ZWFFnY0dWeVptOXliVnh1SUNvZ2RHaGxJSEJ5YjNCbGNpQmlaV2hoZG1sdmNuTXNJR1V1Wnk1Y2JpQXFYSFJjZENOaFltOTFkRjl0WlZ4dUlDcGNkRngwSlcxaGFXNU5aVzUxT205d1pXNWNiaUFxTDF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlIUnlZVzV6YkdGMFpWTm9iM0owYUdGdVpDaDJZV3gxWlN3Z2EyVjVLU0I3WEc1Y2JseDBkbUZ5SUcxaGRHTm9aWE1zSUdadU8xeHVYRzVjZEM4dklFbG1JSFJvYVhNZ2FYTWdZVzRnYVcxd2IzSjBZVzUwTENCR1VrRk5SVmRQVWtzdGMzQmxZMmxtYVdNZ1pHRjBZU0JyWlhrc1hHNWNkQzh2SUdGdVpDQmhJR1oxYm1OMGFXOXVJSGRoY3lCemNHVmphV1pwWldRc0lISjFiaUJwZENCMGJ5Qm5aWFFnYVhSeklIWmhiSFZsWEc1Y2RDOHZJQ2gwYUdseklHbHpJSFJ2SUd0bFpYQWdjR0Z5YVhSNUlIZHBkR2dnUW1GamEySnZibVVuY3lCemFXMXBiR0Z5SUdaMWJtTjBhVzl1WVd4cGRIa3BYRzVjZEdsbUlDaGZMbWx6Um5WdVkzUnBiMjRvZG1Gc2RXVXBJQ1ltSUNoclpYa2dQVDA5SUNkamIyeHNaV04wYVc5dUp5QjhmQ0JyWlhrZ1BUMDlJQ2R0YjJSbGJDY3BLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIWmhiSFZsS0NrN1hHNWNkSDFjYmx4dVhIUXZMeUJKWjI1dmNtVWdiM1JvWlhJZ2JtOXVMWE4wY21sdVozTmNibHgwYVdZZ0tDRmZMbWx6VTNSeWFXNW5LSFpoYkhWbEtTa2dlMXh1WEhSY2RISmxkSFZ5YmlCMllXeDFaVHRjYmx4MGZWeHVYRzVjZEM4dklFRnNjMjhnYVdkdWIzSmxJR0IwWlcxd2JHRjBaV0JjYmx4MEx5OGdWRTlFVHpvZ2RYTmxJR0VnWkdsbVptVnlaVzUwSUd0bGVTQnNZWFJsY2x4dVhIUnBaaUFvYTJWNUlEMDlQU0FuZEdWdGNHeGhkR1VuS1NCeVpYUjFjbTRnZG1Gc2RXVTdYRzVjYmx4MEx5OGdRV3h6YnlCcFoyNXZjbVVnZEdocGJtZHpJSFJvWVhRZ2MzUmhjblFnZDJsMGFDQmZYRzVjZEdsbUlDaHJaWGt1YldGMFkyZ29MMTVmTHlrcElISmxkSFZ5YmlCMllXeDFaVHRjYmx4dVhHNWNkQzh2SUZKbFpHbHlaV04wY3lCMWMyVnlJSFJ2SUdOc2FXVnVkQzF6YVdSbElGVlNUQ3dnZHk5dklHRm1abVZqZEdsdVp5QmljbTkzYzJWeUlHaHBjM1J2Y25sY2JseDBMeThnVEdsclpTQmpZV3hzYVc1bklHQkNZV05yWW05dVpTNW9hWE4wYjNKNUxtNWhkbWxuWVhSbEtDY3ZabTl2Snl3Z2V5QnlaWEJzWVdObE9pQjBjblZsSUgwcFlGeHVYSFJwWmlBb0tHMWhkR05vWlhNZ1BTQjJZV3gxWlM1dFlYUmphQ2d2WGlNaktDNHFXMTR1WEZ4elhTa3ZLU2tnSmlZZ2JXRjBZMmhsYzFzeFhTa2dlMXh1WEhSY2RHWnVJRDBnWm5WdVkzUnBiMjRnY21Wa2FYSmxZM1JCYm1SRGIzWmxjbFJ5WVdOcmN5Z3BJSHRjYmx4MFhIUmNkSFpoY2lCMWNtd2dQU0J0WVhSamFHVnpXekZkTzF4dVhIUmNkRngwUmxKQlRVVlhUMUpMTG1ocGMzUnZjbmt1Ym1GMmFXZGhkR1VvZFhKc0xDQjdYRzVjZEZ4MFhIUmNkSFJ5YVdkblpYSTZJSFJ5ZFdVc1hHNWNkRngwWEhSY2RISmxjR3hoWTJVNklIUnlkV1ZjYmx4MFhIUmNkSDBwTzF4dVhIUmNkSDA3WEc1Y2RIMWNibHgwTHk4Z1RXVjBhRzlrSUhSdklISmxaR2x5WldOMElIVnpaWElnZEc4Z1lTQmpiR2xsYm5RdGMybGtaU0JWVWt3c0lIUm9aVzRnWTJGc2JDQjBhR1VnYUdGdVpHeGxjbHh1WEhSbGJITmxJR2xtSUNnb2JXRjBZMmhsY3lBOUlIWmhiSFZsTG0xaGRHTm9LQzllSXlndUtsdGVMbHhjYzEwcktTOHBLU0FtSmlCdFlYUmphR1Z6V3pGZEtTQjdYRzVjZEZ4MFptNGdQU0JtZFc1amRHbHZiaUJqYUdGdVoyVlZjbXhHY21GbmJXVnVkQ2dwSUh0Y2JseDBYSFJjZEhaaGNpQjFjbXdnUFNCdFlYUmphR1Z6V3pGZE8xeHVYSFJjZEZ4MFJsSkJUVVZYVDFKTExtaHBjM1J2Y25rdWJtRjJhV2RoZEdVb2RYSnNMQ0I3WEc1Y2RGeDBYSFJjZEhSeWFXZG5aWEk2SUhSeWRXVmNibHgwWEhSY2RIMHBPMXh1WEhSY2RIMDdYRzVjZEgxY2JseDBMeThnVFdWMGFHOWtJSFJ2SUhSeWFXZG5aWElnWjJ4dlltRnNJR1YyWlc1MFhHNWNkR1ZzYzJVZ2FXWWdLQ2h0WVhSamFHVnpJRDBnZG1Gc2RXVXViV0YwWTJnb0wxNG9KUzRxVzE0dVhGeHpYU2t2S1NrZ0ppWWdiV0YwWTJobGMxc3hYU2tnZTF4dVhIUmNkR1p1SUQwZ1puVnVZM1JwYjI0Z2RISnBaMmRsY2tWMlpXNTBLQ2tnZTF4dVhIUmNkRngwZG1GeUlIUnlhV2RuWlhJZ1BTQnRZWFJqYUdWeld6RmRPMXh1WEhSY2RGeDBSbEpCVFVWWFQxSkxMblpsY21KdmMyVW9kR2hwY3k1cFpDQXJJQ2NnT2pvZ1ZISnBaMmRsY21sdVp5QmxkbVZ1ZENBb0p5QXJJSFJ5YVdkblpYSWdLeUFuS1M0dUxpY3BPMXh1WEhSY2RGeDBSbEpCVFVWWFQxSkxMblJ5YVdkblpYSW9kSEpwWjJkbGNpazdYRzVjZEZ4MGZUdGNibHgwZlZ4dVhIUXZMeUJOWlhSb2IyUWdkRzhnWm1seVpTQmhJSFJsYzNRZ1lXeGxjblJjYmx4MEx5OGdLSFZ6WlNCdFpYTnpZV2RsTENCcFppQnpjR1ZqYVdacFpXUXBYRzVjZEdWc2MyVWdhV1lnS0NodFlYUmphR1Z6SUQwZ2RtRnNkV1V1YldGMFkyZ29MMTRoSVNGY1hITXFLQzRxVzE0dVhGeHpYU2svTHlrcEtTQjdYRzVjZEZ4MFptNGdQU0JtZFc1amRHbHZiaUJpWVc1blFXeGxjblFvWlNrZ2UxeHVYRzVjZEZ4MFhIUXZMeUJKWmlCemNHVmphV1pwWldRc0lHMWxjM05oWjJVZ2FYTWdkWE5sWkN3Z2IzUm9aWEozYVhObElDZEJiR1Z5ZENCMGNtbG5aMlZ5WldRaEoxeHVYSFJjZEZ4MGRtRnlJRzF6WnlBOUlDaHRZWFJqYUdWeklDWW1JRzFoZEdOb1pYTmJNVjBwSUh4OElDZEVaV0oxWnlCaGJHVnlkQ0FvSVNFaEtTQjBjbWxuWjJWeVpXUWhKenRjYmx4dVhIUmNkRngwTHk4Z1QzUm9aWElnWkdsaFoyNXZjM1JwWXlCcGJtWnZjbTFoZEdsdmJseHVYSFJjZEZ4MGJYTm5JQ3M5SUNkY1hHNWNYRzVFYVdGbmJtOXpkR2xqYzF4Y2JqMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFZ4Y2JpYzdYRzVjZEZ4MFhIUnBaaUFvWlNBbUppQmxMbU4xY25KbGJuUlVZWEpuWlhRcElIdGNibHgwWEhSY2RGeDBiWE5uSUNzOUlDZGxMbU4xY25KbGJuUlVZWEpuWlhRZ09qb2dKeUFySUdVdVkzVnljbVZ1ZEZSaGNtZGxkRHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkR2xtSUNoMGFHbHpMbWxrS1NCN1hHNWNkRngwWEhSY2RHMXpaeUFyUFNBbmRHaHBjeTVwWkNBNk9pQW5JQ3NnZEdocGN5NXBaRHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwWVd4bGNuUW9iWE5uS1R0Y2JseDBYSFI5TzF4dVhIUjlYRzVjYmx4MEx5OGdUV1YwYUc5a0lIUnZJR3h2WnlCaElHMWxjM05oWjJVZ2RHOGdkR2hsSUdOdmJuTnZiR1ZjYmx4MEx5OGdLSFZ6WlNCdFpYTnpZV2RsTENCcFppQnpjR1ZqYVdacFpXUXBYRzVjZEdWc2MyVWdhV1lnS0NodFlYUmphR1Z6SUQwZ2RtRnNkV1V1YldGMFkyZ29MMTQrUGo1Y1hITXFLQzRxVzE0dVhGeHpYU2svTHlrcEtTQjdYRzVjYmx4MFhIUm1iaUE5SUdaMWJtTjBhVzl1SUd4dlowMWxjM05oWjJVb1pTa2dlMXh1WEc1Y2RGeDBYSFF2THlCSlppQnpjR1ZqYVdacFpXUXNJRzFsYzNOaFoyVWdhWE1nZFhObFpDd2diM1JvWlhKM2FYTmxJSFZ6WlNCa1pXWmhkV3gwWEc1Y2RGeDBYSFIyWVhJZ2JYTm5JRDBnS0cxaGRHTm9aWE1nSmlZZ2JXRjBZMmhsYzFzeFhTa2dmSHdnSjB4dlp5QnRaWE56WVdkbElDZytQajRwSUhSeWFXZG5aWEpsWkNFbk8xeHVYSFJjZEZ4MFJsSkJUVVZYVDFKTExteHZaeWh0YzJjcE8xeHVYSFJjZEgwN1hHNWNkSDFjYmx4dVhIUXZMeUJOWlhSb2IyUWdkRzhnWVhSMFlXTm9JSFJvWlNCemNHVmphV1pwWldRZ1kyOXRjRzl1Wlc1MEwzUmxiWEJzWVhSbElIUnZJR0VnY21WbmFXOXVYRzVjZEdWc2MyVWdhV1lnS0Z4dVhIUmNkQ2dvYldGMFkyaGxjeUE5SUhaaGJIVmxMbTFoZEdOb0tDOWVLRnRlTGx4Y2MxMHJLVnhjY3lvOFhGd3RYRnh6S2lndUtsdGVMbHhjYzEwcEx5a3BJQ1ltSUcxaGRHTm9aWE5iTVYwZ0ppWWdiV0YwWTJobGMxc3lYU2tnZkh4Y2JseDBYSFFvS0cxaGRHTm9aWE1nUFNCMllXeDFaUzV0WVhSamFDZ3ZYaWhiWGk1Y1hITmRLeWxjWEhNcVhGd3RQbHhjY3lvb0xpcGJYaTVjWEhOZEtTOHBLU0FtSmlCdFlYUmphR1Z6V3pGZElDWW1JRzFoZEdOb1pYTmJNbDBnSmlaY2JseDBYSFJjZENodFlYUmphR1Z6V3lkMGJYQW5YU0E5SUcxaGRHTm9aWE5iTVYwcElDWW1JQ2h0WVhSamFHVnpXekZkSUQwZ2JXRjBZMmhsYzFzeVhTa2dKaVlnS0cxaGRHTm9aWE5iTWwwZ1BTQnRZWFJqYUdWeld5ZDBiWEFuWFNrcFhHNWNkQ2tnZTF4dVhIUmNkR1p1SUQwZ1puVnVZM1JwYjI0Z1lYUjBZV05vVkdWdGNHeGhkR1VvS1NCN1hHNWNibHgwWEhSY2RDOHZJRkpsYlc5MlpTQmhiR3dnZDJocGRHVnpjR0ZqWlNCbWNtOXRJRzFoZEdOb1pYTmNibHgwWEhSY2RHMWhkR05vWlhOYk1WMGdQU0J0WVhSamFHVnpXekZkTG5KbGNHeGhZMlVvTHloY1hITXJLUzluTENBbkp5azdYRzVjZEZ4MFhIUnRZWFJqYUdWeld6SmRJRDBnYldGMFkyaGxjMXN5WFM1eVpYQnNZV05sS0M4b1hGeHpLeWt2Wnl3Z0p5Y3BPMXh1WEc1Y2RGeDBYSFIyWVhJZ2NtVm5hVzl1SUQwZ2JXRjBZMmhsYzFzeFhUdGNibHgwWEhSY2RIWmhjaUIwWlcxd2JHRjBaU0E5SUcxaGRHTm9aWE5iTWwwN1hHNWNkRngwWEhSR1VrRk5SVmRQVWtzdWRtVnlZbTl6WlNoMGFHbHpMbWxrSUNzZ0p5QTZPaUJCZEhSaFkyaHBibWNnWUNjZ0t5QjBaVzF3YkdGMFpTQXJJQ2RnSUhSdklHQW5JQ3NnY21WbmFXOXVJQ3NnSjJBdUxpNG5LVHRjYmx4dVhHNWNkRngwWEhScFppQW9JWFJvYVhOYmNtVm5hVzl1WFNrZ2UxeHVYSFJjZEZ4MFhIUkdVa0ZOUlZkUFVrc3VaWEp5YjNJb2RHaHBjeTVwWkN3bk9qb2dWSEo1YVc1bklIUnZJR0YwZEdGamFDQnlaV2RwYjI0Z2QybDBhQ0J6YUc5eWRHaGhibVFnS0NjcmRtRnNkV1VySnlrc0lHSjFkQ0JqYjNWc1pDQnViM1FnWm1sdVpDQnlaV2RwYjI0Z1lDY3JjbVZuYVc5dUt5ZGdKeWs3WEc1Y2RGeDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkSFJvYVhOYmNtVm5hVzl1WFM1aGRIUmhZMmdvZEdWdGNHeGhkR1VwTzF4dVhIUmNkSDA3WEc1Y2RIMWNibHh1WEc1Y2RDOHZJRTFsZEdodlpDQjBieUIwYjJkbmJHVWdLQ0VwSUhSb1pTQnpjR1ZqYVdacFpXUWdiVzlrWld3Z1lYUjBjbHh1WEhSbGJITmxJR2xtSUNnb2JXRjBZMmhsY3lBOUlIWmhiSFZsTG0xaGRHTm9LQzllWEZ3aFhGeHpLbHhjUUNndUtsdGVMbHhjYzEwcEx5a3BJQ1ltSUcxaGRHTm9aWE5iTVYwcElIdGNibHgwWEhSbWJpQTlJR1oxYm1OMGFXOXVJSFJ2WjJkc1pVRjBkSElvS1NCN1hHNWNkRngwWEhSR1VrRk5SVmRQVWtzdWRtVnlZbTl6WlNoMGFHbHpMbWxrSUNzZ0p5QTZPaUJVYjJkbmJHbHVaeUJoZEhSeUlDZ25JQ3NnYldGMFkyaGxjMXN4WFNBcklDY3BMaTR1SnlrN1hHNWNkRngwWEhSMllYSWdiMnhrUVhSMGNsWmhiSFZsSUQwZ2RHaHBjeTV0YjJSbGJDNW5aWFFvSUcxaGRHTm9aWE5iTVYwZ0tUdGNibHh1WEhSY2RGeDBhV1lnS0c5c1pFRjBkSEpXWVd4MVpTa2dlMXh1WEhSY2RGeDBYSFIwYUdsekxtMXZaR1ZzTG5ObGRDZ2diV0YwWTJobGMxc3hYU3dnWm1Gc2MyVWdLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUmNkR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUjBhR2x6TG0xdlpHVnNMbk5sZENnZ2JXRjBZMmhsYzFzeFhTd2dkSEoxWlNBcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwN1hHNWNkSDFjYmx4dVhIUXZMeUJOWlhSb2IyUWdkRzhnWTJoaGJtZGxJSFJvWlNCemNHVmphV1pwWldRZ2JXOWtaV3dnWVhSMGNseHVYSFJsYkhObElHbG1JQ2dvYldGMFkyaGxjeUE5SUhaaGJIVmxMbTFoZEdOb0tDOWVYRnh6S2x4Y1FDaGJYajFkS3lrOUtGdGVQVjBxS1Z4Y2N5b2tMeWtwS1NCN1hHNWNibHgwWEhSMllYSWdZWFIwY2s1aGJXVWdQU0J0WVhSamFHVnpXekZkTzF4dVhIUmNkSFpoY2lCdVpYZEJkSFJ5Vm1Gc2RXVWdQU0J0WVhSamFHVnpXekpkTzF4dVhHNWNkRngwWm00Z1BTQm1kVzVqZEdsdmJpQmphR0Z1WjJWQmRIUnlLQ2tnZTF4dVhIUmNkRngwZEdocGN5NXRiMlJsYkM1elpYUW9ZWFIwY2s1aGJXVXNJRzVsZDBGMGRISldZV3gxWlNrN1hHNWNkRngwZlR0Y2JseDBmVnh1WEc1Y2RDOHZJRTFsZEdodlpDQjBieUJ5WlcxdmRtVWdkR2hsSUcxdlpHVnNJR1p2Y2lCMGFHVWdZM1Z5Y21WdWRDQmpiMjF3YjI1bGJuUmNibHgwWld4elpTQnBaaUFvS0cxaGRHTm9aWE1nUFNCMllXeDFaUzV0WVhSamFDZ3ZYbHhjY3lwY1hDMWNYSE1xSkM4cEtTa2dlMXh1WEhSY2RHWnVJRDBnWm5WdVkzUnBiMjRnY21WdGIzWmxUVzlrWld3Z0tDa2dlMXh1WEc1Y2RGeDBYSFF2THlCUGJteDVJSGR2Y210eklHbG1JRzF2WkdWc0lHSmxiRzl1WjNNZ2RHOGdZU0JqYjJ4c1pXTjBhVzl1WEc1Y2RGeDBYSFJwWmlBb0lYUm9hWE11Ylc5a1pXd3VZMjlzYkdWamRHbHZiaWtnY21WMGRYSnVPMXh1WEc1Y2RGeDBYSFIwYUdsekxtMXZaR1ZzTG1OdmJHeGxZM1JwYjI0dWNtVnRiM1psS0hSb2FYTXViVzlrWld3cE8xeHVYSFJjZEgwN1hHNWNkSDFjYmx4dVhHNWNkQzh2SUdSbGNISmxZMkYwYVc1bklHTnNZWE56SUcxaGJtbHdkV3hoZEdsdmJpQnphRzl5ZEdoaGJtUmNibHgwTHk4Z0tHNXZJRzVsWldRZ2RHOGdaRzhnWkc5dElHMWhibWx3ZFd4aGRHbHZiaUIxYm14bGMzTWdZV0p6YjJ4MWRHVnNlU0J1WldObGMzTmhjbmtwWEc1Y2JseDBMeThnTHk4Z1RXVjBhRzlrSUhSdklHRmtaQ0IwYUdVZ2MzQmxZMmxtYVdWa0lHTnNZWE56WEc1Y2RDOHZJR1ZzYzJVZ2FXWWdLQ2h0WVhSamFHVnpJRDBnZG1Gc2RXVXViV0YwWTJnb0wxNWNYQ3RjWEhNcVhGd3VLQzRxVzE0dVhGeHpYU2t2S1NrZ0ppWWdiV0YwWTJobGMxc3hYU2tnZTF4dVhIUXZMeUJjZEdadUlEMGdablZ1WTNScGIyNGdZV1JrUTJ4aGMzTW9LU0I3WEc1Y2RDOHZJRngwWEhSR1VrRk5SVmRQVWtzdWRtVnlZbTl6WlNoMGFHbHpMbWxrSUNzZ0p5QTZPaUJCWkdScGJtY2dZMnhoYzNNZ0tDY2dLeUJ0WVhSamFHVnpXekZkSUNzZ0p5a3VMaTRuS1R0Y2JseDBMeThnWEhSY2RIUm9hWE11SkdWc0xtRmtaRU5zWVhOektHMWhkR05vWlhOYk1WMHBPMXh1WEhRdkx5QmNkSDA3WEc1Y2RDOHZJSDFjYmx4MEx5OGdMeThnVFdWMGFHOWtJSFJ2SUhKbGJXOTJaU0IwYUdVZ2MzQmxZMmxtYVdWa0lHTnNZWE56WEc1Y2RDOHZJR1ZzYzJVZ2FXWWdLQ2h0WVhSamFHVnpJRDBnZG1Gc2RXVXViV0YwWTJnb0wxNWNYQzFjWEhNcVhGd3VLQzRxVzE0dVhGeHpYU2t2S1NrZ0ppWWdiV0YwWTJobGMxc3hYU2tnZTF4dVhIUXZMeUJjZEdadUlEMGdablZ1WTNScGIyNGdjbVZ0YjNabFEyeGhjM01vS1NCN1hHNWNkQzh2SUZ4MFhIUkdVa0ZOUlZkUFVrc3VkbVZ5WW05elpTaDBhR2x6TG1sa0lDc2dKeUE2T2lCU1pXMXZkbWx1WnlCamJHRnpjeUFvSnlBcklHMWhkR05vWlhOYk1WMGdLeUFuS1M0dUxpY3BPMXh1WEhRdkx5QmNkRngwZEdocGN5NGtaV3d1Y21WdGIzWmxRMnhoYzNNb2JXRjBZMmhsYzFzeFhTazdYRzVjZEM4dklGeDBmVHRjYmx4MEx5OGdmVnh1WEhRdkx5QXZMeUJOWlhSb2IyUWdkRzhnZEc5bloyeGxJSFJvWlNCemNHVmphV1pwWldRZ1kyeGhjM05jYmx4MEx5OGdaV3h6WlNCcFppQW9LRzFoZEdOb1pYTWdQU0IyWVd4MVpTNXRZWFJqYUNndlhseGNJVnhjY3lwY1hDNG9MaXBiWGk1Y1hITmRLUzhwS1NBbUppQnRZWFJqYUdWeld6RmRLU0I3WEc1Y2RDOHZJRngwWm00Z1BTQm1kVzVqZEdsdmJpQjBiMmRuYkdWRGJHRnpjeWdwSUh0Y2JseDBMeThnWEhSY2RFWlNRVTFGVjA5U1N5NTJaWEppYjNObEtIUm9hWE11YVdRZ0t5QW5JRG82SUZSdloyZHNhVzVuSUdOc1lYTnpJQ2duSUNzZ2JXRjBZMmhsYzFzeFhTQXJJQ2NwTGk0dUp5azdYRzVjZEM4dklGeDBYSFIwYUdsekxpUmxiQzUwYjJkbmJHVkRiR0Z6Y3lodFlYUmphR1Z6V3pGZEtUdGNibHgwTHk4Z1hIUjlPMXh1WEhRdkx5QjlYRzVjYmx4MEx5OGdWRTlFVHpwY2RHRnNiRzkzSUdSbGMyTmxibVJoYm5SeklIUnZJR0psSUdOdmJuUnliMnhzWldRZ2RtbGhJSE5vYjNKMGFHRnVaRnh1WEhRdkwxeDBYSFJjZEdVdVp5NGdPaUFuYkdrdWNtOTNJQzB1YUdsbmFHeHBaMmgwWldRblhHNWNkQzh2WEhSY2RGeDBkMjkxYkdRZ2NtVnRiM1psSUhSb1pTQmdhR2xuYUd4cFoyaDBaV1JnSUdOc1lYTnpJR1p5YjIwZ2RHaHBjeTRrS0Nkc2FTNXliM2NuS1Z4dVhHNWNibHgwTHk4Z1NXWWdjMmh2Y25RdGFHRnVaQ0J0WVhSamFHVmtMQ0J5WlhSMWNtNGdkR2hsSUdSbGNtVm1aWEpsYm1ObFpDQm1kVzVqZEdsdmJseHVYSFJwWmlBb1ptNHBJSHRjYmx4dVhIUmNkRVpTUVUxRlYwOVNTeTUyWlhKaWIzTmxLQ2RKYm5SbGNuQnlaWFJwYm1jZ2JXVmhibWx1WnlCbWNtOXRJSE5vYjNKMGFHRnVaQ0E2T2lCZ0p5QXJJSFpoYkhWbElDc2dKMkF1TGk0bktUdGNibHh1WEhSY2RDOHZJRU4xY25KNUlIUm9aU0J5WlhOMWJIUWdablZ1WTNScGIyNGdkMmwwYUNCaGJua2djM1ZtWm1sNElHMWhkR05vWlhOY2JseDBYSFIyWVhJZ1kzVnljbWxsWkVadUlEMGdabTQ3WEc1Y2JseDBYSFF2THlCVWNtRnBiR2x1WnlCZ0xtQWdhVzVrYVdOaGRHVnpJR0Z1SUdVdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NsY2JseDBYSFJwWmlBb2RtRnNkV1V1YldGMFkyZ29MMXhjTGx4Y2N5b2tMeWtwSUh0Y2JseDBYSFJjZEdOMWNuSnBaV1JHYmlBOUlHWjFibU4wYVc5dUlHRnVaRk4wYjNCUWNtOXdZV2RoZEdsdmJpaGxLU0I3WEc1Y2JseDBYSFJjZEZ4MEx5OGdRbWx1WkNBb2MyOGdhWFFnYVc1b1pYSnBkSE1nWTI5dGNHOXVaVzUwSUdOdmJuUmxlSFFwSUdGdVpDQmpZV3hzSUdsdWRHVnlhVzl5SUdaMWJtTjBhVzl1WEc1Y2RGeDBYSFJjZEdadUxtRndjR3g1S0hSb2FYTXBPMXh1WEc1Y2RGeDBYSFJjZEM4dklIUm9aVzRnYVcxdFpXUnBZWFJsYkhrZ2MzUnZjQ0JsZG1WdWRDQmlkV0ppYkdsdVp5OXdjbTl3WVdkaGRHbHZibHh1WEhSY2RGeDBYSFJwWmlBb1pTQW1KaUJsTG5OMGIzQlFjbTl3WVdkaGRHbHZiaWtnZTF4dVhIUmNkRngwWEhSY2RHVXVjM1J2Y0ZCeWIzQmhaMkYwYVc5dUtDazdYRzVjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwUmxKQlRVVlhUMUpMTG5kaGNtNG9YRzVjZEZ4MFhIUmNkRngwWEhSMGFHbHpMbWxrSUNzZ0p5QTZPaUJVY21GcGJHbHVaeUJnTG1BZ2MyaHZjblJvWVc1a0lIZGhjeUIxYzJWa0lIUnZJR2x1ZG05clpTQmhiaUFuSUN0Y2JseDBYSFJjZEZ4MFhIUmNkQ2RsTG5OMGIzQlFjbTl3WVdkaGRHbHZiaWdwTENCaWRYUWdYQ0luSUNzZ2RtRnNkV1VnS3lBblhDSWdkMkZ6SUc1dmRDQjBjbWxuWjJWeVpXUWdZbmtnWVNCRVQwMGdaWFpsYm5RaFhGeHVKeUFyWEc1Y2RGeDBYSFJjZEZ4MFhIUW5VSEp2WW1GaWJIa2dZbVZ6ZENCMGJ5QmtiM1ZpYkdVdFkyaGxZMnNnZEdocGN5QjNZWE1nZDJoaGRDQjViM1VnYldWaGJuUWdkRzhnWkc4dUp5azdYRzVjZEZ4MFhIUmNkSDFjYmx4MFhIUmNkSDA3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlHTjFjbkpwWldSR2JqdGNibHgwZlZ4dVhHNWNibHgwTHk4Z1QzUm9aWEozYVhObExDQnBaaUJ1YnlCemFHOXlkQzFvWVc1a0lHMWhkR05vWldRc0lIQmhjM01nZEdobElHOXlhV2RwYm1Gc0lIWmhiSFZsWEc1Y2RDOHZJSE4wY21GcFoyaDBJSFJvY205MVoyaGNibHgwY21WMGRYSnVJSFpoYkhWbE8xeHVmVHRjYmlKZGZRPT0KKDE3KQp9KTsKOw==",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 09:22:28 GMT",
                    "Content-Length": "563266",
                    "Date": "Fri, 07 Nov 2014 09:22:28 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}