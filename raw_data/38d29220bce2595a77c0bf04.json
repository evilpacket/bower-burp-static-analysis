{
    "url": "http://localhost:9999/DataTables/DataTables/media/unit_testing/unit_test.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "HTML5 storage manipulation (DOM-based)",
    "issueType": 5246720,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based HTML5 storage manipulation occurs when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and stores this data in the HTML5 storage of the web browser (either localStorage or sessionStorage). An attacker may be able to use this behavior to construct a URL which, if visited by another application user, will cause the user's browser to store attacker-controllable data.<br><br>This behavior does not in itself constitute a security vulnerability. However, if the application later reads the data back from storage and processes it in an unsafe way, then an attacker may be able to leverage the storage mechanism to deliver other DOM-based attacks, such as cross-site scripting and JavaScript injection.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>You should also review the ways in which the wider application uses data that is retrieved from HTML5 storage. If the data is never handled in an unsafe manner, then this behavior may not constitute any kind of vulnerability.<br><br>The most effective way to avoid DOM-based HTML5 storage manipulation is not to place in HTML5 storage any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored.",
    "issueDetail": "The application may be vulnerable to DOM-based HTML5 storage manipulation. Data is read from <b>window.location.pathname</b> and written to <b>localStorage.setItem()</b> via the following statement:<ul><li>localStorage.setItem( 'DataTables_'+s.sInstance+'_'+window.location.pathname, null );</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/DataTables/DataTables/media/unit_testing/unit_test.js",
                "path": "/DataTables/DataTables/media/unit_testing/unit_test.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9EYXRhVGFibGVzL0RhdGFUYWJsZXMvbWVkaWEvdW5pdF90ZXN0aW5nL3VuaXRfdGVzdC5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "LyoKICogRmlsZTogICAgICAgIHVuaXRfdGVzdC5qcwogKiBWZXJzaW9uOiAgICAgMC4wLjEKICogQ1ZTOiAgICAgICAgICRJZCQKICogRGVzY3JpcHRpb246IFVuaXQgdGVzdCBmcmFtZXdvcmsKICogQXV0aG9yOiAgICAgIEFsbGFuIEphcmRpbmUgKHd3dy5zcHJ5bWVkaWEuY28udWspCiAqIENyZWF0ZWQ6ICAgICBTdW4gTWFyICA4IDIyOjAyOjQ5IEdNVCAyMDA5CiAqIE1vZGlmaWVkOiAgICAkRGF0ZSQgYnkgJEF1dGhvciQKICogTGFuZ3VhZ2U6ICAgIEphdmFzY3JpcHQKICogTGljZW5zZTogICAgIEdQTCB2MiBvciBCU0QgMyBwb2ludCBzdHlsZQogKiBQcm9qZWN0OiAgICAgRGF0YVRhYmxlcwogKiBDb250YWN0OiAgICAgYWxsYW4uamFyZGluZUBzcHJ5bWVkaWEuY28udWsKICogCiAqIENvcHlyaWdodCAyMDA5IEFsbGFuIEphcmRpbmUsIGFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqCiAqIERlc2NyaXB0aW9uOgogKiBUaGlzIGlzIGEgamF2YXNjcmlwdCBsaWJyYXJ5IHN1aXRhYmxlIGZvciB1c2UgYXMgYSB1bml0IHRlc3RpbmcgZnJhbWV3b3JrLiBFbXBsb3lpbmcgYSBxdWV1aW5nCiAqIG1lY2hhbmlzaW0gdG8gdGFrZSBhY2NvdW50IG9mIGFzeW5jIGV2ZW50cyBpbiBqYXZhc2NyaXB0LCB0aGlzIGxpYnJhcnkgd2lsbCBjb21tdW5pY2F0ZXMgd2l0aAogKiBhIGNvbnRyb2xsZXIgZnJhbWUgKHRvIHJlcG9ydCBpbmRpdmlkdWFsIHRlc3Qgc3RhdHVzKS4KICogCiAqLwoKCnZhciBvVGVzdCA9IHsKCS8qIEJsb2NrIGZ1cnRoZXIgdGVzdHMgZnJvbSBvY2N1cmluZyAtIG1pZ2h0IGJlIGVuZCBvZiB0ZXN0cyBvciBkdWUgdG8gYXN5bmMgd2FpdCAqLwoJYkJsb2NrOiBmYWxzZSwKCQoJLyogTnVtYmVyIG9mIHRpbWVzIHRvIHRyeSByZXRlc3RpbmcgZm9yIGEgYmxvY2tpbmcgdGVzdCAqLwoJaVJlVGVzdExpbWl0OiAyMCwKCQoJLyogQW1vdW50IG9mIHRpbWUgdG8gd2FpdCBiZXR3ZWVuIHRyeWluZyBmb3IgYW4gYXN5bmMgdGVzdCAqLwoJaVJlVGVzdERlbGF5OiAxNTAsCgkKCS8qIEVuZCB0ZXN0cyAtIGV4dGVybmFsIGNvbnRyb2wgKi8KCWJFbmQ6IGZhbHNlLAoJCgkvKiBJbnRlcm5hbCB2YXJpYWJsZXMgKi8KCV9hb1F1ZXVlOiBbXSwKCV9pUmVUZXN0OiAwLAoJX2JGaW5pc2hlZDogZmFsc2UsCgkKCQoJLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqCgkgKiBSZWNvbW1lbmVkIHB1YmxpYyBmdW5jdGlvbnMKCSAqLwoJCgkvKgoJICogRnVuY3Rpb246IGZuVGVzdAoJICogUHVycG9zZTogIEFkZCBhIHRlc3QgdG8gdGhlIHF1ZXVlCgkgKiBSZXR1cm5zOiAgLQoJICogSW5wdXRzOiAgIHN0cmluZzpzTWVzc2FnZSAtIG5hbWUgb2YgdGhlIHRlc3QKCSAqICAgICAgICAgICBmdW5jdGlvbjpmblRlc3QgLSBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGV2YWx1ZGF0ZWQgdG8gZ2V0IHRoZSB0ZXN0IHJlc3VsdAoJICovCgkiZm5UZXN0IjogZnVuY3Rpb24gKCBzTWVzc2FnZSwgZm5TZXR1cCwgZm5UZXN0ICkKCXsKCQl0aGlzLl9hb1F1ZXVlLnB1c2goIHsKCQkJInNNZXNzYWdlIjogc01lc3NhZ2UsCgkJCSJmblNldHVwIjogZm5TZXR1cCwKCQkJImZuVGVzdCI6IGZuVGVzdCwKCQkJImJQb2xsIjogZmFsc2UKCQl9ICk7CgkJdGhpcy5fZm5OZXh0KCk7Cgl9LAoJCgkvKgoJICogRnVuY3Rpb246IGZuV2FpdFRlc3QKCSAqIFB1cnBvc2U6ICBBZGQgYSB0ZXN0IHRvIHRoZSBxdWV1ZSB3aGljaCBoYXMgYSByZS10ZXN0IGN5Y2xlCgkgKiBSZXR1cm5zOiAgLQoJICogSW5wdXRzOiAgIHN0cmluZzpzTWVzc2FnZSAtIG5hbWUgb2YgdGhlIHRlc3QKCSAqICAgICAgICAgICBmdW5jdGlvbjpmblRlc3QgLSBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGV2YWx1ZGF0ZWQgdG8gZ2V0IHRoZSB0ZXN0IHJlc3VsdAoJICovCgkiZm5XYWl0VGVzdCI6IGZ1bmN0aW9uICggc01lc3NhZ2UsIGZuU2V0dXAsIGZuVGVzdCApCgl7CgkJdGhpcy5fYW9RdWV1ZS5wdXNoKCB7CgkJCSJzTWVzc2FnZSI6IHNNZXNzYWdlLAoJCQkiZm5TZXR1cCI6IGZuU2V0dXAsCgkJCSJmblRlc3QiOiBmblRlc3QsCgkJCSJiUG9sbCI6IHRydWUKCQl9ICk7CgkJdGhpcy5fZm5OZXh0KCk7Cgl9LAoJCgkvKgoJICogRnVuY3Rpb246IGZuU3RhcnQKCSAqIFB1cnBvc2U6ICBJbmRpY2F0ZSB0aGF0IHRoaXMgaXMgYSBuZXcgdW5pdCBhbmQgd2hhdCBpdCBpcyB0ZXN0aW5nIChtZXNzYWdlIHRvIGVuZCB1c2VyKQoJICogUmV0dXJuczogIC0KCSAqIElucHV0czogICBzdHJpbmc6c01lc3NhZ2UgLSBtZXNzYWdlIHRvIGdpdmUgdG8gdGhlIHVzZXIgYWJvdXQgdGhpcyB1bml0CgkgKi8KCSJmblN0YXJ0IjogZnVuY3Rpb24gKCBzTWVzc2FnZSApCgl7CgkJd2luZG93LnBhcmVudC5jb250cm9sbGVyLmZuU3RhcnRNZXNzYWdlKCBzTWVzc2FnZSApOwoJfSwKCQoJLyoKCSAqIEZ1bmN0aW9uOiBmbkNvbXBsZXRlCgkgKiBQdXJwb3NlOiAgVGVsbCB0aGUgY29udHJvbGxlciB0aGF0IHdlIGFyZSBhbGwgZG9uZSBoZXJlCgkgKiBSZXR1cm5zOiAgLQoJICogSW5wdXRzOiAgIC0KCSAqLwoJImZuQ29tcGxldGUiOiBmdW5jdGlvbiAoKQoJewoJCXRoaXMuX2JGaW5pc2hlZCA9IHRydWU7CgkJdGhpcy5fZm5OZXh0KCk7Cgl9LAoJCgkvKgoJICogRnVuY3Rpb246IGZuQ29va2llRGVzdHJveQoJICogUHVycG9zZTogIERlc3Ryb3kgYSBjb29raWUgb2YgYSBnaXZlbiBuYW1lCgkgKiBSZXR1cm5zOiAgLQoJICogSW5wdXRzOiAgIC0KCSAqLwoJImZuQ29va2llRGVzdHJveSI6IGZ1bmN0aW9uICggb1RhYmxlICkKCXsKCQl2YXIgcyA9IG9UYWJsZS5mblNldHRpbmdzKCk7CgoJCWxvY2FsU3RvcmFnZS5zZXRJdGVtKCAnRGF0YVRhYmxlc18nK3Muc0luc3RhbmNlKydfJyt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIG51bGwgKTsKCX0sCgkKCQoJCgkvKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICoKCSAqIEludGVybmFsIGZ1bmN0aW9ucwoJICovCgkKCQoJIl9mblJlVGVzdCI6IGZ1bmN0aW9uICggb1Rlc3RJbmZvICkKCXsKCQl2YXIgYlJlc3VsdCA9IG9UZXN0SW5mby5mblRlc3QoICk7CgkJaWYgKCBiUmVzdWx0ICkKCQl7CgkJCS8qIFRlc3QgcGFzc2VkIG9uIHJldHJ5ICovCgkJCXRoaXMuX2ZuUmVzdWx0KCB0cnVlICk7CgkJCXRoaXMuX2ZuTmV4dCgpOwoJCX0KCQllbHNlCgkJewoJCQlpZiAoIHRoaXMuX2lSZVRlc3QgPCB0aGlzLmlSZVRlc3RMaW1pdCApCgkJCXsKCQkJCXRoaXMuX2lSZVRlc3QrKzsKCQkJCXNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgewoJCQkJCW9UZXN0Ll9mblJlVGVzdCggb1Rlc3RJbmZvICk7CgkJCQl9LCB0aGlzLmlSZVRlc3REZWxheSApOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJdGhpcy5fZm5SZXN1bHQoIGZhbHNlICk7CgkJCX0KCQl9Cgl9LAoJCgkiX2ZuTmV4dCI6IGZ1bmN0aW9uICgpCgl7CgkJaWYgKCB0aGlzLmJFbmQgKQoJCXsKCQkJcmV0dXJuOwoJCX0KCQkKCQlpZiAoICF0aGlzLmJCbG9jayAmJiB0aGlzLl9hb1F1ZXVlLmxlbmd0aCA+IDAgKQoJCXsKCQkJdmFyIG9OZXh0VGVzdCA9IHRoaXMuX2FvUXVldWUuc2hpZnQoKTsKCQkJd2luZG93LnBhcmVudC5jb250cm9sbGVyLmZuVGVzdFN0YXJ0KCBvTmV4dFRlc3Quc01lc3NhZ2UgKTsKCQkJdGhpcy5iQmxvY2sgPSB0cnVlOwoJCQkKCQkJaWYgKCB0eXBlb2Ygb05leHRUZXN0LmZuU2V0dXAgPT0gJ2Z1bmN0aW9uJyApCgkJCXsKCQkJCW9OZXh0VGVzdC5mblNldHVwKCApOwoJCQl9CgkJCXZhciBiUmVzdWx0ID0gb05leHRUZXN0LmZuVGVzdCggKTsKCQkJLy9iUmVzdWx0ID0gZmFsc2U7CgkJCQoJCQlpZiAoIG9OZXh0VGVzdC5iUG9sbCApCgkJCXsKCQkJCWlmICggYlJlc3VsdCApCgkJCQl7CgkJCQkJdGhpcy5fZm5SZXN1bHQoIHRydWUgKTsKCQkJCQl0aGlzLl9mbk5leHQoKTsKCQkJCX0KCQkJCWVsc2UKCQkJCXsKCQkJCQlfaVJlVGVzdCA9IDA7CgkJCQkJc2V0VGltZW91dCggZnVuY3Rpb24oKSB7CgkJCQkJCW9UZXN0Ll9mblJlVGVzdCggb05leHRUZXN0ICk7CgkJCQkJfSwgdGhpcy5pUmVUZXN0RGVsYXkgKTsKCQkJCX0KCQkJfQoJCQllbHNlCgkJCXsKCQkJCXRoaXMuX2ZuUmVzdWx0KCBiUmVzdWx0ICk7CgkJCQl0aGlzLl9mbk5leHQoKTsKCQkJfQoJCX0KCQllbHNlIGlmICggIXRoaXMuYkJsb2NrICYmIHRoaXMuX2FvUXVldWUubGVuZ3RoID09IDAgJiYgdGhpcy5fYkZpbmlzaGVkICkKCQl7CgkJCXdpbmRvdy5wYXJlbnQuY29udHJvbGxlci5mblVuaXRDb21wbGV0ZSggKTsKCQl9Cgl9LAoJCgkiX2ZuUmVzdWx0IjogZnVuY3Rpb24gKCBiICkKCXsKCQl3aW5kb3cucGFyZW50LmNvbnRyb2xsZXIuZm5UZXN0UmVzdWx0KCBiICk7CgkJdGhpcy5iQmxvY2sgPSBmYWxzZTsKCQlpZiAoICFiICkKCQl7CgkJCXRoaXMuYkVuZCA9IHRydWU7CgkJfQoJfQp9OwoKCnZhciBvRGlzcGFjaGVyID0gewoJImNsaWNrIjogZnVuY3Rpb24gKCBuTm9kZSwgb1NwZWNpYWwgKQoJewoJCXZhciBldnQgPSB0aGlzLmZuQ3JlYXRlRXZlbnQoICdjbGljaycsIG5Ob2RlLCBvU3BlY2lhbCApOwoJCWlmICggbk5vZGUuZGlzcGF0Y2hFdmVudCApCgkJCW5Ob2RlLmRpc3BhdGNoRXZlbnQoZXZ0KTsKCQllbHNlCgkJCW5Ob2RlLmZpcmVFdmVudCgnb25jbGljaycsIGV2dCk7Cgl9LAoJCgkiY2hhbmdlIjogZnVuY3Rpb24gKCBuTm9kZSApCgl7CgkJdmFyIGV2dCA9IHRoaXMuZm5DcmVhdGVFdmVudCggJ2NoYW5nZScsIG5Ob2RlICk7CgkJaWYgKCBuTm9kZS5kaXNwYXRjaEV2ZW50ICkKCQluTm9kZS5kaXNwYXRjaEV2ZW50KGV2dCk7CgkJZWxzZQoJCQluTm9kZS5maXJlRXZlbnQoJ29uY2hhbmdlJywgZXZ0KTsKCX0sCgkKCQoJLyoKCSAqIEZ1bmN0aW9uOiBmbkNyZWF0ZUV2ZW50CgkgKiBQdXJwb3NlOiAgQ3JlYXRlIGFuIGV2ZW50IG9qZWN0IGJhc2VkIG9uIHRoZSB0eXBlIHRvIHRyaWdnZXIgYW4gZXZlbnQgLSB4LXBsYXRmb3JtCgkgKiBSZXR1cm5zOiAgZXZlbnQ6ZXZ0CgkgKiBJbnB1dHM6ICAgc3RyaW5nOnNUeXBlIC0gdHlwZSBvZiBldmVudAoJICogICAgICAgICAgIG5vZGU6blRhcmdldCAtIHRhcmdldCBub2RlIG9mIHRoZSBldmVudAoJICovCglmbkNyZWF0ZUV2ZW50OiBmdW5jdGlvbiggc1R5cGUsIG5UYXJnZXQsIG9TcGVjaWFsICkKCXsKCQl2YXIgZXZ0ID0gbnVsbDsKCQl2YXIgb1RhcmdldFBvcyA9IHRoaXMuX2ZuR2V0UG9zKCBuVGFyZ2V0ICk7CgkJdmFyIHNUeXBlR3JvdXAgPSB0aGlzLl9mbkV2ZW50VHlwZUdyb3VwKCBzVHlwZSApOwoJCWlmICggdHlwZW9mIG9TcGVjaWFsID09ICd1bmRlZmluZWQnICkKCQl7CgkJCW9TcGVjaWFsID0ge307CgkJfQoJCQoJCXZhciBjdHJsS2V5ID0gZmFsc2U7CgkJdmFyIGFsdEtleSA9IGZhbHNlOwoJCXZhciBzaGlmdEtleSA9ICh0eXBlb2Ygb1NwZWNpYWwuc2hpZnQgIT0gJ3VuZGVmaW5lZCcpID8gb1NwZWNpYWwuc2hpZnQgOiBmYWxzZTsKCQl2YXIgbWV0YUtleSA9IGZhbHNlOwoJCXZhciBidXR0b24gPSBmYWxzZTsKCQkKCQlpZiAoIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICkKCQl7CgkJCXN3aXRjaCAoIHNUeXBlR3JvdXAgKQoJCQl7CgkJCQljYXNlICdtb3VzZSc6CgkJCQkJZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoICJNb3VzZUV2ZW50cyIgKTsKCQkJCQlldnQuaW5pdE1vdXNlRXZlbnQoIHNUeXBlLCB0cnVlLCB0cnVlLCB3aW5kb3csIDAsIG9UYXJnZXRQb3NbMF0sIG9UYXJnZXRQb3NbMV0sIAoJCQkJCQlvVGFyZ2V0UG9zWzBdLCBvVGFyZ2V0UG9zWzFdLCBjdHJsS2V5LCBhbHRLZXksIHNoaWZ0S2V5LCAKCQkJCQkJbWV0YUtleSwgYnV0dG9uLCBudWxsICk7CgkJCQkJYnJlYWs7CgkJCQkKCQkJCWNhc2UgJ2h0bWwnOgoJCQkJCWV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCAiSFRNTEV2ZW50cyIgKTsKCQkJCQlldnQuaW5pdEV2ZW50KCBzVHlwZSwgdHJ1ZSwgdHJ1ZSApOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSAndWknOgoJCQkJCWV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCAiVUlFdmVudHMiICk7CgkJCQkJZXZ0LmluaXRVSUV2ZW50KCBzVHlwZSwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAwICk7CgkJCQkJYnJlYWs7CgkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJYnJlYWs7CgkJCX0KCQl9CgkJZWxzZSBpZiAoIGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0ICkKCQl7CgkJCXN3aXRjaCAoIHNUeXBlR3JvdXAgKQoJCQl7CgkJCQljYXNlICdtb3VzZSc6CgkJCQkJZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTsKCQkJCQlldnQuc2NyZWVuWCA9IG9UYXJnZXRQb3NbMF07CgkJCQkJZXZ0LnNjcmVlblggPSBvVGFyZ2V0UG9zWzFdOwoJCQkJCWV2dC5jbGllbnRYID0gb1RhcmdldFBvc1swXTsKCQkJCQlldnQuY2xpZW50WSA9IG9UYXJnZXRQb3NbMV07CgkJCQkJZXZ0LmN0cmxLZXkgPSBjdHJsS2V5OwoJCQkJCWV2dC5hbHRLZXkgPSBhbHRLZXk7CgkJCQkJZXZ0LnNoaWZ0S2V5ID0gc2hpZnRLZXk7CgkJCQkJZXZ0Lm1ldGFLZXkgPSBtZXRhS2V5OwoJCQkJCWV2dC5idXR0b24gPSBidXR0b247CgkJCQkJZXZ0LnJlbGF0ZWRUYXJnZXQgPSBudWxsOwoJCQkJCWJyZWFrOwoJCQkJCgkJCQljYXNlICdodG1sJzoKCQkJCQkvKiBmYWxsIHRocm91Z2ggdG8gYmFzaWMgZXZlbnQgb2JqZWN0ICovCgkJCQkJCgkJCQljYXNlICd1aSc6CgkJCQkJZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTsKCQkJCQlicmVhazsKCQkJCQoJCQkJZGVmYXVsdDoKCQkJCQlicmVhazsKCQkJfQoJCX0KCQkKCQlyZXR1cm4gZXZ0OwoJfSwKCQoJLyogCgkgKiBGdW5jdGlvbjogRGVzaWduQ29yZS5mbkdldFBvcwoJICogUHVycG9zZTogIEdldCB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCBvbiB0aGUgcGFnZQoJICogUmV0dXJuczogIGFycmF5WyAwLWludDpsZWZ0LCAxLWludDp0b3AgXQoJICogSW5wdXRzOiAgIG5vZGU6b2JqIC0gbm9kZSB0byBhbmFseXNlCgkgKi8KCV9mbkdldFBvczogZnVuY3Rpb24gKCBvYmogKSAKCXsKCQl2YXIgY3VybGVmdCA9IDA7CgkJdmFyIGN1cnRvcCA9IDA7CgkJCgkJaWYgKG9iai5vZmZzZXRQYXJlbnQpIAoJCXsKCQkJY3VybGVmdCA9IG9iai5vZmZzZXRMZWZ0OwoJCQljdXJ0b3AgPSBvYmoub2Zmc2V0VG9wOwoJCQl3aGlsZSAob2JqID0gb2JqLm9mZnNldFBhcmVudCApIAoJCQl7CgkJCQljdXJsZWZ0ICs9IG9iai5vZmZzZXRMZWZ0OwoJCQkJY3VydG9wICs9IG9iai5vZmZzZXRUb3A7CgkJCX0KCQl9CgkJcmV0dXJuIFtjdXJsZWZ0LGN1cnRvcF07Cgl9LAoJCgkKCS8qCgkgKiBGdW5jdGlvbjogX2ZuRXZlbnRUeXBlR3JvdXAKCSAqIFB1cnBvc2U6ICBHcm91cCB0aGUgZXZlbnQgdHlwZXMgYXMgcGVyIHczYyBncm91cGluZ3MKCSAqIFJldHVybnM6ICAtCgkgKiBJbnB1dHM6ICAgc3RyaW5nOnNUeXBlCgkgKi8KCV9mbkV2ZW50VHlwZUdyb3VwOiBmdW5jdGlvbiAoIHNUeXBlICkKCXsKCQlzd2l0Y2ggKCBzVHlwZSApCgkJewoJCQljYXNlICdjbGljayc6CgkJCWNhc2UgJ2RibGNsaWNrJzoKCQkJY2FzZSAnbW91c2Vkb3duJzoKCQkJY2FzZSAnbW91c2Vtb3ZlJzoKCQkJY2FzZSAnbW91c2VvdXQnOgoJCQljYXNlICdtb3VzZW92ZXInOgoJCQljYXNlICdtb3VzZXVwJzoKCQkJCXJldHVybiAnbW91c2UnOwoJCQkKCQkJY2FzZSAnY2hhbmdlJzoKCQkJY2FzZSAnZm9jdXMnOgoJCQljYXNlICdibHVyJzoKCQkJY2FzZSAnc2VsZWN0JzoKCQkJY2FzZSAnc3VibWl0JzoKCQkJCXJldHVybiAnaHRtbCc7CgkJCQkKCQkJY2FzZSAna2V5ZG93bic6CgkJCWNhc2UgJ2tleXByZXNzJzoKCQkJY2FzZSAna2V5dXAnOgoJCQljYXNlICdsb2FkJzoKCQkJY2FzZSAndW5sb2FkJzoKCQkJCXJldHVybiAndWknOwoJCQkKCQkJZGVmYXVsdDoKCQkJCXJldHVybiAnY3VzdG9tJzsKCQl9Cgl9Cn0KCgp2YXIgb1Nlc3Npb24gPSB7CgluVGFibGU6IG51bGwsCgkKCWZuQ2FjaGU6IGZ1bmN0aW9uICgpCgl7CgkJdGhpcy5uVGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVtbycpLmNsb25lTm9kZSh0cnVlKTsKCX0sCgkKCWZuUmVzdG9yZTogZnVuY3Rpb24gKCkKCXsKCQl3aGlsZSggJC5mbi5kYXRhVGFibGVTZXR0aW5ncy5sZW5ndGggPiAwICkKCQl7CgkJCXRyeSB7CgkJCQkkLmZuLmRhdGFUYWJsZVNldHRpbmdzWzBdLm9JbnN0YW5jZS5mbkRlc3Ryb3koKTsKCQkJfSBjYXRjaCAoZSkgewoJCQkJJC5mbi5kYXRhVGFibGVTZXR0aW5ncy5zcGxpY2UoIDAsIDEgKTsKCQkJfQoJCX0KCQkvLyQuZm4uZGF0YVRhYmxlU2V0dGluZ3Muc3BsaWNlKCAwLCAkLmZuLmRhdGFUYWJsZVNldHRpbmdzLmxlbmd0aCApOwoJCXZhciBuRGVtbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZW1vJyk7CgkJbkRlbW8uaW5uZXJIVE1MID0gIiI7CgkJZm9yICggdmFyIGk9MCwgaUxlbj10aGlzLm5UYWJsZS5jaGlsZE5vZGVzLmxlbmd0aCA7IGk8aUxlbiA7IGkrKyApCgkJewoJCQluRGVtby5hcHBlbmRDaGlsZCggdGhpcy5uVGFibGUuY2hpbGROb2Rlc1swXSApOwoJCX0KCQl0aGlzLmZuQ2FjaGUoKTsKCX0KfQoKJChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHsKCW9TZXNzaW9uLmZuQ2FjaGUoKTsKfSApOwo=",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 20:06:09 GMT",
                    "Content-Length": "8687",
                    "Date": "Thu, 06 Nov 2014 20:06:10 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}