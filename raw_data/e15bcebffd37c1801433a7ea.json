{
    "url": "http://localhost:9999/basisjs/basis-templates/basis-templates.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.href</b> and written to <b>the 'setAttribute()' function of a DOM element</b> via the following statement:<ul><li>baseEl.setAttribute(\"href\", location.href);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/basisjs/basis-templates/basis-templates.js",
                "path": "/basisjs/basis-templates/basis-templates.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9iYXNpc2pzL2Jhc2lzLXRlbXBsYXRlcy9iYXNpcy10ZW1wbGF0ZXMuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMjA4OTAyDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpEYXRlOiBUaHUsIDA2IE5vdiAyMDE0IDEyOjExOjE1IEdNVA0KTGFzdC1Nb2RpZmllZDogVGh1LCAwNiBOb3YgMjAxNCAxMjoxMToxMiBHTVQNCg0KLy8gcmVzb3VyY2VzICg3KToKLy8gIFtmdW5jdGlvbl0gdGVtcGxhdGVzLmpzIC0+IDAuanMKLy8gIFtmdW5jdGlvbl0gLi4vLi4vc3JjL2Jhc2lzL3RlbXBsYXRlL2h0bWwuanMgLT4gMS5qcwovLyAgW2Z1bmN0aW9uXSAuLi8uLi9zcmMvYmFzaXMvZG9tL2V2ZW50LmpzIC0+IDIuanMKLy8gIFtmdW5jdGlvbl0gLi4vLi4vc3JjL2Jhc2lzL2wxMG4uanMgLT4gMy5qcwovLyAgW2Z1bmN0aW9uXSAuLi8uLi9zcmMvYmFzaXMvZXZlbnQuanMgLT4gNC5qcwovLyAgW2Z1bmN0aW9uXSAuLi8uLi9zcmMvYmFzaXMvdGVtcGxhdGUuanMgLT4gNS5qcwovLyAgW2Z1bmN0aW9uXSAuLi8uLi9zcmMvYmFzaXMvdGVtcGxhdGUvaHRtbGZnZW4uanMgLT4gNi5qcwovLwovLyBmaWxlbGlzdCAoMSk6IAovLyAgIHRlbXBsYXRlcy5qcwooZnVuY3Rpb24oKXsKInVzZSBzdHJpY3QiOwoKdmFyIF9fbmFtZXNwYWNlX21hcF9fID0geyIwLmpzIjoidGVtcGxhdGVzIiwiMS5qcyI6ImJhc2lzLnRlbXBsYXRlLmh0bWwiLCIyLmpzIjoiYmFzaXMuZG9tLmV2ZW50IiwiMy5qcyI6ImJhc2lzLmwxMG4iLCI0LmpzIjoiYmFzaXMuZXZlbnQiLCI1LmpzIjoiYmFzaXMudGVtcGxhdGUiLCI2LmpzIjoiYmFzaXMudGVtcGxhdGUuaHRtbGZnZW4ifTsKdmFyIHRlbXBsYXRlczsKCnZhciBfX3Jlc291cmNlc19fID0gewogICIwLmpzIjogZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlLCBiYXNpcywgZ2xvYmFsLCBfX2ZpbGVuYW1lLCBfX2Rpcm5hbWUsIHJlcXVpcmUsIHJlc291cmNlKSB7CiAgICBiYXNpcy5yZXF1aXJlKCIuLzEuanMiKTsKICAgIHZhciBzcmNNYXAgPSBbXTsKICAgIHZhciB0bXBsTWFwID0gW107CiAgICBmdW5jdGlvbiB0ZW1wbGF0ZVdyYXBwZXIoc3JjKSB7CiAgICAgIHZhciBpbmRleCA9IHNyY01hcC5pbmRleE9mKHNyYyk7CiAgICAgIGlmIChpbmRleCAhPSAtMSkgcmV0dXJuIHRtcGxNYXBbaW5kZXhdOwogICAgICB2YXIgdGVtcGxhdGUgPSBuZXcgYmFzaXMudGVtcGxhdGUuaHRtbC5UZW1wbGF0ZShzcmMpOwogICAgICBzcmNNYXAucHVzaChzcmMpOwogICAgICB0bXBsTWFwLnB1c2godGVtcGxhdGUpOwogICAgICByZXR1cm4gdGVtcGxhdGU7CiAgICB9CiAgICBnbG9iYWxbImJ0Il0gPSBtb2R1bGUuZXhwb3J0cyA9IGJhc2lzLm9iamVjdC5leHRlbmQodGVtcGxhdGVXcmFwcGVyLCB7CiAgICAgIGluaXQ6IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICAgIGlmICghY29uZmlnKSByZXR1cm4gdGhpczsKICAgICAgICBpZiAoY29uZmlnLm5vQ29uZmxpY3QpIHsKICAgICAgICAgIGRlbGV0ZSB3aW5kb3cuYnQ7CiAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uKHRtcGwpIHsKICAgICAgICB2YXIgdGVtcGxhdGUgPSBiYXNpcy50ZW1wbGF0ZS5yZXNvbHZlVGVtcGxhdGVCeUlkKHRtcGwudGVtcGxhdGVJZF8pOwogICAgICAgIGlmICghdGVtcGxhdGUpIHsKICAgICAgICAgIGJhc2lzLmRldi53YXJuKCJUZW1wbGF0ZSBpcyBub3QgcmVzb2x2ZWQgZm9yICIsIHRtcGwpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0ZW1wbGF0ZS5jbGVhckluc3RhbmNlKHRtcGwpOwogICAgICB9LAogICAgICB0ZW1wbGF0ZTogdGVtcGxhdGVXcmFwcGVyCiAgICB9KTsKICB9LAogICIxLmpzIjogZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlLCBiYXNpcywgZ2xvYmFsLCBfX2ZpbGVuYW1lLCBfX2Rpcm5hbWUsIHJlcXVpcmUsIHJlc291cmNlKSB7CiAgICBiYXNpcy5yZXF1aXJlKCIuLzIuanMiKTsKICAgIGJhc2lzLnJlcXVpcmUoIi4vMy5qcyIpOwogICAgYmFzaXMucmVxdWlyZSgiLi81LmpzIik7CiAgICBiYXNpcy5yZXF1aXJlKCIuLzYuanMiKTsKICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLnBhdGg7CiAgICB2YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7CiAgICB2YXIgZG9tRXZlbnQgPSBiYXNpcy5kb20uZXZlbnQ7CiAgICB2YXIgYXJyYXlGcm9tID0gYmFzaXMuYXJyYXkuZnJvbTsKICAgIHZhciBjYW1lbGl6ZSA9IGJhc2lzLnN0cmluZy5jYW1lbGl6ZTsKICAgIHZhciBsMTBuVG9rZW4gPSBiYXNpcy5sMTBuLnRva2VuOwogICAgdmFyIGdldEZ1bmN0aW9ucyA9IGJhc2lzLnRlbXBsYXRlLmh0bWxmZ2VuLmdldEZ1bmN0aW9uczsKICAgIHZhciBUZW1wbGF0ZVN3aXRjaENvbmZpZyA9IGJhc2lzLnRlbXBsYXRlLlRlbXBsYXRlU3dpdGNoQ29uZmlnOwogICAgdmFyIFRlbXBsYXRlU3dpdGNoZXIgPSBiYXNpcy50ZW1wbGF0ZS5UZW1wbGF0ZVN3aXRjaGVyOwogICAgdmFyIFRlbXBsYXRlID0gYmFzaXMudGVtcGxhdGUuVGVtcGxhdGU7CiAgICB2YXIgVFlQRV9FTEVNRU5UID0gYmFzaXMudGVtcGxhdGUuVFlQRV9FTEVNRU5UOwogICAgdmFyIFRZUEVfQVRUUklCVVRFID0gYmFzaXMudGVtcGxhdGUuVFlQRV9BVFRSSUJVVEU7CiAgICB2YXIgVFlQRV9URVhUID0gYmFzaXMudGVtcGxhdGUuVFlQRV9URVhUOwogICAgdmFyIFRZUEVfQ09NTUVOVCA9IGJhc2lzLnRlbXBsYXRlLlRZUEVfQ09NTUVOVDsKICAgIHZhciBUT0tFTl9UWVBFID0gYmFzaXMudGVtcGxhdGUuVE9LRU5fVFlQRTsKICAgIHZhciBUT0tFTl9CSU5ESU5HUyA9IGJhc2lzLnRlbXBsYXRlLlRPS0VOX0JJTkRJTkdTOwogICAgdmFyIFRPS0VOX1JFRlMgPSBiYXNpcy50ZW1wbGF0ZS5UT0tFTl9SRUZTOwogICAgdmFyIEFUVFJfTkFNRSA9IGJhc2lzLnRlbXBsYXRlLkFUVFJfTkFNRTsKICAgIHZhciBBVFRSX1ZBTFVFID0gYmFzaXMudGVtcGxhdGUuQVRUUl9WQUxVRTsKICAgIHZhciBBVFRSX05BTUVfQllfVFlQRSA9IGJhc2lzLnRlbXBsYXRlLkFUVFJfTkFNRV9CWV9UWVBFOwogICAgdmFyIEVMRU1FTlRfTkFNRSA9IGJhc2lzLnRlbXBsYXRlLkVMRU1FTlRfTkFNRTsKICAgIHZhciBURVhUX1ZBTFVFID0gYmFzaXMudGVtcGxhdGUuVEVYVF9WQUxVRTsKICAgIHZhciBDT01NRU5UX1ZBTFVFID0gYmFzaXMudGVtcGxhdGUuQ09NTUVOVF9WQUxVRTsKICAgIHZhciBldmVudEF0dHIgPSAvXmV2ZW50LSguKykrLzsKICAgIHZhciBiYXNpc1RlbXBsYXRlSWRNYXJrZXIgPSAiYmFzaXNUZW1wbGF0ZUlkXyIgKyBiYXNpcy5nZW5VSUQoKTsKICAgIHZhciB0bXBsRXZlbnRMaXN0ZW5lcnMgPSB7fTsKICAgIHZhciB0ZW1wbGF0ZXMgPSB7fTsKICAgIHZhciBuYW1lc3BhY2VVUkkgPSB7CiAgICAgIHN2ZzogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgfTsKICAgIHZhciBhZnRlckV2ZW50QWN0aW9uID0ge307CiAgICB2YXIgaW5zaWRlRWxlbWVudEV2ZW50ID0ge307CiAgICB2YXIgTU9VU0VfRU5URVJfTEVBVkVfU1VQUE9SVCA9ICJvbm1vdXNlZW50ZXIiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICAgIHZhciBDQVBUVVJFX0ZBTExCQUNLID0gIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgJiYgIl9fYmFzaXNUZW1wbGF0ZSIgKyBwYXJzZUludCgxZTkgKiBNYXRoLnJhbmRvbSgpKTsKICAgIGlmIChDQVBUVVJFX0ZBTExCQUNLKSBnbG9iYWxbQ0FQVFVSRV9GQUxMQkFDS10gPSBmdW5jdGlvbihldmVudE5hbWUsIGV2ZW50KSB7CiAgICAgIGRvbUV2ZW50LmZpcmVFdmVudChkb2N1bWVudCwgZXZlbnROYW1lKTsKICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSB0cnVlOwogICAgICB2YXIgbGlzdGVuZXIgPSB0bXBsRXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXTsKICAgICAgaWYgKGxpc3RlbmVyKSBsaXN0ZW5lcihuZXcgZG9tRXZlbnQuRXZlbnQoZXZlbnQpKTsKICAgIH07CiAgICB2YXIgQ0xPTkVfTk9STUFMSVpBVElPTl9URVhUX0JVRyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJhIikpOwogICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJhIikpOwogICAgICByZXR1cm4gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSkuY2hpbGROb2Rlcy5sZW5ndGggPT0gMTsKICAgIH0oKTsKICAgIHZhciBTRVRfQ0xBU1NfQVRUUklCVVRFX0JVRyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgiY2xhc3MiLCAiYSIpOwogICAgICByZXR1cm4gIWVsZW1lbnQuY2xhc3NOYW1lOwogICAgfSgpOwogICAgdmFyIFNFVF9TVFlMRV9BVFRSSUJVVEVfQlVHID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCJzdHlsZSIsICJwb3NpdGlvbjphYnNvbHV0ZSIpOwogICAgICByZXR1cm4gZWxlbWVudC5zdHlsZS5wb3NpdGlvbiAhPSAiYWJzb2x1dGUiOwogICAgfSgpOwogICAgdmFyIElTX1NFVF9TVFlMRV9TQUZFID0gISFmdW5jdGlvbigpIHsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmNvbG9yID0gIngiOwogICAgICB9IGNhdGNoIChlKSB7fQogICAgfSgpOwogICAgaWYgKHR5cGVvZiBOb2RlICE9ICJ1bmRlZmluZWQiICYmICFOb2RlLnByb3RvdHlwZS5jb250YWlucykgTm9kZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbihjaGlsZCkgewogICAgICByZXR1cm4gISEodGhpcy5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihjaGlsZCkgJiAxNik7CiAgICB9OwogICAgdmFyIGwxMG5UZW1wbGF0ZXMgPSB7fTsKICAgIGZ1bmN0aW9uIGdldEwxMG5UZW1wbGF0ZSh0b2tlbikgewogICAgICB2YXIgdGVtcGxhdGUgPSBiYXNpcy50ZW1wbGF0ZS5nZXRMMTBuVGVtcGxhdGUodG9rZW4pOwogICAgICB2YXIgaWQgPSB0ZW1wbGF0ZS50ZW1wbGF0ZUlkOwogICAgICB2YXIgaHRtbFRlbXBsYXRlID0gbDEwblRlbXBsYXRlc1tpZF07CiAgICAgIGlmICghaHRtbFRlbXBsYXRlKSBodG1sVGVtcGxhdGUgPSBsMTBuVGVtcGxhdGVzW2lkXSA9IG5ldyBIdG1sVGVtcGxhdGUodGVtcGxhdGUuc291cmNlKTsKICAgICAgcmV0dXJuIGh0bWxUZW1wbGF0ZTsKICAgIH0KICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50SGFuZGxlcihhdHRyTmFtZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICBpZiAoZXZlbnQudHlwZSA9PSAiY2xpY2siICYmIGV2ZW50LndoaWNoID09IDMpIHJldHVybjsKICAgICAgICB2YXIgYnViYmxlID0gaW5zaWRlRWxlbWVudEV2ZW50W2V2ZW50LnR5cGVdIHx8IGV2ZW50LnR5cGUgIT0gIm1vdXNlZW50ZXIiICYmIGV2ZW50LnR5cGUgIT0gIm1vdXNlbGVhdmUiOwogICAgICAgIHZhciBhdHRyQ3Vyc29yID0gZXZlbnQuc2VuZGVyOwogICAgICAgIHZhciBhdHRyOwogICAgICAgIHdoaWxlIChhdHRyQ3Vyc29yKSB7CiAgICAgICAgICBhdHRyID0gYXR0ckN1cnNvci5nZXRBdHRyaWJ1dGUgJiYgYXR0ckN1cnNvci5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpOwogICAgICAgICAgaWYgKCFidWJibGUgfHwgdHlwZW9mIGF0dHIgPT0gInN0cmluZyIpIGJyZWFrOwogICAgICAgICAgYXR0ckN1cnNvciA9IGF0dHJDdXJzb3IucGFyZW50Tm9kZTsKICAgICAgICB9CiAgICAgICAgaWYgKHR5cGVvZiBhdHRyID09ICJzdHJpbmciKSB7CiAgICAgICAgICB2YXIgY3Vyc29yID0gYXR0ckN1cnNvcjsKICAgICAgICAgIHZhciBhY3Rpb25UYXJnZXQgPSBjdXJzb3I7CiAgICAgICAgICB2YXIgcmVmSWQ7CiAgICAgICAgICB2YXIgdG1wbFJlZjsKICAgICAgICAgIGlmIChpbnNpZGVFbGVtZW50RXZlbnRbZXZlbnQudHlwZV0pIHsKICAgICAgICAgICAgdmFyIHJlbFRhcmdldCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7CiAgICAgICAgICAgIGlmIChyZWxUYXJnZXQgJiYgKGN1cnNvciA9PT0gcmVsVGFyZ2V0IHx8IGN1cnNvci5jb250YWlucyhyZWxUYXJnZXQpKSkgY3Vyc29yID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIHdoaWxlIChjdXJzb3IpIHsKICAgICAgICAgICAgcmVmSWQgPSBjdXJzb3JbYmFzaXNUZW1wbGF0ZUlkTWFya2VyXTsKICAgICAgICAgICAgaWYgKHR5cGVvZiByZWZJZCA9PSAibnVtYmVyIikgewogICAgICAgICAgICAgIGlmICh0bXBsUmVmID0gcmVzb2x2ZUluc3RhbmNlQnlJZChyZWZJZCkpIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGN1cnNvciA9IGN1cnNvci5wYXJlbnROb2RlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRtcGxSZWYgJiYgdG1wbFJlZi5hY3Rpb24pIHsKICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBhdHRyLnRyaW0oKS5zcGxpdCgvXHMrLyk7CiAgICAgICAgICAgIGV2ZW50LmFjdGlvblRhcmdldCA9IGFjdGlvblRhcmdldDsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGFjdGlvbk5hbWU7IGFjdGlvbk5hbWUgPSBhY3Rpb25zW2krK107ICkgc3dpdGNoIChhY3Rpb25OYW1lKSB7CiAgICAgICAgICAgICAgY2FzZSAicHJldmVudC1kZWZhdWx0IjoKICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlICJzdG9wLXByb3BhZ2F0aW9uIjoKICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHRtcGxSZWYuYWN0aW9uLmNhbGwodG1wbFJlZi5jb250ZXh0LCBhY3Rpb25OYW1lLCBldmVudCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKGV2ZW50LnR5cGUgaW4gYWZ0ZXJFdmVudEFjdGlvbikgYWZ0ZXJFdmVudEFjdGlvbltldmVudC50eXBlXShldmVudCwgYXR0ckN1cnNvcik7CiAgICAgIH07CiAgICB9CiAgICB2YXIgYnVpbGRIdG1sID0gZnVuY3Rpb24odG9rZW5zLCBwYXJlbnQpIHsKICAgICAgZnVuY3Rpb24gZW11bGF0ZUV2ZW50KG9yaWdFdmVudE5hbWUsIGVtdWxFdmVudE5hbWUpIHsKICAgICAgICByZWdFdmVudEhhbmRsZXIoZW11bEV2ZW50TmFtZSk7CiAgICAgICAgaW5zaWRlRWxlbWVudEV2ZW50W29yaWdFdmVudE5hbWVdID0gdHJ1ZTsKICAgICAgICBhZnRlckV2ZW50QWN0aW9uW2VtdWxFdmVudE5hbWVdID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgIGV2ZW50ID0gbmV3IGRvbUV2ZW50LkV2ZW50KGV2ZW50KTsKICAgICAgICAgIGV2ZW50LnR5cGUgPSBvcmlnRXZlbnROYW1lOwogICAgICAgICAgdG1wbEV2ZW50TGlzdGVuZXJzW29yaWdFdmVudE5hbWVdKGV2ZW50KTsKICAgICAgICB9OwogICAgICAgIGFmdGVyRXZlbnRBY3Rpb25bb3JpZ0V2ZW50TmFtZV0gPSBmdW5jdGlvbihldmVudCwgY3Vyc29yKSB7CiAgICAgICAgICBjdXJzb3IgPSBjdXJzb3IgJiYgY3Vyc29yLnBhcmVudE5vZGU7CiAgICAgICAgICBpZiAoY3Vyc29yKSB7CiAgICAgICAgICAgIGV2ZW50ID0gbmV3IGRvbUV2ZW50LkV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgZXZlbnQudHlwZSA9IG9yaWdFdmVudE5hbWU7CiAgICAgICAgICAgIGV2ZW50LnNlbmRlciA9IGN1cnNvcjsKICAgICAgICAgICAgdG1wbEV2ZW50TGlzdGVuZXJzW29yaWdFdmVudE5hbWVdKGV2ZW50KTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHJlZ0V2ZW50SGFuZGxlcihldmVudE5hbWUpIHsKICAgICAgICBpZiAoIXRtcGxFdmVudExpc3RlbmVyc1tldmVudE5hbWVdKSB7CiAgICAgICAgICB0bXBsRXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSA9IGNyZWF0ZUV2ZW50SGFuZGxlcigiZXZlbnQtIiArIGV2ZW50TmFtZSk7CiAgICAgICAgICBpZiAoIUNBUFRVUkVfRkFMTEJBQ0spIHsKICAgICAgICAgICAgaWYgKCFNT1VTRV9FTlRFUl9MRUFWRV9TVVBQT1JUICYmIGV2ZW50TmFtZSA9PSAibW91c2VlbnRlciIpIHJldHVybiBlbXVsYXRlRXZlbnQoZXZlbnROYW1lLCAibW91c2VvdmVyIik7CiAgICAgICAgICAgIGlmICghTU9VU0VfRU5URVJfTEVBVkVfU1VQUE9SVCAmJiBldmVudE5hbWUgPT0gIm1vdXNlbGVhdmUiKSByZXR1cm4gZW11bGF0ZUV2ZW50KGV2ZW50TmFtZSwgIm1vdXNlb3V0Iik7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBuYW1lcyA9IGRvbUV2ZW50LmJyb3dzZXJFdmVudHMoZXZlbnROYW1lKSwgYnJvd3NlckV2ZW50TmFtZTsgYnJvd3NlckV2ZW50TmFtZSA9IG5hbWVzW2ldOyBpKyspIGRvbUV2ZW50LmFkZEdsb2JhbEhhbmRsZXIoYnJvd3NlckV2ZW50TmFtZSwgdG1wbEV2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBmdW5jdGlvbiBzZXRFdmVudEF0dHJpYnV0ZShldmVudE5hbWUsIGFjdGlvbnMpIHsKICAgICAgICByZWdFdmVudEhhbmRsZXIoZXZlbnROYW1lKTsKICAgICAgICBpZiAoQ0FQVFVSRV9GQUxMQkFDSykgcmVzdWx0LnNldEF0dHJpYnV0ZSgib24iICsgZXZlbnROYW1lLCBDQVBUVVJFX0ZBTExCQUNLICsgJygiJyArIGV2ZW50TmFtZSArICciLGV2ZW50KScpOwogICAgICAgIHJlc3VsdC5zZXRBdHRyaWJ1dGUoImV2ZW50LSIgKyBldmVudE5hbWUsIGFjdGlvbnMpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgewogICAgICAgIGlmIChTRVRfQ0xBU1NfQVRUUklCVVRFX0JVRyAmJiBuYW1lID09ICJjbGFzcyIpIG5hbWUgPSAiY2xhc3NOYW1lIjsKICAgICAgICBpZiAoU0VUX1NUWUxFX0FUVFJJQlVURV9CVUcgJiYgbmFtZSA9PSAic3R5bGUiKSByZXR1cm4gcmVzdWx0LnN0eWxlLmNzc1RleHQgPSB2YWx1ZTsKICAgICAgICByZXN1bHQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTsKICAgICAgfQogICAgICB2YXIgcmVzdWx0ID0gcGFyZW50IHx8IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgZm9yICh2YXIgaSA9IHBhcmVudCA/IDQgOiAwLCB0b2tlbjsgdG9rZW4gPSB0b2tlbnNbaV07IGkrKykgewogICAgICAgIHN3aXRjaCAodG9rZW5bVE9LRU5fVFlQRV0pIHsKICAgICAgICAgIGNhc2UgVFlQRV9FTEVNRU5UOgogICAgICAgICAgICB2YXIgdGFnTmFtZSA9IHRva2VuW0VMRU1FTlRfTkFNRV07CiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHRhZ05hbWUuc3BsaXQoLzovKTsKICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBwYXJ0cy5sZW5ndGggPiAxID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSVtwYXJ0c1swXV0sIHRhZ05hbWUpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTsKICAgICAgICAgICAgYnVpbGRIdG1sKHRva2VuLCBlbGVtZW50KTsKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZENoaWxkKGVsZW1lbnQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgVFlQRV9BVFRSSUJVVEU6CiAgICAgICAgICAgIHZhciBhdHRyTmFtZSA9IHRva2VuW0FUVFJfTkFNRV07CiAgICAgICAgICAgIHZhciBhdHRyVmFsdWUgPSB0b2tlbltBVFRSX1ZBTFVFXTsKICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGF0dHJOYW1lLnJlcGxhY2UoL15ldmVudC0vLCAiIik7CiAgICAgICAgICAgIGlmIChldmVudE5hbWUgIT0gYXR0ck5hbWUpIHsKICAgICAgICAgICAgICBzZXRFdmVudEF0dHJpYnV0ZShldmVudE5hbWUsIGF0dHJWYWx1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaWYgKGF0dHJOYW1lICE9ICJjbGFzcyIgJiYgYXR0ck5hbWUgIT0gInN0eWxlIiA/ICF0b2tlbltUT0tFTl9CSU5ESU5HU10gOiBhdHRyVmFsdWUpIHNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0clZhbHVlIHx8ICIiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgdmFyIGF0dHJWYWx1ZSA9IHRva2VuW0FUVFJfVkFMVUUgLSAxXTsKICAgICAgICAgICAgaWYgKGF0dHJWYWx1ZSkgc2V0QXR0cmlidXRlKEFUVFJfTkFNRV9CWV9UWVBFW3Rva2VuW1RPS0VOX1RZUEVdXSwgYXR0clZhbHVlKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIHNldEV2ZW50QXR0cmlidXRlKHRva2VuWzFdLCB0b2tlblsyXSB8fCB0b2tlblsxXSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBUWVBFX0NPTU1FTlQ6CiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVDb21tZW50KHRva2VuW0NPTU1FTlRfVkFMVUVdIHx8ICh0b2tlbltUT0tFTl9SRUZTXSA/ICJ7IiArIHRva2VuW1RPS0VOX1JFRlNdLmpvaW4oInwiKSArICJ9IiA6ICIiKSkpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgVFlQRV9URVhUOgogICAgICAgICAgICBpZiAoQ0xPTkVfTk9STUFMSVpBVElPTl9URVhUX0JVRyAmJiBpICYmIHRva2Vuc1tpIC0gMV1bVE9LRU5fVFlQRV0gPT0gVFlQRV9URVhUKSByZXN1bHQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgiIikpOwogICAgICAgICAgICByZXN1bHQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodG9rZW5bVEVYVF9WQUxVRV0gfHwgKHRva2VuW1RPS0VOX1JFRlNdID8gInsiICsgdG9rZW5bVE9LRU5fUkVGU10uam9pbigifCIpICsgIn0iIDogIiIpIHx8ICh0b2tlbltUT0tFTl9CSU5ESU5HU10gPyAieyIgKyB0b2tlbltUT0tFTl9CSU5ESU5HU10gKyAifSIgOiAiIikpKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICghcGFyZW50ICYmIHRva2Vucy5sZW5ndGggPT0gMSkgcmVzdWx0ID0gcmVzdWx0LmZpcnN0Q2hpbGQ7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogICAgZnVuY3Rpb24gcmVzb2x2ZVRlbXBsYXRlQnlJZChyZWZJZCkgewogICAgICB2YXIgdGVtcGxhdGVJZCA9IHJlZklkICYgNDA5NTsKICAgICAgdmFyIG9iamVjdCA9IHRlbXBsYXRlc1t0ZW1wbGF0ZUlkXTsKICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QudGVtcGxhdGU7CiAgICB9CiAgICBmdW5jdGlvbiByZXNvbHZlSW5zdGFuY2VCeUlkKHJlZklkKSB7CiAgICAgIHZhciB0ZW1wbGF0ZUlkID0gcmVmSWQgJiA0MDk1OwogICAgICB2YXIgaW5zdGFuY2VJZCA9IHJlZklkID4+IDEyOwogICAgICB2YXIgb2JqZWN0ID0gdGVtcGxhdGVzW3RlbXBsYXRlSWRdOwogICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5pbnN0YW5jZXNbaW5zdGFuY2VJZF07CiAgICB9CiAgICBmdW5jdGlvbiByZXNvbHZlT2JqZWN0QnlJZChyZWZJZCkgewogICAgICB2YXIgdGVtcGxhdGVSZWYgPSByZXNvbHZlSW5zdGFuY2VCeUlkKHJlZklkKTsKICAgICAgcmV0dXJuIHRlbXBsYXRlUmVmICYmIHRlbXBsYXRlUmVmLmNvbnRleHQ7CiAgICB9CiAgICBmdW5jdGlvbiByZXNvbHZlVG1wbEJ5SWQocmVmSWQpIHsKICAgICAgdmFyIHRlbXBsYXRlUmVmID0gcmVzb2x2ZUluc3RhbmNlQnlJZChyZWZJZCk7CiAgICAgIHJldHVybiB0ZW1wbGF0ZVJlZiAmJiB0ZW1wbGF0ZVJlZi50bXBsOwogICAgfQogICAgZnVuY3Rpb24gZ2V0RGVidWdJbmZvQnlJZChyZWZJZCkgewogICAgICB2YXIgdGVtcGxhdGVSZWYgPSByZXNvbHZlSW5zdGFuY2VCeUlkKHJlZklkKTsKICAgICAgcmV0dXJuIHRlbXBsYXRlUmVmICYmIHRlbXBsYXRlUmVmLmRlYnVnICYmIHRlbXBsYXRlUmVmLmRlYnVnKCk7CiAgICB9CiAgICB2YXIgYnVpbGRlciA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgV0hJVEVTUEFDRSA9IC9ccysvOwogICAgICB2YXIgVzNDX0RPTV9OT0RFX1NVUFBPUlRFRCA9IHR5cGVvZiBOb2RlID09ICJmdW5jdGlvbiIgJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiBOb2RlOwogICAgICB2YXIgQ0xBU1NMSVNUX1NVUFBPUlRFRCA9IGdsb2JhbC5ET01Ub2tlbkxpc3QgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdCBpbnN0YW5jZW9mIGdsb2JhbC5ET01Ub2tlbkxpc3Q7CiAgICAgIHZhciBiaW5kX25vZGUgPSBXM0NfRE9NX05PREVfU1VQUE9SVEVEID8gZnVuY3Rpb24oZG9tUmVmLCBvbGROb2RlLCBuZXdWYWx1ZSkgewogICAgICAgIHZhciBuZXdOb2RlID0gbmV3VmFsdWUgJiYgbmV3VmFsdWUgaW5zdGFuY2VvZiBOb2RlID8gbmV3VmFsdWUgOiBkb21SZWY7CiAgICAgICAgaWYgKG5ld05vZGUgIT09IG9sZE5vZGUpIG9sZE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgb2xkTm9kZSk7CiAgICAgICAgcmV0dXJuIG5ld05vZGU7CiAgICAgIH0gOiBmdW5jdGlvbihkb21SZWYsIG9sZE5vZGUsIG5ld1ZhbHVlKSB7CiAgICAgICAgdmFyIG5ld05vZGUgPSBuZXdWYWx1ZSAmJiB0eXBlb2YgbmV3VmFsdWUgPT0gIm9iamVjdCIgPyBuZXdWYWx1ZSA6IGRvbVJlZjsKICAgICAgICBpZiAobmV3Tm9kZSAhPT0gb2xkTm9kZSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgb2xkTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdOb2RlLCBvbGROb2RlKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgbmV3Tm9kZSA9IGRvbVJlZjsKICAgICAgICAgICAgaWYgKG9sZE5vZGUgIT09IG5ld05vZGUpIG9sZE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgb2xkTm9kZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXdOb2RlOwogICAgICB9OwogICAgICB2YXIgYmluZF9lbGVtZW50ID0gZnVuY3Rpb24oZG9tUmVmLCBvbGROb2RlLCBuZXdWYWx1ZSkgewogICAgICAgIHZhciBuZXdOb2RlID0gYmluZF9ub2RlKGRvbVJlZiwgb2xkTm9kZSwgbmV3VmFsdWUpOwogICAgICAgIGlmIChuZXdOb2RlID09PSBkb21SZWYgJiYgdHlwZW9mIG5ld1ZhbHVlID09ICJzdHJpbmciKSBkb21SZWYuaW5uZXJIVE1MID0gbmV3VmFsdWU7CiAgICAgICAgcmV0dXJuIG5ld05vZGU7CiAgICAgIH07CiAgICAgIHZhciBiaW5kX2NvbW1lbnQgPSBiaW5kX25vZGU7CiAgICAgIHZhciBiaW5kX3RleHROb2RlID0gZnVuY3Rpb24oZG9tUmVmLCBvbGROb2RlLCBuZXdWYWx1ZSkgewogICAgICAgIHZhciBuZXdOb2RlID0gYmluZF9ub2RlKGRvbVJlZiwgb2xkTm9kZSwgbmV3VmFsdWUpOwogICAgICAgIGlmIChuZXdOb2RlID09PSBkb21SZWYpIGRvbVJlZi5ub2RlVmFsdWUgPSBuZXdWYWx1ZTsKICAgICAgICByZXR1cm4gbmV3Tm9kZTsKICAgICAgfTsKICAgICAgdmFyIGJpbmRfYXR0ckNsYXNzID0gQ0xBU1NMSVNUX1NVUFBPUlRFRCA/IGZ1bmN0aW9uKGRvbVJlZiwgb2xkQ2xhc3MsIG5ld1ZhbHVlLCBwcmVmaXgsIGFuaW0pIHsKICAgICAgICB2YXIgbmV3Q2xhc3MgPSBuZXdWYWx1ZSA/IHByZWZpeCArIG5ld1ZhbHVlIDogIiI7CiAgICAgICAgaWYgKG5ld0NsYXNzICE9IG9sZENsYXNzKSB7CiAgICAgICAgICBpZiAob2xkQ2xhc3MpIGRvbVJlZi5jbGFzc0xpc3QucmVtb3ZlKG9sZENsYXNzKTsKICAgICAgICAgIGlmIChuZXdDbGFzcykgewogICAgICAgICAgICBkb21SZWYuY2xhc3NMaXN0LmFkZChuZXdDbGFzcyk7CiAgICAgICAgICAgIGlmIChhbmltKSB7CiAgICAgICAgICAgICAgZG9tUmVmLmNsYXNzTGlzdC5hZGQobmV3Q2xhc3MgKyAiLWFuaW0iKTsKICAgICAgICAgICAgICBiYXNpcy5uZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGRvbVJlZi5jbGFzc0xpc3QucmVtb3ZlKG5ld0NsYXNzICsgIi1hbmltIik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ld0NsYXNzOwogICAgICB9IDogZnVuY3Rpb24oZG9tUmVmLCBvbGRDbGFzcywgbmV3VmFsdWUsIHByZWZpeCwgYW5pbSkgewogICAgICAgIHZhciBuZXdDbGFzcyA9IG5ld1ZhbHVlID8gcHJlZml4ICsgbmV3VmFsdWUgOiAiIjsKICAgICAgICBpZiAobmV3Q2xhc3MgIT0gb2xkQ2xhc3MpIHsKICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBkb21SZWYuY2xhc3NOYW1lOwogICAgICAgICAgdmFyIGNsYXNzTmFtZUlzT2JqZWN0ID0gdHlwZW9mIGNsYXNzTmFtZSAhPSAic3RyaW5nIjsKICAgICAgICAgIHZhciBjbGFzc0xpc3Q7CiAgICAgICAgICBpZiAoY2xhc3NOYW1lSXNPYmplY3QpIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5iYXNlVmFsOwogICAgICAgICAgY2xhc3NMaXN0ID0gY2xhc3NOYW1lLnNwbGl0KFdISVRFU1BBQ0UpOwogICAgICAgICAgaWYgKG9sZENsYXNzKSBiYXNpcy5hcnJheS5yZW1vdmUoY2xhc3NMaXN0LCBvbGRDbGFzcyk7CiAgICAgICAgICBpZiAobmV3Q2xhc3MpIHsKICAgICAgICAgICAgY2xhc3NMaXN0LnB1c2gobmV3Q2xhc3MpOwogICAgICAgICAgICBpZiAoYW5pbSkgewogICAgICAgICAgICAgIGJhc2lzLmFycmF5LmFkZChjbGFzc0xpc3QsIG5ld0NsYXNzICsgIi1hbmltIik7CiAgICAgICAgICAgICAgYmFzaXMubmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgY2xhc3NMaXN0ID0gKGNsYXNzTmFtZUlzT2JqZWN0ID8gZG9tUmVmLmNsYXNzTmFtZS5iYXNlVmFsIDogZG9tUmVmLmNsYXNzTmFtZSkuc3BsaXQoV0hJVEVTUEFDRSk7CiAgICAgICAgICAgICAgICBiYXNpcy5hcnJheS5yZW1vdmUoY2xhc3NMaXN0LCBuZXdDbGFzcyArICItYW5pbSIpOwogICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZUlzT2JqZWN0KSBkb21SZWYuY2xhc3NOYW1lLmJhc2VWYWwgPSBjbGFzc0xpc3Quam9pbigiICIpOyBlbHNlIGRvbVJlZi5jbGFzc05hbWUgPSBjbGFzc0xpc3Quam9pbigiICIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoY2xhc3NOYW1lSXNPYmplY3QpIGRvbVJlZi5jbGFzc05hbWUuYmFzZVZhbCA9IGNsYXNzTGlzdC5qb2luKCIgIik7IGVsc2UgZG9tUmVmLmNsYXNzTmFtZSA9IGNsYXNzTGlzdC5qb2luKCIgIik7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXdDbGFzczsKICAgICAgfTsKICAgICAgdmFyIGJpbmRfYXR0clN0eWxlID0gSVNfU0VUX1NUWUxFX1NBRkUgPyBmdW5jdGlvbihkb21SZWYsIHByb3BlcnR5TmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7CiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkgZG9tUmVmLnN0eWxlW2NhbWVsaXplKHByb3BlcnR5TmFtZSldID0gbmV3VmFsdWU7CiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlOwogICAgICB9IDogZnVuY3Rpb24oZG9tUmVmLCBwcm9wZXJ0eU5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkgewogICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGRvbVJlZi5zdHlsZVtjYW1lbGl6ZShwcm9wZXJ0eU5hbWUpXSA9IG5ld1ZhbHVlOwogICAgICAgICAgfSBjYXRjaCAoZSkge30KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlOwogICAgICB9OwogICAgICB2YXIgYmluZF9hdHRyID0gZnVuY3Rpb24oZG9tUmVmLCBhdHRyTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7CiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkgewogICAgICAgICAgaWYgKG5ld1ZhbHVlKSBkb21SZWYuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBuZXdWYWx1ZSk7IGVsc2UgZG9tUmVmLnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXdWYWx1ZTsKICAgICAgfTsKICAgICAgZnVuY3Rpb24gdXBkYXRlQXR0YWNoKCkgewogICAgICAgIHRoaXMuc2V0KHRoaXMubmFtZSwgdGhpcy52YWx1ZSk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKGJpbmRpbmdOYW1lLCB2YWx1ZSwgQXR0YWNoZXMpIHsKICAgICAgICB2YXIgYnJpZGdlID0gdmFsdWUgJiYgdmFsdWUuYmluZGluZ0JyaWRnZTsKICAgICAgICB2YXIgb2xkQXR0YWNoID0gdGhpcy5hdHRhY2hlcyAmJiB0aGlzLmF0dGFjaGVzW2JpbmRpbmdOYW1lXTsKICAgICAgICB2YXIgdG1wbCA9IG51bGw7CiAgICAgICAgaWYgKGJyaWRnZSB8fCBvbGRBdHRhY2gpIHsKICAgICAgICAgIGlmIChicmlkZ2UpIHsKICAgICAgICAgICAgaWYgKCFvbGRBdHRhY2ggfHwgdmFsdWUgIT09IG9sZEF0dGFjaC52YWx1ZSkgewogICAgICAgICAgICAgIGlmIChvbGRBdHRhY2gpIHsKICAgICAgICAgICAgICAgIGlmIChvbGRBdHRhY2gudG1wbCkgewogICAgICAgICAgICAgICAgICBvbGRBdHRhY2gudG1wbC5lbGVtZW50LnRvU3RyaW5nID0gbnVsbDsKICAgICAgICAgICAgICAgICAgZ2V0TDEwblRlbXBsYXRlKG9sZEF0dGFjaC52YWx1ZSkuY2xlYXJJbnN0YW5jZShvbGRBdHRhY2gudG1wbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBvbGRBdHRhY2gudmFsdWUuYmluZGluZ0JyaWRnZS5kZXRhY2gob2xkQXR0YWNoLnZhbHVlLCB1cGRhdGVBdHRhY2gsIG9sZEF0dGFjaCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh2YWx1ZS50eXBlID09ICJtYXJrdXAiICYmIHZhbHVlIGluc3RhbmNlb2YgYmFzaXMubDEwbi5Ub2tlbikgewogICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gZ2V0TDEwblRlbXBsYXRlKHZhbHVlKTsKICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0OwogICAgICAgICAgICAgICAgdmFyIGJpbmRpbmdzID0gdGhpcy5iaW5kaW5nczsKICAgICAgICAgICAgICAgIHZhciBiaW5kaW5nSW50ZXJmYWNlID0gdGhpcy5iaW5kaW5nSW50ZXJmYWNlOwogICAgICAgICAgICAgICAgdG1wbCA9IHRlbXBsYXRlLmNyZWF0ZUluc3RhbmNlKGNvbnRleHQsIG51bGwsIGZ1bmN0aW9uIG9uUmVidWlsZCgpIHsKICAgICAgICAgICAgICAgICAgdG1wbCA9IG5ld0F0dGFjaC50bXBsID0gdGVtcGxhdGUuY3JlYXRlSW5zdGFuY2UoY29udGV4dCwgbnVsbCwgb25SZWJ1aWxkLCBiaW5kaW5ncywgYmluZGluZ0ludGVyZmFjZSk7CiAgICAgICAgICAgICAgICAgIHRtcGwuZWxlbWVudC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS52YWx1ZTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgdXBkYXRlQXR0YWNoLmNhbGwobmV3QXR0YWNoKTsKICAgICAgICAgICAgICAgIH0sIGJpbmRpbmdzLCBiaW5kaW5nSW50ZXJmYWNlKTsKICAgICAgICAgICAgICAgIHRtcGwuZWxlbWVudC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudmFsdWU7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoIXRoaXMuYXR0YWNoZXMpIHRoaXMuYXR0YWNoZXMgPSBuZXcgQXR0YWNoZXM7CiAgICAgICAgICAgICAgdmFyIG5ld0F0dGFjaCA9IHRoaXMuYXR0YWNoZXNbYmluZGluZ05hbWVdID0gewogICAgICAgICAgICAgICAgbmFtZTogYmluZGluZ05hbWUsCiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgICAgICB0bXBsOiB0bXBsLAogICAgICAgICAgICAgICAgc2V0OiB0aGlzLnRtcGwuc2V0CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBicmlkZ2UuYXR0YWNoKHZhbHVlLCB1cGRhdGVBdHRhY2gsIG5ld0F0dGFjaCk7CiAgICAgICAgICAgIH0gZWxzZSB0bXBsID0gdmFsdWUgJiYgdmFsdWUudHlwZSA9PSAibWFya3VwIiA/IG9sZEF0dGFjaC50bXBsIDogbnVsbDsKICAgICAgICAgICAgaWYgKHRtcGwpIHJldHVybiB0bXBsLmVsZW1lbnQ7CiAgICAgICAgICAgIHZhbHVlID0gYnJpZGdlLmdldCh2YWx1ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAob2xkQXR0YWNoKSB7CiAgICAgICAgICAgICAgaWYgKG9sZEF0dGFjaC50bXBsKSB7CiAgICAgICAgICAgICAgICBvbGRBdHRhY2gudG1wbC5lbGVtZW50LnRvU3RyaW5nID0gbnVsbDsKICAgICAgICAgICAgICAgIGdldEwxMG5UZW1wbGF0ZShvbGRBdHRhY2gudmFsdWUpLmNsZWFySW5zdGFuY2Uob2xkQXR0YWNoLnRtcGwpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBvbGRBdHRhY2gudmFsdWUuYmluZGluZ0JyaWRnZS5kZXRhY2gob2xkQXR0YWNoLnZhbHVlLCB1cGRhdGVBdHRhY2gsIG9sZEF0dGFjaCk7CiAgICAgICAgICAgICAgdGhpcy5hdHRhY2hlc1tiaW5kaW5nTmFtZV0gPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfQogICAgICBmdW5jdGlvbiBjcmVhdGVCaW5kaW5nVXBkYXRlcihuYW1lcywgZ2V0dGVycykgewogICAgICAgIHZhciBuYW1lMSA9IG5hbWVzWzBdOwogICAgICAgIHZhciBuYW1lMiA9IG5hbWVzWzFdOwogICAgICAgIHZhciBnZXR0ZXIxID0gZ2V0dGVyc1tuYW1lMV07CiAgICAgICAgdmFyIGdldHRlcjIgPSBnZXR0ZXJzW25hbWUyXTsKICAgICAgICBzd2l0Y2ggKG5hbWVzLmxlbmd0aCkgewogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gYmluZGluZ1VwZGF0ZXIxKG9iamVjdCkgewogICAgICAgICAgICAgIHRoaXMobmFtZTEsIGdldHRlcjEob2JqZWN0KSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBiaW5kaW5nVXBkYXRlcjIob2JqZWN0KSB7CiAgICAgICAgICAgICAgdGhpcyhuYW1lMSwgZ2V0dGVyMShvYmplY3QpKTsKICAgICAgICAgICAgICB0aGlzKG5hbWUyLCBnZXR0ZXIyKG9iamVjdCkpOwogICAgICAgICAgICB9OwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdmFyIGdldHRlcnNfID0gbmFtZXMubWFwKGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgICAgICAgICByZXR1cm4gZ2V0dGVyc1tuYW1lXTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBiaW5kaW5nVXBkYXRlck4ob2JqZWN0KSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykgdGhpcyhuYW1lc1tpXSwgZ2V0dGVyc19baV0ob2JqZWN0KSk7CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9CiAgICAgIGZ1bmN0aW9uIG1ha2VIYW5kbGVyKGV2ZW50cywgZ2V0dGVycykgewogICAgICAgIGZvciAodmFyIG5hbWUgaW4gZXZlbnRzKSBldmVudHNbbmFtZV0gPSBjcmVhdGVCaW5kaW5nVXBkYXRlcihldmVudHNbbmFtZV0sIGdldHRlcnMpOwogICAgICAgIHJldHVybiBuYW1lID8gZXZlbnRzIDogbnVsbDsKICAgICAgfQogICAgICBmdW5jdGlvbiBjcmVhdGVCaW5kaW5nRnVuY3Rpb24oa2V5cykgewogICAgICAgIHZhciBiaW5kaW5nQ2FjaGUgPSB7fTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gZ2V0QmluZGluZyhiaW5kaW5ncywgb2JqLCBzZXQsIGJpbmRpbmdJbnRlcmZhY2UpIHsKICAgICAgICAgIGlmICghYmluZGluZ3MpIHJldHVybiB7fTsKICAgICAgICAgIHZhciBjYWNoZUlkID0gImJpbmRpbmdJZCIgaW4gYmluZGluZ3MgPyBiaW5kaW5ncy5iaW5kaW5nSWQgOiBudWxsOwogICAgICAgICAgaWYgKCFjYWNoZUlkKSBiYXNpcy5kZXYud2FybigiYmFzaXMudGVtcGxhdGUuVGVtcGxhdGUuZ2V0QmluZGluZzogYmluZGluZ3MgaGFzIG5vIGJpbmRpbmdJZCBwcm9wZXJ0eSwgY2FjaGUgaXMgbm90IHVzZWQiKTsKICAgICAgICAgIHZhciByZXN1bHQgPSBiaW5kaW5nQ2FjaGVbY2FjaGVJZF07CiAgICAgICAgICBpZiAoIXJlc3VsdCkgewogICAgICAgICAgICB2YXIgbmFtZXMgPSBbXTsKICAgICAgICAgICAgdmFyIGdldHRlcnMgPSB7fTsKICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHt9OwogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgYmluZGluZ05hbWU7IGJpbmRpbmdOYW1lID0ga2V5c1tpXTsgaSsrKSB7CiAgICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBiaW5kaW5nc1tiaW5kaW5nTmFtZV07CiAgICAgICAgICAgICAgdmFyIGdldHRlciA9IGJpbmRpbmcgJiYgYmluZGluZy5nZXR0ZXI7CiAgICAgICAgICAgICAgaWYgKGdldHRlcikgewogICAgICAgICAgICAgICAgZ2V0dGVyc1tiaW5kaW5nTmFtZV0gPSBnZXR0ZXI7CiAgICAgICAgICAgICAgICBuYW1lcy5wdXNoKGJpbmRpbmdOYW1lKTsKICAgICAgICAgICAgICAgIGlmIChiaW5kaW5nLmV2ZW50cykgewogICAgICAgICAgICAgICAgICB2YXIgZXZlbnRMaXN0ID0gU3RyaW5nKGJpbmRpbmcuZXZlbnRzKS50cmltKCkuc3BsaXQoL1xzK3xccyosXHMqLyk7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBldmVudE5hbWU7IGV2ZW50TmFtZSA9IGV2ZW50TGlzdFtqXTsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50c1tldmVudE5hbWVdKSBldmVudHNbZXZlbnROYW1lXS5wdXNoKGJpbmRpbmdOYW1lKTsgZWxzZSBldmVudHNbZXZlbnROYW1lXSA9IFsgYmluZGluZ05hbWUgXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXN1bHQgPSB7CiAgICAgICAgICAgICAgbmFtZXM6IG5hbWVzLAogICAgICAgICAgICAgIHN5bmM6IGNyZWF0ZUJpbmRpbmdVcGRhdGVyKG5hbWVzLCBnZXR0ZXJzKSwKICAgICAgICAgICAgICBoYW5kbGVyOiBtYWtlSGFuZGxlcihldmVudHMsIGdldHRlcnMpCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChjYWNoZUlkKSBiaW5kaW5nQ2FjaGVbY2FjaGVJZF0gPSByZXN1bHQ7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAob2JqICYmIHNldCkgcmVzdWx0LnN5bmMuY2FsbChzZXQsIG9iaik7CiAgICAgICAgICBpZiAoIWJpbmRpbmdJbnRlcmZhY2UpIHJldHVybjsKICAgICAgICAgIGlmIChyZXN1bHQuaGFuZGxlcikgYmluZGluZ0ludGVyZmFjZS5hdHRhY2gob2JqLCByZXN1bHQuaGFuZGxlciwgc2V0KTsKICAgICAgICAgIHJldHVybiByZXN1bHQuaGFuZGxlcjsKICAgICAgICB9OwogICAgICB9CiAgICAgIHZhciB0b29scyA9IHsKICAgICAgICBiaW5kX3RleHROb2RlOiBiaW5kX3RleHROb2RlLAogICAgICAgIGJpbmRfbm9kZTogYmluZF9ub2RlLAogICAgICAgIGJpbmRfZWxlbWVudDogYmluZF9lbGVtZW50LAogICAgICAgIGJpbmRfY29tbWVudDogYmluZF9jb21tZW50LAogICAgICAgIGJpbmRfYXR0cjogYmluZF9hdHRyLAogICAgICAgIGJpbmRfYXR0ckNsYXNzOiBiaW5kX2F0dHJDbGFzcywKICAgICAgICBiaW5kX2F0dHJTdHlsZTogYmluZF9hdHRyU3R5bGUsCiAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZVZhbHVlLAogICAgICAgIGwxMG5Ub2tlbjogbDEwblRva2VuLAogICAgICAgIGNyZWF0ZUJpbmRpbmdGdW5jdGlvbjogY3JlYXRlQmluZGluZ0Z1bmN0aW9uCiAgICAgIH07CiAgICAgIHJldHVybiBmdW5jdGlvbih0b2tlbnMpIHsKICAgICAgICB2YXIgZm4gPSBnZXRGdW5jdGlvbnModG9rZW5zLCB0cnVlLCB0aGlzLnNvdXJjZS51cmwsIHRva2Vucy5zb3VyY2VfLCAhQ0xPTkVfTk9STUFMSVpBVElPTl9URVhUX0JVRywgYmFzaXNUZW1wbGF0ZUlkTWFya2VyKTsKICAgICAgICB2YXIgY3JlYXRlSW5zdGFuY2U7CiAgICAgICAgdmFyIGluc3RhbmNlcyA9IHt9OwogICAgICAgIHZhciBsMTBuTWFwID0ge307CiAgICAgICAgdmFyIGwxMG5MaW5rcyA9IFtdOwogICAgICAgIHZhciBzZWVkID0gMDsKICAgICAgICB2YXIgcHJvdG8gPSBidWlsZEh0bWwodG9rZW5zKTsKICAgICAgICB2YXIgaWQgPSB0aGlzLnRlbXBsYXRlSWQ7CiAgICAgICAgdGVtcGxhdGVzW2lkXSA9IHsKICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLAogICAgICAgICAgaW5zdGFuY2VzOiBpbnN0YW5jZXMKICAgICAgICB9OwogICAgICAgIGlmIChmbi5jcmVhdGVMMTBuU3luYykgewogICAgICAgICAgdmFyIGwxMG5Qcm90b1N5bmMgPSBmbi5jcmVhdGVMMTBuU3luYyhwcm90bywgbDEwbk1hcCwgYmluZF9hdHRyLCBDTE9ORV9OT1JNQUxJWkFUSU9OX1RFWFRfQlVHKTsKICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBrZXk7IGtleSA9IGZuLmwxMG5LZXlzW2ldOyBpKyspIGwxMG5Qcm90b1N5bmMoa2V5LCBsMTBuVG9rZW4oa2V5KS52YWx1ZSk7CiAgICAgICAgICBpZiAoZm4ubDEwbktleXMpIGZvciAodmFyIGkgPSAwLCBrZXk7IGtleSA9IGZuLmwxMG5LZXlzW2ldOyBpKyspIHsKICAgICAgICAgICAgdmFyIGxpbmsgPSB7CiAgICAgICAgICAgICAgcGF0aDoga2V5LAogICAgICAgICAgICAgIHRva2VuOiBsMTBuVG9rZW4oa2V5KSwKICAgICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgICAgbDEwblByb3RvU3luYyh0aGlzLnBhdGgsIHZhbHVlKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBpbnN0YW5jZXMpIGluc3RhbmNlc1trZXldLnRtcGwuc2V0KHRoaXMucGF0aCwgdmFsdWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgbGluay50b2tlbi5hdHRhY2gobGluay5oYW5kbGVyLCBsaW5rKTsKICAgICAgICAgICAgbDEwbkxpbmtzLnB1c2gobGluayk7CiAgICAgICAgICAgIGxpbmsgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjcmVhdGVJbnN0YW5jZSA9IGZuLmNyZWF0ZUluc3RhbmNlKGlkLCBpbnN0YW5jZXMsIHByb3RvLCB0b29scywgbDEwbk1hcCwgQ0xPTkVfTk9STUFMSVpBVElPTl9URVhUX0JVRyk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGNyZWF0ZUluc3RhbmNlOiBmdW5jdGlvbihvYmosIG9uQWN0aW9uLCBvblJlYnVpbGQsIGJpbmRpbmdzLCBiaW5kaW5nSW50ZXJmYWNlKSB7CiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gc2VlZCsrOwogICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGVJbnN0YW5jZShpbnN0YW5jZUlkLCBvYmosIG9uQWN0aW9uLCBvblJlYnVpbGQsIGJpbmRpbmdzLCBiaW5kaW5nSW50ZXJmYWNlKTsKICAgICAgICAgICAgaW5zdGFuY2VzW2luc3RhbmNlSWRdID0gaW5zdGFuY2U7CiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZS50bXBsOwogICAgICAgICAgfSwKICAgICAgICAgIGRlc3Ryb3lJbnN0YW5jZTogZnVuY3Rpb24odG1wbCkgewogICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IHRtcGwudGVtcGxhdGVJZF87CiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlc1tpbnN0YW5jZUlkXTsKICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7CiAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmhhbmRsZXIpIGluc3RhbmNlLmJpbmRpbmdJbnRlcmZhY2UuZGV0YWNoKGluc3RhbmNlLmNvbnRleHQsIGluc3RhbmNlLmhhbmRsZXIsIGluc3RhbmNlLnRtcGwuc2V0KTsKICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gaW5zdGFuY2UuYXR0YWNoZXMpIHJlc29sdmVWYWx1ZS5jYWxsKGluc3RhbmNlLCBrZXksIG51bGwpOwogICAgICAgICAgICAgIGRlbGV0ZSBpbnN0YW5jZXNbaW5zdGFuY2VJZF07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBrZXlzOiBmbi5rZXlzLAogICAgICAgICAgaW5zdGFuY2VzXzogaW5zdGFuY2VzLAogICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24ocmVidWlsZCkgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGluazsgbGluayA9IGwxMG5MaW5rc1tpXTsgaSsrKSBsaW5rLnRva2VuLmRldGFjaChsaW5rLmhhbmRsZXIsIGxpbmspOwogICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gaW5zdGFuY2VzKSB7CiAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VzW2tleV07CiAgICAgICAgICAgICAgaWYgKHJlYnVpbGQgJiYgaW5zdGFuY2UucmVidWlsZCkgaW5zdGFuY2UucmVidWlsZC5jYWxsKGluc3RhbmNlLmNvbnRleHQpOwogICAgICAgICAgICAgIGlmICghcmVidWlsZCB8fCBrZXkgaW4gaW5zdGFuY2VzKSB7CiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuaGFuZGxlcikgaW5zdGFuY2UuYmluZGluZ0ludGVyZmFjZS5kZXRhY2goaW5zdGFuY2UuY29udGV4dCwgaW5zdGFuY2UuaGFuZGxlciwgaW5zdGFuY2UudG1wbC5zZXQpOwogICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGluc3RhbmNlLmF0dGFjaGVzKSByZXNvbHZlVmFsdWUuY2FsbChrZXksIG51bGwpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGVtcGxhdGVzW2lkXSAmJiB0ZW1wbGF0ZXNbaWRdLmluc3RhbmNlcyA9PT0gaW5zdGFuY2VzKSBkZWxldGUgdGVtcGxhdGVzW2lkXTsKICAgICAgICAgICAgZm4gPSBudWxsOwogICAgICAgICAgICBwcm90byA9IG51bGw7CiAgICAgICAgICAgIGwxMG5NYXAgPSBudWxsOwogICAgICAgICAgICBsMTBuTGlua3MgPSBudWxsOwogICAgICAgICAgICBsMTBuUHJvdG9TeW5jID0gbnVsbDsKICAgICAgICAgICAgaW5zdGFuY2VzID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9OwogICAgfSgpOwogICAgdmFyIEh0bWxUZW1wbGF0ZSA9IFRlbXBsYXRlLnN1YmNsYXNzKHsKICAgICAgY2xhc3NOYW1lOiBuYW1lc3BhY2UgKyAiLlRlbXBsYXRlIiwKICAgICAgX19leHRlbmRfXzogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBIdG1sVGVtcGxhdGUpIHJldHVybiB2YWx1ZTsKICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVN3aXRjaENvbmZpZykgcmV0dXJuIG5ldyBIdG1sVGVtcGxhdGVTd2l0Y2hlcih2YWx1ZSk7CiAgICAgICAgcmV0dXJuIG5ldyBIdG1sVGVtcGxhdGUodmFsdWUpOwogICAgICB9LAogICAgICBidWlsZGVyOiBidWlsZGVyCiAgICB9KTsKICAgIHZhciBIdG1sVGVtcGxhdGVTd2l0Y2hlciA9IFRlbXBsYXRlU3dpdGNoZXIuc3ViY2xhc3MoewogICAgICBjbGFzc05hbWU6IG5hbWVzcGFjZSArICIuVGVtcGxhdGVTd2l0Y2hlciIsCiAgICAgIHRlbXBsYXRlQ2xhc3M6IEh0bWxUZW1wbGF0ZQogICAgfSk7CiAgICBtb2R1bGUuZXhwb3J0cyA9IHsKICAgICAgbWFya2VyOiBiYXNpc1RlbXBsYXRlSWRNYXJrZXIsCiAgICAgIFRlbXBsYXRlOiBIdG1sVGVtcGxhdGUsCiAgICAgIFRlbXBsYXRlU3dpdGNoZXI6IEh0bWxUZW1wbGF0ZVN3aXRjaGVyCiAgICB9OwogICAgYmFzaXMudGVtcGxhdGUuZXh0ZW5kKHsKICAgICAgZ2V0RGVidWdJbmZvQnlJZDogZ2V0RGVidWdJbmZvQnlJZCwKICAgICAgYnVpbGRIdG1sOiBidWlsZEh0bWwsCiAgICAgIHJlc29sdmVUZW1wbGF0ZUJ5SWQ6IHJlc29sdmVUZW1wbGF0ZUJ5SWQsCiAgICAgIHJlc29sdmVPYmplY3RCeUlkOiByZXNvbHZlT2JqZWN0QnlJZCwKICAgICAgcmVzb2x2ZVRtcGxCeUlkOiByZXNvbHZlVG1wbEJ5SWQKICAgIH0pOwogIH0sCiAgIjIuanMiOiBmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUsIGJhc2lzLCBnbG9iYWwsIF9fZmlsZW5hbWUsIF9fZGlybmFtZSwgcmVxdWlyZSwgcmVzb3VyY2UpIHsKICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLnBhdGg7CiAgICB2YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7CiAgICB2YXIgJG51bGwgPSBiYXNpcy5mbi4kbnVsbDsKICAgIHZhciBhcnJheUZyb20gPSBiYXNpcy5hcnJheS5mcm9tOwogICAgdmFyIFczQ1NVUFBPUlQgPSAhIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7CiAgICB2YXIgRVZFTlRfSE9MREVSID0gIl9fYmFzaXNFdmVudHMiOwogICAgdmFyIEtFWSA9IHsKICAgICAgQkFDS1NQQUNFOiA4LAogICAgICBUQUI6IDksCiAgICAgIENUUkxfRU5URVI6IDEwLAogICAgICBFTlRFUjogMTMsCiAgICAgIFNISUZUOiAxNiwKICAgICAgQ1RSTDogMTcsCiAgICAgIEFMVDogMTgsCiAgICAgIEVTQzogMjcsCiAgICAgIEVTQ0FQRTogMjcsCiAgICAgIFNQQUNFOiAzMiwKICAgICAgUEFHRVVQOiAzMywKICAgICAgUEFHRURPV046IDM0LAogICAgICBFTkQ6IDM1LAogICAgICBIT01FOiAzNiwKICAgICAgTEVGVDogMzcsCiAgICAgIFVQOiAzOCwKICAgICAgUklHSFQ6IDM5LAogICAgICBET1dOOiA0MCwKICAgICAgSU5TRVJUOiA0NSwKICAgICAgREVMRVRFOiA0NiwKICAgICAgRjE6IDExMiwKICAgICAgRjI6IDExMywKICAgICAgRjM6IDExNCwKICAgICAgRjQ6IDExNSwKICAgICAgRjU6IDExNiwKICAgICAgRjY6IDExNywKICAgICAgRjc6IDExOCwKICAgICAgRjg6IDExOSwKICAgICAgRjk6IDEyMCwKICAgICAgRjEwOiAxMjEsCiAgICAgIEYxMTogMTIyLAogICAgICBGMTI6IDEyMwogICAgfTsKICAgIHZhciBNT1VTRV9MRUZUID0gewogICAgICBWQUxVRTogMSwKICAgICAgQklUOiAxCiAgICB9OwogICAgdmFyIE1PVVNFX01JRERMRSA9IHsKICAgICAgVkFMVUU6IDIsCiAgICAgIEJJVDogNAogICAgfTsKICAgIHZhciBNT1VTRV9SSUdIVCA9IHsKICAgICAgVkFMVUU6IDMsCiAgICAgIEJJVDogMgogICAgfTsKICAgIHZhciBCUk9XU0VSX0VWRU5UUyA9IHsKICAgICAgbW91c2V3aGVlbDogWyAibW91c2V3aGVlbCIsICJET01Nb3VzZVNjcm9sbCIgXQogICAgfTsKICAgIGZ1bmN0aW9uIGJyb3dzZXJFdmVudHMoZXZlbnROYW1lKSB7CiAgICAgIHJldHVybiBCUk9XU0VSX0VWRU5UU1tldmVudE5hbWVdIHx8IFsgZXZlbnROYW1lIF07CiAgICB9CiAgICB2YXIgRXZlbnQgPSBiYXNpcy5DbGFzcyhudWxsLCB7CiAgICAgIGNsYXNzTmFtZTogbmFtZXNwYWNlICsgIi5FdmVudCIsCiAgICAgIEtFWTogS0VZLAogICAgICBpbml0OiBmdW5jdGlvbihldmVudCkgewogICAgICAgIGV2ZW50ID0gd3JhcChldmVudCk7CiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBldmVudCkgaWYgKG5hbWUgIT0gInJldHVyblZhbHVlIiAmJiBuYW1lICE9ICJrZXlMb2NhdGlvbiIgJiYgbmFtZSAhPSAibGF5ZXJYIiAmJiBuYW1lICE9ICJsYXllclkiKSBpZiAodHlwZW9mIGV2ZW50W25hbWVdICE9ICJmdW5jdGlvbiIgJiYgbmFtZSBpbiB0aGlzID09IGZhbHNlKSB0aGlzW25hbWVdID0gZXZlbnRbbmFtZV07CiAgICAgICAgdmFyIHRhcmdldCA9IHNlbmRlcihldmVudCk7CiAgICAgICAgYmFzaXMub2JqZWN0LmV4dGVuZCh0aGlzLCB7CiAgICAgICAgICBldmVudF86IGV2ZW50LAogICAgICAgICAgc2VuZGVyOiB0YXJnZXQsCiAgICAgICAgICB0YXJnZXQ6IHRhcmdldCwKICAgICAgICAgIGtleToga2V5KGV2ZW50KSwKICAgICAgICAgIGNoYXJDb2RlOiBjaGFyQ29kZShldmVudCksCiAgICAgICAgICBtb3VzZUxlZnQ6IG1vdXNlQnV0dG9uKGV2ZW50LCBNT1VTRV9MRUZUKSwKICAgICAgICAgIG1vdXNlTWlkZGxlOiBtb3VzZUJ1dHRvbihldmVudCwgTU9VU0VfTUlERExFKSwKICAgICAgICAgIG1vdXNlUmlnaHQ6IG1vdXNlQnV0dG9uKGV2ZW50LCBNT1VTRV9SSUdIVCksCiAgICAgICAgICBtb3VzZVg6IG1vdXNlWChldmVudCksCiAgICAgICAgICBtb3VzZVk6IG1vdXNlWShldmVudCksCiAgICAgICAgICB3aGVlbERlbHRhOiB3aGVlbERlbHRhKGV2ZW50KQogICAgICAgIH0pOwogICAgICB9LAogICAgICBzdG9wQnViYmxlOiBmdW5jdGlvbigpIHsKICAgICAgICBjYW5jZWxCdWJibGUodGhpcy5ldmVudF8pOwogICAgICB9LAogICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkgewogICAgICAgIGNhbmNlbEJ1YmJsZSh0aGlzLmV2ZW50Xyk7CiAgICAgIH0sCiAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsKICAgICAgICBjYW5jZWxEZWZhdWx0KHRoaXMuZXZlbnRfKTsKICAgICAgfSwKICAgICAgZGllOiBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLnN0b3BCdWJibGUoKTsKICAgICAgICB0aGlzLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIH0KICAgIH0pOwogICAgZnVuY3Rpb24gd3JhcChldmVudCkgewogICAgICByZXR1cm4gZXZlbnQgaW5zdGFuY2VvZiBFdmVudCA/IGV2ZW50LmV2ZW50XyA6IGV2ZW50IHx8IGdsb2JhbC5ldmVudDsKICAgIH0KICAgIGZ1bmN0aW9uIGdldE5vZGUocmVmKSB7CiAgICAgIHJldHVybiB0eXBlb2YgcmVmID09ICJzdHJpbmciID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVmKSA6IHJlZjsKICAgIH0KICAgIGZ1bmN0aW9uIHNlbmRlcihldmVudCkgewogICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQgfHwgZG9jdW1lbnQ7CiAgICAgIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT0gMyA/IHRhcmdldC5wYXJlbnROb2RlIDogdGFyZ2V0OwogICAgfQogICAgZnVuY3Rpb24gY2FuY2VsQnViYmxlKGV2ZW50KSB7CiAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyBlbHNlIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBjYW5jZWxEZWZhdWx0KGV2ZW50KSB7CiAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkgZXZlbnQucHJldmVudERlZmF1bHQoKTsgZWxzZSBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlOwogICAgfQogICAgZnVuY3Rpb24ga2lsbChldmVudCwgbm9kZSkgewogICAgICBub2RlID0gZ2V0Tm9kZShub2RlKTsKICAgICAgaWYgKG5vZGUpIGFkZEhhbmRsZXIobm9kZSwgZXZlbnQsIGtpbGwpOyBlbHNlIHsKICAgICAgICBjYW5jZWxEZWZhdWx0KGV2ZW50KTsKICAgICAgICBjYW5jZWxCdWJibGUoZXZlbnQpOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBrZXkoZXZlbnQpIHsKICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGUgfHwgZXZlbnQud2hpY2ggfHwgMDsKICAgIH0KICAgIGZ1bmN0aW9uIGNoYXJDb2RlKGV2ZW50KSB7CiAgICAgIHJldHVybiBldmVudC5jaGFyQ29kZSB8fCBldmVudC5rZXlDb2RlIHx8IDA7CiAgICB9CiAgICBmdW5jdGlvbiBtb3VzZUJ1dHRvbihldmVudCwgYnV0dG9uKSB7CiAgICAgIGlmICh0eXBlb2YgZXZlbnQud2hpY2ggPT0gIm51bWJlciIpIHJldHVybiBldmVudC53aGljaCA9PSBidXR0b24uVkFMVUU7IGVsc2UgcmV0dXJuICEhKGV2ZW50LmJ1dHRvbiAmIGJ1dHRvbi5CSVQpOwogICAgfQogICAgZnVuY3Rpb24gbW91c2VYKGV2ZW50KSB7CiAgICAgIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykgcmV0dXJuIGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYOyBlbHNlIGlmICgicGFnZVgiIGluIGV2ZW50KSByZXR1cm4gZXZlbnQucGFnZVg7IGVsc2UgcmV0dXJuICJjbGllbnRYIiBpbiBldmVudCA/IGV2ZW50LmNsaWVudFggKyAoZG9jdW1lbnQuY29tcGF0TW9kZSA9PSAiQ1NTMUNvbXBhdCIgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCkgOiAwOwogICAgfQogICAgZnVuY3Rpb24gbW91c2VZKGV2ZW50KSB7CiAgICAgIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykgcmV0dXJuIGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZOyBlbHNlIGlmICgicGFnZVkiIGluIGV2ZW50KSByZXR1cm4gZXZlbnQucGFnZVk7IGVsc2UgcmV0dXJuICJjbGllbnRZIiBpbiBldmVudCA/IGV2ZW50LmNsaWVudFkgKyAoZG9jdW1lbnQuY29tcGF0TW9kZSA9PSAiQ1NTMUNvbXBhdCIgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIDogZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApIDogMDsKICAgIH0KICAgIGZ1bmN0aW9uIHdoZWVsRGVsdGEoZXZlbnQpIHsKICAgICAgdmFyIGRlbHRhID0gMDsKICAgICAgaWYgKCJ3aGVlbERlbHRhIiBpbiBldmVudCkgZGVsdGEgPSBldmVudC53aGVlbERlbHRhOyBlbHNlIGlmIChldmVudC50eXBlID09ICJET01Nb3VzZVNjcm9sbCIpIGRlbHRhID0gLWV2ZW50LmRldGFpbDsKICAgICAgcmV0dXJuIGRlbHRhICYmIGRlbHRhIC8gTWF0aC5hYnMoZGVsdGEpOwogICAgfQogICAgdmFyIGdsb2JhbEhhbmRsZXJzID0ge307CiAgICB2YXIgY2FwdHVyZUhhbmRsZXJzID0ge307CiAgICB2YXIgbm9DYXB0dXJlU2NoZW1lID0gIVczQ1NVUFBPUlQ7CiAgICBmdW5jdGlvbiBvYnNlcnZlR2xvYmFsRXZlbnRzKGV2ZW50KSB7CiAgICAgIHZhciBoYW5kbGVycyA9IGFycmF5RnJvbShnbG9iYWxIYW5kbGVyc1tldmVudC50eXBlXSk7CiAgICAgIHZhciBjYXB0dXJlSGFuZGxlciA9IGNhcHR1cmVIYW5kbGVyc1tldmVudC50eXBlXTsKICAgICAgdmFyIHdyYXBwZWRFdmVudCA9IG5ldyBFdmVudChldmVudCk7CiAgICAgIGlmIChjYXB0dXJlSGFuZGxlcikgewogICAgICAgIGNhcHR1cmVIYW5kbGVyLmhhbmRsZXIuY2FsbChjYXB0dXJlSGFuZGxlci50aGlzT2JqZWN0LCB3cmFwcGVkRXZlbnQpOwogICAgICAgIGtpbGwoZXZlbnQpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAoaGFuZGxlcnMpIHsKICAgICAgICBmb3IgKHZhciBpID0gaGFuZGxlcnMubGVuZ3RoOyBpLS0gPiAwOyApIHsKICAgICAgICAgIHZhciBoYW5kbGVyT2JqZWN0ID0gaGFuZGxlcnNbaV07CiAgICAgICAgICBoYW5kbGVyT2JqZWN0LmhhbmRsZXIuY2FsbChoYW5kbGVyT2JqZWN0LnRoaXNPYmplY3QsIHdyYXBwZWRFdmVudCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBjYXB0dXJlRXZlbnQoZXZlbnRUeXBlLCBoYW5kbGVyLCB0aGlzT2JqZWN0KSB7CiAgICAgIGlmIChjYXB0dXJlSGFuZGxlcnNbZXZlbnRUeXBlXSkgcmVsZWFzZUV2ZW50KGV2ZW50VHlwZSk7CiAgICAgIGFkZEdsb2JhbEhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCB0aGlzT2JqZWN0KTsKICAgICAgY2FwdHVyZUhhbmRsZXJzW2V2ZW50VHlwZV0gPSB7CiAgICAgICAgaGFuZGxlcjogaGFuZGxlciwKICAgICAgICB0aGlzT2JqZWN0OiB0aGlzT2JqZWN0CiAgICAgIH07CiAgICB9CiAgICBmdW5jdGlvbiByZWxlYXNlRXZlbnQoZXZlbnRUeXBlKSB7CiAgICAgIHZhciBoYW5kbGVyT2JqZWN0ID0gY2FwdHVyZUhhbmRsZXJzW2V2ZW50VHlwZV07CiAgICAgIGlmIChoYW5kbGVyT2JqZWN0KSB7CiAgICAgICAgcmVtb3ZlR2xvYmFsSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXJPYmplY3QuaGFuZGxlciwgaGFuZGxlck9iamVjdC50aGlzT2JqZWN0KTsKICAgICAgICBkZWxldGUgY2FwdHVyZUhhbmRsZXJzW2V2ZW50VHlwZV07CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGFkZEdsb2JhbEhhbmRsZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCB0aGlzT2JqZWN0KSB7CiAgICAgIHZhciBoYW5kbGVycyA9IGdsb2JhbEhhbmRsZXJzW2V2ZW50VHlwZV07CiAgICAgIGlmIChoYW5kbGVycykgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBpdGVtOyBpdGVtID0gaGFuZGxlcnNbaV07IGkrKykgaWYgKGl0ZW0uaGFuZGxlciA9PT0gaGFuZGxlciAmJiBpdGVtLnRoaXNPYmplY3QgPT09IHRoaXNPYmplY3QpIHJldHVybjsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAobm9DYXB0dXJlU2NoZW1lKSBhZGRIYW5kbGVyKGRvY3VtZW50LCBldmVudFR5cGUsICRudWxsKTsgZWxzZSBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgb2JzZXJ2ZUdsb2JhbEV2ZW50cywgdHJ1ZSk7CiAgICAgICAgaGFuZGxlcnMgPSBnbG9iYWxIYW5kbGVyc1tldmVudFR5cGVdID0gW107CiAgICAgIH0KICAgICAgaGFuZGxlcnMucHVzaCh7CiAgICAgICAgaGFuZGxlcjogaGFuZGxlciwKICAgICAgICB0aGlzT2JqZWN0OiB0aGlzT2JqZWN0CiAgICAgIH0pOwogICAgfQogICAgZnVuY3Rpb24gcmVtb3ZlR2xvYmFsSGFuZGxlcihldmVudFR5cGUsIGhhbmRsZXIsIHRoaXNPYmplY3QpIHsKICAgICAgdmFyIGhhbmRsZXJzID0gZ2xvYmFsSGFuZGxlcnNbZXZlbnRUeXBlXTsKICAgICAgaWYgKGhhbmRsZXJzKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGl0ZW07IGl0ZW0gPSBoYW5kbGVyc1tpXTsgaSsrKSB7CiAgICAgICAgICBpZiAoaXRlbS5oYW5kbGVyID09PSBoYW5kbGVyICYmIGl0ZW0udGhpc09iamVjdCA9PT0gdGhpc09iamVjdCkgewogICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgIGlmICghaGFuZGxlcnMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgZGVsZXRlIGdsb2JhbEhhbmRsZXJzW2V2ZW50VHlwZV07CiAgICAgICAgICAgICAgaWYgKG5vQ2FwdHVyZVNjaGVtZSkgcmVtb3ZlSGFuZGxlcihkb2N1bWVudCwgZXZlbnRUeXBlLCAkbnVsbCk7IGVsc2UgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIG9ic2VydmVHbG9iYWxFdmVudHMsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGFkZEhhbmRsZXIobm9kZSwgZXZlbnRUeXBlLCBoYW5kbGVyLCB0aGlzT2JqZWN0KSB7CiAgICAgIG5vZGUgPSBnZXROb2RlKG5vZGUpOwogICAgICBpZiAoIW5vZGUpIHRocm93ICJiYXNpcy5ldmVudC5hZGRIYW5kbGVyOiBjYW4ndCBhdHRhY2ggZXZlbnQgbGlzdGVuZXIgdG8gdW5kZWZpbmVkIjsKICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9ICJmdW5jdGlvbiIpIHRocm93ICJiYXNpcy5ldmVudC5hZGRIYW5kbGVyOiBoYW5kbGVyIGlzIG5vdCBhIGZ1bmN0aW9uIjsKICAgICAgaWYgKCFub2RlW0VWRU5UX0hPTERFUl0pIG5vZGVbRVZFTlRfSE9MREVSXSA9IHt9OwogICAgICB2YXIgaGFuZGxlck9iamVjdCA9IHsKICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLAogICAgICAgIHRoaXNPYmplY3Q6IHRoaXNPYmplY3QKICAgICAgfTsKICAgICAgdmFyIGhhbmRsZXJzID0gbm9kZVtFVkVOVF9IT0xERVJdOwogICAgICB2YXIgZXZlbnRUeXBlSGFuZGxlcnMgPSBoYW5kbGVyc1tldmVudFR5cGVdOwogICAgICBpZiAoIWV2ZW50VHlwZUhhbmRsZXJzKSB7CiAgICAgICAgZXZlbnRUeXBlSGFuZGxlcnMgPSBoYW5kbGVyc1tldmVudFR5cGVdID0gWyBoYW5kbGVyT2JqZWN0IF07CiAgICAgICAgZXZlbnRUeXBlSGFuZGxlcnMuZmlyZUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgIGV2ZW50ID0gd3JhcChldmVudCk7CiAgICAgICAgICBpZiAobm9DYXB0dXJlU2NoZW1lICYmIGV2ZW50ICYmIGdsb2JhbEhhbmRsZXJzW2V2ZW50VHlwZV0pIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5yZXR1cm5WYWx1ZSA9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgIG9ic2VydmVHbG9iYWxFdmVudHMoZXZlbnQpOwogICAgICAgICAgICAgIGlmIChldmVudC5jYW5jZWxCdWJibGUgPT09IHRydWUpIHJldHVybjsKICAgICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50LnJldHVyblZhbHVlID09ICJ1bmRlZmluZWQiKSBldmVudC5yZXR1cm5WYWx1ZSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB3cmFwcGVkRXZlbnQgPSBuZXcgRXZlbnQoZXZlbnQpLCBpdGVtOyBpdGVtID0gZXZlbnRUeXBlSGFuZGxlcnNbaSsrXTsgKSBpdGVtLmhhbmRsZXIuY2FsbChpdGVtLnRoaXNPYmplY3QsIHdyYXBwZWRFdmVudCk7CiAgICAgICAgfTsKICAgICAgICBpZiAoVzNDU1VQUE9SVCkgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZXZlbnRUeXBlSGFuZGxlcnMuZmlyZUV2ZW50LCBmYWxzZSk7IGVsc2Ugbm9kZS5hdHRhY2hFdmVudCgib24iICsgZXZlbnRUeXBlLCBldmVudFR5cGVIYW5kbGVycy5maXJlRXZlbnQpOwogICAgICB9IGVsc2UgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBpdGVtOyBpdGVtID0gZXZlbnRUeXBlSGFuZGxlcnNbaV07IGkrKykgaWYgKGl0ZW0uaGFuZGxlciA9PT0gaGFuZGxlciAmJiBpdGVtLnRoaXNPYmplY3QgPT09IHRoaXNPYmplY3QpIHJldHVybjsKICAgICAgICBldmVudFR5cGVIYW5kbGVycy5wdXNoKGhhbmRsZXJPYmplY3QpOwogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBhZGRIYW5kbGVycyhub2RlLCBoYW5kbGVycywgdGhpc09iamVjdCkgewogICAgICBub2RlID0gZ2V0Tm9kZShub2RlKTsKICAgICAgZm9yICh2YXIgZXZlbnRUeXBlIGluIGhhbmRsZXJzKSBhZGRIYW5kbGVyKG5vZGUsIGV2ZW50VHlwZSwgaGFuZGxlcnNbZXZlbnRUeXBlXSwgdGhpc09iamVjdCk7CiAgICB9CiAgICBmdW5jdGlvbiByZW1vdmVIYW5kbGVyKG5vZGUsIGV2ZW50VHlwZSwgaGFuZGxlciwgdGhpc09iamVjdCkgewogICAgICBub2RlID0gZ2V0Tm9kZShub2RlKTsKICAgICAgdmFyIGhhbmRsZXJzID0gbm9kZVtFVkVOVF9IT0xERVJdOwogICAgICBpZiAoaGFuZGxlcnMpIHsKICAgICAgICB2YXIgZXZlbnRUeXBlSGFuZGxlcnMgPSBoYW5kbGVyc1tldmVudFR5cGVdOwogICAgICAgIGlmIChldmVudFR5cGVIYW5kbGVycykgewogICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGl0ZW07IGl0ZW0gPSBldmVudFR5cGVIYW5kbGVyc1tpXTsgaSsrKSB7CiAgICAgICAgICAgIGlmIChpdGVtLmhhbmRsZXIgPT09IGhhbmRsZXIgJiYgaXRlbS50aGlzT2JqZWN0ID09PSB0aGlzT2JqZWN0KSB7CiAgICAgICAgICAgICAgZXZlbnRUeXBlSGFuZGxlcnMuc3BsaWNlKGksIDEpOwogICAgICAgICAgICAgIGlmICghZXZlbnRUeXBlSGFuZGxlcnMubGVuZ3RoKSBjbGVhckhhbmRsZXJzKG5vZGUsIGV2ZW50VHlwZSk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBjbGVhckhhbmRsZXJzKG5vZGUsIGV2ZW50VHlwZSkgewogICAgICBub2RlID0gZ2V0Tm9kZShub2RlKTsKICAgICAgdmFyIGhhbmRsZXJzID0gbm9kZVtFVkVOVF9IT0xERVJdOwogICAgICBpZiAoaGFuZGxlcnMpIHsKICAgICAgICBpZiAodHlwZW9mIGV2ZW50VHlwZSAhPSAic3RyaW5nIikgewogICAgICAgICAgZm9yIChldmVudFR5cGUgaW4gaGFuZGxlcnMpIGNsZWFySGFuZGxlcnMobm9kZSwgZXZlbnRUeXBlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGV2ZW50VHlwZUhhbmRsZXJzID0gaGFuZGxlcnNbZXZlbnRUeXBlXTsKICAgICAgICAgIGlmIChldmVudFR5cGVIYW5kbGVycykgewogICAgICAgICAgICBpZiAobm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKSBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudFR5cGVIYW5kbGVycy5maXJlRXZlbnQsIGZhbHNlKTsgZWxzZSBub2RlLmRldGFjaEV2ZW50KCJvbiIgKyBldmVudFR5cGUsIGV2ZW50VHlwZUhhbmRsZXJzLmZpcmVFdmVudCk7CiAgICAgICAgICAgIGRlbGV0ZSBoYW5kbGVyc1tldmVudFR5cGVdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gZmlyZUV2ZW50KG5vZGUsIGV2ZW50VHlwZSwgZXZlbnQpIHsKICAgICAgbm9kZSA9IGdldE5vZGUobm9kZSk7CiAgICAgIHZhciBoYW5kbGVycyA9IG5vZGVbRVZFTlRfSE9MREVSXTsKICAgICAgaWYgKGhhbmRsZXJzICYmIGhhbmRsZXJzW2V2ZW50VHlwZV0pIGhhbmRsZXJzW2V2ZW50VHlwZV0uZmlyZUV2ZW50KGV2ZW50KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9uVW5sb2FkKGhhbmRsZXIsIHRoaXNPYmplY3QpIHsKICAgICAgYWRkSGFuZGxlcihnbG9iYWwsICJ1bmxvYWQiLCBoYW5kbGVyLCB0aGlzT2JqZWN0KTsKICAgIH0KICAgIHZhciB0YWdOYW1lRXZlbnRNYXAgPSB7fTsKICAgIGZ1bmN0aW9uIGdldEV2ZW50SW5mbyhldmVudE5hbWUsIHRhZ05hbWUpIHsKICAgICAgaWYgKCF0YWdOYW1lKSB0YWdOYW1lID0gImRpdiI7CiAgICAgIHZhciBpZCA9IHRhZ05hbWUgKyAiLSIgKyBldmVudE5hbWU7CiAgICAgIGlmICh0YWdOYW1lRXZlbnRNYXBbaWRdKSByZXR1cm4gdGFnTmFtZUV2ZW50TWFwW2lkXTsgZWxzZSB7CiAgICAgICAgdmFyIHN1cHBvcnRlZCA9IGZhbHNlOwogICAgICAgIHZhciBidWJibGUgPSBmYWxzZTsKICAgICAgICBpZiAoIVczQ1NVUFBPUlQpIHsKICAgICAgICAgIHZhciBvbmV2ZW50ID0gIm9uIiArIGV2ZW50TmFtZTsKICAgICAgICAgIHZhciBob3N0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgICB2YXIgdGFyZ2V0ID0gaG9zdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpKTsKICAgICAgICAgIGhvc3Rbb25ldmVudF0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgYnViYmxlID0gdHJ1ZTsKICAgICAgICAgIH07CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB0YXJnZXQuZmlyZUV2ZW50KG9uZXZlbnQpOwogICAgICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlOwogICAgICAgICAgfSBjYXRjaCAoZSkge30KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRhZ05hbWVFdmVudE1hcFtpZF0gPSB7CiAgICAgICAgICBzdXBwb3J0ZWQ6IHN1cHBvcnRlZCwKICAgICAgICAgIGJ1YmJsZTogYnViYmxlCiAgICAgICAgfTsKICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gd3JhcEV2ZW50RnVuY3Rpb24oZm4pIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50LCBhcmcpIHsKICAgICAgICByZXR1cm4gZm4od3JhcChldmVudCksIGFyZyk7CiAgICAgIH07CiAgICB9CiAgICBtb2R1bGUuZXhwb3J0cyA9IHsKICAgICAgVzNDU1VQUE9SVDogVzNDU1VQUE9SVCwKICAgICAgYnJvd3NlckV2ZW50czogYnJvd3NlckV2ZW50cywKICAgICAgZ2V0RXZlbnRJbmZvOiBnZXRFdmVudEluZm8sCiAgICAgIEtFWTogS0VZLAogICAgICBNT1VTRV9MRUZUOiBNT1VTRV9MRUZULAogICAgICBNT1VTRV9SSUdIVDogTU9VU0VfUklHSFQsCiAgICAgIE1PVVNFX01JRERMRTogTU9VU0VfTUlERExFLAogICAgICBFdmVudDogRXZlbnQsCiAgICAgIHNlbmRlcjogd3JhcEV2ZW50RnVuY3Rpb24oc2VuZGVyKSwKICAgICAgY2FuY2VsQnViYmxlOiB3cmFwRXZlbnRGdW5jdGlvbihjYW5jZWxCdWJibGUpLAogICAgICBjYW5jZWxEZWZhdWx0OiB3cmFwRXZlbnRGdW5jdGlvbihjYW5jZWxEZWZhdWx0KSwKICAgICAga2lsbDogd3JhcEV2ZW50RnVuY3Rpb24oa2lsbCksCiAgICAgIGtleTogd3JhcEV2ZW50RnVuY3Rpb24oa2V5KSwKICAgICAgY2hhckNvZGU6IHdyYXBFdmVudEZ1bmN0aW9uKGNoYXJDb2RlKSwKICAgICAgbW91c2VCdXR0b246IHdyYXBFdmVudEZ1bmN0aW9uKG1vdXNlQnV0dG9uKSwKICAgICAgbW91c2VYOiB3cmFwRXZlbnRGdW5jdGlvbihtb3VzZVgpLAogICAgICBtb3VzZVk6IHdyYXBFdmVudEZ1bmN0aW9uKG1vdXNlWSksCiAgICAgIHdoZWVsRGVsdGE6IHdyYXBFdmVudEZ1bmN0aW9uKHdoZWVsRGVsdGEpLAogICAgICBhZGRHbG9iYWxIYW5kbGVyOiBhZGRHbG9iYWxIYW5kbGVyLAogICAgICByZW1vdmVHbG9iYWxIYW5kbGVyOiByZW1vdmVHbG9iYWxIYW5kbGVyLAogICAgICBjYXB0dXJlRXZlbnQ6IGNhcHR1cmVFdmVudCwKICAgICAgcmVsZWFzZUV2ZW50OiByZWxlYXNlRXZlbnQsCiAgICAgIGFkZEhhbmRsZXI6IGFkZEhhbmRsZXIsCiAgICAgIGFkZEhhbmRsZXJzOiBhZGRIYW5kbGVycywKICAgICAgcmVtb3ZlSGFuZGxlcjogcmVtb3ZlSGFuZGxlciwKICAgICAgY2xlYXJIYW5kbGVyczogY2xlYXJIYW5kbGVycywKICAgICAgZmlyZUV2ZW50OiBmaXJlRXZlbnQsCiAgICAgIG9uVW5sb2FkOiBvblVubG9hZCwKICAgICAgd3JhcDogd3JhcAogICAgfTsKICB9LAogICIzLmpzIjogZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlLCBiYXNpcywgZ2xvYmFsLCBfX2ZpbGVuYW1lLCBfX2Rpcm5hbWUsIHJlcXVpcmUsIHJlc291cmNlKSB7CiAgICBiYXNpcy5yZXF1aXJlKCIuLzQuanMiKTsKICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLnBhdGg7CiAgICB2YXIgQ2xhc3MgPSBiYXNpcy5DbGFzczsKICAgIHZhciBFbWl0dGVyID0gYmFzaXMuZXZlbnQuRW1pdHRlcjsKICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CiAgICBiYXNpcy5yZXNvdXJjZS5leHRlbnNpb25zWyIubDEwbiJdID0gZnVuY3Rpb24oY29udGVudCwgdXJsKSB7CiAgICAgIHJldHVybiByZXNvbHZlRGljdGlvbmFyeSh1cmwpLnVwZGF0ZShiYXNpcy5yZXNvdXJjZS5leHRlbnNpb25zWyIuanNvbiJdKGNvbnRlbnQsIHVybCkpOwogICAgfTsKICAgIGZ1bmN0aW9uIG93bktleXMob2JqZWN0KSB7CiAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSByZXN1bHQucHVzaChrZXkpOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgdmFyIHRva2VuSW5kZXggPSBbXTsKICAgIHZhciB0b2tlbkNvbXB1dGVGbiA9IHt9OwogICAgdmFyIHRva2VuQ29tcHV0ZXMgPSB7fTsKICAgIHZhciB1cGRhdGVUb2tlbiA9IGJhc2lzLlRva2VuLnByb3RvdHlwZS5zZXQ7CiAgICB2YXIgQ29tcHV0ZVRva2VuID0gQ2xhc3MoYmFzaXMuVG9rZW4sIHsKICAgICAgY2xhc3NOYW1lOiBuYW1lc3BhY2UgKyAiLkNvbXB1dGVUb2tlbiIsCiAgICAgIGluaXQ6IGZ1bmN0aW9uKHZhbHVlLCB0b2tlbikgewogICAgICAgIHRva2VuLmNvbXB1dGVUb2tlbnNbdGhpcy5iYXNpc09iamVjdElkXSA9IHRoaXM7CiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuOwogICAgICAgIGJhc2lzLlRva2VuLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcywgdmFsdWUpOwogICAgICB9LAogICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBrZXkgPSB0aGlzLnRva2VuLnR5cGUgPT0gInBsdXJhbCIgPyBjdWx0dXJlc1tjdXJyZW50Q3VsdHVyZV0ucGx1cmFsKHRoaXMudmFsdWUpIDogdGhpcy52YWx1ZTsKICAgICAgICByZXR1cm4gdGhpcy50b2tlbi5kaWN0aW9uYXJ5LmdldFZhbHVlKHRoaXMudG9rZW4ubmFtZSArICIuIiArIGtleSk7CiAgICAgIH0sCiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5nZXQoKTsKICAgICAgfSwKICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgZGVsZXRlIHRoaXMudG9rZW4uY29tcHV0ZVRva2Vuc1t0aGlzLmJhc2lzT2JqZWN0SWRdOwogICAgICAgIHRoaXMudG9rZW4gPSBudWxsOwogICAgICAgIGJhc2lzLlRva2VuLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7CiAgICAgIH0KICAgIH0pOwogICAgdmFyIFRva2VuID0gQ2xhc3MoYmFzaXMuVG9rZW4sIHsKICAgICAgY2xhc3NOYW1lOiBuYW1lc3BhY2UgKyAiLlRva2VuIiwKICAgICAgaW5kZXg6IE5hTiwKICAgICAgZGljdGlvbmFyeTogbnVsbCwKICAgICAgbmFtZTogIiIsCiAgICAgIHR5cGU6ICJkZWZhdWx0IiwKICAgICAgY29tcHV0ZVRva2VuczogbnVsbCwKICAgICAgaW5pdDogZnVuY3Rpb24oZGljdGlvbmFyeSwgdG9rZW5OYW1lLCB0eXBlLCB2YWx1ZSkgewogICAgICAgIGJhc2lzLlRva2VuLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcywgdmFsdWUpOwogICAgICAgIHRoaXMuaW5kZXggPSB0b2tlbkluZGV4LnB1c2godGhpcykgLSAxOwogICAgICAgIHRoaXMubmFtZSA9IHRva2VuTmFtZTsKICAgICAgICB0aGlzLmRpY3Rpb25hcnkgPSBkaWN0aW9uYXJ5OwogICAgICAgIHRoaXMuY29tcHV0ZVRva2VucyA9IHt9OwogICAgICAgIGlmICh0eXBlKSB0aGlzLnNldFR5cGUodHlwZSk7IGVsc2UgdGhpcy5hcHBseSgpOwogICAgICB9LAogICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCk7CiAgICAgIH0sCiAgICAgIGFwcGx5OiBmdW5jdGlvbigpIHsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jb21wdXRlVG9rZW5zKSB0aGlzLmNvbXB1dGVUb2tlbnNba2V5XS5hcHBseSgpOwogICAgICAgIGJhc2lzLlRva2VuLnByb3RvdHlwZS5hcHBseS5jYWxsKHRoaXMpOwogICAgICB9LAogICAgICBzZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIGJhc2lzLmRldi53YXJuKCJiYXNpcy5sMTBuOiBWYWx1ZSBmb3IgbDEwbiB0b2tlbiBjYW4ndCBiZSBzZXQgZGlyZWN0bHksIGJ1dCB0aHJvdWdoIGRpY3Rpb25hcnkgdXBkYXRlIG9ubHkiKTsKICAgICAgfSwKICAgICAgc2V0VHlwZTogZnVuY3Rpb24odHlwZSkgewogICAgICAgIGlmICh0eXBlICE9ICJwbHVyYWwiICYmICghYmFzaXMubDEwbi5lbmFibGVNYXJrdXAgfHwgdHlwZSAhPSAibWFya3VwIikpIHR5cGUgPSAiZGVmYXVsdCI7CiAgICAgICAgaWYgKHRoaXMudHlwZSAhPSB0eXBlKSB7CiAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlOwogICAgICAgICAgdGhpcy5hcHBseSgpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgY29tcHV0ZTogZnVuY3Rpb24oZXZlbnRzLCBnZXR0ZXIpIHsKICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICBnZXR0ZXIgPSBldmVudHM7CiAgICAgICAgICBldmVudHMgPSAiIjsKICAgICAgICB9CiAgICAgICAgZ2V0dGVyID0gYmFzaXMuZ2V0dGVyKGdldHRlcik7CiAgICAgICAgZXZlbnRzID0gU3RyaW5nKGV2ZW50cykudHJpbSgpLnNwbGl0KC9ccyt8XHMqLFxzKi8pLnNvcnQoKTsKICAgICAgICB2YXIgdG9rZW5JZCA9IHRoaXMuYmFzaXNPYmplY3RJZDsKICAgICAgICB2YXIgZW51bUlkID0gZXZlbnRzLmNvbmNhdCh0b2tlbklkLCBnZXR0ZXJbYmFzaXMuZ2V0dGVyLklEXSkuam9pbigiXyIpOwogICAgICAgIGlmICh0b2tlbkNvbXB1dGVGbltlbnVtSWRdKSByZXR1cm4gdG9rZW5Db21wdXRlRm5bZW51bUlkXTsKICAgICAgICB2YXIgdG9rZW4gPSB0aGlzOwogICAgICAgIHZhciBvYmplY3RUb2tlbk1hcCA9IHt9OwogICAgICAgIHZhciB1cGRhdGVWYWx1ZSA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgICAgdXBkYXRlVG9rZW4uY2FsbCh0aGlzLCBnZXR0ZXIob2JqZWN0KSk7CiAgICAgICAgfTsKICAgICAgICB2YXIgaGFuZGxlciA9IHsKICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgICAgICBkZWxldGUgb2JqZWN0VG9rZW5NYXBbb2JqZWN0LmJhc2lzT2JqZWN0SWRdOwogICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGZvciAodmFyIGkgPSAwLCBldmVudE5hbWU7IGV2ZW50TmFtZSA9IGV2ZW50c1tpXTsgaSsrKSBpZiAoZXZlbnROYW1lICE9ICJkZXN0cm95IikgaGFuZGxlcltldmVudE5hbWVdID0gdXBkYXRlVmFsdWU7CiAgICAgICAgcmV0dXJuIHRva2VuQ29tcHV0ZUZuW2VudW1JZF0gPSBmdW5jdGlvbihvYmplY3QpIHsKICAgICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBFbWl0dGVyID09IGZhbHNlKSB0aHJvdyAiYmFzaXMubDEwbi5Ub2tlbiNjb21wdXRlOiBvYmplY3QgbXVzdCBiZSBhbiBpbnN0YW5jZW9mIEVtaXR0ZXIiOwogICAgICAgICAgdmFyIG9iamVjdElkID0gb2JqZWN0LmJhc2lzT2JqZWN0SWQ7CiAgICAgICAgICB2YXIgY29tcHV0ZVRva2VuID0gb2JqZWN0VG9rZW5NYXBbb2JqZWN0SWRdOwogICAgICAgICAgaWYgKCFjb21wdXRlVG9rZW4pIHsKICAgICAgICAgICAgY29tcHV0ZVRva2VuID0gb2JqZWN0VG9rZW5NYXBbb2JqZWN0SWRdID0gbmV3IENvbXB1dGVUb2tlbihnZXR0ZXIob2JqZWN0KSwgdG9rZW4pOwogICAgICAgICAgICBvYmplY3QuYWRkSGFuZGxlcihoYW5kbGVyLCBjb21wdXRlVG9rZW4pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGNvbXB1dGVUb2tlbjsKICAgICAgICB9OwogICAgICB9LAogICAgICBjb21wdXRlVG9rZW46IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuIG5ldyBDb21wdXRlVG9rZW4odmFsdWUsIHRoaXMpOwogICAgICB9LAogICAgICB0b2tlbjogZnVuY3Rpb24obmFtZSkgewogICAgICAgIGlmICh0aGlzLnR5cGUgPT0gInBsdXJhbCIpIG5hbWUgPSBjdWx0dXJlc1tjdXJyZW50Q3VsdHVyZV0ucGx1cmFsKG5hbWUpOwogICAgICAgIGlmICh0aGlzLmRpY3Rpb25hcnkpIHJldHVybiB0aGlzLmRpY3Rpb25hcnkudG9rZW4odGhpcy5uYW1lICsgIi4iICsgbmFtZSk7CiAgICAgIH0sCiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkgewogICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNvbXB1dGVUb2tlbnMpIHRoaXMuY29tcHV0ZVRva2Vuc1trZXldLmRlc3Ryb3koKTsKICAgICAgICB0aGlzLmNvbXB1dGVUb2tlbnMgPSBudWxsOwogICAgICAgIHRoaXMudmFsdWUgPSBudWxsOwogICAgICAgIGJhc2lzLlRva2VuLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7CiAgICAgIH0KICAgIH0pOwogICAgZnVuY3Rpb24gcmVzb2x2ZVRva2VuKHBhdGgpIHsKICAgICAgaWYgKHBhdGguY2hhckF0KDApID09ICIjIikgewogICAgICAgIHJldHVybiB0b2tlbkluZGV4W3BhcnNlSW50KHBhdGguc3Vic3RyKDEpLCAzNildOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBwYXJ0cyA9IHBhdGgubWF0Y2goL14oLis/KUAoLispJC8pOwogICAgICAgIGlmIChwYXJ0cykgcmV0dXJuIHJlc29sdmVEaWN0aW9uYXJ5KGJhc2lzLnBhdGgucmVzb2x2ZShwYXJ0c1syXSkpLnRva2VuKHBhcnRzWzFdKTsKICAgICAgICBiYXNpcy5kZXYud2FybigiYmFzaXMubDEwbi50b2tlbiBhY2NlcHRzIHRva2VuIHJlZmVyZW5jZXMgaW4gZm9ybWF0IGB0b2tlbi5wYXRoQHBhdGgvdG8vZGljdC5sMTBuYCBvbmx5Iik7CiAgICAgIH0KICAgIH0KICAgIHZhciBkaWN0aW9uYXJpZXMgPSBbXTsKICAgIHZhciBkaWN0aW9uYXJ5QnlVcmwgPSB7fTsKICAgIHZhciBjcmVhdGVEaWN0aW9uYXJ5Tm90aWZpZXIgPSBuZXcgYmFzaXMuVG9rZW47CiAgICBmdW5jdGlvbiB3YWxrVG9rZW5zKGRpY3Rpb25hcnksIGN1bHR1cmUsIHRva2VucywgcGF0aCkgewogICAgICB2YXIgY3VsdHVyZVZhbHVlcyA9IGRpY3Rpb25hcnkuY3VsdHVyZVZhbHVlc1tjdWx0dXJlXTsKICAgICAgcGF0aCA9IHBhdGggPyBwYXRoICsgIi4iIDogIiI7CiAgICAgIGZvciAodmFyIG5hbWUgaW4gdG9rZW5zKSBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh0b2tlbnMsIG5hbWUpKSB7CiAgICAgICAgdmFyIHRva2VuTmFtZSA9IHBhdGggKyBuYW1lOwogICAgICAgIHZhciB0b2tlblZhbHVlID0gdG9rZW5zW25hbWVdOwogICAgICAgIGN1bHR1cmVWYWx1ZXNbdG9rZW5OYW1lXSA9IHRva2VuVmFsdWU7CiAgICAgICAgaWYgKHRva2VuVmFsdWUgJiYgKHR5cGVvZiB0b2tlblZhbHVlID09ICJvYmplY3QiIHx8IEFycmF5LmlzQXJyYXkodG9rZW5WYWx1ZSkpKSB3YWxrVG9rZW5zKGRpY3Rpb25hcnksIGN1bHR1cmUsIHRva2VuVmFsdWUsIHRva2VuTmFtZSk7CiAgICAgIH0KICAgIH0KICAgIHZhciBEaWN0aW9uYXJ5ID0gQ2xhc3MobnVsbCwgewogICAgICBjbGFzc05hbWU6IG5hbWVzcGFjZSArICIuRGljdGlvbmFyeSIsCiAgICAgIHRva2VuczogbnVsbCwKICAgICAgdHlwZXM6IG51bGwsCiAgICAgIGN1bHR1cmVWYWx1ZXM6IG51bGwsCiAgICAgIGluZGV4OiBOYU4sCiAgICAgIHJlc291cmNlOiBudWxsLAogICAgICBpbml0OiBmdW5jdGlvbihjb250ZW50KSB7CiAgICAgICAgdGhpcy50b2tlbnMgPSB7fTsKICAgICAgICB0aGlzLnR5cGVzID0ge307CiAgICAgICAgdGhpcy5jdWx0dXJlVmFsdWVzID0ge307CiAgICAgICAgdGhpcy5pbmRleCA9IGRpY3Rpb25hcmllcy5wdXNoKHRoaXMpIC0gMTsKICAgICAgICBpZiAoYmFzaXMucmVzb3VyY2UuaXNSZXNvdXJjZShjb250ZW50KSkgewogICAgICAgICAgdmFyIHJlc291cmNlID0gY29udGVudDsKICAgICAgICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTsKICAgICAgICAgIGlmICghZGljdGlvbmFyeUJ5VXJsW3Jlc291cmNlLnVybF0pIHsKICAgICAgICAgICAgZGljdGlvbmFyeUJ5VXJsW3Jlc291cmNlLnVybF0gPSB0aGlzOwogICAgICAgICAgICBjcmVhdGVEaWN0aW9uYXJ5Tm90aWZpZXIuc2V0KHJlc291cmNlLnVybCk7CiAgICAgICAgICB9CiAgICAgICAgICByZXNvdXJjZS5mZXRjaCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBiYXNpcy5kZXYud2FybigiVXNlIG9iamVjdCBhcyBjb250ZW50IG9mIGRpY3Rpb25hcnkgaXMgZXhwZXJpbWVudGFsIGFuZCBub3QgcHJvZHVjdGlvbi1yZWFkeSIpOwogICAgICAgICAgdGhpcy51cGRhdGUoY29udGVudCB8fCB7fSk7CiAgICAgICAgfQogICAgICB9LAogICAgICB1cGRhdGU6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICBpZiAoIWRhdGEpIGRhdGEgPSB7fTsKICAgICAgICB0aGlzLmN1bHR1cmVWYWx1ZXMgPSB7fTsKICAgICAgICBmb3IgKHZhciBjdWx0dXJlIGluIGRhdGEpIGlmICghL15ffF8kLy50ZXN0KGN1bHR1cmUpKSB7CiAgICAgICAgICB0aGlzLmN1bHR1cmVWYWx1ZXNbY3VsdHVyZV0gPSB7fTsKICAgICAgICAgIHdhbGtUb2tlbnModGhpcywgY3VsdHVyZSwgZGF0YVtjdWx0dXJlXSk7CiAgICAgICAgfQogICAgICAgIHRoaXMudHlwZXMgPSBkYXRhLl9tZXRhICYmIGRhdGEuX21ldGEudHlwZSB8fCB7fTsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy50b2tlbnMpIHRoaXMudG9rZW5zW2tleV0uc2V0VHlwZSh0aGlzLnR5cGVzW2tleV0pOwogICAgICAgIHRoaXMuc3luY1ZhbHVlcygpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9LAogICAgICBzeW5jVmFsdWVzOiBmdW5jdGlvbigpIHsKICAgICAgICBmb3IgKHZhciB0b2tlbk5hbWUgaW4gdGhpcy50b2tlbnMpIHVwZGF0ZVRva2VuLmNhbGwodGhpcy50b2tlbnNbdG9rZW5OYW1lXSwgdGhpcy5nZXRWYWx1ZSh0b2tlbk5hbWUpKTsKICAgICAgfSwKICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKHRva2VuTmFtZSkgewogICAgICAgIHZhciBmYWxsYmFjayA9IGN1bHR1cmVGYWxsYmFja1tjdXJyZW50Q3VsdHVyZV0gfHwgW107CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGN1bHR1cmVOYW1lOyBjdWx0dXJlTmFtZSA9IGZhbGxiYWNrW2ldOyBpKyspIHsKICAgICAgICAgIHZhciBjdWx0dXJlVmFsdWVzID0gdGhpcy5jdWx0dXJlVmFsdWVzW2N1bHR1cmVOYW1lXTsKICAgICAgICAgIGlmIChjdWx0dXJlVmFsdWVzICYmIHRva2VuTmFtZSBpbiBjdWx0dXJlVmFsdWVzKSByZXR1cm4gY3VsdHVyZVZhbHVlc1t0b2tlbk5hbWVdOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZ2V0Q3VsdHVyZVZhbHVlOiBmdW5jdGlvbihjdWx0dXJlLCB0b2tlbk5hbWUpIHsKICAgICAgICByZXR1cm4gdGhpcy5jdWx0dXJlVmFsdWVzW2N1bHR1cmVdICYmIHRoaXMuY3VsdHVyZVZhbHVlc1tjdWx0dXJlXVt0b2tlbk5hbWVdOwogICAgICB9LAogICAgICB0b2tlbjogZnVuY3Rpb24odG9rZW5OYW1lKSB7CiAgICAgICAgdmFyIHRva2VuID0gdGhpcy50b2tlbnNbdG9rZW5OYW1lXTsKICAgICAgICBpZiAoIXRva2VuKSB7CiAgICAgICAgICB0b2tlbiA9IHRoaXMudG9rZW5zW3Rva2VuTmFtZV0gPSBuZXcgVG9rZW4odGhpcywgdG9rZW5OYW1lLCB0aGlzLnR5cGVzW3Rva2VuTmFtZV0sIHRoaXMuZ2V0VmFsdWUodG9rZW5OYW1lKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0b2tlbjsKICAgICAgfSwKICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy50b2tlbnMgPSBudWxsOwogICAgICAgIHRoaXMuY3VsdHVyZVZhbHVlcyA9IG51bGw7CiAgICAgICAgYmFzaXMuYXJyYXkucmVtb3ZlKGRpY3Rpb25hcmllcywgdGhpcyk7CiAgICAgICAgaWYgKHRoaXMucmVzb3VyY2UpIHsKICAgICAgICAgIGRlbGV0ZSBkaWN0aW9uYXJ5QnlVcmxbdGhpcy5yZXNvdXJjZS51cmxdOwogICAgICAgICAgdGhpcy5yZXNvdXJjZSA9IG51bGw7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIGZ1bmN0aW9uIHJlc29sdmVEaWN0aW9uYXJ5KHNvdXJjZSkgewogICAgICB2YXIgZGljdGlvbmFyeTsKICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT0gInN0cmluZyIpIHsKICAgICAgICB2YXIgbG9jYXRpb24gPSBzb3VyY2U7CiAgICAgICAgdmFyIGV4dG5hbWUgPSBiYXNpcy5wYXRoLmV4dG5hbWUobG9jYXRpb24pOwogICAgICAgIGlmIChleHRuYW1lICE9ICIubDEwbiIpIGxvY2F0aW9uID0gYmFzaXMucGF0aC5kaXJuYW1lKGxvY2F0aW9uKSArICIvIiArIGJhc2lzLnBhdGguYmFzZW5hbWUobG9jYXRpb24sIGV4dG5hbWUpICsgIi5sMTBuIjsKICAgICAgICBzb3VyY2UgPSBiYXNpcy5yZXNvdXJjZShsb2NhdGlvbik7CiAgICAgIH0KICAgICAgaWYgKGJhc2lzLnJlc291cmNlLmlzUmVzb3VyY2Uoc291cmNlKSkgZGljdGlvbmFyeSA9IGRpY3Rpb25hcnlCeVVybFtzb3VyY2UudXJsXTsKICAgICAgcmV0dXJuIGRpY3Rpb25hcnkgfHwgbmV3IERpY3Rpb25hcnkoc291cmNlKTsKICAgIH0KICAgIGZ1bmN0aW9uIGdldERpY3Rpb25hcmllcygpIHsKICAgICAgcmV0dXJuIGRpY3Rpb25hcmllcy5zbGljZSgwKTsKICAgIH0KICAgIHZhciBjdWx0dXJlTGlzdCA9IFtdOwogICAgdmFyIGN1cnJlbnRDdWx0dXJlID0gbnVsbDsKICAgIHZhciBjdWx0dXJlcyA9IHt9OwogICAgdmFyIGN1bHR1cmVGYWxsYmFjayA9IHt9OwogICAgdmFyIHBsdXJhbEZvcm1zTWFwID0ge307CiAgICB2YXIgcGx1cmFsRm9ybXMgPSBbIFsgMSwgZnVuY3Rpb24obikgewogICAgICByZXR1cm4gMDsKICAgIH0gXSwgWyAyLCBmdW5jdGlvbihuKSB7CiAgICAgIHJldHVybiBuID09IDEgfHwgbiAlIDEwID09IDEgPyAwIDogMTsKICAgIH0gXSwgWyAyLCBmdW5jdGlvbihuKSB7CiAgICAgIHJldHVybiBuID09IDAgPyAwIDogMTsKICAgIH0gXSwgWyAyLCBmdW5jdGlvbihuKSB7CiAgICAgIHJldHVybiBuID09IDEgPyAwIDogMTsKICAgIH0gXSwgWyAyLCBmdW5jdGlvbihuKSB7CiAgICAgIHJldHVybiBuID09IDAgfHwgbiA9PSAxID8gMCA6IDE7CiAgICB9IF0sIFsgMiwgZnVuY3Rpb24obikgewogICAgICByZXR1cm4gbiAlIDEwICE9IDEgfHwgbiAlIDEwMCA9PSAxMSA/IDEgOiAwOwogICAgfSBdLCBbIDMsIGZ1bmN0aW9uKG4pIHsKICAgICAgcmV0dXJuIG4gPT0gMSA/IDAgOiBuICUgMTAgPj0gMiAmJiBuICUgMTAgPD0gNCAmJiAobiAlIDEwMCA8IDEwIHx8IG4gJSAxMDAgPj0gMjApID8gMSA6IDI7CiAgICB9IF0sIFsgMywgZnVuY3Rpb24obikgewogICAgICByZXR1cm4gbiAlIDEwID09IDEgJiYgbiAlIDEwMCAhPSAxMSA/IDAgOiBuICE9IDAgPyAxIDogMjsKICAgIH0gXSwgWyAzLCBmdW5jdGlvbihuKSB7CiAgICAgIHJldHVybiBuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gJSAxMCA+PSAyICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMjsKICAgIH0gXSwgWyAzLCBmdW5jdGlvbihuKSB7CiAgICAgIHJldHVybiBuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gJSAxMCA+PSAyICYmIG4gJSAxMCA8PSA0ICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMjsKICAgIH0gXSwgWyAzLCBmdW5jdGlvbihuKSB7CiAgICAgIHJldHVybiBuID09IDAgPyAwIDogbiA9PSAxID8gMSA6IDI7CiAgICB9IF0sIFsgMywgZnVuY3Rpb24obikgewogICAgICByZXR1cm4gbiA9PSAxID8gMCA6IG4gPT0gMCB8fCBuICUgMTAwID4gMCAmJiBuICUgMTAwIDwgMjAgPyAxIDogMjsKICAgIH0gXSwgWyAzLCBmdW5jdGlvbihuKSB7CiAgICAgIHJldHVybiBuID09IDEgPyAwIDogbiAlIDEwID49IDIgJiYgbiAlIDEwIDw9IDQgJiYgKG4gJSAxMDAgPCAxMCB8fCBuICUgMTAwID49IDIwKSA/IDEgOiAyOwogICAgfSBdLCBbIDMsIGZ1bmN0aW9uKG4pIHsKICAgICAgcmV0dXJuIG4gPT0gMSA/IDAgOiBuID49IDIgJiYgbiA8PSA0ID8gMSA6IDI7CiAgICB9IF0sIFsgNCwgZnVuY3Rpb24obikgewogICAgICByZXR1cm4gbiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuICE9IDggJiYgbiAhPSAxMSA/IDIgOiAzOwogICAgfSBdLCBbIDQsIGZ1bmN0aW9uKG4pIHsKICAgICAgcmV0dXJuIG4gPT0gMSA/IDAgOiBuID09IDIgPyAxIDogbiA9PSAzID8gMiA6IDM7CiAgICB9IF0sIFsgNCwgZnVuY3Rpb24obikgewogICAgICByZXR1cm4gbiAlIDEwMCA9PSAxID8gMSA6IG4gJSAxMDAgPT0gMiA/IDIgOiBuICUgMTAwID09IDMgfHwgbiAlIDEwMCA9PSA0ID8gMyA6IDA7CiAgICB9IF0sIFsgNCwgZnVuY3Rpb24obikgewogICAgICByZXR1cm4gbiA9PSAxID8gMCA6IG4gPT0gMCB8fCBuICUgMTAwID4gMSAmJiBuICUgMTAwIDwgMTEgPyAxIDogbiAlIDEwMCA+IDEwICYmIG4gJSAxMDAgPCAyMCA/IDIgOiAzOwogICAgfSBdLCBbIDQsIGZ1bmN0aW9uKG4pIHsKICAgICAgcmV0dXJuIG4gPT0gMSB8fCBuID09IDExID8gMCA6IG4gPT0gMiB8fCBuID09IDEyID8gMSA6IG4gPiAyICYmIG4gPCAyMCA/IDIgOiAzOwogICAgfSBdLCBbIDUsIGZ1bmN0aW9uKG4pIHsKICAgICAgcmV0dXJuIG4gPT0gMSA/IDAgOiBuID09IDIgPyAxIDogbiA8IDcgPyAyIDogbiA8IDExID8gMyA6IDQ7CiAgICB9IF0sIFsgNiwgZnVuY3Rpb24obikgewogICAgICByZXR1cm4gbiA9PSAwID8gMCA6IG4gPT0gMSA/IDEgOiBuID09IDIgPyAyIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTAgPyAzIDogbiAlIDEwMCA+PSAxMSA/IDQgOiA1OwogICAgfSBdIF07CiAgICBbICJheSBibyBjZ2cgZHogZmEgaWQgamEgamJvIGthIGtrIGttIGtvIGt5IGxvIG1zIG15IHNhaCBzdSB0aCB0dCB1ZyB2aSB3byB6aCIsICJtayIsICJqdiIsICJhZiBhbiBhc3QgYXogYmcgYm4gYnJ4IGNhIGRhIGRlIGRvaSBlbCBlbiBlbyBlcyBlcy1BUiBldCBldSBmZiBmaSBmbyBmdXIgZnkgZ2wgZ3UgaGEgaGUgaGkgaG5lIGh1IGh5IGlhIGl0IGtuIGt1IGxiIG1haSBtbCBtbiBtbmkgbXIgbmFoIG5hcCBuYiBuZSBubCBubiBubyBuc28gb3IgcGEgcGFwIHBtcyBwcyBwdCBybSBydyBzYXQgc2NvIHNkIHNlIHNpIHNvIHNvbiBzcSBzdiBzdyB0YSB0ZSB0ayB1ciB5byIsICJhY2ggYWsgYW0gYXJuIGJyIGZpbCBmciBndW4gbG4gbWZlIG1nIG1pIG9jIHB0LUJSIHRnIHRpIHRyIHV6IHdhIHpoIiwgImlzIiwgImNzYiIsICJsdiIsICJsdCIsICJiZSBicyBociBydSBzciB1ayIsICJtbmsiLCAicm8iLCAicGwiLCAiY3Mgc2siLCAiY3kiLCAia3ciLCAic2wiLCAibXQiLCAiZ2QiLCAiZ2EiLCAiYXIiIF0uZm9yRWFjaChmdW5jdGlvbihsYW5ncywgaWR4KSB7CiAgICAgIGxhbmdzLnNwbGl0KCIgIikuZm9yRWFjaChmdW5jdGlvbihsYW5nKSB7CiAgICAgICAgcGx1cmFsRm9ybXNNYXBbbGFuZ10gPSB0aGlzOwogICAgICB9LCBwbHVyYWxGb3Jtc1tpZHhdKTsKICAgIH0pOwogICAgdmFyIEN1bHR1cmUgPSBiYXNpcy5DbGFzcyhudWxsLCB7CiAgICAgIGNsYXNzTmFtZTogbmFtZXNwYWNlICsgIi5DdWx0dXJlIiwKICAgICAgbmFtZTogIiIsCiAgICAgIHBsdXJhbEZvcm06IG51bGwsCiAgICAgIGluaXQ6IGZ1bmN0aW9uKG5hbWUsIHBsdXJhbEZvcm0pIHsKICAgICAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICAgIGlmICghY3VsdHVyZXNbbmFtZV0pIGN1bHR1cmVzW25hbWVdID0gdGhpczsKICAgICAgICB0aGlzLnBsdXJhbEZvcm0gPSBwbHVyYWxGb3JtIHx8IHBsdXJhbEZvcm1zTWFwW25hbWVdIHx8IHBsdXJhbEZvcm1zTWFwW25hbWUuc3BsaXQoIi0iKVswXV0gfHwgcGx1cmFsRm9ybXNbMF07CiAgICAgIH0sCiAgICAgIHBsdXJhbDogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICByZXR1cm4gTnVtYmVyKHRoaXMucGx1cmFsRm9ybVsxXShNYXRoLmFicyhwYXJzZUludCh2YWx1ZSwgMTApKSkpOwogICAgICB9CiAgICB9KTsKICAgIGZ1bmN0aW9uIHJlc29sdmVDdWx0dXJlKG5hbWUsIHBsdXJhbEZvcm0pIHsKICAgICAgaWYgKG5hbWUgJiYgIWN1bHR1cmVzW25hbWVdKSBjdWx0dXJlc1tuYW1lXSA9IG5ldyBDdWx0dXJlKG5hbWUsIHBsdXJhbEZvcm0pOwogICAgICByZXR1cm4gY3VsdHVyZXNbbmFtZSB8fCBjdXJyZW50Q3VsdHVyZV07CiAgICB9CiAgICBiYXNpcy5vYmplY3QuZXh0ZW5kKHJlc29sdmVDdWx0dXJlLCBuZXcgYmFzaXMuVG9rZW4pOwogICAgcmVzb2x2ZUN1bHR1cmUuc2V0ID0gc2V0Q3VsdHVyZTsKICAgIGZ1bmN0aW9uIGdldEN1bHR1cmUoKSB7CiAgICAgIHJldHVybiBjdXJyZW50Q3VsdHVyZTsKICAgIH0KICAgIGZ1bmN0aW9uIHNldEN1bHR1cmUoY3VsdHVyZSkgewogICAgICBpZiAoIWN1bHR1cmUpIHJldHVybjsKICAgICAgaWYgKGN1cnJlbnRDdWx0dXJlICE9IGN1bHR1cmUpIHsKICAgICAgICBpZiAoY3VsdHVyZUxpc3QuaW5kZXhPZihjdWx0dXJlKSA9PSAtMSkgewogICAgICAgICAgYmFzaXMuZGV2Lndhcm4oImJhc2lzLmwxMG4uc2V0Q3VsdHVyZTogY3VsdHVyZSBgIiArIGN1bHR1cmUgKyAiYCBub3QgaW4gdGhlIGxpc3QsIHRoZSBjdWx0dXJlIGlzbid0IGNoYW5nZWQiKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY3VycmVudEN1bHR1cmUgPSBjdWx0dXJlOwogICAgICAgIGZvciAodmFyIGkgPSAwLCBkaWN0aW9uYXJ5OyBkaWN0aW9uYXJ5ID0gZGljdGlvbmFyaWVzW2ldOyBpKyspIGRpY3Rpb25hcnkuc3luY1ZhbHVlcygpOwogICAgICAgIGJhc2lzLlRva2VuLnByb3RvdHlwZS5zZXQuY2FsbChyZXNvbHZlQ3VsdHVyZSwgY3VsdHVyZSk7CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGdldEN1bHR1cmVMaXN0KCkgewogICAgICByZXR1cm4gY3VsdHVyZUxpc3Quc2xpY2UoMCk7CiAgICB9CiAgICBmdW5jdGlvbiBzZXRDdWx0dXJlTGlzdChsaXN0KSB7CiAgICAgIGlmICh0eXBlb2YgbGlzdCA9PSAic3RyaW5nIikgbGlzdCA9IGxpc3QudHJpbSgpLnNwbGl0KCIgIik7CiAgICAgIGlmICghbGlzdC5sZW5ndGgpIHsKICAgICAgICBiYXNpcy5kZXYud2FybigiYmFzaXMubDEwbi5zZXRDdWx0dXJlTGlzdDogY3VsdHVyZSBsaXN0IGNhbid0IGJlIGVtcHR5LCB0aGUgY3VsdHVyZSBsaXN0IGlzbid0IGNoYW5nZWQiKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIGN1bHR1cmVzID0ge307CiAgICAgIHZhciBjdWx0dXJlUm93OwogICAgICB2YXIgYmFzZUN1bHR1cmU7CiAgICAgIGN1bHR1cmVGYWxsYmFjayA9IHt9OwogICAgICBmb3IgKHZhciBpID0gMCwgY3VsdHVyZSwgY3VsdHVyZU5hbWU7IGN1bHR1cmUgPSBsaXN0W2ldOyBpKyspIHsKICAgICAgICBjdWx0dXJlUm93ID0gY3VsdHVyZS5zcGxpdCgiLyIpOwogICAgICAgIGlmIChjdWx0dXJlUm93Lmxlbmd0aCA+IDIpIHsKICAgICAgICAgIGJhc2lzLmRldi53YXJuKCJiYXNpcy5sMTBuLnNldEN1bHR1cmVMaXN0OiBvbmx5IG9uZSBmYWxsYmFjayBjdWx0dXJlIGNhbiBiZSBzZXQgZm9yIGNlcnRhaW4gY3VsdHVyZSwgdHJ5IHRvIHNldCBgIiArIGN1bHR1cmUgKyAiYDsgb3RoZXIgY3VsdHVyZXMgZXhjZXB0IGZpcnN0IG9uZSB3YXMgaWdub3JlZCIpOwogICAgICAgICAgY3VsdHVyZVJvdyA9IGN1bHR1cmVSb3cuc2xpY2UoMCwgMik7CiAgICAgICAgfQogICAgICAgIGN1bHR1cmVOYW1lID0gY3VsdHVyZVJvd1swXTsKICAgICAgICBpZiAoIWJhc2VDdWx0dXJlKSBiYXNlQ3VsdHVyZSA9IGN1bHR1cmVOYW1lOwogICAgICAgIGN1bHR1cmVzW2N1bHR1cmVOYW1lXSA9IHJlc29sdmVDdWx0dXJlKGN1bHR1cmVOYW1lKTsKICAgICAgICBjdWx0dXJlRmFsbGJhY2tbY3VsdHVyZU5hbWVdID0gY3VsdHVyZVJvdzsKICAgICAgfQogICAgICBmb3IgKHZhciBjdWx0dXJlTmFtZSBpbiBjdWx0dXJlRmFsbGJhY2spIHsKICAgICAgICBjdWx0dXJlRmFsbGJhY2tbY3VsdHVyZU5hbWVdID0gYmFzaXMuYXJyYXkuZmxhdHRlbihjdWx0dXJlRmFsbGJhY2tbY3VsdHVyZU5hbWVdLm1hcChmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICByZXR1cm4gY3VsdHVyZUZhbGxiYWNrW25hbWVdOwogICAgICAgIH0pKS5jb25jYXQoYmFzZUN1bHR1cmUpLmZpbHRlcihmdW5jdGlvbihpdGVtLCBpZHgsIGFycmF5KSB7CiAgICAgICAgICByZXR1cm4gIWlkeCB8fCBhcnJheS5sYXN0SW5kZXhPZihpdGVtLCBpZHggLSAxKSA9PSAtMTsKICAgICAgICB9KTsKICAgICAgfQogICAgICBjdWx0dXJlTGlzdCA9IGJhc2lzLm9iamVjdC5rZXlzKGN1bHR1cmVzKTsKICAgICAgaWYgKGN1cnJlbnRDdWx0dXJlIGluIGN1bHR1cmVzID09IGZhbHNlKSBzZXRDdWx0dXJlKGJhc2VDdWx0dXJlKTsKICAgIH0KICAgIGZ1bmN0aW9uIG9uQ3VsdHVyZUNoYW5nZShmbiwgY29udGV4dCwgZmlyZSkgewogICAgICByZXNvbHZlQ3VsdHVyZS5hdHRhY2goZm4sIGNvbnRleHQpOwogICAgICBpZiAoZmlyZSkgZm4uY2FsbChjb250ZXh0LCBjdXJyZW50Q3VsdHVyZSk7CiAgICB9CiAgICBzZXRDdWx0dXJlTGlzdCgiZW4tVVMiKTsKICAgIHNldEN1bHR1cmUoImVuLVVTIik7CiAgICBtb2R1bGUuZXhwb3J0cyA9IHsKICAgICAgQ29tcHV0ZVRva2VuOiBDb21wdXRlVG9rZW4sCiAgICAgIFRva2VuOiBUb2tlbiwKICAgICAgdG9rZW46IHJlc29sdmVUb2tlbiwKICAgICAgRGljdGlvbmFyeTogRGljdGlvbmFyeSwKICAgICAgZGljdGlvbmFyeTogcmVzb2x2ZURpY3Rpb25hcnksCiAgICAgIGdldERpY3Rpb25hcmllczogZ2V0RGljdGlvbmFyaWVzLAogICAgICBhZGRDcmVhdGVEaWN0aW9uYXJ5SGFuZGxlcjogY3JlYXRlRGljdGlvbmFyeU5vdGlmaWVyLmF0dGFjaC5iaW5kKGNyZWF0ZURpY3Rpb25hcnlOb3RpZmllciksCiAgICAgIHJlbW92ZUNyZWF0ZURpY3Rpb25hcnlIYW5kbGVyOiBjcmVhdGVEaWN0aW9uYXJ5Tm90aWZpZXIuZGV0YWNoLmJpbmQoY3JlYXRlRGljdGlvbmFyeU5vdGlmaWVyKSwKICAgICAgQ3VsdHVyZTogQ3VsdHVyZSwKICAgICAgY3VsdHVyZTogcmVzb2x2ZUN1bHR1cmUsCiAgICAgIGdldEN1bHR1cmU6IGdldEN1bHR1cmUsCiAgICAgIHNldEN1bHR1cmU6IHNldEN1bHR1cmUsCiAgICAgIGdldEN1bHR1cmVMaXN0OiBnZXRDdWx0dXJlTGlzdCwKICAgICAgc2V0Q3VsdHVyZUxpc3Q6IHNldEN1bHR1cmVMaXN0LAogICAgICBwbHVyYWxGb3JtczogcGx1cmFsRm9ybXMsCiAgICAgIG9uQ3VsdHVyZUNoYW5nZTogb25DdWx0dXJlQ2hhbmdlCiAgICB9OwogIH0sCiAgIjQuanMiOiBmdW5jdGlvbihleHBvcnRzLCBtb2R1bGUsIGJhc2lzLCBnbG9iYWwsIF9fZmlsZW5hbWUsIF9fZGlybmFtZSwgcmVxdWlyZSwgcmVzb3VyY2UpIHsKICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLnBhdGg7CiAgICB2YXIgQ2xhc3MgPSBiYXNpcy5DbGFzczsKICAgIHZhciBleHRlbmQgPSBiYXNpcy5vYmplY3QuZXh0ZW5kOwogICAgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlOwogICAgdmFyIE5VTExfSEFORExFUiA9IHt9OwogICAgdmFyIGV2ZW50cyA9IHt9OwogICAgdmFyIHdhcm5PbkRlc3Ryb3kgPSBmdW5jdGlvbigpIHsKICAgICAgYmFzaXMuZGV2Lndhcm4oIk9iamVjdCBoYWQgYmVlbiBkZXN0cm95ZWQgYmVmb3JlLiBEZXN0cm95IG1ldGhvZCBtdXN0IG5vdCBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2UuIik7CiAgICB9OwogICAgZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hlcihldmVudE5hbWUpIHsKICAgICAgdmFyIGV2ZW50RnVuY3Rpb24gPSBldmVudHNbZXZlbnROYW1lXTsKICAgICAgaWYgKCFldmVudEZ1bmN0aW9uKSB7CiAgICAgICAgZXZlbnRGdW5jdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGN1cnNvciA9IHRoaXM7CiAgICAgICAgICB2YXIgYXJnczsKICAgICAgICAgIHZhciBmbjsKICAgICAgICAgIHdoaWxlIChjdXJzb3IgPSBjdXJzb3IuaGFuZGxlcikgewogICAgICAgICAgICBmbiA9IGN1cnNvci5jYWxsYmFja3NbZXZlbnROYW1lXTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgICAgaWYgKCFhcmdzKSB7CiAgICAgICAgICAgICAgICBhcmdzID0gWyB0aGlzIF07CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGZuLmFwcGx5KGN1cnNvci5jb250ZXh0IHx8IHRoaXMsIGFyZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZuID0gY3Vyc29yLmNhbGxiYWNrc1siKiJdOwogICAgICAgICAgICBpZiAodHlwZW9mIGZuID09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgICBpZiAoIWFyZ3MpIHsKICAgICAgICAgICAgICAgIGFyZ3MgPSBbIHRoaXMgXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm4uY2FsbChjdXJzb3IuY29udGV4dCB8fCB0aGlzLCB7CiAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMsCiAgICAgICAgICAgICAgICB0eXBlOiBldmVudE5hbWUsCiAgICAgICAgICAgICAgICBhcmdzOiBhcmdzCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICh0aGlzLmRlYnVnX2VtaXQpIHsKICAgICAgICAgICAgYXJncyA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7CiAgICAgICAgICAgIHRoaXMuZGVidWdfZW1pdCh7CiAgICAgICAgICAgICAgc2VuZGVyOiB0aGlzLAogICAgICAgICAgICAgIHR5cGU6IGV2ZW50TmFtZSwKICAgICAgICAgICAgICBhcmdzOiBhcmdzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgZXZlbnRGdW5jdGlvbiA9IChuZXcgRnVuY3Rpb24oInNsaWNlIiwgJ3JldHVybiB7IicgKyBuYW1lc3BhY2UgKyAiLmV2ZW50cy4iICsgZXZlbnROYW1lICsgJyI6XG5cbiAgICAgICcgKyAiZnVuY3Rpb24oIiArIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKS5qb2luKCIsICIpICsgIil7IiArIGV2ZW50RnVuY3Rpb24udG9TdHJpbmcoKS5yZXBsYWNlKC9cYmV2ZW50TmFtZVxiL2csICciJyArIGV2ZW50TmFtZSArICciJykucmVwbGFjZSgvXmZ1bmN0aW9uW14oXSpcKFwpW157XSpce3xcfSQvZywgIiIpICsgIn0iICsgJ1xuXG59WyInICsgbmFtZXNwYWNlICsgIi5ldmVudHMuIiArIGV2ZW50TmFtZSArICciXTsnKSkoc2xpY2UpOwogICAgICAgIGV2ZW50c1tldmVudE5hbWVdID0gZXZlbnRGdW5jdGlvbjsKICAgICAgfQogICAgICByZXR1cm4gZXZlbnRGdW5jdGlvbjsKICAgIH0KICAgIGZ1bmN0aW9uIGNyZWF0ZUhhbmRsZXIoZXZlbnRzLCBldmVudENhbGxiYWNrKSB7CiAgICAgIHZhciBoYW5kbGVyID0gewogICAgICAgIGV2ZW50czogW10KICAgICAgfTsKICAgICAgaWYgKGV2ZW50cykgewogICAgICAgIGV2ZW50cyA9IFN0cmluZyhldmVudHMpLnRyaW0oKS5zcGxpdCgvXHMrfFxzKixccyovKS5zb3J0KCk7CiAgICAgICAgaGFuZGxlciA9IHsKICAgICAgICAgIGV2ZW50czogZXZlbnRzCiAgICAgICAgfTsKICAgICAgICBmb3IgKHZhciBpID0gMCwgZXZlbnROYW1lOyBldmVudE5hbWUgPSBldmVudHNbaV07IGkrKykgaWYgKGV2ZW50TmFtZSAhPSAiZGVzdHJveSIpIGhhbmRsZXJbZXZlbnROYW1lXSA9IGV2ZW50Q2FsbGJhY2s7CiAgICAgIH0KICAgICAgcmV0dXJuIGhhbmRsZXI7CiAgICB9CiAgICB2YXIgRW1pdHRlciA9IENsYXNzKG51bGwsIHsKICAgICAgY2xhc3NOYW1lOiBuYW1lc3BhY2UgKyAiLkVtaXR0ZXIiLAogICAgICBleHRlbmRDb25zdHJ1Y3Rvcl86IHRydWUsCiAgICAgIGhhbmRsZXI6IG51bGwsCiAgICAgIGVtaXRfZGVzdHJveTogY3JlYXRlRGlzcGF0Y2hlcigiZGVzdHJveSIpLAogICAgICBsaXN0ZW46IENsYXNzLm5lc3RlZEV4dGVuZFByb3BlcnR5KCksCiAgICAgIGRlYnVnX2hhbmRsZXJzOiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgICAgdmFyIGN1cnNvciA9IHRoaXM7CiAgICAgICAgd2hpbGUgKGN1cnNvciA9IGN1cnNvci5oYW5kbGVyKSByZXN1bHQucHVzaChbIGN1cnNvci5jYWxsYmFja3MsIGN1cnNvci5jb250ZXh0IF0pOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH0sCiAgICAgIGRlYnVnX2VtaXQ6IG51bGwsCiAgICAgIGluaXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh0aGlzLmhhbmRsZXIgJiYgIXRoaXMuaGFuZGxlci5jYWxsYmFja3MpIHRoaXMuaGFuZGxlciA9IHsKICAgICAgICAgIGNhbGxiYWNrczogdGhpcy5oYW5kbGVyLAogICAgICAgICAgY29udGV4dDogdGhpcywKICAgICAgICAgIGhhbmRsZXI6IG51bGwKICAgICAgICB9OwogICAgICB9LAogICAgICBhZGRIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFja3MsIGNvbnRleHQpIHsKICAgICAgICBpZiAoIWNhbGxiYWNrcykgYmFzaXMuZGV2Lndhcm4obmFtZXNwYWNlICsgIi5FbWl0dGVyI2FkZEhhbmRsZXI6IGNhbGxiYWNrcyBpcyBub3QgYW4gb2JqZWN0ICgiLCBjYWxsYmFja3MsICIpIik7CiAgICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgdGhpczsKICAgICAgICB2YXIgY3Vyc29yID0gdGhpczsKICAgICAgICB3aGlsZSAoY3Vyc29yID0gY3Vyc29yLmhhbmRsZXIpIHsKICAgICAgICAgIGlmIChjdXJzb3IuY2FsbGJhY2tzID09PSBjYWxsYmFja3MgJiYgY3Vyc29yLmNvbnRleHQgPT09IGNvbnRleHQpIHsKICAgICAgICAgICAgYmFzaXMuZGV2Lndhcm4obmFtZXNwYWNlICsgIi5FbWl0dGVyI2FkZEhhbmRsZXI6IGFkZCBkdXBsaWNhdGUgZXZlbnQgY2FsbGJhY2tzIiwgY2FsbGJhY2tzLCAidG8gRW1pdHRlciBpbnN0YW5jZToiLCB0aGlzKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRoaXMuaGFuZGxlciA9IHsKICAgICAgICAgIGNhbGxiYWNrczogY2FsbGJhY2tzLAogICAgICAgICAgY29udGV4dDogY29udGV4dCwKICAgICAgICAgIGhhbmRsZXI6IHRoaXMuaGFuZGxlcgogICAgICAgIH07CiAgICAgIH0sCiAgICAgIHJlbW92ZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrcywgY29udGV4dCkgewogICAgICAgIHZhciBjdXJzb3IgPSB0aGlzOwogICAgICAgIHZhciBwcmV2OwogICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8IHRoaXM7CiAgICAgICAgd2hpbGUgKHByZXYgPSBjdXJzb3IsIGN1cnNvciA9IGN1cnNvci5oYW5kbGVyKSBpZiAoY3Vyc29yLmNhbGxiYWNrcyA9PT0gY2FsbGJhY2tzICYmIGN1cnNvci5jb250ZXh0ID09PSBjb250ZXh0KSB7CiAgICAgICAgICBjdXJzb3IuY2FsbGJhY2tzID0gTlVMTF9IQU5ETEVSOwogICAgICAgICAgcHJldi5oYW5kbGVyID0gY3Vyc29yLmhhbmRsZXI7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGJhc2lzLmRldi53YXJuKG5hbWVzcGFjZSArICIuRW1pdHRlciNyZW1vdmVIYW5kbGVyOiBubyBoYW5kbGVyIHJlbW92ZWQiKTsKICAgICAgfSwKICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5kZXN0cm95ID0gd2Fybk9uRGVzdHJveTsKICAgICAgICB0aGlzLmVtaXRfZGVzdHJveSgpOwogICAgICAgIHRoaXMuaGFuZGxlciA9IG51bGw7CiAgICAgIH0KICAgIH0pOwogICAgbW9kdWxlLmV4cG9ydHMgPSB7CiAgICAgIGNyZWF0ZTogY3JlYXRlRGlzcGF0Y2hlciwKICAgICAgY3JlYXRlSGFuZGxlcjogY3JlYXRlSGFuZGxlciwKICAgICAgZXZlbnRzOiBldmVudHMsCiAgICAgIEVtaXR0ZXI6IEVtaXR0ZXIKICAgIH07CiAgfSwKICAiNS5qcyI6IGZ1bmN0aW9uKGV4cG9ydHMsIG1vZHVsZSwgYmFzaXMsIGdsb2JhbCwgX19maWxlbmFtZSwgX19kaXJuYW1lLCByZXF1aXJlLCByZXNvdXJjZSkgewogICAgYmFzaXMucmVxdWlyZSgiLi8zLmpzIik7CiAgICB2YXIgbmFtZXNwYWNlID0gdGhpcy5wYXRoOwogICAgdmFyIENsYXNzID0gYmFzaXMuQ2xhc3M7CiAgICB2YXIgY2xlYW5lciA9IGJhc2lzLmNsZWFuZXI7CiAgICB2YXIgcGF0aCA9IGJhc2lzLnBhdGg7CiAgICB2YXIgYXJyYXlTZWFyY2ggPSBiYXNpcy5hcnJheS5zZWFyY2g7CiAgICB2YXIgYXJyYXlBZGQgPSBiYXNpcy5hcnJheS5hZGQ7CiAgICB2YXIgYXJyYXlSZW1vdmUgPSBiYXNpcy5hcnJheS5yZW1vdmU7CiAgICB2YXIgdGVtcGxhdGVMaXN0ID0gW107CiAgICB2YXIgdG1wbEZpbGVzTWFwID0ge307CiAgICB2YXIgREVDTEFSQVRJT05fVkVSU0lPTiA9IDI7CiAgICB2YXIgVFlQRV9FTEVNRU5UID0gMTsKICAgIHZhciBUWVBFX0FUVFJJQlVURSA9IDI7CiAgICB2YXIgVFlQRV9BVFRSSUJVVEVfQ0xBU1MgPSA0OwogICAgdmFyIFRZUEVfQVRUUklCVVRFX1NUWUxFID0gNTsKICAgIHZhciBUWVBFX0FUVFJJQlVURV9FVkVOVCA9IDY7CiAgICB2YXIgVFlQRV9URVhUID0gMzsKICAgIHZhciBUWVBFX0NPTU1FTlQgPSA4OwogICAgdmFyIFRPS0VOX1RZUEUgPSAwOwogICAgdmFyIFRPS0VOX0JJTkRJTkdTID0gMTsKICAgIHZhciBUT0tFTl9SRUZTID0gMjsKICAgIHZhciBBVFRSX05BTUUgPSAzOwogICAgdmFyIEFUVFJfVkFMVUUgPSA0OwogICAgdmFyIEFUVFJfRVZFTlRfUlggPSAvXmV2ZW50LSguKykkLzsKICAgIHZhciBBVFRSX05BTUVfQllfVFlQRSA9IHsKICAgICAgNDogImNsYXNzIiwKICAgICAgNTogInN0eWxlIgogICAgfTsKICAgIHZhciBBVFRSX1RZUEVfQllfTkFNRSA9IHsKICAgICAgImNsYXNzIjogVFlQRV9BVFRSSUJVVEVfQ0xBU1MsCiAgICAgIHN0eWxlOiBUWVBFX0FUVFJJQlVURV9TVFlMRQogICAgfTsKICAgIHZhciBBVFRSX1ZBTFVFX0lOREVYID0gewogICAgICAyOiBBVFRSX1ZBTFVFLAogICAgICA0OiBBVFRSX1ZBTFVFIC0gMSwKICAgICAgNTogQVRUUl9WQUxVRSAtIDEsCiAgICAgIDY6IDIKICAgIH07CiAgICB2YXIgRUxFTUVOVF9OQU1FID0gMzsKICAgIHZhciBFTEVNRU5UX0FUVFJTID0gNDsKICAgIHZhciBFTEVNRU5UX0NISUxEUyA9IDU7CiAgICB2YXIgVEVYVF9WQUxVRSA9IDM7CiAgICB2YXIgQ09NTUVOVF9WQUxVRSA9IDM7CiAgICB2YXIgU1lOVEFYX0VSUk9SID0gIkludmFsaWQgb3IgdW5zdXBwb3J0ZWQgc3ludGF4IjsKICAgIHZhciBURVhUID0gLygoPzoufFtcclxuXSkqPykoXHsoPzpsMTBuOihbYS16QS1aX11bYS16QS1aMC05X1wtXSooPzpcLlthLXpBLVpfXVthLXpBLVowLTlfXC1dKikqKD86XC5ce1thLXpBLVpfXVthLXpBLVowLTlfXC1dKlx9KT8pXH0pP3w8KFwvfCEtLShccypceyk/KT98JCkvZzsKICAgIHZhciBUQUdfTkFNRSA9IC8oW2Etel9dW2EtejAtOVwtX10qKSg6fFx7fFxzKihcLz8+KT8pL2lnOwogICAgdmFyIEFUVFJJQlVURV9OQU1FX09SX0VORCA9IC8oW2Etel9dW2EtejAtOV9cLV0qKSg6fFx7fD18XHMqKXwoXC8/PikvaWc7CiAgICB2YXIgQ09NTUVOVCA9IC8oLnxbXHJcbl0pKj8tLT4vZzsKICAgIHZhciBDTE9TRV9UQUcgPSAvKFthLXpfXVthLXowLTlfXC1dKig/OjpbYS16X11bYS16MC05X1wtXSopPyk+L2lnOwogICAgdmFyIFJFRkVSRU5DRSA9IC8oW2Etel9dW2EtejAtOV9dKikoXHx8XH1ccyopL2lnOwogICAgdmFyIEFUVFJJQlVURV9WQUxVRSA9IC8iKCg/OihcXCIpfFteIl0pKj8pIlxzKi9nOwogICAgdmFyIEJSRUFLX1RBR19QQVJTRSA9IC9eL2c7CiAgICB2YXIgU0lOR0xFVE9OX1RBRyA9IC9eKGFyZWF8YmFzZXxicnxjb2x8Y29tbWFuZHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtfHNvdXJjZSkkL2k7CiAgICB2YXIgVEFHX0lHTk9SRV9DT05URU5UID0gewogICAgICB0ZXh0OiAvKCg/Oi58W1xyXG5dKSo/KSg/OjxcL2I6dGV4dD58JCkvZywKICAgICAgc3R5bGU6IC8oKD86LnxbXHJcbl0pKj8pKD86PFwvYjpzdHlsZT58JCkvZwogICAgfTsKICAgIHZhciBxdW90ZVVuZXNjYXBlID0gL1xcIi9nOwogICAgdmFyIHRva2VuaXplID0gZnVuY3Rpb24oc291cmNlKSB7CiAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgdmFyIHRhZ1N0YWNrID0gW107CiAgICAgIHZhciBsYXN0VGFnID0gewogICAgICAgIGNoaWxkczogcmVzdWx0CiAgICAgIH07CiAgICAgIHZhciBzb3VyY2VUZXh0OwogICAgICB2YXIgdG9rZW47CiAgICAgIHZhciBidWZmZXJQb3M7CiAgICAgIHZhciBzdGFydFBvczsKICAgICAgdmFyIHBhcnNlVGFnID0gZmFsc2U7CiAgICAgIHZhciB0ZXh0U3RhdGVFbmRQb3MgPSAwOwogICAgICB2YXIgdGV4dEVuZFBvczsKICAgICAgdmFyIHN0YXRlID0gVEVYVDsKICAgICAgdmFyIHBvcyA9IDA7CiAgICAgIHZhciBtOwogICAgICBzb3VyY2UgPSBzb3VyY2UudHJpbSgpOwogICAgICByZXN1bHQud2FybnMgPSBbXTsKICAgICAgd2hpbGUgKHBvcyA8IHNvdXJjZS5sZW5ndGggfHwgc3RhdGUgIT0gVEVYVCkgewogICAgICAgIHN0YXRlLmxhc3RJbmRleCA9IHBvczsKICAgICAgICBzdGFydFBvcyA9IHBvczsKICAgICAgICBtID0gc3RhdGUuZXhlYyhzb3VyY2UpOwogICAgICAgIGlmICghbSB8fCBtLmluZGV4ICE9PSBwb3MpIHsKICAgICAgICAgIGlmIChzdGF0ZSA9PSBSRUZFUkVOQ0UgJiYgdG9rZW4gJiYgdG9rZW4udHlwZSA9PSBUWVBFX0NPTU1FTlQpIHsKICAgICAgICAgICAgc3RhdGUgPSBDT01NRU5UOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChwYXJzZVRhZykgbGFzdFRhZyA9IHRhZ1N0YWNrLnBvcCgpOwogICAgICAgICAgaWYgKHRva2VuKSBsYXN0VGFnLmNoaWxkcy5wb3AoKTsKICAgICAgICAgIGlmICh0b2tlbiA9IGxhc3RUYWcuY2hpbGRzLnBvcCgpKSB7CiAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09IFRZUEVfVEVYVCAmJiAhdG9rZW4ucmVmcykgdGV4dFN0YXRlRW5kUG9zIC09ICJsZW4iIGluIHRva2VuID8gdG9rZW4ubGVuIDogdG9rZW4udmFsdWUubGVuZ3RoOyBlbHNlIGxhc3RUYWcuY2hpbGRzLnB1c2godG9rZW4pOwogICAgICAgICAgfQogICAgICAgICAgcGFyc2VUYWcgPSBmYWxzZTsKICAgICAgICAgIHN0YXRlID0gVEVYVDsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBwb3MgPSBzdGF0ZS5sYXN0SW5kZXg7CiAgICAgICAgc3dpdGNoIChzdGF0ZSkgewogICAgICAgICAgY2FzZSBURVhUOgogICAgICAgICAgICB0ZXh0RW5kUG9zID0gc3RhcnRQb3MgKyBtWzFdLmxlbmd0aDsKICAgICAgICAgICAgaWYgKHRleHRTdGF0ZUVuZFBvcyAhPSB0ZXh0RW5kUG9zKSB7CiAgICAgICAgICAgICAgc291cmNlVGV4dCA9IHRleHRTdGF0ZUVuZFBvcyA9PSBzdGFydFBvcyA/IG1bMV0gOiBzb3VyY2Uuc3Vic3RyaW5nKHRleHRTdGF0ZUVuZFBvcywgdGV4dEVuZFBvcyk7CiAgICAgICAgICAgICAgdG9rZW4gPSBzb3VyY2VUZXh0LnJlcGxhY2UoL1xzKihcclxuP3xcblxyPylccyovZywgIiIpOwogICAgICAgICAgICAgIGlmICh0b2tlbikgbGFzdFRhZy5jaGlsZHMucHVzaCh7CiAgICAgICAgICAgICAgICB0eXBlOiBUWVBFX1RFWFQsCiAgICAgICAgICAgICAgICBsZW46IHNvdXJjZVRleHQubGVuZ3RoLAogICAgICAgICAgICAgICAgdmFsdWU6IHRva2VuCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGV4dFN0YXRlRW5kUG9zID0gdGV4dEVuZFBvczsKICAgICAgICAgICAgaWYgKG1bM10pIHsKICAgICAgICAgICAgICBsYXN0VGFnLmNoaWxkcy5wdXNoKHsKICAgICAgICAgICAgICAgIHR5cGU6IFRZUEVfVEVYVCwKICAgICAgICAgICAgICAgIHJlZnM6IFsgImwxMG46IiArIG1bM10gXSwKICAgICAgICAgICAgICAgIHZhbHVlOiAie2wxMG46IiArIG1bM10gKyAifSIKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChtWzJdID09ICJ7IikgewogICAgICAgICAgICAgIGJ1ZmZlclBvcyA9IHBvcyAtIDE7CiAgICAgICAgICAgICAgbGFzdFRhZy5jaGlsZHMucHVzaCh0b2tlbiA9IHsKICAgICAgICAgICAgICAgIHR5cGU6IFRZUEVfVEVYVAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHN0YXRlID0gUkVGRVJFTkNFOwogICAgICAgICAgICB9IGVsc2UgaWYgKG1bNF0pIHsKICAgICAgICAgICAgICBpZiAobVs0XSA9PSAiLyIpIHsKICAgICAgICAgICAgICAgIHRva2VuID0gbnVsbDsKICAgICAgICAgICAgICAgIHN0YXRlID0gQ0xPU0VfVEFHOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsYXN0VGFnLmNoaWxkcy5wdXNoKHRva2VuID0gewogICAgICAgICAgICAgICAgICB0eXBlOiBUWVBFX0NPTU1FTlQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKG1bNV0pIHsKICAgICAgICAgICAgICAgICAgYnVmZmVyUG9zID0gcG9zIC0gbVs1XS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgIHN0YXRlID0gUkVGRVJFTkNFOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgYnVmZmVyUG9zID0gcG9zOwogICAgICAgICAgICAgICAgICBzdGF0ZSA9IENPTU1FTlQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKG1bMl0pIHsKICAgICAgICAgICAgICBwYXJzZVRhZyA9IHRydWU7CiAgICAgICAgICAgICAgdGFnU3RhY2sucHVzaChsYXN0VGFnKTsKICAgICAgICAgICAgICBsYXN0VGFnLmNoaWxkcy5wdXNoKHRva2VuID0gewogICAgICAgICAgICAgICAgdHlwZTogVFlQRV9FTEVNRU5ULAogICAgICAgICAgICAgICAgYXR0cnM6IFtdLAogICAgICAgICAgICAgICAgY2hpbGRzOiBbXQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGxhc3RUYWcgPSB0b2tlbjsKICAgICAgICAgICAgICBzdGF0ZSA9IFRBR19OQU1FOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBDTE9TRV9UQUc6CiAgICAgICAgICAgIGlmIChtWzFdICE9PSAobGFzdFRhZy5wcmVmaXggPyBsYXN0VGFnLnByZWZpeCArICI6IiA6ICIiKSArIGxhc3RUYWcubmFtZSkgewogICAgICAgICAgICAgIGxhc3RUYWcuY2hpbGRzLnB1c2goewogICAgICAgICAgICAgICAgdHlwZTogVFlQRV9URVhULAogICAgICAgICAgICAgICAgdmFsdWU6ICI8LyIgKyBtWzBdCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBsYXN0VGFnID0gdGFnU3RhY2sucG9wKCk7CiAgICAgICAgICAgIHN0YXRlID0gVEVYVDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIFRBR19OQU1FOgogICAgICAgICAgY2FzZSBBVFRSSUJVVEVfTkFNRV9PUl9FTkQ6CiAgICAgICAgICAgIGlmIChtWzJdID09ICI6IikgewogICAgICAgICAgICAgIGlmICh0b2tlbi5wcmVmaXgpIHN0YXRlID0gQlJFQUtfVEFHX1BBUlNFOyBlbHNlIHRva2VuLnByZWZpeCA9IG1bMV07CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG1bMV0pIHsKICAgICAgICAgICAgICB0b2tlbi5uYW1lID0gbVsxXTsKICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PSBUWVBFX0FUVFJJQlVURSkgbGFzdFRhZy5hdHRycy5wdXNoKHRva2VuKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobVsyXSA9PSAieyIpIHsKICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PSBUWVBFX0VMRU1FTlQpIHN0YXRlID0gUkVGRVJFTkNFOyBlbHNlIHN0YXRlID0gQlJFQUtfVEFHX1BBUlNFOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChtWzNdKSB7CiAgICAgICAgICAgICAgcGFyc2VUYWcgPSBmYWxzZTsKICAgICAgICAgICAgICBpZiAobVszXSA9PSAiLz4iIHx8ICFsYXN0VGFnLnByZWZpeCAmJiBTSU5HTEVUT05fVEFHLnRlc3QobGFzdFRhZy5uYW1lKSkgewogICAgICAgICAgICAgICAgaWYgKG1bM10gIT0gIi8+IikgcmVzdWx0Lndhcm5zLnB1c2goIlRhZyA8IiArIGxhc3RUYWcubmFtZSArICI+IGRvZXNuJ3QgY2xvc2VkIGV4cGxpY2l0ICh1c2UgYC8+YCBhcyB0YWcgZW5kaW5nKSIpOwogICAgICAgICAgICAgICAgbGFzdFRhZyA9IHRhZ1N0YWNrLnBvcCgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAobGFzdFRhZy5wcmVmaXggPT0gImIiICYmIGxhc3RUYWcubmFtZSBpbiBUQUdfSUdOT1JFX0NPTlRFTlQpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUgPSBUQUdfSUdOT1JFX0NPTlRFTlRbbGFzdFRhZy5uYW1lXTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHN0YXRlID0gVEVYVDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobVsyXSA9PSAiPSIpIHsKICAgICAgICAgICAgICBzdGF0ZSA9IEFUVFJJQlVURV9WQUxVRTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICB0b2tlbiA9IHsKICAgICAgICAgICAgICB0eXBlOiBUWVBFX0FUVFJJQlVURQogICAgICAgICAgICB9OwogICAgICAgICAgICBzdGF0ZSA9IEFUVFJJQlVURV9OQU1FX09SX0VORDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIENPTU1FTlQ6CiAgICAgICAgICAgIHRva2VuLnZhbHVlID0gc291cmNlLnN1YnN0cmluZyhidWZmZXJQb3MsIHBvcyAtIDMpOwogICAgICAgICAgICBzdGF0ZSA9IFRFWFQ7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBSRUZFUkVOQ0U6CiAgICAgICAgICAgIGlmICh0b2tlbi5yZWZzKSB0b2tlbi5yZWZzLnB1c2gobVsxXSk7IGVsc2UgdG9rZW4ucmVmcyA9IFsgbVsxXSBdOwogICAgICAgICAgICBpZiAobVsyXSAhPSAifCIpIHsKICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PSBUWVBFX1RFWFQpIHsKICAgICAgICAgICAgICAgIHBvcyAtPSBtWzJdLmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICB0b2tlbi52YWx1ZSA9IHNvdXJjZS5zdWJzdHJpbmcoYnVmZmVyUG9zLCBwb3MpOwogICAgICAgICAgICAgICAgc3RhdGUgPSBURVhUOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PSBUWVBFX0NPTU1FTlQpIHsKICAgICAgICAgICAgICAgIHN0YXRlID0gQ09NTUVOVDsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT0gVFlQRV9BVFRSSUJVVEUgJiYgc291cmNlW3Bvc10gPT0gIj0iKSB7CiAgICAgICAgICAgICAgICBwb3MrKzsKICAgICAgICAgICAgICAgIHN0YXRlID0gQVRUUklCVVRFX1ZBTFVFOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0b2tlbiA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogVFlQRV9BVFRSSUJVVEUKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBzdGF0ZSA9IEFUVFJJQlVURV9OQU1FX09SX0VORDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIEFUVFJJQlVURV9WQUxVRToKICAgICAgICAgICAgdG9rZW4udmFsdWUgPSBtWzFdLnJlcGxhY2UocXVvdGVVbmVzY2FwZSwgJyInKTsKICAgICAgICAgICAgdG9rZW4gPSB7CiAgICAgICAgICAgICAgdHlwZTogVFlQRV9BVFRSSUJVVEUKICAgICAgICAgICAgfTsKICAgICAgICAgICAgc3RhdGUgPSBBVFRSSUJVVEVfTkFNRV9PUl9FTkQ7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBUQUdfSUdOT1JFX0NPTlRFTlQudGV4dDoKICAgICAgICAgIGNhc2UgVEFHX0lHTk9SRV9DT05URU5ULnN0eWxlOgogICAgICAgICAgICBsYXN0VGFnLmNoaWxkcy5wdXNoKHsKICAgICAgICAgICAgICB0eXBlOiBUWVBFX1RFWFQsCiAgICAgICAgICAgICAgdmFsdWU6IG1bMV0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGxhc3RUYWcgPSB0YWdTdGFjay5wb3AoKTsKICAgICAgICAgICAgc3RhdGUgPSBURVhUOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRocm93ICJQYXJzZXIgYnVnIjsKICAgICAgICB9CiAgICAgICAgaWYgKHN0YXRlID09IFRFWFQpIHRleHRTdGF0ZUVuZFBvcyA9IHBvczsKICAgICAgfQogICAgICBpZiAodGV4dFN0YXRlRW5kUG9zICE9IHBvcykgbGFzdFRhZy5jaGlsZHMucHVzaCh7CiAgICAgICAgdHlwZTogVFlQRV9URVhULAogICAgICAgIHZhbHVlOiBzb3VyY2Uuc3Vic3RyaW5nKHRleHRTdGF0ZUVuZFBvcywgcG9zKQogICAgICB9KTsKICAgICAgaWYgKGxhc3RUYWcubmFtZSkgcmVzdWx0Lndhcm5zLnB1c2goIk5vIGNsb3NlIHRhZyBmb3IgPCIgKyBsYXN0VGFnLm5hbWUgKyAiPiIpOwogICAgICBpZiAoIXJlc3VsdC53YXJucy5sZW5ndGgpIGRlbGV0ZSByZXN1bHQud2FybnM7CiAgICAgIHJlc3VsdC50ZW1wbGF0ZVRva2VucyA9IHRydWU7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogICAgdmFyIHRva2VuVGVtcGxhdGUgPSB7fTsKICAgIHZhciBMMTBuUHJveHlUb2tlbiA9IGJhc2lzLlRva2VuLnN1YmNsYXNzKHsKICAgICAgY2xhc3NOYW1lOiBuYW1lc3BhY2UgKyAiLkwxMG5Qcm94eVRva2VuIiwKICAgICAgdG9rZW46IG51bGwsCiAgICAgIHVybDogIiIsCiAgICAgIGluaXQ6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgdGhpcy51cmwgPSB0b2tlbi5kaWN0aW9uYXJ5LnJlc291cmNlLnVybCArICI6IiArIHRva2VuLm5hbWU7CiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuOwogICAgICAgIHRoaXMuc2V0KCk7CiAgICAgICAgdG9rZW4uYXR0YWNoKHRoaXMuc2V0LCB0aGlzKTsKICAgICAgfSwKICAgICAgc2V0OiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYmFzaXMuVG9rZW4ucHJvdG90eXBlLnNldC5jYWxsKHRoaXMsIHRoaXMudG9rZW4udHlwZSA9PSAibWFya3VwIiA/IHByb2Nlc3NNYXJrdXAodGhpcy50b2tlbi52YWx1ZSwgdGhpcy50b2tlbi5uYW1lICsgIkAiICsgdGhpcy50b2tlbi5kaWN0aW9uYXJ5LnJlc291cmNlLnVybCkgOiAiIik7CiAgICAgIH0sCiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkgewogICAgICAgIGJhc2lzLlRva2VuLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7CiAgICAgICAgdGhpcy50b2tlbiA9IG51bGw7CiAgICAgIH0KICAgIH0pOwogICAgZnVuY3Rpb24gcHJvY2Vzc01hcmt1cCh2YWx1ZSwgaWQpIHsKICAgICAgcmV0dXJuICc8c3BhbiBjbGFzcz0iYmFzaXNqcy1tYXJrdXAiIGRhdGEtYmFzaXNqcy1sMTBuPSInICsgaWQgKyAnIj4nICsgU3RyaW5nKHZhbHVlKSArICI8L3NwYW4+IjsKICAgIH0KICAgIGZ1bmN0aW9uIGdldEwxMG5UZW1wbGF0ZSh0b2tlbikgewogICAgICBpZiAodHlwZW9mIHRva2VuID09ICJzdHJpbmciKSB0b2tlbiA9IGJhc2lzLmwxMG4udG9rZW4odG9rZW4pOwogICAgICBpZiAoIXRva2VuKSByZXR1cm4gbnVsbDsKICAgICAgdmFyIGlkID0gdG9rZW4uYmFzaXNPYmplY3RJZDsKICAgICAgdmFyIHRlbXBsYXRlID0gdG9rZW5UZW1wbGF0ZVtpZF07CiAgICAgIGlmICghdGVtcGxhdGUpIHRlbXBsYXRlID0gdG9rZW5UZW1wbGF0ZVtpZF0gPSBuZXcgVGVtcGxhdGUobmV3IEwxMG5Qcm94eVRva2VuKHRva2VuKSk7CiAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgIH0KICAgIGZ1bmN0aW9uIGdlbklzb2xhdGVNYXJrZXIoKSB7CiAgICAgIHJldHVybiAiaSIgKyBiYXNpcy5nZW5VSUQoKSArICJfXyI7CiAgICB9CiAgICBmdW5jdGlvbiBpc29sYXRlQ3NzKGNzcywgcHJlZml4KSB7CiAgICAgIGZ1bmN0aW9uIGFkZE1hdGNoKHByZWZpeCkgewogICAgICAgIGlmIChpID4gbGFzdE1hdGNoUG9zKSB7CiAgICAgICAgICByZXN1bHQucHVzaCgocHJlZml4IHx8ICIiKSArIGNzcy5zdWJzdHJpbmcobGFzdE1hdGNoUG9zLCBpKSk7CiAgICAgICAgICBsYXN0TWF0Y2hQb3MgPSBpOwogICAgICAgIH0KICAgICAgfQogICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgIHZhciBzeW0gPSBjc3Muc3BsaXQoIiIpOwogICAgICB2YXIgbGVuID0gc3ltLmxlbmd0aDsKICAgICAgdmFyIGxhc3RNYXRjaFBvcyA9IDA7CiAgICAgIHZhciBibG9ja1Njb3BlID0gZmFsc2U7CiAgICAgIHZhciBzdHJTeW07CiAgICAgIGlmICghcHJlZml4KSBwcmVmaXggPSBnZW5Jc29sYXRlTWFya2VyKCk7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICBzd2l0Y2ggKHN5bVtpXSkgewogICAgICAgICAgY2FzZSAiJyI6CiAgICAgICAgICBjYXNlICciJzoKICAgICAgICAgICAgc3RyU3ltID0gc3ltW2ldOwogICAgICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSB7CiAgICAgICAgICAgICAgaWYgKHN5bVtpXSA9PSAiXFwiKSBpKys7IGVsc2UgaWYgKHN5bVtpXSA9PSBzdHJTeW0pIHsKICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgIi8iOgogICAgICAgICAgICBpZiAoc3ltW2kgKyAxXSA9PSAiKiIpIHsKICAgICAgICAgICAgICBpKys7CiAgICAgICAgICAgICAgd2hpbGUgKCsraSA8IGxlbikgaWYgKHN5bVtpXSA9PSAiKiIgJiYgc3ltW2kgKyAxXSA9PSAiLyIpIHsKICAgICAgICAgICAgICAgIGkgKz0gMjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgInsiOgogICAgICAgICAgICBibG9ja1Njb3BlID0gdHJ1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICJ9IjoKICAgICAgICAgICAgYmxvY2tTY29wZSA9IGZhbHNlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgIi4iOgogICAgICAgICAgICBpZiAoIWJsb2NrU2NvcGUpIHsKICAgICAgICAgICAgICBpKys7CiAgICAgICAgICAgICAgYWRkTWF0Y2goKTsKICAgICAgICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSBpZiAoIS9bYS16MC05XC1cX10vLnRlc3Qoc3ltW2ldKSkgewogICAgICAgICAgICAgICAgYWRkTWF0Y2gocHJlZml4KTsKICAgICAgICAgICAgICAgIGkgLT0gMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgYWRkTWF0Y2goKTsKICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCIiKTsKICAgIH0KICAgIHZhciBtYWtlRGVjbGFyYXRpb24gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIElERU5UID0gL15bYS16X11bYS16MC05X1wtXSokL2k7CiAgICAgIHZhciBDTEFTU19BVFRSX1BBUlRTID0gLyhcUyspL2c7CiAgICAgIHZhciBDTEFTU19BVFRSX0JJTkRJTkcgPSAvXigoPzpbYS16X11bYS16MC05X1wtXSopPyg/OjooPzpbYS16X11bYS16MC05X1wtXSopPyk/KVx7KChhbmltOik/W2Etel9dW2EtejAtOV9cLV0qKVx9JC9pOwogICAgICB2YXIgU1RZTEVfQVRUUl9QQVJUUyA9IC9ccypbXjpdKz9ccyo6KD86XCguKj9cKXwiLio/InwnLio/J3xbXjtdKz8pKyg/Ojt8JCkvZ2k7CiAgICAgIHZhciBTVFlMRV9QUk9QRVJUWSA9IC9ccyooW146XSs/KVxzKjooKD86XCguKj9cKXwiLio/InwnLio/J3xbXjtdKz8pKyk7PyQvaTsKICAgICAgdmFyIFNUWUxFX0FUVFJfQklORElORyA9IC9ceyhbYS16X11bYS16MC05X10qKVx9L2k7CiAgICAgIHZhciBBVFRSX0JJTkRJTkcgPSAvXHsoW2Etel9dW2EtejAtOV9dKnxsMTBuOlthLXpfXVthLXowLTlfXSooPzpcLlthLXpfXVthLXowLTlfXSopKig/OlwuXHtbYS16X11bYS16MC05X10qXH0pPylcfS9pOwogICAgICB2YXIgTkFNRURfQ0hBUkFDVEVSX1JFRiA9IC8mKFthLXpdK3wjWzAtOV0rfCN4WzAtOWEtZl17MSw0fSk7Py9naTsKICAgICAgdmFyIHRva2VuTWFwID0gYmFzaXMuTk9ERV9FTlYgPyBfX25vZGVqc1JlcXVpcmUoIi4vdGVtcGxhdGUvaHRtbGVudGl0eS5qc29uIikgOiB7fTsKICAgICAgdmFyIHRva2VuRWxlbWVudCA9ICFiYXNpcy5OT0RFX0VOViA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpIDogbnVsbDsKICAgICAgdmFyIGluY2x1ZGVTdGFjayA9IFtdOwogICAgICB2YXIgc3R5bGVOYW1lc3BhY2VJc29sYXRlID0ge307CiAgICAgIGZ1bmN0aW9uIG5hbWUodG9rZW4pIHsKICAgICAgICByZXR1cm4gKHRva2VuLnByZWZpeCA/IHRva2VuLnByZWZpeCArICI6IiA6ICIiKSArIHRva2VuLm5hbWU7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gbmFtZWRDaGFyUmVwbGFjZShtLCB0b2tlbikgewogICAgICAgIGlmICghdG9rZW5NYXBbdG9rZW5dKSB7CiAgICAgICAgICBpZiAodG9rZW4uY2hhckF0KDApID09ICIjIikgewogICAgICAgICAgICB0b2tlbk1hcFt0b2tlbl0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHRva2VuLmNoYXJBdCgxKSA9PSAieCIgfHwgdG9rZW4uY2hhckF0KDEpID09ICJYIiA/IHBhcnNlSW50KHRva2VuLnN1YnN0cigyKSwgMTYpIDogdG9rZW4uc3Vic3RyKDEpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0b2tlbkVsZW1lbnQpIHsKICAgICAgICAgICAgICB0b2tlbkVsZW1lbnQuaW5uZXJIVE1MID0gbTsKICAgICAgICAgICAgICB0b2tlbk1hcFt0b2tlbl0gPSB0b2tlbkVsZW1lbnQuZmlyc3RDaGlsZCA/IHRva2VuRWxlbWVudC5maXJzdENoaWxkLm5vZGVWYWx1ZSA6IG07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRva2VuTWFwW3Rva2VuXSB8fCBtOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHVudG9rZW4odmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShOQU1FRF9DSEFSQUNURVJfUkVGLCBuYW1lZENoYXJSZXBsYWNlKTsKICAgICAgfQogICAgICBmdW5jdGlvbiByZWZMaXN0KHRva2VuKSB7CiAgICAgICAgdmFyIGFycmF5ID0gdG9rZW4ucmVmczsKICAgICAgICBpZiAoIWFycmF5IHx8ICFhcnJheS5sZW5ndGgpIHJldHVybiAwOwogICAgICAgIHJldHVybiBhcnJheTsKICAgICAgfQogICAgICBmdW5jdGlvbiBidWlsZEF0dHJFeHByZXNzaW9uKHBhcnRzKSB7CiAgICAgICAgdmFyIGJpbmROYW1lOwogICAgICAgIHZhciBuYW1lcyA9IFtdOwogICAgICAgIHZhciBleHByZXNzaW9uID0gW107CiAgICAgICAgdmFyIG1hcCA9IHt9OwogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIGlmIChqICUgMikgewogICAgICAgICAgYmluZE5hbWUgPSBwYXJ0c1tqXTsKICAgICAgICAgIGlmICghbWFwW2JpbmROYW1lXSkgewogICAgICAgICAgICBtYXBbYmluZE5hbWVdID0gbmFtZXMubGVuZ3RoOwogICAgICAgICAgICBuYW1lcy5wdXNoKGJpbmROYW1lKTsKICAgICAgICAgIH0KICAgICAgICAgIGV4cHJlc3Npb24ucHVzaChtYXBbYmluZE5hbWVdKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKHBhcnRzW2pdKSBleHByZXNzaW9uLnB1c2godW50b2tlbihwYXJ0c1tqXSkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gWyBuYW1lcywgZXhwcmVzc2lvbiBdOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHByb2Nlc3NBdHRyKG5hbWUsIHZhbHVlKSB7CiAgICAgICAgdmFyIGJpbmRpbmdzID0gMDsKICAgICAgICB2YXIgcGFydHM7CiAgICAgICAgdmFyIG07CiAgICAgICAgaWYgKHZhbHVlKSB7CiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICAgICAgY2FzZSAiY2xhc3MiOgogICAgICAgICAgICAgIGlmIChwYXJ0cyA9IHZhbHVlLm1hdGNoKENMQVNTX0FUVFJfUEFSVFMpKSB7CiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBbXTsKICAgICAgICAgICAgICAgIGJpbmRpbmdzID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgcGFydDsgcGFydCA9IHBhcnRzW2pdOyBqKyspIHsKICAgICAgICAgICAgICAgICAgaWYgKG0gPSBwYXJ0Lm1hdGNoKENMQVNTX0FUVFJfQklORElORykpIGJpbmRpbmdzLnB1c2goWyBtWzFdIHx8ICIiLCBtWzJdIF0pOyBlbHNlIG5ld1ZhbHVlLnB1c2gocGFydCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlLmpvaW4oIiAiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgInN0eWxlIjoKICAgICAgICAgICAgICB2YXIgcHJvcHMgPSBbXTsKICAgICAgICAgICAgICBiaW5kaW5ncyA9IFtdOwogICAgICAgICAgICAgIGlmIChwYXJ0cyA9IHZhbHVlLm1hdGNoKFNUWUxFX0FUVFJfUEFSVFMpKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgcGFydDsgcGFydCA9IHBhcnRzW2pdOyBqKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIG0gPSBwYXJ0Lm1hdGNoKFNUWUxFX1BST1BFUlRZKTsKICAgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IG1bMV07CiAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG1bMl0udHJpbSgpOwogICAgICAgICAgICAgICAgICB2YXIgdmFsdWVQYXJ0cyA9IHZhbHVlLnNwbGl0KFNUWUxFX0FUVFJfQklORElORyk7CiAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVBhcnRzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZXhwciA9IGJ1aWxkQXR0ckV4cHJlc3Npb24odmFsdWVQYXJ0cyk7CiAgICAgICAgICAgICAgICAgICAgZXhwci5wdXNoKHByb3BlcnR5TmFtZSk7CiAgICAgICAgICAgICAgICAgICAgYmluZGluZ3MucHVzaChleHByKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHByb3BzLnB1c2gocHJvcGVydHlOYW1lICsgIjogIiArIHVudG9rZW4odmFsdWUpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKC9cUy8udGVzdCh2YWx1ZSkpIGJhc2lzLmRldi53YXJuKCJCYWQgdmFsdWUgZm9yIHN0eWxlIGF0dHJpYnV0ZSAodmFsdWUgaWdub3JlZCk6IiwgdmFsdWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BzLmpvaW4oIjsgIik7CiAgICAgICAgICAgICAgaWYgKHZhbHVlKSB2YWx1ZSArPSAiOyI7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgcGFydHMgPSB2YWx1ZS5zcGxpdChBVFRSX0JJTkRJTkcpOwogICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSBiaW5kaW5ncyA9IGJ1aWxkQXR0ckV4cHJlc3Npb24ocGFydHMpOyBlbHNlIHZhbHVlID0gdW50b2tlbih2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChiaW5kaW5ncyAmJiAhYmluZGluZ3MubGVuZ3RoKSBiaW5kaW5ncyA9IDA7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGJpbmRpbmc6IGJpbmRpbmdzLAogICAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgICAgdHlwZTogQVRUUl9UWVBFX0JZX05BTUVbbmFtZV0gfHwgMgogICAgICAgIH07CiAgICAgIH0KICAgICAgZnVuY3Rpb24gYXR0cnModG9rZW4sIGRlY2xUb2tlbiwgb3B0aW1pemVTaXplKSB7CiAgICAgICAgdmFyIGF0dHJzID0gdG9rZW4uYXR0cnM7CiAgICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICAgIHZhciBzdHlsZUF0dHI7CiAgICAgICAgdmFyIGRpc3BsYXk7CiAgICAgICAgdmFyIG07CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGF0dHI7IGF0dHIgPSBhdHRyc1tpXTsgaSsrKSB7CiAgICAgICAgICBpZiAoYXR0ci5wcmVmaXggPT0gImIiKSB7CiAgICAgICAgICAgIHN3aXRjaCAoYXR0ci5uYW1lKSB7CiAgICAgICAgICAgICAgY2FzZSAicmVmIjoKICAgICAgICAgICAgICAgIHZhciByZWZzID0gKGF0dHIudmFsdWUgfHwgIiIpLnRyaW0oKS5zcGxpdCgvXHMrLyk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlZnMubGVuZ3RoOyBqKyspIGFkZFRva2VuUmVmKGRlY2xUb2tlbiwgcmVmc1tqXSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlICJzaG93IjoKICAgICAgICAgICAgICBjYXNlICJoaWRlIjoKICAgICAgICAgICAgICAgIGRpc3BsYXkgPSBhdHRyOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobSA9IGF0dHIubmFtZS5tYXRjaChBVFRSX0VWRU5UX1JYKSkgewogICAgICAgICAgICByZXN1bHQucHVzaChtWzFdID09IGF0dHIudmFsdWUgPyBbIFRZUEVfQVRUUklCVVRFX0VWRU5ULCBtWzFdIF0gOiBbIFRZUEVfQVRUUklCVVRFX0VWRU5ULCBtWzFdLCBhdHRyLnZhbHVlIF0pOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBwYXJzZWQgPSBwcm9jZXNzQXR0cihhdHRyLm5hbWUsIGF0dHIudmFsdWUpOwogICAgICAgICAgdmFyIGl0ZW0gPSBbIHBhcnNlZC50eXBlLCBwYXJzZWQuYmluZGluZywgcmVmTGlzdChhdHRyKSBdOwogICAgICAgICAgaWYgKHBhcnNlZC50eXBlID09IDIpIGl0ZW0ucHVzaChuYW1lKGF0dHIpKTsKICAgICAgICAgIGlmIChwYXJzZWQudmFsdWUgJiYgKCFvcHRpbWl6ZVNpemUgfHwgIXBhcnNlZC5iaW5kaW5nIHx8IHBhcnNlZC50eXBlICE9IDIpKSBpdGVtLnB1c2gocGFyc2VkLnZhbHVlKTsKICAgICAgICAgIGlmIChwYXJzZWQudHlwZSA9PSBUWVBFX0FUVFJJQlVURV9TVFlMRSkgc3R5bGVBdHRyID0gaXRlbTsKICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pOwogICAgICAgIH0KICAgICAgICBpZiAoZGlzcGxheSkgewogICAgICAgICAgaWYgKCFzdHlsZUF0dHIpIHsKICAgICAgICAgICAgc3R5bGVBdHRyID0gWyBUWVBFX0FUVFJJQlVURV9TVFlMRSwgMCwgMCBdOwogICAgICAgICAgICByZXN1bHQucHVzaChzdHlsZUF0dHIpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFzdHlsZUF0dHJbMV0pIHN0eWxlQXR0clsxXSA9IFtdOwogICAgICAgICAgdmFyIGRpc3BsYXlFeHByID0gYnVpbGRBdHRyRXhwcmVzc2lvbigoZGlzcGxheS52YWx1ZSB8fCBkaXNwbGF5Lm5hbWUpLnNwbGl0KEFUVFJfQklORElORykpOwogICAgICAgICAgaWYgKGRpc3BsYXlFeHByWzBdLmxlbmd0aCAtIGRpc3BsYXlFeHByWzFdLmxlbmd0aCkgewogICAgICAgICAgICBzdHlsZUF0dHJbM10gPSAoc3R5bGVBdHRyWzNdID8gc3R5bGVBdHRyWzNdICsgIjsgIiA6ICIiKSArIChkaXNwbGF5Lm5hbWUgPT0gInNob3ciIF4gZGlzcGxheS52YWx1ZSA9PT0gIiIgPyAiIiA6ICJkaXNwbGF5OiBub25lIik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoZGlzcGxheS5uYW1lID09ICJzaG93Iikgc3R5bGVBdHRyWzNdID0gKHN0eWxlQXR0clszXSA/IHN0eWxlQXR0clszXSArICI7ICIgOiAiIikgKyAiZGlzcGxheTogbm9uZSI7CiAgICAgICAgICAgIHN0eWxlQXR0clsxXS5wdXNoKGRpc3BsYXlFeHByLmNvbmNhdCgiZGlzcGxheSIsIGRpc3BsYXkubmFtZSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA/IHJlc3VsdCA6IDA7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gYWRkVG9rZW5SZWYodG9rZW4sIHJlZk5hbWUpIHsKICAgICAgICBpZiAoIXRva2VuW1RPS0VOX1JFRlNdKSB0b2tlbltUT0tFTl9SRUZTXSA9IFtdOwogICAgICAgIGFycmF5QWRkKHRva2VuW1RPS0VOX1JFRlNdLCByZWZOYW1lKTsKICAgICAgICBpZiAocmVmTmFtZSAhPSAiZWxlbWVudCIpIHRva2VuW1RPS0VOX0JJTkRJTkdTXSA9IHRva2VuW1RPS0VOX1JFRlNdLmxlbmd0aCA9PSAxID8gcmVmTmFtZSA6IDA7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gcmVtb3ZlVG9rZW5SZWYodG9rZW4sIHJlZk5hbWUpIHsKICAgICAgICB2YXIgaWR4ID0gdG9rZW5bVE9LRU5fUkVGU10uaW5kZXhPZihyZWZOYW1lKTsKICAgICAgICBpZiAoaWR4ICE9IC0xKSB7CiAgICAgICAgICB2YXIgaW5kZXhCaW5kaW5nID0gdG9rZW5bVE9LRU5fQklORElOR1NdICYmIHR5cGVvZiB0b2tlbltUT0tFTl9CSU5ESU5HU10gPT0gIm51bWJlciI7CiAgICAgICAgICB0b2tlbltUT0tFTl9SRUZTXS5zcGxpY2UoaWR4LCAxKTsKICAgICAgICAgIGlmIChpbmRleEJpbmRpbmcpIGlmIChpZHggPT0gdG9rZW5bVE9LRU5fQklORElOR1NdIC0gMSkgdG9rZW5bVE9LRU5fQklORElOR1NdID0gcmVmTmFtZTsKICAgICAgICAgIGlmICghdG9rZW5bVE9LRU5fUkVGU10ubGVuZ3RoKSB0b2tlbltUT0tFTl9SRUZTXSA9IDA7IGVsc2UgewogICAgICAgICAgICBpZiAoaW5kZXhCaW5kaW5nKSB0b2tlbltUT0tFTl9CSU5ESU5HU10gLT0gaWR4IDwgdG9rZW5bVE9LRU5fQklORElOR1NdIC0gMTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgZnVuY3Rpb24gdG9rZW5BdHRycyh0b2tlbikgewogICAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgICBpZiAodG9rZW4uYXR0cnMpIGZvciAodmFyIGkgPSAwLCBhdHRyOyBhdHRyID0gdG9rZW4uYXR0cnNbaV07IGkrKykgcmVzdWx0W25hbWUoYXR0cildID0gYXR0ci52YWx1ZTsKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGFkZFVuaXF1ZShhcnJheSwgaXRlbXMpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSBhcnJheUFkZChhcnJheSwgaXRlbXNbaV0pOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGFkZFN0eWxlcyhhcnJheSwgaXRlbXMsIHByZWZpeCkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCBpdGVtOyBpdGVtID0gaXRlbXNbaV07IGkrKykgaWYgKGl0ZW1bMV0gIT09IHN0eWxlTmFtZXNwYWNlSXNvbGF0ZSkgaXRlbVsxXSA9IHByZWZpeCArIGl0ZW1bMV07CiAgICAgICAgYXJyYXkudW5zaGlmdC5hcHBseShhcnJheSwgaXRlbXMpOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGFkZFN0eWxlKHRlbXBsYXRlLCB0b2tlbiwgc3JjLCBpc29sYXRlUHJlZml4KSB7CiAgICAgICAgdmFyIHVybDsKICAgICAgICBpZiAoc3JjKSB7CiAgICAgICAgICBpZiAoIS9eKFwuXC98XC5cLnxcLykvLnRlc3Qoc3JjKSkgYmFzaXMuZGV2Lndhcm4oIkJhZCB1c2FnZTogPGI6IiArIHRva2VuLm5hbWUgKyAnIHNyYz0iJyArIHNyYyArICciLz4uXG5GaWxlbmFtZXMgc2hvdWxkIHN0YXJ0cyB3aXRoIGAuL2AsIGAuLmAgb3IgYC9gLiBPdGhlcndpc2UgaXQgd2lsbCB0cmVhdHMgYXMgc3BlY2lhbCByZWZlcmVuY2UgaW4gbmV4dCBtaW5vciByZWxlYXNlLicpOwogICAgICAgICAgdXJsID0gcGF0aC5yZXNvbHZlKHRlbXBsYXRlLmJhc2VVUkkgKyBzcmMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgdGV4dCA9IHRva2VuLmNoaWxkc1swXTsKICAgICAgICAgIHVybCA9IGJhc2lzLnJlc291cmNlLnZpcnR1YWwoImNzcyIsIHRleHQgPyB0ZXh0LnZhbHVlIDogIiIsIHRlbXBsYXRlLnNvdXJjZVVybCkudXJsOwogICAgICAgIH0KICAgICAgICB0ZW1wbGF0ZS5yZXNvdXJjZXMucHVzaChbIHVybCwgaXNvbGF0ZVByZWZpeCBdKTsKICAgICAgICByZXR1cm4gdXJsOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIHByb2Nlc3ModG9rZW5zLCB0ZW1wbGF0ZSwgb3B0aW9ucywgY29udGV4dCkgewogICAgICAgIGZ1bmN0aW9uIG1vZGlmeUF0dHIodG9rZW4sIG5hbWUsIGFjdGlvbikgewogICAgICAgICAgdmFyIGF0dHJzID0gdG9rZW5BdHRycyh0b2tlbik7CiAgICAgICAgICBpZiAobmFtZSkgYXR0cnMubmFtZSA9IG5hbWU7CiAgICAgICAgICBpZiAoIWF0dHJzLm5hbWUpIHsKICAgICAgICAgICAgdGVtcGxhdGUud2FybnMucHVzaCgiSW5zdHJ1Y3Rpb24gPGI6IiArIHRva2VuLm5hbWUgKyAiPiBoYXMgbm8gYXR0cmlidXRlIG5hbWUiKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCFJREVOVC50ZXN0KGF0dHJzLm5hbWUpKSB7CiAgICAgICAgICAgIHRlbXBsYXRlLndhcm5zLnB1c2goIkJhZCBhdHRyaWJ1dGUgbmFtZSBgIiArIGF0dHJzLm5hbWUgKyAiYCIpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgaW5jbHVkZWRUb2tlbiA9IHRva2VuUmVmTWFwW2F0dHJzLnJlZiB8fCAiZWxlbWVudCJdOwogICAgICAgICAgaWYgKGluY2x1ZGVkVG9rZW4pIHsKICAgICAgICAgICAgaWYgKGluY2x1ZGVkVG9rZW4udG9rZW5bVE9LRU5fVFlQRV0gPT0gVFlQRV9FTEVNRU5UKSB7CiAgICAgICAgICAgICAgdmFyIGl0QXR0cnMgPSBpbmNsdWRlZFRva2VuLnRva2VuOwogICAgICAgICAgICAgIHZhciBpc0V2ZW50ID0gYXR0cnMubmFtZS5tYXRjaChBVFRSX0VWRU5UX1JYKTsKICAgICAgICAgICAgICB2YXIgaXRUeXBlID0gaXNFdmVudCA/IFRZUEVfQVRUUklCVVRFX0VWRU5UIDogQVRUUl9UWVBFX0JZX05BTUVbYXR0cnMubmFtZV0gfHwgVFlQRV9BVFRSSUJVVEU7CiAgICAgICAgICAgICAgdmFyIHZhbHVlSWR4ID0gQVRUUl9WQUxVRV9JTkRFWFtpdFR5cGVdIHx8IEFUVFJfVkFMVUU7CiAgICAgICAgICAgICAgdmFyIGl0QXR0clRva2VuID0gaXRBdHRycyAmJiBhcnJheVNlYXJjaChpdEF0dHJzLCBhdHRycy5uYW1lLCBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgICAgICAgaWYgKHRva2VuW1RPS0VOX1RZUEVdID09IFRZUEVfQVRUUklCVVRFX0VWRU5UKSByZXR1cm4gImV2ZW50LSIgKyB0b2tlblsxXTsKICAgICAgICAgICAgICAgIHJldHVybiBBVFRSX05BTUVfQllfVFlQRVt0b2tlbltUT0tFTl9UWVBFXV0gfHwgdG9rZW5bQVRUUl9OQU1FXTsKICAgICAgICAgICAgICB9LCBFTEVNRU5UX0FUVFJTKTsKICAgICAgICAgICAgICBpZiAoIWl0QXR0clRva2VuICYmIGFjdGlvbiAhPSAicmVtb3ZlIikgewogICAgICAgICAgICAgICAgaWYgKGlzRXZlbnQpIHsKICAgICAgICAgICAgICAgICAgaXRBdHRyVG9rZW4gPSBbIGl0VHlwZSwgaXNFdmVudFsxXSBdOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgaXRBdHRyVG9rZW4gPSBbIGl0VHlwZSwgMCwgMCwgaXRUeXBlID09IFRZUEVfQVRUUklCVVRFID8gYXR0cnMubmFtZSA6ICIiIF07CiAgICAgICAgICAgICAgICAgIGlmIChpdFR5cGUgPT0gVFlQRV9BVFRSSUJVVEUpIGl0QXR0clRva2VuLnB1c2goIiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCFpdEF0dHJzKSB7CiAgICAgICAgICAgICAgICAgIGl0QXR0cnMgPSBbXTsKICAgICAgICAgICAgICAgICAgaW5jbHVkZWRUb2tlbi50b2tlbi5wdXNoKGl0QXR0cnMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaXRBdHRycy5wdXNoKGl0QXR0clRva2VuKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIGNsYXNzT3JTdHlsZSA9IGF0dHJzLm5hbWUgPT0gImNsYXNzIiB8fCBhdHRycy5uYW1lID09ICJzdHlsZSI7CiAgICAgICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHsKICAgICAgICAgICAgICAgIGNhc2UgInNldCI6CiAgICAgICAgICAgICAgICAgIGlmIChpdEF0dHJUb2tlbltUT0tFTl9UWVBFXSA9PSBUWVBFX0FUVFJJQlVURV9FVkVOVCkgewogICAgICAgICAgICAgICAgICAgIGlmIChhdHRycy52YWx1ZSA9PSBpc0V2ZW50WzFdKSBpdEF0dHJUb2tlbi5sZW5ndGggPSAyOyBlbHNlIGl0QXR0clRva2VuW3ZhbHVlSWR4XSA9IGF0dHJzLnZhbHVlOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gcHJvY2Vzc0F0dHIoYXR0cnMubmFtZSwgYXR0cnMudmFsdWUpOwogICAgICAgICAgICAgICAgICBpdEF0dHJUb2tlbltUT0tFTl9CSU5ESU5HU10gPSBwYXJzZWQuYmluZGluZzsKICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLm9wdGltaXplU2l6ZSB8fCAhaXRBdHRyVG9rZW5bVE9LRU5fQklORElOR1NdIHx8IGNsYXNzT3JTdHlsZSkgaXRBdHRyVG9rZW5bdmFsdWVJZHhdID0gcGFyc2VkLnZhbHVlIHx8ICIiOyBlbHNlIGl0QXR0clRva2VuLmxlbmd0aCA9IHZhbHVlSWR4OwogICAgICAgICAgICAgICAgICBpZiAoY2xhc3NPclN0eWxlKSBpZiAoIWl0QXR0clRva2VuW1RPS0VOX0JJTkRJTkdTXSAmJiAhaXRBdHRyVG9rZW5bdmFsdWVJZHhdKSB7CiAgICAgICAgICAgICAgICAgICAgYXJyYXlSZW1vdmUoaXRBdHRycywgaXRBdHRyVG9rZW4pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgImFwcGVuZCI6CiAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwcm9jZXNzQXR0cihhdHRycy5uYW1lLCBhdHRycy52YWx1ZSk7CiAgICAgICAgICAgICAgICAgIGlmICghaXNFdmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWQuYmluZGluZykgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJCaW5kaW5ncyA9IGl0QXR0clRva2VuW1RPS0VOX0JJTkRJTkdTXTsKICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyQmluZGluZ3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChhdHRycy5uYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAic3R5bGUiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZEJpbmRpbmdNYXAgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvbGRCaW5kaW5nOyBvbGRCaW5kaW5nID0gYXR0ckJpbmRpbmdzW2ldOyBpKyspIG9sZEJpbmRpbmdNYXBbb2xkQmluZGluZ1syXV0gPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG5ld0JpbmRpbmc7IG5ld0JpbmRpbmcgPSBwYXJzZWQuYmluZGluZ1tpXTsgaSsrKSBpZiAobmV3QmluZGluZ1syXSBpbiBvbGRCaW5kaW5nTWFwKSBhdHRyQmluZGluZ3Nbb2xkQmluZGluZ01hcFtuZXdCaW5kaW5nWzJdXV0gPSBuZXdCaW5kaW5nOyBlbHNlIGF0dHJCaW5kaW5ncy5wdXNoKG5ld0JpbmRpbmcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiY2xhc3MiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ckJpbmRpbmdzLnB1c2guYXBwbHkoYXR0ckJpbmRpbmdzLCBwYXJzZWQuYmluZGluZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkLmJpbmRpbmdbMF0uZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5QWRkKHRoaXMsIG5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgYXR0ckJpbmRpbmdzWzBdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkLmJpbmRpbmdbMV0ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VkLmJpbmRpbmdbMV1baV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gIm51bWJlciIpIHZhbHVlID0gYXR0ckJpbmRpbmdzWzBdLmluZGV4T2YocGFyc2VkLmJpbmRpbmdbMF1bdmFsdWVdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ckJpbmRpbmdzWzFdLnB1c2godmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpdEF0dHJUb2tlbltUT0tFTl9CSU5ESU5HU10gPSBwYXJzZWQuYmluZGluZzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjbGFzc09yU3R5bGUpIGl0QXR0clRva2VuW1RPS0VOX0JJTkRJTkdTXVsxXS51bnNoaWZ0KGl0QXR0clRva2VuW3ZhbHVlSWR4XSk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIGlmICghY2xhc3NPclN0eWxlICYmIGl0QXR0clRva2VuW1RPS0VOX0JJTkRJTkdTXSkgaXRBdHRyVG9rZW5bVE9LRU5fQklORElOR1NdWzFdLnB1c2goYXR0cnMudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnZhbHVlKSBpdEF0dHJUb2tlblt2YWx1ZUlkeF0gPSAoaXRBdHRyVG9rZW5bdmFsdWVJZHhdIHx8ICIiKSArIChpdEF0dHJUb2tlblt2YWx1ZUlkeF0gJiYgKGlzRXZlbnQgfHwgY2xhc3NPclN0eWxlKSA/ICIgIiA6ICIiKSArIHBhcnNlZC52YWx1ZTsKICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzT3JTdHlsZSkgaWYgKCFpdEF0dHJUb2tlbltUT0tFTl9CSU5ESU5HU10gJiYgIWl0QXR0clRva2VuW3ZhbHVlSWR4XSkgewogICAgICAgICAgICAgICAgICAgIGFycmF5UmVtb3ZlKGl0QXR0cnMsIGl0QXR0clRva2VuKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICJyZW1vdmUiOgogICAgICAgICAgICAgICAgICBpZiAoaXRBdHRyVG9rZW4pIGFycmF5UmVtb3ZlKGl0QXR0cnMsIGl0QXR0clRva2VuKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRlbXBsYXRlLndhcm5zLnB1c2goIkF0dHJpYnV0ZSBtb2RpZmljYXRvciBpcyBub3QgcmVmZXJlbmNlIHRvIGVsZW1lbnQgdG9rZW4gKHJlZmVyZW5jZSBuYW1lOiAiICsgKGF0dHJzLnJlZiB8fCAiZWxlbWVudCIpICsgIikiKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRva2VuLCBpdGVtOyB0b2tlbiA9IHRva2Vuc1tpXTsgaSsrKSB7CiAgICAgICAgICB2YXIgcmVmcyA9IHJlZkxpc3QodG9rZW4pOwogICAgICAgICAgdmFyIGJpbmRpbmdzID0gcmVmcyAmJiByZWZzLmxlbmd0aCA9PSAxID8gcmVmc1swXSA6IDA7CiAgICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHsKICAgICAgICAgICAgY2FzZSBUWVBFX0VMRU1FTlQ6CiAgICAgICAgICAgICAgaWYgKHRva2VuLnByZWZpeCA9PSAiYiIpIHsKICAgICAgICAgICAgICAgIHZhciBlbEF0dHJzID0gdG9rZW5BdHRycyh0b2tlbik7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRva2VuLm5hbWUpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAic3R5bGUiOgogICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZU5hbWVzcGFjZSA9IGVsQXR0cnMubmFtZXNwYWNlIHx8IGVsQXR0cnMubnM7CiAgICAgICAgICAgICAgICAgICAgdmFyIHN0eWxlSXNvbGF0ZSA9IHN0eWxlTmFtZXNwYWNlID8gc3R5bGVOYW1lc3BhY2VJc29sYXRlIDogY29udGV4dCAmJiBjb250ZXh0Lmlzb2xhdGUgfHwgIiI7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IGFkZFN0eWxlKHRlbXBsYXRlLCB0b2tlbiwgZWxBdHRycy5zcmMsIHN0eWxlSXNvbGF0ZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlTmFtZXNwYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3JjIGluIHN0eWxlTmFtZXNwYWNlSXNvbGF0ZSA9PSBmYWxzZSkgc3R5bGVOYW1lc3BhY2VJc29sYXRlW3NyY10gPSBnZW5Jc29sYXRlTWFya2VyKCk7CiAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5zdHlsZU5TUHJlZml4W3N0eWxlTmFtZXNwYWNlXSA9IHN0eWxlTmFtZXNwYWNlSXNvbGF0ZVtzcmNdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAiaXNvbGF0ZSI6CiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZW1wbGF0ZS5pc29sYXRlKSB0ZW1wbGF0ZS5pc29sYXRlID0gZWxBdHRycy5wcmVmaXggfHwgb3B0aW9ucy5pc29sYXRlIHx8IGdlbklzb2xhdGVNYXJrZXIoKTsgZWxzZSBiYXNpcy5kZXYud2FybigiPGI6aXNvbGF0ZT4gaXMgc2V0IGFscmVhZHkgdG8gYCIgKyB0ZW1wbGF0ZS5pc29sYXRlICsgImAiKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAibDEwbiI6CiAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBsYXRlLmwxMG5SZXNvbHZlZCkgdGVtcGxhdGUud2FybnMucHVzaCgiPGI6bDEwbj4gbXVzdCBiZSBkZWNsYXJlZCBiZWZvcmUgYW55IGBsMTBuOmAgdG9rZW4gKGluc3RydWN0aW9uIGlnbm9yZWQpIik7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVsQXR0cnMuc3JjKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoIS9eKFwuXC98XC5cLnxcLykvLnRlc3QoZWxBdHRycy5zcmMpKSBiYXNpcy5kZXYud2FybigiQmFkIHVzYWdlOiA8YjoiICsgdG9rZW4ubmFtZSArICcgc3JjPSInICsgZWxBdHRycy5zcmMgKyAnIi8+LlxuRmlsZW5hbWVzIHNob3VsZCBzdGFydHMgd2l0aCBgLi9gLCBgLi5gIG9yIGAvYC4gT3RoZXJ3aXNlIGl0IHdpbGwgdHJlYXRzIGFzIHNwZWNpYWwgcmVmZXJlbmNlIGluIG5leHQgbWlub3IgcmVsZWFzZS4nKTsKICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLmRpY3RVUkkgPSBwYXRoLnJlc29sdmUodGVtcGxhdGUuYmFzZVVSSSwgZWxBdHRycy5zcmMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAiZGVmaW5lIjoKICAgICAgICAgICAgICAgICAgICBpZiAoIm5hbWUiIGluIGVsQXR0cnMgJiYgIXRlbXBsYXRlLmRlZmluZXNbZWxBdHRycy5uYW1lXSkgewogICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlbEF0dHJzLnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiYm9vbCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuZGVmaW5lc1tlbEF0dHJzLm5hbWVdID0gWyBlbEF0dHJzWyJkZWZhdWx0Il0gPT0gInRydWUiID8gMSA6IDAgXTsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW51bSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGVsQXR0cnMudmFsdWVzID8gZWxBdHRycy52YWx1ZXMudHJpbSgpLnNwbGl0KCIgIikgOiBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5kZWZpbmVzW2VsQXR0cnMubmFtZV0gPSBbIHZhbHVlcy5pbmRleE9mKGVsQXR0cnNbImRlZmF1bHQiXSkgKyAxLCB2YWx1ZXMgXTsKICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZS53YXJucy5wdXNoKCJCYWQgZGVmaW5lIHR5cGUgYCIgKyBlbEF0dHJzLnR5cGUgKyAiYCBmb3IgIiArIGVsQXR0cnMubmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlICJ0ZXh0IjoKICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IHRva2VuLmNoaWxkc1swXTsKICAgICAgICAgICAgICAgICAgICB0b2tlbnNbaS0tXSA9IGJhc2lzLm9iamVjdC5leHRlbmQodGV4dCwgewogICAgICAgICAgICAgICAgICAgICAgcmVmczogKGVsQXR0cnMucmVmIHx8ICIiKS50cmltKCkuc3BsaXQoL1xzKy8pLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJub3RyaW0iIGluIGVsQXR0cnMgPyB0ZXh0LnZhbHVlIDogdGV4dC52YWx1ZS5yZXBsYWNlKC9eXHMqW1xyXG5dK3xbXHJcbl1ccyokL2csICIiKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlICJpbmNsdWRlIjoKICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVTcmMgPSBlbEF0dHJzLnNyYzsKICAgICAgICAgICAgICAgICAgICBpZiAodGVtcGxhdGVTcmMpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1RlbXBsYXRlUmVmID0gL14jXGQrJC8udGVzdCh0ZW1wbGF0ZVNyYyk7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNEb2N1bWVudElkUmVmID0gL15pZDovLnRlc3QodGVtcGxhdGVTcmMpOwogICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IGlzVGVtcGxhdGVSZWYgPyB0ZW1wbGF0ZVNyYy5zdWJzdHIoMSkgOiB0ZW1wbGF0ZVNyYzsKICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZTsKICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1RlbXBsYXRlUmVmKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlID0gdGVtcGxhdGVMaXN0W3VybF07CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzRG9jdW1lbnRJZFJlZikgewogICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSA9IHJlc29sdmVTb3VyY2VCeURvY3VtZW50SWQodXJsLnN1YnN0cigzKSk7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eW2EtejAtOVwuXSskL2kudGVzdCh1cmwpICYmICEvXC50bXBsJC8udGVzdCh1cmwpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlID0gZ2V0U291cmNlQnlQYXRoKHVybCk7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS9eKFwuXC98XC5cLnxcLykvLnRlc3QodXJsKSkgYmFzaXMuZGV2Lndhcm4oJ0JhZCB1c2FnZTogPGI6aW5jbHVkZSBzcmM9IicgKyB1cmwgKyAnIi8+LlxuRmlsZW5hbWVzIHNob3VsZCBzdGFydHMgd2l0aCBgLi9gLCBgLi5gIG9yIGAvYC4gT3RoZXJ3aXNlIGl0IHdpbGwgdHJlYXRzIGFzIHNwZWNpYWwgcmVmZXJlbmNlIGluIG5leHQgbWlub3IgcmVsZWFzZS4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2UgPSBiYXNpcy5yZXNvdXJjZShwYXRoLnJlc29sdmUodGVtcGxhdGUuYmFzZVVSSSArIHVybCkpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNvdXJjZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZS53YXJucy5wdXNoKCc8YjppbmNsdWRlIHNyYz0iJyArIHRlbXBsYXRlU3JjICsgJyI+IGlzIG5vdCByZXNvbHZlZCwgaW5zdHJ1Y3Rpb24gaWdub3JlZCcpOwogICAgICAgICAgICAgICAgICAgICAgICBiYXNpcy5kZXYud2FybignPGI6aW5jbHVkZSBzcmM9IicgKyB0ZW1wbGF0ZVNyYyArICciPiBpcyBub3QgcmVzb2x2ZWQsIGluc3RydWN0aW9uIGlnbm9yZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZVN0YWNrLmluZGV4T2YocmVzb3VyY2UpID09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc29sYXRlUHJlZml4ID0gImlzb2xhdGUiIGluIGVsQXR0cnMgPyBlbEF0dHJzLmlzb2xhdGUgfHwgZ2VuSXNvbGF0ZU1hcmtlcigpIDogIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNsOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRG9jdW1lbnRJZFJlZikgYXJyYXlBZGQodGVtcGxhdGUuZGVwcywgcmVzb3VyY2UpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUZW1wbGF0ZVJlZikgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZS5zb3VyY2UuYmluZGluZ0JyaWRnZSkgYXJyYXlBZGQodGVtcGxhdGUuZGVwcywgcmVzb3VyY2Uuc291cmNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsID0gZ2V0RGVjbEZyb21Tb3VyY2UocmVzb3VyY2Uuc291cmNlLCByZXNvdXJjZS5iYXNlVVJJLCB0cnVlLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsID0gZ2V0RGVjbEZyb21Tb3VyY2UocmVzb3VyY2UsIHJlc291cmNlLnVybCA/IHBhdGguZGlybmFtZShyZXNvdXJjZS51cmwpICsgIi8iIDogIiIsIHRydWUsIG9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWNsLnJlc291cmNlcyAmJiAibm8tc3R5bGUiIGluIGVsQXR0cnMgPT0gZmFsc2UpIGFkZFN0eWxlcyh0ZW1wbGF0ZS5yZXNvdXJjZXMsIGRlY2wucmVzb3VyY2VzLCBpc29sYXRlUHJlZml4KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2wuZGVwcykgYWRkVW5pcXVlKHRlbXBsYXRlLmRlcHMsIGRlY2wuZGVwcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWNsLmwxMG4pIGFkZFVuaXF1ZSh0ZW1wbGF0ZS5sMTBuLCBkZWNsLmwxMG4pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5SZWZNYXAgPSBub3JtYWxpemVSZWZzKGRlY2wudG9rZW5zKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RydWN0aW9ucyA9ICh0b2tlbi5jaGlsZHMgfHwgW10pLnNsaWNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZU5TUHJlZml4TWFwID0gYmFzaXMub2JqZWN0LnNsaWNlKGRlY2wuc3R5bGVOU1ByZWZpeCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbEF0dHJzWyJjbGFzcyJdKSBpbnN0cnVjdGlvbnMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVFlQRV9FTEVNRU5ULAogICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeDogImIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJhcHBlbmQtY2xhc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFRZUEVfQVRUUklCVVRFLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInZhbHVlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbEF0dHJzWyJjbGFzcyJdCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxBdHRycy5pZCkgaW5zdHJ1Y3Rpb25zLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFRZUEVfRUxFTUVOVCwKICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXg6ICJiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2V0LWF0dHIiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiBbIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFRZUEVfQVRUUklCVVRFLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJpZCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBUWVBFX0FUVFJJQlVURSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ2YWx1ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZWxBdHRycy5pZAogICAgICAgICAgICAgICAgICAgICAgICAgIH0gXQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsQXR0cnMucmVmKSBpZiAodG9rZW5SZWZNYXAuZWxlbWVudCkgZWxBdHRycy5yZWYudHJpbSgpLnNwbGl0KC9ccysvKS5tYXAoZnVuY3Rpb24ocmVmTmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRva2VuUmVmKHRva2VuUmVmTWFwLmVsZW1lbnQudG9rZW4sIHJlZk5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGNoaWxkOyBjaGlsZCA9IGluc3RydWN0aW9uc1tqXTsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT0gVFlQRV9FTEVNRU5UICYmIGNoaWxkLnByZWZpeCA9PSAiYiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hpbGQubmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJzdHlsZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkQXR0cnMgPSB0b2tlbkF0dHJzKGNoaWxkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGVOYW1lc3BhY2UgPSBjaGlsZEF0dHJzLm5hbWVzcGFjZSB8fCBjaGlsZEF0dHJzLm5zOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZUlzb2xhdGUgPSBzdHlsZU5hbWVzcGFjZSA/IHN0eWxlTmFtZXNwYWNlSXNvbGF0ZSA6IGlzb2xhdGVQcmVmaXg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IGFkZFN0eWxlKHRlbXBsYXRlLCBjaGlsZCwgY2hpbGRBdHRycy5zcmMsIHN0eWxlSXNvbGF0ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlTmFtZXNwYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3JjIGluIHN0eWxlTmFtZXNwYWNlSXNvbGF0ZSA9PSBmYWxzZSkgc3R5bGVOYW1lc3BhY2VJc29sYXRlW3NyY10gPSBnZW5Jc29sYXRlTWFya2VyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZU5TUHJlZml4TWFwW3N0eWxlTmFtZXNwYWNlXSA9IHN0eWxlTmFtZXNwYWNlSXNvbGF0ZVtzcmNdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAicmVwbGFjZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgInJlbW92ZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImJlZm9yZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImFmdGVyIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZU9yUmVtb3ZlID0gY2hpbGQubmFtZSA9PSAicmVwbGFjZSIgfHwgY2hpbGQubmFtZSA9PSAicmVtb3ZlIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRBdHRycyA9IHRva2VuQXR0cnMoY2hpbGQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWYgPSAicmVmIiBpbiBjaGlsZEF0dHJzIHx8ICFyZXBsYWNlT3JSZW1vdmUgPyBjaGlsZEF0dHJzLnJlZiA6ICJlbGVtZW50IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5SZWYgPSByZWYgJiYgdG9rZW5SZWZNYXBbcmVmXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5SZWYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSB0b2tlblJlZi5vd25lci5pbmRleE9mKHRva2VuUmVmLnRva2VuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgIT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbIHBvcyArIChjaGlsZC5uYW1lID09ICJhZnRlciIpLCByZXBsYWNlT3JSZW1vdmUgXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5hbWUgIT0gInJlbW92ZSIpIGFyZ3MgPSBhcmdzLmNvbmNhdChwcm9jZXNzKGNoaWxkLmNoaWxkcywgdGVtcGxhdGUsIG9wdGlvbnMpIHx8IFtdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5SZWYub3duZXIuc3BsaWNlLmFwcGx5KHRva2VuUmVmLm93bmVyLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgInByZXBlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJhcHBlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEF0dHJzID0gdG9rZW5BdHRycyhjaGlsZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9ICJyZWYiIGluIGNoaWxkQXR0cnMgPyBjaGlsZEF0dHJzLnJlZiA6ICJlbGVtZW50IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5SZWYgPSByZWYgJiYgdG9rZW5SZWZNYXBbcmVmXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSB0b2tlblJlZiAmJiB0b2tlblJlZi50b2tlbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gJiYgdG9rZW5bVE9LRU5fVFlQRV0gPT0gVFlQRV9FTEVNRU5UKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRzID0gcHJvY2VzcyhjaGlsZC5jaGlsZHMsIHRlbXBsYXRlLCBvcHRpb25zKSB8fCBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5uYW1lID09ICJwcmVwZW5kIikgdG9rZW4uc3BsaWNlLmFwcGx5KHRva2VuLCBbIEVMRU1FTlRfQVRUUlMsIDAgXS5jb25jYXQoY2hpbGRzKSk7IGVsc2UgdG9rZW4ucHVzaC5hcHBseSh0b2tlbiwgY2hpbGRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImF0dHIiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJzZXQtYXR0ciI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZ5QXR0cihjaGlsZCwgZmFsc2UsICJzZXQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiYXBwZW5kLWF0dHIiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmeUF0dHIoY2hpbGQsIGZhbHNlLCAiYXBwZW5kIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgInJlbW92ZS1hdHRyIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZnlBdHRyKGNoaWxkLCBmYWxzZSwgInJlbW92ZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJjbGFzcyI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImFwcGVuZC1jbGFzcyI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZ5QXR0cihjaGlsZCwgImNsYXNzIiwgImFwcGVuZCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJzZXQtY2xhc3MiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmeUF0dHIoY2hpbGQsICJjbGFzcyIsICJzZXQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAicmVtb3ZlLWNsYXNzIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZnlBdHRyKGNoaWxkLCAiY2xhc3MiLCAicmVtb3ZlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImFkZC1yZWYiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEF0dHJzID0gdG9rZW5BdHRycyhjaGlsZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9ICJyZWYiIGluIGNoaWxkQXR0cnMgPyBjaGlsZEF0dHJzLnJlZiA6ICJlbGVtZW50IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5SZWYgPSByZWYgJiYgdG9rZW5SZWZNYXBbcmVmXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSB0b2tlblJlZiAmJiB0b2tlblJlZi50b2tlbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gJiYgY2hpbGRBdHRycy5uYW1lKSBhZGRUb2tlblJlZih0b2tlbiwgY2hpbGRBdHRycy5uYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAicmVtb3ZlLXJlZiI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkQXR0cnMgPSB0b2tlbkF0dHJzKGNoaWxkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gInJlZiIgaW4gY2hpbGRBdHRycyA/IGNoaWxkQXR0cnMucmVmIDogImVsZW1lbnQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2tlblJlZiA9IHJlZiAmJiB0b2tlblJlZk1hcFtyZWZdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IHRva2VuUmVmICYmIHRva2VuUmVmLnRva2VuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikgcmVtb3ZlVG9rZW5SZWYodG9rZW4sIGNoaWxkQXR0cnMubmFtZSB8fCBjaGlsZEF0dHJzLnJlZik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUud2FybnMucHVzaCgiVW5rbm93biBpbnN0cnVjdGlvbiB0YWcgPGI6IiArIGNoaWxkLm5hbWUgKyAiPiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBkZWNsLnRva2Vucy5wdXNoLmFwcGx5KGRlY2wudG9rZW5zLCBwcm9jZXNzKFsgY2hpbGQgXSwgdGVtcGxhdGUsIG9wdGlvbnMpIHx8IFtdKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5SZWZNYXAuZWxlbWVudCkgcmVtb3ZlVG9rZW5SZWYodG9rZW5SZWZNYXAuZWxlbWVudC50b2tlbiwgImVsZW1lbnQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFzaXMub2JqZWN0LmNvbXBsZXRlKHRlbXBsYXRlLnN0eWxlTlNQcmVmaXgsIHN0eWxlTlNQcmVmaXhNYXApOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNvbGF0ZVByZWZpeCkgaXNvbGF0ZVRva2VucyhkZWNsLnRva2VucywgaXNvbGF0ZVByZWZpeCk7IGVsc2UgaWYgKGRlY2wuaXNvbGF0ZSAmJiAhdGVtcGxhdGUuaXNvbGF0ZSkgdGVtcGxhdGUuaXNvbGF0ZSA9IG9wdGlvbnMuaXNvbGF0ZSB8fCBnZW5Jc29sYXRlTWFya2VyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoLmFwcGx5KHJlc3VsdCwgZGVjbC50b2tlbnMpOwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YWNrID0gaW5jbHVkZVN0YWNrLnNsaWNlKGluY2x1ZGVTdGFjay5pbmRleE9mKHJlc291cmNlKSB8fCAwKS5jb25jYXQocmVzb3VyY2UpLm1hcChmdW5jdGlvbihyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzIGluc3RhbmNlb2YgVGVtcGxhdGUpIHJlcyA9IHJlcy5zb3VyY2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcyBpbnN0YW5jZW9mIEwxMG5Qcm94eVRva2VuKSByZXR1cm4gIntsMTBuOiIgKyByZXMudG9rZW4ubmFtZSArICJAIiArIHJlcy50b2tlbi5kaWN0aW9uYXJ5LnJlc291cmNlLnVybCArICJ9IjsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnVybCB8fCAiW2lubGluZSB0ZW1wbGF0ZV0iOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUud2FybnMucHVzaCgiUmVjdXJzaW9uOiAiLCBzdGFjay5qb2luKCIgLT4gIikpOwogICAgICAgICAgICAgICAgICAgICAgICBiYXNpcy5kZXYud2FybigiUmVjdXJzaW9uIGluIHRlbXBsYXRlOiAiLCBzdGFjay5qb2luKCIgLT4gIikpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpdGVtID0gWyAxLCBiaW5kaW5ncywgcmVmcywgbmFtZSh0b2tlbikgXTsKICAgICAgICAgICAgICBpdGVtLnB1c2guYXBwbHkoaXRlbSwgYXR0cnModG9rZW4sIGl0ZW0sIG9wdGlvbnMub3B0aW1pemVTaXplKSB8fCBbXSk7CiAgICAgICAgICAgICAgaXRlbS5wdXNoLmFwcGx5KGl0ZW0sIHByb2Nlc3ModG9rZW4uY2hpbGRzLCB0ZW1wbGF0ZSwgb3B0aW9ucykgfHwgW10pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIFRZUEVfVEVYVDoKICAgICAgICAgICAgICBpZiAocmVmcyAmJiByZWZzLmxlbmd0aCA9PSAyICYmIGFycmF5U2VhcmNoKHJlZnMsICJlbGVtZW50IikpIGJpbmRpbmdzID0gcmVmc1srIXJlZnMubGFzdFNlYXJjaEluZGV4XTsKICAgICAgICAgICAgICBpZiAoYmluZGluZ3MpIHsKICAgICAgICAgICAgICAgIHZhciBsMTBuQmluZGluZyA9IGFic2wxMG4oYmluZGluZ3MsIHRlbXBsYXRlLmRpY3RVUkkpOwogICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gbDEwbkJpbmRpbmcuc3BsaXQoL1s6QFx7XS8pOwogICAgICAgICAgICAgICAgaWYgKHBhcnRzWzBdID09ICJsMTBuIiAmJiBwYXJ0cy5sZW5ndGggPT0gMykgewogICAgICAgICAgICAgICAgICBpZiAoIXBhcnRzWzJdKSB7CiAgICAgICAgICAgICAgICAgICAgYXJyYXlSZW1vdmUocmVmcywgYmluZGluZ3MpOwogICAgICAgICAgICAgICAgICAgIGlmIChyZWZzLmxlbmd0aCA9PSAwKSByZWZzID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICBiaW5kaW5ncyA9IDA7CiAgICAgICAgICAgICAgICAgICAgdG9rZW4udmFsdWUgPSB0b2tlbi52YWx1ZS5yZXBsYWNlKC9cfSQvLCAiQHVuZGVmaW5lZH0iKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbDEwbklkID0gcGFydHMuc2xpY2UoMSkuam9pbigiQCIpOwogICAgICAgICAgICAgICAgICAgIHZhciBsMTBuVG9rZW4gPSBiYXNpcy5sMTBuLnRva2VuKGwxMG5JZCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGwxMG5UZW1wbGF0ZSA9IGdldEwxMG5UZW1wbGF0ZShsMTBuVG9rZW4pOwogICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLmwxMG5SZXNvbHZlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKGwxMG5UZW1wbGF0ZSAmJiBsMTBuVG9rZW4udHlwZSA9PSAibWFya3VwIikgewogICAgICAgICAgICAgICAgICAgICAgdG9rZW5zW2ktLV0gPSB0b2tlbml6ZSgnPGI6aW5jbHVkZSBzcmM9IiMnICsgbDEwblRlbXBsYXRlLnRlbXBsYXRlSWQgKyAnIi8+JylbMF07CiAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgYXJyYXlBZGQodGVtcGxhdGUubDEwbiwgbDEwbklkKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpdGVtID0gWyAzLCBiaW5kaW5ncywgcmVmcyBdOwogICAgICAgICAgICAgIGlmICghcmVmcyB8fCB0b2tlbi52YWx1ZSAhPSAieyIgKyByZWZzLmpvaW4oInwiKSArICJ9IikgaXRlbS5wdXNoKHVudG9rZW4odG9rZW4udmFsdWUpKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBUWVBFX0NPTU1FTlQ6CiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMub3B0aW1pemVTaXplICYmICFiaW5kaW5ncyAmJiAhcmVmcykgY29udGludWU7CiAgICAgICAgICAgICAgaXRlbSA9IFsgOCwgYmluZGluZ3MsIHJlZnMgXTsKICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMub3B0aW1pemVTaXplKSBpZiAoIXJlZnMgfHwgdG9rZW4udmFsdWUgIT0gInsiICsgcmVmcy5qb2luKCJ8IikgKyAifSIpIGl0ZW0ucHVzaCh1bnRva2VuKHRva2VuLnZhbHVlKSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICB3aGlsZSAoaXRlbVtpdGVtLmxlbmd0aCAtIDFdID09PSAwKSBpdGVtLnBvcCgpOwogICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogMDsKICAgICAgfQogICAgICBmdW5jdGlvbiBhYnNsMTBuKHZhbHVlLCBkaWN0VVJJKSB7CiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAic3RyaW5nIikgcmV0dXJuIHZhbHVlOwogICAgICAgIHZhciBwYXJ0cyA9IHZhbHVlLnNwbGl0KCI6Iik7CiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PSAyICYmIHBhcnRzWzBdID09ICJsMTBuIiAmJiBwYXJ0c1sxXS5pbmRleE9mKCJAIikgPT0gLTEpIHBhcnRzWzFdID0gcGFydHNbMV0gKyAiQCIgKyBkaWN0VVJJOwogICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCI6Iik7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gbm9ybWFsaXplUmVmcyh0b2tlbnMsIGRpY3RVUkksIG1hcCwgc3RJZHgpIHsKICAgICAgICBpZiAoIW1hcCkgbWFwID0ge307CiAgICAgICAgZm9yICh2YXIgaSA9IHN0SWR4IHx8IDAsIHRva2VuOyB0b2tlbiA9IHRva2Vuc1tpXTsgaSsrKSB7CiAgICAgICAgICBpZiAodG9rZW5bVE9LRU5fVFlQRV0gPT0gVFlQRV9BVFRSSUJVVEVfRVZFTlQpIGNvbnRpbnVlOwogICAgICAgICAgdmFyIHJlZnMgPSB0b2tlbltUT0tFTl9SRUZTXTsKICAgICAgICAgIGlmIChyZWZzKSB7CiAgICAgICAgICAgIGZvciAodmFyIGogPSByZWZzLmxlbmd0aCAtIDEsIHJlZk5hbWU7IHJlZk5hbWUgPSByZWZzW2pdOyBqLS0pIHsKICAgICAgICAgICAgICBpZiAocmVmTmFtZS5pbmRleE9mKCI6IikgIT0gLTEpIHsKICAgICAgICAgICAgICAgIHJlbW92ZVRva2VuUmVmKHRva2VuLCByZWZOYW1lKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAobWFwW3JlZk5hbWVdKSByZW1vdmVUb2tlblJlZihtYXBbcmVmTmFtZV0udG9rZW4sIHJlZk5hbWUpOwogICAgICAgICAgICAgIGlmICh0b2tlbltUT0tFTl9CSU5ESU5HU10gPT0gcmVmTmFtZSkgdG9rZW5bVE9LRU5fQklORElOR1NdID0gaiArIDE7CiAgICAgICAgICAgICAgbWFwW3JlZk5hbWVdID0gewogICAgICAgICAgICAgICAgb3duZXI6IHRva2VucywKICAgICAgICAgICAgICAgIHRva2VuOiB0b2tlbgogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHN3aXRjaCAodG9rZW5bVE9LRU5fVFlQRV0pIHsKICAgICAgICAgICAgY2FzZSBUWVBFX1RFWFQ6CiAgICAgICAgICAgICAgdG9rZW5bVE9LRU5fQklORElOR1NdID0gYWJzbDEwbih0b2tlbltUT0tFTl9CSU5ESU5HU10sIGRpY3RVUkkpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIFRZUEVfQVRUUklCVVRFOgogICAgICAgICAgICAgIGlmICh0b2tlbltUT0tFTl9CSU5ESU5HU10pIHsKICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHRva2VuW1RPS0VOX0JJTkRJTkdTXVswXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYXJyYXkubGVuZ3RoOyBqKyspIGFycmF5W2pdID0gYWJzbDEwbihhcnJheVtqXSwgZGljdFVSSSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIFRZUEVfRUxFTUVOVDoKICAgICAgICAgICAgICBub3JtYWxpemVSZWZzKHRva2VuLCBkaWN0VVJJLCBtYXAsIEVMRU1FTlRfQVRUUlMpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbWFwOwogICAgICB9CiAgICAgIGZ1bmN0aW9uIGFwcGx5RGVmaW5lcyh0b2tlbnMsIHRlbXBsYXRlLCBvcHRpb25zLCBzdElkeCkgewogICAgICAgIHZhciB1bnByZWRpY3RhYmxlID0gMDsKICAgICAgICBmb3IgKHZhciBpID0gc3RJZHggfHwgMCwgdG9rZW47IHRva2VuID0gdG9rZW5zW2ldOyBpKyspIHsKICAgICAgICAgIHZhciB0b2tlblR5cGUgPSB0b2tlbltUT0tFTl9UWVBFXTsKICAgICAgICAgIGlmICh0b2tlblR5cGUgPT0gVFlQRV9FTEVNRU5UKSB1bnByZWRpY3RhYmxlICs9IGFwcGx5RGVmaW5lcyh0b2tlbiwgdGVtcGxhdGUsIG9wdGlvbnMsIEVMRU1FTlRfQVRUUlMpOwogICAgICAgICAgaWYgKHRva2VuVHlwZSA9PSBUWVBFX0FUVFJJQlVURV9DTEFTUyB8fCB0b2tlblR5cGUgPT0gVFlQRV9BVFRSSUJVVEUgJiYgdG9rZW5bQVRUUl9OQU1FXSA9PSAiY2xhc3MiKSB7CiAgICAgICAgICAgIHZhciBiaW5kaW5ncyA9IHRva2VuW1RPS0VOX0JJTkRJTkdTXTsKICAgICAgICAgICAgdmFyIHZhbHVlSWR4ID0gQVRUUl9WQUxVRV9JTkRFWFt0b2tlblR5cGVdOwogICAgICAgICAgICBpZiAoYmluZGluZ3MpIHsKICAgICAgICAgICAgICB2YXIgbmV3QXR0clZhbHVlID0gKHRva2VuW3ZhbHVlSWR4XSB8fCAiIikudHJpbSgpLnNwbGl0KCIgIik7CiAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDAsIGJpbmQ7IGJpbmQgPSBiaW5kaW5nc1trXTsgaysrKSB7CiAgICAgICAgICAgICAgICBpZiAoYmluZC5sZW5ndGggPiAyKSBjb250aW51ZTsKICAgICAgICAgICAgICAgIHZhciBiaW5kTmFtZSA9IGJpbmRbMV0uc3BsaXQoIjoiKS5wb3AoKTsKICAgICAgICAgICAgICAgIHZhciBiaW5kRGVmID0gdGVtcGxhdGUuZGVmaW5lc1tiaW5kTmFtZV07CiAgICAgICAgICAgICAgICBpZiAoYmluZERlZikgewogICAgICAgICAgICAgICAgICBiaW5kLnB1c2guYXBwbHkoYmluZCwgYmluZERlZik7CiAgICAgICAgICAgICAgICAgIGJpbmREZWYudXNlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgIGlmIChiaW5kRGVmWzBdKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmREZWYubGVuZ3RoID09IDEpIGFycmF5QWRkKG5ld0F0dHJWYWx1ZSwgYmluZFswXSArIGJpbmROYW1lKTsgZWxzZSBhcnJheUFkZChuZXdBdHRyVmFsdWUsIGJpbmRbMF0gKyBiaW5kRGVmWzFdW2JpbmREZWZbMF0gLSAxXSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHRlbXBsYXRlLndhcm5zLnB1c2goIlVucHJlZGljdGFibGUgdmFsdWUgYCIgKyBiaW5kTmFtZSArICJgIGluIGNsYXNzIGJpbmRpbmc6ICIgKyBiaW5kWzBdICsgInsiICsgYmluZFsxXSArICJ9Iik7CiAgICAgICAgICAgICAgICAgIHVucHJlZGljdGFibGUrKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdG9rZW5bdmFsdWVJZHhdID0gbmV3QXR0clZhbHVlLmpvaW4oIiAiKTsKICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vcHRpbWl6ZVNpemUgJiYgIXRva2VuW3ZhbHVlSWR4XSkgdG9rZW4ubGVuZ3RoID0gdmFsdWVJZHg7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVucHJlZGljdGFibGU7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gaXNvbGF0ZVRva2Vucyh0b2tlbnMsIGlzb2xhdGUsIHRlbXBsYXRlLCBzdElkeCkgewogICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NOYW1lKG5hbWUpIHsKICAgICAgICAgIHZhciBwYXJ0cyA9IG5hbWUuc3BsaXQoIjoiKTsKICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT0gMSkgcmV0dXJuIGlzb2xhdGUgKyBwYXJ0c1swXTsKICAgICAgICAgIGlmICghdGVtcGxhdGUpIHJldHVybiBuYW1lOwogICAgICAgICAgaWYgKCFwYXJ0c1swXSkgcmV0dXJuIHBhcnRzWzFdOwogICAgICAgICAgaWYgKHBhcnRzWzBdIGluIHRlbXBsYXRlLnN0eWxlTlNQcmVmaXggPT0gZmFsc2UpIHsKICAgICAgICAgICAgdGVtcGxhdGUud2FybnMucHVzaCgiTmFtZXNwYWNlIGAiICsgcGFydHNbMF0gKyAiYCBpcyBub3QgZGVmaW5lZCBpbiB0ZW1wbGF0ZSwgbm8gcHJlZml4IGFkZGVkIik7CiAgICAgICAgICAgIHJldHVybiBuYW1lOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnN0eWxlTlNQcmVmaXhbcGFydHNbMF1dICsgcGFydHNbMV07CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGkgPSBzdElkeCB8fCAwLCB0b2tlbjsgdG9rZW4gPSB0b2tlbnNbaV07IGkrKykgewogICAgICAgICAgdmFyIHRva2VuVHlwZSA9IHRva2VuW1RPS0VOX1RZUEVdOwogICAgICAgICAgaWYgKHRva2VuVHlwZSA9PSBUWVBFX0VMRU1FTlQpIGlzb2xhdGVUb2tlbnModG9rZW4sIGlzb2xhdGUsIHRlbXBsYXRlLCBFTEVNRU5UX0FUVFJTKTsKICAgICAgICAgIGlmICh0b2tlblR5cGUgPT0gVFlQRV9BVFRSSUJVVEVfQ0xBU1MgfHwgdG9rZW5UeXBlID09IFRZUEVfQVRUUklCVVRFICYmIHRva2VuW0FUVFJfTkFNRV0gPT0gImNsYXNzIikgewogICAgICAgICAgICB2YXIgYmluZGluZ3MgPSB0b2tlbltUT0tFTl9CSU5ESU5HU107CiAgICAgICAgICAgIHZhciB2YWx1ZUluZGV4ID0gQVRUUl9WQUxVRV9JTkRFWFt0b2tlblR5cGVdOwogICAgICAgICAgICBpZiAodG9rZW5bdmFsdWVJbmRleF0pIHRva2VuW3ZhbHVlSW5kZXhdID0gdG9rZW5bdmFsdWVJbmRleF0uc3BsaXQoL1xzKy8pLm1hcChwcm9jZXNzTmFtZSkuam9pbigiICIpOwogICAgICAgICAgICBpZiAoYmluZGluZ3MpIGZvciAodmFyIGsgPSAwLCBiaW5kOyBiaW5kID0gYmluZGluZ3Nba107IGsrKykgYmluZFswXSA9IHByb2Nlc3NOYW1lKGJpbmRbMF0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZnVuY3Rpb24gbWFrZURlY2xhcmF0aW9uKHNvdXJjZSwgYmFzZVVSSSwgb3B0aW9ucywgc291cmNlVXJsLCBzb3VyY2VPcmlnaW4pIHsKICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICB2YXIgd2FybnMgPSBbXTsKICAgICAgICB2YXIgc291cmNlXzsKICAgICAgICB2YXIgcmVzdWx0ID0gewogICAgICAgICAgc291cmNlVXJsOiBzb3VyY2VVcmwsCiAgICAgICAgICBiYXNlVVJJOiBiYXNlVVJJIHx8ICIiLAogICAgICAgICAgdG9rZW5zOiBudWxsLAogICAgICAgICAgcmVzb3VyY2VzOiBbXSwKICAgICAgICAgIHN0eWxlTlNQcmVmaXg6IHt9LAogICAgICAgICAgZGVwczogW10sCiAgICAgICAgICBsMTBuOiBbXSwKICAgICAgICAgIGRlZmluZXM6IHt9LAogICAgICAgICAgdW5wcmVkaWN0YWJsZTogdHJ1ZSwKICAgICAgICAgIHdhcm5zOiB3YXJucywKICAgICAgICAgIGlzb2xhdGU6IGZhbHNlCiAgICAgICAgfTsKICAgICAgICByZXN1bHQuZGljdFVSSSA9IHNvdXJjZVVybCA/IGJhc2lzLnBhdGgucmVzb2x2ZShzb3VyY2VVcmwpIDogYmFzZVVSSSB8fCAiIjsKICAgICAgICBpZiAocmVzdWx0LmRpY3RVUkkpIHsKICAgICAgICAgIHZhciBleHRuYW1lID0gYmFzaXMucGF0aC5leHRuYW1lKHJlc3VsdC5kaWN0VVJJKTsKICAgICAgICAgIGlmIChleHRuYW1lICYmIGV4dG5hbWUgIT0gIi5sMTBuIikgcmVzdWx0LmRpY3RVUkkgPSByZXN1bHQuZGljdFVSSS5zdWJzdHIoMCwgcmVzdWx0LmRpY3RVUkkubGVuZ3RoIC0gZXh0bmFtZS5sZW5ndGgpICsgIi5sMTBuIjsKICAgICAgICB9CiAgICAgICAgaWYgKCFzb3VyY2UudGVtcGxhdGVUb2tlbnMpIHsKICAgICAgICAgIHNvdXJjZV8gPSBzb3VyY2U7CiAgICAgICAgICBzb3VyY2UgPSB0b2tlbml6ZShTdHJpbmcoc291cmNlKSk7CiAgICAgICAgfQogICAgICAgIGlmIChzb3VyY2Uud2FybnMpIHdhcm5zLnB1c2guYXBwbHkod2FybnMsIHNvdXJjZS53YXJucyk7CiAgICAgICAgaW5jbHVkZVN0YWNrLnB1c2goc291cmNlT3JpZ2luICE9PSB0cnVlICYmIHNvdXJjZU9yaWdpbiB8fCB7fSk7CiAgICAgICAgcmVzdWx0LnRva2VucyA9IHByb2Nlc3Moc291cmNlLCByZXN1bHQsIG9wdGlvbnMpOwogICAgICAgIGluY2x1ZGVTdGFjay5wb3AoKTsKICAgICAgICBpZiAoIXJlc3VsdC50b2tlbnMpIHJlc3VsdC50b2tlbnMgPSBbIFsgMywgMCwgMCwgIiIgXSBdOwogICAgICAgIGlmIChzb3VyY2VfKSByZXN1bHQudG9rZW5zLnNvdXJjZV8gPSBzb3VyY2VfOwogICAgICAgIGFkZFRva2VuUmVmKHJlc3VsdC50b2tlbnNbMF0sICJlbGVtZW50Iik7CiAgICAgICAgbm9ybWFsaXplUmVmcyhyZXN1bHQudG9rZW5zLCByZXN1bHQuZGljdFVSSSk7CiAgICAgICAgcmVzdWx0LnVucHJlZGljdGFibGUgPSAhIWFwcGx5RGVmaW5lcyhyZXN1bHQudG9rZW5zLCByZXN1bHQsIG9wdGlvbnMpOwogICAgICAgIGlmICgvXlteYS16XS9pLnRlc3QocmVzdWx0Lmlzb2xhdGUpKSBiYXNpcy5kZXYuZXJyb3IoImJhc2lzLnRlbXBsYXRlOiBpc29sYXRpb24gcHJlZml4IGAiICsgcmVzdWx0Lmlzb2xhdGUgKyAiYCBzaG91bGQgbm90IHN0YXJ0cyB3aXRoIHN5bWJvbCBvdGhlciB0aGFuIGxldHRlciwgb3RoZXJ3aXNlIGl0IGxlYWRzIHRvIGluY29ycmVjdCBjc3MgY2xhc3MgbmFtZXMgYW5kIGJyb2tlbiBzdHlsZXMiKTsKICAgICAgICBpZiAoaW5jbHVkZVN0YWNrLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICBpc29sYXRlVG9rZW5zKHJlc3VsdC50b2tlbnMsIHJlc3VsdC5pc29sYXRlIHx8ICIiLCByZXN1bHQpOwogICAgICAgICAgaWYgKHJlc3VsdC5pc29sYXRlKSBmb3IgKHZhciBpID0gMCwgaXRlbTsgaXRlbSA9IHJlc3VsdC5yZXNvdXJjZXNbaV07IGkrKykgaWYgKGl0ZW1bMV0gIT09IHN0eWxlTmFtZXNwYWNlSXNvbGF0ZSkgaXRlbVsxXSA9IHJlc3VsdC5pc29sYXRlICsgaXRlbVsxXTsKICAgICAgICAgIHJlc3VsdC5yZXNvdXJjZXMgPSByZXN1bHQucmVzb3VyY2VzLmZpbHRlcihmdW5jdGlvbihpdGVtLCBpZHgsIGFycmF5KSB7CiAgICAgICAgICAgIHJldHVybiAhYmFzaXMuYXJyYXkuc2VhcmNoKGFycmF5LCBTdHJpbmcoaXRlbSksIFN0cmluZywgaWR4ICsgMSk7CiAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24oaXRlbSkgewogICAgICAgICAgICB2YXIgdXJsID0gaXRlbVswXTsKICAgICAgICAgICAgdmFyIGlzb2xhdGUgPSBpdGVtWzFdOwogICAgICAgICAgICBpZiAoaXNvbGF0ZSA9PT0gc3R5bGVOYW1lc3BhY2VJc29sYXRlKSBpc29sYXRlID0gc3R5bGVOYW1lc3BhY2VJc29sYXRlW3VybF07CiAgICAgICAgICAgIGlmICghaXNvbGF0ZSkgcmV0dXJuIHVybDsKICAgICAgICAgICAgdmFyIHJlc291cmNlID0gYmFzaXMucmVzb3VyY2UudmlydHVhbCgiY3NzIiwgIiIpLnJlYWR5KGZ1bmN0aW9uKGNzc1Jlc291cmNlKSB7CiAgICAgICAgICAgICAgc291cmNlUmVzb3VyY2UoKTsKICAgICAgICAgICAgICBiYXNpcy5vYmplY3QuZXh0ZW5kKGNzc1Jlc291cmNlLCB7CiAgICAgICAgICAgICAgICB1cmw6IHVybCArICI/aXNvbGF0ZS1wcmVmaXg9IiArIGlzb2xhdGUsCiAgICAgICAgICAgICAgICBiYXNlVVJJOiBiYXNpcy5wYXRoLmRpcm5hbWUodXJsKSArICIvIgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIHNvdXJjZVJlc291cmNlID0gYmFzaXMucmVzb3VyY2UodXJsKS5yZWFkeShmdW5jdGlvbihjc3NSZXNvdXJjZSkgewogICAgICAgICAgICAgIHZhciBjc3NUZXh0ID0gaXNvbGF0ZUNzcyhjc3NSZXNvdXJjZS5jc3NUZXh0IHx8ICIiLCBpc29sYXRlKTsKICAgICAgICAgICAgICBpZiAodHlwZW9mIGJ0b2EgPT0gImZ1bmN0aW9uIikgY3NzVGV4dCArPSAiXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCIgKyBidG9hKCd7InZlcnNpb24iOjMsInNvdXJjZXMiOlsiJyArIGJhc2lzLnBhdGgub3JpZ2luICsgdXJsICsgJyJdLCcgKyAnIm1hcHBpbmdzIjoiQUFBQScgKyBiYXNpcy5zdHJpbmcucmVwZWF0KCI7QUFDQSIsIGNzc1RleHQuc3BsaXQoIlxuIikubGVuZ3RoKSArICcifScpICsgIiAqLyI7CiAgICAgICAgICAgICAgcmVzb3VyY2UudXBkYXRlKGNzc1RleHQpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLnVybDsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmVzdWx0LmRlZmluZXMpIGlmICghcmVzdWx0LmRlZmluZXNba2V5XS51c2VkKSB3YXJucy5wdXNoKCJVbnVzZWQgZGVmaW5lIGZvciAiICsga2V5KTsKICAgICAgICBkZWxldGUgcmVzdWx0LmRlZmluZXM7CiAgICAgICAgZGVsZXRlIHJlc3VsdC5sMTBuUmVzb2x2ZWQ7CiAgICAgICAgaWYgKCF3YXJucy5sZW5ndGgpIHJlc3VsdC53YXJucyA9IGZhbHNlOwogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgIH07CiAgICB9KCk7CiAgICBmdW5jdGlvbiBzdGFydFVzZVJlc291cmNlKHVyaSkgewogICAgICB2YXIgcmVzb3VyY2UgPSBiYXNpcy5yZXNvdXJjZSh1cmkpLmZldGNoKCk7CiAgICAgIGlmICh0eXBlb2YgcmVzb3VyY2Uuc3RhcnRVc2UgPT0gImZ1bmN0aW9uIikgcmVzb3VyY2Uuc3RhcnRVc2UoKTsKICAgIH0KICAgIGZ1bmN0aW9uIHN0b3BVc2VSZXNvdXJjZSh1cmkpIHsKICAgICAgdmFyIHJlc291cmNlID0gYmFzaXMucmVzb3VyY2UodXJpKS5mZXRjaCgpOwogICAgICBpZiAodHlwZW9mIHJlc291cmNlLnN0b3BVc2UgPT0gImZ1bmN0aW9uIikgcmVzb3VyY2Uuc3RvcFVzZSgpOwogICAgfQogICAgZnVuY3Rpb24gdGVtcGxhdGVTb3VyY2VVcGRhdGUoKSB7CiAgICAgIGlmICh0aGlzLmRlc3Ryb3lCdWlsZGVyKSBidWlsZFRlbXBsYXRlLmNhbGwodGhpcyk7CiAgICAgIGZvciAodmFyIGkgPSAwLCBhdHRhY2g7IGF0dGFjaCA9IHRoaXMuYXR0YWNoZXNfW2ldOyBpKyspIGF0dGFjaC5oYW5kbGVyLmNhbGwoYXR0YWNoLmNvbnRleHQpOwogICAgfQogICAgZnVuY3Rpb24gY2xvbmVEZWNsKGFycmF5KSB7CiAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgaWYgKGFycmF5LnNvdXJjZV8pIHJlc3VsdC5zb3VyY2VfID0gYXJyYXkuc291cmNlXzsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgcmVzdWx0LnB1c2goQXJyYXkuaXNBcnJheShhcnJheVtpXSkgPyBjbG9uZURlY2woYXJyYXlbaV0pIDogYXJyYXlbaV0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgZnVuY3Rpb24gZ2V0RGVjbEZyb21Tb3VyY2Uoc291cmNlLCBiYXNlVVJJLCBjbG9uZSwgb3B0aW9ucykgewogICAgICB2YXIgcmVzdWx0ID0gc291cmNlOwogICAgICB2YXIgc291cmNlVXJsOwogICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgYmFzZVVSSSA9ICJiYXNlVVJJIiBpbiBzb3VyY2UgPyBzb3VyY2UuYmFzZVVSSSA6IGJhc2VVUkk7CiAgICAgICAgc291cmNlVXJsID0gInVybCIgaW4gc291cmNlID8gc291cmNlLnVybCA6IHNvdXJjZVVybDsKICAgICAgICByZXN1bHQgPSByZXN1bHQoKTsKICAgICAgfQogICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgYmFzaXMuVG9rZW4pIHsKICAgICAgICBiYXNlVVJJID0gImJhc2VVUkkiIGluIHNvdXJjZSA/IHNvdXJjZS5iYXNlVVJJIDogYmFzZVVSSTsKICAgICAgICBzb3VyY2VVcmwgPSAidXJsIiBpbiBzb3VyY2UgPyBzb3VyY2UudXJsIDogc291cmNlVXJsOwogICAgICAgIHJlc3VsdCA9IHJlc3VsdC5nZXQoKTsKICAgICAgfQogICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7CiAgICAgICAgaWYgKGNsb25lKSByZXN1bHQgPSBjbG9uZURlY2wocmVzdWx0KTsKICAgICAgICByZXN1bHQgPSB7CiAgICAgICAgICB0b2tlbnM6IHJlc3VsdAogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT0gIm9iamVjdCIgfHwgIUFycmF5LmlzQXJyYXkocmVzdWx0LnRva2VucykpIHJlc3VsdCA9IFN0cmluZyhyZXN1bHQpOwogICAgICB9CiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICJzdHJpbmciKSByZXN1bHQgPSBtYWtlRGVjbGFyYXRpb24ocmVzdWx0LCBiYXNlVVJJLCBvcHRpb25zLCBzb3VyY2VVcmwsIHNvdXJjZSk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgICBmdW5jdGlvbiBsMTBuSGFuZGxlcih2YWx1ZSkgewogICAgICBpZiAodGhpcy50eXBlICE9ICJtYXJrdXAiICYmIHRoaXMudG9rZW4udHlwZSA9PSAibWFya3VwIikgewogICAgICAgIGJ1aWxkVGVtcGxhdGUuY2FsbCh0aGlzLnRlbXBsYXRlKTsKICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gYnVpbGRUZW1wbGF0ZSgpIHsKICAgICAgdmFyIGRlY2wgPSBnZXREZWNsRnJvbVNvdXJjZSh0aGlzLnNvdXJjZSwgdGhpcy5iYXNlVVJJLCBmYWxzZSwgewogICAgICAgIGlzb2xhdGU6IHRoaXMuZ2V0SXNvbGF0ZVByZWZpeCgpCiAgICAgIH0pOwogICAgICB2YXIgZGVzdHJveUJ1aWxkZXIgPSB0aGlzLmRlc3Ryb3lCdWlsZGVyOwogICAgICB2YXIgZnVuY3MgPSB0aGlzLmJ1aWxkZXIoZGVjbC50b2tlbnMsIHRoaXMpOwogICAgICB2YXIgZGVwcyA9IHRoaXMuZGVwc187CiAgICAgIHZhciBsMTBuID0gdGhpcy5sMTBuXzsKICAgICAgaWYgKGRlcHMpIHsKICAgICAgICB0aGlzLmRlcHNfID0gbnVsbDsKICAgICAgICBmb3IgKHZhciBpID0gMCwgZGVwOyBkZXAgPSBkZXBzW2ldOyBpKyspIGRlcC5iaW5kaW5nQnJpZGdlLmRldGFjaChkZXAsIGJ1aWxkVGVtcGxhdGUsIHRoaXMpOwogICAgICB9CiAgICAgIGlmIChsMTBuKSBmb3IgKHZhciBpID0gMCwgaXRlbTsgaXRlbSA9IGwxMG5baV07IGkrKykgaXRlbS50b2tlbi5iaW5kaW5nQnJpZGdlLmRldGFjaChpdGVtLnRva2VuLCBsMTBuSGFuZGxlciwgaXRlbSk7CiAgICAgIGlmIChkZWNsLmRlcHMgJiYgZGVjbC5kZXBzLmxlbmd0aCkgewogICAgICAgIGRlcHMgPSBkZWNsLmRlcHM7CiAgICAgICAgdGhpcy5kZXBzXyA9IGRlcHM7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGRlcDsgZGVwID0gZGVwc1tpXTsgaSsrKSBkZXAuYmluZGluZ0JyaWRnZS5hdHRhY2goZGVwLCBidWlsZFRlbXBsYXRlLCB0aGlzKTsKICAgICAgfQogICAgICBpZiAoZGVjbC5sMTBuKSB7CiAgICAgICAgbDEwbiA9IGRlY2wubDEwbjsKICAgICAgICB0aGlzLmwxMG5fID0ge307CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGtleTsga2V5ID0gbDEwbltpXTsgaSsrKSB7CiAgICAgICAgICB2YXIgbDEwblRva2VuID0gYmFzaXMubDEwbi50b2tlbihrZXkpOwogICAgICAgICAgbDEwblRva2VuLmJpbmRpbmdCcmlkZ2UuYXR0YWNoKGwxMG5Ub2tlbiwgbDEwbkhhbmRsZXIsIHRoaXMubDEwbl9ba2V5XSA9IHsKICAgICAgICAgICAgdGVtcGxhdGU6IHRoaXMsCiAgICAgICAgICAgIHRva2VuOiBsMTBuVG9rZW4sCiAgICAgICAgICAgIHR5cGU6IGwxMG5Ub2tlbi50eXBlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5jcmVhdGVJbnN0YW5jZSA9IGZ1bmNzLmNyZWF0ZUluc3RhbmNlOwogICAgICB0aGlzLmNsZWFySW5zdGFuY2UgPSBmdW5jcy5kZXN0cm95SW5zdGFuY2U7CiAgICAgIHRoaXMuZ2V0QmluZGluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBuYW1lczogZnVuY3Mua2V5cwogICAgICAgIH07CiAgICAgIH07CiAgICAgIHRoaXMuZGVzdHJveUJ1aWxkZXIgPSBmdW5jcy5kZXN0cm95OwogICAgICB0aGlzLmluc3RhbmNlc18gPSBmdW5jcy5pbnN0YW5jZXNfOwogICAgICB0aGlzLmRlY2xfID0gZGVjbDsKICAgICAgdmFyIGRlY2xSZXNvdXJjZXMgPSBkZWNsLnJlc291cmNlcyAmJiBkZWNsLnJlc291cmNlcy5sZW5ndGggPiAwID8gZGVjbC5yZXNvdXJjZXMgOiBudWxsOwogICAgICBpZiAoZGVjbFJlc291cmNlcykgZm9yICh2YXIgaSA9IDAsIHJlczsgcmVzID0gZGVjbFJlc291cmNlc1tpXTsgaSsrKSBzdGFydFVzZVJlc291cmNlKHJlcyk7CiAgICAgIGlmICh0aGlzLnJlc291cmNlcykgZm9yICh2YXIgaSA9IDAsIHJlczsgcmVzID0gdGhpcy5yZXNvdXJjZXNbaV07IGkrKykgc3RvcFVzZVJlc291cmNlKHJlcyk7CiAgICAgIHRoaXMucmVzb3VyY2VzID0gZGVjbFJlc291cmNlczsKICAgICAgaWYgKGRlc3Ryb3lCdWlsZGVyKSBkZXN0cm95QnVpbGRlcih0cnVlKTsKICAgIH0KICAgIHZhciBzb3VyY2VCeURvY3VtZW50SWRSZXNvbHZlcnMgPSB7fTsKICAgIGZ1bmN0aW9uIGdldFRlbXBsYXRlQnlEb2N1bWVudElkKGlkKSB7CiAgICAgIHZhciByZXNvbHZlciA9IHJlc29sdmVTb3VyY2VCeURvY3VtZW50SWQoaWQpOwogICAgICBpZiAocmVzb2x2ZXIudGVtcGxhdGUpIHJldHVybiByZXNvbHZlci50ZW1wbGF0ZTsKICAgICAgdmFyIGhvc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7CiAgICAgIHZhciBzb3VyY2UgPSAiIjsKICAgICAgaWYgKGhvc3QgJiYgaG9zdC50YWdOYW1lID09ICJTQ1JJUFQiICYmIGhvc3QudHlwZSA9PSAidGV4dC9iYXNpcy10ZW1wbGF0ZSIpIHNvdXJjZSA9IGhvc3QudGV4dENvbnRlbnQgfHwgaG9zdC50ZXh0OyBlbHNlIGlmICghaG9zdCkgYmFzaXMuZGV2Lndhcm4oIlRlbXBsYXRlIHNjcmlwdCBlbGVtZW50IHdpdGggaWQgYCIgKyBpZCArICJgIG5vdCBmb3VuZCIpOyBlbHNlIGJhc2lzLmRldi53YXJuKCdUZW1wbGF0ZSBzaG91bGQgYmUgZGVjbGFyZWQgaW4gPHNjcmlwdCB0eXBlPSJ0ZXh0L2Jhc2lzLXRlbXBsYXRlIj4gZWxlbWVudCAoaWQgYCcgKyBzb3VyY2VJZCArICJgKSIpOwogICAgICByZXR1cm4gcmVzb2x2ZXIudGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUoc291cmNlKTsKICAgIH0KICAgIGZ1bmN0aW9uIHJlc29sdmVTb3VyY2VCeURvY3VtZW50SWQoc291cmNlSWQpIHsKICAgICAgdmFyIHJlc29sdmVyID0gc291cmNlQnlEb2N1bWVudElkUmVzb2x2ZXJzW3NvdXJjZUlkXTsKICAgICAgaWYgKCFyZXNvbHZlcikgewogICAgICAgIHJlc29sdmVyID0gc291cmNlQnlEb2N1bWVudElkUmVzb2x2ZXJzW3NvdXJjZUlkXSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIGdldFRlbXBsYXRlQnlEb2N1bWVudElkKHNvdXJjZUlkKS5zb3VyY2U7CiAgICAgICAgfTsKICAgICAgICByZXNvbHZlci5pZCA9IHNvdXJjZUlkOwogICAgICAgIHJlc29sdmVyLnVybCA9ICc8c2NyaXB0IGlkPSInICsgc291cmNlSWQgKyAnIi8+JzsKICAgICAgfQogICAgICByZXR1cm4gcmVzb2x2ZXI7CiAgICB9CiAgICB2YXIgVGVtcGxhdGUgPSBDbGFzcyhudWxsLCB7CiAgICAgIGNsYXNzTmFtZTogbmFtZXNwYWNlICsgIi5UZW1wbGF0ZSIsCiAgICAgIF9fZXh0ZW5kX186IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGUpIHJldHVybiB2YWx1ZTsKICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVN3aXRjaENvbmZpZykgcmV0dXJuIG5ldyBUZW1wbGF0ZVN3aXRjaGVyKHZhbHVlKTsKICAgICAgICByZXR1cm4gbmV3IFRlbXBsYXRlKHZhbHVlKTsKICAgICAgfSwKICAgICAgc291cmNlOiAiIiwKICAgICAgYmFzZVVSSTogIiIsCiAgICAgIGluaXQ6IGZ1bmN0aW9uKHNvdXJjZSkgewogICAgICAgIGlmICh0ZW1wbGF0ZUxpc3QubGVuZ3RoID09IDQwOTYpIHRocm93ICJUb28gbWFueSB0ZW1wbGF0ZXMgKG1heGltdW0gNDA5NikiOwogICAgICAgIHRoaXMuYXR0YWNoZXNfID0gW107CiAgICAgICAgdGhpcy5zZXRTb3VyY2Uoc291cmNlIHx8ICIiKTsKICAgICAgICB0aGlzLnRlbXBsYXRlSWQgPSB0ZW1wbGF0ZUxpc3QucHVzaCh0aGlzKSAtIDE7CiAgICAgIH0sCiAgICAgIGJpbmRpbmdCcmlkZ2U6IHsKICAgICAgICBhdHRhY2g6IGZ1bmN0aW9uKHRlbXBsYXRlLCBoYW5kbGVyLCBjb250ZXh0KSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGlzdGVuZXI7IGxpc3RlbmVyID0gdGVtcGxhdGUuYXR0YWNoZXNfW2ldOyBpKyspIGlmIChsaXN0ZW5lci5oYW5kbGVyID09IGhhbmRsZXIgJiYgbGlzdGVuZXIuY29udGV4dCA9PSBjb250ZXh0KSByZXR1cm47CiAgICAgICAgICB0ZW1wbGF0ZS5hdHRhY2hlc18ucHVzaCh7CiAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsCiAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQKICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgZGV0YWNoOiBmdW5jdGlvbih0ZW1wbGF0ZSwgaGFuZGxlciwgY29udGV4dCkgewogICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3RlbmVyOyBsaXN0ZW5lciA9IHRlbXBsYXRlLmF0dGFjaGVzX1tpXTsgaSsrKSBpZiAobGlzdGVuZXIuaGFuZGxlciA9PSBoYW5kbGVyICYmIGxpc3RlbmVyLmNvbnRleHQgPT0gY29udGV4dCkgewogICAgICAgICAgICB0ZW1wbGF0ZS5hdHRhY2hlc18uc3BsaWNlKGksIDEpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge30KICAgICAgfSwKICAgICAgY3JlYXRlSW5zdGFuY2U6IGZ1bmN0aW9uKG9iamVjdCwgYWN0aW9uQ2FsbGJhY2ssIHVwZGF0ZUNhbGxiYWNrLCBiaW5kaW5ncywgYmluZGluZ0ludGVyZmFjZSkgewogICAgICAgIGJ1aWxkVGVtcGxhdGUuY2FsbCh0aGlzKTsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVJbnN0YW5jZShvYmplY3QsIGFjdGlvbkNhbGxiYWNrLCB1cGRhdGVDYWxsYmFjaywgYmluZGluZ3MsIGJpbmRpbmdJbnRlcmZhY2UpOwogICAgICB9LAogICAgICBjbGVhckluc3RhbmNlOiBmdW5jdGlvbih0bXBsKSB7fSwKICAgICAgZ2V0SXNvbGF0ZVByZWZpeDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuICJpIiArIHRoaXMudGVtcGxhdGVJZCArICJfXyI7CiAgICAgIH0sCiAgICAgIGdldEJpbmRpbmc6IGZ1bmN0aW9uKGJpbmRpbmdzKSB7CiAgICAgICAgYnVpbGRUZW1wbGF0ZS5jYWxsKHRoaXMpOwogICAgICAgIHJldHVybiB0aGlzLmdldEJpbmRpbmcoYmluZGluZ3MpOwogICAgICB9LAogICAgICBzZXRTb3VyY2U6IGZ1bmN0aW9uKHNvdXJjZSkgewogICAgICAgIHZhciBvbGRTb3VyY2UgPSB0aGlzLnNvdXJjZTsKICAgICAgICBpZiAob2xkU291cmNlICE9IHNvdXJjZSkgewogICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT0gInN0cmluZyIpIHsKICAgICAgICAgICAgdmFyIG0gPSBzb3VyY2UubWF0Y2goL14oW2Etel0rKTovKTsKICAgICAgICAgICAgaWYgKG0pIHsKICAgICAgICAgICAgICB2YXIgcHJlZml4ID0gbVsxXTsKICAgICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2Uuc3Vic3RyKG1bMF0ubGVuZ3RoKTsKICAgICAgICAgICAgICBzd2l0Y2ggKHByZWZpeCkgewogICAgICAgICAgICAgICAgY2FzZSAiZmlsZSI6CiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IGJhc2lzLnJlc291cmNlKHNvdXJjZSk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAiaWQiOgogICAgICAgICAgICAgICAgICBzb3VyY2UgPSByZXNvbHZlU291cmNlQnlEb2N1bWVudElkKHNvdXJjZSk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAidG9rZW5zIjoKICAgICAgICAgICAgICAgICAgc291cmNlID0gYmFzaXMuc3RyaW5nLnRvT2JqZWN0KHNvdXJjZSk7CiAgICAgICAgICAgICAgICAgIHNvdXJjZS5pc0RlY2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgInJhdyI6CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAicGF0aCI6CiAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IGdldFNvdXJjZUJ5UGF0aChzb3VyY2UpOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIGJhc2lzLmRldi53YXJuKG5hbWVzcGFjZSArICIuVGVtcGxhdGUuc2V0U291cmNlOiBVbmtub3duIHByZWZpeCAiICsgcHJlZml4ICsgIiBmb3IgdGVtcGxhdGUgc291cmNlIHdhcyBpbmdub3JlZC4iKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChvbGRTb3VyY2UgJiYgb2xkU291cmNlLmJpbmRpbmdCcmlkZ2UpIHsKICAgICAgICAgICAgdmFyIHRtcGxMaXN0ID0gb2xkU291cmNlLnVybCAmJiB0bXBsRmlsZXNNYXBbb2xkU291cmNlLnVybF07CiAgICAgICAgICAgIGlmICh0bXBsTGlzdCkgewogICAgICAgICAgICAgIGFycmF5UmVtb3ZlKHRtcGxMaXN0LCB0aGlzKTsKICAgICAgICAgICAgICBpZiAoIXRtcGxMaXN0Lmxlbmd0aCkgZGVsZXRlIHRtcGxGaWxlc01hcFtvbGRTb3VyY2UudXJsXTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmJhc2VVUkkgPSAiIjsKICAgICAgICAgICAgdGhpcy5zb3VyY2UuYmluZGluZ0JyaWRnZS5kZXRhY2gob2xkU291cmNlLCB0ZW1wbGF0ZVNvdXJjZVVwZGF0ZSwgdGhpcyk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc291cmNlICYmIHNvdXJjZS5iaW5kaW5nQnJpZGdlKSB7CiAgICAgICAgICAgIGlmIChzb3VyY2UudXJsKSB7CiAgICAgICAgICAgICAgdGhpcy5iYXNlVVJJID0gcGF0aC5kaXJuYW1lKHNvdXJjZS51cmwpICsgIi8iOwogICAgICAgICAgICAgIGlmICghdG1wbEZpbGVzTWFwW3NvdXJjZS51cmxdKSB0bXBsRmlsZXNNYXBbc291cmNlLnVybF0gPSBbXTsKICAgICAgICAgICAgICBhcnJheUFkZCh0bXBsRmlsZXNNYXBbc291cmNlLnVybF0sIHRoaXMpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNvdXJjZS5iaW5kaW5nQnJpZGdlLmF0dGFjaChzb3VyY2UsIHRlbXBsYXRlU291cmNlVXBkYXRlLCB0aGlzKTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlOwogICAgICAgICAgdGVtcGxhdGVTb3VyY2VVcGRhdGUuY2FsbCh0aGlzKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh0aGlzLmRlc3Ryb3lCdWlsZGVyKSB0aGlzLmRlc3Ryb3lCdWlsZGVyKCk7CiAgICAgICAgdGhpcy5hdHRhY2hlc18gPSBudWxsOwogICAgICAgIHRoaXMuY3JlYXRlSW5zdGFuY2UgPSBudWxsOwogICAgICAgIHRoaXMuZ2V0QmluZGluZyA9IG51bGw7CiAgICAgICAgdGhpcy5yZXNvdXJjZXMgPSBudWxsOwogICAgICAgIHRoaXMuc291cmNlID0gbnVsbDsKICAgICAgICB0aGlzLmluc3RhbmNlc18gPSBudWxsOwogICAgICAgIHRoaXMuZGVjbF8gPSBudWxsOwogICAgICB9CiAgICB9KTsKICAgIHZhciBUZW1wbGF0ZVN3aXRjaENvbmZpZyA9IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICBiYXNpcy5vYmplY3QuZXh0ZW5kKHRoaXMsIGNvbmZpZyk7CiAgICB9OwogICAgdmFyIFRlbXBsYXRlU3dpdGNoZXIgPSBiYXNpcy5DbGFzcyhudWxsLCB7CiAgICAgIGNsYXNzTmFtZTogbmFtZXNwYWNlICsgIi5UZW1wbGF0ZVN3aXRjaGVyIiwKICAgICAgcnVsZVJldF86IG51bGwsCiAgICAgIHRlbXBsYXRlc186IG51bGwsCiAgICAgIHRlbXBsYXRlQ2xhc3M6IFRlbXBsYXRlLAogICAgICBydWxlRXZlbnRzOiBudWxsLAogICAgICBydWxlOiBTdHJpbmcsCiAgICAgIGluaXQ6IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICAgIHRoaXMucnVsZVJldF8gPSBbXTsKICAgICAgICB0aGlzLnRlbXBsYXRlc18gPSBbXTsKICAgICAgICB0aGlzLnJ1bGUgPSBjb25maWcucnVsZTsKICAgICAgICB2YXIgZXZlbnRzID0gY29uZmlnLmV2ZW50czsKICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy5sZW5ndGgpIHsKICAgICAgICAgIHRoaXMucnVsZUV2ZW50cyA9IHt9OwogICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50TmFtZTsgZXZlbnROYW1lID0gZXZlbnRzW2ldOyBpKyspIHRoaXMucnVsZUV2ZW50c1tldmVudE5hbWVdID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgY2xlYW5lci5hZGQodGhpcyk7CiAgICAgIH0sCiAgICAgIHJlc29sdmU6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgIHZhciByZXQgPSB0aGlzLnJ1bGUob2JqZWN0KTsKICAgICAgICB2YXIgaWR4ID0gdGhpcy5ydWxlUmV0Xy5pbmRleE9mKHJldCk7CiAgICAgICAgaWYgKGlkeCA9PSAtMSkgewogICAgICAgICAgdGhpcy5ydWxlUmV0Xy5wdXNoKHJldCk7CiAgICAgICAgICBpZHggPSB0aGlzLnRlbXBsYXRlc18ucHVzaChuZXcgdGhpcy50ZW1wbGF0ZUNsYXNzKHJldCkpIC0gMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzX1tpZHhdOwogICAgICB9LAogICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLnJ1bGUgPSBudWxsOwogICAgICAgIHRoaXMudGVtcGxhdGVzXyA9IG51bGw7CiAgICAgICAgdGhpcy5ydWxlUmV0XyA9IG51bGw7CiAgICAgIH0KICAgIH0pOwogICAgZnVuY3Rpb24gc3dpdGNoZXIoZXZlbnRzLCBydWxlKSB7CiAgICAgIHZhciBhcmdzID0gYmFzaXMuYXJyYXkoYXJndW1lbnRzKTsKICAgICAgdmFyIHJ1bGUgPSBhcmdzLnBvcCgpOwogICAgICByZXR1cm4gbmV3IFRlbXBsYXRlU3dpdGNoQ29uZmlnKHsKICAgICAgICBydWxlOiBydWxlLAogICAgICAgIGV2ZW50czogYXJncy5qb2luKCIgIikudHJpbSgpLnNwbGl0KC9ccysvKQogICAgICB9KTsKICAgIH0KICAgIHZhciBUaGVtZSA9IENsYXNzKG51bGwsIHsKICAgICAgY2xhc3NOYW1lOiBuYW1lc3BhY2UgKyAiLlRoZW1lIiwKICAgICAgZ2V0OiBnZXRTb3VyY2VCeVBhdGgKICAgIH0pOwogICAgdmFyIFNvdXJjZVdyYXBwZXIgPSBDbGFzcyhiYXNpcy5Ub2tlbiwgewogICAgICBjbGFzc05hbWU6IG5hbWVzcGFjZSArICIuU291cmNlV3JhcHBlciIsCiAgICAgIHBhdGg6ICIiLAogICAgICB1cmw6ICIiLAogICAgICBiYXNlVVJJOiAiIiwKICAgICAgaW5pdDogZnVuY3Rpb24odmFsdWUsIHBhdGgpIHsKICAgICAgICB0aGlzLnBhdGggPSBwYXRoOwogICAgICAgIGJhc2lzLlRva2VuLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcywgIiIpOwogICAgICB9LAogICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzLnZhbHVlICYmIHRoaXMudmFsdWUuYmluZGluZ0JyaWRnZSA/IHRoaXMudmFsdWUuYmluZGluZ0JyaWRnZS5nZXQodGhpcy52YWx1ZSkgOiB0aGlzLnZhbHVlOwogICAgICB9LAogICAgICBzZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBjb250ZW50ID0gZ2V0VGhlbWVTb3VyY2UoY3VycmVudFRoZW1lTmFtZSwgdGhpcy5wYXRoKTsKICAgICAgICBpZiAodGhpcy52YWx1ZSAhPSBjb250ZW50KSB7CiAgICAgICAgICBpZiAodGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlLmJpbmRpbmdCcmlkZ2UpIHRoaXMudmFsdWUuYmluZGluZ0JyaWRnZS5kZXRhY2godGhpcy52YWx1ZSwgU291cmNlV3JhcHBlci5wcm90b3R5cGUuYXBwbHksIHRoaXMpOwogICAgICAgICAgdGhpcy52YWx1ZSA9IGNvbnRlbnQ7CiAgICAgICAgICB0aGlzLnVybCA9IGNvbnRlbnQgJiYgY29udGVudC51cmwgfHwgIiI7CiAgICAgICAgICB0aGlzLmJhc2VVUkkgPSAodHlwZW9mIGNvbnRlbnQgPT0gIm9iamVjdCIgfHwgdHlwZW9mIGNvbnRlbnQgPT0gImZ1bmN0aW9uIikgJiYgImJhc2VVUkkiIGluIGNvbnRlbnQgPyBjb250ZW50LmJhc2VVUkkgOiBwYXRoLmRpcm5hbWUodGhpcy51cmwpICsgIi8iOwogICAgICAgICAgaWYgKHRoaXMudmFsdWUgJiYgdGhpcy52YWx1ZS5iaW5kaW5nQnJpZGdlKSB0aGlzLnZhbHVlLmJpbmRpbmdCcmlkZ2UuYXR0YWNoKHRoaXMudmFsdWUsIFNvdXJjZVdyYXBwZXIucHJvdG90eXBlLmFwcGx5LCB0aGlzKTsKICAgICAgICAgIHRoaXMuYXBwbHkoKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkgewogICAgICAgIHRoaXMudXJsID0gbnVsbDsKICAgICAgICB0aGlzLmJhc2VVUkkgPSBudWxsOwogICAgICAgIGlmICh0aGlzLnZhbHVlICYmIHRoaXMudmFsdWUuYmluZGluZ0JyaWRnZSkgdGhpcy52YWx1ZS5iaW5kaW5nQnJpZGdlLmRldGFjaCh0aGlzLnZhbHVlLCB0aGlzLmFwcGx5LCB0aGlzKTsKICAgICAgICBiYXNpcy5Ub2tlbi5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpOwogICAgICB9CiAgICB9KTsKICAgIGZ1bmN0aW9uIGdldFNvdXJjZUJ5UGF0aCgpIHsKICAgICAgdmFyIHBhdGggPSBiYXNpcy5hcnJheShhcmd1bWVudHMpLmpvaW4oIi4iKTsKICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZUJ5UGF0aFtwYXRoXTsKICAgICAgaWYgKCFzb3VyY2UpIHsKICAgICAgICBzb3VyY2UgPSBuZXcgU291cmNlV3JhcHBlcigiIiwgcGF0aCk7CiAgICAgICAgc291cmNlQnlQYXRoW3BhdGhdID0gc291cmNlOwogICAgICB9CiAgICAgIHJldHVybiBzb3VyY2U7CiAgICB9CiAgICBmdW5jdGlvbiBub3JtYWxpemUobGlzdCkgewogICAgICB2YXIgdXNlZCA9IHt9OwogICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykgaWYgKCF1c2VkW2xpc3RbaV1dKSB7CiAgICAgICAgdXNlZFtsaXN0W2ldXSA9IHRydWU7CiAgICAgICAgcmVzdWx0LnB1c2gobGlzdFtpXSk7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIGZ1bmN0aW9uIGV4dGVuZEZhbGxiYWNrKHRoZW1lTmFtZSwgbGlzdCkgewogICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgIHJlc3VsdC5zb3VyY2UgPSBub3JtYWxpemUobGlzdCkuam9pbigiLyIpOwogICAgICB2YXIgdXNlZCA9IHsKICAgICAgICBiYXNlOiB0cnVlCiAgICAgIH07CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBuYW1lID0gbGlzdFtpXSB8fCAiYmFzZSI7CiAgICAgICAgaWYgKG5hbWUgPT0gdGhlbWVOYW1lIHx8IHVzZWRbbmFtZV0pIGNvbnRpbnVlOwogICAgICAgIHZhciB0aGVtZSA9IGdldFRoZW1lKG5hbWUpOwogICAgICAgIHVzZWRbbmFtZV0gPSB0cnVlOwogICAgICAgIHJlc3VsdC5wdXNoKG5hbWUpOwogICAgICAgIGxpc3Quc3BsaWNlLmFwcGx5KGxpc3QsIFsgaSArIDEsIDAgXS5jb25jYXQodGhlbWVzW25hbWVdLmZhbGxiYWNrKSk7CiAgICAgIH0KICAgICAgcmVzdWx0LnVuc2hpZnQodGhlbWVOYW1lKTsKICAgICAgaWYgKHRoZW1lTmFtZSAhPSAiYmFzZSIpIHJlc3VsdC5wdXNoKCJiYXNlIik7CiAgICAgIHJlc3VsdC52YWx1ZSA9IHJlc3VsdC5qb2luKCIvIik7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgICBmdW5jdGlvbiBnZXRUaGVtZVNvdXJjZShuYW1lLCBwYXRoKSB7CiAgICAgIHZhciBzb3VyY2VMaXN0ID0gdGhlbWVzW25hbWVdLnNvdXJjZXNMaXN0OwogICAgICBmb3IgKHZhciBpID0gMCwgbWFwOyBtYXAgPSBzb3VyY2VMaXN0W2ldOyBpKyspIGlmIChtYXAuaGFzT3duUHJvcGVydHkocGF0aCkpIHJldHVybiBtYXBbcGF0aF07CiAgICAgIHJldHVybiAiIjsKICAgIH0KICAgIGZ1bmN0aW9uIHRoZW1lSGFzRWZmZWN0KHRoZW1lTmFtZSkgewogICAgICByZXR1cm4gdGhlbWVzW2N1cnJlbnRUaGVtZU5hbWVdLmZhbGxiYWNrLmluZGV4T2YodGhlbWVOYW1lKSAhPSAtMTsKICAgIH0KICAgIGZ1bmN0aW9uIHN5bmNDdXJyZW50VGhlbWVQYXRoKHBhdGgpIHsKICAgICAgZ2V0U291cmNlQnlQYXRoKHBhdGgpLnNldCgpOwogICAgfQogICAgZnVuY3Rpb24gc3luY0N1cnJlbnRUaGVtZShjaGFuZ2VkKSB7CiAgICAgIGJhc2lzLmRldi5sb2coInJlLWFwcGx5IHRlbXBsYXRlcyIpOwogICAgICBmb3IgKHZhciBwYXRoIGluIHNvdXJjZUJ5UGF0aCkgc3luY0N1cnJlbnRUaGVtZVBhdGgocGF0aCk7CiAgICB9CiAgICBmdW5jdGlvbiBnZXRUaGVtZShuYW1lKSB7CiAgICAgIGlmICghbmFtZSkgbmFtZSA9ICJiYXNlIjsKICAgICAgaWYgKHRoZW1lc1tuYW1lXSkgcmV0dXJuIHRoZW1lc1tuYW1lXS50aGVtZTsKICAgICAgaWYgKCEvXihbYS16MC05XF9cLV0rKSQvLnRlc3QobmFtZSkpIHRocm93ICJCYWQgbmFtZSBmb3IgdGhlbWUgLSAiICsgbmFtZTsKICAgICAgdmFyIHNvdXJjZXMgPSB7fTsKICAgICAgdmFyIHNvdXJjZUxpc3QgPSBbIHNvdXJjZXMgXTsKICAgICAgdmFyIHRoZW1lSW50ZXJmYWNlID0gbmV3IFRoZW1lOwogICAgICB0aGVtZXNbbmFtZV0gPSB7CiAgICAgICAgdGhlbWU6IHRoZW1lSW50ZXJmYWNlLAogICAgICAgIHNvdXJjZXM6IHNvdXJjZXMsCiAgICAgICAgc291cmNlc0xpc3Q6IHNvdXJjZUxpc3QsCiAgICAgICAgZmFsbGJhY2s6IFtdCiAgICAgIH07CiAgICAgIHZhciBhZGRTb3VyY2UgPSBmdW5jdGlvbihwYXRoLCBzb3VyY2UpIHsKICAgICAgICBpZiAocGF0aCBpbiBzb3VyY2VzID09IGZhbHNlKSB7CiAgICAgICAgICBzb3VyY2VzW3BhdGhdID0gc291cmNlOwogICAgICAgICAgaWYgKHRoZW1lSGFzRWZmZWN0KG5hbWUpKSBzeW5jQ3VycmVudFRoZW1lUGF0aChwYXRoKTsKICAgICAgICB9IGVsc2UgYmFzaXMuZGV2Lndhcm4oIlRlbXBsYXRlIHBhdGggYCIgKyBwYXRoICsgImAgaXMgYWxyZWFkeSBkZWZpbmVkIGZvciB0aGVtZSBgIiArIG5hbWUgKyAiYCAoZGVmaW5pdGlvbiBpZ25vcmVkKS4iKTsKICAgICAgICByZXR1cm4gZ2V0U291cmNlQnlQYXRoKHBhdGgpOwogICAgICB9OwogICAgICBiYXNpcy5vYmplY3QuZXh0ZW5kKHRoZW1lSW50ZXJmYWNlLCB7CiAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICBmYWxsYmFjazogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgIGlmICh0aGVtZUludGVyZmFjZSAhPT0gYmFzZVRoZW1lICYmIGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHZhciBuZXdGYWxsYmFjayA9IHR5cGVvZiB2YWx1ZSA9PSAic3RyaW5nIiA/IHZhbHVlLnNwbGl0KCIvIikgOiBbXTsKICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSB7fTsKICAgICAgICAgICAgbmV3RmFsbGJhY2sgPSBleHRlbmRGYWxsYmFjayhuYW1lLCBuZXdGYWxsYmFjayk7CiAgICAgICAgICAgIGlmICh0aGVtZXNbbmFtZV0uZmFsbGJhY2suc291cmNlICE9IG5ld0ZhbGxiYWNrLnNvdXJjZSkgewogICAgICAgICAgICAgIHRoZW1lc1tuYW1lXS5mYWxsYmFjay5zb3VyY2UgPSBuZXdGYWxsYmFjay5zb3VyY2U7CiAgICAgICAgICAgICAgYmFzaXMuZGV2LmxvZygiZmFsbGJhY2sgY2hhbmdlZCIpOwogICAgICAgICAgICAgIGZvciAodmFyIHRoZW1lTmFtZSBpbiB0aGVtZXMpIHsKICAgICAgICAgICAgICAgIHZhciBjdXJGYWxsYmFjayA9IHRoZW1lc1t0aGVtZU5hbWVdLmZhbGxiYWNrOwogICAgICAgICAgICAgICAgdmFyIG5ld0ZhbGxiYWNrID0gZXh0ZW5kRmFsbGJhY2sodGhlbWVOYW1lLCAoY3VyRmFsbGJhY2suc291cmNlIHx8ICIiKS5zcGxpdCgiLyIpKTsKICAgICAgICAgICAgICAgIGlmIChuZXdGYWxsYmFjay52YWx1ZSAhPSBjdXJGYWxsYmFjay52YWx1ZSkgewogICAgICAgICAgICAgICAgICBjaGFuZ2VkW3RoZW1lTmFtZV0gPSB0cnVlOwogICAgICAgICAgICAgICAgICB0aGVtZXNbdGhlbWVOYW1lXS5mYWxsYmFjayA9IG5ld0ZhbGxiYWNrOwogICAgICAgICAgICAgICAgICB2YXIgc291cmNlTGlzdCA9IHRoZW1lc1t0aGVtZU5hbWVdLnNvdXJjZXNMaXN0OwogICAgICAgICAgICAgICAgICBzb3VyY2VMaXN0Lmxlbmd0aCA9IG5ld0ZhbGxiYWNrLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VMaXN0Lmxlbmd0aDsgaSsrKSBzb3VyY2VMaXN0W2ldID0gdGhlbWVzW25ld0ZhbGxiYWNrW2ldXS5zb3VyY2VzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgY3VycmVudEZhbGxiYWNrID0gdGhlbWVzW2N1cnJlbnRUaGVtZU5hbWVdLmZhbGxiYWNrOwogICAgICAgICAgICBmb3IgKHZhciB0aGVtZU5hbWUgaW4gY2hhbmdlZCkgewogICAgICAgICAgICAgIGlmICh0aGVtZUhhc0VmZmVjdCh0aGVtZU5hbWUpKSB7CiAgICAgICAgICAgICAgICBzeW5jQ3VycmVudFRoZW1lKCk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHZhciByZXN1bHQgPSB0aGVtZXNbbmFtZV0uZmFsbGJhY2suc2xpY2UoMSk7CiAgICAgICAgICByZXN1bHQuc291cmNlID0gdGhlbWVzW25hbWVdLmZhbGxiYWNrLnNvdXJjZTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKICAgICAgICBkZWZpbmU6IGZ1bmN0aW9uKHdoYXQsIHdoZXJld2l0aCkgewogICAgICAgICAgaWYgKHR5cGVvZiB3aGF0ID09ICJmdW5jdGlvbiIpIHdoYXQgPSB3aGF0KCk7CiAgICAgICAgICBpZiAodHlwZW9mIHdoYXQgPT0gInN0cmluZyIpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiB3aGVyZXdpdGggPT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICB2YXIgbmFtZXNwYWNlID0gd2hhdDsKICAgICAgICAgICAgICB2YXIgZGljdGlvbmFyeSA9IHdoZXJld2l0aDsKICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307CiAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRpY3Rpb25hcnkpIGlmIChkaWN0aW9uYXJ5Lmhhc093blByb3BlcnR5KGtleSkpIHJlc3VsdFtrZXldID0gYWRkU291cmNlKG5hbWVzcGFjZSArICIuIiArIGtleSwgZGljdGlvbmFyeVtrZXldKTsKICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBnZXRTb3VyY2VCeVBhdGgod2hhdCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBhZGRTb3VyY2Uod2hhdCwgd2hlcmV3aXRoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2hhdCA9PSAib2JqZWN0IikgewogICAgICAgICAgICAgIHZhciBkaWN0aW9uYXJ5ID0gd2hhdDsKICAgICAgICAgICAgICBmb3IgKHZhciBwYXRoIGluIGRpY3Rpb25hcnkpIGlmIChkaWN0aW9uYXJ5Lmhhc093blByb3BlcnR5KHBhdGgpKSBhZGRTb3VyY2UocGF0aCwgZGljdGlvbmFyeVtwYXRoXSk7CiAgICAgICAgICAgICAgcmV0dXJuIHRoZW1lSW50ZXJmYWNlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGJhc2lzLmRldi53YXJuKCJXcm9uZyBmaXJzdCBhcmd1bWVudCBmb3IgYmFzaXMudGVtcGxhdGUuVGhlbWUjZGVmaW5lIik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGFwcGx5OiBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmIChuYW1lICE9IGN1cnJlbnRUaGVtZU5hbWUpIHsKICAgICAgICAgICAgY3VycmVudFRoZW1lTmFtZSA9IG5hbWU7CiAgICAgICAgICAgIHN5bmNDdXJyZW50VGhlbWUoKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGhhbmRsZXI7IGhhbmRsZXIgPSB0aGVtZUNoYW5nZUhhbmRsZXJzW2ldOyBpKyspIGhhbmRsZXIuZm4uY2FsbChoYW5kbGVyLmNvbnRleHQsIG5hbWUpOwogICAgICAgICAgICBiYXNpcy5kZXYuaW5mbygiVGVtcGxhdGUgdGhlbWUgc3dpdGNoZWQgdG8gYCIgKyBuYW1lICsgImAiKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aGVtZUludGVyZmFjZTsKICAgICAgICB9LAogICAgICAgIGdldFNvdXJjZTogZnVuY3Rpb24ocGF0aCwgd2l0aEZhbGxiYWNrKSB7CiAgICAgICAgICByZXR1cm4gd2l0aEZhbGxiYWNrID8gZ2V0VGhlbWVTb3VyY2UobmFtZSwgcGF0aCkgOiBzb3VyY2VzW3BhdGhdOwogICAgICAgIH0sCiAgICAgICAgZHJvcDogZnVuY3Rpb24ocGF0aCkgewogICAgICAgICAgaWYgKHNvdXJjZXMuaGFzT3duUHJvcGVydHkocGF0aCkpIHsKICAgICAgICAgICAgZGVsZXRlIHNvdXJjZXNbcGF0aF07CiAgICAgICAgICAgIGlmICh0aGVtZUhhc0VmZmVjdChuYW1lKSkgc3luY0N1cnJlbnRUaGVtZVBhdGgocGF0aCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdGhlbWVzW25hbWVdLmZhbGxiYWNrID0gZXh0ZW5kRmFsbGJhY2sobmFtZSwgW10pOwogICAgICBzb3VyY2VMaXN0LnB1c2godGhlbWVzLmJhc2Uuc291cmNlcyk7CiAgICAgIHJldHVybiB0aGVtZUludGVyZmFjZTsKICAgIH0KICAgIHZhciB0aGVtZXMgPSB7fTsKICAgIHZhciBzb3VyY2VCeVBhdGggPSB7fTsKICAgIHZhciBiYXNlVGhlbWUgPSBnZXRUaGVtZSgpOwogICAgdmFyIGN1cnJlbnRUaGVtZU5hbWUgPSAiYmFzZSI7CiAgICB2YXIgdGhlbWVDaGFuZ2VIYW5kbGVycyA9IFtdOwogICAgZnVuY3Rpb24gb25UaGVtZUNoYW5nZShmbiwgY29udGV4dCwgZmlyZSkgewogICAgICB0aGVtZUNoYW5nZUhhbmRsZXJzLnB1c2goewogICAgICAgIGZuOiBmbiwKICAgICAgICBjb250ZXh0OiBjb250ZXh0CiAgICAgIH0pOwogICAgICBpZiAoZmlyZSkgZm4uY2FsbChjb250ZXh0LCBjdXJyZW50VGhlbWVOYW1lKTsKICAgIH0KICAgIGNsZWFuZXIuYWRkKHsKICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgZm9yICh2YXIgcGF0aCBpbiBzb3VyY2VCeVBhdGgpIHNvdXJjZUJ5UGF0aFtwYXRoXS5kZXN0cm95KCk7CiAgICAgICAgdGhlbWVzID0gbnVsbDsKICAgICAgICBzb3VyY2VCeVBhdGggPSBudWxsOwogICAgICAgIGZvciAodmFyIGkgPSAwLCB0ZW1wbGF0ZTsgdGVtcGxhdGUgPSB0ZW1wbGF0ZUxpc3RbaV07IGkrKykgdGVtcGxhdGUuZGVzdHJveSgpOwogICAgICAgIHRlbXBsYXRlTGlzdCA9IG51bGw7CiAgICAgIH0KICAgIH0pOwogICAgbW9kdWxlLmV4cG9ydHMgPSB7CiAgICAgIERFQ0xBUkFUSU9OX1ZFUlNJT046IERFQ0xBUkFUSU9OX1ZFUlNJT04sCiAgICAgIFRZUEVfRUxFTUVOVDogVFlQRV9FTEVNRU5ULAogICAgICBUWVBFX0FUVFJJQlVURTogVFlQRV9BVFRSSUJVVEUsCiAgICAgIFRZUEVfQVRUUklCVVRFX0NMQVNTOiBUWVBFX0FUVFJJQlVURV9DTEFTUywKICAgICAgVFlQRV9BVFRSSUJVVEVfU1RZTEU6IFRZUEVfQVRUUklCVVRFX1NUWUxFLAogICAgICBUWVBFX0FUVFJJQlVURV9FVkVOVDogVFlQRV9BVFRSSUJVVEVfRVZFTlQsCiAgICAgIFRZUEVfVEVYVDogVFlQRV9URVhULAogICAgICBUWVBFX0NPTU1FTlQ6IFRZUEVfQ09NTUVOVCwKICAgICAgVE9LRU5fVFlQRTogVE9LRU5fVFlQRSwKICAgICAgVE9LRU5fQklORElOR1M6IFRPS0VOX0JJTkRJTkdTLAogICAgICBUT0tFTl9SRUZTOiBUT0tFTl9SRUZTLAogICAgICBBVFRSX05BTUU6IEFUVFJfTkFNRSwKICAgICAgQVRUUl9WQUxVRTogQVRUUl9WQUxVRSwKICAgICAgQVRUUl9OQU1FX0JZX1RZUEU6IEFUVFJfTkFNRV9CWV9UWVBFLAogICAgICBFTEVNRU5UX05BTUU6IEVMRU1FTlRfTkFNRSwKICAgICAgRUxFTUVOVF9BVFRSUzogRUxFTUVOVF9BVFRSUywKICAgICAgRUxFTUVOVF9DSElMRFM6IEVMRU1FTlRfQ0hJTERTLAogICAgICBURVhUX1ZBTFVFOiBURVhUX1ZBTFVFLAogICAgICBDT01NRU5UX1ZBTFVFOiBDT01NRU5UX1ZBTFVFLAogICAgICBMMTBuUHJveHlUb2tlbjogTDEwblByb3h5VG9rZW4sCiAgICAgIFRlbXBsYXRlU3dpdGNoQ29uZmlnOiBUZW1wbGF0ZVN3aXRjaENvbmZpZywKICAgICAgVGVtcGxhdGVTd2l0Y2hlcjogVGVtcGxhdGVTd2l0Y2hlciwKICAgICAgVGVtcGxhdGU6IFRlbXBsYXRlLAogICAgICBTb3VyY2VXcmFwcGVyOiBTb3VyY2VXcmFwcGVyLAogICAgICBzd2l0Y2hlcjogc3dpdGNoZXIsCiAgICAgIHRva2VuaXplOiB0b2tlbml6ZSwKICAgICAgaXNvbGF0ZUNzczogaXNvbGF0ZUNzcywKICAgICAgZ2V0RGVjbEZyb21Tb3VyY2U6IGdldERlY2xGcm9tU291cmNlLAogICAgICBtYWtlRGVjbGFyYXRpb246IG1ha2VEZWNsYXJhdGlvbiwKICAgICAgZ2V0TDEwblRlbXBsYXRlOiBnZXRMMTBuVGVtcGxhdGUsCiAgICAgIFRoZW1lOiBUaGVtZSwKICAgICAgdGhlbWU6IGdldFRoZW1lLAogICAgICBnZXRUaGVtZUxpc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBiYXNpcy5vYmplY3Qua2V5cyh0aGVtZXMpOwogICAgICB9LAogICAgICBjdXJyZW50VGhlbWU6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGVtZXNbY3VycmVudFRoZW1lTmFtZV0udGhlbWU7CiAgICAgIH0sCiAgICAgIHNldFRoZW1lOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgcmV0dXJuIGdldFRoZW1lKG5hbWUpLmFwcGx5KCk7CiAgICAgIH0sCiAgICAgIG9uVGhlbWVDaGFuZ2U6IG9uVGhlbWVDaGFuZ2UsCiAgICAgIGRlZmluZTogYmFzZVRoZW1lLmRlZmluZSwKICAgICAgZ2V0OiBnZXRTb3VyY2VCeVBhdGgsCiAgICAgIGdldFBhdGhMaXN0OiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gYmFzaXMub2JqZWN0LmtleXMoc291cmNlQnlQYXRoKTsKICAgICAgfQogICAgfTsKICB9LAogICI2LmpzIjogZnVuY3Rpb24oZXhwb3J0cywgbW9kdWxlLCBiYXNpcywgZ2xvYmFsLCBfX2ZpbGVuYW1lLCBfX2Rpcm5hbWUsIHJlcXVpcmUsIHJlc291cmNlKSB7CiAgICBiYXNpcy5yZXF1aXJlKCIuLzUuanMiKTsKICAgIHZhciBUWVBFX0VMRU1FTlQgPSBiYXNpcy50ZW1wbGF0ZS5UWVBFX0VMRU1FTlQ7CiAgICB2YXIgVFlQRV9BVFRSSUJVVEUgPSBiYXNpcy50ZW1wbGF0ZS5UWVBFX0FUVFJJQlVURTsKICAgIHZhciBUWVBFX1RFWFQgPSBiYXNpcy50ZW1wbGF0ZS5UWVBFX1RFWFQ7CiAgICB2YXIgVFlQRV9DT01NRU5UID0gYmFzaXMudGVtcGxhdGUuVFlQRV9DT01NRU5UOwogICAgdmFyIFRPS0VOX1RZUEUgPSBiYXNpcy50ZW1wbGF0ZS5UT0tFTl9UWVBFOwogICAgdmFyIFRPS0VOX0JJTkRJTkdTID0gYmFzaXMudGVtcGxhdGUuVE9LRU5fQklORElOR1M7CiAgICB2YXIgVE9LRU5fUkVGUyA9IGJhc2lzLnRlbXBsYXRlLlRPS0VOX1JFRlM7CiAgICB2YXIgQVRUUl9OQU1FID0gYmFzaXMudGVtcGxhdGUuQVRUUl9OQU1FOwogICAgdmFyIEFUVFJfTkFNRV9CWV9UWVBFID0gYmFzaXMudGVtcGxhdGUuQVRUUl9OQU1FX0JZX1RZUEU7CiAgICB2YXIgRUxFTUVOVF9OQU1FID0gYmFzaXMudGVtcGxhdGUuRUxFTUVOVF9OQU1FOwogICAgdmFyIEVMRU1FTlRfQVRUUlMgPSBiYXNpcy50ZW1wbGF0ZS5FTEVNRU5UX0FUVFJTOwogICAgdmFyIEVMRU1FTlRfQ0hJTERTID0gYmFzaXMudGVtcGxhdGUuRUxFTUVOVF9DSElMRFM7CiAgICB2YXIgVEVYVF9WQUxVRSA9IGJhc2lzLnRlbXBsYXRlLlRFWFRfVkFMVUU7CiAgICB2YXIgQ09NTUVOVF9WQUxVRSA9IGJhc2lzLnRlbXBsYXRlLkNPTU1FTlRfVkFMVUU7CiAgICB2YXIgdG1wbEZ1bmN0aW9ucyA9IHt9OwogICAgdmFyIGlubGluZVNlZWQgPSAxOwogICAgdmFyIGJ1aWxkUGF0aGVzID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBQQVRIX1JFRl9OQU1FID0gImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoiLnNwbGl0KCIiKTsKICAgICAgdmFyIHBhdGhMaXN0OwogICAgICB2YXIgcmVmTGlzdDsKICAgICAgdmFyIGJpbmRpbmdMaXN0OwogICAgICB2YXIgbWFya2VkRWxlbWVudExpc3Q7CiAgICAgIHZhciByb290UGF0aDsKICAgICAgdmFyIGF0dHJFeHBySWQ7CiAgICAgIGZ1bmN0aW9uIHB1dFJlZnMocmVmcywgcGF0aElkeCkgewogICAgICAgIGZvciAodmFyIGkgPSAwLCByZWZOYW1lOyByZWZOYW1lID0gcmVmc1tpXTsgaSsrKSBpZiAocmVmTmFtZS5pbmRleE9mKCI6IikgPT0gLTEpIHJlZkxpc3QucHVzaChyZWZOYW1lICsgIjoiICsgcGF0aElkeCk7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gcHV0UGF0aChwYXRoKSB7CiAgICAgICAgdmFyIGxlbiA9IHBhdGhMaXN0Lmxlbmd0aDsKICAgICAgICB2YXIgcGF0aFJlZiA9IFBBVEhfUkVGX05BTUVbbGVuXSB8fCAiciIgKyBsZW47CiAgICAgICAgcGF0aExpc3QucHVzaChwYXRoUmVmICsgIj0iICsgcGF0aCk7CiAgICAgICAgcmV0dXJuIHBhdGhSZWY7CiAgICAgIH0KICAgICAgZnVuY3Rpb24gcHV0QmluZGluZyhiaW5kaW5nKSB7CiAgICAgICAgYmluZGluZ0xpc3QucHVzaChiaW5kaW5nKTsKICAgICAgfQogICAgICBmdW5jdGlvbiBwcm9jZXNzVG9rZW5zKHRva2VucywgcGF0aCwgbm9UZXh0QnVnLCB0ZW1wbGF0ZU1hcmtlcikgewogICAgICAgIHZhciBsb2NhbFBhdGg7CiAgICAgICAgdmFyIHJlZnM7CiAgICAgICAgdmFyIG15UmVmOwogICAgICAgIHZhciBleHBsaWNpdFJlZjsKICAgICAgICB2YXIgYmluZGluZ3M7CiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNwID0gMCwgY2xvc2VUZXh0ID0gMCwgdG9rZW47IHRva2VuID0gdG9rZW5zW2ldOyBpKyssIGNwKyssIGV4cGxpY2l0UmVmID0gZmFsc2UpIHsKICAgICAgICAgIGlmICghaSkgbG9jYWxQYXRoID0gcGF0aCArICIuZmlyc3RDaGlsZCI7IGVsc2UgewogICAgICAgICAgICBpZiAoIXRva2Vuc1tpICsgMV0pIGxvY2FsUGF0aCA9IHBhdGggKyAiLmxhc3RDaGlsZCI7IGVsc2UgewogICAgICAgICAgICAgIGlmICh0b2tlbltUT0tFTl9UWVBFXSA9PSB0b2tlbnNbaSAtIDFdW1RPS0VOX1RZUEVdICYmIHRva2VuW1RPS0VOX1RZUEVdID09IFRZUEVfVEVYVCkgY2xvc2VUZXh0Kys7CiAgICAgICAgICAgICAgbG9jYWxQYXRoID0gcGF0aCArICIuY2hpbGROb2Rlc1siICsgKG5vVGV4dEJ1ZyA/IGNwIDogY3AgKyAoY2xvc2VUZXh0ID8gIiArICIgKyBjbG9zZVRleHQgKyAiICogVEVYVF9CVUciIDogIiIpKSArICJdIjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlZnMgPSB0b2tlbltUT0tFTl9SRUZTXSkgewogICAgICAgICAgICBleHBsaWNpdFJlZiA9IHRydWU7CiAgICAgICAgICAgIGxvY2FsUGF0aCA9IHB1dFBhdGgobG9jYWxQYXRoKTsKICAgICAgICAgICAgcHV0UmVmcyhyZWZzLCBsb2NhbFBhdGgpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRva2VuW1RPS0VOX0JJTkRJTkdTXSkgewogICAgICAgICAgICBpZiAodG9rZW5bVE9LRU5fQklORElOR1NdICYmIHR5cGVvZiB0b2tlbltUT0tFTl9CSU5ESU5HU10gPT0gIm51bWJlciIpIHRva2VuW1RPS0VOX0JJTkRJTkdTXSA9IHRva2VuW1RPS0VOX1JFRlNdW3Rva2VuW1RPS0VOX0JJTkRJTkdTXSAtIDFdOwogICAgICAgICAgICBpZiAoIWV4cGxpY2l0UmVmKSB7CiAgICAgICAgICAgICAgZXhwbGljaXRSZWYgPSB0cnVlOwogICAgICAgICAgICAgIGxvY2FsUGF0aCA9IHB1dFBhdGgobG9jYWxQYXRoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwdXRCaW5kaW5nKFsgdG9rZW5bVE9LRU5fVFlQRV0sIGxvY2FsUGF0aCwgdG9rZW5bVE9LRU5fQklORElOR1NdIF0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRva2VuW1RPS0VOX1RZUEVdID09IFRZUEVfRUxFTUVOVCkgewogICAgICAgICAgICBteVJlZiA9IC0xOwogICAgICAgICAgICBpZiAocGF0aCA9PSByb290UGF0aCkgbWFya2VkRWxlbWVudExpc3QucHVzaChsb2NhbFBhdGggKyAiLiIgKyB0ZW1wbGF0ZU1hcmtlcik7CiAgICAgICAgICAgIGlmICghZXhwbGljaXRSZWYpIHsKICAgICAgICAgICAgICBsb2NhbFBhdGggPSBwdXRQYXRoKGxvY2FsUGF0aCk7CiAgICAgICAgICAgICAgbXlSZWYgPSBwYXRoTGlzdC5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGF0dHJzID0gW107CiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBqID0gRUxFTUVOVF9BVFRSUywgdDsgdCA9IHRva2VuW2pdOyBqKyspIGlmICh0W1RPS0VOX1RZUEVdID09IFRZUEVfRUxFTUVOVCB8fCB0W1RPS0VOX1RZUEVdID09IFRZUEVfVEVYVCB8fCB0W1RPS0VOX1RZUEVdID09IFRZUEVfQ09NTUVOVCkgY2hpbGRyZW4ucHVzaCh0KTsgZWxzZSBhdHRycy5wdXNoKHQpOwogICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgYXR0cjsgYXR0ciA9IGF0dHJzW2pdOyBqKyspIHsKICAgICAgICAgICAgICBpZiAoYXR0cltUT0tFTl9UWVBFXSA9PSA2KSBjb250aW51ZTsKICAgICAgICAgICAgICB2YXIgYXR0ck5hbWUgPSBBVFRSX05BTUVfQllfVFlQRVthdHRyW1RPS0VOX1RZUEVdXSB8fCBhdHRyW0FUVFJfTkFNRV07CiAgICAgICAgICAgICAgaWYgKHJlZnMgPSBhdHRyW1RPS0VOX1JFRlNdKSB7CiAgICAgICAgICAgICAgICBleHBsaWNpdFJlZiA9IHRydWU7CiAgICAgICAgICAgICAgICBwdXRSZWZzKHJlZnMsIHB1dFBhdGgobG9jYWxQYXRoICsgJy5nZXRBdHRyaWJ1dGVOb2RlKCInICsgYXR0ck5hbWUgKyAnIiknKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChiaW5kaW5ncyA9IGF0dHJbVE9LRU5fQklORElOR1NdKSB7CiAgICAgICAgICAgICAgICBleHBsaWNpdFJlZiA9IHRydWU7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGF0dHJOYW1lKSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgImNsYXNzIjoKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMCwgYmluZGluZzsgYmluZGluZyA9IGJpbmRpbmdzW2tdOyBrKyspIHB1dEJpbmRpbmcoWyAyLCBsb2NhbFBhdGgsIGJpbmRpbmdbMV0sIGF0dHJOYW1lLCBiaW5kaW5nWzBdIF0uY29uY2F0KGJpbmRpbmcuc2xpY2UoMikpKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgY2FzZSAic3R5bGUiOgogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwLCBwcm9wZXJ0eTsgcHJvcGVydHkgPSBiaW5kaW5nc1trXTsgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyRXhwcklkKys7CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtID0gMCwgYmluZE5hbWU7IGJpbmROYW1lID0gcHJvcGVydHlbMF1bbV07IG0rKykgcHV0QmluZGluZyhbIDIsIGxvY2FsUGF0aCwgYmluZE5hbWUsIGF0dHJOYW1lLCBwcm9wZXJ0eVswXSwgcHJvcGVydHlbMV0sIHByb3BlcnR5WzJdLCBwcm9wZXJ0eVszXSwgYXR0ckV4cHJJZCBdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgYXR0ckV4cHJJZCsrOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwLCBiaW5kTmFtZTsgYmluZE5hbWUgPSBiaW5kaW5nc1swXVtrXTsgaysrKSBwdXRCaW5kaW5nKFsgMiwgbG9jYWxQYXRoLCBiaW5kTmFtZSwgYXR0ck5hbWUsIGJpbmRpbmdzWzBdLCBiaW5kaW5nc1sxXSwgdG9rZW5bRUxFTUVOVF9OQU1FXSwgYXR0ckV4cHJJZCBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkgcHJvY2Vzc1Rva2VucyhjaGlsZHJlbiwgbG9jYWxQYXRoLCBub1RleHRCdWcpOwogICAgICAgICAgICBpZiAoIWV4cGxpY2l0UmVmICYmIG15UmVmID09IHBhdGhMaXN0Lmxlbmd0aCkgcGF0aExpc3QucG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBmdW5jdGlvbih0b2tlbnMsIHBhdGgsIG5vVGV4dEJ1ZywgdGVtcGxhdGVNYXJrZXIpIHsKICAgICAgICBwYXRoTGlzdCA9IFtdOwogICAgICAgIHJlZkxpc3QgPSBbXTsKICAgICAgICBiaW5kaW5nTGlzdCA9IFtdOwogICAgICAgIG1hcmtlZEVsZW1lbnRMaXN0ID0gW107CiAgICAgICAgcm9vdFBhdGggPSBwYXRoIHx8ICJfIjsKICAgICAgICBhdHRyRXhwcklkID0gMDsKICAgICAgICBwcm9jZXNzVG9rZW5zKHRva2Vucywgcm9vdFBhdGgsIG5vVGV4dEJ1ZywgdGVtcGxhdGVNYXJrZXIpOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBwYXRoOiBwYXRoTGlzdCwKICAgICAgICAgIHJlZjogcmVmTGlzdCwKICAgICAgICAgIGJpbmRpbmc6IGJpbmRpbmdMaXN0LAogICAgICAgICAgbWFya2VkRWxlbWVudExpc3Q6IG1hcmtlZEVsZW1lbnRMaXN0CiAgICAgICAgfTsKICAgICAgfTsKICAgIH0oKTsKICAgIHZhciBidWlsZEJpbmRpbmdzID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBMMTBOX0JJTkRJTkcgPSAvXC5ceyhbYS16QS1aX11bYS16QS1aMC05X1wtXSopXH0vOwogICAgICB2YXIgU1BFQ0lBTF9BVFRSX01BUCA9IHsKICAgICAgICBkaXNhYmxlZDogIioiLAogICAgICAgIGNoZWNrZWQ6IFsgImlucHV0IiBdLAogICAgICAgIGluZGV0ZXJtaW5hdGU6IFsgImlucHV0IiBdLAogICAgICAgIHZhbHVlOiBbICJpbnB1dCIsICJ0ZXh0YXJlYSIsICJzZWxlY3QiIF0sCiAgICAgICAgbWlubGVuZ3RoOiBbICJpbnB1dCIgXSwKICAgICAgICBtYXhsZW5ndGg6IFsgImlucHV0IiBdLAogICAgICAgIHJlYWRvbmx5OiBbICJpbnB1dCIgXSwKICAgICAgICBzZWxlY3RlZDogWyAib3B0aW9uIiBdLAogICAgICAgIG11bHRpcGxlOiBbICJzZWxlY3QiIF0KICAgICAgfTsKICAgICAgdmFyIFNQRUNJQUxfQVRUUl9TSU5HTEUgPSB7CiAgICAgICAgZGlzYWJsZWQ6IHRydWUsCiAgICAgICAgY2hlY2tlZDogdHJ1ZSwKICAgICAgICBzZWxlY3RlZDogdHJ1ZSwKICAgICAgICByZWFkb25seTogdHJ1ZSwKICAgICAgICBtdWx0aXBsZTogdHJ1ZSwKICAgICAgICBpbmRldGVybWluYXRlOiB0cnVlCiAgICAgIH07CiAgICAgIHZhciBiaW5kRnVuY3Rpb25zID0gewogICAgICAgIDE6ICJiaW5kX2VsZW1lbnQiLAogICAgICAgIDM6ICJiaW5kX3RleHROb2RlIiwKICAgICAgICA4OiAiYmluZF9jb21tZW50IgogICAgICB9OwogICAgICBmdW5jdGlvbiBidWlsZEF0dHJFeHByZXNzaW9uKGJpbmRpbmcsIHNwZWNpYWwsIGwxMG4pIHsKICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IFtdOwogICAgICAgIHZhciBzeW1ib2xzID0gYmluZGluZ1s1XTsKICAgICAgICB2YXIgZGljdGlvbmFyeSA9IGJpbmRpbmdbNF07CiAgICAgICAgdmFyIGV4cHJWYXI7CiAgICAgICAgdmFyIGNvbG9uUG9zOwogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3ltYm9scy5sZW5ndGg7IGorKykgewogICAgICAgICAgaWYgKHR5cGVvZiBzeW1ib2xzW2pdID09ICJzdHJpbmciKSBleHByZXNzaW9uLnB1c2goJyInICsgc3ltYm9sc1tqXS5yZXBsYWNlKC8iL2csICdcXCInKSArICciJyk7IGVsc2UgewogICAgICAgICAgICBleHByVmFyID0gZGljdGlvbmFyeVtzeW1ib2xzW2pdXTsKICAgICAgICAgICAgY29sb25Qb3MgPSBleHByVmFyLmluZGV4T2YoIjoiKTsKICAgICAgICAgICAgaWYgKGNvbG9uUG9zID09IC0xKSB7CiAgICAgICAgICAgICAgZXhwcmVzc2lvbi5wdXNoKHNwZWNpYWwgPT0gImwxMG4iID8gJyJ7JyArIGV4cHJWYXIgKyAnfSInIDogc3BlY2lhbCA9PSAiYm9vbCIgPyAiKF9fIiArIGV4cHJWYXIgKyAnfHwiIiknIDogIl9fIiArIGV4cHJWYXIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciBiaW5kaW5nTmFtZSA9IG51bGw7CiAgICAgICAgICAgICAgdmFyIGwxMG5QYXRoID0gZXhwclZhci5zdWJzdHIoY29sb25Qb3MgKyAxKS5yZXBsYWNlKEwxME5fQklORElORywgZnVuY3Rpb24obSwgbmFtZSkgewogICAgICAgICAgICAgICAgYmluZGluZ05hbWUgPSBuYW1lOwogICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmIChiaW5kaW5nTmFtZSkgZXhwcmVzc2lvbi5wdXNoKGwxMG5bZXhwclZhci5zdWJzdHIoY29sb25Qb3MgKyAxKV0pOyBlbHNlIGV4cHJlc3Npb24ucHVzaCgnX19sMTBuWyInICsgbDEwblBhdGggKyAnIl0nKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoZXhwcmVzc2lvbi5sZW5ndGggPT0gMSkgZXhwcmVzc2lvbi5wdXNoKCciIicpOwogICAgICAgIHJldHVybiBleHByZXNzaW9uLmpvaW4oIisiKTsKICAgICAgfQogICAgICByZXR1cm4gZnVuY3Rpb24oYmluZGluZ3MpIHsKICAgICAgICBmdW5jdGlvbiBwdXRCaW5kQ29kZSh0eXBlKSB7CiAgICAgICAgICB0b29sc1VzZWRbdHlwZV0gPSB0cnVlOwogICAgICAgICAgYmluZENvZGUucHVzaChiaW5kVmFyICsgIj0iICsgdHlwZSArICIoIiArIGJhc2lzLmFycmF5KGFyZ3VtZW50cywgMSkgKyAiKTsiKTsKICAgICAgICB9CiAgICAgICAgdmFyIGJpbmRNYXAgPSB7fTsKICAgICAgICB2YXIgYmluZENvZGU7CiAgICAgICAgdmFyIGJpbmRWYXI7CiAgICAgICAgdmFyIHZhckxpc3QgPSBbXTsKICAgICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgICAgdmFyIHZhck5hbWU7CiAgICAgICAgdmFyIGwxMG5NYXA7CiAgICAgICAgdmFyIGwxMG5Db21wdXRlID0gW107CiAgICAgICAgdmFyIGwxMG5CaW5kaW5ncyA9IHt9OwogICAgICAgIHZhciBsMTBuQmluZFNlZWQgPSAxOwogICAgICAgIHZhciBzcGVjaWFsQXR0cjsKICAgICAgICB2YXIgYXR0ckV4cHJJZDsKICAgICAgICB2YXIgYXR0ckV4cHJNYXAgPSB7fTsKICAgICAgICB2YXIgZGVidWdMaXN0ID0gW107CiAgICAgICAgdmFyIHRvb2xzVXNlZCA9IHsKICAgICAgICAgIHJlc29sdmU6IHRydWUKICAgICAgICB9OwogICAgICAgIGZvciAodmFyIGkgPSAwLCBiaW5kaW5nOyBiaW5kaW5nID0gYmluZGluZ3NbaV07IGkrKykgewogICAgICAgICAgdmFyIGJpbmRUeXBlID0gYmluZGluZ1swXTsKICAgICAgICAgIHZhciBkb21SZWYgPSBiaW5kaW5nWzFdOwogICAgICAgICAgdmFyIGJpbmROYW1lID0gYmluZGluZ1syXTsKICAgICAgICAgIGlmIChbICJnZXQiLCAic2V0IiwgInRlbXBsYXRlSWRfIiBdLmluZGV4T2YoYmluZE5hbWUpICE9IC0xKSB7CiAgICAgICAgICAgIGJhc2lzLmRldi53YXJuKCJiaW5kaW5nIG5hbWUgYCIgKyBiaW5kTmFtZSArICJgIGlzIHByb2hpYml0ZWQsIGJpbmRpbmcgaWdub3JlZCIpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBuYW1lUGFydCA9IGJpbmROYW1lLnNwbGl0KCI6Iik7CiAgICAgICAgICB2YXIgYW5pbSA9IG5hbWVQYXJ0WzBdID09ICJhbmltIjsKICAgICAgICAgIGlmIChhbmltKSBiaW5kTmFtZSA9IG5hbWVQYXJ0WzFdOwogICAgICAgICAgYmluZENvZGUgPSBiaW5kTWFwW2JpbmROYW1lXTsKICAgICAgICAgIGJpbmRWYXIgPSAiXyIgKyBpOwogICAgICAgICAgdmFyTmFtZSA9ICJfXyIgKyBiaW5kTmFtZTsKICAgICAgICAgIGlmIChuYW1lUGFydFswXSA9PSAibDEwbiIgJiYgbmFtZVBhcnRbMV0pIHsKICAgICAgICAgICAgdmFyIGwxMG5GdWxsUGF0aCA9IG5hbWVQYXJ0WzFdOwogICAgICAgICAgICB2YXIgbDEwbkJpbmRpbmcgPSBudWxsOwogICAgICAgICAgICB2YXIgbDEwbk5hbWUgPSBsMTBuRnVsbFBhdGgucmVwbGFjZShMMTBOX0JJTkRJTkcsIGZ1bmN0aW9uKG0sIG5hbWUpIHsKICAgICAgICAgICAgICBsMTBuQmluZGluZyA9IG5hbWU7CiAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKGwxMG5CaW5kaW5nKSB7CiAgICAgICAgICAgICAgaWYgKGwxMG5GdWxsUGF0aCBpbiBsMTBuQmluZGluZ3MgPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIHZhck5hbWUgPSAiJGwxMG5fIiArIGwxMG5CaW5kU2VlZCsrOwogICAgICAgICAgICAgICAgbDEwbkJpbmRpbmdzW2wxMG5GdWxsUGF0aF0gPSB2YXJOYW1lOwogICAgICAgICAgICAgICAgbDEwbkNvbXB1dGUucHVzaCgnc2V0KCInICsgdmFyTmFtZSArICciLCcgKyB2YXJOYW1lICsgIikiKTsKICAgICAgICAgICAgICAgIHZhckxpc3QucHVzaCh2YXJOYW1lICsgJz10b29scy5sMTBuVG9rZW4oIicgKyBsMTBuTmFtZSArICciKS5jb21wdXRlVG9rZW4oKScpOwogICAgICAgICAgICAgICAgYmluZENvZGUgPSBiaW5kTWFwW2wxMG5CaW5kaW5nXTsKICAgICAgICAgICAgICAgIGlmICghYmluZENvZGUpIHsKICAgICAgICAgICAgICAgICAgYmluZENvZGUgPSBiaW5kTWFwW2wxMG5CaW5kaW5nXSA9IFtdOwogICAgICAgICAgICAgICAgICB2YXJMaXN0LnB1c2goIl9fIiArIGwxMG5CaW5kaW5nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJpbmRDb2RlLnB1c2godmFyTmFtZSArICIuc2V0KF9fIiArIGwxMG5CaW5kaW5nICsgIik7Iik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGJpbmROYW1lID0gbDEwbkJpbmRpbmdzW2wxMG5GdWxsUGF0aF07CiAgICAgICAgICAgICAgYmluZFZhciA9ICJfIiArIGk7CiAgICAgICAgICAgICAgdmFyTmFtZSA9ICJfXyIgKyBiaW5kTmFtZTsKICAgICAgICAgICAgICBiaW5kQ29kZSA9IGJpbmRNYXBbYmluZE5hbWVdOwogICAgICAgICAgICAgIGlmICghYmluZENvZGUpIHsKICAgICAgICAgICAgICAgIGJpbmRDb2RlID0gYmluZE1hcFtiaW5kTmFtZV0gPSBbXTsKICAgICAgICAgICAgICAgIHZhckxpc3QucHVzaCh2YXJOYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGJpbmRUeXBlID09IFRZUEVfVEVYVCkgewogICAgICAgICAgICAgICAgZGVidWdMaXN0LnB1c2goInsiICsgWyAnYmluZGluZzoiJyArIGJpbmROYW1lICsgJyInLCAiZG9tOiIgKyBkb21SZWYsICJ2YWw6IiArIGJpbmRWYXIsICdhdHRhY2htZW50Omluc3RhbmNlLmF0dGFjaGVzJiZpbnN0YW5jZS5hdHRhY2hlc1siJyArIGJpbmROYW1lICsgJyJdJiZpbnN0YW5jZS5hdHRhY2hlc1siJyArIGJpbmROYW1lICsgJyJdLnZhbHVlJyBdICsgIn0iKTsKICAgICAgICAgICAgICAgIHZhckxpc3QucHVzaChiaW5kVmFyICsgIj0iICsgZG9tUmVmKTsKICAgICAgICAgICAgICAgIHB1dEJpbmRDb2RlKGJpbmRGdW5jdGlvbnNbYmluZFR5cGVdLCBkb21SZWYsIGJpbmRWYXIsICJ2YWx1ZSIpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhdHRyTmFtZSA9ICciJyArIGJpbmRpbmdbQVRUUl9OQU1FXSArICciJzsKICAgICAgICAgICAgICAgIGRlYnVnTGlzdC5wdXNoKCJ7IiArIFsgJ2JpbmRpbmc6IicgKyBsMTBuRnVsbFBhdGggKyAnIicsICJkb206IiArIGRvbVJlZiwgImF0dHI6IiArIGF0dHJOYW1lLCAidmFsOiIgKyBiaW5kVmFyLCAnYXR0YWNobWVudDppbnN0YW5jZS5hdHRhY2hlcyYmaW5zdGFuY2UuYXR0YWNoZXNbIicgKyBiaW5kTmFtZSArICciXSYmaW5zdGFuY2UuYXR0YWNoZXNbIicgKyBiaW5kTmFtZSArICciXS52YWx1ZScgXSArICJ9Iik7CiAgICAgICAgICAgICAgICB2YXJMaXN0LnB1c2goYmluZFZhcik7CiAgICAgICAgICAgICAgICBwdXRCaW5kQ29kZSgiYmluZF9hdHRyIiwgZG9tUmVmLCBhdHRyTmFtZSwgYmluZFZhciwgYnVpbGRBdHRyRXhwcmVzc2lvbihiaW5kaW5nLCBmYWxzZSwgbDEwbkJpbmRpbmdzKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICghbDEwbk1hcCkgbDEwbk1hcCA9IHt9OwogICAgICAgICAgICBpZiAoIWJpbmRNYXBbbDEwbk5hbWVdKSB7CiAgICAgICAgICAgICAgYmluZE1hcFtsMTBuTmFtZV0gPSBbXTsKICAgICAgICAgICAgICBsMTBuTWFwW2wxMG5OYW1lXSA9IFtdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJpbmRDb2RlID0gYmluZE1hcFtsMTBuTmFtZV07CiAgICAgICAgICAgIGJpbmRDb2RlLmwxMG4gPSB0cnVlOwogICAgICAgICAgICBpZiAoYmluZFR5cGUgPT0gVFlQRV9URVhUKSB7CiAgICAgICAgICAgICAgZGVidWdMaXN0LnB1c2goInsiICsgWyAnYmluZGluZzoiJyArIGwxMG5GdWxsUGF0aCArICciJywgImRvbToiICsgZG9tUmVmLCAndmFsOl9fbDEwblsiJyArIGwxMG5OYW1lICsgJyJdJywgJ2F0dGFjaG1lbnQ6bDEwblRva2VuKCInICsgbDEwbk5hbWUgKyAnIiknIF0gKyAifSIpOwogICAgICAgICAgICAgIHRvb2xzVXNlZC5sMTBuVG9rZW4gPSB0cnVlOwogICAgICAgICAgICAgIGwxMG5NYXBbbDEwbk5hbWVdLnB1c2goZG9tUmVmICsgIi5ub2RlVmFsdWU9dmFsdWU7Iik7CiAgICAgICAgICAgICAgYmluZENvZGUucHVzaChkb21SZWYgKyAnLm5vZGVWYWx1ZT1fX2wxMG5bIicgKyBsMTBuTmFtZSArICciXScgKyAobDEwbkJpbmRpbmcgPyAiW19fIiArIGwxMG5CaW5kaW5nICsgIl0iIDogIiIpICsgIjsiKTsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBsMTBuTWFwW2wxMG5OYW1lXS5wdXNoKCJiaW5kX2F0dHIoIiArIFsgZG9tUmVmLCAnIicgKyBiaW5kaW5nW0FUVFJfTkFNRV0gKyAnIicsICJOYU4iLCBidWlsZEF0dHJFeHByZXNzaW9uKGJpbmRpbmcsICJsMTBuIiwgbDEwbkJpbmRpbmdzKSBdICsgIik7Iik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghYmluZENvZGUpIHsKICAgICAgICAgICAgYmluZENvZGUgPSBiaW5kTWFwW2JpbmROYW1lXSA9IFtdOwogICAgICAgICAgICB2YXJMaXN0LnB1c2godmFyTmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYmluZFR5cGUgIT0gVFlQRV9BVFRSSUJVVEUpIHsKICAgICAgICAgICAgZGVidWdMaXN0LnB1c2goInsiICsgWyAnYmluZGluZzoiJyArIGJpbmROYW1lICsgJyInLCAiZG9tOiIgKyBkb21SZWYsICJ2YWw6IiArIChiaW5kQ29kZS5ub2RlQmluZCA/IHZhck5hbWUgOiBiaW5kVmFyKSwgInVwZGF0ZXM6JCQiICsgYmluZE5hbWUsICdhdHRhY2htZW50Omluc3RhbmNlLmF0dGFjaGVzJiZpbnN0YW5jZS5hdHRhY2hlc1siJyArIGJpbmROYW1lICsgJyJdJiZpbnN0YW5jZS5hdHRhY2hlc1siJyArIGJpbmROYW1lICsgJyJdLnZhbHVlJyBdICsgIn0iKTsKICAgICAgICAgICAgaWYgKCFiaW5kQ29kZS5ub2RlQmluZCkgewogICAgICAgICAgICAgIHZhckxpc3QucHVzaChiaW5kVmFyICsgIj0iICsgZG9tUmVmKTsKICAgICAgICAgICAgICBwdXRCaW5kQ29kZShiaW5kRnVuY3Rpb25zW2JpbmRUeXBlXSwgZG9tUmVmLCBiaW5kVmFyLCAidmFsdWUiKTsKICAgICAgICAgICAgICBiaW5kQ29kZS5ub2RlQmluZCA9IGJpbmRWYXI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc3dpdGNoIChiaW5kVHlwZSkgewogICAgICAgICAgICAgICAgY2FzZSBUWVBFX0VMRU1FTlQ6CiAgICAgICAgICAgICAgICAgIHB1dEJpbmRDb2RlKGJpbmRGdW5jdGlvbnNbYmluZFR5cGVdLCBkb21SZWYsIGRvbVJlZiwgInZhbHVlIT09bnVsbD9TdHJpbmcodmFsdWUpOm51bGwiKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIFRZUEVfVEVYVDoKICAgICAgICAgICAgICAgICAgYmluZENvZGUucHVzaChkb21SZWYgKyAiLm5vZGVWYWx1ZT12YWx1ZTsiKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgYXR0ck5hbWUgPSBiaW5kaW5nW0FUVFJfTkFNRV07CiAgICAgICAgICAgIHN3aXRjaCAoYXR0ck5hbWUpIHsKICAgICAgICAgICAgICBjYXNlICJjbGFzcyI6CiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEV4cHIgPSAiIjsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZUV4cHIgPSAidmFsdWUiOwogICAgICAgICAgICAgICAgdmFyIHByZWZpeCA9IGJpbmRpbmdbNF07CiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ0xlbmd0aCA9IGJpbmRpbmcubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdMZW5ndGggPj0gNikgewogICAgICAgICAgICAgICAgICBpZiAoYmluZGluZ0xlbmd0aCA9PSA2IHx8IHR5cGVvZiBiaW5kaW5nWzZdID09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdMZW5ndGggPT0gNikgewogICAgICAgICAgICAgICAgICAgICAgdmFsdWVFeHByID0gJ3ZhbHVlPyInICsgYmluZE5hbWUgKyAnIjoiIic7CiAgICAgICAgICAgICAgICAgICAgICBpZiAoYmluZGluZ1s1XSkgZGVmYXVsdEV4cHIgPSBwcmVmaXggKyBiaW5kTmFtZTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0gIiI7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUV4cHIgPSAndmFsdWU/IicgKyBiaW5kaW5nWzZdICsgJyI6IiInOwogICAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdbNV0pIGRlZmF1bHRFeHByID0gYmluZGluZ1s2XTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFiaW5kaW5nWzZdLmxlbmd0aCkgY29udGludWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdMZW5ndGggPT0gNykgewogICAgICAgICAgICAgICAgICAgICAgdmFsdWVFeHByID0gYmluZGluZ1s2XS5tYXAoZnVuY3Rpb24odmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndmFsdWU9PSInICsgdmFsICsgJyInOwogICAgICAgICAgICAgICAgICAgICAgfSkuam9pbigifHwiKSArICc/dmFsdWU6IiInOwogICAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdbNV0pIGRlZmF1bHRFeHByID0gcHJlZml4ICsgYmluZGluZ1s2XVtiaW5kaW5nWzVdIC0gMV07CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHByZWZpeCA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgdmFsdWVFeHByID0gYmluZGluZ1s2XS5tYXAoZnVuY3Rpb24odmFsLCBpZHgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd2YWx1ZT09IicgKyB2YWwgKyAnIj8iJyArIHRoaXNbaWR4XSArICciJzsKICAgICAgICAgICAgICAgICAgICAgIH0sIGJpbmRpbmdbN10pLmpvaW4oIjoiKSArICc6IiInOwogICAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdbNV0pIGRlZmF1bHRFeHByID0gYmluZGluZ1s3XVtiaW5kaW5nWzVdIC0gMV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB2YWx1ZUV4cHIgPSAndHlwZW9mIHZhbHVlPT0ic3RyaW5nInx8dHlwZW9mIHZhbHVlPT0ibnVtYmVyIj92YWx1ZToodmFsdWU/IicgKyBiaW5kTmFtZSArICciOiIiKSc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXJMaXN0LnB1c2goYmluZFZhciArICc9IicgKyBkZWZhdWx0RXhwciArICciJyk7CiAgICAgICAgICAgICAgICBwdXRCaW5kQ29kZSgiYmluZF9hdHRyQ2xhc3MiLCBkb21SZWYsIGJpbmRWYXIsIHZhbHVlRXhwciwgJyInICsgcHJlZml4ICsgJyInLCBhbmltKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgInN0eWxlIjoKICAgICAgICAgICAgICAgIHZhciBleHByID0gYnVpbGRBdHRyRXhwcmVzc2lvbihiaW5kaW5nLCBmYWxzZSwgbDEwbkJpbmRpbmdzKTsKICAgICAgICAgICAgICAgIGF0dHJFeHBySWQgPSBiaW5kaW5nWzhdOwogICAgICAgICAgICAgICAgaWYgKCFhdHRyRXhwck1hcFthdHRyRXhwcklkXSkgewogICAgICAgICAgICAgICAgICBhdHRyRXhwck1hcFthdHRyRXhwcklkXSA9IGJpbmRWYXI7CiAgICAgICAgICAgICAgICAgIHZhckxpc3QucHVzaChiaW5kVmFyICsgIj0iICsgKGJpbmRpbmdbN10gPT0gImhpZGUiID8gJyIiJyA6ICcibm9uZSInKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYmluZGluZ1s3XSkgZXhwciA9IGV4cHIucmVwbGFjZSgvXCsiIiQvLCAiIikgKyAoYmluZGluZ1s3XSA9PSAiaGlkZSIgPyAnPyJub25lIjoiIicgOiAnPyIiOiJub25lIicpOwogICAgICAgICAgICAgICAgYmluZFZhciA9IGF0dHJFeHByTWFwW2F0dHJFeHBySWRdOwogICAgICAgICAgICAgICAgcHV0QmluZENvZGUoImJpbmRfYXR0clN0eWxlIiwgZG9tUmVmLCAnIicgKyBiaW5kaW5nWzZdICsgJyInLCBiaW5kVmFyLCBleHByKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICBzcGVjaWFsQXR0ciA9IFNQRUNJQUxfQVRUUl9NQVBbYXR0ck5hbWVdOwogICAgICAgICAgICAgICAgYXR0ckV4cHJJZCA9IGJpbmRpbmdbN107CiAgICAgICAgICAgICAgICBpZiAoIWF0dHJFeHByTWFwW2F0dHJFeHBySWRdKSB7CiAgICAgICAgICAgICAgICAgIHZhckxpc3QucHVzaChiaW5kVmFyICsgIj0iICsgYnVpbGRBdHRyRXhwcmVzc2lvbihiaW5kaW5nLCAibDEwbiIsIGwxMG5CaW5kaW5ncykpOwogICAgICAgICAgICAgICAgICBhdHRyRXhwck1hcFthdHRyRXhwcklkXSA9IGJpbmRWYXI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBiaW5kVmFyID0gYXR0ckV4cHJNYXBbYXR0ckV4cHJJZF07CiAgICAgICAgICAgICAgICBwdXRCaW5kQ29kZSgiYmluZF9hdHRyIiwgZG9tUmVmLCAnIicgKyBhdHRyTmFtZSArICciJywgYmluZFZhciwgc3BlY2lhbEF0dHIgJiYgU1BFQ0lBTF9BVFRSX1NJTkdMRVthdHRyTmFtZV0gPyBidWlsZEF0dHJFeHByZXNzaW9uKGJpbmRpbmcsICJib29sIiwgbDEwbkJpbmRpbmdzKSArICc/IicgKyBhdHRyTmFtZSArICciOiIiJyA6IGJ1aWxkQXR0ckV4cHJlc3Npb24oYmluZGluZywgZmFsc2UsIGwxMG5CaW5kaW5ncykpOwogICAgICAgICAgICAgICAgaWYgKHNwZWNpYWxBdHRyICYmIChzcGVjaWFsQXR0ciA9PSAiKiIgfHwgc3BlY2lhbEF0dHIuaW5kZXhPZihiaW5kaW5nWzZdLnRvTG93ZXJDYXNlKCkpICE9IC0xKSkgYmluZENvZGUucHVzaCgiaWYoIiArIGRvbVJlZiArICIuIiArIGF0dHJOYW1lICsgIiE9IiArIGJpbmRWYXIgKyAiKSIgKyBkb21SZWYgKyAiLiIgKyBhdHRyTmFtZSArICI9IiArIChTUEVDSUFMX0FUVFJfU0lOR0xFW2F0dHJOYW1lXSA/ICIhISIgKyBiaW5kVmFyIDogYmluZFZhcikgKyAiOyIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGRlYnVnTGlzdC5wdXNoKCJ7IiArIFsgJ2JpbmRpbmc6IicgKyBiaW5kTmFtZSArICciJywgImRvbToiICsgZG9tUmVmLCAnYXR0cjoiJyArIGF0dHJOYW1lICsgJyInLCAidmFsOiIgKyBiaW5kVmFyLCAnYXR0YWNobWVudDppbnN0YW5jZS5hdHRhY2hlcyYmaW5zdGFuY2UuYXR0YWNoZXNbIicgKyBiaW5kTmFtZSArICciXSYmaW5zdGFuY2UuYXR0YWNoZXNbIicgKyBiaW5kTmFtZSArICciXS52YWx1ZScgXSArICJ9Iik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJlc3VsdC5wdXNoKCI7ZnVuY3Rpb24gc2V0KGJpbmROYW1lLHZhbHVlKXsiICsgJ2lmKHR5cGVvZiBiaW5kTmFtZSE9InN0cmluZyIpJyk7CiAgICAgICAgZm9yICh2YXIgYmluZE5hbWUgaW4gYmluZE1hcCkgaWYgKGJpbmRNYXBbYmluZE5hbWVdLm5vZGVCaW5kKSB7CiAgICAgICAgICByZXN1bHQucHVzaCgiaWYoYmluZE5hbWU9PT0iICsgYmluZE1hcFtiaW5kTmFtZV0ubm9kZUJpbmQgKyAiKSIgKyAnYmluZE5hbWU9IicgKyBiaW5kTmFtZSArICciOycgKyAiZWxzZSAiKTsKICAgICAgICB9CiAgICAgICAgcmVzdWx0LnB1c2goInJldHVybjsiKTsKICAgICAgICByZXN1bHQucHVzaCgidmFsdWU9cmVzb2x2ZS5jYWxsKGluc3RhbmNlLGJpbmROYW1lLHZhbHVlLEF0dGFjaGVzKTsiICsgInN3aXRjaChiaW5kTmFtZSl7Iik7CiAgICAgICAgZm9yICh2YXIgYmluZE5hbWUgaW4gYmluZE1hcCkgewogICAgICAgICAgaWYgKGJpbmROYW1lLmluZGV4T2YoIkAiKSA9PSAtMSkgdmFyTGlzdC5wdXNoKCIkJCIgKyBiaW5kTmFtZSArICI9MCIpOwogICAgICAgICAgcmVzdWx0LnB1c2goJ2Nhc2UiJyArIGJpbmROYW1lICsgJyI6JyArIChiaW5kTWFwW2JpbmROYW1lXS5sMTBuID8gYmluZE1hcFtiaW5kTmFtZV0uam9pbigiIikgOiAiaWYoX18iICsgYmluZE5hbWUgKyAiIT09dmFsdWUpIiArICJ7IiArICIkJCIgKyBiaW5kTmFtZSArICIrKzsiICsgIl9fIiArIGJpbmROYW1lICsgIj12YWx1ZTsiICsgYmluZE1hcFtiaW5kTmFtZV0uam9pbigiIikgKyAifSIpICsgImJyZWFrOyIpOwogICAgICAgIH0KICAgICAgICByZXN1bHQucHVzaCgifX0iKTsKICAgICAgICB2YXIgdG9vbHNWYXJMaXN0ID0gW107CiAgICAgICAgZm9yICh2YXIga2V5IGluIHRvb2xzVXNlZCkgdG9vbHNWYXJMaXN0LnB1c2goa2V5ICsgIj10b29scy4iICsga2V5KTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgZGVidWdMaXN0OiBkZWJ1Z0xpc3QsCiAgICAgICAgICBrZXlzOiBiYXNpcy5vYmplY3Qua2V5cyhiaW5kTWFwKS5maWx0ZXIoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICAgIHJldHVybiBrZXkuaW5kZXhPZigiQCIpID09IC0xOwogICAgICAgICAgfSksCiAgICAgICAgICB0b29sczogdG9vbHNWYXJMaXN0LAogICAgICAgICAgdmFyczogdmFyTGlzdCwKICAgICAgICAgIHNldDogcmVzdWx0LmpvaW4oIiIpLAogICAgICAgICAgbDEwbjogbDEwbk1hcCwKICAgICAgICAgIGwxMG5Db21wdXRlOiBsMTBuQ29tcHV0ZQogICAgICAgIH07CiAgICAgIH07CiAgICB9KCk7CiAgICBmdW5jdGlvbiBjb21waWxlRnVuY3Rpb24oYXJncywgYm9keSkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oYXJncywgYm9keSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBiYXNpcy5kZXYuZXJyb3IoIkNhbid0IGJ1aWxkIHRlbXBsYXRlIGZ1bmN0aW9uOiAiICsgZSArICJcbiIsICJmdW5jdGlvbigiICsgYXJncyArICIpe1xuIiArIGJvZHkgKyAiXG59Iik7CiAgICAgIH0KICAgIH0KICAgIHZhciBnZXRGdW5jdGlvbnMgPSBmdW5jdGlvbih0b2tlbnMsIGRlYnVnLCB1cmksIHNvdXJjZSwgbm9UZXh0QnVnLCB0ZW1wbGF0ZU1hcmtlcikgewogICAgICB2YXIgZm4gPSB0bXBsRnVuY3Rpb25zW3VyaSAmJiBiYXNpcy5wYXRoLnJlbGF0aXZlKHVyaSldOwogICAgICBpZiAoZm4pIHJldHVybiBmbjsKICAgICAgdmFyIHBhdGhzID0gYnVpbGRQYXRoZXModG9rZW5zLCAiXyIsIG5vVGV4dEJ1ZywgdGVtcGxhdGVNYXJrZXIpOwogICAgICB2YXIgYmluZGluZ3MgPSBidWlsZEJpbmRpbmdzKHBhdGhzLmJpbmRpbmcpOwogICAgICB2YXIgb2JqZWN0UmVmcyA9IHBhdGhzLm1hcmtlZEVsZW1lbnRMaXN0LmpvaW4oIj0iKTsKICAgICAgdmFyIGNyZWF0ZUluc3RhbmNlOwogICAgICB2YXIgZm5Cb2R5OwogICAgICB2YXIgcmVzdWx0ID0gewogICAgICAgIGtleXM6IGJpbmRpbmdzLmtleXMsCiAgICAgICAgbDEwbktleXM6IGJhc2lzLm9iamVjdC5rZXlzKGJpbmRpbmdzLmwxMG4pCiAgICAgIH07CiAgICAgIGlmICh0b2tlbnMubGVuZ3RoID09IDEpIHBhdGhzLnBhdGhbMF0gPSAiYT1fIjsKICAgICAgaWYgKCF1cmkpIHVyaSA9IGJhc2lzLnBhdGguYmFzZVVSSSArICJpbmxpbmVfdGVtcGxhdGUiICsgaW5saW5lU2VlZCsrICsgIi50bXBsIjsKICAgICAgaWYgKGJpbmRpbmdzLmwxMG4pIHsKICAgICAgICB2YXIgY29kZSA9IFtdOwogICAgICAgIGZvciAodmFyIGtleSBpbiBiaW5kaW5ncy5sMTBuKSBjb2RlLnB1c2goJ2Nhc2UiJyArIGtleSArICciOicgKyAnaWYodmFsdWU9PW51bGwpdmFsdWU9InsnICsga2V5ICsgJ30iOycgKyAiX19sMTBuW3Rva2VuXT12YWx1ZTsiICsgYmluZGluZ3MubDEwbltrZXldLmpvaW4oIiIpICsgImJyZWFrOyIpOwogICAgICAgIHJlc3VsdC5jcmVhdGVMMTBuU3luYyA9IGNvbXBpbGVGdW5jdGlvbihbICJfIiwgIl9fbDEwbiIsICJiaW5kX2F0dHIiLCAiVEVYVF9CVUciIF0sIChzb3VyY2UgPyAiXG4vLyAiICsgc291cmNlLnNwbGl0KC9cclxuP3xcblxyPy8pLmpvaW4oIlxuLy8gIikgKyAiXG5cbiIgOiAiIikgKyAidmFyICIgKyBwYXRocy5wYXRoICsgIjsiICsgInJldHVybiBmdW5jdGlvbih0b2tlbiwgdmFsdWUpeyIgKyAic3dpdGNoKHRva2VuKXsiICsgY29kZS5qb2luKCIiKSArICJ9IiArICJ9IiArICJcblxuLy8jIHNvdXJjZVVSTD0iICsgYmFzaXMucGF0aC5vcmlnaW4gKyB1cmkgKyAiX2wxMG4iKTsKICAgICAgfQogICAgICByZXN1bHQuY3JlYXRlSW5zdGFuY2UgPSBjb21waWxlRnVuY3Rpb24oWyAidGlkIiwgIm1hcCIsICJwcm90byIsICJ0b29scyIsICJfX2wxMG4iLCAiVEVYVF9CVUciIF0sIChzb3VyY2UgPyAiXG4vLyAiICsgc291cmNlLnNwbGl0KC9cclxuP3xcblxyPy8pLmpvaW4oIlxuLy8gIikgKyAiXG5cbiIgOiAiIikgKyAidmFyIGdldEJpbmRpbmdzPXRvb2xzLmNyZWF0ZUJpbmRpbmdGdW5jdGlvbihbIiArIGJpbmRpbmdzLmtleXMubWFwKGZ1bmN0aW9uKGtleSkgewogICAgICAgIHJldHVybiAnIicgKyBrZXkgKyAnIic7CiAgICAgIH0pICsgIl0pLCIgKyAoYmluZGluZ3MudG9vbHMubGVuZ3RoID8gYmluZGluZ3MudG9vbHMgKyAiLCIgOiAiIikgKyAiQXR0YWNoZXM9ZnVuY3Rpb24oKXt9OyIgKyAiQXR0YWNoZXMucHJvdG90eXBlPXsiICsgYmluZGluZ3Mua2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgcmV0dXJuIGtleSArICI6bnVsbCI7CiAgICAgIH0pICsgIn07IiArICJyZXR1cm4gZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VfKGlkLG9iaixvbkFjdGlvbixvblJlYnVpbGQsYmluZGluZ3MsYmluZGluZ0ludGVyZmFjZSl7IiArICJ2YXIgXz1wcm90by5jbG9uZU5vZGUodHJ1ZSksIiArIHBhdGhzLnBhdGguY29uY2F0KGJpbmRpbmdzLnZhcnMpICsgIiwiICsgImluc3RhbmNlPXsiICsgImNvbnRleHQ6b2JqLCIgKyAiYWN0aW9uOm9uQWN0aW9uLCIgKyAicmVidWlsZDpvblJlYnVpbGQsIiArIChkZWJ1ZyA/ICJkZWJ1ZzpmdW5jdGlvbiBkZWJ1Zygpe3JldHVyblsiICsgYmluZGluZ3MuZGVidWdMaXN0ICsgIl19LCIgOiAiIikgKyAiaGFuZGxlcjpudWxsLCIgKyAiYmluZGluZ3M6YmluZGluZ3MsIiArICJiaW5kaW5nSW50ZXJmYWNlOmJpbmRpbmdJbnRlcmZhY2UsIiArICJhdHRhY2hlczpudWxsLCIgKyAidG1wbDp7IiArIFsgcGF0aHMucmVmLCAidGVtcGxhdGVJZF86aWQiLCAic2V0OnNldCIgXSArICJ9IiArICJ9IiArIChvYmplY3RSZWZzID8gIjtpZihvYmp8fG9uQWN0aW9uKSIgKyBvYmplY3RSZWZzICsgIj0oaWQ8PDEyKXx0aWQiIDogIiIpICsgYmluZGluZ3Muc2V0ICsgIjtpZihiaW5kaW5ncylpbnN0YW5jZS5oYW5kbGVyPWdldEJpbmRpbmdzKGJpbmRpbmdzLG9iaixzZXQsYmluZGluZ0ludGVyZmFjZSkiICsgIjsiICsgYmluZGluZ3MubDEwbkNvbXB1dGUgKyAiO3JldHVybiBpbnN0YW5jZSIgKyAifSIgKyAiXG5cbi8vIyBzb3VyY2VVUkw9IiArIGJhc2lzLnBhdGgub3JpZ2luICsgdXJpKTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CiAgICBtb2R1bGUuZXhwb3J0cyA9IHsKICAgICAgZ2V0RnVuY3Rpb25zOiBnZXRGdW5jdGlvbnMKICAgIH07CiAgfQp9OwoKKGZ1bmN0aW9uIGNyZWF0ZUJhc2lzSW5zdGFuY2UoZ2xvYmFsLCBfX2Jhc2lzRmlsZW5hbWUsIF9fY29uZmlnKSB7CiAgInVzZSBzdHJpY3QiOwogIHZhciBWRVJTSU9OID0gIjEuMy4zIjsKICB2YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7CiAgdmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZzsKICBmdW5jdGlvbiBnZW5VSUQobGVuKSB7CiAgICBmdW5jdGlvbiBiYXNlMzYodmFsKSB7CiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbCkudG9TdHJpbmcoMzYpOwogICAgfQogICAgdmFyIHJlc3VsdCA9IGJhc2UzNigxMCArIDI1ICogTWF0aC5yYW5kb20oKSk7CiAgICBpZiAoIWxlbikgbGVuID0gMTY7CiAgICB3aGlsZSAocmVzdWx0Lmxlbmd0aCA8IGxlbikgcmVzdWx0ICs9IGJhc2UzNihuZXcgRGF0ZSAqIE1hdGgucmFuZG9tKCkpOwogICAgcmV0dXJuIHJlc3VsdC5zdWJzdHIoMCwgbGVuKTsKICB9CiAgZnVuY3Rpb24gZXh0ZW5kKGRlc3QsIHNvdXJjZSkgewogICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgZGVzdFtrZXldID0gc291cmNlW2tleV07CiAgICByZXR1cm4gZGVzdDsKICB9CiAgZnVuY3Rpb24gY29tcGxldGUoZGVzdCwgc291cmNlKSB7CiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSBpZiAoa2V5IGluIGRlc3QgPT0gZmFsc2UpIGRlc3Rba2V5XSA9IHNvdXJjZVtrZXldOwogICAgcmV0dXJuIGRlc3Q7CiAgfQogIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7CiAgICB2YXIgcmVzdWx0ID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSByZXN1bHQucHVzaChrZXkpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkgewogICAgdmFyIHJlc3VsdCA9IFtdOwogICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgcmVzdWx0LnB1c2gob2JqZWN0W2tleV0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gc2xpY2Uoc291cmNlLCBrZXlzKSB7CiAgICB2YXIgcmVzdWx0ID0ge307CiAgICBpZiAoIWtleXMpIHJldHVybiBleHRlbmQocmVzdWx0LCBzb3VyY2UpOwogICAgZm9yICh2YXIgaSA9IDAsIGtleTsga2V5ID0ga2V5c1tpKytdOyApIGlmIChrZXkgaW4gc291cmNlKSByZXN1bHRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gc3BsaWNlKHNvdXJjZSwga2V5cykgewogICAgdmFyIHJlc3VsdCA9IHt9OwogICAgaWYgKCFrZXlzKSByZXR1cm4gZXh0ZW5kKHJlc3VsdCwgc291cmNlKTsKICAgIGZvciAodmFyIGkgPSAwLCBrZXk7IGtleSA9IGtleXNbaSsrXTsgKSBpZiAoa2V5IGluIHNvdXJjZSkgewogICAgICByZXN1bHRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgICBkZWxldGUgc291cmNlW2tleV07CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBmdW5jdGlvbiBtZXJnZSgpIHsKICAgIHZhciByZXN1bHQgPSB7fTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBleHRlbmQocmVzdWx0LCBhcmd1bWVudHNbaV0pOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gaXRlcmF0ZShvYmplY3QsIGNhbGxiYWNrLCB0aGlzT2JqZWN0KSB7CiAgICB2YXIgcmVzdWx0ID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSByZXN1bHQucHVzaChjYWxsYmFjay5jYWxsKHRoaXNPYmplY3QsIGtleSwgb2JqZWN0W2tleV0pKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQogIGZ1bmN0aW9uICR1bmRlZmluZWQodmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZSA9PSB1bmRlZmluZWQ7CiAgfQogIGZ1bmN0aW9uICRkZWZpbmVkKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgIT0gdW5kZWZpbmVkOwogIH0KICBmdW5jdGlvbiAkaXNOdWxsKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSB1bmRlZmluZWQ7CiAgfQogIGZ1bmN0aW9uICRpc05vdE51bGwodmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9IHVuZGVmaW5lZDsKICB9CiAgZnVuY3Rpb24gJGlzU2FtZSh2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlID09PSB0aGlzOwogIH0KICBmdW5jdGlvbiAkaXNOb3RTYW1lKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgIT09IHRoaXM7CiAgfQogIGZ1bmN0aW9uICRzZWxmKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfQogIGZ1bmN0aW9uICRjb25zdCh2YWx1ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdmFsdWU7CiAgICB9OwogIH0KICBmdW5jdGlvbiAkZmFsc2UoKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGZ1bmN0aW9uICR0cnVlKCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIGZ1bmN0aW9uICRudWxsKCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIGZ1bmN0aW9uICR1bmRlZigpIHt9CiAgdmFyIGdldHRlciA9IGZ1bmN0aW9uKCkgewogICAgdmFyIElEID0gImJhc2lzR2V0dGVySWQiICsgZ2VuVUlEKCkgKyAiXyI7CiAgICB2YXIgbW9kaWZpY2F0b3JTZWVkID0gMTsKICAgIHZhciBzaW1wbGVQYXRoID0gL15bYS16JF9dW2EteiRfMC05XSooXC5bYS16JF9dW2EteiRfMC05XSopKiQvaTsKICAgIHZhciBnZXR0ZXJNYXAgPSBbXTsKICAgIHZhciBwYXRoQ2FjaGUgPSB7fTsKICAgIHZhciBtb2RDYWNoZSA9IHt9OwogICAgZnVuY3Rpb24gYnVpbGRGdW5jdGlvbihwYXRoKSB7CiAgICAgIGlmIChzaW1wbGVQYXRoLnRlc3QocGF0aCkpIHsKICAgICAgICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KCIuIik7CiAgICAgICAgdmFyIGZvbyA9IHBhcnRzWzBdOwogICAgICAgIHZhciBiYXIgPSBwYXJ0c1sxXTsKICAgICAgICB2YXIgYmF6ID0gcGFydHNbMl07CiAgICAgICAgdmFyIGZuOwogICAgICAgIHN3aXRjaCAocGFydHMubGVuZ3RoKSB7CiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGZuID0gZnVuY3Rpb24ob2JqZWN0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsID8gb2JqZWN0W2Zvb10gOiBvYmplY3Q7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBmbiA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgICAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCA/IG9iamVjdFtmb29dW2Jhcl0gOiBvYmplY3Q7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBmbiA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgICAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCA/IG9iamVjdFtmb29dW2Jhcl1bYmF6XSA6IG9iamVjdDsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBmbiA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgICAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2Zvb11bYmFyXVtiYXpdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDMsIGtleTsga2V5ID0gcGFydHNbaV07IGkrKykgb2JqZWN0ID0gb2JqZWN0W2tleV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7CiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIGZuID0gRnVuY3Rpb24oInBhcnRzIiwgInJldHVybiAiICsgZm4udG9TdHJpbmcoKS5yZXBsYWNlKC8oZm9vfGJhcnxiYXopL2csIGZ1bmN0aW9uKG0sIHcpIHsKICAgICAgICAgIHJldHVybiAnIicgKyBwYXJ0c1t3ID09ICJmb28iID8gMCA6IHcgPT0gImJhciIgPyAxIDogMl0gKyAnIic7CiAgICAgICAgfSkucmVwbGFjZSgvXFtcIihbXiJdKylcIlxdL2csICIuJDEiKSkocGFydHMpOwogICAgICAgIHJldHVybiBmbjsKICAgICAgfQogICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCJvYmplY3QiLCAicmV0dXJuIG9iamVjdCAhPSBudWxsID8gb2JqZWN0LiIgKyBwYXRoICsgIiA6IG9iamVjdCIpOwogICAgfQogICAgdmFyIGdldHRlckZuID0gZnVuY3Rpb24ocGF0aCwgbW9kaWZpY2F0b3IpIHsKICAgICAgdmFyIGZ1bmM7CiAgICAgIHZhciByZXN1bHQ7CiAgICAgIHZhciBnZXR0ZXJJZDsKICAgICAgaWYgKCFwYXRoIHx8IHBhdGggPT09IG51bGxHZXR0ZXIpIHJldHVybiBudWxsR2V0dGVyOwogICAgICBpZiAodHlwZW9mIHBhdGggPT0gImZ1bmN0aW9uIikgewogICAgICAgIGdldHRlcklkID0gcGF0aFtJRF07CiAgICAgICAgaWYgKGdldHRlcklkKSB7CiAgICAgICAgICBmdW5jID0gZ2V0dGVyTWFwW01hdGguYWJzKGdldHRlcklkKSAtIDFdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmdW5jID0gZnVuY3Rpb24ob2JqZWN0KSB7CiAgICAgICAgICAgIHJldHVybiBwYXRoKG9iamVjdCk7CiAgICAgICAgICB9OwogICAgICAgICAgZnVuYy5iYXNlID0gcGF0aDsKICAgICAgICAgIGZ1bmMuX19leHRlbmRfXyA9IGdldHRlcjsKICAgICAgICAgIGdldHRlcklkID0gZ2V0dGVyTWFwLnB1c2goZnVuYyk7CiAgICAgICAgICBwYXRoW0lEXSA9IC1nZXR0ZXJJZDsKICAgICAgICAgIGZ1bmNbSURdID0gZ2V0dGVySWQ7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGZ1bmMgPSBwYXRoQ2FjaGVbcGF0aF07CiAgICAgICAgaWYgKGZ1bmMpIHsKICAgICAgICAgIGdldHRlcklkID0gZnVuY1tJRF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZ1bmMgPSBidWlsZEZ1bmN0aW9uKHBhdGgpOwogICAgICAgICAgZnVuYy5iYXNlID0gcGF0aDsKICAgICAgICAgIGZ1bmMuX19leHRlbmRfXyA9IGdldHRlcjsKICAgICAgICAgIGdldHRlcklkID0gZ2V0dGVyTWFwLnB1c2goZnVuYyk7CiAgICAgICAgICBmdW5jW0lEXSA9IGdldHRlcklkOwogICAgICAgICAgcGF0aENhY2hlW3BhdGhdID0gZnVuYzsKICAgICAgICB9CiAgICAgIH0KICAgICAgdmFyIG1vZFR5cGUgPSBtb2RpZmljYXRvciAhPSBudWxsICYmIHR5cGVvZiBtb2RpZmljYXRvcjsKICAgICAgaWYgKCFtb2RUeXBlKSByZXR1cm4gZnVuYzsKICAgICAgdmFyIG1vZExpc3QgPSBtb2RDYWNoZVtnZXR0ZXJJZF07CiAgICAgIHZhciBtb2RJZDsKICAgICAgaWYgKG1vZFR5cGUgPT0gInN0cmluZyIpIG1vZElkID0gbW9kVHlwZSArIG1vZGlmaWNhdG9yOyBlbHNlIGlmIChtb2RUeXBlID09ICJmdW5jdGlvbiIpIG1vZElkID0gbW9kaWZpY2F0b3IuYmFzaXNNb2RJZF87IGVsc2UgaWYgKG1vZFR5cGUgIT0gIm9iamVjdCIpIHsKICAgICAgICBjb25zb2xlTWV0aG9kcy53YXJuKCJiYXNpcy5nZXR0ZXI6IHdyb25nIG1vZGlmaWNhdG9yIHR5cGUsIG1vZGlmaWNhdG9yIG5vdCB1c2VkLCBwYXRoOiAiLCBwYXRoLCAiLCBtb2RpZmljYXRvcjoiLCBtb2RpZmljYXRvcik7CiAgICAgICAgcmV0dXJuIGZ1bmM7CiAgICAgIH0KICAgICAgaWYgKG1vZElkICYmIG1vZExpc3QgJiYgbW9kTGlzdFttb2RJZF0pIHJldHVybiBtb2RMaXN0W21vZElkXTsKICAgICAgaWYgKHR5cGVvZiBmdW5jLmJhc2UgPT0gImZ1bmN0aW9uIikgZnVuYyA9IGZ1bmMuYmFzZTsKICAgICAgc3dpdGNoIChtb2RUeXBlKSB7CiAgICAgICAgY2FzZSAic3RyaW5nIjoKICAgICAgICAgIHJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgICAgICByZXR1cm4gc3RyaW5nRnVuY3Rpb25zLmZvcm1hdChtb2RpZmljYXRvciwgZnVuYyhvYmplY3QpKTsKICAgICAgICAgIH07CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJmdW5jdGlvbiI6CiAgICAgICAgICBpZiAoIW1vZElkKSB7CiAgICAgICAgICAgIG1vZElkID0gbW9kVHlwZSArIG1vZGlmaWNhdG9yU2VlZCsrOwogICAgICAgICAgICBtb2RpZmljYXRvci5iYXNpc01vZElkXyA9IG1vZElkOwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0ID0gZnVuY3Rpb24ob2JqZWN0KSB7CiAgICAgICAgICAgIHJldHVybiBtb2RpZmljYXRvcihmdW5jKG9iamVjdCkpOwogICAgICAgICAgfTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXN1bHQgPSBmdW5jdGlvbihvYmplY3QpIHsKICAgICAgICAgICAgcmV0dXJuIG1vZGlmaWNhdG9yW2Z1bmMob2JqZWN0KV07CiAgICAgICAgICB9OwogICAgICB9CiAgICAgIHJlc3VsdC5iYXNlID0gZnVuYy5iYXNlIHx8IGZ1bmM7CiAgICAgIHJlc3VsdC5fX2V4dGVuZF9fID0gZ2V0dGVyOwogICAgICBpZiAobW9kSWQpIHsKICAgICAgICBpZiAoIW1vZExpc3QpIHsKICAgICAgICAgIG1vZExpc3QgPSB7fTsKICAgICAgICAgIG1vZENhY2hlW2dldHRlcklkXSA9IG1vZExpc3Q7CiAgICAgICAgfQogICAgICAgIG1vZExpc3RbbW9kSWRdID0gcmVzdWx0OwogICAgICAgIHJlc3VsdC5tb2QgPSBtb2RpZmljYXRvcjsKICAgICAgICByZXN1bHRbSURdID0gZ2V0dGVyTWFwLnB1c2gocmVzdWx0KTsKICAgICAgfSBlbHNlIHt9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogICAgZ2V0dGVyRm4uSUQgPSBJRDsKICAgIHJldHVybiBnZXR0ZXJGbjsKICB9KCk7CiAgdmFyIG51bGxHZXR0ZXIgPSBleHRlbmQoZnVuY3Rpb24oKSB7fSwgewogICAgX19leHRlbmRfXzogZ2V0dGVyCiAgfSk7CiAgZnVuY3Rpb24gd3JhcHBlcihrZXkpIHsKICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkgewogICAgICB2YXIgcmVzdWx0ID0ge307CiAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogIH0KICBmdW5jdGlvbiBsYXp5SW5pdChpbml0LCB0aGlzT2JqZWN0KSB7CiAgICB2YXIgaW5pdGVkID0gMDsKICAgIHZhciBzZWxmOwogICAgdmFyIGRhdGE7CiAgICByZXR1cm4gc2VsZiA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIShpbml0ZWQrKykpIHsKICAgICAgICBzZWxmLmluaXRlZCA9IHRydWU7CiAgICAgICAgc2VsZi5kYXRhID0gZGF0YSA9IGluaXQuYXBwbHkodGhpc09iamVjdCB8fCB0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSAidW5kZWZpbmVkIikgY29uc29sZU1ldGhvZHMud2FybigibGF6eUluaXQgZnVuY3Rpb24gcmV0dXJucyBub3RoaW5nOlxuIiArIGluaXQpOwogICAgICB9CiAgICAgIHJldHVybiBkYXRhOwogICAgfTsKICB9CiAgZnVuY3Rpb24gbGF6eUluaXRBbmRSdW4oaW5pdCwgcnVuLCB0aGlzT2JqZWN0KSB7CiAgICB2YXIgaW5pdGVkID0gMDsKICAgIHZhciBzZWxmOwogICAgdmFyIGRhdGE7CiAgICByZXR1cm4gc2VsZiA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIShpbml0ZWQrKykpIHsKICAgICAgICBzZWxmLmluaXRlZCA9IHRydWU7CiAgICAgICAgc2VsZi5kYXRhID0gZGF0YSA9IGluaXQuY2FsbCh0aGlzT2JqZWN0IHx8IHRoaXMpOwogICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSAidW5kZWZpbmVkIikgY29uc29sZU1ldGhvZHMud2FybigibGF6eUluaXRBbmRSdW4gZnVuY3Rpb24gcmV0dXJucyBub3RoaW5nOlxuIiArIGluaXQpOwogICAgICB9CiAgICAgIHJ1bi5hcHBseShkYXRhLCBhcmd1bWVudHMpOwogICAgICByZXR1cm4gZGF0YTsKICAgIH07CiAgfQogIGZ1bmN0aW9uIHJ1bk9uY2UocnVuLCB0aGlzT2JqZWN0KSB7CiAgICB2YXIgZmlyZWQgPSAwOwogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICBpZiAoIShmaXJlZCsrKSkgcmV0dXJuIHJ1bi5hcHBseSh0aGlzT2JqZWN0IHx8IHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0KICB2YXIgY29uc29sZU1ldGhvZHMgPSBmdW5jdGlvbigpIHsKICAgIHZhciBtZXRob2RzID0gewogICAgICBsb2c6ICR1bmRlZiwKICAgICAgaW5mbzogJHVuZGVmLAogICAgICB3YXJuOiAkdW5kZWYsCiAgICAgIGVycm9yOiAkdW5kZWYKICAgIH07CiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT0gInVuZGVmaW5lZCIpIGl0ZXJhdGUobWV0aG9kcywgZnVuY3Rpb24obWV0aG9kTmFtZSkgewogICAgICBtZXRob2RzW21ldGhvZE5hbWVdID0gImJpbmQiIGluIEZ1bmN0aW9uLnByb3RvdHlwZSAmJiB0eXBlb2YgY29uc29sZVttZXRob2ROYW1lXSA9PSAiZnVuY3Rpb24iID8gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChjb25zb2xlW21ldGhvZE5hbWVdLCBjb25zb2xlKSA6IGZ1bmN0aW9uKCkgewogICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGVbbWV0aG9kTmFtZV0sIGNvbnNvbGUsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICB9KTsKICAgIHJldHVybiBtZXRob2RzOwogIH0oKTsKICB2YXIgc2V0SW1tZWRpYXRlID0gZ2xvYmFsLnNldEltbWVkaWF0ZSB8fCBnbG9iYWwubXNTZXRJbW1lZGlhdGU7CiAgdmFyIGNsZWFySW1tZWRpYXRlID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlIHx8IGdsb2JhbC5tc1NldEltbWVkaWF0ZTsKICBpZiAoc2V0SW1tZWRpYXRlKSBzZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGUuYmluZChnbG9iYWwpOwogIGlmIChjbGVhckltbWVkaWF0ZSkgY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZS5iaW5kKGdsb2JhbCk7CiAgaWYgKCFzZXRJbW1lZGlhdGUpIChmdW5jdGlvbigpIHsKICAgIHZhciBNRVNTQUdFX05BTUUgPSAiYmFzaXNqcy5zZXRJbW1lZGlhdGUiOwogICAgdmFyIHJ1blRhc2sgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHRhc2tCeUlkID0ge307CiAgICAgIHZhciB0YXNrSWQgPSAxOwogICAgICBzZXRJbW1lZGlhdGUgPSBmdW5jdGlvbihmbikgewogICAgICAgIGlmICh0eXBlb2YgZm4gIT0gImZ1bmN0aW9uIikgewogICAgICAgICAgY29uc29sZU1ldGhvZHMud2FybigiYmFzaXMuc2V0SW1tZWRpYXRlKCkgYW5kIGJhc2lzLm5leHRUaWNrKCkgYWNjZXB0IGZ1bmN0aW9ucyBvbmx5IChjYWxsIGlnbm9yZWQpIik7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRhc2tCeUlkWysrdGFza0lkXSA9IHsKICAgICAgICAgIGZuOiBmbiwKICAgICAgICAgIGFyZ3M6IGFycmF5RnJvbShhcmd1bWVudHMsIDEpCiAgICAgICAgfTsKICAgICAgICBhZGRUb1F1ZXVlKHRhc2tJZCk7CiAgICAgICAgcmV0dXJuIHRhc2tJZDsKICAgICAgfTsKICAgICAgY2xlYXJJbW1lZGlhdGUgPSBmdW5jdGlvbihpZCkgewogICAgICAgIGRlbGV0ZSB0YXNrQnlJZFtpZF07CiAgICAgIH07CiAgICAgIHJldHVybiBmdW5jdGlvbihpZCkgewogICAgICAgIHZhciB0YXNrID0gdGFza0J5SWRbaWRdOwogICAgICAgIGlmICh0YXNrKSB7CiAgICAgICAgICBkZWxldGUgdGFza0J5SWRbaWRdOwogICAgICAgICAgcmV0dXJuIHRhc2suZm4uYXBwbHkodW5kZWZpbmVkLCB0YXNrLmFyZ3MpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0oKTsKICAgIHZhciBhZGRUb1F1ZXVlID0gZnVuY3Rpb24odGFza0lkKSB7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgcnVuVGFzayh0YXNrSWQpOwogICAgICB9LCAwKTsKICAgIH07CiAgICBpZiAoZ2xvYmFsLnByb2Nlc3MgJiYgdHlwZW9mIHByb2Nlc3MubmV4dFRpY2sgPT0gImZ1bmN0aW9uIikgewogICAgICBhZGRUb1F1ZXVlID0gZnVuY3Rpb24odGFza0lkKSB7CiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgIHJ1blRhc2sodGFza0lkKTsKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHsKICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7CiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgdmFyIHRhc2tJZCA9IGV2ZW50LmRhdGE7CiAgICAgICAgICBydW5UYXNrKHRhc2tJZCk7CiAgICAgICAgfTsKICAgICAgICBhZGRUb1F1ZXVlID0gZnVuY3Rpb24odGFza0lkKSB7CiAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKHRhc2tJZCk7CiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgcG9zdE1lc3NhZ2VTdXBwb3J0ZWQgPSBnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzOwogICAgICAgIGlmIChwb3N0TWVzc2FnZVN1cHBvcnRlZCkgewogICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7CiAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHBvc3RNZXNzYWdlU3VwcG9ydGVkID0gZmFsc2U7CiAgICAgICAgICB9OwogICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKCIiLCAiKiIpOwogICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTsKICAgICAgICB9CiAgICAgICAgaWYgKHBvc3RNZXNzYWdlU3VwcG9ydGVkKSB7CiAgICAgICAgICB2YXIgc2V0SW1tZWRpYXRlSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgIGlmIChldmVudCAmJiBldmVudC5zb3VyY2UgPT0gZ2xvYmFsKSB7CiAgICAgICAgICAgICAgdmFyIHRhc2tJZCA9IFN0cmluZyhldmVudC5kYXRhKS5zcGxpdChNRVNTQUdFX05BTUUpWzFdOwogICAgICAgICAgICAgIGlmICh0YXNrSWQpIHJ1blRhc2sodGFza0lkKTsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCBzZXRJbW1lZGlhdGVIYW5kbGVyLCB0cnVlKTsgZWxzZSBnbG9iYWwuYXR0YWNoRXZlbnQoIm9ubWVzc2FnZSIsIHNldEltbWVkaWF0ZUhhbmRsZXIpOwogICAgICAgICAgYWRkVG9RdWV1ZSA9IGZ1bmN0aW9uKHRhc2tJZCkgewogICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoTUVTU0FHRV9OQU1FICsgdGFza0lkLCAiKiIpOwogICAgICAgICAgfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGNyZWF0ZVNjcmlwdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgICAgICB9OwogICAgICAgICAgaWYgKGRvY3VtZW50ICYmICJvbnJlYWR5c3RhdGVjaGFuZ2UiIGluIGNyZWF0ZVNjcmlwdCgpKSB7CiAgICAgICAgICAgIHZhciBkZWZhdWx0QWRkVG9RdWV1ZSA9IGFkZFRvUXVldWU7CiAgICAgICAgICAgIGFkZFRvUXVldWUgPSBmdW5jdGlvbiBiZWZvcmVIZWFkUmVhZHkodGFza0lkKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudEludGVyZmFjZSAhPSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgYWRkVG9RdWV1ZSA9IGRlZmF1bHRBZGRUb1F1ZXVlOwogICAgICAgICAgICAgICAgZG9jdW1lbnRJbnRlcmZhY2UuaGVhZC5yZWFkeShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgYWRkVG9RdWV1ZSA9IGZ1bmN0aW9uKHRhc2tJZCkgewogICAgICAgICAgICAgICAgICAgIHZhciBzY3JpcHRFbCA9IGNyZWF0ZVNjcmlwdCgpOwogICAgICAgICAgICAgICAgICAgIHNjcmlwdEVsLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgc2NyaXB0RWwub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50SW50ZXJmYWNlLnJlbW92ZShzY3JpcHRFbCk7CiAgICAgICAgICAgICAgICAgICAgICBzY3JpcHRFbCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICBydW5UYXNrKHRhc2tJZCk7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudEludGVyZmFjZS5oZWFkLmFkZChzY3JpcHRFbCk7CiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGFkZFRvUXVldWUgPT09IGJlZm9yZUhlYWRSZWFkeSkgZGVmYXVsdEFkZFRvUXVldWUodGFza0lkKTsgZWxzZSBhZGRUb1F1ZXVlKHRhc2tJZCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSkoKTsKICB2YXIgTk9ERV9FTlYgPSB0eXBlb2YgcHJvY2VzcyA9PSAib2JqZWN0IiAmJiB0b1N0cmluZy5jYWxsKHByb2Nlc3MpID09ICJbb2JqZWN0IHByb2Nlc3NdIjsKICB2YXIgcGF0aFV0aWxzID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgQUJTT0xVVEVfUlggPSAvXihbXlwvXSs6fFwvKS87CiAgICB2YXIgUFJPVE9DT0xfUlggPSAvXlthLXpBLVowLTlcLV0rOlwvPy87CiAgICB2YXIgT1JJR0lOX1JYID0gL14oPzpbYS16QS1aMC05XC1dKzopP1wvXC9bXlwvXStcLz8vOwogICAgdmFyIFNFQVJDSF9IQVNIX1JYID0gL1tcPyNdLiokLzsKICAgIHZhciBiYXNlVVJJOwogICAgdmFyIG9yaWdpbjsKICAgIHZhciB1dGlsczsKICAgIGlmIChOT0RFX0VOVikgewogICAgICB2YXIgcGF0aCA9IChwcm9jZXNzLmJhc2lzanNCYXNlVVJJIHx8IHJlcXVpcmUoInBhdGgiKS5yZXNvbHZlKCIuIikpLnJlcGxhY2UoL1xcL2csICIvIik7CiAgICAgIGJhc2VVUkkgPSBwYXRoLnJlcGxhY2UoL15bXlwvXSovLCAiIik7CiAgICAgIG9yaWdpbiA9IHBhdGgucmVwbGFjZSgvXC8uKi8sICIiKTsKICAgIH0gZWxzZSB7CiAgICAgIGJhc2VVUkkgPSBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9bXlwvXSskLywgIiIpOwogICAgICBvcmlnaW4gPSBsb2NhdGlvbi5wcm90b2NvbCArICIvLyIgKyBsb2NhdGlvbi5ob3N0OwogICAgfQogICAgdXRpbHMgPSB7CiAgICAgIGJhc2VVUkk6IGJhc2VVUkksCiAgICAgIG9yaWdpbjogb3JpZ2luLAogICAgICBub3JtYWxpemU6IGZ1bmN0aW9uKHBhdGgpIHsKICAgICAgICBwYXRoID0gKHBhdGggfHwgIiIpLnJlcGxhY2UoUFJPVE9DT0xfUlgsICIvIikucmVwbGFjZShPUklHSU5fUlgsICIvIikucmVwbGFjZShTRUFSQ0hfSEFTSF9SWCwgIiIpOwogICAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KCIvIik7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKHBhcnRzW2ldID09ICIuLiIpIHsKICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiAxIHx8IHJlc3VsdFswXSkgcmVzdWx0LnBvcCgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKChwYXJ0c1tpXSB8fCAhaSkgJiYgcGFydHNbaV0gIT0gIi4iKSByZXN1bHQucHVzaChwYXJ0c1tpXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQuam9pbigiLyIpIHx8IChwYXRoWzBdID09PSAiLyIgPyAiLyIgOiAiIik7CiAgICAgIH0sCiAgICAgIGRpcm5hbWU6IGZ1bmN0aW9uKHBhdGgpIHsKICAgICAgICB2YXIgcmVzdWx0ID0gdXRpbHMubm9ybWFsaXplKHBhdGgpOwogICAgICAgIHJldHVybiByZXN1bHQucmVwbGFjZSgvXC8oW15cL10qKSR8XlteXC9dKyQvLCAiIikgfHwgKHJlc3VsdFswXSA9PSAiLyIgPyAiLyIgOiAiLiIpOwogICAgICB9LAogICAgICBleHRuYW1lOiBmdW5jdGlvbihwYXRoKSB7CiAgICAgICAgdmFyIGV4dCA9IHV0aWxzLm5vcm1hbGl6ZShwYXRoKS5tYXRjaCgvW15cL10oXC5bXlwvXC5dKikkLyk7CiAgICAgICAgcmV0dXJuIGV4dCA/IGV4dFsxXSA6ICIiOwogICAgICB9LAogICAgICBiYXNlbmFtZTogZnVuY3Rpb24ocGF0aCwgZXh0KSB7CiAgICAgICAgdmFyIGZpbGVuYW1lID0gdXRpbHMubm9ybWFsaXplKHBhdGgpLm1hdGNoKC9bXlxcXC9dKiQvKTsKICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lID8gZmlsZW5hbWVbMF0gOiAiIjsKICAgICAgICBpZiAoZXh0ID09IHV0aWxzLmV4dG5hbWUoZmlsZW5hbWUpKSBmaWxlbmFtZSA9IGZpbGVuYW1lLnN1YnN0cmluZygwLCBmaWxlbmFtZS5sZW5ndGggLSBleHQubGVuZ3RoKTsKICAgICAgICByZXR1cm4gZmlsZW5hbWU7CiAgICAgIH0sCiAgICAgIHJlc29sdmU6IGZ1bmN0aW9uKGZyb20sIHRvKSB7CiAgICAgICAgdmFyIGFyZ3MgPSBhcnJheUZyb20oYXJndW1lbnRzKS5yZXZlcnNlKCk7CiAgICAgICAgdmFyIHBhdGggPSBbXTsKICAgICAgICB2YXIgYWJzb2x1dGVGb3VuZCA9IGZhbHNlOwogICAgICAgIGZvciAodmFyIGkgPSAwOyAhYWJzb2x1dGVGb3VuZCAmJiBpIDwgYXJncy5sZW5ndGg7IGkrKykgaWYgKHR5cGVvZiBhcmdzW2ldID09ICJzdHJpbmciKSB7CiAgICAgICAgICBwYXRoLnVuc2hpZnQoYXJnc1tpXSk7CiAgICAgICAgICBhYnNvbHV0ZUZvdW5kID0gQUJTT0xVVEVfUlgudGVzdChhcmdzW2ldKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFhYnNvbHV0ZUZvdW5kKSBwYXRoLnVuc2hpZnQoYmFzZVVSSSA9PSAiLyIgPyAiIiA6IGJhc2VVUkkpOwogICAgICAgIHJldHVybiB1dGlscy5ub3JtYWxpemUocGF0aC5qb2luKCIvIikpOwogICAgICB9LAogICAgICByZWxhdGl2ZTogZnVuY3Rpb24oZnJvbSwgdG8pIHsKICAgICAgICBpZiAodHlwZW9mIHRvICE9ICJzdHJpbmciKSB7CiAgICAgICAgICB0byA9IGZyb207CiAgICAgICAgICBmcm9tID0gYmFzZVVSSTsKICAgICAgICB9CiAgICAgICAgZnJvbSA9IHV0aWxzLm5vcm1hbGl6ZShmcm9tKTsKICAgICAgICB0byA9IHV0aWxzLm5vcm1hbGl6ZSh0byk7CiAgICAgICAgaWYgKGZyb21bMF0gPT0gIi8iICYmIHRvWzBdICE9ICIvIikgcmV0dXJuIGZyb207CiAgICAgICAgaWYgKHRvWzBdID09ICIvIiAmJiBmcm9tWzBdICE9ICIvIikgcmV0dXJuIHRvOwogICAgICAgIHZhciBiYXNlID0gZnJvbS5yZXBsYWNlKC9eXC8kLywgIiIpLnNwbGl0KC9cLy8pOwogICAgICAgIHZhciBwYXRoID0gdG8ucmVwbGFjZSgvXlwvJC8sICIiKS5zcGxpdCgvXC8vKTsKICAgICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgICAgdmFyIGkgPSAwOwogICAgICAgIHdoaWxlIChwYXRoW2ldID09IGJhc2VbaV0gJiYgdHlwZW9mIGJhc2VbaV0gPT0gInN0cmluZyIpIGkrKzsKICAgICAgICBmb3IgKHZhciBqID0gYmFzZS5sZW5ndGggLSBpOyBqID4gMDsgai0tKSByZXN1bHQucHVzaCgiLi4iKTsKICAgICAgICByZXR1cm4gcmVzdWx0LmNvbmNhdChwYXRoLnNsaWNlKGkpLmZpbHRlcihCb29sZWFuKSkuam9pbigiLyIpOwogICAgICB9CiAgICB9OwogICAgcmV0dXJuIHV0aWxzOwogIH0oKTsKICB2YXIgYmFzaXNGaWxlbmFtZSA9IF9fYmFzaXNGaWxlbmFtZSB8fCAiIjsKICB2YXIgY29uZmlnID0gX19jb25maWcgfHwgewogICAgbm9Db25mbGljdDogdHJ1ZSwKICAgIG1vZHVsZXM6IHt9LAogICAgYXV0b2xvYWQ6IFsgIi4vMC5qcyIgXQogIH07CiAgZnVuY3Rpb24gZmV0Y2hDb25maWcoKSB7CiAgICB2YXIgY29uZmlnID0gX19jb25maWc7CiAgICBpZiAoIWNvbmZpZykgewogICAgICBpZiAoTk9ERV9FTlYpIHsKICAgICAgICBiYXNpc0ZpbGVuYW1lID0gX19maWxlbmFtZS5yZXBsYWNlKC9cXC9nLCAiLyIpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuc2NyaXB0czsKICAgICAgICBmb3IgKHZhciBpID0gMCwgc2NyaXB0RWw7IHNjcmlwdEVsID0gc2NyaXB0c1tpXTsgaSsrKSB7CiAgICAgICAgICB2YXIgY29uZmlnQXR0clZhbHVlID0gc2NyaXB0RWwuaGFzQXR0cmlidXRlKCJiYXNpcy1jb25maWciKSA/IHNjcmlwdEVsLmdldEF0dHJpYnV0ZSgiYmFzaXMtY29uZmlnIikgOiBzY3JpcHRFbC5nZXRBdHRyaWJ1dGUoImRhdGEtYmFzaXMtY29uZmlnIik7CiAgICAgICAgICBzY3JpcHRFbC5yZW1vdmVBdHRyaWJ1dGUoImJhc2lzLWNvbmZpZyIpOwogICAgICAgICAgc2NyaXB0RWwucmVtb3ZlQXR0cmlidXRlKCJkYXRhLWJhc2lzLWNvbmZpZyIpOwogICAgICAgICAgaWYgKGNvbmZpZ0F0dHJWYWx1ZSAhPT0gbnVsbCkgewogICAgICAgICAgICBiYXNpc0ZpbGVuYW1lID0gcGF0aFV0aWxzLm5vcm1hbGl6ZShzY3JpcHRFbC5zcmMpOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGNvbmZpZyA9IEZ1bmN0aW9uKCJyZXR1cm57IiArIGNvbmZpZ0F0dHJWYWx1ZSArICJ9IikoKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIGNvbnNvbGVNZXRob2RzLmVycm9yKCJiYXNpcy1jb25maWc6IGJhc2lzLmpzIGNvbmZpZyBwYXJzZSBmYXVsdDogIiArIGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIHByb2Nlc3NDb25maWcoY29uZmlnKTsKICB9CiAgZnVuY3Rpb24gcHJvY2Vzc0NvbmZpZyhjb25maWcsIHZlcmJvc2UpIHsKICAgIGNvbmZpZyA9IHNsaWNlKGNvbmZpZyk7CiAgICBpZiAoImV4dFByb3RvIiBpbiBjb25maWcpIGNvbnNvbGVNZXRob2RzLndhcm4oImJhc2lzLWNvbmZpZzogYGV4dFByb3RvYCBvcHRpb24gaW4gYmFzaXMtY29uZmlnIGlzIG5vdCBzdXBwb3J0IGFueW1vcmUiKTsKICAgIGlmICgicGF0aCIgaW4gY29uZmlnKSBjb25zb2xlTWV0aG9kcy53YXJuKCJiYXNpcy1jb25maWc6IGBwYXRoYCBvcHRpb24gaW4gYmFzaXMtY29uZmlnIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kdWxlc2AgaW5zdGVhZCIpOwogICAgdmFyIGF1dG9sb2FkID0gW107CiAgICB2YXIgbW9kdWxlcyA9IG1lcmdlKGNvbmZpZy5wYXRoLCBjb25maWcubW9kdWxlcywgewogICAgICBiYXNpczogYmFzaXNGaWxlbmFtZQogICAgfSk7CiAgICBjb25maWcubW9kdWxlcyA9IHt9OwogICAgaWYgKGNvbmZpZy5hdXRvbG9hZCkgewogICAgICB2YXIgbSA9IFN0cmluZyhjb25maWcuYXV0b2xvYWQpLm1hdGNoKC9eKCg/OlteXC9dKlwvKSopKFthLXokX11bYS16MC05JF9dKikoKD86XC5bYS16JF9dW2EtejAtOSRfXSopKikkL2kpOwogICAgICBpZiAobSkgewogICAgICAgIG1vZHVsZXNbbVsyXV0gPSB7CiAgICAgICAgICBhdXRvbG9hZDogdHJ1ZSwKICAgICAgICAgIGZpbGVuYW1lOiBtWzFdICsgbVsyXSArIChtWzNdIHx8ICIuanMiKQogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZU1ldGhvZHMud2FybigiYmFzaXMtY29uZmlnOiB3cm9uZyBgYXV0b2xvYWRgIHZhbHVlIChzZXR0aW5nIGlnbm9yZWQpOiAiICsgY29uZmlnLmF1dG9sb2FkKTsKICAgICAgfQogICAgICBkZWxldGUgY29uZmlnLmF1dG9sb2FkOwogICAgfQogICAgZm9yICh2YXIgbmFtZSBpbiBtb2R1bGVzKSB7CiAgICAgIHZhciBtb2R1bGUgPSBtb2R1bGVzW25hbWVdOwogICAgICBpZiAodHlwZW9mIG1vZHVsZSA9PSAic3RyaW5nIikgbW9kdWxlID0gewogICAgICAgIGZpbGVuYW1lOiBtb2R1bGUucmVwbGFjZSgvXC8kLywgIi8iICsgbmFtZSArICIuanMiKQogICAgICB9OwogICAgICB2YXIgZmlsZW5hbWUgPSBtb2R1bGUuZmlsZW5hbWU7CiAgICAgIHZhciBwYXRoID0gbW9kdWxlLnBhdGg7CiAgICAgIGlmIChmaWxlbmFtZSAmJiAhcGF0aCkgewogICAgICAgIGZpbGVuYW1lID0gcGF0aFV0aWxzLnJlc29sdmUoZmlsZW5hbWUpOwogICAgICAgIHBhdGggPSBmaWxlbmFtZS5zdWJzdHIoMCwgZmlsZW5hbWUubGVuZ3RoIC0gcGF0aFV0aWxzLmV4dG5hbWUoZmlsZW5hbWUpLmxlbmd0aCk7CiAgICAgICAgZmlsZW5hbWUgPSAiLi4vIiArIHBhdGhVdGlscy5iYXNlbmFtZShmaWxlbmFtZSk7CiAgICAgIH0KICAgICAgcGF0aCA9IHBhdGhVdGlscy5yZXNvbHZlKHBhdGgpOwogICAgICBpZiAoIWZpbGVuYW1lICYmIHBhdGgpIHsKICAgICAgICBmaWxlbmFtZSA9IHBhdGhVdGlscy5iYXNlbmFtZShwYXRoKTsKICAgICAgICBwYXRoID0gcGF0aFV0aWxzLmRpcm5hbWUocGF0aCk7CiAgICAgIH0KICAgICAgaWYgKCFwYXRoVXRpbHMuZXh0bmFtZShmaWxlbmFtZSkpIGZpbGVuYW1lICs9ICIuanMiOwogICAgICBmaWxlbmFtZSA9IHBhdGhVdGlscy5yZXNvbHZlKHBhdGgsIGZpbGVuYW1lKTsKICAgICAgY29uZmlnLm1vZHVsZXNbbmFtZV0gPSB7CiAgICAgICAgcGF0aDogcGF0aCwKICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWUKICAgICAgfTsKICAgICAgaWYgKG1vZHVsZS5hdXRvbG9hZCkgewogICAgICAgIGNvbmZpZy5hdXRvbG9hZCA9IGF1dG9sb2FkOwogICAgICAgIGF1dG9sb2FkLnB1c2gobmFtZSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBjb25maWc7CiAgfQogIHZhciBDbGFzcyA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGluc3RhbmNlU2VlZCA9IHsKICAgICAgaWQ6IDEKICAgIH07CiAgICB2YXIgY2xhc3NTZWVkID0gMTsKICAgIHZhciBjbGFzc2VzID0gW107CiAgICB2YXIgU0VMRiA9IHt9OwogICAgZnVuY3Rpb24gaXNDbGFzcyhvYmplY3QpIHsKICAgICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT0gImZ1bmN0aW9uIiAmJiAhIW9iamVjdC5iYXNpc0NsYXNzSWRfOwogICAgfQogICAgZnVuY3Rpb24gaXNTdWJjbGFzc09mKHN1cGVyQ2xhc3MpIHsKICAgICAgdmFyIGN1cnNvciA9IHRoaXM7CiAgICAgIHdoaWxlIChjdXJzb3IgJiYgY3Vyc29yICE9PSBzdXBlckNsYXNzKSBjdXJzb3IgPSBjdXJzb3Iuc3VwZXJDbGFzc187CiAgICAgIHJldHVybiBjdXJzb3IgPT09IHN1cGVyQ2xhc3M7CiAgICB9CiAgICBmdW5jdGlvbiBkZXZWZXJib3NlTmFtZShuYW1lLCBhcmdzLCBmbikgewogICAgICByZXR1cm4gKG5ldyBGdW5jdGlvbihrZXlzKGFyZ3MpLCAncmV0dXJuIHsiJyArIG5hbWUgKyAnIjogJyArIGZuICsgJ1xufVsiJyArIG5hbWUgKyAnIl0nKSkuYXBwbHkobnVsbCwgdmFsdWVzKGFyZ3MpKTsKICAgIH0KICAgIHZhciBUT1NUUklOR19CVUcgPSBmdW5jdGlvbigpIHsKICAgICAgZm9yICh2YXIga2V5IGluIHsKICAgICAgICB0b1N0cmluZzogMQogICAgICB9KSByZXR1cm4gZmFsc2U7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSgpOwogICAgZnVuY3Rpb24gY3JlYXRlQ2xhc3MoU3VwZXJDbGFzcywgZXh0ZW5zaW9ucykgewogICAgICB2YXIgY2xhc3NJZCA9IGNsYXNzU2VlZCsrOwogICAgICBpZiAodHlwZW9mIFN1cGVyQ2xhc3MgIT0gImZ1bmN0aW9uIikgU3VwZXJDbGFzcyA9IEJhc2VDbGFzczsKICAgICAgdmFyIGNsYXNzTmFtZSA9ICIiOwogICAgICBmb3IgKHZhciBpID0gMSwgZXh0ZW5zaW9uOyBleHRlbnNpb24gPSBhcmd1bWVudHNbaV07IGkrKykgaWYgKHR5cGVvZiBleHRlbnNpb24gIT0gImZ1bmN0aW9uIiAmJiBleHRlbnNpb24uY2xhc3NOYW1lKSBjbGFzc05hbWUgPSBleHRlbnNpb24uY2xhc3NOYW1lOwogICAgICBpZiAoIWNsYXNzTmFtZSkgY2xhc3NOYW1lID0gU3VwZXJDbGFzcy5jbGFzc05hbWUgKyAiLl9DbGFzcyIgKyBjbGFzc0lkOwogICAgICB2YXIgTmV3Q2xhc3NQcm90byA9IGZ1bmN0aW9uKCkge307CiAgICAgIE5ld0NsYXNzUHJvdG8gPSBkZXZWZXJib3NlTmFtZShjbGFzc05hbWUsIHt9LCBOZXdDbGFzc1Byb3RvKTsKICAgICAgTmV3Q2xhc3NQcm90by5wcm90b3R5cGUgPSBTdXBlckNsYXNzLnByb3RvdHlwZTsKICAgICAgdmFyIG5ld1Byb3RvID0gbmV3IE5ld0NsYXNzUHJvdG87CiAgICAgIHZhciBuZXdDbGFzc1Byb3BzID0gewogICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLAogICAgICAgIGJhc2lzQ2xhc3NJZF86IGNsYXNzSWQsCiAgICAgICAgc3VwZXJDbGFzc186IFN1cGVyQ2xhc3MsCiAgICAgICAgZXh0ZW5kQ29uc3RydWN0b3JfOiAhIVN1cGVyQ2xhc3MuZXh0ZW5kQ29uc3RydWN0b3JfLAogICAgICAgIGlzU3ViY2xhc3NPZjogaXNTdWJjbGFzc09mLAogICAgICAgIHN1YmNsYXNzOiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiBjcmVhdGVDbGFzcy5hcHBseShudWxsLCBbIG5ld0NsYXNzIF0uY29uY2F0KGFycmF5RnJvbShhcmd1bWVudHMpKSk7CiAgICAgICAgfSwKICAgICAgICBleHRlbmQ6IGV4dGVuZENsYXNzLAogICAgICAgIF9fZXh0ZW5kX186IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUgIT09IFNFTEYgJiYgKHR5cGVvZiB2YWx1ZSA9PSAib2JqZWN0IiB8fCB0eXBlb2YgdmFsdWUgPT0gImZ1bmN0aW9uIiAmJiAhaXNDbGFzcyh2YWx1ZSkpKSByZXR1cm4gQmFzZUNsYXNzLmNyZWF0ZS5jYWxsKG51bGwsIG5ld0NsYXNzLCB2YWx1ZSk7IGVsc2UgcmV0dXJuIHZhbHVlOwogICAgICAgIH0sCiAgICAgICAgcHJvdG90eXBlOiBuZXdQcm90bwogICAgICB9OwogICAgICBmb3IgKHZhciBpID0gMSwgZXh0ZW5zaW9uOyBleHRlbnNpb24gPSBhcmd1bWVudHNbaV07IGkrKykgbmV3Q2xhc3NQcm9wcy5leHRlbmQoZXh0ZW5zaW9uKTsKICAgICAgaWYgKG5ld1Byb3RvLmluaXQgIT09IEJhc2VDbGFzcy5wcm90b3R5cGUuaW5pdCAmJiAhL15mdW5jdGlvblteKF0qXChcKS8udGVzdChuZXdQcm90by5pbml0KSAmJiBuZXdDbGFzc1Byb3BzLmV4dGVuZENvbnN0cnVjdG9yXykgY29uc29sZU1ldGhvZHMud2FybigicHJvYmFibHkgd3JvbmcgZXh0ZW5kQ29uc3RydWN0b3JfIHZhbHVlIGZvciAiICsgbmV3Q2xhc3NQcm9wcy5jbGFzc05hbWUpOwogICAgICB2YXIgbmV3Q2xhc3MgPSBuZXdDbGFzc1Byb3BzLmV4dGVuZENvbnN0cnVjdG9yXyA/IGZ1bmN0aW9uKGV4dGVuZCkgewogICAgICAgIHRoaXMuYmFzaXNPYmplY3RJZCA9IGluc3RhbmNlU2VlZC5pZCsrOwogICAgICAgIHZhciBwcm9wOwogICAgICAgIGZvciAodmFyIGtleSBpbiBleHRlbmQpIHsKICAgICAgICAgIHByb3AgPSB0aGlzW2tleV07CiAgICAgICAgICB0aGlzW2tleV0gPSBwcm9wICYmIHByb3AuX19leHRlbmRfXyA/IHByb3AuX19leHRlbmRfXyhleHRlbmRba2V5XSkgOiBleHRlbmRba2V5XTsKICAgICAgICB9CiAgICAgICAgdGhpcy5pbml0KCk7CiAgICAgICAgdGhpcy5wb3N0SW5pdCgpOwogICAgICB9IDogZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy5iYXNpc09iamVjdElkID0gaW5zdGFuY2VTZWVkLmlkKys7CiAgICAgICAgdGhpcy5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgdGhpcy5wb3N0SW5pdCgpOwogICAgICB9OwogICAgICBuZXdDbGFzcyA9IGRldlZlcmJvc2VOYW1lKGNsYXNzTmFtZSwgewogICAgICAgIGluc3RhbmNlU2VlZDogaW5zdGFuY2VTZWVkCiAgICAgIH0sIG5ld0NsYXNzKTsKICAgICAgbmV3UHJvdG8uY29uc3RydWN0b3IgPSBuZXdDbGFzczsKICAgICAgZm9yICh2YXIga2V5IGluIG5ld1Byb3RvKSBpZiAobmV3UHJvdG9ba2V5XSA9PT0gU0VMRikgbmV3UHJvdG9ba2V5XSA9IG5ld0NsYXNzOwogICAgICBleHRlbmQobmV3Q2xhc3MsIG5ld0NsYXNzUHJvcHMpOwogICAgICBjbGFzc2VzLnB1c2gobmV3Q2xhc3MpOwogICAgICByZXR1cm4gbmV3Q2xhc3M7CiAgICB9CiAgICBmdW5jdGlvbiBleHRlbmRDbGFzcyhzb3VyY2UpIHsKICAgICAgdmFyIHByb3RvID0gdGhpcy5wcm90b3R5cGU7CiAgICAgIGlmICh0eXBlb2Ygc291cmNlID09ICJmdW5jdGlvbiIgJiYgIWlzQ2xhc3Moc291cmNlKSkgc291cmNlID0gc291cmNlKHRoaXMuc3VwZXJDbGFzc18ucHJvdG90eXBlLCBzbGljZShwcm90bykpOwogICAgICBpZiAoc291cmNlLnByb3RvdHlwZSkgc291cmNlID0gc291cmNlLnByb3RvdHlwZTsKICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtrZXldOwogICAgICAgIHZhciBwcm90b1ZhbHVlID0gcHJvdG9ba2V5XTsKICAgICAgICBpZiAoa2V5ID09ICJjbGFzc05hbWUiIHx8IGtleSA9PSAiZXh0ZW5kQ29uc3RydWN0b3JfIikgdGhpc1trZXldID0gdmFsdWU7IGVsc2UgewogICAgICAgICAgaWYgKHByb3RvVmFsdWUgJiYgcHJvdG9WYWx1ZS5fX2V4dGVuZF9fKSBwcm90b1trZXldID0gcHJvdG9WYWx1ZS5fX2V4dGVuZF9fKHZhbHVlKTsgZWxzZSB7CiAgICAgICAgICAgIHByb3RvW2tleV0gPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKFRPU1RSSU5HX0JVRyAmJiBzb3VyY2Vba2V5ID0gInRvU3RyaW5nIl0gIT09IHRvU3RyaW5nKSBwcm90b1trZXldID0gc291cmNlW2tleV07CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgdmFyIEJhc2VDbGFzcyA9IGV4dGVuZChjcmVhdGVDbGFzcywgewogICAgICBjbGFzc05hbWU6ICJiYXNpcy5DbGFzcyIsCiAgICAgIGV4dGVuZENvbnN0cnVjdG9yXzogZmFsc2UsCiAgICAgIHByb3RvdHlwZTogewogICAgICAgIGJhc2lzT2JqZWN0SWQ6IDAsCiAgICAgICAgY29uc3RydWN0b3I6IG51bGwsCiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7fSwKICAgICAgICBwb3N0SW5pdDogZnVuY3Rpb24oKSB7fSwKICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gIltvYmplY3QgIiArICh0aGlzLmNvbnN0cnVjdG9yIHx8IHRoaXMpLmNsYXNzTmFtZSArICJdIjsKICAgICAgICB9LAogICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkgewogICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzKSBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCBwcm9wKSkgdGhpc1twcm9wXSA9IG51bGw7CiAgICAgICAgICB0aGlzLmRlc3Ryb3kgPSAkdW5kZWY7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHZhciBjdXN0b21FeHRlbmRQcm9wZXJ0eSA9IGZ1bmN0aW9uKGV4dGVuc2lvbiwgZm4sIGRldk5hbWUpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBfX2V4dGVuZF9fOiBmdW5jdGlvbihleHRlbnNpb24pIHsKICAgICAgICAgIGlmICghZXh0ZW5zaW9uKSByZXR1cm4gZXh0ZW5zaW9uOwogICAgICAgICAgaWYgKGV4dGVuc2lvbiAmJiBleHRlbnNpb24uX19leHRlbmRfXykgcmV0dXJuIGV4dGVuc2lvbjsKICAgICAgICAgIHZhciBCYXNlID0gZnVuY3Rpb24oKSB7fTsKICAgICAgICAgIEJhc2UgPSBkZXZWZXJib3NlTmFtZShkZXZOYW1lIHx8ICJjdXN0b21FeHRlbmRQcm9wZXJ0eSIsIHt9LCBCYXNlKTsKICAgICAgICAgIEJhc2UucHJvdG90eXBlID0gdGhpczsKICAgICAgICAgIHZhciByZXN1bHQgPSBuZXcgQmFzZTsKICAgICAgICAgIGZuKHJlc3VsdCwgZXh0ZW5zaW9uKTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICB9Ll9fZXh0ZW5kX18oZXh0ZW5zaW9uIHx8IHt9KTsKICAgIH07CiAgICB2YXIgZXh0ZW5zaWJsZVByb3BlcnR5ID0gZnVuY3Rpb24oZXh0ZW5zaW9uKSB7CiAgICAgIHJldHVybiBjdXN0b21FeHRlbmRQcm9wZXJ0eShleHRlbnNpb24sIGV4dGVuZCwgImV4dGVuc2libGVQcm9wZXJ0eSIpOwogICAgfTsKICAgIHZhciBuZXN0ZWRFeHRlbmRQcm9wZXJ0eSA9IGZ1bmN0aW9uKGV4dGVuc2lvbikgewogICAgICByZXR1cm4gY3VzdG9tRXh0ZW5kUHJvcGVydHkoZXh0ZW5zaW9uLCBmdW5jdGlvbihyZXN1bHQsIGV4dGVuc2lvbikgewogICAgICAgIGZvciAodmFyIGtleSBpbiBleHRlbnNpb24pIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdFtrZXldOwogICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZSAmJiB2YWx1ZS5fX2V4dGVuZF9fID8gdmFsdWUuX19leHRlbmRfXyhleHRlbnNpb25ba2V5XSkgOiBleHRlbnNpYmxlUHJvcGVydHkoZXh0ZW5zaW9uW2tleV0pOwogICAgICAgIH0KICAgICAgfSwgIm5lc3RlZEV4dGVuZFByb3BlcnR5Iik7CiAgICB9OwogICAgdmFyIG9uZUZ1bmN0aW9uUHJvcGVydHkgPSBmdW5jdGlvbihmbiwga2V5cykgewogICAgICB2YXIgY3JlYXRlID0gZnVuY3Rpb24oa2V5cykgewogICAgICAgIHZhciByZXN1bHQgPSB7CiAgICAgICAgICBfX2V4dGVuZF9fOiBjcmVhdGUKICAgICAgICB9OwogICAgICAgIGlmIChrZXlzKSB7CiAgICAgICAgICBpZiAoa2V5cy5fX2V4dGVuZF9fKSByZXR1cm4ga2V5czsKICAgICAgICAgIHZhciBDbHMgPSBkZXZWZXJib3NlTmFtZSgib25lRnVuY3Rpb25Qcm9wZXJ0eSIsIHt9LCBmdW5jdGlvbigpIHt9KTsKICAgICAgICAgIHJlc3VsdCA9IG5ldyBDbHM7CiAgICAgICAgICByZXN1bHQuX19leHRlbmRfXyA9IGNyZWF0ZTsKICAgICAgICAgIGZvciAodmFyIGtleSBpbiBrZXlzKSBpZiAoa2V5c1trZXldKSByZXN1bHRba2V5XSA9IGZuOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgICByZXR1cm4gY3JlYXRlKGtleXMgfHwge30pOwogICAgfTsKICAgIHJldHVybiBleHRlbmQoQmFzZUNsYXNzLCB7CiAgICAgIGFsbF86IGNsYXNzZXMsCiAgICAgIFNFTEY6IFNFTEYsCiAgICAgIGNyZWF0ZTogY3JlYXRlQ2xhc3MsCiAgICAgIGlzQ2xhc3M6IGlzQ2xhc3MsCiAgICAgIGN1c3RvbUV4dGVuZFByb3BlcnR5OiBjdXN0b21FeHRlbmRQcm9wZXJ0eSwKICAgICAgZXh0ZW5zaWJsZVByb3BlcnR5OiBleHRlbnNpYmxlUHJvcGVydHksCiAgICAgIG5lc3RlZEV4dGVuZFByb3BlcnR5OiBuZXN0ZWRFeHRlbmRQcm9wZXJ0eSwKICAgICAgb25lRnVuY3Rpb25Qcm9wZXJ0eTogb25lRnVuY3Rpb25Qcm9wZXJ0eQogICAgfSk7CiAgfSgpOwogIHZhciBUb2tlbiA9IENsYXNzKG51bGwsIHsKICAgIGNsYXNzTmFtZTogImJhc2lzLlRva2VuIiwKICAgIHZhbHVlOiBudWxsLAogICAgaGFuZGxlcjogbnVsbCwKICAgIGRlZmVycmVkVG9rZW46IG51bGwsCiAgICBiaW5kaW5nQnJpZGdlOiB7CiAgICAgIGF0dGFjaDogZnVuY3Rpb24oaG9zdCwgZm4sIGNvbnRleHQpIHsKICAgICAgICBob3N0LmF0dGFjaChmbiwgY29udGV4dCk7CiAgICAgIH0sCiAgICAgIGRldGFjaDogZnVuY3Rpb24oaG9zdCwgZm4sIGNvbnRleHQpIHsKICAgICAgICBob3N0LmRldGFjaChmbiwgY29udGV4dCk7CiAgICAgIH0sCiAgICAgIGdldDogZnVuY3Rpb24oaG9zdCkgewogICAgICAgIHJldHVybiBob3N0LmdldCgpOwogICAgICB9CiAgICB9LAogICAgaW5pdDogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlOwogICAgfSwKICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLnZhbHVlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlKSB7CiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlOwogICAgICAgIHRoaXMuYXBwbHkoKTsKICAgICAgfQogICAgfSwKICAgIGF0dGFjaDogZnVuY3Rpb24oZm4sIGNvbnRleHQpIHsKICAgICAgdmFyIGN1cnNvciA9IHRoaXM7CiAgICAgIHdoaWxlIChjdXJzb3IgPSBjdXJzb3IuaGFuZGxlcikgaWYgKGN1cnNvci5mbiA9PT0gZm4gJiYgY3Vyc29yLmNvbnRleHQgPT09IGNvbnRleHQpIGNvbnNvbGVNZXRob2RzLndhcm4oImJhc2lzLlRva2VuI2F0dGFjaDogZHVwbGljYXRlIGZuICYgY29udGV4dCBwYWlyIik7CiAgICAgIHRoaXMuaGFuZGxlciA9IHsKICAgICAgICBmbjogZm4sCiAgICAgICAgY29udGV4dDogY29udGV4dCwKICAgICAgICBoYW5kbGVyOiB0aGlzLmhhbmRsZXIKICAgICAgfTsKICAgIH0sCiAgICBkZXRhY2g6IGZ1bmN0aW9uKGZuLCBjb250ZXh0KSB7CiAgICAgIHZhciBjdXJzb3IgPSB0aGlzOwogICAgICB2YXIgcHJldjsKICAgICAgd2hpbGUgKHByZXYgPSBjdXJzb3IsIGN1cnNvciA9IGN1cnNvci5oYW5kbGVyKSBpZiAoY3Vyc29yLmZuID09PSBmbiAmJiBjdXJzb3IuY29udGV4dCA9PT0gY29udGV4dCkgewogICAgICAgIGN1cnNvci5mbiA9ICR1bmRlZjsKICAgICAgICBwcmV2LmhhbmRsZXIgPSBjdXJzb3IuaGFuZGxlcjsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgY29uc29sZU1ldGhvZHMud2FybigiYmFzaXMuVG9rZW4jZGV0YWNoOiBmbiAmIGNvbnRleHQgcGFpciBub3QgZm91bmQsIG5vdGhpbmcgd2FzIHJlbW92ZWQiKTsKICAgIH0sCiAgICBhcHBseTogZnVuY3Rpb24oKSB7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7CiAgICAgIHZhciBjdXJzb3IgPSB0aGlzOwogICAgICB3aGlsZSAoY3Vyc29yID0gY3Vyc29yLmhhbmRsZXIpIGN1cnNvci5mbi5jYWxsKGN1cnNvci5jb250ZXh0LCB2YWx1ZSk7CiAgICB9LAogICAgZGVmZXJyZWQ6IGZ1bmN0aW9uKCkgewogICAgICB2YXIgdG9rZW4gPSB0aGlzLmRlZmVycmVkVG9rZW47CiAgICAgIGlmICghdG9rZW4pIHsKICAgICAgICB0b2tlbiA9IHRoaXMuZGVmZXJyZWRUb2tlbiA9IG5ldyBEZWZlcnJlZFRva2VuKHRoaXMudmFsdWUpOwogICAgICAgIHRoaXMuYXR0YWNoKHRva2VuLnNldCwgdG9rZW4pOwogICAgICB9CiAgICAgIHJldHVybiB0b2tlbjsKICAgIH0sCiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHsKICAgICAgaWYgKHRoaXMuZGVmZXJyZWRUb2tlbikgewogICAgICAgIHRoaXMuZGVmZXJyZWRUb2tlbi5kZXN0cm95KCk7CiAgICAgICAgdGhpcy5kZWZlcnJlZFRva2VuID0gbnVsbDsKICAgICAgfQogICAgICB0aGlzLmhhbmRsZXIgPSBudWxsOwogICAgICB0aGlzLnZhbHVlID0gbnVsbDsKICAgICAgdGhpcy5hdHRhY2ggPSAkdW5kZWY7CiAgICAgIHRoaXMuZGV0YWNoID0gJHVuZGVmOwogICAgfQogIH0pOwogIHZhciBhd2FpdFRvQXBwbHkgPSBmdW5jdGlvbigpIHsKICAgIHZhciB0b2tlbnMgPSB7fTsKICAgIHZhciB0aW1lcjsKICAgIGZ1bmN0aW9uIGFwcGx5VG9rZW5zKCkgewogICAgICB2YXIgbGlzdCA9IHRva2VuczsKICAgICAgdG9rZW5zID0ge307CiAgICAgIHRpbWVyID0gbnVsbDsKICAgICAgZm9yICh2YXIga2V5IGluIGxpc3QpIGxpc3Rba2V5XS5hcHBseSgpOwogICAgfQogICAgcmV0dXJuIGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgIGlmICh0b2tlbi5iYXNpc09iamVjdElkIGluIHRva2VucykgcmV0dXJuOwogICAgICB0b2tlbnNbdG9rZW4uYmFzaXNPYmplY3RJZF0gPSB0b2tlbjsKICAgICAgaWYgKCF0aW1lcikgc2V0SW1tZWRpYXRlKGFwcGx5VG9rZW5zKTsKICAgIH07CiAgfSgpOwogIHZhciBEZWZlcnJlZFRva2VuID0gVG9rZW4uc3ViY2xhc3MoewogICAgY2xhc3NOYW1lOiAiYmFzaXMuRGVmZXJyZWRUb2tlbiIsCiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIGlmICh0aGlzLnZhbHVlICE9PSB2YWx1ZSkgewogICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTsKICAgICAgICBhd2FpdFRvQXBwbHkodGhpcyk7CiAgICAgIH0KICAgIH0sCiAgICBkZWZlcnJlZDogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogIH0pOwogIHZhciByZXNvdXJjZXMgPSB7fTsKICB2YXIgcmVzb3VyY2VDb250ZW50Q2FjaGUgPSB7fTsKICB2YXIgcmVzb3VyY2VQYXRjaCA9IHt9OwogIHZhciB2aXJ0dWFsUmVzb3VyY2VTZWVkID0gMTsKICB2YXIgcmVzb3VyY2VSZXNvbHZpbmdTdGFjayA9IFtdOwogIHZhciByZXF1aXJlczsKICAoZnVuY3Rpb24oKSB7CiAgICB2YXIgbWFwID0gdHlwZW9mIF9fcmVzb3VyY2VzX18gIT0gInVuZGVmaW5lZCIgPyBfX3Jlc291cmNlc19fIDogbnVsbDsKICAgIGlmIChtYXApIHsKICAgICAgZm9yICh2YXIga2V5IGluIG1hcCkgcmVzb3VyY2VDb250ZW50Q2FjaGVbcGF0aFV0aWxzLnJlc29sdmUoa2V5KV0gPSBtYXBba2V5XTsKICAgIH0KICB9KSgpOwogIGZ1bmN0aW9uIGFwcGx5UmVzb3VyY2VQYXRjaGVzKHJlc291cmNlKSB7CiAgICB2YXIgcGF0Y2hlcyA9IHJlc291cmNlUGF0Y2hbcmVzb3VyY2UudXJsXTsKICAgIGlmIChwYXRjaGVzKSBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGNoZXMubGVuZ3RoOyBpKyspIHsKICAgICAgY29uc29sZU1ldGhvZHMuaW5mbygiQXBwbHkgcGF0Y2ggZm9yICIgKyByZXNvdXJjZS51cmwpOwogICAgICBwYXRjaGVzW2ldKHJlc291cmNlLmdldCgpLCByZXNvdXJjZS51cmwpOwogICAgfQogIH0KICB2YXIgZ2V0UmVzb3VyY2VDb250ZW50ID0gZnVuY3Rpb24odXJsLCBpZ25vcmVDYWNoZSkgewogICAgaWYgKGlnbm9yZUNhY2hlIHx8ICFyZXNvdXJjZUNvbnRlbnRDYWNoZS5oYXNPd25Qcm9wZXJ0eSh1cmwpKSB7CiAgICAgIHZhciByZXNvdXJjZUNvbnRlbnQgPSAiIjsKICAgICAgaWYgKCFOT0RFX0VOVikgewogICAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3Q7CiAgICAgICAgcmVxLm9wZW4oIkdFVCIsIHVybCwgZmFsc2UpOwogICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCJJZi1Nb2RpZmllZC1TaW5jZSIsIChuZXcgRGF0ZSgwKSkudG9HTVRTdHJpbmcoKSk7CiAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoIlgtQmFzaXMtUmVzb3VyY2UiLCAxKTsKICAgICAgICByZXEuc2VuZCgiIik7CiAgICAgICAgaWYgKHJlcS5zdGF0dXMgPj0gMjAwICYmIHJlcS5zdGF0dXMgPCA0MDApIHJlc291cmNlQ29udGVudCA9IHJlcS5yZXNwb25zZVRleHQ7IGVsc2UgewogICAgICAgICAgY29uc29sZU1ldGhvZHMuZXJyb3IoImJhc2lzLnJlc291cmNlOiBVbmFibGUgdG8gbG9hZCAiICsgdXJsICsgIiAoc3RhdHVzIGNvZGUgIiArIHJlcS5zdGF0dXMgKyAiKSIpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0cnkgewogICAgICAgICAgcmVzb3VyY2VDb250ZW50ID0gcHJvY2Vzcy5iYXNpc2pzUmVhZEZpbGUgPyBwcm9jZXNzLmJhc2lzanNSZWFkRmlsZSh1cmwpIDogcmVxdWlyZSgiZnMiKS5yZWFkRmlsZVN5bmModXJsLCAidXRmLTgiKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25zb2xlTWV0aG9kcy5lcnJvcigiYmFzaXMucmVzb3VyY2U6IFVuYWJsZSB0byBsb2FkICIgKyB1cmwsIGUpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXNvdXJjZUNvbnRlbnRDYWNoZVt1cmxdID0gcmVzb3VyY2VDb250ZW50OwogICAgfQogICAgcmV0dXJuIHJlc291cmNlQ29udGVudENhY2hlW3VybF07CiAgfTsKICB2YXIgY3JlYXRlUmVzb3VyY2UgPSBmdW5jdGlvbihyZXNvdXJjZVVybCwgY29udGVudCkgewogICAgdmFyIGNvbnRlbnRUeXBlID0gcGF0aFV0aWxzLmV4dG5hbWUocmVzb3VyY2VVcmwpOwogICAgdmFyIGNvbnRlbnRXcmFwcGVyID0gZ2V0UmVzb3VyY2UuZXh0ZW5zaW9uc1tjb250ZW50VHlwZV07CiAgICB2YXIgaXNWaXJ0dWFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDE7CiAgICB2YXIgcmVzb2x2ZWQgPSBmYWxzZTsKICAgIHZhciB3cmFwcGVkID0gZmFsc2U7CiAgICB2YXIgd3JhcHBlZENvbnRlbnQ7CiAgICBpZiAoaXNWaXJ0dWFsKSByZXNvdXJjZVVybCArPSAiI3ZpcnR1YWwiOwogICAgdmFyIHJlc291cmNlID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChyZXNvbHZlZCkgcmV0dXJuIGNvbnRlbnQ7CiAgICAgIHZhciB1cmxDb250ZW50ID0gaXNWaXJ0dWFsID8gY29udGVudCA6IGdldFJlc291cmNlQ29udGVudChyZXNvdXJjZVVybCk7CiAgICAgIHZhciBpZHggPSByZXNvdXJjZVJlc29sdmluZ1N0YWNrLmluZGV4T2YocmVzb3VyY2VVcmwpOwogICAgICBpZiAoaWR4ICE9IC0xKSBjb25zb2xlTWV0aG9kcy53YXJuKCJiYXNpcy5yZXNvdXJjZSByZWN1cnNpb246IiwgcmVzb3VyY2VSZXNvbHZpbmdTdGFjay5zbGljZShpZHgpLmNvbmNhdChyZXNvdXJjZVVybCkubWFwKHBhdGhVdGlscy5yZWxhdGl2ZSwgcGF0aFV0aWxzKS5qb2luKCIgLT4gIikpOwogICAgICByZXNvdXJjZVJlc29sdmluZ1N0YWNrLnB1c2gocmVzb3VyY2VVcmwpOwogICAgICBpZiAoY29udGVudFdyYXBwZXIpIHsKICAgICAgICBpZiAoIXdyYXBwZWQpIHsKICAgICAgICAgIHdyYXBwZWQgPSB0cnVlOwogICAgICAgICAgY29udGVudCA9IGNvbnRlbnRXcmFwcGVyKHVybENvbnRlbnQsIHJlc291cmNlVXJsKTsKICAgICAgICAgIHdyYXBwZWRDb250ZW50ID0gdXJsQ29udGVudDsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29udGVudCA9IHVybENvbnRlbnQ7CiAgICAgIH0KICAgICAgcmVzb2x2ZWQgPSB0cnVlOwogICAgICBhcHBseVJlc291cmNlUGF0Y2hlcyhyZXNvdXJjZSk7CiAgICAgIHJlc291cmNlLmFwcGx5KCk7CiAgICAgIHJlc291cmNlUmVzb2x2aW5nU3RhY2sucG9wKCk7CiAgICAgIHJldHVybiBjb250ZW50OwogICAgfTsKICAgIGV4dGVuZChyZXNvdXJjZSwgZXh0ZW5kKG5ldyBUb2tlbiwgewogICAgICB1cmw6IHJlc291cmNlVXJsLAogICAgICB0eXBlOiBjb250ZW50VHlwZSwKICAgICAgdmlydHVhbDogaXNWaXJ0dWFsLAogICAgICBmZXRjaDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHJlc291cmNlKCk7CiAgICAgIH0sCiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gIltiYXNpcy5yZXNvdXJjZSAiICsgcmVzb3VyY2VVcmwgKyAiXSI7CiAgICAgIH0sCiAgICAgIGlzUmVzb2x2ZWQ6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiByZXNvbHZlZDsKICAgICAgfSwKICAgICAgaGFzQ2hhbmdlczogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGNvbnRlbnRXcmFwcGVyID8gcmVzb3VyY2VDb250ZW50Q2FjaGVbcmVzb3VyY2VVcmxdICE9PSB3cmFwcGVkQ29udGVudCA6IGZhbHNlOwogICAgICB9LAogICAgICB1cGRhdGU6IGZ1bmN0aW9uKG5ld0NvbnRlbnQpIHsKICAgICAgICBpZiAoIXJlc29sdmVkIHx8IGlzVmlydHVhbCB8fCBuZXdDb250ZW50ICE9IHJlc291cmNlQ29udGVudENhY2hlW3Jlc291cmNlVXJsXSkgewogICAgICAgICAgaWYgKCFpc1ZpcnR1YWwpIHJlc291cmNlQ29udGVudENhY2hlW3Jlc291cmNlVXJsXSA9IG5ld0NvbnRlbnQ7CiAgICAgICAgICBpZiAoY29udGVudFdyYXBwZXIpIHsKICAgICAgICAgICAgaWYgKCF3cmFwcGVkICYmIGlzVmlydHVhbCkgY29udGVudCA9IG5ld0NvbnRlbnQ7CiAgICAgICAgICAgIGlmICh3cmFwcGVkICYmICFjb250ZW50V3JhcHBlci5wZXJtYW5lbnQpIHsKICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudFdyYXBwZXIobmV3Q29udGVudCwgcmVzb3VyY2VVcmwsIGNvbnRlbnQpOwogICAgICAgICAgICAgIGFwcGx5UmVzb3VyY2VQYXRjaGVzKHJlc291cmNlKTsKICAgICAgICAgICAgICByZXNvdXJjZS5hcHBseSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb250ZW50ID0gbmV3Q29udGVudDsKICAgICAgICAgICAgcmVzb2x2ZWQgPSB0cnVlOwogICAgICAgICAgICBhcHBseVJlc291cmNlUGF0Y2hlcyhyZXNvdXJjZSk7CiAgICAgICAgICAgIHJlc291cmNlLmFwcGx5KCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICByZWxvYWQ6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChpc1ZpcnR1YWwpIHJldHVybjsKICAgICAgICB2YXIgb2xkQ29udGVudCA9IHJlc291cmNlQ29udGVudENhY2hlW3Jlc291cmNlVXJsXTsKICAgICAgICB2YXIgbmV3Q29udGVudCA9IGdldFJlc291cmNlQ29udGVudChyZXNvdXJjZVVybCwgdHJ1ZSk7CiAgICAgICAgaWYgKG5ld0NvbnRlbnQgIT0gb2xkQ29udGVudCkgewogICAgICAgICAgcmVzb2x2ZWQgPSBmYWxzZTsKICAgICAgICAgIHJlc291cmNlLnVwZGF0ZShuZXdDb250ZW50KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGdldDogZnVuY3Rpb24oc291cmNlKSB7CiAgICAgICAgaWYgKGlzVmlydHVhbCkgaWYgKHNvdXJjZSkgcmV0dXJuIGNvbnRlbnRXcmFwcGVyID8gd3JhcHBlZENvbnRlbnQgOiBjb250ZW50OwogICAgICAgIHJldHVybiBzb3VyY2UgPyBnZXRSZXNvdXJjZUNvbnRlbnQocmVzb3VyY2VVcmwpIDogcmVzb3VyY2UoKTsKICAgICAgfSwKICAgICAgcmVhZHk6IGZ1bmN0aW9uKGZuLCBjb250ZXh0KSB7CiAgICAgICAgaWYgKHJlc29sdmVkKSB7CiAgICAgICAgICBmbi5jYWxsKGNvbnRleHQsIHJlc291cmNlKCkpOwogICAgICAgICAgaWYgKGNvbnRlbnRXcmFwcGVyICYmIGNvbnRlbnRXcmFwcGVyLnBlcm1hbmVudCkgcmV0dXJuOwogICAgICAgIH0KICAgICAgICByZXNvdXJjZS5hdHRhY2goZm4sIGNvbnRleHQpOwogICAgICAgIHJldHVybiByZXNvdXJjZTsKICAgICAgfQogICAgfSkpOwogICAgcmVzb3VyY2VzW3Jlc291cmNlVXJsXSA9IHJlc291cmNlOwogICAgcmV0dXJuIHJlc291cmNlOwogIH07CiAgdmFyIGdldFJlc291cmNlID0gZnVuY3Rpb24ocmVzb3VyY2VVcmwpIHsKICAgIHZhciByZXNvdXJjZSA9IHJlc291cmNlc1tyZXNvdXJjZVVybF07CiAgICBpZiAocmVzb3VyY2UpIHJldHVybiByZXNvdXJjZTsKICAgIGlmICghL14oXC5cL3xcLlwufFwvKS8udGVzdChyZXNvdXJjZVVybCkpIGNvbnNvbGVNZXRob2RzLndhcm4oIkJhZCB1c2FnZTogYmFzaXMucmVzb3VyY2UoJyIgKyByZXNvdXJjZVVybCArICInKS5cbkZpbGVuYW1lcyBzaG91bGQgc3RhcnRzIHdpdGggYC4vYCwgYC4uYCBvciBgL2AuIE90aGVyd2lzZSBpdCB3aWxsIHRyZWF0cyBhcyBzcGVjaWFsIHJlZmVyZW5jZSBpbiBuZXh0IG1pbm9yIHJlbGVhc2UuIik7CiAgICByZXNvdXJjZVVybCA9IHBhdGhVdGlscy5yZXNvbHZlKHJlc291cmNlVXJsKTsKICAgIHJlc291cmNlID0gcmVzb3VyY2VzW3Jlc291cmNlVXJsXTsKICAgIHJldHVybiByZXNvdXJjZSB8fCBjcmVhdGVSZXNvdXJjZShyZXNvdXJjZVVybCk7CiAgfTsKICBleHRlbmQoZ2V0UmVzb3VyY2UsIHsKICAgIGlzUmVzb3VyY2U6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiB2YWx1ZSA/IHJlc291cmNlc1t2YWx1ZS51cmxdID09PSB2YWx1ZSA6IGZhbHNlOwogICAgfSwKICAgIGlzUmVzb2x2ZWQ6IGZ1bmN0aW9uKHJlc291cmNlVXJsKSB7CiAgICAgIHZhciByZXNvdXJjZSA9IGdldFJlc291cmNlLmdldChyZXNvdXJjZVVybCk7CiAgICAgIHJldHVybiByZXNvdXJjZSA/IHJlc291cmNlLmlzUmVzb2x2ZWQoKSA6IGZhbHNlOwogICAgfSwKICAgIGV4aXN0czogZnVuY3Rpb24ocmVzb3VyY2VVcmwpIHsKICAgICAgaWYgKCEvXihcLlwvfFwuXC58XC8pLy50ZXN0KHJlc291cmNlVXJsKSkgY29uc29sZU1ldGhvZHMud2FybigiQmFkIHVzYWdlOiBiYXNpcy5yZXNvdXJjZS5leGlzdHMoJyIgKyByZXNvdXJjZVVybCArICInKS5cbkZpbGVuYW1lcyBzaG91bGQgc3RhcnRzIHdpdGggYC4vYCwgYC4uYCBvciBgL2AuIE90aGVyd2lzZSBpdCB3aWxsIHRyZWF0cyBhcyBzcGVjaWFsIHJlZmVyZW5jZSBpbiBuZXh0IG1pbm9yIHJlbGVhc2UuIik7CiAgICAgIHJldHVybiByZXNvdXJjZXMuaGFzT3duUHJvcGVydHkocGF0aFV0aWxzLnJlc29sdmUocmVzb3VyY2VVcmwpKTsKICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uKHJlc291cmNlVXJsKSB7CiAgICAgIGlmICghL14oXC5cL3xcLlwufFwvKS8udGVzdChyZXNvdXJjZVVybCkpIGNvbnNvbGVNZXRob2RzLndhcm4oIkJhZCB1c2FnZTogYmFzaXMucmVzb3VyY2UuZ2V0KCciICsgcmVzb3VyY2VVcmwgKyAiJykuXG5GaWxlbmFtZXMgc2hvdWxkIHN0YXJ0cyB3aXRoIGAuL2AsIGAuLmAgb3IgYC9gLiBPdGhlcndpc2UgaXQgd2lsbCB0cmVhdHMgYXMgc3BlY2lhbCByZWZlcmVuY2UgaW4gbmV4dCBtaW5vciByZWxlYXNlLiIpOwogICAgICByZXNvdXJjZVVybCA9IHBhdGhVdGlscy5yZXNvbHZlKHJlc291cmNlVXJsKTsKICAgICAgaWYgKCFnZXRSZXNvdXJjZS5leGlzdHMocmVzb3VyY2VVcmwpKSByZXR1cm4gbnVsbDsKICAgICAgcmV0dXJuIGdldFJlc291cmNlKHJlc291cmNlVXJsKTsKICAgIH0sCiAgICBnZXRGaWxlczogZnVuY3Rpb24oY2FjaGUpIHsKICAgICAgcmV0dXJuIGtleXMoY2FjaGUgPyByZXNvdXJjZUNvbnRlbnRDYWNoZSA6IHJlc291cmNlcykubWFwKHBhdGhVdGlscy5yZWxhdGl2ZSk7CiAgICB9LAogICAgdmlydHVhbDogZnVuY3Rpb24odHlwZSwgY29udGVudCwgb3duZXJVcmwpIHsKICAgICAgcmV0dXJuIGNyZWF0ZVJlc291cmNlKChvd25lclVybCA/IG93bmVyVXJsICsgIjoiIDogcGF0aFV0aWxzLm5vcm1hbGl6ZShwYXRoVXRpbHMuYmFzZVVSSSA9PSAiLyIgPyAiIiA6IHBhdGhVdGlscy5iYXNlVVJJKSArICIvIikgKyAidmlydHVhbC1yZXNvdXJjZSIgKyB2aXJ0dWFsUmVzb3VyY2VTZWVkKysgKyAiLiIgKyB0eXBlLCBjb250ZW50KTsKICAgIH0sCiAgICBleHRlbnNpb25zOiB7CiAgICAgICIuanMiOiBleHRlbmQoZnVuY3Rpb24oY29udGVudCwgZmlsZW5hbWUpIHsKICAgICAgICB2YXIgbmFtZXNwYWNlID0gZmlsZW5hbWUybmFtZXNwYWNlW2ZpbGVuYW1lXTsKICAgICAgICBpZiAoIW5hbWVzcGFjZSkgewogICAgICAgICAgdmFyIGltcGxpY2l0TmFtZXNwYWNlID0gdHJ1ZTsKICAgICAgICAgIHZhciByZXNvbHZlZEZpbGVuYW1lID0gcGF0aFV0aWxzLmRpcm5hbWUoZmlsZW5hbWUpICsgIi8iICsgcGF0aFV0aWxzLmJhc2VuYW1lKGZpbGVuYW1lLCBwYXRoVXRpbHMuZXh0bmFtZShmaWxlbmFtZSkpOwogICAgICAgICAgZm9yICh2YXIgbnMgaW4gbnNSb290UGF0aCkgewogICAgICAgICAgICB2YXIgcGF0aCA9IG5zUm9vdFBhdGhbbnNdICsgbnMgKyAiLyI7CiAgICAgICAgICAgIGlmIChyZXNvbHZlZEZpbGVuYW1lLnN1YnN0cigwLCBwYXRoLmxlbmd0aCkgPT0gcGF0aCkgewogICAgICAgICAgICAgIGltcGxpY2l0TmFtZXNwYWNlID0gZmFsc2U7CiAgICAgICAgICAgICAgcmVzb2x2ZWRGaWxlbmFtZSA9IHJlc29sdmVkRmlsZW5hbWUuc3Vic3RyKG5zUm9vdFBhdGhbbnNdLmxlbmd0aCk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIG5hbWVzcGFjZSA9IHJlc29sdmVkRmlsZW5hbWUucmVwbGFjZSgvXC4vZywgIl8iKS5yZXBsYWNlKC9eXC8vZywgIiIpLnJlcGxhY2UoL1wvL2csICIuIik7CiAgICAgICAgICBpZiAoaW1wbGljaXROYW1lc3BhY2UpIG5hbWVzcGFjZSA9ICJpbXBsaWNpdC4iICsgbmFtZXNwYWNlOwogICAgICAgIH0KICAgICAgICBpZiAocmVxdWlyZXMpIGFycmF5RnVuY3Rpb25zLmFkZChyZXF1aXJlcywgbmFtZXNwYWNlKTsKICAgICAgICBpZiAoIW5hbWVzcGFjZXNbbmFtZXNwYWNlXSkgewogICAgICAgICAgdmFyIG5zID0gZ2V0TmFtZXNwYWNlKG5hbWVzcGFjZSk7CiAgICAgICAgICB2YXIgc2F2ZWRSZXF1aXJlcyA9IHJlcXVpcmVzOwogICAgICAgICAgcmVxdWlyZXMgPSBbXTsKICAgICAgICAgIG5zLmV4cG9ydHMgPSBydW5TY3JpcHRJbkNvbnRleHQoewogICAgICAgICAgICBwYXRoOiBucy5wYXRoLAogICAgICAgICAgICBleHBvcnRzOiBucy5leHBvcnRzCiAgICAgICAgICB9LCBmaWxlbmFtZSwgY29udGVudCkuZXhwb3J0czsKICAgICAgICAgIGlmIChucy5leHBvcnRzICYmIG5zLmV4cG9ydHMuY29uc3RydWN0b3IgPT09IE9iamVjdCkgY29tcGxldGUobnMsIG5zLmV4cG9ydHMpOwogICAgICAgICAgbnMuZmlsZW5hbWVfID0gZmlsZW5hbWU7CiAgICAgICAgICBucy5zb3VyY2VfID0gY29udGVudDsKICAgICAgICAgIG5zLnJlcXVpcmVzXyA9IHJlcXVpcmVzOwogICAgICAgICAgcmVxdWlyZXMgPSBzYXZlZFJlcXVpcmVzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbmFtZXNwYWNlc1tuYW1lc3BhY2VdLmV4cG9ydHM7CiAgICAgIH0sIHsKICAgICAgICBwZXJtYW5lbnQ6IHRydWUKICAgICAgfSksCiAgICAgICIuY3NzIjogZnVuY3Rpb24oY29udGVudCwgdXJsLCBjc3NSZXNvdXJjZSkgewogICAgICAgIGlmICghY3NzUmVzb3VyY2UpIGNzc1Jlc291cmNlID0gbmV3IENzc1Jlc291cmNlKHVybCk7CiAgICAgICAgY3NzUmVzb3VyY2UudXBkYXRlQ3NzVGV4dChjb250ZW50KTsKICAgICAgICByZXR1cm4gY3NzUmVzb3VyY2U7CiAgICAgIH0sCiAgICAgICIuanNvbiI6IGZ1bmN0aW9uKGNvbnRlbnQsIHVybCkgewogICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PSAib2JqZWN0IikgcmV0dXJuIGNvbnRlbnQ7CiAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICB0cnkgewogICAgICAgICAgY29udGVudCA9IFN0cmluZyhjb250ZW50KTsKICAgICAgICAgIHJlc3VsdCA9IGJhc2lzLmpzb24ucGFyc2UoY29udGVudCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZU1ldGhvZHMud2FybigiYmFzaXMucmVzb3VyY2U6IENhbid0IHBhcnNlIEpTT04gZnJvbSAiICsgdXJsLCB7CiAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICBjb250ZW50OiBjb250ZW50CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdCB8fCBudWxsOwogICAgICB9CiAgICB9CiAgfSk7CiAgZnVuY3Rpb24gY29tcGlsZUZ1bmN0aW9uKHNvdXJjZVVSTCwgYXJncywgYm9keSkgewogICAgdHJ5IHsKICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihhcmdzLCBib2R5ICsgIlxuXG4vLyMgc291cmNlVVJMPSIgKyBwYXRoVXRpbHMub3JpZ2luICsgc291cmNlVVJMKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgaWYgKGRvY3VtZW50ICYmICJsaW5lIiBpbiBlID09IGZhbHNlICYmICJhZGRFdmVudExpc3RlbmVyIiBpbiBnbG9iYWwpIHsKICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBmdW5jdGlvbiBvbmVycm9yKGV2ZW50KSB7CiAgICAgICAgICBpZiAoZXZlbnQuZmlsZW5hbWUgPT0gcGF0aFV0aWxzLm9yaWdpbiArIHNvdXJjZVVSTCkgewogICAgICAgICAgICBnbG9iYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBvbmVycm9yKTsKICAgICAgICAgICAgY29uc29sZU1ldGhvZHMuZXJyb3IoIkNvbXBpbGF0aW9uIGVycm9yIGF0ICIgKyBldmVudC5maWxlbmFtZSArICI6IiArIGV2ZW50LmxpbmVubyArICI6ICIgKyBlKTsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICAgICAgc2NyaXB0LnNyYyA9IHNvdXJjZVVSTDsKICAgICAgICBzY3JpcHQuYXN5bmMgPSBmYWxzZTsKICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZChzY3JpcHQpOwogICAgICB9CiAgICAgIGNvbnNvbGVNZXRob2RzLmVycm9yKCJDb21waWxhdGlvbiBlcnJvciBhdCAiICsgc291cmNlVVJMICsgKCJsaW5lIiBpbiBlID8gIjoiICsgKGUubGluZSAtIDEpIDogIiIpICsgIjogIiArIGUpOwogICAgfQogIH0KICB2YXIgcnVuU2NyaXB0SW5Db250ZXh0ID0gZnVuY3Rpb24oY29udGV4dCwgc291cmNlVVJMLCBzb3VyY2VDb2RlKSB7CiAgICB2YXIgYmFzZVVSTCA9IHBhdGhVdGlscy5kaXJuYW1lKHNvdXJjZVVSTCkgKyAiLyI7CiAgICB2YXIgY29tcGlsZWRTb3VyY2VDb2RlID0gc291cmNlQ29kZTsKICAgIGlmICghY29udGV4dC5leHBvcnRzKSBjb250ZXh0LmV4cG9ydHMgPSB7fTsKICAgIGlmICh0eXBlb2YgY29tcGlsZWRTb3VyY2VDb2RlICE9ICJmdW5jdGlvbiIpIGNvbXBpbGVkU291cmNlQ29kZSA9IGNvbXBpbGVGdW5jdGlvbihzb3VyY2VVUkwsIFsgImV4cG9ydHMiLCAibW9kdWxlIiwgImJhc2lzIiwgImdsb2JhbCIsICJfX2ZpbGVuYW1lIiwgIl9fZGlybmFtZSIsICJyZXNvdXJjZSIsICJyZXF1aXJlIiBdLCAnInVzZSBzdHJpY3QiO1xuJyArIHNvdXJjZUNvZGUpOwogICAgaWYgKHR5cGVvZiBjb21waWxlZFNvdXJjZUNvZGUgPT0gImZ1bmN0aW9uIikgY29tcGlsZWRTb3VyY2VDb2RlLmNhbGwoY29udGV4dC5leHBvcnRzLCBjb250ZXh0LmV4cG9ydHMsIGNvbnRleHQsIGJhc2lzLCBnbG9iYWwsIHNvdXJjZVVSTCwgYmFzZVVSTCwgZnVuY3Rpb24ocmVsYXRpdmVQYXRoKSB7CiAgICAgIGlmICghL14oXC5cL3xcLlwufFwvKS8udGVzdChyZWxhdGl2ZVBhdGgpKSBjb25zb2xlTWV0aG9kcy53YXJuKCJCYWQgdXNhZ2U6IHJlc291cmNlKCciICsgcmVsYXRpdmVQYXRoICsgIicpLlxuRmlsZW5hbWVzIHNob3VsZCBzdGFydHMgd2l0aCBgLi9gLCBgLi5gIG9yIGAvYC4gT3RoZXJ3aXNlIGl0IHdpbGwgdHJlYXRzIGFzIHNwZWNpYWwgcmVmZXJlbmNlIGluIG5leHQgbWlub3IgcmVsZWFzZS4iKTsKICAgICAgcmV0dXJuIGdldFJlc291cmNlKHBhdGhVdGlscy5yZXNvbHZlKGJhc2VVUkwsIHJlbGF0aXZlUGF0aCkpOwogICAgfSwgZnVuY3Rpb24ocmVsYXRpdmVQYXRoLCBiYXNlKSB7CiAgICAgIHJldHVybiByZXF1aXJlTmFtZXNwYWNlKHJlbGF0aXZlUGF0aCwgYmFzZSB8fCBiYXNlVVJMKTsKICAgIH0pOwogICAgcmV0dXJuIGNvbnRleHQ7CiAgfTsKICB2YXIgbmFtZXNwYWNlcyA9IHt9OwogIHZhciBuYW1lc3BhY2UyZmlsZW5hbWUgPSB7fTsKICB2YXIgZmlsZW5hbWUybmFtZXNwYWNlID0ge307CiAgdmFyIG5zUm9vdFBhdGggPSB7fTsKICBpdGVyYXRlKGNvbmZpZy5tb2R1bGVzLCBmdW5jdGlvbihuYW1lLCBtb2R1bGUpIHsKICAgIG5zUm9vdFBhdGhbbmFtZV0gPSBtb2R1bGUucGF0aCArICIvIjsKICAgIG5hbWVzcGFjZTJmaWxlbmFtZVtuYW1lXSA9IG1vZHVsZS5maWxlbmFtZTsKICAgIGZpbGVuYW1lMm5hbWVzcGFjZVttb2R1bGUuZmlsZW5hbWVdID0gbmFtZTsKICB9KTsKICAoZnVuY3Rpb24obWFwKSB7CiAgICB2YXIgbWFwID0gdHlwZW9mIF9fbmFtZXNwYWNlX21hcF9fICE9ICJ1bmRlZmluZWQiID8gX19uYW1lc3BhY2VfbWFwX18gOiBudWxsOwogICAgaWYgKG1hcCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSB7CiAgICAgICAgdmFyIGZpbGVuYW1lID0gcGF0aFV0aWxzLnJlc29sdmUoa2V5KTsKICAgICAgICB2YXIgbmFtZXNwYWNlID0gbWFwW2tleV07CiAgICAgICAgZmlsZW5hbWUybmFtZXNwYWNlW2ZpbGVuYW1lXSA9IG5hbWVzcGFjZTsKICAgICAgICBuYW1lc3BhY2UyZmlsZW5hbWVbbmFtZXNwYWNlXSA9IGZpbGVuYW1lOwogICAgICB9CiAgICB9CiAgfSkoKTsKICB2YXIgTmFtZXNwYWNlID0gQ2xhc3MobnVsbCwgewogICAgY2xhc3NOYW1lOiAiYmFzaXMuTmFtZXNwYWNlIiwKICAgIGluaXQ6IGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgdGhpcy5leHBvcnRzID0gewogICAgICAgIHBhdGg6IHRoaXMubmFtZQogICAgICB9OwogICAgfSwKICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuICJbYmFzaXMubmFtZXNwYWNlICIgKyB0aGlzLnBhdGggKyAiXSI7CiAgICB9LAogICAgZXh0ZW5kOiBmdW5jdGlvbihuYW1lcykgewogICAgICBleHRlbmQodGhpcy5leHBvcnRzLCBuYW1lcyk7CiAgICAgIHJldHVybiBjb21wbGV0ZSh0aGlzLCBuYW1lcyk7CiAgICB9CiAgfSk7CiAgZnVuY3Rpb24gcmVzb2x2ZU5TRmlsZW5hbWUobmFtZXNwYWNlKSB7CiAgICBpZiAobmFtZXNwYWNlIGluIG5hbWVzcGFjZTJmaWxlbmFtZSA9PSBmYWxzZSkgewogICAgICB2YXIgcGFydHMgPSBuYW1lc3BhY2Uuc3BsaXQoIi4iKTsKICAgICAgdmFyIG5hbWVzcGFjZVJvb3QgPSBwYXJ0cy5zaGlmdCgpOwogICAgICB2YXIgZmlsZW5hbWUgPSBwYXJ0cy5qb2luKCIvIikgKyAiLmpzIjsKICAgICAgaWYgKG5hbWVzcGFjZVJvb3QgaW4gbnNSb290UGF0aCA9PSBmYWxzZSkgbnNSb290UGF0aFtuYW1lc3BhY2VSb290XSA9IHBhdGhVdGlscy5iYXNlVVJJICsgbmFtZXNwYWNlUm9vdCArICIvIjsKICAgICAgaWYgKG5hbWVzcGFjZVJvb3QgPT0gbmFtZXNwYWNlKSBmaWxlbmFtZSA9IG5zUm9vdFBhdGhbbmFtZXNwYWNlUm9vdF0ucmVwbGFjZSgvXC8kLywgIiIpICsgIi5qcyI7IGVsc2UgZmlsZW5hbWUgPSBuc1Jvb3RQYXRoW25hbWVzcGFjZVJvb3RdICsgZmlsZW5hbWU7CiAgICAgIG5hbWVzcGFjZTJmaWxlbmFtZVtuYW1lc3BhY2VdID0gZmlsZW5hbWU7CiAgICAgIGZpbGVuYW1lMm5hbWVzcGFjZVtmaWxlbmFtZV0gPSBuYW1lc3BhY2U7CiAgICB9CiAgICByZXR1cm4gbmFtZXNwYWNlMmZpbGVuYW1lW25hbWVzcGFjZV07CiAgfQogIGZ1bmN0aW9uIGdldFJvb3ROYW1lc3BhY2UobmFtZSkgewogICAgdmFyIG5hbWVzcGFjZSA9IG5hbWVzcGFjZXNbbmFtZV07CiAgICBpZiAoIW5hbWVzcGFjZSkgewogICAgICBuYW1lc3BhY2UgPSBuYW1lc3BhY2VzW25hbWVdID0gbmV3IE5hbWVzcGFjZShuYW1lKTsKICAgICAgbmFtZXNwYWNlLm5hbWVzcGFjZXNfID0ge307CiAgICAgIG5hbWVzcGFjZS5uYW1lc3BhY2VzX1tuYW1lXSA9IG5hbWVzcGFjZTsKICAgICAgaWYgKCFjb25maWcubm9Db25mbGljdCkgZ2xvYmFsW25hbWVdID0gbmFtZXNwYWNlOwogICAgfQogICAgaWYgKG5hbWUgPT0gInRlbXBsYXRlcyIgJiYgIXRlbXBsYXRlcykgdGVtcGxhdGVzID0gbmFtZXNwYWNlc1tuYW1lXTsKICAgIHJldHVybiBuYW1lc3BhY2U7CiAgfQogIGZ1bmN0aW9uIGdldE5hbWVzcGFjZShwYXRoKSB7CiAgICBwYXRoID0gcGF0aC5zcGxpdCgiLiIpOwogICAgdmFyIHJvb3ROcyA9IGdldFJvb3ROYW1lc3BhY2UocGF0aFswXSk7CiAgICB2YXIgY3Vyc29yID0gcm9vdE5zOwogICAgZm9yICh2YXIgaSA9IDEsIG5hbWU7IG5hbWUgPSBwYXRoW2ldOyBpKyspIHsKICAgICAgaWYgKCFjdXJzb3JbbmFtZV0pIHsKICAgICAgICB2YXIgbnNwYXRoID0gcGF0aC5zbGljZSgwLCBpICsgMSkuam9pbigiLiIpOwogICAgICAgIGN1cnNvcltuYW1lXSA9IG5ldyBOYW1lc3BhY2UobnNwYXRoKTsKICAgICAgICByb290TnMubmFtZXNwYWNlc19bbnNwYXRoXSA9IGN1cnNvcltuYW1lXTsKICAgICAgfQogICAgICBjdXJzb3IgPSBjdXJzb3JbbmFtZV07CiAgICB9CiAgICBuYW1lc3BhY2VzW3BhdGguam9pbigiLiIpXSA9IGN1cnNvcjsKICAgIHJldHVybiBjdXJzb3I7CiAgfQogIHZhciByZXF1aXJlTmFtZXNwYWNlID0gZnVuY3Rpb24oKSB7CiAgICBpZiAoTk9ERV9FTlYpIHsKICAgICAgdmFyIG1vZHVsZVByb3RvID0gbW9kdWxlLmNvbnN0cnVjdG9yLnByb3RvdHlwZTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKGZpbGVuYW1lLCBkaXJuYW1lKSB7CiAgICAgICAgaWYgKCEvW15hLXowLTlfXC5dL2kudGVzdChmaWxlbmFtZSkgfHwgcGF0aFV0aWxzLmV4dG5hbWUoZmlsZW5hbWUpID09ICIuanMiKSB7CiAgICAgICAgICB2YXIgX2NvbXBpbGUgPSBtb2R1bGVQcm90by5fY29tcGlsZTsKICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBnZXROYW1lc3BhY2UoZmlsZW5hbWUpOwogICAgICAgICAgbW9kdWxlUHJvdG8uX2NvbXBpbGUgPSBmdW5jdGlvbihjb250ZW50LCBmaWxlbmFtZSkgewogICAgICAgICAgICB0aGlzLmJhc2lzID0gYmFzaXM7CiAgICAgICAgICAgIGNvbnRlbnQgPSAidmFyIF9fbm9kZWpzUmVxdWlyZSA9IHJlcXVpcmU7XG4iICsgInZhciBiYXNpcyA9IG1vZHVsZS5iYXNpcztcbiIgKyAndmFyIHJlc291cmNlID0gZnVuY3Rpb24oZmlsZW5hbWUpeyByZXR1cm4gYmFzaXMucmVzb3VyY2UoX19kaXJuYW1lICsgIi8iICsgZmlsZW5hbWUpIH07XG4nICsgInZhciByZXF1aXJlID0gZnVuY3Rpb24oZmlsZW5hbWUsIGJhc2VVUkkpeyByZXR1cm4gYmFzaXMucmVxdWlyZShmaWxlbmFtZSwgYmFzZVVSSSB8fCBfX2Rpcm5hbWUpIH07XG4iICsgY29udGVudDsKICAgICAgICAgICAgX2NvbXBpbGUuY2FsbChleHRlbmQodGhpcywgbmFtZXNwYWNlKSwgY29udGVudCwgZmlsZW5hbWUpOwogICAgICAgICAgfTsKICAgICAgICAgIHZhciBleHBvcnRzID0gcmVxdWlyZShfX2Rpcm5hbWUgKyAiLyIgKyBmaWxlbmFtZS5yZXBsYWNlKC9cLi9nLCAiLyIpKTsKICAgICAgICAgIG5hbWVzcGFjZS5leHBvcnRzID0gZXhwb3J0czsKICAgICAgICAgIGlmIChleHBvcnRzICYmIGV4cG9ydHMuY29uc3RydWN0b3IgPT09IE9iamVjdCkgY29tcGxldGUobmFtZXNwYWNlLCBleHBvcnRzKTsKICAgICAgICAgIG1vZHVsZVByb3RvLl9jb21waWxlID0gX2NvbXBpbGU7CiAgICAgICAgICByZXR1cm4gZXhwb3J0czsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZmlsZW5hbWUgPSBwYXRoVXRpbHMucmVzb2x2ZShkaXJuYW1lLCBmaWxlbmFtZSk7CiAgICAgICAgICByZXR1cm4gcmVxdWlyZShmaWxlbmFtZSk7CiAgICAgICAgfQogICAgICB9OwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKGZpbGVuYW1lLCBkaXJuYW1lKSB7CiAgICAgICAgaWYgKCEvW15hLXowLTlfXC5dL2kudGVzdChmaWxlbmFtZSkgJiYgcGF0aFV0aWxzLmV4dG5hbWUoZmlsZW5hbWUpICE9ICIuanMiKSB7CiAgICAgICAgICBmaWxlbmFtZSA9IHJlc29sdmVOU0ZpbGVuYW1lKGZpbGVuYW1lKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKCEvXihcLlwvfFwuXC58XC8pLy50ZXN0KGZpbGVuYW1lKSkgY29uc29sZU1ldGhvZHMud2FybigiQmFkIHVzYWdlOiByZXF1aXJlKCciICsgZmlsZW5hbWUgKyAiJykuXG5GaWxlbmFtZXMgc2hvdWxkIHN0YXJ0cyB3aXRoIGAuL2AsIGAuLmAgb3IgYC9gLiBPdGhlcndpc2UgaXQgd2lsbCB0cmVhdHMgYXMgc3BlY2lhbCByZWZlcmVuY2UgaW4gbmV4dCBtaW5vciByZWxlYXNlLiIpOwogICAgICAgICAgZmlsZW5hbWUgPSBwYXRoVXRpbHMucmVzb2x2ZShkaXJuYW1lLCBmaWxlbmFtZSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBnZXRSZXNvdXJjZShmaWxlbmFtZSkuZmV0Y2goKTsKICAgICAgfTsKICAgIH0KICB9KCk7CiAgZnVuY3Rpb24gcGF0Y2goZmlsZW5hbWUsIHBhdGNoRm4pIHsKICAgIGlmICghL1teYS16MC05X1wuXS9pLnRlc3QoZmlsZW5hbWUpICYmIHBhdGhVdGlscy5leHRuYW1lKGZpbGVuYW1lKSAhPSAiLmpzIikgewogICAgICBmaWxlbmFtZSA9IHJlc29sdmVOU0ZpbGVuYW1lKGZpbGVuYW1lKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmICghL14oXC5cL3xcLlwufFwvKS8udGVzdChmaWxlbmFtZSkpIGNvbnNvbGVNZXRob2RzLndhcm4oIkJhZCB1c2FnZTogYmFzaXMucGF0Y2goJyIgKyBmaWxlbmFtZSArICInKS5cbkZpbGVuYW1lcyBzaG91bGQgc3RhcnRzIHdpdGggYC4vYCwgYC4uYCBvciBgL2AuIE90aGVyd2lzZSBpdCB3aWxsIHRyZWF0cyBhcyBzcGVjaWFsIHJlZmVyZW5jZSBpbiBuZXh0IG1pbm9yIHJlbGVhc2UuIik7CiAgICAgIGZpbGVuYW1lID0gcGF0aFV0aWxzLnJlc29sdmUoZmlsZW5hbWUpOwogICAgfQogICAgaWYgKCFyZXNvdXJjZVBhdGNoW2ZpbGVuYW1lXSkgcmVzb3VyY2VQYXRjaFtmaWxlbmFtZV0gPSBbIHBhdGNoRm4gXTsgZWxzZSByZXNvdXJjZVBhdGNoW2ZpbGVuYW1lXS5wdXNoKHBhdGNoRm4pOwogICAgdmFyIHJlc291cmNlID0gZ2V0UmVzb3VyY2UuZ2V0KGZpbGVuYW1lKTsKICAgIGlmIChyZXNvdXJjZSAmJiByZXNvdXJjZS5pc1Jlc29sdmVkKCkpIHBhdGNoRm4ocmVzb3VyY2UuZ2V0KCksIHJlc291cmNlLnVybCk7CiAgfQogIGNvbXBsZXRlKEZ1bmN0aW9uLnByb3RvdHlwZSwgewogICAgYmluZDogZnVuY3Rpb24odGhpc09iamVjdCkgewogICAgICB2YXIgZm4gPSB0aGlzOwogICAgICB2YXIgcGFyYW1zID0gYXJyYXlGcm9tKGFyZ3VtZW50cywgMSk7CiAgICAgIHJldHVybiBwYXJhbXMubGVuZ3RoID8gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNPYmplY3QsIHBhcmFtcy5jb25jYXQuYXBwbHkocGFyYW1zLCBhcmd1bWVudHMpKTsKICAgICAgfSA6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzT2JqZWN0LCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfQogIH0pOwogIGNvbXBsZXRlKEFycmF5LCB7CiAgICBpc0FycmF5OiBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICJbb2JqZWN0IEFycmF5XSI7CiAgICB9CiAgfSk7CiAgZnVuY3Rpb24gYXJyYXlGcm9tKG9iamVjdCwgb2Zmc2V0KSB7CiAgICBpZiAob2JqZWN0ICE9IG51bGwpIHsKICAgICAgdmFyIGxlbiA9IG9iamVjdC5sZW5ndGg7CiAgICAgIGlmICh0eXBlb2YgbGVuID09ICJ1bmRlZmluZWQiIHx8IHRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAiW29iamVjdCBGdW5jdGlvbl0iKSByZXR1cm4gWyBvYmplY3QgXTsKICAgICAgaWYgKCFvZmZzZXQpIG9mZnNldCA9IDA7CiAgICAgIGlmIChsZW4gLSBvZmZzZXQgPiAwKSB7CiAgICAgICAgZm9yICh2YXIgcmVzdWx0ID0gW10sIGsgPSAwLCBpID0gb2Zmc2V0OyBpIDwgbGVuOyApIHJlc3VsdFtrKytdID0gb2JqZWN0W2krK107CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfQogICAgfQogICAgcmV0dXJuIFtdOwogIH0KICBmdW5jdGlvbiBjcmVhdGVBcnJheShsZW5ndGgsIGZpbGxWYWx1ZSwgdGhpc09iamVjdCkgewogICAgdmFyIHJlc3VsdCA9IFtdOwogICAgdmFyIGlzRnVuYyA9IHR5cGVvZiBmaWxsVmFsdWUgPT0gImZ1bmN0aW9uIjsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHJlc3VsdFtpXSA9IGlzRnVuYyA/IGZpbGxWYWx1ZS5jYWxsKHRoaXNPYmplY3QsIGksIHJlc3VsdCkgOiBmaWxsVmFsdWU7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KICBjb21wbGV0ZShBcnJheS5wcm90b3R5cGUsIHsKICAgIGluZGV4T2Y6IGZ1bmN0aW9uKHNlYXJjaEVsZW1lbnQsIG9mZnNldCkgewogICAgICBvZmZzZXQgPSBwYXJzZUludChvZmZzZXQsIDEwKSB8fCAwOwogICAgICBpZiAob2Zmc2V0IDwgMCkgcmV0dXJuIC0xOwogICAgICBmb3IgKDsgb2Zmc2V0IDwgdGhpcy5sZW5ndGg7IG9mZnNldCsrKSBpZiAodGhpc1tvZmZzZXRdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gb2Zmc2V0OwogICAgICByZXR1cm4gLTE7CiAgICB9LAogICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uKHNlYXJjaEVsZW1lbnQsIG9mZnNldCkgewogICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGg7CiAgICAgIG9mZnNldCA9IHBhcnNlSW50KG9mZnNldCwgMTApOwogICAgICBpZiAoaXNOYU4ob2Zmc2V0KSB8fCBvZmZzZXQgPj0gbGVuKSBvZmZzZXQgPSBsZW4gLSAxOyBlbHNlIG9mZnNldCA9IChvZmZzZXQgKyBsZW4pICUgbGVuOwogICAgICBmb3IgKDsgb2Zmc2V0ID49IDA7IG9mZnNldC0tKSBpZiAodGhpc1tvZmZzZXRdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gb2Zmc2V0OwogICAgICByZXR1cm4gLTE7CiAgICB9LAogICAgZm9yRWFjaDogZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNPYmplY3QpIHsKICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIGlmIChpIGluIHRoaXMpIGNhbGxiYWNrLmNhbGwodGhpc09iamVjdCwgdGhpc1tpXSwgaSwgdGhpcyk7CiAgICB9LAogICAgZXZlcnk6IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzT2JqZWN0KSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSBpZiAoaSBpbiB0aGlzICYmICFjYWxsYmFjay5jYWxsKHRoaXNPYmplY3QsIHRoaXNbaV0sIGksIHRoaXMpKSByZXR1cm4gZmFsc2U7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSwKICAgIHNvbWU6IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzT2JqZWN0KSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSBpZiAoaSBpbiB0aGlzICYmIGNhbGxiYWNrLmNhbGwodGhpc09iamVjdCwgdGhpc1tpXSwgaSwgdGhpcykpIHJldHVybiB0cnVlOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAogICAgZmlsdGVyOiBmdW5jdGlvbihjYWxsYmFjaywgdGhpc09iamVjdCkgewogICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSBpZiAoaSBpbiB0aGlzICYmIGNhbGxiYWNrLmNhbGwodGhpc09iamVjdCwgdGhpc1tpXSwgaSwgdGhpcykpIHJlc3VsdC5wdXNoKHRoaXNbaV0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfSwKICAgIG1hcDogZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNPYmplY3QpIHsKICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5sZW5ndGg7IGkgPCBsZW47IGkrKykgaWYgKGkgaW4gdGhpcykgcmVzdWx0W2ldID0gY2FsbGJhY2suY2FsbCh0aGlzT2JqZWN0LCB0aGlzW2ldLCBpLCB0aGlzKTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0sCiAgICByZWR1Y2U6IGZ1bmN0aW9uKGNhbGxiYWNrLCBpbml0aWFsVmFsdWUpIHsKICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoOwogICAgICB2YXIgYXJnc0xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICAgIGlmIChsZW4gPT0gMCAmJiBhcmdzTGVuID09IDEpIHRocm93IG5ldyBUeXBlRXJyb3I7CiAgICAgIHZhciByZXN1bHQ7CiAgICAgIHZhciBpbml0ZWQgPSAwOwogICAgICBpZiAoYXJnc0xlbiA+IDEpIHsKICAgICAgICByZXN1bHQgPSBpbml0aWFsVmFsdWU7CiAgICAgICAgaW5pdGVkID0gMTsKICAgICAgfQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSBpZiAoaSBpbiB0aGlzKSBpZiAoaW5pdGVkKyspIHJlc3VsdCA9IGNhbGxiYWNrLmNhbGwobnVsbCwgcmVzdWx0LCB0aGlzW2ldLCBpLCB0aGlzKTsgZWxzZSByZXN1bHQgPSB0aGlzW2ldOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0pOwogIHZhciBhcnJheUZ1bmN0aW9ucyA9IHsKICAgIGZyb206IGFycmF5RnJvbSwKICAgIGNyZWF0ZTogY3JlYXRlQXJyYXksCiAgICBmbGF0dGVuOiBmdW5jdGlvbih0aGlzXykgewogICAgICByZXR1cm4gdGhpc18uY29uY2F0LmFwcGx5KFtdLCB0aGlzXyk7CiAgICB9LAogICAgcmVwZWF0OiBmdW5jdGlvbih0aGlzXywgY291bnQpIHsKICAgICAgcmV0dXJuIGFycmF5RnVuY3Rpb25zLmZsYXR0ZW4oY3JlYXRlQXJyYXkocGFyc2VJbnQoY291bnQsIDEwKSB8fCAwLCB0aGlzXykpOwogICAgfSwKICAgIHNlYXJjaDogZnVuY3Rpb24odGhpc18sIHZhbHVlLCBnZXR0ZXJfLCBvZmZzZXQpIHsKICAgICAgdGhpc18ubGFzdFNlYXJjaEluZGV4ID0gLTE7CiAgICAgIGdldHRlcl8gPSBnZXR0ZXIoZ2V0dGVyXyB8fCAkc2VsZik7CiAgICAgIGZvciAodmFyIGluZGV4ID0gcGFyc2VJbnQob2Zmc2V0LCAxMCkgfHwgMCwgbGVuID0gdGhpc18ubGVuZ3RoOyBpbmRleCA8IGxlbjsgaW5kZXgrKykgaWYgKGdldHRlcl8odGhpc19baW5kZXhdKSA9PT0gdmFsdWUpIHJldHVybiB0aGlzX1t0aGlzXy5sYXN0U2VhcmNoSW5kZXggPSBpbmRleF07CiAgICB9LAogICAgbGFzdFNlYXJjaDogZnVuY3Rpb24odGhpc18sIHZhbHVlLCBnZXR0ZXJfLCBvZmZzZXQpIHsKICAgICAgdGhpc18ubGFzdFNlYXJjaEluZGV4ID0gLTE7CiAgICAgIGdldHRlcl8gPSBnZXR0ZXIoZ2V0dGVyXyB8fCAkc2VsZik7CiAgICAgIHZhciBsZW4gPSB0aGlzXy5sZW5ndGg7CiAgICAgIHZhciBpbmRleCA9IGlzTmFOKG9mZnNldCkgfHwgb2Zmc2V0ID09IG51bGwgPyBsZW4gOiBwYXJzZUludChvZmZzZXQsIDEwKTsKICAgICAgZm9yICh2YXIgaSA9IGluZGV4ID4gbGVuID8gbGVuIDogaW5kZXg7IGktLSA+IDA7ICkgaWYgKGdldHRlcl8odGhpc19baV0pID09PSB2YWx1ZSkgcmV0dXJuIHRoaXNfW3RoaXNfLmxhc3RTZWFyY2hJbmRleCA9IGldOwogICAgfSwKICAgIGFkZDogZnVuY3Rpb24odGhpc18sIHZhbHVlKSB7CiAgICAgIHJldHVybiB0aGlzXy5pbmRleE9mKHZhbHVlKSA9PSAtMSAmJiAhIXRoaXNfLnB1c2godmFsdWUpOwogICAgfSwKICAgIHJlbW92ZTogZnVuY3Rpb24odGhpc18sIHZhbHVlKSB7CiAgICAgIHZhciBpbmRleCA9IHRoaXNfLmluZGV4T2YodmFsdWUpOwogICAgICByZXR1cm4gaW5kZXggIT0gLTEgJiYgISF0aGlzXy5zcGxpY2UoaW5kZXgsIDEpOwogICAgfSwKICAgIGhhczogZnVuY3Rpb24odGhpc18sIHZhbHVlKSB7CiAgICAgIHJldHVybiB0aGlzXy5pbmRleE9mKHZhbHVlKSAhPSAtMTsKICAgIH0sCiAgICBzb3J0QXNPYmplY3Q6IGZ1bmN0aW9uKCkgewogICAgICBjb25zb2xlTWV0aG9kcy53YXJuKCJiYXNpcy5hcnJheS5zb3J0QXNPYmplY3QgaXMgZGVwcmVjYXRlZCwgdXNlIGJhc2lzLmFycmF5LnNvcnQgaW5zdGVhZCIpOwogICAgICByZXR1cm4gYXJyYXlGdW5jdGlvbnMuc29ydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfSwKICAgIHNvcnQ6IGZ1bmN0aW9uKHRoaXNfLCBnZXR0ZXJfLCBjb21wYXJhdG9yLCBkZXNjKSB7CiAgICAgIGdldHRlcl8gPSBnZXR0ZXIoZ2V0dGVyXyk7CiAgICAgIGRlc2MgPSBkZXNjID8gLTEgOiAxOwogICAgICByZXR1cm4gdGhpc18ubWFwKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGk6IGluZGV4LAogICAgICAgICAgdjogZ2V0dGVyXyhpdGVtKQogICAgICAgIH07CiAgICAgIH0pLnNvcnQoY29tcGFyYXRvciB8fCBmdW5jdGlvbihhLCBiKSB7CiAgICAgICAgcmV0dXJuIGRlc2MgKiAoYS52ID4gYi52IHx8IC0oYS52IDwgYi52KSB8fCAoYS5pID4gYi5pID8gMSA6IC0xKSk7CiAgICAgIH0pLm1hcChmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgcmV0dXJuIHRoaXNbaXRlbS5pXTsKICAgICAgfSwgdGhpc18pOwogICAgfQogIH07CiAgaWYgKCFbIDEsIDIgXS5zcGxpY2UoMSkubGVuZ3RoKSB7CiAgICB2YXIgbmF0aXZlQXJyYXlTcGxpY2UgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlOwogICAgQXJyYXkucHJvdG90eXBlLnNwbGljZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgcGFyYW1zID0gYXJyYXlGcm9tKGFyZ3VtZW50cyk7CiAgICAgIGlmIChwYXJhbXMubGVuZ3RoIDwgMikgcGFyYW1zWzFdID0gdGhpcy5sZW5ndGg7CiAgICAgIHJldHVybiBuYXRpdmVBcnJheVNwbGljZS5hcHBseSh0aGlzLCBwYXJhbXMpOwogICAgfTsKICB9CiAgdmFyIEVTQ0FQRV9GT1JfUkVHRVhQID0gLyhbXC9cXFwoXClcW1xdXD9ce1x9XHxcKlwrXC1cLlxeXCRdKS9nOwogIHZhciBGT1JNQVRfUkVHRVhQID0gL1x7KFthLXpcZF9dKykoPzo6KFtcLjBdKShcZCspfDooXD8pKT9cfS9naTsKICBjb21wbGV0ZShTdHJpbmcsIHsKICAgIHRvTG93ZXJDYXNlOiBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpOwogICAgfSwKICAgIHRvVXBwZXJDYXNlOiBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpOwogICAgfSwKICAgIHRyaW06IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpLnRyaW0oKTsKICAgIH0sCiAgICB0cmltTGVmdDogZnVuY3Rpb24odmFsdWUpIHsKICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSkudHJpbUxlZnQoKTsKICAgIH0sCiAgICB0cmltUmlnaHQ6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpLnRyaW1SaWdodCgpOwogICAgfQogIH0pOwogIGNvbXBsZXRlKFN0cmluZy5wcm90b3R5cGUsIHsKICAgIHRyaW1MZWZ0OiBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvXlxzKy8sICIiKTsKICAgIH0sCiAgICB0cmltUmlnaHQ6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9ccyskLywgIiIpOwogICAgfSwKICAgIHRyaW06IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy50cmltTGVmdCgpLnRyaW1SaWdodCgpOwogICAgfQogIH0pOwogIHZhciBzdHJpbmdGdW5jdGlvbnMgPSB7CiAgICB0b09iamVjdDogZnVuY3Rpb24odGhpc18sIHJldGhyb3cpIHsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gKG5ldyBGdW5jdGlvbigicmV0dXJuIDAsIiArIHRoaXNfKSkoKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGlmIChyZXRocm93KSB0aHJvdyBlOwogICAgICB9CiAgICB9LAogICAgcmVwZWF0OiBmdW5jdGlvbih0aGlzXywgY291bnQpIHsKICAgICAgcmV0dXJuIChuZXcgQXJyYXkocGFyc2VJbnQoY291bnQsIDEwKSArIDEgfHwgMCkpLmpvaW4odGhpc18pOwogICAgfSwKICAgIHF3OiBmdW5jdGlvbih0aGlzXykgewogICAgICB2YXIgdHJpbW1lZCA9IHRoaXNfLnRyaW0oKTsKICAgICAgcmV0dXJuIHRyaW1tZWQgPyB0cmltbWVkLnNwbGl0KC9ccysvKSA6IFtdOwogICAgfSwKICAgIGZvclJlZ0V4cDogZnVuY3Rpb24odGhpc18pIHsKICAgICAgcmV0dXJuIHRoaXNfLnJlcGxhY2UoRVNDQVBFX0ZPUl9SRUdFWFAsICJcXCQxIik7CiAgICB9LAogICAgZm9ybWF0OiBmdW5jdGlvbih0aGlzXywgZmlyc3QpIHsKICAgICAgdmFyIGRhdGEgPSBhcnJheUZyb20oYXJndW1lbnRzLCAxKTsKICAgICAgaWYgKHR5cGVvZiBmaXJzdCA9PSAib2JqZWN0IikgZXh0ZW5kKGRhdGEsIGZpcnN0KTsKICAgICAgcmV0dXJuIHRoaXNfLnJlcGxhY2UoRk9STUFUX1JFR0VYUCwgZnVuY3Rpb24obSwga2V5LCBudW1Gb3JtYXQsIG51bSwgbm9OdWxsKSB7CiAgICAgICAgdmFyIHZhbHVlID0ga2V5IGluIGRhdGEgPyBkYXRhW2tleV0gOiBub051bGwgPyAiIiA6IG07CiAgICAgICAgaWYgKG51bUZvcm1hdCAmJiAhaXNOYU4odmFsdWUpKSB7CiAgICAgICAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7CiAgICAgICAgICByZXR1cm4gbnVtRm9ybWF0ID09ICIuIiA/IHZhbHVlLnRvRml4ZWQobnVtKSA6IG51bWJlckZ1bmN0aW9ucy5sZWFkKHZhbHVlLCBudW0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0pOwogICAgfSwKICAgIGNhcGl0YWxpemU6IGZ1bmN0aW9uKHRoaXNfKSB7CiAgICAgIHJldHVybiB0aGlzXy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRoaXNfLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpOwogICAgfSwKICAgIGNhbWVsaXplOiBmdW5jdGlvbih0aGlzXykgewogICAgICByZXR1cm4gdGhpc18ucmVwbGFjZSgvLSguKS9nLCBmdW5jdGlvbihtLCBjaHIpIHsKICAgICAgICByZXR1cm4gY2hyLnRvVXBwZXJDYXNlKCk7CiAgICAgIH0pOwogICAgfSwKICAgIGRhc2hlcml6ZTogZnVuY3Rpb24odGhpc18pIHsKICAgICAgcmV0dXJuIHRoaXNfLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKG0pIHsKICAgICAgICByZXR1cm4gIi0iICsgbS50b0xvd2VyQ2FzZSgpOwogICAgICB9KTsKICAgIH0sCiAgICBpc0VtcHR5OiBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCBTdHJpbmcodmFsdWUpID09ICIiOwogICAgfSwKICAgIGlzTm90RW1wdHk6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIFN0cmluZyh2YWx1ZSkgIT0gIiI7CiAgICB9CiAgfTsKICBpZiAoInx8fCIuc3BsaXQoL1x8LykubGVuZ3RoICsgInx8fCIuc3BsaXQoLyhcfCkvKS5sZW5ndGggIT0gMTEpIHsKICAgIHZhciBuYXRpdmVTdHJpbmdTcGxpdCA9IFN0cmluZy5wcm90b3R5cGUuc3BsaXQ7CiAgICBTdHJpbmcucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24ocGF0dGVybiwgY291bnQpIHsKICAgICAgaWYgKCFwYXR0ZXJuIHx8IHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHAgPT0gZmFsc2UgfHwgcGF0dGVybi5zb3VyY2UgPT0gIiIpIHJldHVybiBuYXRpdmVTdHJpbmdTcGxpdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgIHZhciBwb3MgPSAwOwogICAgICB2YXIgbWF0Y2g7CiAgICAgIGlmICghcGF0dGVybi5nbG9iYWwpIHBhdHRlcm4gPSBuZXcgUmVnRXhwKHBhdHRlcm4uc291cmNlLCAvXC8oW21pXSopJC8uZXhlYyhwYXR0ZXJuKVsxXSArICJnIik7CiAgICAgIHdoaWxlIChtYXRjaCA9IHBhdHRlcm4uZXhlYyh0aGlzKSkgewogICAgICAgIG1hdGNoWzBdID0gdGhpcy5zdWJzdHJpbmcocG9zLCBtYXRjaC5pbmRleCk7CiAgICAgICAgcmVzdWx0LnB1c2guYXBwbHkocmVzdWx0LCBtYXRjaCk7CiAgICAgICAgcG9zID0gcGF0dGVybi5sYXN0SW5kZXg7CiAgICAgIH0KICAgICAgcmVzdWx0LnB1c2godGhpcy5zdWJzdHIocG9zKSk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogIH0KICBpZiAoIjEyIi5zdWJzdHIoLTEpICE9ICIyIikgewogICAgdmFyIG5hdGl2ZVN0cmluZ1N1YnN0ciA9IFN0cmluZy5wcm90b3R5cGUuc3Vic3RyOwogICAgU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7CiAgICAgIHJldHVybiBuYXRpdmVTdHJpbmdTdWJzdHIuY2FsbCh0aGlzLCBzdGFydCA8IDAgPyBNYXRoLm1heCgwLCB0aGlzLmxlbmd0aCArIHN0YXJ0KSA6IHN0YXJ0LCBlbmQpOwogICAgfTsKICB9CiAgdmFyIG51bWJlckZ1bmN0aW9ucyA9IHsKICAgIGZpdDogZnVuY3Rpb24odGhpc18sIG1pbiwgbWF4KSB7CiAgICAgIGlmICghaXNOYU4obWluKSAmJiB0aGlzXyA8IG1pbikgcmV0dXJuIE51bWJlcihtaW4pOwogICAgICBpZiAoIWlzTmFOKG1heCkgJiYgdGhpc18gPiBtYXgpIHJldHVybiBOdW1iZXIobWF4KTsKICAgICAgcmV0dXJuIHRoaXNfOwogICAgfSwKICAgIGxlYWQ6IGZ1bmN0aW9uKHRoaXNfLCBsZW4sIGxlYWRDaGFyKSB7CiAgICAgIHJldHVybiBTdHJpbmcodGhpc18pLnJlcGxhY2UoL1xkKy8sIGZ1bmN0aW9uKG51bWJlcikgewogICAgICAgIHJldHVybiAobGVuIC09IG51bWJlci5sZW5ndGggLSAxKSA+IDEgPyAobmV3IEFycmF5KGxlbikpLmpvaW4obGVhZENoYXIgfHwgMCkgKyBudW1iZXIgOiBudW1iZXI7CiAgICAgIH0pOwogICAgfSwKICAgIGdyb3VwOiBmdW5jdGlvbih0aGlzXywgbGVuLCBzcGxpdHRlcikgewogICAgICByZXR1cm4gU3RyaW5nKHRoaXNfKS5yZXBsYWNlKC9cZCsvLCBmdW5jdGlvbihudW1iZXIpIHsKICAgICAgICByZXR1cm4gbnVtYmVyLnJlcGxhY2UoL1xkL2csIGZ1bmN0aW9uKG0sIHBvcykgewogICAgICAgICAgcmV0dXJuICFwb3MgKyAobnVtYmVyLmxlbmd0aCAtIHBvcykgJSAobGVuIHx8IDMpID8gbSA6IChzcGxpdHRlciB8fCAiICIpICsgbTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgZm9ybWF0OiBmdW5jdGlvbih0aGlzXywgcHJlYywgZ3MsIHByZWZpeCwgcG9zdGZpeCwgY29tbWEpIHsKICAgICAgdmFyIHJlcyA9IHRoaXNfLnRvRml4ZWQocHJlYyk7CiAgICAgIGlmIChncyB8fCBjb21tYSkgcmVzID0gcmVzLnJlcGxhY2UoLyhcZCspKFwuPykvLCBmdW5jdGlvbihtLCBudW1iZXIsIGMpIHsKICAgICAgICByZXR1cm4gKGdzID8gYmFzaXMubnVtYmVyLmdyb3VwKE51bWJlcihudW1iZXIpLCAzLCBncykgOiBudW1iZXIpICsgKGMgPyBjb21tYSB8fCBjIDogIiIpOwogICAgICB9KTsKICAgICAgaWYgKHByZWZpeCkgcmVzID0gcmVzLnJlcGxhY2UoL14tPy8sICIkJiIgKyAocHJlZml4IHx8ICIiKSk7CiAgICAgIHJldHVybiByZXMgKyAocG9zdGZpeCB8fCAiIik7CiAgICB9CiAgfTsKICBjb21wbGV0ZShEYXRlLCB7CiAgICBub3c6IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gTnVtYmVyKG5ldyBEYXRlKTsKICAgIH0KICB9KTsKICB2YXIgcmVhZHkgPSBmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIGlzUmVhZHkoKSB7CiAgICAgIHJldHVybiBkb2N1bWVudC5yZWFkeVN0YXRlID09ICJjb21wbGV0ZSIgJiYgISFkb2N1bWVudC5ib2R5OwogICAgfQogICAgdmFyIGZpcmVkID0gIWRvY3VtZW50IHx8IGlzUmVhZHkoKTsKICAgIHZhciBkZWZlcnJlZEhhbmRsZXI7CiAgICBmdW5jdGlvbiBydW5SZWFkeUhhbmRsZXIoaGFuZGxlcikgewogICAgICBoYW5kbGVyLmNhbGxiYWNrLmNhbGwoaGFuZGxlci5jb250ZXh0KTsKICAgIH0KICAgIGZ1bmN0aW9uIGZpcmVIYW5kbGVycygpIHsKICAgICAgaWYgKGlzUmVhZHkoKSkgaWYgKCEoZmlyZWQrKykpIHdoaWxlIChkZWZlcnJlZEhhbmRsZXIpIHsKICAgICAgICBydW5SZWFkeUhhbmRsZXIoZGVmZXJyZWRIYW5kbGVyKTsKICAgICAgICBkZWZlcnJlZEhhbmRsZXIgPSBkZWZlcnJlZEhhbmRsZXIubmV4dDsKICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gZG9TY3JvbGxDaGVjaygpIHsKICAgICAgdHJ5IHsKICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwoImxlZnQiKTsKICAgICAgICBmaXJlSGFuZGxlcnMoKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHNldFRpbWVvdXQoZG9TY3JvbGxDaGVjaywgMSk7CiAgICAgIH0KICAgIH0KICAgIGlmICghZmlyZWQpIHsKICAgICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHsKICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgZmlyZUhhbmRsZXJzLCBmYWxzZSk7CiAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLCBmaXJlSGFuZGxlcnMsIGZhbHNlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkb2N1bWVudC5hdHRhY2hFdmVudCgib25yZWFkeXN0YXRlY2hhbmdlIiwgZmlyZUhhbmRsZXJzKTsKICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoIm9ubG9hZCIsIGZpcmVIYW5kbGVycyk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghZ2xvYmFsLmZyYW1lRWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwpIGRvU2Nyb2xsQ2hlY2soKTsKICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICB9CiAgICB9CiAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2ssIGNvbnRleHQpIHsKICAgICAgaWYgKCFmaXJlZCkgewogICAgICAgIGRlZmVycmVkSGFuZGxlciA9IHsKICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjaywKICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgICAgICBuZXh0OiBkZWZlcnJlZEhhbmRsZXIKICAgICAgICB9OwogICAgICB9IGVsc2UgcnVuUmVhZHlIYW5kbGVyKHsKICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssCiAgICAgICAgY29udGV4dDogY29udGV4dAogICAgICB9KTsKICAgIH07CiAgfSgpOwogIHZhciBkb2N1bWVudEludGVyZmFjZSA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHRpbWVyOwogICAgdmFyIHJlZmVyZW5jZSA9IHt9OwogICAgdmFyIGNhbGxiYWNrcyA9IHsKICAgICAgaGVhZDogW10sCiAgICAgIGJvZHk6IFtdCiAgICB9OwogICAgZnVuY3Rpb24gZ2V0UGFyZW50KG5hbWUpIHsKICAgICAgaWYgKGRvY3VtZW50ICYmICFyZWZlcmVuY2VbbmFtZV0pIHsKICAgICAgICByZWZlcmVuY2VbbmFtZV0gPSBkb2N1bWVudFtuYW1lXSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShuYW1lKVswXTsKICAgICAgICBpZiAocmVmZXJlbmNlW25hbWVdKSB7CiAgICAgICAgICB2YXIgaXRlbXMgPSBjYWxsYmFja3NbbmFtZV07CiAgICAgICAgICBkZWxldGUgY2FsbGJhY2tzW25hbWVdOwogICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNiOyBjYiA9IGl0ZW1zW2ldOyBpKyspIGNiWzBdLmNhbGwoY2JbMV0sIHJlZmVyZW5jZVtuYW1lXSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiByZWZlcmVuY2VbbmFtZV07CiAgICB9CiAgICBmdW5jdGlvbiBhZGQoKSB7CiAgICAgIHZhciBuYW1lID0gdGhpc1swXTsKICAgICAgdmFyIG5vZGUgPSB0aGlzWzFdOwogICAgICB2YXIgcmVmID0gdGhpc1syXTsKICAgICAgcmVtb3ZlKG5vZGUpOwogICAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KG5hbWUpOwogICAgICBpZiAocGFyZW50KSB7CiAgICAgICAgaWYgKHJlZiA9PT0gdHJ1ZSkgcmVmID0gcGFyZW50LmZpcnN0Q2hpbGQ7CiAgICAgICAgaWYgKCFyZWYgfHwgcmVmLnBhcmVudE5vZGUgIT09IHBhcmVudCkgcmVmID0gbnVsbDsKICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZik7CiAgICAgIH0gZWxzZSBjYWxsYmFja3NbbmFtZV0ucHVzaChbIGFkZCwgWyBuYW1lLCBub2RlLCByZWYgXSBdKTsKICAgIH0KICAgIGZ1bmN0aW9uIGRvY1JlYWR5KG5hbWUsIGZuLCBjb250ZXh0KSB7CiAgICAgIGlmIChjYWxsYmFja3NbbmFtZV0pIGNhbGxiYWNrc1tuYW1lXS5wdXNoKFsgZm4sIGNvbnRleHQgXSk7IGVsc2UgZm4uY2FsbChjb250ZXh0LCByZWZlcmVuY2VbbmFtZV0pOwogICAgfQogICAgZnVuY3Rpb24gcmVtb3ZlKG5vZGUpIHsKICAgICAgZm9yICh2YXIga2V5IGluIGNhbGxiYWNrcykgewogICAgICAgIHZhciBlbnRyeSA9IGFycmF5RnVuY3Rpb25zLnNlYXJjaChjYWxsYmFja3Nba2V5XSwgbm9kZSwgZnVuY3Rpb24oaXRlbSkgewogICAgICAgICAgcmV0dXJuIGl0ZW1bMV0gJiYgaXRlbVsxXVsxXTsKICAgICAgICB9KTsKICAgICAgICBpZiAoZW50cnkpIGFycmF5RnVuY3Rpb25zLnJlbW92ZShjYWxsYmFja3Nba2V5XSwgZW50cnkpOwogICAgICB9CiAgICAgIGlmIChub2RlICYmIG5vZGUucGFyZW50Tm9kZSAmJiBub2RlLnBhcmVudE5vZGUubm9kZVR5cGUgPT0gMSkgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpOwogICAgfQogICAgZnVuY3Rpb24gY2hlY2tQYXJlbnRzKCkgewogICAgICBpZiAodGltZXIgJiYgZ2V0UGFyZW50KCJoZWFkIikgJiYgZ2V0UGFyZW50KCJib2R5IikpIHRpbWVyID0gY2xlYXJJbnRlcnZhbCh0aW1lcik7CiAgICB9CiAgICBpZiAoZG9jdW1lbnQgJiYgKCFnZXRQYXJlbnQoImhlYWQiKSB8fCAhZ2V0UGFyZW50KCJib2R5IikpKSB7CiAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoY2hlY2tQYXJlbnRzLCA1KTsKICAgICAgcmVhZHkoY2hlY2tQYXJlbnRzKTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgIGhlYWQ6IHsKICAgICAgICByZWFkeTogZnVuY3Rpb24oZm4sIGNvbnRleHQpIHsKICAgICAgICAgIGRvY1JlYWR5KCJoZWFkIiwgZm4sIGNvbnRleHQpOwogICAgICAgIH0sCiAgICAgICAgYWRkOiBmdW5jdGlvbihub2RlLCByZWYpIHsKICAgICAgICAgIGFkZC5jYWxsKFsgImhlYWQiLCBub2RlLCByZWYgXSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBib2R5OiB7CiAgICAgICAgcmVhZHk6IGZ1bmN0aW9uKGZuLCBjb250ZXh0KSB7CiAgICAgICAgICBkb2NSZWFkeSgiYm9keSIsIGZuLCBjb250ZXh0KTsKICAgICAgICB9LAogICAgICAgIGFkZDogZnVuY3Rpb24obm9kZSwgcmVmKSB7CiAgICAgICAgICBhZGQuY2FsbChbICJib2R5Iiwgbm9kZSwgcmVmIF0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcmVtb3ZlOiByZW1vdmUKICAgIH07CiAgfSgpOwogIHZhciBjbGVhbmVyID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgb2JqZWN0cyA9IFtdOwogICAgZnVuY3Rpb24gZGVzdHJveShsb2cpIHsKICAgICAgdmFyIGxvZ0Rlc3Ryb3kgPSBsb2cgJiYgdHlwZW9mIGxvZyA9PSAiYm9vbGVhbiI7CiAgICAgIHJlc3VsdC5nbG9iYWxEZXN0cm95ID0gdHJ1ZTsKICAgICAgcmVzdWx0LmFkZCA9ICR1bmRlZjsKICAgICAgcmVzdWx0LnJlbW92ZSA9ICR1bmRlZjsKICAgICAgdmFyIG9iamVjdDsKICAgICAgd2hpbGUgKG9iamVjdCA9IG9iamVjdHMucG9wKCkpIHsKICAgICAgICBpZiAodHlwZW9mIG9iamVjdC5kZXN0cm95ID09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmIChsb2dEZXN0cm95KSBjb25zb2xlTWV0aG9kcy5sb2coImRlc3Ryb3kiLCAiWyIgKyBTdHJpbmcob2JqZWN0LmNsYXNzTmFtZSkgKyAiXSIsIG9iamVjdCk7CiAgICAgICAgICAgIG9iamVjdC5kZXN0cm95KCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGNvbnNvbGVNZXRob2RzLndhcm4oU3RyaW5nKG9iamVjdCksIGUpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iamVjdCkgb2JqZWN0W3Byb3BdID0gbnVsbDsKICAgICAgICB9CiAgICAgIH0KICAgICAgb2JqZWN0cy5sZW5ndGggPSAwOwogICAgfQogICAgaWYgKCJhdHRhY2hFdmVudCIgaW4gZ2xvYmFsKSBnbG9iYWwuYXR0YWNoRXZlbnQoIm9udW5sb2FkIiwgZGVzdHJveSk7IGVsc2UgaWYgKCJhZGRFdmVudExpc3RlbmVyIiBpbiBnbG9iYWwpIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCJ1bmxvYWQiLCBkZXN0cm95LCBmYWxzZSk7IGVsc2UgcmV0dXJuIHsKICAgICAgYWRkOiAkdW5kZWYsCiAgICAgIHJlbW92ZTogJHVuZGVmCiAgICB9OwogICAgdmFyIHJlc3VsdCA9IHsKICAgICAgYWRkOiBmdW5jdGlvbihvYmplY3QpIHsKICAgICAgICBpZiAob2JqZWN0ICE9IG51bGwpIG9iamVjdHMucHVzaChvYmplY3QpOwogICAgICB9LAogICAgICByZW1vdmU6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICAgIGFycmF5RnVuY3Rpb25zLnJlbW92ZShvYmplY3RzLCBvYmplY3QpOwogICAgICB9CiAgICB9OwogICAgcmVzdWx0LmRlc3Ryb3lfID0gZGVzdHJveTsKICAgIHJlc3VsdC5vYmplY3RzXyA9IG9iamVjdHM7CiAgICByZXR1cm4gcmVzdWx0OwogIH0oKTsKICB2YXIgQ3NzUmVzb3VyY2UgPSBmdW5jdGlvbigpIHsKICAgIHZhciBTVFlMRV9BUFBFTkRfQlVHR1kgPSBmdW5jdGlvbigpIHsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIikuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIiIpKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9KCk7CiAgICB2YXIgYmFzZUVsID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYmFzZSIpOwogICAgZnVuY3Rpb24gc2V0QmFzZShiYXNlVVJJKSB7CiAgICAgIGJhc2VFbC5zZXRBdHRyaWJ1dGUoImhyZWYiLCBiYXNlVVJJKTsKICAgICAgZG9jdW1lbnRJbnRlcmZhY2UuaGVhZC5hZGQoYmFzZUVsLCB0cnVlKTsKICAgIH0KICAgIGZ1bmN0aW9uIHJlc3RvcmVCYXNlKCkgewogICAgICBiYXNlRWwuc2V0QXR0cmlidXRlKCJocmVmIiwgbG9jYXRpb24uaHJlZik7CiAgICAgIGRvY3VtZW50SW50ZXJmYWNlLnJlbW92ZShiYXNlRWwpOwogICAgfQogICAgZnVuY3Rpb24gaW5qZWN0U3R5bGVUb0hlYWQoKSB7CiAgICAgIHNldEJhc2UodGhpcy5iYXNlVVJJKTsKICAgICAgaWYgKCF0aGlzLmVsZW1lbnQpIHsKICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwogICAgICAgIGlmICghU1RZTEVfQVBQRU5EX0JVR0dZKSB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIiIpKTsKICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCJzcmMiLCB0aGlzLnVybCk7CiAgICAgIH0KICAgICAgZG9jdW1lbnRJbnRlcmZhY2UuaGVhZC5hZGQodGhpcy5lbGVtZW50KTsKICAgICAgdGhpcy5zeW5jQ3NzVGV4dCgpOwogICAgICByZXN0b3JlQmFzZSgpOwogICAgfQogICAgcmV0dXJuIENsYXNzKG51bGwsIHsKICAgICAgY2xhc3NOYW1lOiAiYmFzaXMuQ3NzUmVzb3VyY2UiLAogICAgICBpblVzZTogMCwKICAgICAgdXJsOiAiIiwKICAgICAgYmFzZVVSSTogIiIsCiAgICAgIGNzc1RleHQ6IHVuZGVmaW5lZCwKICAgICAgZWxlbWVudDogbnVsbCwKICAgICAgaW5pdDogZnVuY3Rpb24odXJsKSB7CiAgICAgICAgdGhpcy51cmwgPSB1cmw7CiAgICAgICAgdGhpcy5iYXNlVVJJID0gcGF0aFV0aWxzLmRpcm5hbWUodXJsKSArICIvIjsKICAgICAgfSwKICAgICAgdXBkYXRlQ3NzVGV4dDogZnVuY3Rpb24oY3NzVGV4dCkgewogICAgICAgIGlmICh0aGlzLmNzc1RleHQgIT0gY3NzVGV4dCkgewogICAgICAgICAgdGhpcy5jc3NUZXh0ID0gY3NzVGV4dDsKICAgICAgICAgIGlmICh0aGlzLmluVXNlICYmIHRoaXMuZWxlbWVudCkgewogICAgICAgICAgICBzZXRCYXNlKHRoaXMuYmFzZVVSSSk7CiAgICAgICAgICAgIHRoaXMuc3luY0Nzc1RleHQoKTsKICAgICAgICAgICAgcmVzdG9yZUJhc2UoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHN5bmNDc3NUZXh0OiBTVFlMRV9BUFBFTkRfQlVHR1kgPyBmdW5jdGlvbigpIHsKICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gdGhpcy5jc3NUZXh0OwogICAgICB9IDogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGNzc1RleHQgPSB0aGlzLmNzc1RleHQ7CiAgICAgICAgY3NzVGV4dCArPSAiXG4vKiMgc291cmNlVVJMPSIgKyBwYXRoVXRpbHMub3JpZ2luICsgdGhpcy51cmwgKyAiICovIjsKICAgICAgICB0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSBjc3NUZXh0OwogICAgICB9LAogICAgICBzdGFydFVzZTogZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCF0aGlzLmluVXNlKSBkb2N1bWVudEludGVyZmFjZS5oZWFkLnJlYWR5KGluamVjdFN0eWxlVG9IZWFkLCB0aGlzKTsKICAgICAgICB0aGlzLmluVXNlICs9IDE7CiAgICAgIH0sCiAgICAgIHN0b3BVc2U6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh0aGlzLmluVXNlKSB7CiAgICAgICAgICB0aGlzLmluVXNlIC09IDE7CiAgICAgICAgICBpZiAoIXRoaXMuaW5Vc2UgJiYgdGhpcy5lbGVtZW50KSBkb2N1bWVudEludGVyZmFjZS5yZW1vdmUodGhpcy5lbGVtZW50KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh0aGlzLmVsZW1lbnQpIGRvY3VtZW50SW50ZXJmYWNlLnJlbW92ZSh0aGlzLmVsZW1lbnQpOwogICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7CiAgICAgICAgdGhpcy5jc3NUZXh0ID0gbnVsbDsKICAgICAgfQogICAgfSk7CiAgfSgpOwogIHZhciBiYXNpcyA9IGdldE5hbWVzcGFjZSgiYmFzaXMiKS5leHRlbmQoewogICAgZmlsZW5hbWVfOiBiYXNpc0ZpbGVuYW1lLAogICAgcHJvY2Vzc0NvbmZpZzogcHJvY2Vzc0NvbmZpZywKICAgIHZlcnNpb246IFZFUlNJT04sCiAgICBOT0RFX0VOVjogTk9ERV9FTlYsCiAgICBjb25maWc6IGNvbmZpZywKICAgIGNyZWF0ZVNhbmRib3g6IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICByZXR1cm4gY3JlYXRlQmFzaXNJbnN0YW5jZShnbG9iYWwsIGJhc2lzRmlsZW5hbWUsIGNvbXBsZXRlKHsKICAgICAgICBub0NvbmZsaWN0OiB0cnVlCiAgICAgIH0sIGNvbmZpZykpOwogICAgfSwKICAgIHJlc29sdmVOU0ZpbGVuYW1lOiByZXNvbHZlTlNGaWxlbmFtZSwKICAgIHBhdGNoOiBwYXRjaCwKICAgIG5hbWVzcGFjZTogZ2V0TmFtZXNwYWNlLAogICAgcmVxdWlyZTogcmVxdWlyZU5hbWVzcGFjZSwKICAgIHJlc291cmNlOiBnZXRSZXNvdXJjZSwKICAgIGFzc2V0OiBmdW5jdGlvbih1cmwpIHsKICAgICAgcmV0dXJuIHVybDsKICAgIH0sCiAgICBzZXRJbW1lZGlhdGU6IHNldEltbWVkaWF0ZSwKICAgIGNsZWFySW1tZWRpYXRlOiBjbGVhckltbWVkaWF0ZSwKICAgIG5leHRUaWNrOiBmdW5jdGlvbigpIHsKICAgICAgc2V0SW1tZWRpYXRlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICB9LAogICAgQ2xhc3M6IENsYXNzLAogICAgVG9rZW46IFRva2VuLAogICAgRGVmZXJyZWRUb2tlbjogRGVmZXJyZWRUb2tlbiwKICAgIGdlblVJRDogZ2VuVUlELAogICAgZ2V0dGVyOiBnZXR0ZXIsCiAgICByZWFkeTogcmVhZHksCiAgICBjbGVhbmVyOiBjbGVhbmVyLAogICAgY29uc29sZTogY29uc29sZU1ldGhvZHMsCiAgICBwYXRoOiBwYXRoVXRpbHMsCiAgICBkb2M6IGRvY3VtZW50SW50ZXJmYWNlLAogICAgb2JqZWN0OiB7CiAgICAgIGV4dGVuZDogZXh0ZW5kLAogICAgICBjb21wbGV0ZTogY29tcGxldGUsCiAgICAgIGtleXM6IGtleXMsCiAgICAgIHZhbHVlczogdmFsdWVzLAogICAgICBzbGljZTogc2xpY2UsCiAgICAgIHNwbGljZTogc3BsaWNlLAogICAgICBtZXJnZTogbWVyZ2UsCiAgICAgIGl0ZXJhdGU6IGl0ZXJhdGUKICAgIH0sCiAgICBmbjogewogICAgICAkdW5kZWZpbmVkOiAkdW5kZWZpbmVkLAogICAgICAkZGVmaW5lZDogJGRlZmluZWQsCiAgICAgICRpc051bGw6ICRpc051bGwsCiAgICAgICRpc05vdE51bGw6ICRpc05vdE51bGwsCiAgICAgICRpc1NhbWU6ICRpc1NhbWUsCiAgICAgICRpc05vdFNhbWU6ICRpc05vdFNhbWUsCiAgICAgICRzZWxmOiAkc2VsZiwKICAgICAgJGNvbnN0OiAkY29uc3QsCiAgICAgICRmYWxzZTogJGZhbHNlLAogICAgICAkdHJ1ZTogJHRydWUsCiAgICAgICRudWxsOiAkbnVsbCwKICAgICAgJHVuZGVmOiAkdW5kZWYsCiAgICAgIGdldHRlcjogZ2V0dGVyLAogICAgICBudWxsR2V0dGVyOiBudWxsR2V0dGVyLAogICAgICB3cmFwcGVyOiB3cmFwcGVyLAogICAgICBsYXp5SW5pdDogbGF6eUluaXQsCiAgICAgIGxhenlJbml0QW5kUnVuOiBsYXp5SW5pdEFuZFJ1biwKICAgICAgcnVuT25jZTogcnVuT25jZQogICAgfSwKICAgIGFycmF5OiBleHRlbmQoYXJyYXlGcm9tLCBhcnJheUZ1bmN0aW9ucyksCiAgICBzdHJpbmc6IHN0cmluZ0Z1bmN0aW9ucywKICAgIG51bWJlcjogbnVtYmVyRnVuY3Rpb25zLAogICAgYm9vbDogewogICAgICBpbnZlcnQ6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgcmV0dXJuICF2YWx1ZTsKICAgICAgfQogICAgfSwKICAgIGpzb246IHsKICAgICAgcGFyc2U6IHR5cGVvZiBKU09OICE9ICJ1bmRlZmluZWQiID8gSlNPTi5wYXJzZSA6IGZ1bmN0aW9uKHN0cikgewogICAgICAgIHJldHVybiBzdHJpbmdGdW5jdGlvbnMudG9PYmplY3Qoc3RyLCB0cnVlKTsKICAgICAgfQogICAgfQogIH0pOwogIGdldE5hbWVzcGFjZSgiYmFzaXMuZGV2IikuZXh0ZW5kKGNvbnNvbGVNZXRob2RzKTsKICBpZiAoY29uZmlnLmF1dG9sb2FkKSBjb25maWcuYXV0b2xvYWQuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7CiAgICByZXF1aXJlTmFtZXNwYWNlKG5hbWUpOwogIH0pOwogIHJldHVybiBiYXNpczsKfSkodGhpcyk7Cn0pLmNhbGwodGhpcyk7",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 12:11:12 GMT",
                    "Content-Length": "208902",
                    "Date": "Thu, 06 Nov 2014 12:11:15 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}