{
    "url": "http://localhost:9999/stritti/log4js/log4js/src/main/js/log4js.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Ajax request header manipulation (DOM-based)",
    "issueType": 5245952,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based Ajax request header manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into a header of an Ajax request that is issued using XmlHttpRequest. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will set an arbitrary header in the subsequent Ajax request.<br><br>The potential impact of the vulnerability depends on the role of specific HTTP headers in the server-side application's processing of the Ajax request. If the header is used to control the behavior that results from the Ajax request, then the attacker may be able to cause the user to perform unintended actions by manipulating the header.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based Ajax request header manipulation vulnerabilities is not to dynamically set Ajax request headers using data that originated from any untrusted source. This behavior should never be implemented for headers that have any role in controlling the effects of privileged actions within the application.",
    "issueDetail": "The application may be vulnerable to DOM-based Ajax request header manipulation. Data is read from <b>location.href</b> and written to <b>the 'setRequestHeader()' function of an XMLHttpRequest object</b> via the following statement:<ul><li>this.httpRequest.setRequestHeader(\"REFERER\", location.href);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/stritti/log4js/log4js/src/main/js/log4js.js",
                "path": "/stritti/log4js/log4js/src/main/js/log4js.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9zdHJpdHRpL2xvZzRqcy9sb2c0anMvc3JjL21haW4vanMvbG9nNGpzLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 09:03:54 GMT",
                    "Content-Length": "68969",
                    "Date": "Fri, 07 Nov 2014 09:03:54 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}