{
    "url": "http://localhost:9999/wlepinski/angularjs-facebook-sdk/bower_components/angular/angular.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "DOM data manipulation (DOM-based)",
    "issueType": 5247488,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based DOM data manipulation vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this to a data field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.",
    "issueDetail": "The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>window.name</b> and written to <b>the 'name' property of a DOM element</b> via the following statement:<ul><li>window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');</li></ul><b>Note:</b> The name of the current window is a valid attack vector for DOM-based vulnerabilities. An attacker can directly control the name of the targeted application's window by using code on their own domain to load the targeted page using either window.open() or an iframe tag, and specifying the desired window name. ",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/wlepinski/angularjs-facebook-sdk/bower_components/angular/angular.js",
                "path": "/wlepinski/angularjs-facebook-sdk/bower_components/angular/angular.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC93bGVwaW5za2kvYW5ndWxhcmpzLWZhY2Vib29rLXNkay9ib3dlcl9jb21wb25lbnRzL2FuZ3VsYXIvYW5ndWxhci5qcyBIVFRQLzEuMQ0KSG9zdDogbG9jYWxob3N0Ojk5OTkNCg0K",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNzI2MzExDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpEYXRlOiBUaHUsIDA2IE5vdiAyMDE0IDA3OjU4OjU5IEdNVA0KTGFzdC1Nb2RpZmllZDogVGh1LCAwNiBOb3YgMjAxNCAwNzo1ODo1OSBHTVQNCg0KLyoqCiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS4yLjkKICogKGMpIDIwMTAtMjAxNCBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmcKICogTGljZW5zZTogTUlUCiAqLwooZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7J3VzZSBzdHJpY3QnOwoKLyoqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBUaGlzIG9iamVjdCBwcm92aWRlcyBhIHV0aWxpdHkgZm9yIHByb2R1Y2luZyByaWNoIEVycm9yIG1lc3NhZ2VzIHdpdGhpbgogKiBBbmd1bGFyLiBJdCBjYW4gYmUgY2FsbGVkIGFzIGZvbGxvd3M6CiAqCiAqIHZhciBleGFtcGxlTWluRXJyID0gbWluRXJyKCdleGFtcGxlJyk7CiAqIHRocm93IGV4YW1wbGVNaW5FcnIoJ29uZScsICdUaGlzIHswfSBpcyB7MX0nLCBmb28sIGJhcik7CiAqCiAqIFRoZSBhYm92ZSBjcmVhdGVzIGFuIGluc3RhbmNlIG9mIG1pbkVyciBpbiB0aGUgZXhhbXBsZSBuYW1lc3BhY2UuIFRoZQogKiByZXN1bHRpbmcgZXJyb3Igd2lsbCBoYXZlIGEgbmFtZXNwYWNlZCBlcnJvciBjb2RlIG9mIGV4YW1wbGUub25lLiAgVGhlCiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIHJlcGxhY2UgezB9IHdpdGggdGhlIHZhbHVlIG9mIGZvbywgYW5kIHsxfSB3aXRoIHRoZQogKiB2YWx1ZSBvZiBiYXIuIFRoZSBvYmplY3QgaXMgbm90IHJlc3RyaWN0ZWQgaW4gdGhlIG51bWJlciBvZiBhcmd1bWVudHMgaXQgY2FuCiAqIHRha2UuCiAqCiAqIElmIGZld2VyIGFyZ3VtZW50cyBhcmUgc3BlY2lmaWVkIHRoYW4gbmVjZXNzYXJ5IGZvciBpbnRlcnBvbGF0aW9uLCB0aGUgZXh0cmEKICogaW50ZXJwb2xhdGlvbiBtYXJrZXJzIHdpbGwgYmUgcHJlc2VydmVkIGluIHRoZSBmaW5hbCBzdHJpbmcuCiAqCiAqIFNpbmNlIGRhdGEgd2lsbCBiZSBwYXJzZWQgc3RhdGljYWxseSBkdXJpbmcgYSBidWlsZCBzdGVwLCBzb21lIHJlc3RyaWN0aW9ucwogKiBhcmUgYXBwbGllZCB3aXRoIHJlc3BlY3QgdG8gaG93IG1pbkVyciBpbnN0YW5jZXMgYXJlIGNyZWF0ZWQgYW5kIGNhbGxlZC4KICogSW5zdGFuY2VzIHNob3VsZCBoYXZlIG5hbWVzIG9mIHRoZSBmb3JtIG5hbWVzcGFjZU1pbkVyciBmb3IgYSBtaW5FcnIgY3JlYXRlZAogKiB1c2luZyBtaW5FcnIoJ25hbWVzcGFjZScpIC4gRXJyb3IgY29kZXMsIG5hbWVzcGFjZXMgYW5kIHRlbXBsYXRlIHN0cmluZ3MKICogc2hvdWxkIGFsbCBiZSBzdGF0aWMgc3RyaW5ncywgbm90IHZhcmlhYmxlcyBvciBnZW5lcmFsIGV4cHJlc3Npb25zLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlIFRoZSBuYW1lc3BhY2UgdG8gdXNlIGZvciB0aGUgbmV3IG1pbkVyciBpbnN0YW5jZS4KICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgc3RyaW5nLCAuLi4pOiBFcnJvcn0gaW5zdGFuY2UKICovCgpmdW5jdGlvbiBtaW5FcnIobW9kdWxlKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBjb2RlID0gYXJndW1lbnRzWzBdLAogICAgICBwcmVmaXggPSAnWycgKyAobW9kdWxlID8gbW9kdWxlICsgJzonIDogJycpICsgY29kZSArICddICcsCiAgICAgIHRlbXBsYXRlID0gYXJndW1lbnRzWzFdLAogICAgICB0ZW1wbGF0ZUFyZ3MgPSBhcmd1bWVudHMsCiAgICAgIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIChvYmopIHsKICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgcmV0dXJuIG9iai50b1N0cmluZygpLnJlcGxhY2UoLyBce1tcc1xTXSokLywgJycpOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgIHJldHVybiAndW5kZWZpbmVkJzsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG9iajsKICAgICAgfSwKICAgICAgbWVzc2FnZSwgaTsKCiAgICBtZXNzYWdlID0gcHJlZml4ICsgdGVtcGxhdGUucmVwbGFjZSgvXHtcZCtcfS9nLCBmdW5jdGlvbiAobWF0Y2gpIHsKICAgICAgdmFyIGluZGV4ID0gK21hdGNoLnNsaWNlKDEsIC0xKSwgYXJnOwoKICAgICAgaWYgKGluZGV4ICsgMiA8IHRlbXBsYXRlQXJncy5sZW5ndGgpIHsKICAgICAgICBhcmcgPSB0ZW1wbGF0ZUFyZ3NbaW5kZXggKyAyXTsKICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgcmV0dXJuIGFyZy50b1N0cmluZygpLnJlcGxhY2UoLyA/XHtbXHNcU10qJC8sICcnKTsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7CiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJykgewogICAgICAgICAgcmV0dXJuIHRvSnNvbihhcmcpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYXJnOwogICAgICB9CiAgICAgIHJldHVybiBtYXRjaDsKICAgIH0pOwoKICAgIG1lc3NhZ2UgPSBtZXNzYWdlICsgJ1xuaHR0cDovL2Vycm9ycy5hbmd1bGFyanMub3JnLzEuMi45LycgKwogICAgICAobW9kdWxlID8gbW9kdWxlICsgJy8nIDogJycpICsgY29kZTsKICAgIGZvciAoaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UgKyAoaSA9PSAyID8gJz8nIDogJyYnKSArICdwJyArIChpLTIpICsgJz0nICsKICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5KGFyZ3VtZW50c1tpXSkpOwogICAgfQoKICAgIHJldHVybiBuZXcgRXJyb3IobWVzc2FnZSk7CiAgfTsKfQoKLyogV2UgbmVlZCB0byB0ZWxsIGpzaGludCB3aGF0IHZhcmlhYmxlcyBhcmUgYmVpbmcgZXhwb3J0ZWQgKi8KLyogZ2xvYmFsCiAgICAtYW5ndWxhciwKICAgIC1tc2llLAogICAgLWpxTGl0ZSwKICAgIC1qUXVlcnksCiAgICAtc2xpY2UsCiAgICAtcHVzaCwKICAgIC10b1N0cmluZywKICAgIC1uZ01pbkVyciwKICAgIC1fYW5ndWxhciwKICAgIC1hbmd1bGFyTW9kdWxlLAogICAgLW5vZGVOYW1lXywKICAgIC11aWQsCgogICAgLWxvd2VyY2FzZSwKICAgIC11cHBlcmNhc2UsCiAgICAtbWFudWFsTG93ZXJjYXNlLAogICAgLW1hbnVhbFVwcGVyY2FzZSwKICAgIC1ub2RlTmFtZV8sCiAgICAtaXNBcnJheUxpa2UsCiAgICAtZm9yRWFjaCwKICAgIC1zb3J0ZWRLZXlzLAogICAgLWZvckVhY2hTb3J0ZWQsCiAgICAtcmV2ZXJzZVBhcmFtcywKICAgIC1uZXh0VWlkLAogICAgLXNldEhhc2hLZXksCiAgICAtZXh0ZW5kLAogICAgLWludCwKICAgIC1pbmhlcml0LAogICAgLW5vb3AsCiAgICAtaWRlbnRpdHksCiAgICAtdmFsdWVGbiwKICAgIC1pc1VuZGVmaW5lZCwKICAgIC1pc0RlZmluZWQsCiAgICAtaXNPYmplY3QsCiAgICAtaXNTdHJpbmcsCiAgICAtaXNOdW1iZXIsCiAgICAtaXNEYXRlLAogICAgLWlzQXJyYXksCiAgICAtaXNGdW5jdGlvbiwKICAgIC1pc1JlZ0V4cCwKICAgIC1pc1dpbmRvdywKICAgIC1pc1Njb3BlLAogICAgLWlzRmlsZSwKICAgIC1pc0Jvb2xlYW4sCiAgICAtdHJpbSwKICAgIC1pc0VsZW1lbnQsCiAgICAtbWFrZU1hcCwKICAgIC1tYXAsCiAgICAtc2l6ZSwKICAgIC1pbmNsdWRlcywKICAgIC1pbmRleE9mLAogICAgLWFycmF5UmVtb3ZlLAogICAgLWlzTGVhZk5vZGUsCiAgICAtY29weSwKICAgIC1zaGFsbG93Q29weSwKICAgIC1lcXVhbHMsCiAgICAtY3NwLAogICAgLWNvbmNhdCwKICAgIC1zbGljZUFyZ3MsCiAgICAtYmluZCwKICAgIC10b0pzb25SZXBsYWNlciwKICAgIC10b0pzb24sCiAgICAtZnJvbUpzb24sCiAgICAtdG9Cb29sZWFuLAogICAgLXN0YXJ0aW5nVGFnLAogICAgLXRyeURlY29kZVVSSUNvbXBvbmVudCwKICAgIC1wYXJzZUtleVZhbHVlLAogICAgLXRvS2V5VmFsdWUsCiAgICAtZW5jb2RlVXJpU2VnbWVudCwKICAgIC1lbmNvZGVVcmlRdWVyeSwKICAgIC1hbmd1bGFySW5pdCwKICAgIC1ib290c3RyYXAsCiAgICAtc25ha2VfY2FzZSwKICAgIC1iaW5kSlF1ZXJ5LAogICAgLWFzc2VydEFyZywKICAgIC1hc3NlcnRBcmdGbiwKICAgIC1hc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSwKICAgIC1nZXR0ZXIsCiAgICAtZ2V0QmxvY2tFbGVtZW50cywKCiovCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5sb3dlcmNhc2UKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byBsb3dlcmNhc2UuCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UuCiAqIEByZXR1cm5zIHtzdHJpbmd9IExvd2VyY2FzZWQgc3RyaW5nLgogKi8KdmFyIGxvd2VyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZyl7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9Mb3dlckNhc2UoKSA6IHN0cmluZzt9OwoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci51cHBlcmNhc2UKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byB1cHBlcmNhc2UuCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byB1cHBlcmNhc2UuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFVwcGVyY2FzZWQgc3RyaW5nLgogKi8KdmFyIHVwcGVyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZyl7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9VcHBlckNhc2UoKSA6IHN0cmluZzt9OwoKCnZhciBtYW51YWxMb3dlcmNhc2UgPSBmdW5jdGlvbihzKSB7CiAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovCiAgcmV0dXJuIGlzU3RyaW5nKHMpCiAgICAgID8gcy5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgfCAzMik7fSkKICAgICAgOiBzOwp9Owp2YXIgbWFudWFsVXBwZXJjYXNlID0gZnVuY3Rpb24ocykgewogIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqLwogIHJldHVybiBpc1N0cmluZyhzKQogICAgICA/IHMucmVwbGFjZSgvW2Etel0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApICYgfjMyKTt9KQogICAgICA6IHM7Cn07CgoKLy8gU3RyaW5nI3RvTG93ZXJDYXNlIGFuZCBTdHJpbmcjdG9VcHBlckNhc2UgZG9uJ3QgcHJvZHVjZSBjb3JyZWN0IHJlc3VsdHMgaW4gYnJvd3NlcnMgd2l0aCBUdXJraXNoCi8vIGxvY2FsZSwgZm9yIHRoaXMgcmVhc29uIHdlIG5lZWQgdG8gZGV0ZWN0IHRoaXMgY2FzZSBhbmQgcmVkZWZpbmUgbG93ZXJjYXNlL3VwcGVyY2FzZSBtZXRob2RzCi8vIHdpdGggY29ycmVjdCBidXQgc2xvd2VyIGFsdGVybmF0aXZlcy4KaWYgKCdpJyAhPT0gJ0knLnRvTG93ZXJDYXNlKCkpIHsKICBsb3dlcmNhc2UgPSBtYW51YWxMb3dlcmNhc2U7CiAgdXBwZXJjYXNlID0gbWFudWFsVXBwZXJjYXNlOwp9CgoKdmFyIC8qKiBob2xkcyBtYWpvciB2ZXJzaW9uIG51bWJlciBmb3IgSUUgb3IgTmFOIGZvciByZWFsIGJyb3dzZXJzICovCiAgICBtc2llLAogICAganFMaXRlLCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZyBzaW5jZSBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGFmdGVyIHVzLgogICAgalF1ZXJ5LCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZwogICAgc2xpY2UgICAgICAgICAgICAgPSBbXS5zbGljZSwKICAgIHB1c2ggICAgICAgICAgICAgID0gW10ucHVzaCwKICAgIHRvU3RyaW5nICAgICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZywKICAgIG5nTWluRXJyICAgICAgICAgID0gbWluRXJyKCduZycpLAoKCiAgICBfYW5ndWxhciAgICAgICAgICA9IHdpbmRvdy5hbmd1bGFyLAogICAgLyoqIEBuYW1lIGFuZ3VsYXIgKi8KICAgIGFuZ3VsYXIgICAgICAgICAgID0gd2luZG93LmFuZ3VsYXIgfHwgKHdpbmRvdy5hbmd1bGFyID0ge30pLAogICAgYW5ndWxhck1vZHVsZSwKICAgIG5vZGVOYW1lXywKICAgIHVpZCAgICAgICAgICAgICAgID0gWycwJywgJzAnLCAnMCddOwoKLyoqCiAqIElFIDExIGNoYW5nZWQgdGhlIGZvcm1hdCBvZiB0aGUgVXNlckFnZW50IHN0cmluZy4KICogU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNzUwMy5hc3B4CiAqLwptc2llID0gaW50KCgvbXNpZSAoXGQrKS8uZXhlYyhsb3dlcmNhc2UobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSk7CmlmIChpc05hTihtc2llKSkgewogIG1zaWUgPSBpbnQoKC90cmlkZW50XC8uKjsgcnY6KFxkKykvLmV4ZWMobG93ZXJjYXNlKG5hdmlnYXRvci51c2VyQWdlbnQpKSB8fCBbXSlbMV0pOwp9CgoKLyoqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gb2JqCiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBgb2JqYCBpcyBhbiBhcnJheSBvciBhcnJheS1saWtlIG9iamVjdCAoTm9kZUxpc3QsIEFyZ3VtZW50cywKICogICAgICAgICAgICAgICAgICAgU3RyaW5nIC4uLikKICovCmZ1bmN0aW9uIGlzQXJyYXlMaWtlKG9iaikgewogIGlmIChvYmogPT0gbnVsbCB8fCBpc1dpbmRvdyhvYmopKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDsKCiAgaWYgKG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGgpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgcmV0dXJuIGlzU3RyaW5nKG9iaikgfHwgaXNBcnJheShvYmopIHx8IGxlbmd0aCA9PT0gMCB8fAogICAgICAgICB0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyAmJiBsZW5ndGggPiAwICYmIChsZW5ndGggLSAxKSBpbiBvYmo7Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5mb3JFYWNoCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogSW52b2tlcyB0aGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBvbmNlIGZvciBlYWNoIGl0ZW0gaW4gYG9iamAgY29sbGVjdGlvbiwgd2hpY2ggY2FuIGJlIGVpdGhlciBhbgogKiBvYmplY3Qgb3IgYW4gYXJyYXkuIFRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBgaXRlcmF0b3IodmFsdWUsIGtleSlgLCB3aGVyZSBgdmFsdWVgCiAqIGlzIHRoZSB2YWx1ZSBvZiBhbiBvYmplY3QgcHJvcGVydHkgb3IgYW4gYXJyYXkgZWxlbWVudCBhbmQgYGtleWAgaXMgdGhlIG9iamVjdCBwcm9wZXJ0eSBrZXkgb3IKICogYXJyYXkgZWxlbWVudCBpbmRleC4gU3BlY2lmeWluZyBhIGBjb250ZXh0YCBmb3IgdGhlIGZ1bmN0aW9uIGlzIG9wdGlvbmFsLgogKgogKiBJdCBpcyB3b3J0aCBub3RoaW5nIHRoYXQgYC5mb3JFYWNoYCBkb2VzIG5vdCBpdGVyYXRlIG92ZXIgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVjYXVzZSBpdCBmaWx0ZXJzCiAqIHVzaW5nIHRoZSBgaGFzT3duUHJvcGVydHlgIG1ldGhvZC4KICoKICAgPHByZT4KICAgICB2YXIgdmFsdWVzID0ge25hbWU6ICdtaXNrbycsIGdlbmRlcjogJ21hbGUnfTsKICAgICB2YXIgbG9nID0gW107CiAgICAgYW5ndWxhci5mb3JFYWNoKHZhbHVlcywgZnVuY3Rpb24odmFsdWUsIGtleSl7CiAgICAgICB0aGlzLnB1c2goa2V5ICsgJzogJyArIHZhbHVlKTsKICAgICB9LCBsb2cpOwogICAgIGV4cGVjdChsb2cpLnRvRXF1YWwoWyduYW1lOiBtaXNrbycsICdnZW5kZXI6bWFsZSddKTsKICAgPC9wcmU+CiAqCiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogT2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci4KICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3IgSXRlcmF0b3IgZnVuY3Rpb24uCiAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dCBPYmplY3QgdG8gYmVjb21lIGNvbnRleHQgKGB0aGlzYCkgZm9yIHRoZSBpdGVyYXRvciBmdW5jdGlvbi4KICogQHJldHVybnMge09iamVjdHxBcnJheX0gUmVmZXJlbmNlIHRvIGBvYmpgLgogKi8KZnVuY3Rpb24gZm9yRWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgdmFyIGtleTsKICBpZiAob2JqKSB7CiAgICBpZiAoaXNGdW5jdGlvbihvYmopKXsKICAgICAgZm9yIChrZXkgaW4gb2JqKSB7CiAgICAgICAgLy8gTmVlZCB0byBjaGVjayBpZiBoYXNPd25Qcm9wZXJ0eSBleGlzdHMsCiAgICAgICAgLy8gYXMgb24gSUU4IHRoZSByZXN1bHQgb2YgcXVlcnlTZWxlY3RvckFsbCBpcyBhbiBvYmplY3Qgd2l0aG91dCBhIGhhc093blByb3BlcnR5IGZ1bmN0aW9uCiAgICAgICAgaWYgKGtleSAhPSAncHJvdG90eXBlJyAmJiBrZXkgIT0gJ2xlbmd0aCcgJiYga2V5ICE9ICduYW1lJyAmJiAoIW9iai5oYXNPd25Qcm9wZXJ0eSB8fCBvYmouaGFzT3duUHJvcGVydHkoa2V5KSkpIHsKICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKG9iai5mb3JFYWNoICYmIG9iai5mb3JFYWNoICE9PSBmb3JFYWNoKSB7CiAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTsKICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2Uob2JqKSkgewogICAgICBmb3IgKGtleSA9IDA7IGtleSA8IG9iai5sZW5ndGg7IGtleSsrKQogICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSk7CiAgICB9IGVsc2UgewogICAgICBmb3IgKGtleSBpbiBvYmopIHsKICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIHNvcnRlZEtleXMob2JqKSB7CiAgdmFyIGtleXMgPSBbXTsKICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAga2V5cy5wdXNoKGtleSk7CiAgICB9CiAgfQogIHJldHVybiBrZXlzLnNvcnQoKTsKfQoKZnVuY3Rpb24gZm9yRWFjaFNvcnRlZChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7CiAgdmFyIGtleXMgPSBzb3J0ZWRLZXlzKG9iaik7CiAgZm9yICggdmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5c1tpXV0sIGtleXNbaV0pOwogIH0KICByZXR1cm4ga2V5czsKfQoKCi8qKgogKiB3aGVuIHVzaW5nIGZvckVhY2ggdGhlIHBhcmFtcyBhcmUgdmFsdWUsIGtleSwgYnV0IGl0IGlzIG9mdGVuIHVzZWZ1bCB0byBoYXZlIGtleSwgdmFsdWUuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCAqKX0gaXRlcmF0b3JGbgogKiBAcmV0dXJucyB7ZnVuY3Rpb24oKiwgc3RyaW5nKX0KICovCmZ1bmN0aW9uIHJldmVyc2VQYXJhbXMoaXRlcmF0b3JGbikgewogIHJldHVybiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7IGl0ZXJhdG9yRm4oa2V5LCB2YWx1ZSk7IH07Cn0KCi8qKgogKiBBIGNvbnNpc3RlbnQgd2F5IG9mIGNyZWF0aW5nIHVuaXF1ZSBJRHMgaW4gYW5ndWxhci4gVGhlIElEIGlzIGEgc2VxdWVuY2Ugb2YgYWxwaGEgbnVtZXJpYwogKiBjaGFyYWN0ZXJzIHN1Y2ggYXMgJzAxMkFCQycuIFRoZSByZWFzb24gd2h5IHdlIGFyZSBub3QgdXNpbmcgc2ltcGx5IGEgbnVtYmVyIGNvdW50ZXIgaXMgdGhhdAogKiB0aGUgbnVtYmVyIHN0cmluZyBnZXRzIGxvbmdlciBvdmVyIHRpbWUsIGFuZCBpdCBjYW4gYWxzbyBvdmVyZmxvdywgd2hlcmUgYXMgdGhlIG5leHRJZAogKiB3aWxsIGdyb3cgbXVjaCBzbG93ZXIsIGl0IGlzIGEgc3RyaW5nLCBhbmQgaXQgd2lsbCBuZXZlciBvdmVyZmxvdy4KICoKICogQHJldHVybnMgYW4gdW5pcXVlIGFscGhhLW51bWVyaWMgc3RyaW5nCiAqLwpmdW5jdGlvbiBuZXh0VWlkKCkgewogIHZhciBpbmRleCA9IHVpZC5sZW5ndGg7CiAgdmFyIGRpZ2l0OwoKICB3aGlsZShpbmRleCkgewogICAgaW5kZXgtLTsKICAgIGRpZ2l0ID0gdWlkW2luZGV4XS5jaGFyQ29kZUF0KDApOwogICAgaWYgKGRpZ2l0ID09IDU3IC8qJzknKi8pIHsKICAgICAgdWlkW2luZGV4XSA9ICdBJzsKICAgICAgcmV0dXJuIHVpZC5qb2luKCcnKTsKICAgIH0KICAgIGlmIChkaWdpdCA9PSA5MCAgLyonWicqLykgewogICAgICB1aWRbaW5kZXhdID0gJzAnOwogICAgfSBlbHNlIHsKICAgICAgdWlkW2luZGV4XSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGlnaXQgKyAxKTsKICAgICAgcmV0dXJuIHVpZC5qb2luKCcnKTsKICAgIH0KICB9CiAgdWlkLnVuc2hpZnQoJzAnKTsKICByZXR1cm4gdWlkLmpvaW4oJycpOwp9CgoKLyoqCiAqIFNldCBvciBjbGVhciB0aGUgaGFzaGtleSBmb3IgYW4gb2JqZWN0LgogKiBAcGFyYW0gb2JqIG9iamVjdAogKiBAcGFyYW0gaCB0aGUgaGFzaGtleSAoIXRydXRoeSB0byBkZWxldGUgdGhlIGhhc2hrZXkpCiAqLwpmdW5jdGlvbiBzZXRIYXNoS2V5KG9iaiwgaCkgewogIGlmIChoKSB7CiAgICBvYmouJCRoYXNoS2V5ID0gaDsKICB9CiAgZWxzZSB7CiAgICBkZWxldGUgb2JqLiQkaGFzaEtleTsKICB9Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5leHRlbmQKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBFeHRlbmRzIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgYGRzdGAgYnkgY29weWluZyBhbGwgb2YgdGhlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpCiAqIHRvIGBkc3RgLiBZb3UgY2FuIHNwZWNpZnkgbXVsdGlwbGUgYHNyY2Agb2JqZWN0cy4KICoKICogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuCiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS4KICogQHJldHVybnMge09iamVjdH0gUmVmZXJlbmNlIHRvIGBkc3RgLgogKi8KZnVuY3Rpb24gZXh0ZW5kKGRzdCkgewogIHZhciBoID0gZHN0LiQkaGFzaEtleTsKICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24ob2JqKXsKICAgIGlmIChvYmogIT09IGRzdCkgewogICAgICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSl7CiAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTsKICAgICAgfSk7CiAgICB9CiAgfSk7CgogIHNldEhhc2hLZXkoZHN0LGgpOwogIHJldHVybiBkc3Q7Cn0KCmZ1bmN0aW9uIGludChzdHIpIHsKICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCk7Cn0KCgpmdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHsKICByZXR1cm4gZXh0ZW5kKG5ldyAoZXh0ZW5kKGZ1bmN0aW9uKCkge30sIHtwcm90b3R5cGU6cGFyZW50fSkpKCksIGV4dHJhKTsKfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLm5vb3AKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgbm8gb3BlcmF0aW9ucy4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZnVsIHdoZW4gd3JpdGluZyBjb2RlIGluIHRoZQogKiBmdW5jdGlvbmFsIHN0eWxlLgogICA8cHJlPgogICAgIGZ1bmN0aW9uIGZvbyhjYWxsYmFjaykgewogICAgICAgdmFyIHJlc3VsdCA9IGNhbGN1bGF0ZVJlc3VsdCgpOwogICAgICAgKGNhbGxiYWNrIHx8IGFuZ3VsYXIubm9vcCkocmVzdWx0KTsKICAgICB9CiAgIDwvcHJlPgogKi8KZnVuY3Rpb24gbm9vcCgpIHt9Cm5vb3AuJGluamVjdCA9IFtdOwoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pZGVudGl0eQogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGl0cyBmaXJzdCBhcmd1bWVudC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlCiAqIGZ1bmN0aW9uYWwgc3R5bGUuCiAqCiAgIDxwcmU+CiAgICAgZnVuY3Rpb24gdHJhbnNmb3JtZXIodHJhbnNmb3JtYXRpb25GbiwgdmFsdWUpIHsKICAgICAgIHJldHVybiAodHJhbnNmb3JtYXRpb25GbiB8fCBhbmd1bGFyLmlkZW50aXR5KSh2YWx1ZSk7CiAgICAgfTsKICAgPC9wcmU+CiAqLwpmdW5jdGlvbiBpZGVudGl0eSgkKSB7cmV0dXJuICQ7fQppZGVudGl0eS4kaW5qZWN0ID0gW107CgoKZnVuY3Rpb24gdmFsdWVGbih2YWx1ZSkge3JldHVybiBmdW5jdGlvbigpIHtyZXR1cm4gdmFsdWU7fTt9CgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNVbmRlZmluZWQKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIHVuZGVmaW5lZC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLgogKi8KZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO30KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNEZWZpbmVkCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBkZWZpbmVkLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBkZWZpbmVkLgogKi8KZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJzt9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmlzT2JqZWN0CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgT2JqZWN0YC4gVW5saWtlIGB0eXBlb2ZgIGluIEphdmFTY3JpcHQsIGBudWxsYHMgYXJlIG5vdAogKiBjb25zaWRlcmVkIHRvIGJlIG9iamVjdHMuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBPYmplY3RgIGJ1dCBub3QgYG51bGxgLgogKi8KZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpe3JldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7fQoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc1N0cmluZwogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgU3RyaW5nYC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgU3RyaW5nYC4KICovCmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJzt9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmlzTnVtYmVyCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBOdW1iZXJgLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBOdW1iZXJgLgogKi8KZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO30KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuaXNEYXRlCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgZGF0ZS4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRGF0ZWAuCiAqLwpmdW5jdGlvbiBpc0RhdGUodmFsdWUpewogIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nOwp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmlzQXJyYXkKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBBcnJheWAuCiAqCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBBcnJheWAuCiAqLwpmdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7CiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nOwp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmlzRnVuY3Rpb24KICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYEZ1bmN0aW9uYC4KICoKICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRnVuY3Rpb25gLgogKi8KZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzt9CgoKLyoqCiAqIERldGVybWluZXMgaWYgYSB2YWx1ZSBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBvYmplY3QuCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFJlZ0V4cGAuCiAqLwpmdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZSkgewogIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7Cn0KCgovKioKICogQ2hlY2tzIGlmIGBvYmpgIGlzIGEgd2luZG93IG9iamVjdC4KICoKICogQHByaXZhdGUKICogQHBhcmFtIHsqfSBvYmogT2JqZWN0IHRvIGNoZWNrCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGBvYmpgIGlzIGEgd2luZG93IG9iai4KICovCmZ1bmN0aW9uIGlzV2luZG93KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLmRvY3VtZW50ICYmIG9iai5sb2NhdGlvbiAmJiBvYmouYWxlcnQgJiYgb2JqLnNldEludGVydmFsOwp9CgoKZnVuY3Rpb24gaXNTY29wZShvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai4kZXZhbEFzeW5jICYmIG9iai4kd2F0Y2g7Cn0KCgpmdW5jdGlvbiBpc0ZpbGUob2JqKSB7CiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRmlsZV0nOwp9CgoKZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nOwp9CgoKdmFyIHRyaW0gPSAoZnVuY3Rpb24oKSB7CiAgLy8gbmF0aXZlIHRyaW0gaXMgd2F5IGZhc3RlcjogaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhci10cmltLXRlc3QKICAvLyBidXQgSUUgZG9lc24ndCBoYXZlIGl0Li4uIDotKAogIC8vIFRPRE86IHdlIHNob3VsZCBtb3ZlIHRoaXMgaW50byBJRS9FUzUgcG9seWZpbGwKICBpZiAoIVN0cmluZy5wcm90b3R5cGUudHJpbSkgewogICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS5yZXBsYWNlKC9eXHNccyovLCAnJykucmVwbGFjZSgvXHNccyokLywgJycpIDogdmFsdWU7CiAgICB9OwogIH0KICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTsKICB9Owp9KSgpOwoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pc0VsZW1lbnQKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLgogKgogKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS4KICovCmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7CiAgcmV0dXJuICEhKG5vZGUgJiYKICAgIChub2RlLm5vZGVOYW1lICAvLyB3ZSBhcmUgYSBkaXJlY3QgZWxlbWVudAogICAgfHwgKG5vZGUub24gJiYgbm9kZS5maW5kKSkpOyAgLy8gd2UgaGF2ZSBhbiBvbiBhbmQgZmluZCBtZXRob2QgcGFydCBvZiBqUXVlcnkgQVBJCn0KCi8qKgogKiBAcGFyYW0gc3RyICdrZXkxLGtleTIsLi4uJwogKiBAcmV0dXJucyB7b2JqZWN0fSBpbiB0aGUgZm9ybSBvZiB7a2V5MTp0cnVlLCBrZXkyOnRydWUsIC4uLn0KICovCmZ1bmN0aW9uIG1ha2VNYXAoc3RyKXsKICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KCIsIiksIGk7CiAgZm9yICggaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKyApCiAgICBvYmpbIGl0ZW1zW2ldIF0gPSB0cnVlOwogIHJldHVybiBvYmo7Cn0KCgppZiAobXNpZSA8IDkpIHsKICBub2RlTmFtZV8gPSBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBlbGVtZW50ID0gZWxlbWVudC5ub2RlTmFtZSA/IGVsZW1lbnQgOiBlbGVtZW50WzBdOwogICAgcmV0dXJuIChlbGVtZW50LnNjb3BlTmFtZSAmJiBlbGVtZW50LnNjb3BlTmFtZSAhPSAnSFRNTCcpCiAgICAgID8gdXBwZXJjYXNlKGVsZW1lbnQuc2NvcGVOYW1lICsgJzonICsgZWxlbWVudC5ub2RlTmFtZSkgOiBlbGVtZW50Lm5vZGVOYW1lOwogIH07Cn0gZWxzZSB7CiAgbm9kZU5hbWVfID0gZnVuY3Rpb24oZWxlbWVudCkgewogICAgcmV0dXJuIGVsZW1lbnQubm9kZU5hbWUgPyBlbGVtZW50Lm5vZGVOYW1lIDogZWxlbWVudFswXS5ub2RlTmFtZTsKICB9Owp9CgoKZnVuY3Rpb24gbWFwKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHsKICB2YXIgcmVzdWx0cyA9IFtdOwogIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHsKICAgIHJlc3VsdHMucHVzaChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpOwogIH0pOwogIHJldHVybiByZXN1bHRzOwp9CgoKLyoqCiAqIEBkZXNjcmlwdGlvbgogKiBEZXRlcm1pbmVzIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gYXJyYXksIHRoZSBudW1iZXIgb2YgcHJvcGVydGllcyBhbiBvYmplY3QgaGFzLCBvcgogKiB0aGUgbGVuZ3RoIG9mIGEgc3RyaW5nLgogKgogKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gYXVnbWVudCB0aGUgT2JqZWN0IHR5cGUgaW4gQW5ndWxhciBleHByZXNzaW9ucy4gU2VlCiAqIHtAbGluayBhbmd1bGFyLk9iamVjdH0gZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgQW5ndWxhciBhcnJheXMuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fHN0cmluZ30gb2JqIE9iamVjdCwgYXJyYXksIG9yIHN0cmluZyB0byBpbnNwZWN0LgogKiBAcGFyYW0ge2Jvb2xlYW59IFtvd25Qcm9wc09ubHk9ZmFsc2VdIENvdW50IG9ubHkgIm93biIgcHJvcGVydGllcyBpbiBhbiBvYmplY3QKICogQHJldHVybnMge251bWJlcn0gVGhlIHNpemUgb2YgYG9iamAgb3IgYDBgIGlmIGBvYmpgIGlzIG5laXRoZXIgYW4gb2JqZWN0IG5vciBhbiBhcnJheS4KICovCmZ1bmN0aW9uIHNpemUob2JqLCBvd25Qcm9wc09ubHkpIHsKICB2YXIgY291bnQgPSAwLCBrZXk7CgogIGlmIChpc0FycmF5KG9iaikgfHwgaXNTdHJpbmcob2JqKSkgewogICAgcmV0dXJuIG9iai5sZW5ndGg7CiAgfSBlbHNlIGlmIChpc09iamVjdChvYmopKXsKICAgIGZvciAoa2V5IGluIG9iaikKICAgICAgaWYgKCFvd25Qcm9wc09ubHkgfHwgb2JqLmhhc093blByb3BlcnR5KGtleSkpCiAgICAgICAgY291bnQrKzsKICB9CgogIHJldHVybiBjb3VudDsKfQoKCmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCBvYmopIHsKICByZXR1cm4gaW5kZXhPZihhcnJheSwgb2JqKSAhPSAtMTsKfQoKZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgb2JqKSB7CiAgaWYgKGFycmF5LmluZGV4T2YpIHJldHVybiBhcnJheS5pbmRleE9mKG9iaik7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAgIGlmIChvYmogPT09IGFycmF5W2ldKSByZXR1cm4gaTsKICB9CiAgcmV0dXJuIC0xOwp9CgpmdW5jdGlvbiBhcnJheVJlbW92ZShhcnJheSwgdmFsdWUpIHsKICB2YXIgaW5kZXggPSBpbmRleE9mKGFycmF5LCB2YWx1ZSk7CiAgaWYgKGluZGV4ID49MCkKICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7CiAgcmV0dXJuIHZhbHVlOwp9CgpmdW5jdGlvbiBpc0xlYWZOb2RlIChub2RlKSB7CiAgaWYgKG5vZGUpIHsKICAgIHN3aXRjaCAobm9kZS5ub2RlTmFtZSkgewogICAgY2FzZSAiT1BUSU9OIjoKICAgIGNhc2UgIlBSRSI6CiAgICBjYXNlICJUSVRMRSI6CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5jb3B5CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBgc291cmNlYCwgd2hpY2ggc2hvdWxkIGJlIGFuIG9iamVjdCBvciBhbiBhcnJheS4KICoKICogKiBJZiBubyBkZXN0aW5hdGlvbiBpcyBzdXBwbGllZCwgYSBjb3B5IG9mIHRoZSBvYmplY3Qgb3IgYXJyYXkgaXMgY3JlYXRlZC4KICogKiBJZiBhIGRlc3RpbmF0aW9uIGlzIHByb3ZpZGVkLCBhbGwgb2YgaXRzIGVsZW1lbnRzIChmb3IgYXJyYXkpIG9yIHByb3BlcnRpZXMgKGZvciBvYmplY3RzKQogKiAgIGFyZSBkZWxldGVkIGFuZCB0aGVuIGFsbCBlbGVtZW50cy9wcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZSBhcmUgY29waWVkIHRvIGl0LgogKiAqIElmIGBzb3VyY2VgIGlzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXkgKGluYy4gYG51bGxgIGFuZCBgdW5kZWZpbmVkYCksIGBzb3VyY2VgIGlzIHJldHVybmVkLgogKiAqIElmIGBzb3VyY2VgIGlzIGlkZW50aWNhbCB0byAnZGVzdGluYXRpb24nIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi4KICoKICogQHBhcmFtIHsqfSBzb3VyY2UgVGhlIHNvdXJjZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYWtlIGEgY29weS4KICogICAgICAgICAgICAgICAgICAgQ2FuIGJlIGFueSB0eXBlLCBpbmNsdWRpbmcgcHJpbWl0aXZlcywgYG51bGxgLCBhbmQgYHVuZGVmaW5lZGAuCiAqIEBwYXJhbSB7KE9iamVjdHxBcnJheSk9fSBkZXN0aW5hdGlvbiBEZXN0aW5hdGlvbiBpbnRvIHdoaWNoIHRoZSBzb3VyY2UgaXMgY29waWVkLiBJZgogKiAgICAgcHJvdmlkZWQsIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZSBhcyBgc291cmNlYC4KICogQHJldHVybnMgeyp9IFRoZSBjb3B5IG9yIHVwZGF0ZWQgYGRlc3RpbmF0aW9uYCwgaWYgYGRlc3RpbmF0aW9uYCB3YXMgc3BlY2lmaWVkLgogKgogKiBAZXhhbXBsZQogPGRvYzpleGFtcGxlPgogPGRvYzpzb3VyY2U+CiA8ZGl2IG5nLWNvbnRyb2xsZXI9IkNvbnRyb2xsZXIiPgogPGZvcm0gbm92YWxpZGF0ZSBjbGFzcz0ic2ltcGxlLWZvcm0iPgogTmFtZTogPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJ1c2VyLm5hbWUiIC8+PGJyIC8+CiBFLW1haWw6IDxpbnB1dCB0eXBlPSJlbWFpbCIgbmctbW9kZWw9InVzZXIuZW1haWwiIC8+PGJyIC8+CiBHZW5kZXI6IDxpbnB1dCB0eXBlPSJyYWRpbyIgbmctbW9kZWw9InVzZXIuZ2VuZGVyIiB2YWx1ZT0ibWFsZSIgLz5tYWxlCiA8aW5wdXQgdHlwZT0icmFkaW8iIG5nLW1vZGVsPSJ1c2VyLmdlbmRlciIgdmFsdWU9ImZlbWFsZSIgLz5mZW1hbGU8YnIgLz4KIDxidXR0b24gbmctY2xpY2s9InJlc2V0KCkiPlJFU0VUPC9idXR0b24+CiA8YnV0dG9uIG5nLWNsaWNrPSJ1cGRhdGUodXNlcikiPlNBVkU8L2J1dHRvbj4KIDwvZm9ybT4KIDxwcmU+Zm9ybSA9IHt7dXNlciB8IGpzb259fTwvcHJlPgogPHByZT5tYXN0ZXIgPSB7e21hc3RlciB8IGpzb259fTwvcHJlPgogPC9kaXY+CgogPHNjcmlwdD4KIGZ1bmN0aW9uIENvbnRyb2xsZXIoJHNjb3BlKSB7CiAgICAkc2NvcGUubWFzdGVyPSB7fTsKCiAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24odXNlcikgewogICAgICAvLyBFeGFtcGxlIHdpdGggMSBhcmd1bWVudAogICAgICAkc2NvcGUubWFzdGVyPSBhbmd1bGFyLmNvcHkodXNlcik7CiAgICB9OwoKICAgICRzY29wZS5yZXNldCA9IGZ1bmN0aW9uKCkgewogICAgICAvLyBFeGFtcGxlIHdpdGggMiBhcmd1bWVudHMKICAgICAgYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIsICRzY29wZS51c2VyKTsKICAgIH07CgogICAgJHNjb3BlLnJlc2V0KCk7CiAgfQogPC9zY3JpcHQ+CiA8L2RvYzpzb3VyY2U+CiA8L2RvYzpleGFtcGxlPgogKi8KZnVuY3Rpb24gY29weShzb3VyY2UsIGRlc3RpbmF0aW9uKXsKICBpZiAoaXNXaW5kb3coc291cmNlKSB8fCBpc1Njb3BlKHNvdXJjZSkpIHsKICAgIHRocm93IG5nTWluRXJyKCdjcHdzJywKICAgICAgIkNhbid0IGNvcHkhIE1ha2luZyBjb3BpZXMgb2YgV2luZG93IG9yIFNjb3BlIGluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLiIpOwogIH0KCiAgaWYgKCFkZXN0aW5hdGlvbikgewogICAgZGVzdGluYXRpb24gPSBzb3VyY2U7CiAgICBpZiAoc291cmNlKSB7CiAgICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IGNvcHkoc291cmNlLCBbXSk7CiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKHNvdXJjZSkpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IG5ldyBEYXRlKHNvdXJjZS5nZXRUaW1lKCkpOwogICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKHNvdXJjZSkpIHsKICAgICAgICBkZXN0aW5hdGlvbiA9IG5ldyBSZWdFeHAoc291cmNlLnNvdXJjZSk7CiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSkgewogICAgICAgIGRlc3RpbmF0aW9uID0gY29weShzb3VyY2UsIHt9KTsKICAgICAgfQogICAgfQogIH0gZWxzZSB7CiAgICBpZiAoc291cmNlID09PSBkZXN0aW5hdGlvbikgdGhyb3cgbmdNaW5FcnIoJ2NwaScsCiAgICAgICJDYW4ndCBjb3B5ISBTb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGFyZSBpZGVudGljYWwuIik7CiAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7CiAgICAgIGRlc3RpbmF0aW9uLmxlbmd0aCA9IDA7CiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykgewogICAgICAgIGRlc3RpbmF0aW9uLnB1c2goY29weShzb3VyY2VbaV0pKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdmFyIGggPSBkZXN0aW5hdGlvbi4kJGhhc2hLZXk7CiAgICAgIGZvckVhY2goZGVzdGluYXRpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpewogICAgICAgIGRlbGV0ZSBkZXN0aW5hdGlvbltrZXldOwogICAgICB9KTsKICAgICAgZm9yICggdmFyIGtleSBpbiBzb3VyY2UpIHsKICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weShzb3VyY2Vba2V5XSk7CiAgICAgIH0KICAgICAgc2V0SGFzaEtleShkZXN0aW5hdGlvbixoKTsKICAgIH0KICB9CiAgcmV0dXJuIGRlc3RpbmF0aW9uOwp9CgovKioKICogQ3JlYXRlIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdAogKi8KZnVuY3Rpb24gc2hhbGxvd0NvcHkoc3JjLCBkc3QpIHsKICBkc3QgPSBkc3QgfHwge307CgogIGZvcih2YXIga2V5IGluIHNyYykgewogICAgLy8gc2hhbGxvd0NvcHkgaXMgb25seSBldmVyIGNhbGxlZCBieSAkY29tcGlsZSBub2RlTGlua0ZuLCB3aGljaCBoYXMgY29udHJvbCBvdmVyIHNyYwogICAgLy8gc28gd2UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB1c2luZyBvdXIgY3VzdG9tIGhhc093blByb3BlcnR5IGhlcmUKICAgIGlmIChzcmMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkuY2hhckF0KDApICE9PSAnJCcgJiYga2V5LmNoYXJBdCgxKSAhPT0gJyQnKSB7CiAgICAgIGRzdFtrZXldID0gc3JjW2tleV07CiAgICB9CiAgfQoKICByZXR1cm4gZHN0Owp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmVxdWFscwogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIERldGVybWluZXMgaWYgdHdvIG9iamVjdHMgb3IgdHdvIHZhbHVlcyBhcmUgZXF1aXZhbGVudC4gU3VwcG9ydHMgdmFsdWUgdHlwZXMsIHJlZ3VsYXIKICogZXhwcmVzc2lvbnMsIGFycmF5cyBhbmQgb2JqZWN0cy4KICoKICogVHdvIG9iamVjdHMgb3IgdmFsdWVzIGFyZSBjb25zaWRlcmVkIGVxdWl2YWxlbnQgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcgaXMgdHJ1ZToKICoKICogKiBCb3RoIG9iamVjdHMgb3IgdmFsdWVzIHBhc3MgYD09PWAgY29tcGFyaXNvbi4KICogKiBCb3RoIG9iamVjdHMgb3IgdmFsdWVzIGFyZSBvZiB0aGUgc2FtZSB0eXBlIGFuZCBhbGwgb2YgdGhlaXIgcHJvcGVydGllcyBhcmUgZXF1YWwgYnkKICogICBjb21wYXJpbmcgdGhlbSB3aXRoIGBhbmd1bGFyLmVxdWFsc2AuCiAqICogQm90aCB2YWx1ZXMgYXJlIE5hTi4gKEluIEphdmFTY3JpcHQsIE5hTiA9PSBOYU4gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gTmFOIGFzIGVxdWFsKQogKiAqIEJvdGggdmFsdWVzIHJlcHJlc2VudCB0aGUgc2FtZSByZWd1bGFyIGV4cHJlc3Npb24gKEluIEphdmFzU2NyaXB0LAogKiAgIC9hYmMvID09IC9hYmMvID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXMgZXF1YWwgd2hlbiB0aGVpciB0ZXh0dWFsCiAqICAgcmVwcmVzZW50YXRpb24gbWF0Y2hlcykuCiAqCiAqIER1cmluZyBhIHByb3BlcnR5IGNvbXBhcmlzb24sIHByb3BlcnRpZXMgb2YgYGZ1bmN0aW9uYCB0eXBlIGFuZCBwcm9wZXJ0aWVzIHdpdGggbmFtZXMKICogdGhhdCBiZWdpbiB3aXRoIGAkYCBhcmUgaWdub3JlZC4KICoKICogU2NvcGUgYW5kIERPTVdpbmRvdyBvYmplY3RzIGFyZSBiZWluZyBjb21wYXJlZCBvbmx5IGJ5IGlkZW50aWZ5IChgPT09YCkuCiAqCiAqIEBwYXJhbSB7Kn0gbzEgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuCiAqIEBwYXJhbSB7Kn0gbzIgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuCiAqLwpmdW5jdGlvbiBlcXVhbHMobzEsIG8yKSB7CiAgaWYgKG8xID09PSBvMikgcmV0dXJuIHRydWU7CiAgaWYgKG8xID09PSBudWxsIHx8IG8yID09PSBudWxsKSByZXR1cm4gZmFsc2U7CiAgaWYgKG8xICE9PSBvMSAmJiBvMiAhPT0gbzIpIHJldHVybiB0cnVlOyAvLyBOYU4gPT09IE5hTgogIHZhciB0MSA9IHR5cGVvZiBvMSwgdDIgPSB0eXBlb2YgbzIsIGxlbmd0aCwga2V5LCBrZXlTZXQ7CiAgaWYgKHQxID09IHQyKSB7CiAgICBpZiAodDEgPT0gJ29iamVjdCcpIHsKICAgICAgaWYgKGlzQXJyYXkobzEpKSB7CiAgICAgICAgaWYgKCFpc0FycmF5KG8yKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmICgobGVuZ3RoID0gbzEubGVuZ3RoKSA9PSBvMi5sZW5ndGgpIHsKICAgICAgICAgIGZvcihrZXk9MDsga2V5PGxlbmd0aDsga2V5KyspIHsKICAgICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChpc0RhdGUobzEpKSB7CiAgICAgICAgcmV0dXJuIGlzRGF0ZShvMikgJiYgbzEuZ2V0VGltZSgpID09IG8yLmdldFRpbWUoKTsKICAgICAgfSBlbHNlIGlmIChpc1JlZ0V4cChvMSkgJiYgaXNSZWdFeHAobzIpKSB7CiAgICAgICAgcmV0dXJuIG8xLnRvU3RyaW5nKCkgPT0gbzIudG9TdHJpbmcoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoaXNTY29wZShvMSkgfHwgaXNTY29wZShvMikgfHwgaXNXaW5kb3cobzEpIHx8IGlzV2luZG93KG8yKSB8fCBpc0FycmF5KG8yKSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGtleVNldCA9IHt9OwogICAgICAgIGZvcihrZXkgaW4gbzEpIHsKICAgICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnJCcgfHwgaXNGdW5jdGlvbihvMVtrZXldKSkgY29udGludWU7CiAgICAgICAgICBpZiAoIWVxdWFscyhvMVtrZXldLCBvMltrZXldKSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAga2V5U2V0W2tleV0gPSB0cnVlOwogICAgICAgIH0KICAgICAgICBmb3Ioa2V5IGluIG8yKSB7CiAgICAgICAgICBpZiAoIWtleVNldC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmCiAgICAgICAgICAgICAga2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmCiAgICAgICAgICAgICAgbzJba2V5XSAhPT0gdW5kZWZpbmVkICYmCiAgICAgICAgICAgICAgIWlzRnVuY3Rpb24obzJba2V5XSkpIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9CgoKZnVuY3Rpb24gY3NwKCkgewogIHJldHVybiAoZG9jdW1lbnQuc2VjdXJpdHlQb2xpY3kgJiYgZG9jdW1lbnQuc2VjdXJpdHlQb2xpY3kuaXNBY3RpdmUpIHx8CiAgICAgIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yICYmCiAgICAgICEhKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuZy1jc3BdJykgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbmctY3NwXScpKSk7Cn0KCgpmdW5jdGlvbiBjb25jYXQoYXJyYXkxLCBhcnJheTIsIGluZGV4KSB7CiAgcmV0dXJuIGFycmF5MS5jb25jYXQoc2xpY2UuY2FsbChhcnJheTIsIGluZGV4KSk7Cn0KCmZ1bmN0aW9uIHNsaWNlQXJncyhhcmdzLCBzdGFydEluZGV4KSB7CiAgcmV0dXJuIHNsaWNlLmNhbGwoYXJncywgc3RhcnRJbmRleCB8fCAwKTsKfQoKCi8qIGpzaGludCAtVzEwMSAqLwovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIGFuZ3VsYXIuYmluZAogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBjYWxscyBmdW5jdGlvbiBgZm5gIGJvdW5kIHRvIGBzZWxmYCAoYHNlbGZgIGJlY29tZXMgdGhlIGB0aGlzYCBmb3IKICogYGZuYCkuIFlvdSBjYW4gc3VwcGx5IG9wdGlvbmFsIGBhcmdzYCB0aGF0IGFyZSBwcmVib3VuZCB0byB0aGUgZnVuY3Rpb24uIFRoaXMgZmVhdHVyZSBpcyBhbHNvCiAqIGtub3duIGFzIFtwYXJ0aWFsIGFwcGxpY2F0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BhcnRpYWxfYXBwbGljYXRpb24pLCBhcwogKiBkaXN0aW5ndWlzaGVkIGZyb20gW2Z1bmN0aW9uIGN1cnJ5aW5nXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1cnJ5aW5nI0NvbnRyYXN0X3dpdGhfcGFydGlhbF9mdW5jdGlvbl9hcHBsaWNhdGlvbikuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIENvbnRleHQgd2hpY2ggYGZuYCBzaG91bGQgYmUgZXZhbHVhdGVkIGluLgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEZ1bmN0aW9uIHRvIGJlIGJvdW5kLgogKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHByZWJvdW5kIHRvIHRoZSBgZm5gIGZ1bmN0aW9uIGNhbGwuCiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBGdW5jdGlvbiB0aGF0IHdyYXBzIHRoZSBgZm5gIHdpdGggYWxsIHRoZSBzcGVjaWZpZWQgYmluZGluZ3MuCiAqLwovKiBqc2hpbnQgK1cxMDEgKi8KZnVuY3Rpb24gYmluZChzZWxmLCBmbikgewogIHZhciBjdXJyeUFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDIpIDogW107CiAgaWYgKGlzRnVuY3Rpb24oZm4pICYmICEoZm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7CiAgICByZXR1cm4gY3VycnlBcmdzLmxlbmd0aAogICAgICA/IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgKICAgICAgICAgICAgPyBmbi5hcHBseShzZWxmLCBjdXJyeUFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSkpCiAgICAgICAgICAgIDogZm4uYXBwbHkoc2VsZiwgY3VycnlBcmdzKTsKICAgICAgICB9CiAgICAgIDogZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aAogICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cykKICAgICAgICAgICAgOiBmbi5jYWxsKHNlbGYpOwogICAgICAgIH07CiAgfSBlbHNlIHsKICAgIC8vIGluIElFLCBuYXRpdmUgbWV0aG9kcyBhcmUgbm90IGZ1bmN0aW9ucyBzbyB0aGV5IGNhbm5vdCBiZSBib3VuZCAobm90ZTogdGhleSBkb24ndCBuZWVkIHRvIGJlKQogICAgcmV0dXJuIGZuOwogIH0KfQoKCmZ1bmN0aW9uIHRvSnNvblJlcGxhY2VyKGtleSwgdmFsdWUpIHsKICB2YXIgdmFsID0gdmFsdWU7CgogIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnJCcpIHsKICAgIHZhbCA9IHVuZGVmaW5lZDsKICB9IGVsc2UgaWYgKGlzV2luZG93KHZhbHVlKSkgewogICAgdmFsID0gJyRXSU5ET1cnOwogIH0gZWxzZSBpZiAodmFsdWUgJiYgIGRvY3VtZW50ID09PSB2YWx1ZSkgewogICAgdmFsID0gJyRET0NVTUVOVCc7CiAgfSBlbHNlIGlmIChpc1Njb3BlKHZhbHVlKSkgewogICAgdmFsID0gJyRTQ09QRSc7CiAgfQoKICByZXR1cm4gdmFsOwp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLnRvSnNvbgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIFNlcmlhbGl6ZXMgaW5wdXQgaW50byBhIEpTT04tZm9ybWF0dGVkIHN0cmluZy4gUHJvcGVydGllcyB3aXRoIGxlYWRpbmcgJCBjaGFyYWN0ZXJzIHdpbGwgYmUKICogc3RyaXBwZWQgc2luY2UgYW5ndWxhciB1c2VzIHRoaXMgbm90YXRpb24gaW50ZXJuYWxseS4KICoKICogQHBhcmFtIHtPYmplY3R8QXJyYXl8RGF0ZXxzdHJpbmd8bnVtYmVyfSBvYmogSW5wdXQgdG8gYmUgc2VyaWFsaXplZCBpbnRvIEpTT04uCiAqIEBwYXJhbSB7Ym9vbGVhbj19IHByZXR0eSBJZiBzZXQgdG8gdHJ1ZSwgdGhlIEpTT04gb3V0cHV0IHdpbGwgY29udGFpbiBuZXdsaW5lcyBhbmQgd2hpdGVzcGFjZS4KICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IEpTT04taWZpZWQgc3RyaW5nIHJlcHJlc2VudGluZyBgb2JqYC4KICovCmZ1bmN0aW9uIHRvSnNvbihvYmosIHByZXR0eSkgewogIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHVuZGVmaW5lZDsKICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCB0b0pzb25SZXBsYWNlciwgcHJldHR5ID8gJyAgJyA6IG51bGwpOwp9CgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmZyb21Kc29uCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRGVzZXJpYWxpemVzIGEgSlNPTiBzdHJpbmcuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLgogKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fERhdGV8c3RyaW5nfG51bWJlcn0gRGVzZXJpYWxpemVkIHRoaW5neS4KICovCmZ1bmN0aW9uIGZyb21Kc29uKGpzb24pIHsKICByZXR1cm4gaXNTdHJpbmcoanNvbikKICAgICAgPyBKU09OLnBhcnNlKGpzb24pCiAgICAgIDoganNvbjsKfQoKCmZ1bmN0aW9uIHRvQm9vbGVhbih2YWx1ZSkgewogIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHsKICAgIHZhbHVlID0gdHJ1ZTsKICB9IGVsc2UgaWYgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCAhPT0gMCkgewogICAgdmFyIHYgPSBsb3dlcmNhc2UoIiIgKyB2YWx1ZSk7CiAgICB2YWx1ZSA9ICEodiA9PSAnZicgfHwgdiA9PSAnMCcgfHwgdiA9PSAnZmFsc2UnIHx8IHYgPT0gJ25vJyB8fCB2ID09ICduJyB8fCB2ID09ICdbXScpOwogIH0gZWxzZSB7CiAgICB2YWx1ZSA9IGZhbHNlOwogIH0KICByZXR1cm4gdmFsdWU7Cn0KCi8qKgogKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGVsZW1lbnQuCiAqLwpmdW5jdGlvbiBzdGFydGluZ1RhZyhlbGVtZW50KSB7CiAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KS5jbG9uZSgpOwogIHRyeSB7CiAgICAvLyB0dXJucyBvdXQgSUUgZG9lcyBub3QgbGV0IHlvdSBzZXQgLmh0bWwoKSBvbiBlbGVtZW50cyB3aGljaAogICAgLy8gYXJlIG5vdCBhbGxvd2VkIHRvIGhhdmUgY2hpbGRyZW4uIFNvIHdlIGp1c3QgaWdub3JlIGl0LgogICAgZWxlbWVudC5lbXB0eSgpOwogIH0gY2F0Y2goZSkge30KICAvLyBBcyBQZXIgRE9NIFN0YW5kYXJkcwogIHZhciBURVhUX05PREUgPSAzOwogIHZhciBlbGVtSHRtbCA9IGpxTGl0ZSgnPGRpdj4nKS5hcHBlbmQoZWxlbWVudCkuaHRtbCgpOwogIHRyeSB7CiAgICByZXR1cm4gZWxlbWVudFswXS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFID8gbG93ZXJjYXNlKGVsZW1IdG1sKSA6CiAgICAgICAgZWxlbUh0bWwuCiAgICAgICAgICBtYXRjaCgvXig8W14+XSs+KS8pWzFdLgogICAgICAgICAgcmVwbGFjZSgvXjwoW1x3XC1dKykvLCBmdW5jdGlvbihtYXRjaCwgbm9kZU5hbWUpIHsgcmV0dXJuICc8JyArIGxvd2VyY2FzZShub2RlTmFtZSk7IH0pOwogIH0gY2F0Y2goZSkgewogICAgcmV0dXJuIGxvd2VyY2FzZShlbGVtSHRtbCk7CiAgfQoKfQoKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8qKgogKiBUcmllcyB0byBkZWNvZGUgdGhlIFVSSSBjb21wb25lbnQgd2l0aG91dCB0aHJvd2luZyBhbiBleGNlcHRpb24uCiAqCiAqIEBwcml2YXRlCiAqIEBwYXJhbSBzdHIgdmFsdWUgcG90ZW50aWFsIFVSSSBjb21wb25lbnQgdG8gY2hlY2suCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgY2FuIGJlIGRlY29kZWQKICogd2l0aCB0aGUgZGVjb2RlVVJJQ29tcG9uZW50IGZ1bmN0aW9uLgogKi8KZnVuY3Rpb24gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSB7CiAgdHJ5IHsKICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpOwogIH0gY2F0Y2goZSkgewogICAgLy8gSWdub3JlIGFueSBpbnZhbGlkIHVyaSBjb21wb25lbnQKICB9Cn0KCgovKioKICogUGFyc2VzIGFuIGVzY2FwZWQgdXJsIHF1ZXJ5IHN0cmluZyBpbnRvIGtleS12YWx1ZSBwYWlycy4KICogQHJldHVybnMgT2JqZWN0Ljwoc3RyaW5nfGJvb2xlYW4pPgogKi8KZnVuY3Rpb24gcGFyc2VLZXlWYWx1ZSgvKipzdHJpbmcqL2tleVZhbHVlKSB7CiAgdmFyIG9iaiA9IHt9LCBrZXlfdmFsdWUsIGtleTsKICBmb3JFYWNoKChrZXlWYWx1ZSB8fCAiIikuc3BsaXQoJyYnKSwgZnVuY3Rpb24oa2V5VmFsdWUpewogICAgaWYgKCBrZXlWYWx1ZSApIHsKICAgICAga2V5X3ZhbHVlID0ga2V5VmFsdWUuc3BsaXQoJz0nKTsKICAgICAga2V5ID0gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleV92YWx1ZVswXSk7CiAgICAgIGlmICggaXNEZWZpbmVkKGtleSkgKSB7CiAgICAgICAgdmFyIHZhbCA9IGlzRGVmaW5lZChrZXlfdmFsdWVbMV0pID8gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleV92YWx1ZVsxXSkgOiB0cnVlOwogICAgICAgIGlmICghb2JqW2tleV0pIHsKICAgICAgICAgIG9ialtrZXldID0gdmFsOwogICAgICAgIH0gZWxzZSBpZihpc0FycmF5KG9ialtrZXldKSkgewogICAgICAgICAgb2JqW2tleV0ucHVzaCh2YWwpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBvYmpba2V5XSA9IFtvYmpba2V5XSx2YWxdOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0pOwogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIHRvS2V5VmFsdWUob2JqKSB7CiAgdmFyIHBhcnRzID0gW107CiAgZm9yRWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgIGlmIChpc0FycmF5KHZhbHVlKSkgewogICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihhcnJheVZhbHVlKSB7CiAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXksIHRydWUpICsKICAgICAgICAgICAgICAgICAgIChhcnJheVZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeShhcnJheVZhbHVlLCB0cnVlKSkpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgKwogICAgICAgICAgICAgICAodmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KHZhbHVlLCB0cnVlKSkpOwogICAgfQogIH0pOwogIHJldHVybiBwYXJ0cy5sZW5ndGggPyBwYXJ0cy5qb2luKCcmJykgOiAnJzsKfQoKCi8qKgogKiBXZSBuZWVkIG91ciBjdXN0b20gbWV0aG9kIGJlY2F1c2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ2dyZXNzaXZlIGFuZCBkb2Vzbid0IGZvbGxvdwogKiBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCB3aXRoIHJlZ2FyZHMgdG8gdGhlIGNoYXJhY3RlciBzZXQgKHBjaGFyKSBhbGxvd2VkIGluIHBhdGgKICogc2VnbWVudHM6CiAqICAgIHNlZ21lbnQgICAgICAgPSAqcGNoYXIKICogICAgcGNoYXIgICAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyAiOiIgLyAiQCIKICogICAgcGN0LWVuY29kZWQgICA9ICIlIiBIRVhESUcgSEVYRElHCiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gIi0iIC8gIi4iIC8gIl8iIC8gIn4iCiAqICAgIHN1Yi1kZWxpbXMgICAgPSAiISIgLyAiJCIgLyAiJiIgLyAiJyIgLyAiKCIgLyAiKSIKICogICAgICAgICAgICAgICAgICAgICAvICIqIiAvICIrIiAvICIsIiAvICI7IiAvICI9IgogKi8KZnVuY3Rpb24gZW5jb2RlVXJpU2VnbWVudCh2YWwpIHsKICByZXR1cm4gZW5jb2RlVXJpUXVlcnkodmFsLCB0cnVlKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyUyNi9naSwgJyYnKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyUzRC9naSwgJz0nKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyUyQi9naSwgJysnKTsKfQoKCi8qKgogKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZW5jb2RpbmcgKmtleSogb3IgKnZhbHVlKiBwYXJ0cyBvZiBxdWVyeSBjb21wb25lbnQuIFdlIG5lZWQgYSBjdXN0b20KICogbWV0aG9kIGJlY2F1c2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ2dyZXNzaXZlIGFuZCBlbmNvZGVzIHN0dWZmIHRoYXQgZG9lc24ndCBoYXZlIHRvIGJlCiAqIGVuY29kZWQgcGVyIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODY6CiAqICAgIHF1ZXJ5ICAgICAgID0gKiggcGNoYXIgLyAiLyIgLyAiPyIgKQogKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvICI6IiAvICJAIgogKiAgICB1bnJlc2VydmVkICAgID0gQUxQSEEgLyBESUdJVCAvICItIiAvICIuIiAvICJfIiAvICJ+IgogKiAgICBwY3QtZW5jb2RlZCAgID0gIiUiIEhFWERJRyBIRVhESUcKICogICAgc3ViLWRlbGltcyAgICA9ICIhIiAvICIkIiAvICImIiAvICInIiAvICIoIiAvICIpIgogKiAgICAgICAgICAgICAgICAgICAgIC8gIioiIC8gIisiIC8gIiwiIC8gIjsiIC8gIj0iCiAqLwpmdW5jdGlvbiBlbmNvZGVVcmlRdWVyeSh2YWwsIHBjdEVuY29kZVNwYWNlcykgewogIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS4KICAgICAgICAgICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLgogICAgICAgICAgICAgcmVwbGFjZSgvJTIwL2csIChwY3RFbmNvZGVTcGFjZXMgPyAnJTIwJyA6ICcrJykpOwp9CgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQXBwCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2FuZ3VsYXIuTW9kdWxlfSBuZ0FwcCBhbiBvcHRpb25hbCBhcHBsaWNhdGlvbgogKiAgIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGV9IG5hbWUgdG8gbG9hZC4KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB0byAqKmF1dG8tYm9vdHN0cmFwKiogYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uLiBUaGUgYG5nQXBwYCBkaXJlY3RpdmUKICogZGVzaWduYXRlcyB0aGUgKipyb290IGVsZW1lbnQqKiBvZiB0aGUgYXBwbGljYXRpb24gYW5kIGlzIHR5cGljYWxseSBwbGFjZWQgbmVhciB0aGUgcm9vdCBlbGVtZW50CiAqIG9mIHRoZSBwYWdlIC0gZS5nLiBvbiB0aGUgYDxib2R5PmAgb3IgYDxodG1sPmAgdGFncy4KICoKICogT25seSBvbmUgQW5ndWxhckpTIGFwcGxpY2F0aW9uIGNhbiBiZSBhdXRvLWJvb3RzdHJhcHBlZCBwZXIgSFRNTCBkb2N1bWVudC4gVGhlIGZpcnN0IGBuZ0FwcGAKICogZm91bmQgaW4gdGhlIGRvY3VtZW50IHdpbGwgYmUgdXNlZCB0byBkZWZpbmUgdGhlIHJvb3QgZWxlbWVudCB0byBhdXRvLWJvb3RzdHJhcCBhcyBhbgogKiBhcHBsaWNhdGlvbi4gVG8gcnVuIG11bHRpcGxlIGFwcGxpY2F0aW9ucyBpbiBhbiBIVE1MIGRvY3VtZW50IHlvdSBtdXN0IG1hbnVhbGx5IGJvb3RzdHJhcCB0aGVtIHVzaW5nCiAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gaW5zdGVhZC4gQW5ndWxhckpTIGFwcGxpY2F0aW9ucyBjYW5ub3QgYmUgbmVzdGVkIHdpdGhpbiBlYWNoIG90aGVyLgogKgogKiBZb3UgY2FuIHNwZWNpZnkgYW4gKipBbmd1bGFySlMgbW9kdWxlKiogdG8gYmUgdXNlZCBhcyB0aGUgcm9vdCBtb2R1bGUgZm9yIHRoZSBhcHBsaWNhdGlvbi4gIFRoaXMKICogbW9kdWxlIHdpbGwgYmUgbG9hZGVkIGludG8gdGhlIHtAbGluayBBVVRPLiRpbmplY3Rvcn0gd2hlbiB0aGUgYXBwbGljYXRpb24gaXMgYm9vdHN0cmFwcGVkIGFuZAogKiBzaG91bGQgY29udGFpbiB0aGUgYXBwbGljYXRpb24gY29kZSBuZWVkZWQgb3IgaGF2ZSBkZXBlbmRlbmNpZXMgb24gb3RoZXIgbW9kdWxlcyB0aGF0IHdpbGwKICogY29udGFpbiB0aGUgY29kZS4gU2VlIHtAbGluayBhbmd1bGFyLm1vZHVsZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uCiAqCiAqIEluIHRoZSBleGFtcGxlIGJlbG93IGlmIHRoZSBgbmdBcHBgIGRpcmVjdGl2ZSB3ZXJlIG5vdCBwbGFjZWQgb24gdGhlIGBodG1sYCBlbGVtZW50IHRoZW4gdGhlCiAqIGRvY3VtZW50IHdvdWxkIG5vdCBiZSBjb21waWxlZCwgdGhlIGBBcHBDb250cm9sbGVyYCB3b3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGFuZCB0aGUgYHt7IGErYiB9fWAKICogd291bGQgbm90IGJlIHJlc29sdmVkIHRvIGAzYC4KICoKICogYG5nQXBwYCBpcyB0aGUgZWFzaWVzdCwgYW5kIG1vc3QgY29tbW9uLCB3YXkgdG8gYm9vdHN0cmFwIGFuIGFwcGxpY2F0aW9uLgogKgogPGV4YW1wbGUgbW9kdWxlPSJuZ0FwcERlbW8iPgogICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgPGRpdiBuZy1jb250cm9sbGVyPSJuZ0FwcERlbW9Db250cm9sbGVyIj4KICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19CiAgIDwvZmlsZT4KICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgYW5ndWxhci5tb2R1bGUoJ25nQXBwRGVtbycsIFtdKS5jb250cm9sbGVyKCduZ0FwcERlbW9Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7CiAgICAgJHNjb3BlLmEgPSAxOwogICAgICRzY29wZS5iID0gMjsKICAgfSk7CiAgIDwvZmlsZT4KIDwvZXhhbXBsZT4KICoKICovCmZ1bmN0aW9uIGFuZ3VsYXJJbml0KGVsZW1lbnQsIGJvb3RzdHJhcCkgewogIHZhciBlbGVtZW50cyA9IFtlbGVtZW50XSwKICAgICAgYXBwRWxlbWVudCwKICAgICAgbW9kdWxlLAogICAgICBuYW1lcyA9IFsnbmc6YXBwJywgJ25nLWFwcCcsICd4LW5nLWFwcCcsICdkYXRhLW5nLWFwcCddLAogICAgICBOR19BUFBfQ0xBU1NfUkVHRVhQID0gL1xzbmdbOlwtXWFwcCg6XHMqKFtcd1xkX10rKTs/KT9ccy87CgogIGZ1bmN0aW9uIGFwcGVuZChlbGVtZW50KSB7CiAgICBlbGVtZW50ICYmIGVsZW1lbnRzLnB1c2goZWxlbWVudCk7CiAgfQoKICBmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbihuYW1lKSB7CiAgICBuYW1lc1tuYW1lXSA9IHRydWU7CiAgICBhcHBlbmQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobmFtZSkpOwogICAgbmFtZSA9IG5hbWUucmVwbGFjZSgnOicsICdcXDonKTsKICAgIGlmIChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpIHsKICAgICAgZm9yRWFjaChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgbmFtZSksIGFwcGVuZCk7CiAgICAgIGZvckVhY2goZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIG5hbWUgKyAnXFw6JyksIGFwcGVuZCk7CiAgICAgIGZvckVhY2goZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbJyArIG5hbWUgKyAnXScpLCBhcHBlbmQpOwogICAgfQogIH0pOwoKICBmb3JFYWNoKGVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBpZiAoIWFwcEVsZW1lbnQpIHsKICAgICAgdmFyIGNsYXNzTmFtZSA9ICcgJyArIGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnOwogICAgICB2YXIgbWF0Y2ggPSBOR19BUFBfQ0xBU1NfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKTsKICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgYXBwRWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgICAgbW9kdWxlID0gKG1hdGNoWzJdIHx8ICcnKS5yZXBsYWNlKC9ccysvZywgJywnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmb3JFYWNoKGVsZW1lbnQuYXR0cmlidXRlcywgZnVuY3Rpb24oYXR0cikgewogICAgICAgICAgaWYgKCFhcHBFbGVtZW50ICYmIG5hbWVzW2F0dHIubmFtZV0pIHsKICAgICAgICAgICAgYXBwRWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgICAgICAgIG1vZHVsZSA9IGF0dHIudmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9KTsKICBpZiAoYXBwRWxlbWVudCkgewogICAgYm9vdHN0cmFwKGFwcEVsZW1lbnQsIG1vZHVsZSA/IFttb2R1bGVdIDogW10pOwogIH0KfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmJvb3RzdHJhcAogKiBAZGVzY3JpcHRpb24KICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gbWFudWFsbHkgc3RhcnQgdXAgYW5ndWxhciBhcHBsaWNhdGlvbi4KICoKICogU2VlOiB7QGxpbmsgZ3VpZGUvYm9vdHN0cmFwIEJvb3RzdHJhcH0KICoKICogTm90ZSB0aGF0IG5nU2NlbmFyaW8tYmFzZWQgZW5kLXRvLWVuZCB0ZXN0cyBjYW5ub3QgdXNlIHRoaXMgZnVuY3Rpb24gdG8gYm9vdHN0cmFwIG1hbnVhbGx5LgogKiBUaGV5IG11c3QgdXNlIHtAbGluayBhcGkvbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfS4KICoKICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uCiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfEZ1bmN0aW9ufEFycmF5Pj19IG1vZHVsZXMgYW4gYXJyYXkgb2YgbW9kdWxlcyB0byBsb2FkIGludG8gdGhlIGFwcGxpY2F0aW9uLgogKiAgICAgRWFjaCBpdGVtIGluIHRoZSBhcnJheSBzaG91bGQgYmUgdGhlIG5hbWUgb2YgYSBwcmVkZWZpbmVkIG1vZHVsZSBvciBhIChESSBhbm5vdGF0ZWQpCiAqICAgICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBieSB0aGUgaW5qZWN0b3IgYXMgYSBydW4gYmxvY2suCiAqICAgICBTZWU6IHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfQogKiBAcmV0dXJucyB7QVVUTy4kaW5qZWN0b3J9IFJldHVybnMgdGhlIG5ld2x5IGNyZWF0ZWQgaW5qZWN0b3IgZm9yIHRoaXMgYXBwLgogKi8KZnVuY3Rpb24gYm9vdHN0cmFwKGVsZW1lbnQsIG1vZHVsZXMpIHsKICB2YXIgZG9Cb290c3RyYXAgPSBmdW5jdGlvbigpIHsKICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7CgogICAgaWYgKGVsZW1lbnQuaW5qZWN0b3IoKSkgewogICAgICB2YXIgdGFnID0gKGVsZW1lbnRbMF0gPT09IGRvY3VtZW50KSA/ICdkb2N1bWVudCcgOiBzdGFydGluZ1RhZyhlbGVtZW50KTsKICAgICAgdGhyb3cgbmdNaW5FcnIoJ2J0c3RycGQnLCAiQXBwIEFscmVhZHkgQm9vdHN0cmFwcGVkIHdpdGggdGhpcyBFbGVtZW50ICd7MH0nIiwgdGFnKTsKICAgIH0KCiAgICBtb2R1bGVzID0gbW9kdWxlcyB8fCBbXTsKICAgIG1vZHVsZXMudW5zaGlmdChbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHsKICAgICAgJHByb3ZpZGUudmFsdWUoJyRyb290RWxlbWVudCcsIGVsZW1lbnQpOwogICAgfV0pOwogICAgbW9kdWxlcy51bnNoaWZ0KCduZycpOwogICAgdmFyIGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobW9kdWxlcyk7CiAgICBpbmplY3Rvci5pbnZva2UoWyckcm9vdFNjb3BlJywgJyRyb290RWxlbWVudCcsICckY29tcGlsZScsICckaW5qZWN0b3InLCAnJGFuaW1hdGUnLAogICAgICAgZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGNvbXBpbGUsIGluamVjdG9yLCBhbmltYXRlKSB7CiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgZWxlbWVudC5kYXRhKCckaW5qZWN0b3InLCBpbmplY3Rvcik7CiAgICAgICAgICBjb21waWxlKGVsZW1lbnQpKHNjb3BlKTsKICAgICAgICB9KTsKICAgICAgfV0KICAgICk7CiAgICByZXR1cm4gaW5qZWN0b3I7CiAgfTsKCiAgdmFyIE5HX0RFRkVSX0JPT1RTVFJBUCA9IC9eTkdfREVGRVJfQk9PVFNUUkFQIS87CgogIGlmICh3aW5kb3cgJiYgIU5HX0RFRkVSX0JPT1RTVFJBUC50ZXN0KHdpbmRvdy5uYW1lKSkgewogICAgcmV0dXJuIGRvQm9vdHN0cmFwKCk7CiAgfQoKICB3aW5kb3cubmFtZSA9IHdpbmRvdy5uYW1lLnJlcGxhY2UoTkdfREVGRVJfQk9PVFNUUkFQLCAnJyk7CiAgYW5ndWxhci5yZXN1bWVCb290c3RyYXAgPSBmdW5jdGlvbihleHRyYU1vZHVsZXMpIHsKICAgIGZvckVhY2goZXh0cmFNb2R1bGVzLCBmdW5jdGlvbihtb2R1bGUpIHsKICAgICAgbW9kdWxlcy5wdXNoKG1vZHVsZSk7CiAgICB9KTsKICAgIGRvQm9vdHN0cmFwKCk7CiAgfTsKfQoKdmFyIFNOQUtFX0NBU0VfUkVHRVhQID0gL1tBLVpdL2c7CmZ1bmN0aW9uIHNuYWtlX2Nhc2UobmFtZSwgc2VwYXJhdG9yKXsKICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJ18nOwogIHJldHVybiBuYW1lLnJlcGxhY2UoU05BS0VfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7CiAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpOwogIH0pOwp9CgpmdW5jdGlvbiBiaW5kSlF1ZXJ5KCkgewogIC8vIGJpbmQgdG8galF1ZXJ5IGlmIHByZXNlbnQ7CiAgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTsKICAvLyByZXNldCB0byBqUXVlcnkgb3IgZGVmYXVsdCB0byB1cy4KICBpZiAoalF1ZXJ5KSB7CiAgICBqcUxpdGUgPSBqUXVlcnk7CiAgICBleHRlbmQoalF1ZXJ5LmZuLCB7CiAgICAgIHNjb3BlOiBKUUxpdGVQcm90b3R5cGUuc2NvcGUsCiAgICAgIGlzb2xhdGVTY29wZTogSlFMaXRlUHJvdG90eXBlLmlzb2xhdGVTY29wZSwKICAgICAgY29udHJvbGxlcjogSlFMaXRlUHJvdG90eXBlLmNvbnRyb2xsZXIsCiAgICAgIGluamVjdG9yOiBKUUxpdGVQcm90b3R5cGUuaW5qZWN0b3IsCiAgICAgIGluaGVyaXRlZERhdGE6IEpRTGl0ZVByb3RvdHlwZS5pbmhlcml0ZWREYXRhCiAgICB9KTsKICAgIC8vIE1ldGhvZCBzaWduYXR1cmU6CiAgICAvLyAgICAganFMaXRlUGF0Y2hKUXVlcnlSZW1vdmUobmFtZSwgZGlzcGF0Y2hUaGlzLCBmaWx0ZXJFbGVtcywgZ2V0dGVySWZOb0FyZ3VtZW50cykKICAgIGpxTGl0ZVBhdGNoSlF1ZXJ5UmVtb3ZlKCdyZW1vdmUnLCB0cnVlLCB0cnVlLCBmYWxzZSk7CiAgICBqcUxpdGVQYXRjaEpRdWVyeVJlbW92ZSgnZW1wdHknLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTsKICAgIGpxTGl0ZVBhdGNoSlF1ZXJ5UmVtb3ZlKCdodG1sJywgZmFsc2UsIGZhbHNlLCB0cnVlKTsKICB9IGVsc2UgewogICAganFMaXRlID0gSlFMaXRlOwogIH0KICBhbmd1bGFyLmVsZW1lbnQgPSBqcUxpdGU7Cn0KCi8qKgogKiB0aHJvdyBlcnJvciBpZiB0aGUgYXJndW1lbnQgaXMgZmFsc3kuCiAqLwpmdW5jdGlvbiBhc3NlcnRBcmcoYXJnLCBuYW1lLCByZWFzb24pIHsKICBpZiAoIWFyZykgewogICAgdGhyb3cgbmdNaW5FcnIoJ2FyZXEnLCAiQXJndW1lbnQgJ3swfScgaXMgezF9IiwgKG5hbWUgfHwgJz8nKSwgKHJlYXNvbiB8fCAicmVxdWlyZWQiKSk7CiAgfQogIHJldHVybiBhcmc7Cn0KCmZ1bmN0aW9uIGFzc2VydEFyZ0ZuKGFyZywgbmFtZSwgYWNjZXB0QXJyYXlBbm5vdGF0aW9uKSB7CiAgaWYgKGFjY2VwdEFycmF5QW5ub3RhdGlvbiAmJiBpc0FycmF5KGFyZykpIHsKICAgICAgYXJnID0gYXJnW2FyZy5sZW5ndGggLSAxXTsKICB9CgogIGFzc2VydEFyZyhpc0Z1bmN0aW9uKGFyZyksIG5hbWUsICdub3QgYSBmdW5jdGlvbiwgZ290ICcgKwogICAgICAoYXJnICYmIHR5cGVvZiBhcmcgPT0gJ29iamVjdCcgPyBhcmcuY29uc3RydWN0b3IubmFtZSB8fCAnT2JqZWN0JyA6IHR5cGVvZiBhcmcpKTsKICByZXR1cm4gYXJnOwp9CgovKioKICogdGhyb3cgZXJyb3IgaWYgdGhlIG5hbWUgZ2l2ZW4gaXMgaGFzT3duUHJvcGVydHkKICogQHBhcmFtICB7U3RyaW5nfSBuYW1lICAgIHRoZSBuYW1lIHRvIHRlc3QKICogQHBhcmFtICB7U3RyaW5nfSBjb250ZXh0IHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBuYW1lIGlzIHVzZWQsIHN1Y2ggYXMgbW9kdWxlIG9yIGRpcmVjdGl2ZQogKi8KZnVuY3Rpb24gYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgY29udGV4dCkgewogIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7CiAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICJoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZSIsIGNvbnRleHQpOwogIH0KfQoKLyoqCiAqIFJldHVybiB0aGUgdmFsdWUgYWNjZXNzaWJsZSBmcm9tIHRoZSBvYmplY3QgYnkgcGF0aC4gQW55IHVuZGVmaW5lZCB0cmF2ZXJzYWxzIGFyZSBpZ25vcmVkCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogc3RhcnRpbmcgb2JqZWN0CiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIHBhdGggdG8gdHJhdmVyc2UKICogQHBhcmFtIHtib29sZWFuPXRydWV9IGJpbmRGblRvU2NvcGUKICogQHJldHVybnMgdmFsdWUgYXMgYWNjZXNzaWJsZSBieSBwYXRoCiAqLwovL1RPRE8obWlza28pOiB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJlbW92ZWQKZnVuY3Rpb24gZ2V0dGVyKG9iaiwgcGF0aCwgYmluZEZuVG9TY29wZSkgewogIGlmICghcGF0aCkgcmV0dXJuIG9iajsKICB2YXIga2V5cyA9IHBhdGguc3BsaXQoJy4nKTsKICB2YXIga2V5OwogIHZhciBsYXN0SW5zdGFuY2UgPSBvYmo7CiAgdmFyIGxlbiA9IGtleXMubGVuZ3RoOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBrZXkgPSBrZXlzW2ldOwogICAgaWYgKG9iaikgewogICAgICBvYmogPSAobGFzdEluc3RhbmNlID0gb2JqKVtrZXldOwogICAgfQogIH0KICBpZiAoIWJpbmRGblRvU2NvcGUgJiYgaXNGdW5jdGlvbihvYmopKSB7CiAgICByZXR1cm4gYmluZChsYXN0SW5zdGFuY2UsIG9iaik7CiAgfQogIHJldHVybiBvYmo7Cn0KCi8qKgogKiBSZXR1cm4gdGhlIERPTSBzaWJsaW5ncyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBub2RlIGluIHRoZSBnaXZlbiBhcnJheS4KICogQHBhcmFtIHtBcnJheX0gYXJyYXkgbGlrZSBvYmplY3QKICogQHJldHVybnMgalFsaXRlIG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50cwogKi8KZnVuY3Rpb24gZ2V0QmxvY2tFbGVtZW50cyhub2RlcykgewogIHZhciBzdGFydE5vZGUgPSBub2Rlc1swXSwKICAgICAgZW5kTm9kZSA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdOwogIGlmIChzdGFydE5vZGUgPT09IGVuZE5vZGUpIHsKICAgIHJldHVybiBqcUxpdGUoc3RhcnROb2RlKTsKICB9CgogIHZhciBlbGVtZW50ID0gc3RhcnROb2RlOwogIHZhciBlbGVtZW50cyA9IFtlbGVtZW50XTsKCiAgZG8gewogICAgZWxlbWVudCA9IGVsZW1lbnQubmV4dFNpYmxpbmc7CiAgICBpZiAoIWVsZW1lbnQpIGJyZWFrOwogICAgZWxlbWVudHMucHVzaChlbGVtZW50KTsKICB9IHdoaWxlIChlbGVtZW50ICE9PSBlbmROb2RlKTsKCiAgcmV0dXJuIGpxTGl0ZShlbGVtZW50cyk7Cn0KCi8qKgogKiBAbmdkb2MgaW50ZXJmYWNlCiAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBJbnRlcmZhY2UgZm9yIGNvbmZpZ3VyaW5nIGFuZ3VsYXIge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9LgogKi8KCmZ1bmN0aW9uIHNldHVwTW9kdWxlTG9hZGVyKHdpbmRvdykgewoKICB2YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTsKICB2YXIgbmdNaW5FcnIgPSBtaW5FcnIoJ25nJyk7CgogIGZ1bmN0aW9uIGVuc3VyZShvYmosIG5hbWUsIGZhY3RvcnkpIHsKICAgIHJldHVybiBvYmpbbmFtZV0gfHwgKG9ialtuYW1lXSA9IGZhY3RvcnkoKSk7CiAgfQoKICB2YXIgYW5ndWxhciA9IGVuc3VyZSh3aW5kb3csICdhbmd1bGFyJywgT2JqZWN0KTsKCiAgLy8gV2UgbmVlZCB0byBleHBvc2UgYGFuZ3VsYXIuJCRtaW5FcnJgIHRvIG1vZHVsZXMgc3VjaCBhcyBgbmdSZXNvdXJjZWAgdGhhdCByZWZlcmVuY2UgaXQgZHVyaW5nIGJvb3RzdHJhcAogIGFuZ3VsYXIuJCRtaW5FcnIgPSBhbmd1bGFyLiQkbWluRXJyIHx8IG1pbkVycjsKCiAgcmV0dXJuIGVuc3VyZShhbmd1bGFyLCAnbW9kdWxlJywgZnVuY3Rpb24oKSB7CiAgICAvKiogQHR5cGUge09iamVjdC48c3RyaW5nLCBhbmd1bGFyLk1vZHVsZT59ICovCiAgICB2YXIgbW9kdWxlcyA9IHt9OwoKICAgIC8qKgogICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgKiBAbmFtZSBhbmd1bGFyLm1vZHVsZQogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKgogICAgICogVGhlIGBhbmd1bGFyLm1vZHVsZWAgaXMgYSBnbG9iYWwgcGxhY2UgZm9yIGNyZWF0aW5nLCByZWdpc3RlcmluZyBhbmQgcmV0cmlldmluZyBBbmd1bGFyCiAgICAgKiBtb2R1bGVzLgogICAgICogQWxsIG1vZHVsZXMgKGFuZ3VsYXIgY29yZSBvciAzcmQgcGFydHkpIHRoYXQgc2hvdWxkIGJlIGF2YWlsYWJsZSB0byBhbiBhcHBsaWNhdGlvbiBtdXN0IGJlCiAgICAgKiByZWdpc3RlcmVkIHVzaW5nIHRoaXMgbWVjaGFuaXNtLgogICAgICoKICAgICAqIFdoZW4gcGFzc2VkIHR3byBvciBtb3JlIGFyZ3VtZW50cywgYSBuZXcgbW9kdWxlIGlzIGNyZWF0ZWQuICBJZiBwYXNzZWQgb25seSBvbmUgYXJndW1lbnQsIGFuCiAgICAgKiBleGlzdGluZyBtb2R1bGUgKHRoZSBuYW1lIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gYG1vZHVsZWApIGlzIHJldHJpZXZlZC4KICAgICAqCiAgICAgKgogICAgICogIyBNb2R1bGUKICAgICAqCiAgICAgKiBBIG1vZHVsZSBpcyBhIGNvbGxlY3Rpb24gb2Ygc2VydmljZXMsIGRpcmVjdGl2ZXMsIGZpbHRlcnMsIGFuZCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLgogICAgICogYGFuZ3VsYXIubW9kdWxlYCBpcyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIEFVVE8uJGluamVjdG9yICRpbmplY3Rvcn0uCiAgICAgKgogICAgICogPHByZT4KICAgICAqIC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUKICAgICAqIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScsIFtdKTsKICAgICAqCiAgICAgKiAvLyByZWdpc3RlciBhIG5ldyBzZXJ2aWNlCiAgICAgKiBteU1vZHVsZS52YWx1ZSgnYXBwTmFtZScsICdNeUNvb2xBcHAnKTsKICAgICAqCiAgICAgKiAvLyBjb25maWd1cmUgZXhpc3Rpbmcgc2VydmljZXMgaW5zaWRlIGluaXRpYWxpemF0aW9uIGJsb2Nrcy4KICAgICAqIG15TW9kdWxlLmNvbmZpZyhmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlcikgewogICAgICogICAvLyBDb25maWd1cmUgZXhpc3RpbmcgcHJvdmlkZXJzCiAgICAgKiAgICRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoJyEnKTsKICAgICAqIH0pOwogICAgICogPC9wcmU+CiAgICAgKgogICAgICogVGhlbiB5b3UgY2FuIGNyZWF0ZSBhbiBpbmplY3RvciBhbmQgbG9hZCB5b3VyIG1vZHVsZXMgbGlrZSB0aGlzOgogICAgICoKICAgICAqIDxwcmU+CiAgICAgKiB2YXIgaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKFsnbmcnLCAnTXlNb2R1bGUnXSkKICAgICAqIDwvcHJlPgogICAgICoKICAgICAqIEhvd2V2ZXIgaXQncyBtb3JlIGxpa2VseSB0aGF0IHlvdSdsbCBqdXN0IHVzZQogICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0gb3IKICAgICAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gdG8gc2ltcGxpZnkgdGhpcyBwcm9jZXNzIGZvciB5b3UuCiAgICAgKgogICAgICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBtb2R1bGUgdG8gY3JlYXRlIG9yIHJldHJpZXZlLgogICAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPj19IHJlcXVpcmVzIElmIHNwZWNpZmllZCB0aGVuIG5ldyBtb2R1bGUgaXMgYmVpbmcgY3JlYXRlZC4gSWYKICAgICAqICAgICAgICB1bnNwZWNpZmllZCB0aGVuIHRoZSB0aGUgbW9kdWxlIGlzIGJlaW5nIHJldHJpZXZlZCBmb3IgZnVydGhlciBjb25maWd1cmF0aW9uLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnRm4gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIG1vZHVsZS4gU2FtZSBhcwogICAgICogICAgICAgIHtAbGluayBhbmd1bGFyLk1vZHVsZSNtZXRob2RzX2NvbmZpZyBNb2R1bGUjY29uZmlnKCl9LgogICAgICogQHJldHVybnMge21vZHVsZX0gbmV3IG1vZHVsZSB3aXRoIHRoZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9IGFwaS4KICAgICAqLwogICAgcmV0dXJuIGZ1bmN0aW9uIG1vZHVsZShuYW1lLCByZXF1aXJlcywgY29uZmlnRm4pIHsKICAgICAgdmFyIGFzc2VydE5vdEhhc093blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgY29udGV4dCkgewogICAgICAgIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7CiAgICAgICAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdtb2R1bGUnKTsKICAgICAgaWYgKHJlcXVpcmVzICYmIG1vZHVsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICBtb2R1bGVzW25hbWVdID0gbnVsbDsKICAgICAgfQogICAgICByZXR1cm4gZW5zdXJlKG1vZHVsZXMsIG5hbWUsIGZ1bmN0aW9uKCkgewogICAgICAgIGlmICghcmVxdWlyZXMpIHsKICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignbm9tb2QnLCAiTW9kdWxlICd7MH0nIGlzIG5vdCBhdmFpbGFibGUhIFlvdSBlaXRoZXIgbWlzc3BlbGxlZCAiICsKICAgICAgICAgICAgICJ0aGUgbW9kdWxlIG5hbWUgb3IgZm9yZ290IHRvIGxvYWQgaXQuIElmIHJlZ2lzdGVyaW5nIGEgbW9kdWxlIGVuc3VyZSB0aGF0IHlvdSAiICsKICAgICAgICAgICAgICJzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgYXMgdGhlIHNlY29uZCBhcmd1bWVudC4iLCBuYW1lKTsKICAgICAgICB9CgogICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxBcnJheS48Kj4+fSAqLwogICAgICAgIHZhciBpbnZva2VRdWV1ZSA9IFtdOwoKICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqLwogICAgICAgIHZhciBydW5CbG9ja3MgPSBbXTsKCiAgICAgICAgdmFyIGNvbmZpZyA9IGludm9rZUxhdGVyKCckaW5qZWN0b3InLCAnaW52b2tlJyk7CgogICAgICAgIC8qKiBAdHlwZSB7YW5ndWxhci5Nb2R1bGV9ICovCiAgICAgICAgdmFyIG1vZHVsZUluc3RhbmNlID0gewogICAgICAgICAgLy8gUHJpdmF0ZSBzdGF0ZQogICAgICAgICAgX2ludm9rZVF1ZXVlOiBpbnZva2VRdWV1ZSwKICAgICAgICAgIF9ydW5CbG9ja3M6IHJ1bkJsb2NrcywKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcmVxdWlyZXMKICAgICAgICAgICAqIEBwcm9wZXJ0eU9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59IExpc3Qgb2YgbW9kdWxlIG5hbWVzIHdoaWNoIG11c3QgYmUgbG9hZGVkIGJlZm9yZSB0aGlzIG1vZHVsZS4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogSG9sZHMgdGhlIGxpc3Qgb2YgbW9kdWxlcyB3aGljaCB0aGUgaW5qZWN0b3Igd2lsbCBsb2FkIGJlZm9yZSB0aGUgY3VycmVudCBtb2R1bGUgaXMKICAgICAgICAgICAqIGxvYWRlZC4KICAgICAgICAgICAqLwogICAgICAgICAgcmVxdWlyZXM6IHJlcXVpcmVzLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5CiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNuYW1lCiAgICAgICAgICAgKiBAcHJvcGVydHlPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHJldHVybnMge3N0cmluZ30gTmFtZSBvZiB0aGUgbW9kdWxlLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKi8KICAgICAgICAgIG5hbWU6IG5hbWUsCgoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcHJvdmlkZXIKICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlclR5cGUgQ29uc3RydWN0aW9uIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlCiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI3Byb3ZpZGVyICRwcm92aWRlLnByb3ZpZGVyKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBwcm92aWRlcjogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3Byb3ZpZGVyJyksCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmYWN0b3J5CiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZQogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJGdW5jdGlvbiBGdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKiBTZWUge0BsaW5rIEFVVE8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KCl9LgogICAgICAgICAgICovCiAgICAgICAgICBmYWN0b3J5OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnZmFjdG9yeScpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjc2VydmljZQogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWUKICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZSgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgc2VydmljZTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3NlcnZpY2UnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3ZhbHVlCiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZQogICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgU2VydmljZSBpbnN0YW5jZSBvYmplY3QuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgQVVUTy4kcHJvdmlkZSN2YWx1ZSAkcHJvdmlkZS52YWx1ZSgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgdmFsdWU6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICd2YWx1ZScpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uc3RhbnQKICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgY29uc3RhbnQgbmFtZQogICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgQ29uc3RhbnQgdmFsdWUuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIEJlY2F1c2UgdGhlIGNvbnN0YW50IGFyZSBmaXhlZCwgdGhleSBnZXQgYXBwbGllZCBiZWZvcmUgb3RoZXIgcHJvdmlkZSBtZXRob2RzLgogICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI2NvbnN0YW50ICRwcm92aWRlLmNvbnN0YW50KCl9LgogICAgICAgICAgICovCiAgICAgICAgICBjb25zdGFudDogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ2NvbnN0YW50JywgJ3Vuc2hpZnQnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2FuaW1hdGlvbgogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhbmltYXRpb24gbmFtZQogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYW5pbWF0aW9uRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgYW4KICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLgogICAgICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAgICAgKgogICAgICAgICAgICogKipOT1RFKio6IGFuaW1hdGlvbnMgdGFrZSBlZmZlY3Qgb25seSBpZiB0aGUgKipuZ0FuaW1hdGUqKiBtb2R1bGUgaXMgbG9hZGVkLgogICAgICAgICAgICoKICAgICAgICAgICAqCiAgICAgICAgICAgKiBEZWZpbmVzIGFuIGFuaW1hdGlvbiBob29rIHRoYXQgY2FuIGJlIGxhdGVyIHVzZWQgd2l0aAogICAgICAgICAgICoge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZSAkYW5pbWF0ZX0gc2VydmljZSBhbmQgZGlyZWN0aXZlcyB0aGF0IHVzZSB0aGlzIHNlcnZpY2UuCiAgICAgICAgICAgKgogICAgICAgICAgICogPHByZT4KICAgICAgICAgICAqIG1vZHVsZS5hbmltYXRpb24oJy5hbmltYXRpb24tbmFtZScsIGZ1bmN0aW9uKCRpbmplY3QxLCAkaW5qZWN0MikgewogICAgICAgICAgICogICByZXR1cm4gewogICAgICAgICAgICogICAgIGV2ZW50TmFtZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHsKICAgICAgICAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvbgogICAgICAgICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKCkKICAgICAgICAgICAqICAgICAgIHJldHVybiBmdW5jdGlvbiBjYW5jZWxsYXRpb25GdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvbgogICAgICAgICAgICogICAgICAgfQogICAgICAgICAgICogICAgIH0KICAgICAgICAgICAqICAgfQogICAgICAgICAgICogfSkKICAgICAgICAgICAqIDwvcHJlPgogICAgICAgICAgICoKICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXIgJGFuaW1hdGVQcm92aWRlci5yZWdpc3RlcigpfSBhbmQKICAgICAgICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uCiAgICAgICAgICAgKi8KICAgICAgICAgIGFuaW1hdGlvbjogaW52b2tlTGF0ZXIoJyRhbmltYXRlUHJvdmlkZXInLCAncmVnaXN0ZXInKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZpbHRlcgogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWx0ZXIgbmFtZS4KICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlckZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGZpbHRlci4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogU2VlIHtAbGluayBuZy4kZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBmaWx0ZXI6IGludm9rZUxhdGVyKCckZmlsdGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnRyb2xsZXIKICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZQogICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIENvbnRyb2xsZXIgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBjb250cm9sbGVycyB3aGVyZSB0aGUKICAgICAgICAgICAqICAgIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbnN0cnVjdG9ycy4KICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciAkY29udHJvbGxlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LgogICAgICAgICAgICovCiAgICAgICAgICBjb250cm9sbGVyOiBpbnZva2VMYXRlcignJGNvbnRyb2xsZXJQcm92aWRlcicsICdyZWdpc3RlcicpLAoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGlyZWN0aXZlCiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGUKICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBEaXJlY3RpdmUgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZQogICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLgogICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGlyZWN0aXZlRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YKICAgICAgICAgICAqIGRpcmVjdGl2ZXMuCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNtZXRob2RzX2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS4KICAgICAgICAgICAqLwogICAgICAgICAgZGlyZWN0aXZlOiBpbnZva2VMYXRlcignJGNvbXBpbGVQcm92aWRlcicsICdkaXJlY3RpdmUnKSwKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZwogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gb24gbW9kdWxlIGxvYWQuIFVzZWZ1bCBmb3Igc2VydmljZQogICAgICAgICAgICogICAgY29uZmlndXJhdGlvbi4KICAgICAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggbmVlZHMgdG8gYmUgcGVyZm9ybWVkIG9uIG1vZHVsZSBsb2FkaW5nLgogICAgICAgICAgICovCiAgICAgICAgICBjb25maWc6IGNvbmZpZywKCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3J1bgogICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlCiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbml0aWFsaXphdGlvbkZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBhZnRlciBpbmplY3RvciBjcmVhdGlvbi4KICAgICAgICAgICAqICAgIFVzZWZ1bCBmb3IgYXBwbGljYXRpb24gaW5pdGlhbGl6YXRpb24uCiAgICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIHNob3VsZCBiZSBwZXJmb3JtZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgZG9uZQogICAgICAgICAgICogbG9hZGluZyBhbGwgbW9kdWxlcy4KICAgICAgICAgICAqLwogICAgICAgICAgcnVuOiBmdW5jdGlvbihibG9jaykgewogICAgICAgICAgICBydW5CbG9ja3MucHVzaChibG9jayk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGlmIChjb25maWdGbikgewogICAgICAgICAgY29uZmlnKGNvbmZpZ0ZuKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAgbW9kdWxlSW5zdGFuY2U7CgogICAgICAgIC8qKgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlcgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QKICAgICAgICAgKiBAcGFyYW0ge1N0cmluZz19IGluc2VydE1ldGhvZAogICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX0KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlcihwcm92aWRlciwgbWV0aG9kLCBpbnNlcnRNZXRob2QpIHsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaW52b2tlUXVldWVbaW5zZXJ0TWV0aG9kIHx8ICdwdXNoJ10oW3Byb3ZpZGVyLCBtZXRob2QsIGFyZ3VtZW50c10pOwogICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfSk7CiAgICB9OwogIH0pOwoKfQoKLyogZ2xvYmFsCiAgICBhbmd1bGFyTW9kdWxlOiB0cnVlLAogICAgdmVyc2lvbjogdHJ1ZSwKICAgIAogICAgJExvY2FsZVByb3ZpZGVyLAogICAgJENvbXBpbGVQcm92aWRlciwKICAgIAogICAgaHRtbEFuY2hvckRpcmVjdGl2ZSwKICAgIGlucHV0RGlyZWN0aXZlLAogICAgaW5wdXREaXJlY3RpdmUsCiAgICBmb3JtRGlyZWN0aXZlLAogICAgc2NyaXB0RGlyZWN0aXZlLAogICAgc2VsZWN0RGlyZWN0aXZlLAogICAgc3R5bGVEaXJlY3RpdmUsCiAgICBvcHRpb25EaXJlY3RpdmUsCiAgICBuZ0JpbmREaXJlY3RpdmUsCiAgICBuZ0JpbmRIdG1sRGlyZWN0aXZlLAogICAgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsCiAgICBuZ0NsYXNzRGlyZWN0aXZlLAogICAgbmdDbGFzc0V2ZW5EaXJlY3RpdmUsCiAgICBuZ0NsYXNzT2RkRGlyZWN0aXZlLAogICAgbmdDc3BEaXJlY3RpdmUsCiAgICBuZ0Nsb2FrRGlyZWN0aXZlLAogICAgbmdDb250cm9sbGVyRGlyZWN0aXZlLAogICAgbmdGb3JtRGlyZWN0aXZlLAogICAgbmdIaWRlRGlyZWN0aXZlLAogICAgbmdJZkRpcmVjdGl2ZSwKICAgIG5nSW5jbHVkZURpcmVjdGl2ZSwKICAgIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlLAogICAgbmdJbml0RGlyZWN0aXZlLAogICAgbmdOb25CaW5kYWJsZURpcmVjdGl2ZSwKICAgIG5nUGx1cmFsaXplRGlyZWN0aXZlLAogICAgbmdSZXBlYXREaXJlY3RpdmUsCiAgICBuZ1Nob3dEaXJlY3RpdmUsCiAgICBuZ1N0eWxlRGlyZWN0aXZlLAogICAgbmdTd2l0Y2hEaXJlY3RpdmUsCiAgICBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUsCiAgICBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsCiAgICBuZ09wdGlvbnNEaXJlY3RpdmUsCiAgICBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUsCiAgICBuZ01vZGVsRGlyZWN0aXZlLAogICAgbmdMaXN0RGlyZWN0aXZlLAogICAgbmdDaGFuZ2VEaXJlY3RpdmUsCiAgICByZXF1aXJlZERpcmVjdGl2ZSwKICAgIHJlcXVpcmVkRGlyZWN0aXZlLAogICAgbmdWYWx1ZURpcmVjdGl2ZSwKICAgIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzLAogICAgbmdFdmVudERpcmVjdGl2ZXMsCgogICAgJEFuY2hvclNjcm9sbFByb3ZpZGVyLAogICAgJEFuaW1hdGVQcm92aWRlciwKICAgICRCcm93c2VyUHJvdmlkZXIsCiAgICAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIsCiAgICAkQ29udHJvbGxlclByb3ZpZGVyLAogICAgJERvY3VtZW50UHJvdmlkZXIsCiAgICAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLAogICAgJEZpbHRlclByb3ZpZGVyLAogICAgJEludGVycG9sYXRlUHJvdmlkZXIsCiAgICAkSW50ZXJ2YWxQcm92aWRlciwKICAgICRIdHRwUHJvdmlkZXIsCiAgICAkSHR0cEJhY2tlbmRQcm92aWRlciwKICAgICRMb2NhdGlvblByb3ZpZGVyLAogICAgJExvZ1Byb3ZpZGVyLAogICAgJFBhcnNlUHJvdmlkZXIsCiAgICAkUm9vdFNjb3BlUHJvdmlkZXIsCiAgICAkUVByb3ZpZGVyLAogICAgJCRTYW5pdGl6ZVVyaVByb3ZpZGVyLAogICAgJFNjZVByb3ZpZGVyLAogICAgJFNjZURlbGVnYXRlUHJvdmlkZXIsCiAgICAkU25pZmZlclByb3ZpZGVyLAogICAgJFRlbXBsYXRlQ2FjaGVQcm92aWRlciwKICAgICRUaW1lb3V0UHJvdmlkZXIsCiAgICAkV2luZG93UHJvdmlkZXIKKi8KCgovKioKICogQG5nZG9jIHByb3BlcnR5CiAqIEBuYW1lIGFuZ3VsYXIudmVyc2lvbgogKiBAZGVzY3JpcHRpb24KICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgQW5ndWxhckpTIHZlcnNpb24uIFRoaXMgb2JqZWN0IGhhcyB0aGUKICogZm9sbG93aW5nIHByb3BlcnRpZXM6CiAqCiAqIC0gYGZ1bGxgIOKAkyBge3N0cmluZ31gIOKAkyBGdWxsIHZlcnNpb24gc3RyaW5nLCBzdWNoIGFzICIwLjkuMTgiLgogKiAtIGBtYWpvcmAg4oCTIGB7bnVtYmVyfWAg4oCTIE1ham9yIHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzICIwIi4KICogLSBgbWlub3JgIOKAkyBge251bWJlcn1gIOKAkyBNaW5vciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyAiOSIuCiAqIC0gYGRvdGAg4oCTIGB7bnVtYmVyfWAg4oCTIERvdCB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyAiMTgiLgogKiAtIGBjb2RlTmFtZWAg4oCTIGB7c3RyaW5nfWAg4oCTIENvZGUgbmFtZSBvZiB0aGUgcmVsZWFzZSwgc3VjaCBhcyAiamlnZ2xpbmctYXJtZmF0Ii4KICovCnZhciB2ZXJzaW9uID0gewogIGZ1bGw6ICcxLjIuOScsICAgIC8vIGFsbCBvZiB0aGVzZSBwbGFjZWhvbGRlciBzdHJpbmdzIHdpbGwgYmUgcmVwbGFjZWQgYnkgZ3J1bnQncwogIG1ham9yOiAxLCAgICAvLyBwYWNrYWdlIHRhc2sKICBtaW5vcjogMiwKICBkb3Q6IDksCiAgY29kZU5hbWU6ICdlbmNoYW50ZWQtYXJ0aWN1bGFjeScKfTsKCgpmdW5jdGlvbiBwdWJsaXNoRXh0ZXJuYWxBUEkoYW5ndWxhcil7CiAgZXh0ZW5kKGFuZ3VsYXIsIHsKICAgICdib290c3RyYXAnOiBib290c3RyYXAsCiAgICAnY29weSc6IGNvcHksCiAgICAnZXh0ZW5kJzogZXh0ZW5kLAogICAgJ2VxdWFscyc6IGVxdWFscywKICAgICdlbGVtZW50JzoganFMaXRlLAogICAgJ2ZvckVhY2gnOiBmb3JFYWNoLAogICAgJ2luamVjdG9yJzogY3JlYXRlSW5qZWN0b3IsCiAgICAnbm9vcCc6bm9vcCwKICAgICdiaW5kJzpiaW5kLAogICAgJ3RvSnNvbic6IHRvSnNvbiwKICAgICdmcm9tSnNvbic6IGZyb21Kc29uLAogICAgJ2lkZW50aXR5JzppZGVudGl0eSwKICAgICdpc1VuZGVmaW5lZCc6IGlzVW5kZWZpbmVkLAogICAgJ2lzRGVmaW5lZCc6IGlzRGVmaW5lZCwKICAgICdpc1N0cmluZyc6IGlzU3RyaW5nLAogICAgJ2lzRnVuY3Rpb24nOiBpc0Z1bmN0aW9uLAogICAgJ2lzT2JqZWN0JzogaXNPYmplY3QsCiAgICAnaXNOdW1iZXInOiBpc051bWJlciwKICAgICdpc0VsZW1lbnQnOiBpc0VsZW1lbnQsCiAgICAnaXNBcnJheSc6IGlzQXJyYXksCiAgICAndmVyc2lvbic6IHZlcnNpb24sCiAgICAnaXNEYXRlJzogaXNEYXRlLAogICAgJ2xvd2VyY2FzZSc6IGxvd2VyY2FzZSwKICAgICd1cHBlcmNhc2UnOiB1cHBlcmNhc2UsCiAgICAnY2FsbGJhY2tzJzoge2NvdW50ZXI6IDB9LAogICAgJyQkbWluRXJyJzogbWluRXJyLAogICAgJyQkY3NwJzogY3NwCiAgfSk7CgogIGFuZ3VsYXJNb2R1bGUgPSBzZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpOwogIHRyeSB7CiAgICBhbmd1bGFyTW9kdWxlKCduZ0xvY2FsZScpOwogIH0gY2F0Y2ggKGUpIHsKICAgIGFuZ3VsYXJNb2R1bGUoJ25nTG9jYWxlJywgW10pLnByb3ZpZGVyKCckbG9jYWxlJywgJExvY2FsZVByb3ZpZGVyKTsKICB9CgogIGFuZ3VsYXJNb2R1bGUoJ25nJywgWyduZ0xvY2FsZSddLCBbJyRwcm92aWRlJywKICAgIGZ1bmN0aW9uIG5nTW9kdWxlKCRwcm92aWRlKSB7CiAgICAgIC8vICQkc2FuaXRpemVVcmlQcm92aWRlciBuZWVkcyB0byBiZSBiZWZvcmUgJGNvbXBpbGVQcm92aWRlciBhcyBpdCBpcyB1c2VkIGJ5IGl0LgogICAgICAkcHJvdmlkZS5wcm92aWRlcih7CiAgICAgICAgJCRzYW5pdGl6ZVVyaTogJCRTYW5pdGl6ZVVyaVByb3ZpZGVyCiAgICAgIH0pOwogICAgICAkcHJvdmlkZS5wcm92aWRlcignJGNvbXBpbGUnLCAkQ29tcGlsZVByb3ZpZGVyKS4KICAgICAgICBkaXJlY3RpdmUoewogICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLAogICAgICAgICAgICBpbnB1dDogaW5wdXREaXJlY3RpdmUsCiAgICAgICAgICAgIHRleHRhcmVhOiBpbnB1dERpcmVjdGl2ZSwKICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSwKICAgICAgICAgICAgc2NyaXB0OiBzY3JpcHREaXJlY3RpdmUsCiAgICAgICAgICAgIHNlbGVjdDogc2VsZWN0RGlyZWN0aXZlLAogICAgICAgICAgICBzdHlsZTogc3R5bGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG9wdGlvbjogb3B0aW9uRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0JpbmQ6IG5nQmluZERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdCaW5kSHRtbDogbmdCaW5kSHRtbERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdCaW5kVGVtcGxhdGU6IG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NsYXNzOiBuZ0NsYXNzRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ2xhc3NPZGQ6IG5nQ2xhc3NPZGREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ2xvYWs6IG5nQ2xvYWtEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nQ29udHJvbGxlcjogbmdDb250cm9sbGVyRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0Zvcm06IG5nRm9ybURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdIaWRlOiBuZ0hpZGVEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nSWY6IG5nSWZEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nSW5jbHVkZTogbmdJbmNsdWRlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0luaXQ6IG5nSW5pdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdOb25CaW5kYWJsZTogbmdOb25CaW5kYWJsZURpcmVjdGl2ZSwKICAgICAgICAgICAgbmdQbHVyYWxpemU6IG5nUGx1cmFsaXplRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1JlcGVhdDogbmdSZXBlYXREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nU2hvdzogbmdTaG93RGlyZWN0aXZlLAogICAgICAgICAgICBuZ1N0eWxlOiBuZ1N0eWxlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1N3aXRjaDogbmdTd2l0Y2hEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nU3dpdGNoV2hlbjogbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1N3aXRjaERlZmF1bHQ6IG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdPcHRpb25zOiBuZ09wdGlvbnNEaXJlY3RpdmUsCiAgICAgICAgICAgIG5nVHJhbnNjbHVkZTogbmdUcmFuc2NsdWRlRGlyZWN0aXZlLAogICAgICAgICAgICBuZ01vZGVsOiBuZ01vZGVsRGlyZWN0aXZlLAogICAgICAgICAgICBuZ0xpc3Q6IG5nTGlzdERpcmVjdGl2ZSwKICAgICAgICAgICAgbmdDaGFuZ2U6IG5nQ2hhbmdlRGlyZWN0aXZlLAogICAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsCiAgICAgICAgICAgIG5nUmVxdWlyZWQ6IHJlcXVpcmVkRGlyZWN0aXZlLAogICAgICAgICAgICBuZ1ZhbHVlOiBuZ1ZhbHVlRGlyZWN0aXZlCiAgICAgICAgfSkuCiAgICAgICAgZGlyZWN0aXZlKHsKICAgICAgICAgIG5nSW5jbHVkZTogbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUKICAgICAgICB9KS4KICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLgogICAgICAgIGRpcmVjdGl2ZShuZ0V2ZW50RGlyZWN0aXZlcyk7CiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHsKICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsCiAgICAgICAgJGFuaW1hdGU6ICRBbmltYXRlUHJvdmlkZXIsCiAgICAgICAgJGJyb3dzZXI6ICRCcm93c2VyUHJvdmlkZXIsCiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLAogICAgICAgICRjb250cm9sbGVyOiAkQ29udHJvbGxlclByb3ZpZGVyLAogICAgICAgICRkb2N1bWVudDogJERvY3VtZW50UHJvdmlkZXIsCiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsCiAgICAgICAgJGZpbHRlcjogJEZpbHRlclByb3ZpZGVyLAogICAgICAgICRpbnRlcnBvbGF0ZTogJEludGVycG9sYXRlUHJvdmlkZXIsCiAgICAgICAgJGludGVydmFsOiAkSW50ZXJ2YWxQcm92aWRlciwKICAgICAgICAkaHR0cDogJEh0dHBQcm92aWRlciwKICAgICAgICAkaHR0cEJhY2tlbmQ6ICRIdHRwQmFja2VuZFByb3ZpZGVyLAogICAgICAgICRsb2NhdGlvbjogJExvY2F0aW9uUHJvdmlkZXIsCiAgICAgICAgJGxvZzogJExvZ1Byb3ZpZGVyLAogICAgICAgICRwYXJzZTogJFBhcnNlUHJvdmlkZXIsCiAgICAgICAgJHJvb3RTY29wZTogJFJvb3RTY29wZVByb3ZpZGVyLAogICAgICAgICRxOiAkUVByb3ZpZGVyLAogICAgICAgICRzY2U6ICRTY2VQcm92aWRlciwKICAgICAgICAkc2NlRGVsZWdhdGU6ICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLAogICAgICAgICRzbmlmZmVyOiAkU25pZmZlclByb3ZpZGVyLAogICAgICAgICR0ZW1wbGF0ZUNhY2hlOiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyLAogICAgICAgICR0aW1lb3V0OiAkVGltZW91dFByb3ZpZGVyLAogICAgICAgICR3aW5kb3c6ICRXaW5kb3dQcm92aWRlcgogICAgICB9KTsKICAgIH0KICBdKTsKfQoKLyogZ2xvYmFsCgogIC1KUUxpdGVQcm90b3R5cGUsCiAgLWFkZEV2ZW50TGlzdGVuZXJGbiwKICAtcmVtb3ZlRXZlbnRMaXN0ZW5lckZuLAogIC1CT09MRUFOX0FUVFIKKi8KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy9KUUxpdGUKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBhbmd1bGFyLmVsZW1lbnQKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBXcmFwcyBhIHJhdyBET00gZWxlbWVudCBvciBIVE1MIHN0cmluZyBhcyBhIFtqUXVlcnldKGh0dHA6Ly9qcXVlcnkuY29tKSBlbGVtZW50LgogKgogKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YCBpcyBhbiBhbGlhcyBmb3IgdGhlCiAqIFtqUXVlcnldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkvKSBmdW5jdGlvbi4gSWYgalF1ZXJ5IGlzIG5vdCBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgCiAqIGRlbGVnYXRlcyB0byBBbmd1bGFyJ3MgYnVpbHQtaW4gc3Vic2V0IG9mIGpRdWVyeSwgY2FsbGVkICJqUXVlcnkgbGl0ZSIgb3IgImpxTGl0ZS4iCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiPmpxTGl0ZSBpcyBhIHRpbnksIEFQSS1jb21wYXRpYmxlIHN1YnNldCBvZiBqUXVlcnkgdGhhdCBhbGxvd3MKICogQW5ndWxhciB0byBtYW5pcHVsYXRlIHRoZSBET00gaW4gYSBjcm9zcy1icm93c2VyIGNvbXBhdGlibGUgd2F5LiAqKmpxTGl0ZSoqIGltcGxlbWVudHMgb25seSB0aGUgbW9zdAogKiBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eSB3aXRoIHRoZSBnb2FsIG9mIGhhdmluZyBhIHZlcnkgc21hbGwgZm9vdHByaW50LjwvZGl2PgogKgogKiBUbyB1c2UgalF1ZXJ5LCBzaW1wbHkgbG9hZCBpdCBiZWZvcmUgYERPTUNvbnRlbnRMb2FkZWRgIGV2ZW50IGZpcmVkLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCI+KipOb3RlOioqIGFsbCBlbGVtZW50IHJlZmVyZW5jZXMgaW4gQW5ndWxhciBhcmUgYWx3YXlzIHdyYXBwZWQgd2l0aCBqUXVlcnkgb3IKICoganFMaXRlOyB0aGV5IGFyZSBuZXZlciByYXcgRE9NIHJlZmVyZW5jZXMuPC9kaXY+CiAqCiAqICMjIEFuZ3VsYXIncyBqcUxpdGUKICoganFMaXRlIHByb3ZpZGVzIG9ubHkgdGhlIGZvbGxvd2luZyBqUXVlcnkgbWV0aG9kczoKICoKICogLSBbYGFkZENsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvKQogKiAtIFtgYWZ0ZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZnRlci8pCiAqIC0gW2BhcHBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hcHBlbmQvKQogKiAtIFtgYXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2F0dHIvKQogKiAtIFtgYmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGEKICogLSBbYGNoaWxkcmVuKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2hpbGRyZW4vKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzCiAqIC0gW2BjbG9uZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nsb25lLykKICogLSBbYGNvbnRlbnRzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGVudHMvKQogKiAtIFtgY3NzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY3NzLykKICogLSBbYGRhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kYXRhLykKICogLSBbYGVtcHR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZW1wdHkvKQogKiAtIFtgZXEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lcS8pCiAqIC0gW2BmaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZmluZC8pIC0gTGltaXRlZCB0byBsb29rdXBzIGJ5IHRhZyBuYW1lCiAqIC0gW2BoYXNDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2hhc0NsYXNzLykKICogLSBbYGh0bWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLykKICogLSBbYG5leHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9uZXh0LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9ycwogKiAtIFtgb24oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhCiAqIC0gW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBzZWxlY3RvcnMKICogLSBbYG9uZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uZS8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzIG9yIHNlbGVjdG9ycwogKiAtIFtgcGFyZW50KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9ycwogKiAtIFtgcHJlcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ByZXBlbmQvKQogKiAtIFtgcHJvcCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3Byb3AvKQogKiAtIFtgcmVhZHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZWFkeS8pCiAqIC0gW2ByZW1vdmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmUvKQogKiAtIFtgcmVtb3ZlQXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUF0dHIvKQogKiAtIFtgcmVtb3ZlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVDbGFzcy8pCiAqIC0gW2ByZW1vdmVEYXRhKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlRGF0YS8pCiAqIC0gW2ByZXBsYWNlV2l0aCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlcGxhY2VXaXRoLykKICogLSBbYHRleHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90ZXh0LykKICogLSBbYHRvZ2dsZUNsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdG9nZ2xlQ2xhc3MvKQogKiAtIFtgdHJpZ2dlckhhbmRsZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90cmlnZ2VySGFuZGxlci8pIC0gUGFzc2VzIGEgZHVtbXkgZXZlbnQgb2JqZWN0IHRvIGhhbmRsZXJzLgogKiAtIFtgdW5iaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb2ZmLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMKICogLSBbYHZhbCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ZhbC8pCiAqIC0gW2B3cmFwKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vd3JhcC8pCiAqCiAqICMjIGpRdWVyeS9qcUxpdGUgRXh0cmFzCiAqIEFuZ3VsYXIgYWxzbyBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGFkZGl0aW9uYWwgbWV0aG9kcyBhbmQgZXZlbnRzIHRvIGJvdGggalF1ZXJ5IGFuZCBqcUxpdGU6CiAqCiAqICMjIyBFdmVudHMKICogLSBgJGRlc3Ryb3lgIC0gQW5ndWxhckpTIGludGVyY2VwdHMgYWxsIGpxTGl0ZS9qUXVlcnkncyBET00gZGVzdHJ1Y3Rpb24gYXBpcyBhbmQgZmlyZXMgdGhpcyBldmVudAogKiAgICBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNsZWFuIHVwIGFueSAzcmQgcGFydHkgYmluZGluZ3MgdG8gdGhlIERPTQogKiAgICBlbGVtZW50IGJlZm9yZSBpdCBpcyByZW1vdmVkLgogKgogKiAjIyMgTWV0aG9kcwogKiAtIGBjb250cm9sbGVyKG5hbWUpYCAtIHJldHJpZXZlcyB0aGUgY29udHJvbGxlciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIEJ5IGRlZmF1bHQKICogICByZXRyaWV2ZXMgY29udHJvbGxlciBhc3NvY2lhdGVkIHdpdGggdGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZS4gSWYgYG5hbWVgIGlzIHByb3ZpZGVkIGFzCiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLgogKiAgIGAnbmdNb2RlbCdgKS4KICogLSBgaW5qZWN0b3IoKWAgLSByZXRyaWV2ZXMgdGhlIGluamVjdG9yIG9mIHRoZSBjdXJyZW50IGVsZW1lbnQgb3IgaXRzIHBhcmVudC4KICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBhcGkvbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gb2YgdGhlIGN1cnJlbnQKICogICBlbGVtZW50IG9yIGl0cyBwYXJlbnQuCiAqIC0gYGlzb2xhdGVTY29wZSgpYCAtIHJldHJpZXZlcyBhbiBpc29sYXRlIHtAbGluayBhcGkvbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gaWYgb25lIGlzIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZQogKiAgIGN1cnJlbnQgZWxlbWVudC4gVGhpcyBnZXR0ZXIgc2hvdWxkIGJlIHVzZWQgb25seSBvbiBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYSBkaXJlY3RpdmUgd2hpY2ggc3RhcnRzIGEgbmV3IGlzb2xhdGUKICogICBzY29wZS4gQ2FsbGluZyBgc2NvcGUoKWAgb24gdGhpcyBlbGVtZW50IGFsd2F5cyByZXR1cm5zIHRoZSBvcmlnaW5hbCBub24taXNvbGF0ZSBzY29wZS4KICogLSBgaW5oZXJpdGVkRGF0YSgpYCAtIHNhbWUgYXMgYGRhdGEoKWAsIGJ1dCB3YWxrcyB1cCB0aGUgRE9NIHVudGlsIGEgdmFsdWUgaXMgZm91bmQgb3IgdGhlIHRvcAogKiAgIHBhcmVudCBlbGVtZW50IGlzIHJlYWNoZWQuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgSFRNTCBzdHJpbmcgb3IgRE9NRWxlbWVudCB0byBiZSB3cmFwcGVkIGludG8galF1ZXJ5LgogKiBAcmV0dXJucyB7T2JqZWN0fSBqUXVlcnkgb2JqZWN0LgogKi8KCnZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sCiAgICBqcU5hbWUgPSBKUUxpdGUuZXhwYW5kbyA9ICduZy0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCksCiAgICBqcUlkID0gMSwKICAgIGFkZEV2ZW50TGlzdGVuZXJGbiA9ICh3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcgogICAgICA/IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBmYWxzZSk7fQogICAgICA6IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7ZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgZm4pO30pLAogICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuID0gKHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyCiAgICAgID8gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTsgfQogICAgICA6IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7ZWxlbWVudC5kZXRhY2hFdmVudCgnb24nICsgdHlwZSwgZm4pOyB9KTsKCmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9CgoKdmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gLyhbXDpcLVxfXSsoLikpL2c7CnZhciBNT1pfSEFDS19SRUdFWFAgPSAvXm1veihbQS1aXSkvOwp2YXIganFMaXRlTWluRXJyID0gbWluRXJyKCdqcUxpdGUnKTsKCi8qKgogKiBDb252ZXJ0cyBzbmFrZV9jYXNlIHRvIGNhbWVsQ2FzZS4KICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci4KICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemUKICovCmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7CiAgcmV0dXJuIG5hbWUuCiAgICByZXBsYWNlKFNQRUNJQUxfQ0hBUlNfUkVHRVhQLCBmdW5jdGlvbihfLCBzZXBhcmF0b3IsIGxldHRlciwgb2Zmc2V0KSB7CiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjsKICAgIH0pLgogICAgcmVwbGFjZShNT1pfSEFDS19SRUdFWFAsICdNb3okMScpOwp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KLy8galF1ZXJ5IG11dGF0aW9uIHBhdGNoCi8vCi8vIEluIGNvbmp1bmN0aW9uIHdpdGggYmluZEpRdWVyeSBpbnRlcmNlcHRzIGFsbCBqUXVlcnkncyBET00gZGVzdHJ1Y3Rpb24gYXBpcyBhbmQgZmlyZXMgYQovLyAkZGVzdHJveSBldmVudCBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuCi8vCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKZnVuY3Rpb24ganFMaXRlUGF0Y2hKUXVlcnlSZW1vdmUobmFtZSwgZGlzcGF0Y2hUaGlzLCBmaWx0ZXJFbGVtcywgZ2V0dGVySWZOb0FyZ3VtZW50cykgewogIHZhciBvcmlnaW5hbEpxRm4gPSBqUXVlcnkuZm5bbmFtZV07CiAgb3JpZ2luYWxKcUZuID0gb3JpZ2luYWxKcUZuLiRvcmlnaW5hbCB8fCBvcmlnaW5hbEpxRm47CiAgcmVtb3ZlUGF0Y2guJG9yaWdpbmFsID0gb3JpZ2luYWxKcUZuOwogIGpRdWVyeS5mbltuYW1lXSA9IHJlbW92ZVBhdGNoOwoKICBmdW5jdGlvbiByZW1vdmVQYXRjaChwYXJhbSkgewogICAgLy8ganNoaW50IC1XMDQwCiAgICB2YXIgbGlzdCA9IGZpbHRlckVsZW1zICYmIHBhcmFtID8gW3RoaXMuZmlsdGVyKHBhcmFtKV0gOiBbdGhpc10sCiAgICAgICAgZmlyZUV2ZW50ID0gZGlzcGF0Y2hUaGlzLAogICAgICAgIHNldCwgc2V0SW5kZXgsIHNldExlbmd0aCwKICAgICAgICBlbGVtZW50LCBjaGlsZEluZGV4LCBjaGlsZExlbmd0aCwgY2hpbGRyZW47CgogICAgaWYgKCFnZXR0ZXJJZk5vQXJndW1lbnRzIHx8IHBhcmFtICE9IG51bGwpIHsKICAgICAgd2hpbGUobGlzdC5sZW5ndGgpIHsKICAgICAgICBzZXQgPSBsaXN0LnNoaWZ0KCk7CiAgICAgICAgZm9yKHNldEluZGV4ID0gMCwgc2V0TGVuZ3RoID0gc2V0Lmxlbmd0aDsgc2V0SW5kZXggPCBzZXRMZW5ndGg7IHNldEluZGV4KyspIHsKICAgICAgICAgIGVsZW1lbnQgPSBqcUxpdGUoc2V0W3NldEluZGV4XSk7CiAgICAgICAgICBpZiAoZmlyZUV2ZW50KSB7CiAgICAgICAgICAgIGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJyRkZXN0cm95Jyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmaXJlRXZlbnQgPSAhZmlyZUV2ZW50OwogICAgICAgICAgfQogICAgICAgICAgZm9yKGNoaWxkSW5kZXggPSAwLCBjaGlsZExlbmd0aCA9IChjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4oKSkubGVuZ3RoOwogICAgICAgICAgICAgIGNoaWxkSW5kZXggPCBjaGlsZExlbmd0aDsKICAgICAgICAgICAgICBjaGlsZEluZGV4KyspIHsKICAgICAgICAgICAgbGlzdC5wdXNoKGpRdWVyeShjaGlsZHJlbltjaGlsZEluZGV4XSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIG9yaWdpbmFsSnFGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCmZ1bmN0aW9uIEpRTGl0ZShlbGVtZW50KSB7CiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBKUUxpdGUpIHsKICAgIHJldHVybiBlbGVtZW50OwogIH0KICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSlFMaXRlKSkgewogICAgaWYgKGlzU3RyaW5nKGVsZW1lbnQpICYmIGVsZW1lbnQuY2hhckF0KDApICE9ICc8JykgewogICAgICB0aHJvdyBqcUxpdGVNaW5FcnIoJ25vc2VsJywgJ0xvb2tpbmcgdXAgZWxlbWVudHMgdmlhIHNlbGVjdG9ycyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGpxTGl0ZSEgU2VlOiBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9hbmd1bGFyLmVsZW1lbnQnKTsKICAgIH0KICAgIHJldHVybiBuZXcgSlFMaXRlKGVsZW1lbnQpOwogIH0KCiAgaWYgKGlzU3RyaW5nKGVsZW1lbnQpKSB7CiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAvLyBSZWFkIGFib3V0IHRoZSBOb1Njb3BlIGVsZW1lbnRzIGhlcmU6CiAgICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzM4OTcoVlMuODUpLmFzcHgKICAgIGRpdi5pbm5lckhUTUwgPSAnPGRpdj4mIzE2MDs8L2Rpdj4nICsgZWxlbWVudDsgLy8gSUUgaW5zYW5pdHkgdG8gbWFrZSBOb1Njb3BlIGVsZW1lbnRzIHdvcmshCiAgICBkaXYucmVtb3ZlQ2hpbGQoZGl2LmZpcnN0Q2hpbGQpOyAvLyByZW1vdmUgdGhlIHN1cGVyZmx1b3VzIGRpdgogICAganFMaXRlQWRkTm9kZXModGhpcywgZGl2LmNoaWxkTm9kZXMpOwogICAgdmFyIGZyYWdtZW50ID0ganFMaXRlKGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSk7CiAgICBmcmFnbWVudC5hcHBlbmQodGhpcyk7IC8vIGRldGFjaCB0aGUgZWxlbWVudHMgZnJvbSB0aGUgdGVtcG9yYXJ5IERPTSBkaXYuCiAgfSBlbHNlIHsKICAgIGpxTGl0ZUFkZE5vZGVzKHRoaXMsIGVsZW1lbnQpOwogIH0KfQoKZnVuY3Rpb24ganFMaXRlQ2xvbmUoZWxlbWVudCkgewogIHJldHVybiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTsKfQoKZnVuY3Rpb24ganFMaXRlRGVhbG9jKGVsZW1lbnQpewogIGpxTGl0ZVJlbW92ZURhdGEoZWxlbWVudCk7CiAgZm9yICggdmFyIGkgPSAwLCBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGROb2RlcyB8fCBbXTsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICBqcUxpdGVEZWFsb2MoY2hpbGRyZW5baV0pOwogIH0KfQoKZnVuY3Rpb24ganFMaXRlT2ZmKGVsZW1lbnQsIHR5cGUsIGZuLCB1bnN1cHBvcnRlZCkgewogIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29mZmFyZ3MnLCAnanFMaXRlI29mZigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgYXJndW1lbnQnKTsKCiAgdmFyIGV2ZW50cyA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZXZlbnRzJyksCiAgICAgIGhhbmRsZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnaGFuZGxlJyk7CgogIGlmICghaGFuZGxlKSByZXR1cm47IC8vbm8gbGlzdGVuZXJzIHJlZ2lzdGVyZWQKCiAgaWYgKGlzVW5kZWZpbmVkKHR5cGUpKSB7CiAgICBmb3JFYWNoKGV2ZW50cywgZnVuY3Rpb24oZXZlbnRIYW5kbGVyLCB0eXBlKSB7CiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBldmVudEhhbmRsZXIpOwogICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKSB7CiAgICAgIGlmIChpc1VuZGVmaW5lZChmbikpIHsKICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oZWxlbWVudCwgdHlwZSwgZXZlbnRzW3R5cGVdKTsKICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgICB9IGVsc2UgewogICAgICAgIGFycmF5UmVtb3ZlKGV2ZW50c1t0eXBlXSB8fCBbXSwgZm4pOwogICAgICB9CiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZURhdGEoZWxlbWVudCwgbmFtZSkgewogIHZhciBleHBhbmRvSWQgPSBlbGVtZW50W2pxTmFtZV0sCiAgICAgIGV4cGFuZG9TdG9yZSA9IGpxQ2FjaGVbZXhwYW5kb0lkXTsKCiAgaWYgKGV4cGFuZG9TdG9yZSkgewogICAgaWYgKG5hbWUpIHsKICAgICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXS5kYXRhW25hbWVdOwogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGV4cGFuZG9TdG9yZS5oYW5kbGUpIHsKICAgICAgZXhwYW5kb1N0b3JlLmV2ZW50cy4kZGVzdHJveSAmJiBleHBhbmRvU3RvcmUuaGFuZGxlKHt9LCAnJGRlc3Ryb3knKTsKICAgICAganFMaXRlT2ZmKGVsZW1lbnQpOwogICAgfQogICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXTsKICAgIGVsZW1lbnRbanFOYW1lXSA9IHVuZGVmaW5lZDsgLy8gaWUgZG9lcyBub3QgYWxsb3cgZGVsZXRpb24gb2YgYXR0cmlidXRlcyBvbiBlbGVtZW50cy4KICB9Cn0KCmZ1bmN0aW9uIGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCBrZXksIHZhbHVlKSB7CiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnRbanFOYW1lXSwKICAgICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWQgfHwgLTFdOwoKICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkgewogICAgaWYgKCFleHBhbmRvU3RvcmUpIHsKICAgICAgZWxlbWVudFtqcU5hbWVdID0gZXhwYW5kb0lkID0ganFOZXh0SWQoKTsKICAgICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0ge307CiAgICB9CiAgICBleHBhbmRvU3RvcmVba2V5XSA9IHZhbHVlOwogIH0gZWxzZSB7CiAgICByZXR1cm4gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZVtrZXldOwogIH0KfQoKZnVuY3Rpb24ganFMaXRlRGF0YShlbGVtZW50LCBrZXksIHZhbHVlKSB7CiAgdmFyIGRhdGEgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2RhdGEnKSwKICAgICAgaXNTZXR0ZXIgPSBpc0RlZmluZWQodmFsdWUpLAogICAgICBrZXlEZWZpbmVkID0gIWlzU2V0dGVyICYmIGlzRGVmaW5lZChrZXkpLAogICAgICBpc1NpbXBsZUdldHRlciA9IGtleURlZmluZWQgJiYgIWlzT2JqZWN0KGtleSk7CgogIGlmICghZGF0YSAmJiAhaXNTaW1wbGVHZXR0ZXIpIHsKICAgIGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZGF0YScsIGRhdGEgPSB7fSk7CiAgfQoKICBpZiAoaXNTZXR0ZXIpIHsKICAgIGRhdGFba2V5XSA9IHZhbHVlOwogIH0gZWxzZSB7CiAgICBpZiAoa2V5RGVmaW5lZCkgewogICAgICBpZiAoaXNTaW1wbGVHZXR0ZXIpIHsKICAgICAgICAvLyBkb24ndCBjcmVhdGUgZGF0YSBpbiB0aGlzIGNhc2UuCiAgICAgICAgcmV0dXJuIGRhdGEgJiYgZGF0YVtrZXldOwogICAgICB9IGVsc2UgewogICAgICAgIGV4dGVuZChkYXRhLCBrZXkpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZGF0YTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGpxTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSB7CiAgaWYgKCFlbGVtZW50LmdldEF0dHJpYnV0ZSkgcmV0dXJuIGZhbHNlOwogIHJldHVybiAoKCIgIiArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAiICIpLnJlcGxhY2UoL1tcblx0XS9nLCAiICIpLgogICAgICBpbmRleE9mKCAiICIgKyBzZWxlY3RvciArICIgIiApID4gLTEpOwp9CgpmdW5jdGlvbiBqcUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7CiAgaWYgKGNzc0NsYXNzZXMgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHsKICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykgewogICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0cmltKAogICAgICAgICAgKCIgIiArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAiICIpCiAgICAgICAgICAucmVwbGFjZSgvW1xuXHRdL2csICIgIikKICAgICAgICAgIC5yZXBsYWNlKCIgIiArIHRyaW0oY3NzQ2xhc3MpICsgIiAiLCAiICIpKQogICAgICApOwogICAgfSk7CiAgfQp9CgpmdW5jdGlvbiBqcUxpdGVBZGRDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7CiAgaWYgKGNzc0NsYXNzZXMgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHsKICAgIHZhciBleGlzdGluZ0NsYXNzZXMgPSAoJyAnICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICcgJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXG5cdF0vZywgIiAiKTsKCiAgICBmb3JFYWNoKGNzc0NsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY3NzQ2xhc3MpIHsKICAgICAgY3NzQ2xhc3MgPSB0cmltKGNzc0NsYXNzKTsKICAgICAgaWYgKGV4aXN0aW5nQ2xhc3Nlcy5pbmRleE9mKCcgJyArIGNzc0NsYXNzICsgJyAnKSA9PT0gLTEpIHsKICAgICAgICBleGlzdGluZ0NsYXNzZXMgKz0gY3NzQ2xhc3MgKyAnICc7CiAgICAgIH0KICAgIH0pOwoKICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRyaW0oZXhpc3RpbmdDbGFzc2VzKSk7CiAgfQp9CgpmdW5jdGlvbiBqcUxpdGVBZGROb2Rlcyhyb290LCBlbGVtZW50cykgewogIGlmIChlbGVtZW50cykgewogICAgZWxlbWVudHMgPSAoIWVsZW1lbnRzLm5vZGVOYW1lICYmIGlzRGVmaW5lZChlbGVtZW50cy5sZW5ndGgpICYmICFpc1dpbmRvdyhlbGVtZW50cykpCiAgICAgID8gZWxlbWVudHMKICAgICAgOiBbIGVsZW1lbnRzIF07CiAgICBmb3IodmFyIGk9MDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHJvb3QucHVzaChlbGVtZW50c1tpXSk7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBqcUxpdGVDb250cm9sbGVyKGVsZW1lbnQsIG5hbWUpIHsKICByZXR1cm4ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJCcgKyAobmFtZSB8fCAnbmdDb250cm9sbGVyJyApICsgJ0NvbnRyb2xsZXInKTsKfQoKZnVuY3Rpb24ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCBuYW1lLCB2YWx1ZSkgewogIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7CgogIC8vIGlmIGVsZW1lbnQgaXMgdGhlIGRvY3VtZW50IG9iamVjdCB3b3JrIHdpdGggdGhlIGh0bWwgZWxlbWVudCBpbnN0ZWFkCiAgLy8gdGhpcyBtYWtlcyAkKGRvY3VtZW50KS5zY29wZSgpIHBvc3NpYmxlCiAgaWYoZWxlbWVudFswXS5ub2RlVHlwZSA9PSA5KSB7CiAgICBlbGVtZW50ID0gZWxlbWVudC5maW5kKCdodG1sJyk7CiAgfQogIHZhciBuYW1lcyA9IGlzQXJyYXkobmFtZSkgPyBuYW1lIDogW25hbWVdOwoKICB3aGlsZSAoZWxlbWVudC5sZW5ndGgpIHsKCiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIGlmICgodmFsdWUgPSBlbGVtZW50LmRhdGEobmFtZXNbaV0pKSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdmFsdWU7CiAgICB9CiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnQoKTsKICB9Cn0KCmZ1bmN0aW9uIGpxTGl0ZUVtcHR5KGVsZW1lbnQpIHsKICBmb3IgKHZhciBpID0gMCwgY2hpbGROb2RlcyA9IGVsZW1lbnQuY2hpbGROb2RlczsgaSA8IGNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHsKICAgIGpxTGl0ZURlYWxvYyhjaGlsZE5vZGVzW2ldKTsKICB9CiAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkgewogICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpOwogIH0KfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCi8vIEZ1bmN0aW9ucyB3aGljaCBhcmUgZGVjbGFyZWQgZGlyZWN0bHkuCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwp2YXIgSlFMaXRlUHJvdG90eXBlID0gSlFMaXRlLnByb3RvdHlwZSA9IHsKICByZWFkeTogZnVuY3Rpb24oZm4pIHsKICAgIHZhciBmaXJlZCA9IGZhbHNlOwoKICAgIGZ1bmN0aW9uIHRyaWdnZXIoKSB7CiAgICAgIGlmIChmaXJlZCkgcmV0dXJuOwogICAgICBmaXJlZCA9IHRydWU7CiAgICAgIGZuKCk7CiAgICB9CgogICAgLy8gY2hlY2sgaWYgZG9jdW1lbnQgYWxyZWFkeSBpcyBsb2FkZWQKICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKXsKICAgICAgc2V0VGltZW91dCh0cmlnZ2VyKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMub24oJ0RPTUNvbnRlbnRMb2FkZWQnLCB0cmlnZ2VyKTsgLy8gd29ya3MgZm9yIG1vZGVybiBicm93c2VycyBhbmQgSUU5CiAgICAgIC8vIHdlIGNhbiBub3QgdXNlIGpxTGl0ZSBzaW5jZSB3ZSBhcmUgbm90IGRvbmUgbG9hZGluZyBhbmQgalF1ZXJ5IGNvdWxkIGJlIGxvYWRlZCBsYXRlci4KICAgICAgLy8ganNoaW50IC1XMDY0CiAgICAgIEpRTGl0ZSh3aW5kb3cpLm9uKCdsb2FkJywgdHJpZ2dlcik7IC8vIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQgZm9yIG90aGVycwogICAgICAvLyBqc2hpbnQgK1cwNjQKICAgIH0KICB9LAogIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgIHZhciB2YWx1ZSA9IFtdOwogICAgZm9yRWFjaCh0aGlzLCBmdW5jdGlvbihlKXsgdmFsdWUucHVzaCgnJyArIGUpO30pOwogICAgcmV0dXJuICdbJyArIHZhbHVlLmpvaW4oJywgJykgKyAnXSc7CiAgfSwKCiAgZXE6IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgIHJldHVybiAoaW5kZXggPj0gMCkgPyBqcUxpdGUodGhpc1tpbmRleF0pIDoganFMaXRlKHRoaXNbdGhpcy5sZW5ndGggKyBpbmRleF0pOwogIH0sCgogIGxlbmd0aDogMCwKICBwdXNoOiBwdXNoLAogIHNvcnQ6IFtdLnNvcnQsCiAgc3BsaWNlOiBbXS5zcGxpY2UKfTsKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBGdW5jdGlvbnMgaXRlcmF0aW5nIGdldHRlci9zZXR0ZXJzLgovLyB0aGVzZSBmdW5jdGlvbnMgcmV0dXJuIHNlbGYgb24gc2V0dGVyIGFuZAovLyB2YWx1ZSBvbiBnZXQuCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwp2YXIgQk9PTEVBTl9BVFRSID0ge307CmZvckVhY2goJ211bHRpcGxlLHNlbGVjdGVkLGNoZWNrZWQsZGlzYWJsZWQscmVhZE9ubHkscmVxdWlyZWQsb3Blbicuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHsKICBCT09MRUFOX0FUVFJbbG93ZXJjYXNlKHZhbHVlKV0gPSB2YWx1ZTsKfSk7CnZhciBCT09MRUFOX0VMRU1FTlRTID0ge307CmZvckVhY2goJ2lucHV0LHNlbGVjdCxvcHRpb24sdGV4dGFyZWEsYnV0dG9uLGZvcm0sZGV0YWlscycuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHsKICBCT09MRUFOX0VMRU1FTlRTW3VwcGVyY2FzZSh2YWx1ZSldID0gdHJ1ZTsKfSk7CgpmdW5jdGlvbiBnZXRCb29sZWFuQXR0ck5hbWUoZWxlbWVudCwgbmFtZSkgewogIC8vIGNoZWNrIGRvbSBsYXN0IHNpbmNlIHdlIHdpbGwgbW9zdCBsaWtlbHkgZmFpbCBvbiBuYW1lCiAgdmFyIGJvb2xlYW5BdHRyID0gQk9PTEVBTl9BVFRSW25hbWUudG9Mb3dlckNhc2UoKV07CgogIC8vIGJvb2xlYW5BdHRyIGlzIGhlcmUgdHdpY2UgdG8gbWluaW1pemUgRE9NIGFjY2VzcwogIHJldHVybiBib29sZWFuQXR0ciAmJiBCT09MRUFOX0VMRU1FTlRTW2VsZW1lbnQubm9kZU5hbWVdICYmIGJvb2xlYW5BdHRyOwp9Cgpmb3JFYWNoKHsKICBkYXRhOiBqcUxpdGVEYXRhLAogIGluaGVyaXRlZERhdGE6IGpxTGl0ZUluaGVyaXRlZERhdGEsCgogIHNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSEKICAgIHJldHVybiBqcUxpdGUoZWxlbWVudCkuZGF0YSgnJHNjb3BlJykgfHwganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudCwgWyckaXNvbGF0ZVNjb3BlJywgJyRzY29wZSddKTsKICB9LAoKICBpc29sYXRlU2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIC8vIENhbid0IHVzZSBqcUxpdGVEYXRhIGhlcmUgZGlyZWN0bHkgc28gd2Ugc3RheSBjb21wYXRpYmxlIHdpdGggalF1ZXJ5IQogICAgcmV0dXJuIGpxTGl0ZShlbGVtZW50KS5kYXRhKCckaXNvbGF0ZVNjb3BlJykgfHwganFMaXRlKGVsZW1lbnQpLmRhdGEoJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyk7CiAgfSwKCiAgY29udHJvbGxlcjoganFMaXRlQ29udHJvbGxlciAsCgogIGluamVjdG9yOiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICByZXR1cm4ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJGluamVjdG9yJyk7CiAgfSwKCiAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oZWxlbWVudCxuYW1lKSB7CiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsKICB9LAoKICBoYXNDbGFzczoganFMaXRlSGFzQ2xhc3MsCgogIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHsKICAgIG5hbWUgPSBjYW1lbENhc2UobmFtZSk7CgogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudC5zdHlsZVtuYW1lXSA9IHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgdmFyIHZhbDsKCiAgICAgIGlmIChtc2llIDw9IDgpIHsKICAgICAgICAvLyB0aGlzIGlzIHNvbWUgSUUgc3BlY2lmaWMgd2VpcmRuZXNzIHRoYXQgalF1ZXJ5IDEuNi40IGRvZXMgbm90IHN1cmUgd2h5CiAgICAgICAgdmFsID0gZWxlbWVudC5jdXJyZW50U3R5bGUgJiYgZWxlbWVudC5jdXJyZW50U3R5bGVbbmFtZV07CiAgICAgICAgaWYgKHZhbCA9PT0gJycpIHZhbCA9ICdhdXRvJzsKICAgICAgfQoKICAgICAgdmFsID0gdmFsIHx8IGVsZW1lbnQuc3R5bGVbbmFtZV07CgogICAgICBpZiAobXNpZSA8PSA4KSB7CiAgICAgICAgLy8ganF1ZXJ5IHdlaXJkbmVzcyA6LS8KICAgICAgICB2YWwgPSAodmFsID09PSAnJykgPyB1bmRlZmluZWQgOiB2YWw7CiAgICAgIH0KCiAgICAgIHJldHVybiAgdmFsOwogICAgfQogIH0sCgogIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKXsKICAgIHZhciBsb3dlcmNhc2VkTmFtZSA9IGxvd2VyY2FzZShuYW1lKTsKICAgIGlmIChCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdKSB7CiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7CiAgICAgICAgaWYgKCEhdmFsdWUpIHsKICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSB0cnVlOwogICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgbG93ZXJjYXNlZE5hbWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBlbGVtZW50W25hbWVdID0gZmFsc2U7CiAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShsb3dlcmNhc2VkTmFtZSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAoZWxlbWVudFtuYW1lXSB8fAogICAgICAgICAgICAgICAgIChlbGVtZW50LmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKG5hbWUpfHwgbm9vcCkuc3BlY2lmaWVkKQogICAgICAgICAgICAgICA/IGxvd2VyY2FzZWROYW1lCiAgICAgICAgICAgICAgIDogdW5kZWZpbmVkOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpOwogICAgfSBlbHNlIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSkgewogICAgICAvLyB0aGUgZXh0cmEgYXJndW1lbnQgIjIiIGlzIHRvIGdldCB0aGUgcmlnaHQgdGhpbmcgZm9yIGEuaHJlZiBpbiBJRSwgc2VlIGpRdWVyeSBjb2RlCiAgICAgIC8vIHNvbWUgZWxlbWVudHMgKGUuZy4gRG9jdW1lbnQpIGRvbid0IGhhdmUgZ2V0IGF0dHJpYnV0ZSwgc28gcmV0dXJuIHVuZGVmaW5lZAogICAgICB2YXIgcmV0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSwgMik7CiAgICAgIC8vIG5vcm1hbGl6ZSBub24tZXhpc3RpbmcgYXR0cmlidXRlcyB0byB1bmRlZmluZWQgKGFzIGpRdWVyeSkKICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDsKICAgIH0KICB9LAoKICBwcm9wOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB2YWx1ZSkgewogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGVsZW1lbnRbbmFtZV07CiAgICB9CiAgfSwKCiAgdGV4dDogKGZ1bmN0aW9uKCkgewogICAgdmFyIE5PREVfVFlQRV9URVhUX1BST1BFUlRZID0gW107CiAgICBpZiAobXNpZSA8IDkpIHsKICAgICAgTk9ERV9UWVBFX1RFWFRfUFJPUEVSVFlbMV0gPSAnaW5uZXJUZXh0JzsgICAgLyoqIEVsZW1lbnQgKiovCiAgICAgIE5PREVfVFlQRV9URVhUX1BST1BFUlRZWzNdID0gJ25vZGVWYWx1ZSc7ICAgIC8qKiBUZXh0ICoqLwogICAgfSBlbHNlIHsKICAgICAgTk9ERV9UWVBFX1RFWFRfUFJPUEVSVFlbMV0gPSAgICAgICAgICAgICAgICAgLyoqIEVsZW1lbnQgKiovCiAgICAgIE5PREVfVFlQRV9URVhUX1BST1BFUlRZWzNdID0gJ3RleHRDb250ZW50JzsgIC8qKiBUZXh0ICoqLwogICAgfQogICAgZ2V0VGV4dC4kZHYgPSAnJzsKICAgIHJldHVybiBnZXRUZXh0OwoKICAgIGZ1bmN0aW9uIGdldFRleHQoZWxlbWVudCwgdmFsdWUpIHsKICAgICAgdmFyIHRleHRQcm9wID0gTk9ERV9UWVBFX1RFWFRfUFJPUEVSVFlbZWxlbWVudC5ub2RlVHlwZV07CiAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgICByZXR1cm4gdGV4dFByb3AgPyBlbGVtZW50W3RleHRQcm9wXSA6ICcnOwogICAgICB9CiAgICAgIGVsZW1lbnRbdGV4dFByb3BdID0gdmFsdWU7CiAgICB9CiAgfSkoKSwKCiAgdmFsOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkgewogICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgewogICAgICBpZiAobm9kZU5hbWVfKGVsZW1lbnQpID09PSAnU0VMRUNUJyAmJiBlbGVtZW50Lm11bHRpcGxlKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICAgIGZvckVhY2goZWxlbWVudC5vcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7CiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDAgPyBudWxsIDogcmVzdWx0OwogICAgICB9CiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlOwogICAgfQogICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlOwogIH0sCgogIGh0bWw6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7CiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7CiAgICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTDsKICAgIH0KICAgIGZvciAodmFyIGkgPSAwLCBjaGlsZE5vZGVzID0gZWxlbWVudC5jaGlsZE5vZGVzOyBpIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykgewogICAgICBqcUxpdGVEZWFsb2MoY2hpbGROb2Rlc1tpXSk7CiAgICB9CiAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlOwogIH0sCgogIGVtcHR5OiBqcUxpdGVFbXB0eQp9LCBmdW5jdGlvbihmbiwgbmFtZSl7CiAgLyoqCiAgICogUHJvcGVydGllczogd3JpdGVzIHJldHVybiBzZWxlY3Rpb24sIHJlYWRzIHJldHVybiBmaXJzdCB2YWx1ZQogICAqLwogIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyKSB7CiAgICB2YXIgaSwga2V5OwoKICAgIC8vIGpxTGl0ZUhhc0NsYXNzIGhhcyBvbmx5IHR3byBhcmd1bWVudHMsIGJ1dCBpcyBhIGdldHRlci1vbmx5IGZuLCBzbyB3ZSBuZWVkIHRvIHNwZWNpYWwtY2FzZSBpdAogICAgLy8gaW4gYSB3YXkgdGhhdCBzdXJ2aXZlcyBtaW5pZmljYXRpb24uCiAgICAvLyBqcUxpdGVFbXB0eSB0YWtlcyBubyBhcmd1bWVudHMgYnV0IGlzIGEgc2V0dGVyLgogICAgaWYgKGZuICE9PSBqcUxpdGVFbXB0eSAmJgogICAgICAgICgoKGZuLmxlbmd0aCA9PSAyICYmIChmbiAhPT0ganFMaXRlSGFzQ2xhc3MgJiYgZm4gIT09IGpxTGl0ZUNvbnRyb2xsZXIpKSA/IGFyZzEgOiBhcmcyKSA9PT0gdW5kZWZpbmVkKSkgewogICAgICBpZiAoaXNPYmplY3QoYXJnMSkpIHsKCiAgICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIGJ1dCB0aGUgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHRoZSBrZXkvdmFsdWVzCiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGlmIChmbiA9PT0ganFMaXRlRGF0YSkgewogICAgICAgICAgICAvLyBkYXRhKCkgdGFrZXMgdGhlIHdob2xlIG9iamVjdCBpbiBqUXVlcnkKICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmb3IgKGtleSBpbiBhcmcxKSB7CiAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLgogICAgICAgIHZhciB2YWx1ZSA9IGZuLiRkdjsKICAgICAgICAvLyBPbmx5IGlmIHdlIGhhdmUgJGR2IGRvIHdlIGl0ZXJhdGUgb3ZlciBhbGwsIG90aGVyd2lzZSBpdCBpcyBqdXN0IHRoZSBmaXJzdCBlbGVtZW50LgogICAgICAgIHZhciBqaiA9ICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IE1hdGgubWluKHRoaXMubGVuZ3RoLCAxKSA6IHRoaXMubGVuZ3RoOwogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgamo7IGorKykgewogICAgICAgICAgdmFyIG5vZGVWYWx1ZSA9IGZuKHRoaXNbal0sIGFyZzEsIGFyZzIpOwogICAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlICsgbm9kZVZhbHVlIDogbm9kZVZhbHVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBzbyBhcHBseSB0byBhbGwgY2hpbGRyZW4KICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBmbih0aGlzW2ldLCBhcmcxLCBhcmcyKTsKICAgICAgfQogICAgICAvLyByZXR1cm4gc2VsZiBmb3IgY2hhaW5pbmcKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CiAgfTsKfSk7CgpmdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKSB7CiAgdmFyIGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCwgdHlwZSkgewogICAgaWYgKCFldmVudC5wcmV2ZW50RGVmYXVsdCkgewogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7IC8vaWUKICAgICAgfTsKICAgIH0KCiAgICBpZiAoIWV2ZW50LnN0b3BQcm9wYWdhdGlvbikgewogICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHsKICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlOyAvL2llCiAgICAgIH07CiAgICB9CgogICAgaWYgKCFldmVudC50YXJnZXQpIHsKICAgICAgZXZlbnQudGFyZ2V0ID0gZXZlbnQuc3JjRWxlbWVudCB8fCBkb2N1bWVudDsKICAgIH0KCiAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkpIHsKICAgICAgdmFyIHByZXZlbnQgPSBldmVudC5wcmV2ZW50RGVmYXVsdDsKICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHsKICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsKICAgICAgICBwcmV2ZW50LmNhbGwoZXZlbnQpOwogICAgICB9OwogICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7CiAgICB9CgogICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBldmVudC5kZWZhdWx0UHJldmVudGVkIHx8IGV2ZW50LnJldHVyblZhbHVlID09PSBmYWxzZTsKICAgIH07CgogICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uCiAgICB2YXIgZXZlbnRIYW5kbGVyc0NvcHkgPSBzaGFsbG93Q29weShldmVudHNbdHlwZSB8fCBldmVudC50eXBlXSB8fCBbXSk7CgogICAgZm9yRWFjaChldmVudEhhbmRsZXJzQ29weSwgZnVuY3Rpb24oZm4pIHsKICAgICAgZm4uY2FsbChlbGVtZW50LCBldmVudCk7CiAgICB9KTsKCiAgICAvLyBSZW1vdmUgbW9ua2V5LXBhdGNoZWQgbWV0aG9kcyAoSUUpLAogICAgLy8gYXMgdGhleSB3b3VsZCBjYXVzZSBtZW1vcnkgbGVha3MgaW4gSUU4LgogICAgaWYgKG1zaWUgPD0gOCkgewogICAgICAvLyBJRTcvOCBkb2VzIG5vdCBhbGxvdyB0byBkZWxldGUgcHJvcGVydHkgb24gbmF0aXZlIG9iamVjdAogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IG51bGw7CiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IG51bGw7CiAgICAgIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCA9IG51bGw7CiAgICB9IGVsc2UgewogICAgICAvLyBJdCBzaG91bGRuJ3QgYWZmZWN0IG5vcm1hbCBicm93c2VycyAobmF0aXZlIG1ldGhvZHMgYXJlIGRlZmluZWQgb24gcHJvdG90eXBlKS4KICAgICAgZGVsZXRlIGV2ZW50LnByZXZlbnREZWZhdWx0OwogICAgICBkZWxldGUgZXZlbnQuc3RvcFByb3BhZ2F0aW9uOwogICAgICBkZWxldGUgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkOwogICAgfQogIH07CiAgZXZlbnRIYW5kbGVyLmVsZW0gPSBlbGVtZW50OwogIHJldHVybiBldmVudEhhbmRsZXI7Cn0KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBGdW5jdGlvbnMgaXRlcmF0aW5nIHRyYXZlcnNhbC4KLy8gVGhlc2UgZnVuY3Rpb25zIGNoYWluIHJlc3VsdHMgaW50byBhIHNpbmdsZQovLyBzZWxlY3Rvci4KLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCmZvckVhY2goewogIHJlbW92ZURhdGE6IGpxTGl0ZVJlbW92ZURhdGEsCgogIGRlYWxvYzoganFMaXRlRGVhbG9jLAoKICBvbjogZnVuY3Rpb24gb25GbihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpewogICAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb25hcmdzJywgJ2pxTGl0ZSNvbigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgb3IgYGV2ZW50RGF0YWAgcGFyYW1ldGVycycpOwoKICAgIHZhciBldmVudHMgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2V2ZW50cycpLAogICAgICAgIGhhbmRsZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnaGFuZGxlJyk7CgogICAgaWYgKCFldmVudHMpIGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZXZlbnRzJywgZXZlbnRzID0ge30pOwogICAgaWYgKCFoYW5kbGUpIGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnaGFuZGxlJywgaGFuZGxlID0gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cykpOwoKICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKXsKICAgICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdOwoKICAgICAgaWYgKCFldmVudEZucykgewogICAgICAgIGlmICh0eXBlID09ICdtb3VzZWVudGVyJyB8fCB0eXBlID09ICdtb3VzZWxlYXZlJykgewogICAgICAgICAgdmFyIGNvbnRhaW5zID0gZG9jdW1lbnQuYm9keS5jb250YWlucyB8fCBkb2N1bWVudC5ib2R5LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uID8KICAgICAgICAgIGZ1bmN0aW9uKCBhLCBiICkgewogICAgICAgICAgICAvLyBqc2hpbnQgYml0d2lzZTogZmFsc2UKICAgICAgICAgICAgdmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSwKICAgICAgICAgICAgYnVwID0gYiAmJiBiLnBhcmVudE5vZGU7CiAgICAgICAgICAgIHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKAogICAgICAgICAgICAgIGFkb3duLmNvbnRhaW5zID8KICAgICAgICAgICAgICBhZG93bi5jb250YWlucyggYnVwICkgOgogICAgICAgICAgICAgIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNgogICAgICAgICAgICAgICkpOwogICAgICAgICAgICB9IDoKICAgICAgICAgICAgZnVuY3Rpb24oIGEsIGIgKSB7CiAgICAgICAgICAgICAgaWYgKCBiICkgewogICAgICAgICAgICAgICAgd2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7CiAgICAgICAgICAgICAgICAgIGlmICggYiA9PT0gYSApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH07CgogICAgICAgICAgZXZlbnRzW3R5cGVdID0gW107CgogICAgICAgICAgLy8gUmVmZXIgdG8galF1ZXJ5J3MgaW1wbGVtZW50YXRpb24gb2YgbW91c2VlbnRlciAmIG1vdXNlbGVhdmUKICAgICAgICAgIC8vIFJlYWQgYWJvdXQgbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZToKICAgICAgICAgIC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX21vdXNlLmh0bWwjbGluazgKICAgICAgICAgIHZhciBldmVudG1hcCA9IHsgbW91c2VsZWF2ZSA6ICJtb3VzZW91dCIsIG1vdXNlZW50ZXIgOiAibW91c2VvdmVyIn07CgogICAgICAgICAgb25GbihlbGVtZW50LCBldmVudG1hcFt0eXBlXSwgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0OwogICAgICAgICAgICAvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuCiAgICAgICAgICAgIC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93CiAgICAgICAgICAgIGlmICggIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhY29udGFpbnModGFyZ2V0LCByZWxhdGVkKSkgKXsKICAgICAgICAgICAgICBoYW5kbGUoZXZlbnQsIHR5cGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpOwogICAgICAgICAgZXZlbnRzW3R5cGVdID0gW107CiAgICAgICAgfQogICAgICAgIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdOwogICAgICB9CiAgICAgIGV2ZW50Rm5zLnB1c2goZm4pOwogICAgfSk7CiAgfSwKCiAgb2ZmOiBqcUxpdGVPZmYsCgogIG9uZTogZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHsKICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7CgogICAgLy9hZGQgdGhlIGxpc3RlbmVyIHR3aWNlIHNvIHRoYXQgd2hlbiBpdCBpcyBjYWxsZWQKICAgIC8veW91IGNhbiByZW1vdmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFuZCBzdGlsbCBiZQogICAgLy9hYmxlIHRvIGNhbGwgZWxlbWVudC5vZmYoZXYsIGZuKSBub3JtYWxseQogICAgZWxlbWVudC5vbih0eXBlLCBmdW5jdGlvbiBvbkZuKCkgewogICAgICBlbGVtZW50Lm9mZih0eXBlLCBmbik7CiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIG9uRm4pOwogICAgfSk7CiAgICBlbGVtZW50Lm9uKHR5cGUsIGZuKTsKICB9LAoKICByZXBsYWNlV2l0aDogZnVuY3Rpb24oZWxlbWVudCwgcmVwbGFjZU5vZGUpIHsKICAgIHZhciBpbmRleCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAganFMaXRlRGVhbG9jKGVsZW1lbnQpOwogICAgZm9yRWFjaChuZXcgSlFMaXRlKHJlcGxhY2VOb2RlKSwgZnVuY3Rpb24obm9kZSl7CiAgICAgIGlmIChpbmRleCkgewogICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpOwogICAgICB9IGVsc2UgewogICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobm9kZSwgZWxlbWVudCk7CiAgICAgIH0KICAgICAgaW5kZXggPSBub2RlOwogICAgfSk7CiAgfSwKCiAgY2hpbGRyZW46IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHZhciBjaGlsZHJlbiA9IFtdOwogICAgZm9yRWFjaChlbGVtZW50LmNoaWxkTm9kZXMsIGZ1bmN0aW9uKGVsZW1lbnQpewogICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkKICAgICAgICBjaGlsZHJlbi5wdXNoKGVsZW1lbnQpOwogICAgfSk7CiAgICByZXR1cm4gY2hpbGRyZW47CiAgfSwKCiAgY29udGVudHM6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIHJldHVybiBlbGVtZW50LmNoaWxkTm9kZXMgfHwgW107CiAgfSwKCiAgYXBwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7CiAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKXsKICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IDEgfHwgZWxlbWVudC5ub2RlVHlwZSA9PT0gMTEpIHsKICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNoaWxkKTsKICAgICAgfQogICAgfSk7CiAgfSwKCiAgcHJlcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkgewogICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHsKICAgICAgdmFyIGluZGV4ID0gZWxlbWVudC5maXJzdENoaWxkOwogICAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKXsKICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShjaGlsZCwgaW5kZXgpOwogICAgICB9KTsKICAgIH0KICB9LAoKICB3cmFwOiBmdW5jdGlvbihlbGVtZW50LCB3cmFwTm9kZSkgewogICAgd3JhcE5vZGUgPSBqcUxpdGUod3JhcE5vZGUpWzBdOwogICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgIGlmIChwYXJlbnQpIHsKICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZCh3cmFwTm9kZSwgZWxlbWVudCk7CiAgICB9CiAgICB3cmFwTm9kZS5hcHBlbmRDaGlsZChlbGVtZW50KTsKICB9LAoKICByZW1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50KTsKICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7CiAgfSwKCiAgYWZ0ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5ld0VsZW1lbnQpIHsKICAgIHZhciBpbmRleCA9IGVsZW1lbnQsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAgIGZvckVhY2gobmV3IEpRTGl0ZShuZXdFbGVtZW50KSwgZnVuY3Rpb24obm9kZSl7CiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpOwogICAgICBpbmRleCA9IG5vZGU7CiAgICB9KTsKICB9LAoKICBhZGRDbGFzczoganFMaXRlQWRkQ2xhc3MsCiAgcmVtb3ZlQ2xhc3M6IGpxTGl0ZVJlbW92ZUNsYXNzLAoKICB0b2dnbGVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IsIGNvbmRpdGlvbikgewogICAgaWYgKGlzVW5kZWZpbmVkKGNvbmRpdGlvbikpIHsKICAgICAgY29uZGl0aW9uID0gIWpxTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKTsKICAgIH0KICAgIChjb25kaXRpb24gPyBqcUxpdGVBZGRDbGFzcyA6IGpxTGl0ZVJlbW92ZUNsYXNzKShlbGVtZW50LCBzZWxlY3Rvcik7CiAgfSwKCiAgcGFyZW50OiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlOwogICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDsKICB9LAoKICBuZXh0OiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICBpZiAoZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nOwogICAgfQoKICAgIC8vIElFOCBkb2Vzbid0IGhhdmUgbmV4dEVsZW1lbnRTaWJsaW5nCiAgICB2YXIgZWxtID0gZWxlbWVudC5uZXh0U2libGluZzsKICAgIHdoaWxlIChlbG0gIT0gbnVsbCAmJiBlbG0ubm9kZVR5cGUgIT09IDEpIHsKICAgICAgZWxtID0gZWxtLm5leHRTaWJsaW5nOwogICAgfQogICAgcmV0dXJuIGVsbTsKICB9LAoKICBmaW5kOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3RvcikgewogICAgaWYgKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUpIHsKICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsZWN0b3IpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIFtdOwogICAgfQogIH0sCgogIGNsb25lOiBqcUxpdGVDbG9uZSwKCiAgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50TmFtZSwgZXZlbnREYXRhKSB7CiAgICB2YXIgZXZlbnRGbnMgPSAoanFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsICdldmVudHMnKSB8fCB7fSlbZXZlbnROYW1lXTsKCiAgICBldmVudERhdGEgPSBldmVudERhdGEgfHwgW107CgogICAgdmFyIGV2ZW50ID0gW3sKICAgICAgcHJldmVudERlZmF1bHQ6IG5vb3AsCiAgICAgIHN0b3BQcm9wYWdhdGlvbjogbm9vcAogICAgfV07CgogICAgZm9yRWFjaChldmVudEZucywgZnVuY3Rpb24oZm4pIHsKICAgICAgZm4uYXBwbHkoZWxlbWVudCwgZXZlbnQuY29uY2F0KGV2ZW50RGF0YSkpOwogICAgfSk7CiAgfQp9LCBmdW5jdGlvbihmbiwgbmFtZSl7CiAgLyoqCiAgICogY2hhaW5pbmcgZnVuY3Rpb25zCiAgICovCiAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHsKICAgIHZhciB2YWx1ZTsKICAgIGZvcih2YXIgaT0wOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7CiAgICAgICAgdmFsdWUgPSBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKTsKICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkgewogICAgICAgICAgLy8gYW55IGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSB2YWx1ZSBuZWVkcyB0byBiZSB3cmFwcGVkCiAgICAgICAgICB2YWx1ZSA9IGpxTGl0ZSh2YWx1ZSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGpxTGl0ZUFkZE5vZGVzKHZhbHVlLCBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBpc0RlZmluZWQodmFsdWUpID8gdmFsdWUgOiB0aGlzOwogIH07CgogIC8vIGJpbmQgbGVnYWN5IGJpbmQvdW5iaW5kIHRvIG9uL29mZgogIEpRTGl0ZS5wcm90b3R5cGUuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub247CiAgSlFMaXRlLnByb3RvdHlwZS51bmJpbmQgPSBKUUxpdGUucHJvdG90eXBlLm9mZjsKfSk7CgovKioKICogQ29tcHV0ZXMgYSBoYXNoIG9mIGFuICdvYmonLgogKiBIYXNoIG9mIGE6CiAqICBzdHJpbmcgaXMgc3RyaW5nCiAqICBudW1iZXIgaXMgbnVtYmVyIGFzIHN0cmluZwogKiAgb2JqZWN0IGlzIGVpdGhlciByZXN1bHQgb2YgY2FsbGluZyAkJGhhc2hLZXkgZnVuY3Rpb24gb24gdGhlIG9iamVjdCBvciB1bmlxdWVseSBnZW5lcmF0ZWQgaWQsCiAqICAgICAgICAgdGhhdCBpcyBhbHNvIGFzc2lnbmVkIHRvIHRoZSAkJGhhc2hLZXkgcHJvcGVydHkgb2YgdGhlIG9iamVjdC4KICoKICogQHBhcmFtIG9iagogKiBAcmV0dXJucyB7c3RyaW5nfSBoYXNoIHN0cmluZyBzdWNoIHRoYXQgdGhlIHNhbWUgaW5wdXQgd2lsbCBoYXZlIHRoZSBzYW1lIGhhc2ggc3RyaW5nLgogKiAgICAgICAgIFRoZSByZXN1bHRpbmcgc3RyaW5nIGtleSBpcyBpbiAndHlwZTpoYXNoS2V5JyBmb3JtYXQuCiAqLwpmdW5jdGlvbiBoYXNoS2V5KG9iaikgewogIHZhciBvYmpUeXBlID0gdHlwZW9mIG9iaiwKICAgICAga2V5OwoKICBpZiAob2JqVHlwZSA9PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwpIHsKICAgIGlmICh0eXBlb2YgKGtleSA9IG9iai4kJGhhc2hLZXkpID09ICdmdW5jdGlvbicpIHsKICAgICAgLy8gbXVzdCBpbnZva2Ugb24gb2JqZWN0IHRvIGtlZXAgdGhlIHJpZ2h0IHRoaXMKICAgICAga2V5ID0gb2JqLiQkaGFzaEtleSgpOwogICAgfSBlbHNlIGlmIChrZXkgPT09IHVuZGVmaW5lZCkgewogICAgICBrZXkgPSBvYmouJCRoYXNoS2V5ID0gbmV4dFVpZCgpOwogICAgfQogIH0gZWxzZSB7CiAgICBrZXkgPSBvYmo7CiAgfQoKICByZXR1cm4gb2JqVHlwZSArICc6JyArIGtleTsKfQoKLyoqCiAqIEhhc2hNYXAgd2hpY2ggY2FuIHVzZSBvYmplY3RzIGFzIGtleXMKICovCmZ1bmN0aW9uIEhhc2hNYXAoYXJyYXkpewogIGZvckVhY2goYXJyYXksIHRoaXMucHV0LCB0aGlzKTsKfQpIYXNoTWFwLnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBTdG9yZSBrZXkgdmFsdWUgcGFpcgogICAqIEBwYXJhbSBrZXkga2V5IHRvIHN0b3JlIGNhbiBiZSBhbnkgdHlwZQogICAqIEBwYXJhbSB2YWx1ZSB2YWx1ZSB0byBzdG9yZSBjYW4gYmUgYW55IHR5cGUKICAgKi8KICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgIHRoaXNbaGFzaEtleShrZXkpXSA9IHZhbHVlOwogIH0sCgogIC8qKgogICAqIEBwYXJhbSBrZXkKICAgKiBAcmV0dXJucyB0aGUgdmFsdWUgZm9yIHRoZSBrZXkKICAgKi8KICBnZXQ6IGZ1bmN0aW9uKGtleSkgewogICAgcmV0dXJuIHRoaXNbaGFzaEtleShrZXkpXTsKICB9LAoKICAvKioKICAgKiBSZW1vdmUgdGhlIGtleS92YWx1ZSBwYWlyCiAgICogQHBhcmFtIGtleQogICAqLwogIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7CiAgICB2YXIgdmFsdWUgPSB0aGlzW2tleSA9IGhhc2hLZXkoa2V5KV07CiAgICBkZWxldGUgdGhpc1trZXldOwogICAgcmV0dXJuIHZhbHVlOwogIH0KfTsKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgYW5ndWxhci5pbmplY3RvcgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZXMgYW4gaW5qZWN0b3IgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCBmb3IgcmV0cmlldmluZyBzZXJ2aWNlcyBhcyB3ZWxsIGFzIGZvcgogKiBkZXBlbmRlbmN5IGluamVjdGlvbiAoc2VlIHtAbGluayBndWlkZS9kaSBkZXBlbmRlbmN5IGluamVjdGlvbn0pLgogKgoKICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWUKICogICAgICAgIHtAbGluayBhbmd1bGFyLm1vZHVsZX0uIFRoZSBgbmdgIG1vZHVsZSBtdXN0IGJlIGV4cGxpY2l0bHkgYWRkZWQuCiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBJbmplY3RvciBmdW5jdGlvbi4gU2VlIHtAbGluayBBVVRPLiRpbmplY3RvciAkaW5qZWN0b3J9LgogKgogKiBAZXhhbXBsZQogKiBUeXBpY2FsIHVzYWdlCiAqIDxwcmU+CiAqICAgLy8gY3JlYXRlIGFuIGluamVjdG9yCiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZyddKTsKICoKICogICAvLyB1c2UgdGhlIGluamVjdG9yIHRvIGtpY2sgb2ZmIHlvdXIgYXBwbGljYXRpb24KICogICAvLyB1c2UgdGhlIHR5cGUgaW5mZXJlbmNlIHRvIGF1dG8gaW5qZWN0IGFyZ3VtZW50cywgb3IgdXNlIGltcGxpY2l0IGluamVjdGlvbgogKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJHJvb3RTY29wZSwgJGNvbXBpbGUsICRkb2N1bWVudCl7CiAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpOwogKiAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7CiAqICAgfSk7CiAqIDwvcHJlPgogKgogKiBTb21ldGltZXMgeW91IHdhbnQgdG8gZ2V0IGFjY2VzcyB0byB0aGUgaW5qZWN0b3Igb2YgYSBjdXJyZW50bHkgcnVubmluZyBBbmd1bGFyIGFwcAogKiBmcm9tIG91dHNpZGUgQW5ndWxhci4gUGVyaGFwcywgeW91IHdhbnQgdG8gaW5qZWN0IGFuZCBjb21waWxlIHNvbWUgbWFya3VwIGFmdGVyIHRoZQogKiBhcHBsaWNhdGlvbiBoYXMgYmVlbiBib290c3RyYXBwZWQuIFlvdSBjYW4gZG8gdGhpcyB1c2luZyBleHRyYSBgaW5qZWN0b3IoKWAgYWRkZWQKICogdG8gSlF1ZXJ5L2pxTGl0ZSBlbGVtZW50cy4gU2VlIHtAbGluayBhbmd1bGFyLmVsZW1lbnR9LgogKgogKiAqVGhpcyBpcyBmYWlybHkgcmFyZSBidXQgY291bGQgYmUgdGhlIGNhc2UgaWYgYSB0aGlyZCBwYXJ0eSBsaWJyYXJ5IGlzIGluamVjdGluZyB0aGUKICogbWFya3VwLioKICoKICogSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlIGEgbmV3IGJsb2NrIG9mIEhUTUwgY29udGFpbmluZyBhIGBuZy1jb250cm9sbGVyYAogKiBkaXJlY3RpdmUgaXMgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQgYm9keSBieSBKUXVlcnkuIFdlIHRoZW4gY29tcGlsZSBhbmQgbGluawogKiBpdCBpbnRvIHRoZSBjdXJyZW50IEFuZ3VsYXJKUyBzY29wZS4KICoKICogPHByZT4KICogdmFyICRkaXYgPSAkKCc8ZGl2IG5nLWNvbnRyb2xsZXI9Ik15Q3RybCI+e3tjb250ZW50LmxhYmVsfX08L2Rpdj4nKTsKICogJChkb2N1bWVudC5ib2R5KS5hcHBlbmQoJGRpdik7CiAqCiAqIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuaW5qZWN0b3IoKS5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUpIHsKICogICB2YXIgc2NvcGUgPSBhbmd1bGFyLmVsZW1lbnQoJGRpdikuc2NvcGUoKTsKICogICAkY29tcGlsZSgkZGl2KShzY29wZSk7CiAqIH0pOwogKiA8L3ByZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBvdmVydmlldwogKiBAbmFtZSBBVVRPCiAqIEBkZXNjcmlwdGlvbgogKgogKiBJbXBsaWNpdCBtb2R1bGUgd2hpY2ggZ2V0cyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIGVhY2gge0BsaW5rIEFVVE8uJGluamVjdG9yICRpbmplY3Rvcn0uCiAqLwoKdmFyIEZOX0FSR1MgPSAvXmZ1bmN0aW9uXHMqW15cKF0qXChccyooW15cKV0qKVwpL207CnZhciBGTl9BUkdfU1BMSVQgPSAvLC87CnZhciBGTl9BUkcgPSAvXlxzKihfPykoXFMrPylcMVxzKiQvOwp2YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcL1wvLiokKXwoXC9cKltcc1xTXSo/XCpcLykpL21nOwp2YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTsKZnVuY3Rpb24gYW5ub3RhdGUoZm4pIHsKICB2YXIgJGluamVjdCwKICAgICAgZm5UZXh0LAogICAgICBhcmdEZWNsLAogICAgICBsYXN0OwoKICBpZiAodHlwZW9mIGZuID09ICdmdW5jdGlvbicpIHsKICAgIGlmICghKCRpbmplY3QgPSBmbi4kaW5qZWN0KSkgewogICAgICAkaW5qZWN0ID0gW107CiAgICAgIGlmIChmbi5sZW5ndGgpIHsKICAgICAgICBmblRleHQgPSBmbi50b1N0cmluZygpLnJlcGxhY2UoU1RSSVBfQ09NTUVOVFMsICcnKTsKICAgICAgICBhcmdEZWNsID0gZm5UZXh0Lm1hdGNoKEZOX0FSR1MpOwogICAgICAgIGZvckVhY2goYXJnRGVjbFsxXS5zcGxpdChGTl9BUkdfU1BMSVQpLCBmdW5jdGlvbihhcmcpewogICAgICAgICAgYXJnLnJlcGxhY2UoRk5fQVJHLCBmdW5jdGlvbihhbGwsIHVuZGVyc2NvcmUsIG5hbWUpewogICAgICAgICAgICAkaW5qZWN0LnB1c2gobmFtZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgICBmbi4kaW5qZWN0ID0gJGluamVjdDsKICAgIH0KICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7CiAgICBsYXN0ID0gZm4ubGVuZ3RoIC0gMTsKICAgIGFzc2VydEFyZ0ZuKGZuW2xhc3RdLCAnZm4nKTsKICAgICRpbmplY3QgPSBmbi5zbGljZSgwLCBsYXN0KTsKICB9IGVsc2UgewogICAgYXNzZXJ0QXJnRm4oZm4sICdmbicsIHRydWUpOwogIH0KICByZXR1cm4gJGluamVjdDsKfQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBBVVRPLiRpbmplY3RvcgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIGAkaW5qZWN0b3JgIGlzIHVzZWQgdG8gcmV0cmlldmUgb2JqZWN0IGluc3RhbmNlcyBhcyBkZWZpbmVkIGJ5CiAqIHtAbGluayBBVVRPLiRwcm92aWRlIHByb3ZpZGVyfSwgaW5zdGFudGlhdGUgdHlwZXMsIGludm9rZSBtZXRob2RzLAogKiBhbmQgbG9hZCBtb2R1bGVzLgogKgogKiBUaGUgZm9sbG93aW5nIGFsd2F5cyBob2xkcyB0cnVlOgogKgogKiA8cHJlPgogKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKCk7CiAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7CiAqICAgZXhwZWN0KCRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGluamVjdG9yKXsKICogICAgIHJldHVybiAkaW5qZWN0b3I7CiAqICAgfSkudG9CZSgkaW5qZWN0b3IpOwogKiA8L3ByZT4KICoKICogIyBJbmplY3Rpb24gRnVuY3Rpb24gQW5ub3RhdGlvbgogKgogKiBKYXZhU2NyaXB0IGRvZXMgbm90IGhhdmUgYW5ub3RhdGlvbnMsIGFuZCBhbm5vdGF0aW9ucyBhcmUgbmVlZGVkIGZvciBkZXBlbmRlbmN5IGluamVjdGlvbi4gVGhlCiAqIGZvbGxvd2luZyBhcmUgYWxsIHZhbGlkIHdheXMgb2YgYW5ub3RhdGluZyBmdW5jdGlvbiB3aXRoIGluamVjdGlvbiBhcmd1bWVudHMgYW5kIGFyZSBlcXVpdmFsZW50LgogKgogKiA8cHJlPgogKiAgIC8vIGluZmVycmVkIChvbmx5IHdvcmtzIGlmIGNvZGUgbm90IG1pbmlmaWVkL29iZnVzY2F0ZWQpCiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbihzZXJ2aWNlQSl7fSk7CiAqCiAqICAgLy8gYW5ub3RhdGVkCiAqICAgZnVuY3Rpb24gZXhwbGljaXQoc2VydmljZUEpIHt9OwogKiAgIGV4cGxpY2l0LiRpbmplY3QgPSBbJ3NlcnZpY2VBJ107CiAqICAgJGluamVjdG9yLmludm9rZShleHBsaWNpdCk7CiAqCiAqICAgLy8gaW5saW5lCiAqICAgJGluamVjdG9yLmludm9rZShbJ3NlcnZpY2VBJywgZnVuY3Rpb24oc2VydmljZUEpe31dKTsKICogPC9wcmU+CiAqCiAqICMjIEluZmVyZW5jZQogKgogKiBJbiBKYXZhU2NyaXB0IGNhbGxpbmcgYHRvU3RyaW5nKClgIG9uIGEgZnVuY3Rpb24gcmV0dXJucyB0aGUgZnVuY3Rpb24gZGVmaW5pdGlvbi4gVGhlIGRlZmluaXRpb24KICogY2FuIHRoZW4gYmUgcGFyc2VkIGFuZCB0aGUgZnVuY3Rpb24gYXJndW1lbnRzIGNhbiBiZSBleHRyYWN0ZWQuICpOT1RFOiogVGhpcyBkb2VzIG5vdCB3b3JrIHdpdGgKICogbWluaWZpY2F0aW9uLCBhbmQgb2JmdXNjYXRpb24gdG9vbHMgc2luY2UgdGhlc2UgdG9vbHMgY2hhbmdlIHRoZSBhcmd1bWVudCBuYW1lcy4KICoKICogIyMgYCRpbmplY3RgIEFubm90YXRpb24KICogQnkgYWRkaW5nIGEgYCRpbmplY3RgIHByb3BlcnR5IG9udG8gYSBmdW5jdGlvbiB0aGUgaW5qZWN0aW9uIHBhcmFtZXRlcnMgY2FuIGJlIHNwZWNpZmllZC4KICoKICogIyMgSW5saW5lCiAqIEFzIGFuIGFycmF5IG9mIGluamVjdGlvbiBuYW1lcywgd2hlcmUgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXkgaXMgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgQVVUTy4kaW5qZWN0b3IjZ2V0CiAqIEBtZXRob2RPZiBBVVRPLiRpbmplY3RvcgogKgogKiBAZGVzY3JpcHRpb24KICogUmV0dXJuIGFuIGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UgdG8gcmV0cmlldmUuCiAqIEByZXR1cm4geyp9IFRoZSBpbnN0YW5jZS4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRpbmplY3RvciNpbnZva2UKICogQG1ldGhvZE9mIEFVVE8uJGluamVjdG9yCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBJbnZva2UgdGhlIG1ldGhvZCBhbmQgc3VwcGx5IHRoZSBtZXRob2QgYXJndW1lbnRzIGZyb20gdGhlIGAkaW5qZWN0b3JgLgogKgogKiBAcGFyYW0geyFmdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGludm9rZS4gRnVuY3Rpb24gcGFyYW1ldGVycyBhcmUgaW5qZWN0ZWQgYWNjb3JkaW5nIHRvIHRoZQogKiAgIHtAbGluayBndWlkZS9kaSAkaW5qZWN0IEFubm90YXRpb259IHJ1bGVzLgogKiBAcGFyYW0ge09iamVjdD19IHNlbGYgVGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kLgogKiBAcGFyYW0ge09iamVjdD19IGxvY2FscyBPcHRpb25hbCBvYmplY3QuIElmIHByZXNldCB0aGVuIGFueSBhcmd1bWVudCBuYW1lcyBhcmUgcmVhZCBmcm9tIHRoaXMKICogICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC4KICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgaW52b2tlZCBgZm5gIGZ1bmN0aW9uLgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJGluamVjdG9yI2hhcwogKiBAbWV0aG9kT2YgQVVUTy4kaW5qZWN0b3IKICoKICogQGRlc2NyaXB0aW9uCiAqIEFsbG93cyB0aGUgdXNlciB0byBxdWVyeSBpZiB0aGUgcGFydGljdWxhciBzZXJ2aWNlIGV4aXN0LgogKgogKiBAcGFyYW0ge3N0cmluZ30gTmFtZSBvZiB0aGUgc2VydmljZSB0byBxdWVyeS4KICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybnMgdHJ1ZSBpZiBpbmplY3RvciBoYXMgZ2l2ZW4gc2VydmljZS4KICovCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRpbmplY3RvciNpbnN0YW50aWF0ZQogKiBAbWV0aG9kT2YgQVVUTy4kaW5qZWN0b3IKICogQGRlc2NyaXB0aW9uCiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gaW52b2tlcyB0aGUgbmV3CiAqIG9wZXJhdG9yIGFuZCBzdXBwbGllcyBhbGwgb2YgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGJ5IHRoZQogKiBjb25zdHJ1Y3RvciBhbm5vdGF0aW9uLgogKgogKiBAcGFyYW0ge2Z1bmN0aW9ufSBUeXBlIEFubm90YXRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi4KICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzCiAqIG9iamVjdCBmaXJzdCwgYmVmb3JlIHRoZSBgJGluamVjdG9yYCBpcyBjb25zdWx0ZWQuCiAqIEByZXR1cm5zIHtPYmplY3R9IG5ldyBpbnN0YW5jZSBvZiBgVHlwZWAuCiAqLwoKLyoqCiAqIEBuZ2RvYyBtZXRob2QKICogQG5hbWUgQVVUTy4kaW5qZWN0b3IjYW5ub3RhdGUKICogQG1ldGhvZE9mIEFVVE8uJGluamVjdG9yCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBSZXR1cm5zIGFuIGFycmF5IG9mIHNlcnZpY2UgbmFtZXMgd2hpY2ggdGhlIGZ1bmN0aW9uIGlzIHJlcXVlc3RpbmcgZm9yIGluamVjdGlvbi4gVGhpcyBBUEkgaXMKICogdXNlZCBieSB0aGUgaW5qZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNlcnZpY2VzIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24gd2hlbiB0aGUKICogZnVuY3Rpb24gaXMgaW52b2tlZC4gVGhlcmUgYXJlIHRocmVlIHdheXMgaW4gd2hpY2ggdGhlIGZ1bmN0aW9uIGNhbiBiZSBhbm5vdGF0ZWQgd2l0aCB0aGUgbmVlZGVkCiAqIGRlcGVuZGVuY2llcy4KICoKICogIyBBcmd1bWVudCBuYW1lcwogKgogKiBUaGUgc2ltcGxlc3QgZm9ybSBpcyB0byBleHRyYWN0IHRoZSBkZXBlbmRlbmNpZXMgZnJvbSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi4gVGhpcyBpcyBkb25lCiAqIGJ5IGNvbnZlcnRpbmcgdGhlIGZ1bmN0aW9uIGludG8gYSBzdHJpbmcgdXNpbmcgYHRvU3RyaW5nKClgIG1ldGhvZCBhbmQgZXh0cmFjdGluZyB0aGUgYXJndW1lbnQKICogbmFtZXMuCiAqIDxwcmU+CiAqICAgLy8gR2l2ZW4KICogICBmdW5jdGlvbiBNeUNvbnRyb2xsZXIoJHNjb3BlLCAkcm91dGUpIHsKICogICAgIC8vIC4uLgogKiAgIH0KICoKICogICAvLyBUaGVuCiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKE15Q29udHJvbGxlcikpLnRvRXF1YWwoWyckc2NvcGUnLCAnJHJvdXRlJ10pOwogKiA8L3ByZT4KICoKICogVGhpcyBtZXRob2QgZG9lcyBub3Qgd29yayB3aXRoIGNvZGUgbWluaWZpY2F0aW9uIC8gb2JmdXNjYXRpb24uIEZvciB0aGlzIHJlYXNvbiB0aGUgZm9sbG93aW5nCiAqIGFubm90YXRpb24gc3RyYXRlZ2llcyBhcmUgc3VwcG9ydGVkLgogKgogKiAjIFRoZSBgJGluamVjdGAgcHJvcGVydHkKICoKICogSWYgYSBmdW5jdGlvbiBoYXMgYW4gYCRpbmplY3RgIHByb3BlcnR5IGFuZCBpdHMgdmFsdWUgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiB0aGUgc3RyaW5ncwogKiByZXByZXNlbnQgbmFtZXMgb2Ygc2VydmljZXMgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24uCiAqIDxwcmU+CiAqICAgLy8gR2l2ZW4KICogICB2YXIgTXlDb250cm9sbGVyID0gZnVuY3Rpb24ob2JmdXNjYXRlZFNjb3BlLCBvYmZ1c2NhdGVkUm91dGUpIHsKICogICAgIC8vIC4uLgogKiAgIH0KICogICAvLyBEZWZpbmUgZnVuY3Rpb24gZGVwZW5kZW5jaWVzCiAqICAgTXlDb250cm9sbGVyWyckaW5qZWN0J10gPSBbJyRzY29wZScsICckcm91dGUnXTsKICoKICogICAvLyBUaGVuCiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKE15Q29udHJvbGxlcikpLnRvRXF1YWwoWyckc2NvcGUnLCAnJHJvdXRlJ10pOwogKiA8L3ByZT4KICoKICogIyBUaGUgYXJyYXkgbm90YXRpb24KICoKICogSXQgaXMgb2Z0ZW4gZGVzaXJhYmxlIHRvIGlubGluZSBJbmplY3RlZCBmdW5jdGlvbnMgYW5kIHRoYXQncyB3aGVuIHNldHRpbmcgdGhlIGAkaW5qZWN0YCBwcm9wZXJ0eQogKiBpcyB2ZXJ5IGluY29udmVuaWVudC4gSW4gdGhlc2Ugc2l0dWF0aW9ucyB1c2luZyB0aGUgYXJyYXkgbm90YXRpb24gdG8gc3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGluCiAqIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uIGlzIGEgYmV0dGVyIGNob2ljZToKICoKICogPHByZT4KICogICAvLyBXZSB3aXNoIHRvIHdyaXRlIHRoaXMgKG5vdCBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbiBzYWZlKQogKiAgIGluamVjdG9yLmludm9rZShmdW5jdGlvbigkY29tcGlsZSwgJHJvb3RTY29wZSkgewogKiAgICAgLy8gLi4uCiAqICAgfSk7CiAqCiAqICAgLy8gV2UgYXJlIGZvcmNlZCB0byB3cml0ZSBicmVhayBpbmxpbmluZwogKiAgIHZhciB0bXBGbiA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRDb21waWxlLCBvYmZ1c2NhdGVkUm9vdFNjb3BlKSB7CiAqICAgICAvLyAuLi4KICogICB9OwogKiAgIHRtcEZuLiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRyb290U2NvcGUnXTsKICogICBpbmplY3Rvci5pbnZva2UodG1wRm4pOwogKgogKiAgIC8vIFRvIGJldHRlciBzdXBwb3J0IGlubGluZSBmdW5jdGlvbiB0aGUgaW5saW5lIGFubm90YXRpb24gaXMgc3VwcG9ydGVkCiAqICAgaW5qZWN0b3IuaW52b2tlKFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKG9iZkNvbXBpbGUsIG9iZlJvb3RTY29wZSkgewogKiAgICAgLy8gLi4uCiAqICAgfV0pOwogKgogKiAgIC8vIFRoZXJlZm9yZQogKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZSgKICogICAgICBbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZ1c18kY29tcGlsZSwgb2JmdXNfJHJvb3RTY29wZSkge31dKQogKiAgICApLnRvRXF1YWwoWyckY29tcGlsZScsICckcm9vdFNjb3BlJ10pOwogKiA8L3ByZT4KICoKICogQHBhcmFtIHtmdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gZm4gRnVuY3Rpb24gZm9yIHdoaWNoIGRlcGVuZGVudCBzZXJ2aWNlIG5hbWVzIG5lZWQgdG8KICogYmUgcmV0cmlldmVkIGFzIGRlc2NyaWJlZCBhYm92ZS4KICoKICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy4KICovCgoKCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBBVVRPLiRwcm92aWRlCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBUaGUge0BsaW5rIEFVVE8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGEgbnVtYmVyIG9mIG1ldGhvZHMgZm9yIHJlZ2lzdGVyaW5nIGNvbXBvbmVudHMKICogd2l0aCB0aGUge0BsaW5rIEFVVE8uJGluamVjdG9yICRpbmplY3Rvcn0uIE1hbnkgb2YgdGhlc2UgZnVuY3Rpb25zIGFyZSBhbHNvIGV4cG9zZWQgb24KICoge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfS4KICoKICogQW4gQW5ndWxhciAqKnNlcnZpY2UqKiBpcyBhIHNpbmdsZXRvbiBvYmplY3QgY3JlYXRlZCBieSBhICoqc2VydmljZSBmYWN0b3J5KiouICBUaGVzZSAqKnNlcnZpY2UKICogZmFjdG9yaWVzKiogYXJlIGZ1bmN0aW9ucyB3aGljaCwgaW4gdHVybiwgYXJlIGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKi4KICogVGhlICoqc2VydmljZSBwcm92aWRlcnMqKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLiBXaGVuIGluc3RhbnRpYXRlZCB0aGV5IG11c3QgY29udGFpbiBhCiAqIHByb3BlcnR5IGNhbGxlZCBgJGdldGAsIHdoaWNoIGhvbGRzIHRoZSAqKnNlcnZpY2UgZmFjdG9yeSoqIGZ1bmN0aW9uLgogKgogKiBXaGVuIHlvdSByZXF1ZXN0IGEgc2VydmljZSwgdGhlIHtAbGluayBBVVRPLiRpbmplY3RvciAkaW5qZWN0b3J9IGlzIHJlc3BvbnNpYmxlIGZvciBmaW5kaW5nIHRoZQogKiBjb3JyZWN0ICoqc2VydmljZSBwcm92aWRlcioqLCBpbnN0YW50aWF0aW5nIGl0IGFuZCB0aGVuIGNhbGxpbmcgaXRzIGAkZ2V0YCAqKnNlcnZpY2UgZmFjdG9yeSoqCiAqIGZ1bmN0aW9uIHRvIGdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlICoqc2VydmljZSoqLgogKgogKiBPZnRlbiBzZXJ2aWNlcyBoYXZlIG5vIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhbmQgdGhlcmUgaXMgbm8gbmVlZCB0byBhZGQgbWV0aG9kcyB0byB0aGUgc2VydmljZQogKiBwcm92aWRlci4gIFRoZSBwcm92aWRlciB3aWxsIGJlIG5vIG1vcmUgdGhhbiBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpdGggYSBgJGdldGAgcHJvcGVydHkuIEZvcgogKiB0aGVzZSBjYXNlcyB0aGUge0BsaW5rIEFVVE8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGFkZGl0aW9uYWwgaGVscGVyIG1ldGhvZHMgdG8gcmVnaXN0ZXIKICogc2VydmljZXMgd2l0aG91dCBzcGVjaWZ5aW5nIGEgcHJvdmlkZXIuCiAqCiAqICoge0BsaW5rIEFVVE8uJHByb3ZpZGUjbWV0aG9kc19wcm92aWRlciBwcm92aWRlcihwcm92aWRlcil9IC0gcmVnaXN0ZXJzIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogd2l0aCB0aGUKICogICAgIHtAbGluayBBVVRPLiRpbmplY3RvciAkaW5qZWN0b3J9CiAqICoge0BsaW5rIEFVVE8uJHByb3ZpZGUjbWV0aG9kc19jb25zdGFudCBjb25zdGFudChvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBiZSBhY2Nlc3NlZCBieQogKiAgICAgcHJvdmlkZXJzIGFuZCBzZXJ2aWNlcy4KICogKiB7QGxpbmsgQVVUTy4kcHJvdmlkZSNtZXRob2RzX3ZhbHVlIHZhbHVlKG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIG9ubHkgYmUgYWNjZXNzZWQgYnkKICogICAgIHNlcnZpY2VzLCBub3QgcHJvdmlkZXJzLgogKiAqIHtAbGluayBBVVRPLiRwcm92aWRlI21ldGhvZHNfZmFjdG9yeSBmYWN0b3J5KGZuKX0gLSByZWdpc3RlcnMgYSBzZXJ2aWNlICoqZmFjdG9yeSBmdW5jdGlvbioqLCBgZm5gLAogKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGNvbnRhaW4gdGhlCiAqICAgICBnaXZlbiBmYWN0b3J5IGZ1bmN0aW9uLgogKiAqIHtAbGluayBBVVRPLiRwcm92aWRlI21ldGhvZHNfc2VydmljZSBzZXJ2aWNlKGNsYXNzKX0gLSByZWdpc3RlcnMgYSAqKmNvbnN0cnVjdG9yIGZ1bmN0aW9uKiosIGBjbGFzc2AgdGhhdAogKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGluc3RhbnRpYXRlCiAqICAgICAgYSBuZXcgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBjb25zdHJ1Y3RvciBmdW5jdGlvbi4KICoKICogU2VlIHRoZSBpbmRpdmlkdWFsIG1ldGhvZHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzLgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJHByb3ZpZGUjcHJvdmlkZXIKICogQG1ldGhvZE9mIEFVVE8uJHByb3ZpZGUKICogQGRlc2NyaXB0aW9uCiAqCiAqIFJlZ2lzdGVyIGEgKipwcm92aWRlciBmdW5jdGlvbioqIHdpdGggdGhlIHtAbGluayBBVVRPLiRpbmplY3RvciAkaW5qZWN0b3J9LiBQcm92aWRlciBmdW5jdGlvbnMKICogYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucywgd2hvc2UgaW5zdGFuY2VzIGFyZSByZXNwb25zaWJsZSBmb3IgInByb3ZpZGluZyIgYSBmYWN0b3J5IGZvciBhCiAqIHNlcnZpY2UuCiAqCiAqIFNlcnZpY2UgcHJvdmlkZXIgbmFtZXMgc3RhcnQgd2l0aCB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSB0aGV5IHByb3ZpZGUgZm9sbG93ZWQgYnkgYFByb3ZpZGVyYC4KICogRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIGhhcyBhIHByb3ZpZGVyIGNhbGxlZAogKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyICRsb2dQcm92aWRlcn0uCiAqCiAqIFNlcnZpY2UgcHJvdmlkZXIgb2JqZWN0cyBjYW4gaGF2ZSBhZGRpdGlvbmFsIG1ldGhvZHMgd2hpY2ggYWxsb3cgY29uZmlndXJhdGlvbiBvZiB0aGUgcHJvdmlkZXIKICogYW5kIGl0cyBzZXJ2aWNlLiBJbXBvcnRhbnRseSwgeW91IGNhbiBjb25maWd1cmUgd2hhdCBraW5kIG9mIHNlcnZpY2UgaXMgY3JlYXRlZCBieSB0aGUgYCRnZXRgCiAqIG1ldGhvZCwgb3IgaG93IHRoYXQgc2VydmljZSB3aWxsIGFjdC4gRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyICRsb2dQcm92aWRlcn0gaGFzIGEKICogbWV0aG9kIHtAbGluayBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkIGRlYnVnRW5hYmxlZH0KICogd2hpY2ggbGV0cyB5b3Ugc3BlY2lmeSB3aGV0aGVyIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIHdpbGwgbG9nIGRlYnVnIG1lc3NhZ2VzIHRvIHRoZQogKiBjb25zb2xlIG9yIG5vdC4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLiBOT1RFOiB0aGUgcHJvdmlkZXIgd2lsbCBiZSBhdmFpbGFibGUgdW5kZXIgYG5hbWUgKwogICAgICAgICAgICAgICAgICAgICAgICAnUHJvdmlkZXInYCBrZXkuCiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbigpKX0gcHJvdmlkZXIgSWYgdGhlIHByb3ZpZGVyIGlzOgogKgogKiAgIC0gYE9iamVjdGA6IHRoZW4gaXQgc2hvdWxkIGhhdmUgYSBgJGdldGAgbWV0aG9kLiBUaGUgYCRnZXRgIG1ldGhvZCB3aWxsIGJlIGludm9rZWQgdXNpbmcKICogICAgICAgICAgICAgICB7QGxpbmsgQVVUTy4kaW5qZWN0b3IjaW52b2tlICRpbmplY3Rvci5pbnZva2UoKX0gd2hlbiBhbiBpbnN0YW5jZSBuZWVkcyB0byBiZQogKiAgICAgICAgICAgICAgIGNyZWF0ZWQuCiAqICAgLSBgQ29uc3RydWN0b3JgOiBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgcHJvdmlkZXIgd2lsbCBiZSBjcmVhdGVkIHVzaW5nCiAqICAgICAgICAgICAgICAge0BsaW5rIEFVVE8uJGluamVjdG9yI2luc3RhbnRpYXRlICRpbmplY3Rvci5pbnN0YW50aWF0ZSgpfSwgdGhlbiB0cmVhdGVkIGFzCiAqICAgICAgICAgICAgICAgYG9iamVjdGAuCiAqCiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2UKCiAqIEBleGFtcGxlCiAqCiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gY3JlYXRlIGEgc2ltcGxlIGV2ZW50IHRyYWNraW5nIHNlcnZpY2UgYW5kIHJlZ2lzdGVyIGl0IHVzaW5nCiAqIHtAbGluayBBVVRPLiRwcm92aWRlI21ldGhvZHNfcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uCiAqCiAqIDxwcmU+CiAqICAvLyBEZWZpbmUgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlcgogKiAgZnVuY3Rpb24gRXZlbnRUcmFja2VyUHJvdmlkZXIoKSB7CiAqICAgIHZhciB0cmFja2luZ1VybCA9ICcvdHJhY2snOwogKgogKiAgICAvLyBBIHByb3ZpZGVyIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgd2hlcmUgdGhlIHRyYWNrZWQgZXZlbnRzIHNob3VsZCBiZWVuIHNhdmVkCiAqICAgIHRoaXMuc2V0VHJhY2tpbmdVcmwgPSBmdW5jdGlvbih1cmwpIHsKICogICAgICB0cmFja2luZ1VybCA9IHVybDsKICogICAgfTsKICoKICogICAgLy8gVGhlIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvbgogKiAgICB0aGlzLiRnZXQgPSBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHsKICogICAgICB2YXIgdHJhY2tlZEV2ZW50cyA9IHt9OwogKiAgICAgIHJldHVybiB7CiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gdHJhY2sgYW4gZXZlbnQKICogICAgICAgIGV2ZW50OiBmdW5jdGlvbihldmVudCkgewogKiAgICAgICAgICB2YXIgY291bnQgPSB0cmFja2VkRXZlbnRzW2V2ZW50XSB8fCAwOwogKiAgICAgICAgICBjb3VudCArPSAxOwogKiAgICAgICAgICB0cmFja2VkRXZlbnRzW2V2ZW50XSA9IGNvdW50OwogKiAgICAgICAgICByZXR1cm4gY291bnQ7CiAqICAgICAgICB9LAogKiAgICAgICAgLy8gQ2FsbCB0aGlzIHRvIHNhdmUgdGhlIHRyYWNrZWQgZXZlbnRzIHRvIHRoZSB0cmFja2luZ1VybAogKiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7CiAqICAgICAgICAgICRodHRwLnBvc3QodHJhY2tpbmdVcmwsIHRyYWNrZWRFdmVudHMpOwogKiAgICAgICAgfQogKiAgICAgIH07CiAqICAgIH1dOwogKiAgfQogKgogKiAgZGVzY3JpYmUoJ2V2ZW50VHJhY2tlcicsIGZ1bmN0aW9uKCkgewogKiAgICB2YXIgcG9zdFNweTsKICoKICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oJHByb3ZpZGUpIHsKICogICAgICAvLyBSZWdpc3RlciB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyCiAqICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJ2V2ZW50VHJhY2tlcicsIEV2ZW50VHJhY2tlclByb3ZpZGVyKTsKICogICAgfSkpOwogKgogKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbihldmVudFRyYWNrZXJQcm92aWRlcikgewogKiAgICAgIC8vIENvbmZpZ3VyZSBldmVudFRyYWNrZXIgcHJvdmlkZXIKICogICAgICBldmVudFRyYWNrZXJQcm92aWRlci5zZXRUcmFja2luZ1VybCgnL2N1c3RvbS10cmFjaycpOwogKiAgICB9KSk7CiAqCiAqICAgIGl0KCd0cmFja3MgZXZlbnRzJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlcikgewogKiAgICAgIGV4cGVjdChldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJykpLnRvRXF1YWwoMSk7CiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgyKTsKICogICAgfSkpOwogKgogKiAgICBpdCgnc2F2ZXMgdG8gdGhlIHRyYWNraW5nIHVybCcsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIsICRodHRwKSB7CiAqICAgICAgcG9zdFNweSA9IHNweU9uKCRodHRwLCAncG9zdCcpOwogKiAgICAgIGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKTsKICogICAgICBldmVudFRyYWNrZXIuc2F2ZSgpOwogKiAgICAgIGV4cGVjdChwb3N0U3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7CiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkubm90LnRvRXF1YWwoJy90cmFjaycpOwogKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLnRvRXF1YWwoJy9jdXN0b20tdHJhY2snKTsKICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzFdKS50b0VxdWFsKHsgJ2xvZ2luJzogMSB9KTsKICogICAgfSkpOwogKiAgfSk7CiAqIDwvcHJlPgogKi8KCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJHByb3ZpZGUjZmFjdG9yeQogKiBAbWV0aG9kT2YgQVVUTy4kcHJvdmlkZQogKiBAZGVzY3JpcHRpb24KICoKICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgZmFjdG9yeSoqLCB3aGljaCB3aWxsIGJlIGNhbGxlZCB0byByZXR1cm4gdGhlIHNlcnZpY2UgaW5zdGFuY2UuCiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIgY29uc2lzdHMgb2Ygb25seSBhIGAkZ2V0YCBwcm9wZXJ0eSwKICogd2hpY2ggaXMgdGhlIGdpdmVuIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvbi4KICogWW91IHNob3VsZCB1c2Uge0BsaW5rIEFVVE8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KGdldEZuKX0gaWYgeW91IGRvIG5vdCBuZWVkIHRvCiAqIGNvbmZpZ3VyZSB5b3VyIHNlcnZpY2UgaW4gYSBwcm92aWRlci4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLgogKiBAcGFyYW0ge2Z1bmN0aW9uKCl9ICRnZXRGbiBUaGUgJGdldEZuIGZvciB0aGUgaW5zdGFuY2UgY3JlYXRpb24uIEludGVybmFsbHkgdGhpcyBpcyBhIHNob3J0IGhhbmQKICogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGAkcHJvdmlkZS5wcm92aWRlcihuYW1lLCB7JGdldDogJGdldEZufSlgLgogKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlCiAqCiAqIEBleGFtcGxlCiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIHNlcnZpY2UKICogPHByZT4KICogICAkcHJvdmlkZS5mYWN0b3J5KCdwaW5nJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7CiAqICAgICByZXR1cm4gZnVuY3Rpb24gcGluZygpIHsKICogICAgICAgcmV0dXJuICRodHRwLnNlbmQoJy9waW5nJyk7CiAqICAgICB9OwogKiAgIH1dKTsKICogPC9wcmU+CiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6CiAqIDxwcmU+CiAqICAgc29tZU1vZHVsZS5jb250cm9sbGVyKCdDdHJsJywgWydwaW5nJywgZnVuY3Rpb24ocGluZykgewogKiAgICAgcGluZygpOwogKiAgIH1dKTsKICogPC9wcmU+CiAqLwoKCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJHByb3ZpZGUjc2VydmljZQogKiBAbWV0aG9kT2YgQVVUTy4kcHJvdmlkZQogKiBAZGVzY3JpcHRpb24KICoKICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgY29uc3RydWN0b3IqKiwgd2hpY2ggd2lsbCBiZSBpbnZva2VkIHdpdGggYG5ld2AgdG8gY3JlYXRlIHRoZSBzZXJ2aWNlCiAqIGluc3RhbmNlLgogKiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIHRoZSBzZXJ2aWNlCiAqIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGluc3RhbnRpYXRlIHRoZSBzZXJ2aWNlIGluc3RhbmNlLgogKgogKiBZb3Ugc2hvdWxkIHVzZSB7QGxpbmsgQVVUTy4kcHJvdmlkZSNtZXRob2RzX3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9IGlmIHlvdSBkZWZpbmUgeW91ciBzZXJ2aWNlCiAqIGFzIGEgdHlwZS9jbGFzcy4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBBIGNsYXNzIChjb25zdHJ1Y3RvciBmdW5jdGlvbikgdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC4KICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZQogKgogKiBAZXhhbXBsZQogKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHVzaW5nCiAqIHtAbGluayBBVVRPLiRwcm92aWRlI21ldGhvZHNfc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0uCiAqIDxwcmU+CiAqICAgJHByb3ZpZGUuc2VydmljZSgncGluZycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkgewogKiAgICAgdmFyIFBpbmcgPSBmdW5jdGlvbigpIHsKICogICAgICAgdGhpcy4kaHR0cCA9ICRodHRwOwogKiAgICAgfTsKICogICAKICogICAgIFBpbmcucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbigpIHsKICogICAgICAgcmV0dXJuIHRoaXMuJGh0dHAuZ2V0KCcvcGluZycpOwogKiAgICAgfTsgCiAqICAgCiAqICAgICByZXR1cm4gUGluZzsKICogICB9XSk7CiAqIDwvcHJlPgogKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOgogKiA8cHJlPgogKiAgIHNvbWVNb2R1bGUuY29udHJvbGxlcignQ3RybCcsIFsncGluZycsIGZ1bmN0aW9uKHBpbmcpIHsKICogICAgIHBpbmcuc2VuZCgpOwogKiAgIH1dKTsKICogPC9wcmU+CiAqLwoKCi8qKgogKiBAbmdkb2MgbWV0aG9kCiAqIEBuYW1lIEFVVE8uJHByb3ZpZGUjdmFsdWUKICogQG1ldGhvZE9mIEFVVE8uJHByb3ZpZGUKICogQGRlc2NyaXB0aW9uCiAqCiAqIFJlZ2lzdGVyIGEgKip2YWx1ZSBzZXJ2aWNlKiogd2l0aCB0aGUge0BsaW5rIEFVVE8uJGluamVjdG9yICRpbmplY3Rvcn0sIHN1Y2ggYXMgYSBzdHJpbmcsIGEKICogbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24uICBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzCiAqIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB0aGUgKip2YWx1ZQogKiBzZXJ2aWNlKiouCiAqCiAqIFZhbHVlIHNlcnZpY2VzIGFyZSBzaW1pbGFyIHRvIGNvbnN0YW50IHNlcnZpY2VzLCBleGNlcHQgdGhhdCB0aGV5IGNhbm5vdCBiZSBpbmplY3RlZCBpbnRvIGEKICogbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYnV0IHRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gYnkKICogYW4gQW5ndWxhcgogKiB7QGxpbmsgQVVUTy4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLgogKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZS4KICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZQogKgogKiBAZXhhbXBsZQogKiBIZXJlIGFyZSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIHZhbHVlIHNlcnZpY2VzLgogKiA8cHJlPgogKiAgICRwcm92aWRlLnZhbHVlKCdBRE1JTl9VU0VSJywgJ2FkbWluJyk7CiAqCiAqICAgJHByb3ZpZGUudmFsdWUoJ1JvbGVMb29rdXAnLCB7IGFkbWluOiAwLCB3cml0ZXI6IDEsIHJlYWRlcjogMiB9KTsKICoKICogICAkcHJvdmlkZS52YWx1ZSgnaGFsZk9mJywgZnVuY3Rpb24odmFsdWUpIHsKICogICAgIHJldHVybiB2YWx1ZSAvIDI7CiAqICAgfSk7CiAqIDwvcHJlPgogKi8KCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRwcm92aWRlI2NvbnN0YW50CiAqIEBtZXRob2RPZiBBVVRPLiRwcm92aWRlCiAqIEBkZXNjcmlwdGlvbgogKgogKiBSZWdpc3RlciBhICoqY29uc3RhbnQgc2VydmljZSoqLCBzdWNoIGFzIGEgc3RyaW5nLCBhIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLAogKiB3aXRoIHRoZSB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfS4gVW5saWtlIHtAbGluayBBVVRPLiRwcm92aWRlI3ZhbHVlIHZhbHVlfSBpdCBjYW4gYmUKICogaW5qZWN0ZWQgaW50byBhIG1vZHVsZSBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIChzZWUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ30pIGFuZCBpdCBjYW5ub3QKICogYmUgb3ZlcnJpZGRlbiBieSBhbiBBbmd1bGFyIHtAbGluayBBVVRPLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3J9LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgY29uc3RhbnQuCiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIGNvbnN0YW50IHZhbHVlLgogKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIGluc3RhbmNlCiAqCiAqIEBleGFtcGxlCiAqIEhlcmUgYSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIGNvbnN0YW50czoKICogPHByZT4KICogICAkcHJvdmlkZS5jb25zdGFudCgnU0hBUkRfSEVJR0hUJywgMzA2KTsKICoKICogICAkcHJvdmlkZS5jb25zdGFudCgnTVlfQ09MT1VSUycsIFsncmVkJywgJ2JsdWUnLCAnZ3JleSddKTsKICoKICogICAkcHJvdmlkZS5jb25zdGFudCgnZG91YmxlJywgZnVuY3Rpb24odmFsdWUpIHsKICogICAgIHJldHVybiB2YWx1ZSAqIDI7CiAqICAgfSk7CiAqIDwvcHJlPgogKi8KCgovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBBVVRPLiRwcm92aWRlI2RlY29yYXRvcgogKiBAbWV0aG9kT2YgQVVUTy4kcHJvdmlkZQogKiBAZGVzY3JpcHRpb24KICoKICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgZGVjb3JhdG9yKiogd2l0aCB0aGUge0BsaW5rIEFVVE8uJGluamVjdG9yICRpbmplY3Rvcn0uIEEgc2VydmljZSBkZWNvcmF0b3IKICogaW50ZXJjZXB0cyB0aGUgY3JlYXRpb24gb2YgYSBzZXJ2aWNlLCBhbGxvd2luZyBpdCB0byBvdmVycmlkZSBvciBtb2RpZnkgdGhlIGJlaGF2aW91ciBvZiB0aGUKICogc2VydmljZS4gVGhlIG9iamVjdCByZXR1cm5lZCBieSB0aGUgZGVjb3JhdG9yIG1heSBiZSB0aGUgb3JpZ2luYWwgc2VydmljZSwgb3IgYSBuZXcgc2VydmljZQogKiBvYmplY3Qgd2hpY2ggcmVwbGFjZXMgb3Igd3JhcHMgYW5kIGRlbGVnYXRlcyB0byB0aGUgb3JpZ2luYWwgc2VydmljZS4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZGVjb3JhdG9yIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIHNlcnZpY2UgbmVlZHMgdG8gYmUKICogICAgaW5zdGFudGlhdGVkIGFuZCBzaG91bGQgcmV0dXJuIHRoZSBkZWNvcmF0ZWQgc2VydmljZSBpbnN0YW5jZS4gVGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCB1c2luZwogKiAgICB0aGUge0BsaW5rIEFVVE8uJGluamVjdG9yI2ludm9rZSBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuCiAqICAgIExvY2FsIGluamVjdGlvbiBhcmd1bWVudHM6CiAqCiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIG1vbmtleSBwYXRjaGVkLCBjb25maWd1cmVkLAogKiAgICAgIGRlY29yYXRlZCBvciBkZWxlZ2F0ZWQgdG8uCiAqCiAqIEBleGFtcGxlCiAqIEhlcmUgd2UgZGVjb3JhdGUgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2UgdG8gY29udmVydCB3YXJuaW5ncyB0byBlcnJvcnMgYnkgaW50ZXJjZXB0aW5nCiAqIGNhbGxzIHRvIHtAbGluayBuZy4kbG9nI2Vycm9yICRsb2cud2FybigpfS4KICogPHByZT4KICogICAkcHJvdmlkZXIuZGVjb3JhdG9yKCckbG9nJywgWyckZGVsZWdhdGUnLCBmdW5jdGlvbigkZGVsZWdhdGUpIHsKICogICAgICRkZWxlZ2F0ZS53YXJuID0gJGRlbGVnYXRlLmVycm9yOwogKiAgICAgcmV0dXJuICRkZWxlZ2F0ZTsKICogICB9XSk7CiAqIDwvcHJlPgogKi8KCgpmdW5jdGlvbiBjcmVhdGVJbmplY3Rvcihtb2R1bGVzVG9Mb2FkKSB7CiAgdmFyIElOU1RBTlRJQVRJTkcgPSB7fSwKICAgICAgcHJvdmlkZXJTdWZmaXggPSAnUHJvdmlkZXInLAogICAgICBwYXRoID0gW10sCiAgICAgIGxvYWRlZE1vZHVsZXMgPSBuZXcgSGFzaE1hcCgpLAogICAgICBwcm92aWRlckNhY2hlID0gewogICAgICAgICRwcm92aWRlOiB7CiAgICAgICAgICAgIHByb3ZpZGVyOiBzdXBwb3J0T2JqZWN0KHByb3ZpZGVyKSwKICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSwKICAgICAgICAgICAgc2VydmljZTogc3VwcG9ydE9iamVjdChzZXJ2aWNlKSwKICAgICAgICAgICAgdmFsdWU6IHN1cHBvcnRPYmplY3QodmFsdWUpLAogICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksCiAgICAgICAgICAgIGRlY29yYXRvcjogZGVjb3JhdG9yCiAgICAgICAgICB9CiAgICAgIH0sCiAgICAgIHByb3ZpZGVySW5qZWN0b3IgPSAocHJvdmlkZXJDYWNoZS4kaW5qZWN0b3IgPQogICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3Rvcihwcm92aWRlckNhY2hlLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCd1bnByJywgIlVua25vd24gcHJvdmlkZXI6IHswfSIsIHBhdGguam9pbignIDwtICcpKTsKICAgICAgICAgIH0pKSwKICAgICAgaW5zdGFuY2VDYWNoZSA9IHt9LAogICAgICBpbnN0YW5jZUluamVjdG9yID0gKGluc3RhbmNlQ2FjaGUuJGluamVjdG9yID0KICAgICAgICAgIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoaW5zdGFuY2VDYWNoZSwgZnVuY3Rpb24oc2VydmljZW5hbWUpIHsKICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoc2VydmljZW5hbWUgKyBwcm92aWRlclN1ZmZpeCk7CiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShwcm92aWRlci4kZ2V0LCBwcm92aWRlcik7CiAgICAgICAgICB9KSk7CgoKICBmb3JFYWNoKGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpLCBmdW5jdGlvbihmbikgeyBpbnN0YW5jZUluamVjdG9yLmludm9rZShmbiB8fCBub29wKTsgfSk7CgogIHJldHVybiBpbnN0YW5jZUluamVjdG9yOwoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyAkcHJvdmlkZXIKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgZnVuY3Rpb24gc3VwcG9ydE9iamVjdChkZWxlZ2F0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHsKICAgICAgICBmb3JFYWNoKGtleSwgcmV2ZXJzZVBhcmFtcyhkZWxlZ2F0ZSkpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBkZWxlZ2F0ZShrZXksIHZhbHVlKTsKICAgICAgfQogICAgfTsKICB9CgogIGZ1bmN0aW9uIHByb3ZpZGVyKG5hbWUsIHByb3ZpZGVyXykgewogICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ3NlcnZpY2UnKTsKICAgIGlmIChpc0Z1bmN0aW9uKHByb3ZpZGVyXykgfHwgaXNBcnJheShwcm92aWRlcl8pKSB7CiAgICAgIHByb3ZpZGVyXyA9IHByb3ZpZGVySW5qZWN0b3IuaW5zdGFudGlhdGUocHJvdmlkZXJfKTsKICAgIH0KICAgIGlmICghcHJvdmlkZXJfLiRnZXQpIHsKICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdwZ2V0JywgIlByb3ZpZGVyICd7MH0nIG11c3QgZGVmaW5lICRnZXQgZmFjdG9yeSBtZXRob2QuIiwgbmFtZSk7CiAgICB9CiAgICByZXR1cm4gcHJvdmlkZXJDYWNoZVtuYW1lICsgcHJvdmlkZXJTdWZmaXhdID0gcHJvdmlkZXJfOwogIH0KCiAgZnVuY3Rpb24gZmFjdG9yeShuYW1lLCBmYWN0b3J5Rm4pIHsgcmV0dXJuIHByb3ZpZGVyKG5hbWUsIHsgJGdldDogZmFjdG9yeUZuIH0pOyB9CgogIGZ1bmN0aW9uIHNlcnZpY2UobmFtZSwgY29uc3RydWN0b3IpIHsKICAgIHJldHVybiBmYWN0b3J5KG5hbWUsIFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7CiAgICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpOwogICAgfV0pOwogIH0KCiAgZnVuY3Rpb24gdmFsdWUobmFtZSwgdmFsKSB7IHJldHVybiBmYWN0b3J5KG5hbWUsIHZhbHVlRm4odmFsKSk7IH0KCiAgZnVuY3Rpb24gY29uc3RhbnQobmFtZSwgdmFsdWUpIHsKICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb25zdGFudCcpOwogICAgcHJvdmlkZXJDYWNoZVtuYW1lXSA9IHZhbHVlOwogICAgaW5zdGFuY2VDYWNoZVtuYW1lXSA9IHZhbHVlOwogIH0KCiAgZnVuY3Rpb24gZGVjb3JhdG9yKHNlcnZpY2VOYW1lLCBkZWNvckZuKSB7CiAgICB2YXIgb3JpZ1Byb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoc2VydmljZU5hbWUgKyBwcm92aWRlclN1ZmZpeCksCiAgICAgICAgb3JpZyRnZXQgPSBvcmlnUHJvdmlkZXIuJGdldDsKCiAgICBvcmlnUHJvdmlkZXIuJGdldCA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgb3JpZ0luc3RhbmNlID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2Uob3JpZyRnZXQsIG9yaWdQcm92aWRlcik7CiAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShkZWNvckZuLCBudWxsLCB7JGRlbGVnYXRlOiBvcmlnSW5zdGFuY2V9KTsKICAgIH07CiAgfQoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyBNb2R1bGUgTG9hZGluZwogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIGZ1bmN0aW9uIGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpewogICAgdmFyIHJ1bkJsb2NrcyA9IFtdLCBtb2R1bGVGbiwgaW52b2tlUXVldWUsIGksIGlpOwogICAgZm9yRWFjaChtb2R1bGVzVG9Mb2FkLCBmdW5jdGlvbihtb2R1bGUpIHsKICAgICAgaWYgKGxvYWRlZE1vZHVsZXMuZ2V0KG1vZHVsZSkpIHJldHVybjsKICAgICAgbG9hZGVkTW9kdWxlcy5wdXQobW9kdWxlLCB0cnVlKTsKCiAgICAgIHRyeSB7CiAgICAgICAgaWYgKGlzU3RyaW5nKG1vZHVsZSkpIHsKICAgICAgICAgIG1vZHVsZUZuID0gYW5ndWxhck1vZHVsZShtb2R1bGUpOwogICAgICAgICAgcnVuQmxvY2tzID0gcnVuQmxvY2tzLmNvbmNhdChsb2FkTW9kdWxlcyhtb2R1bGVGbi5yZXF1aXJlcykpLmNvbmNhdChtb2R1bGVGbi5fcnVuQmxvY2tzKTsKCiAgICAgICAgICBmb3IoaW52b2tlUXVldWUgPSBtb2R1bGVGbi5faW52b2tlUXVldWUsIGkgPSAwLCBpaSA9IGludm9rZVF1ZXVlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgICAgdmFyIGludm9rZUFyZ3MgPSBpbnZva2VRdWV1ZVtpXSwKICAgICAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7CgogICAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG1vZHVsZSkpIHsKICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7CiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG1vZHVsZSkpIHsKICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGFzc2VydEFyZ0ZuKG1vZHVsZSwgJ21vZHVsZScpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGlmIChpc0FycmF5KG1vZHVsZSkpIHsKICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZVttb2R1bGUubGVuZ3RoIC0gMV07CiAgICAgICAgfQogICAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5zdGFjayAmJiBlLnN0YWNrLmluZGV4T2YoZS5tZXNzYWdlKSA9PSAtMSkgewogICAgICAgICAgLy8gU2FmYXJpICYgRkYncyBzdGFjayB0cmFjZXMgZG9uJ3QgY29udGFpbiBlcnJvci5tZXNzYWdlIGNvbnRlbnQKICAgICAgICAgIC8vIHVubGlrZSB0aG9zZSBvZiBDaHJvbWUgYW5kIElFCiAgICAgICAgICAvLyBTbyBpZiBzdGFjayBkb2Vzbid0IGNvbnRhaW4gbWVzc2FnZSwgd2UgY3JlYXRlIGEgbmV3IHN0cmluZyB0aGF0IGNvbnRhaW5zIGJvdGguCiAgICAgICAgICAvLyBTaW5jZSBlcnJvci5zdGFjayBpcyByZWFkLW9ubHkgaW4gU2FmYXJpLCBJJ20gb3ZlcnJpZGluZyBlIGFuZCBub3QgZS5zdGFjayBoZXJlLgogICAgICAgICAgLyoganNoaW50IC1XMDIyICovCiAgICAgICAgICBlID0gZS5tZXNzYWdlICsgJ1xuJyArIGUuc3RhY2s7CiAgICAgICAgfQogICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignbW9kdWxlcnInLCAiRmFpbGVkIHRvIGluc3RhbnRpYXRlIG1vZHVsZSB7MH0gZHVlIHRvOlxuezF9IiwKICAgICAgICAgICAgICAgICAgbW9kdWxlLCBlLnN0YWNrIHx8IGUubWVzc2FnZSB8fCBlKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gcnVuQmxvY2tzOwogIH0KCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgLy8gaW50ZXJuYWwgSW5qZWN0b3IKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgZnVuY3Rpb24gY3JlYXRlSW50ZXJuYWxJbmplY3RvcihjYWNoZSwgZmFjdG9yeSkgewoKICAgIGZ1bmN0aW9uIGdldFNlcnZpY2Uoc2VydmljZU5hbWUpIHsKICAgICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KHNlcnZpY2VOYW1lKSkgewogICAgICAgIGlmIChjYWNoZVtzZXJ2aWNlTmFtZV0gPT09IElOU1RBTlRJQVRJTkcpIHsKICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignY2RlcCcsICdDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kOiB7MH0nLCBwYXRoLmpvaW4oJyA8LSAnKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHBhdGgudW5zaGlmdChzZXJ2aWNlTmFtZSk7CiAgICAgICAgICBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBJTlNUQU5USUFUSU5HOwogICAgICAgICAgcmV0dXJuIGNhY2hlW3NlcnZpY2VOYW1lXSA9IGZhY3Rvcnkoc2VydmljZU5hbWUpOwogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykgewogICAgICAgICAgICBkZWxldGUgY2FjaGVbc2VydmljZU5hbWVdOwogICAgICAgICAgfQogICAgICAgICAgdGhyb3cgZXJyOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBwYXRoLnNoaWZ0KCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gaW52b2tlKGZuLCBzZWxmLCBsb2NhbHMpewogICAgICB2YXIgYXJncyA9IFtdLAogICAgICAgICAgJGluamVjdCA9IGFubm90YXRlKGZuKSwKICAgICAgICAgIGxlbmd0aCwgaSwKICAgICAgICAgIGtleTsKCiAgICAgIGZvcihpID0gMCwgbGVuZ3RoID0gJGluamVjdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIGtleSA9ICRpbmplY3RbaV07CiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2l0a24nLAogICAgICAgICAgICAgICAgICAnSW5jb3JyZWN0IGluamVjdGlvbiB0b2tlbiEgRXhwZWN0ZWQgc2VydmljZSBuYW1lIGFzIHN0cmluZywgZ290IHswfScsIGtleSk7CiAgICAgICAgfQogICAgICAgIGFyZ3MucHVzaCgKICAgICAgICAgIGxvY2FscyAmJiBsb2NhbHMuaGFzT3duUHJvcGVydHkoa2V5KQogICAgICAgICAgPyBsb2NhbHNba2V5XQogICAgICAgICAgOiBnZXRTZXJ2aWNlKGtleSkKICAgICAgICApOwogICAgICB9CiAgICAgIGlmICghZm4uJGluamVjdCkgewogICAgICAgIC8vIHRoaXMgbWVhbnMgdGhhdCB3ZSBtdXN0IGJlIGFuIGFycmF5LgogICAgICAgIGZuID0gZm5bbGVuZ3RoXTsKICAgICAgfQoKICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLWludm9rZS1hcHBseS12cy1zd2l0Y2gKICAgICAgLy8gIzUzODgKICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgfQoKICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlKFR5cGUsIGxvY2FscykgewogICAgICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHt9LAogICAgICAgICAgaW5zdGFuY2UsIHJldHVybmVkVmFsdWU7CgogICAgICAvLyBDaGVjayBpZiBUeXBlIGlzIGFubm90YXRlZCBhbmQgdXNlIGp1c3QgdGhlIGdpdmVuIGZ1bmN0aW9uIGF0IG4tMSBhcyBwYXJhbWV0ZXIKICAgICAgLy8gZS5nLiBzb21lTW9kdWxlLmZhY3RvcnkoJ2dyZWV0ZXInLCBbJyR3aW5kb3cnLCBmdW5jdGlvbihyZW5hbWVkJHdpbmRvdykge31dKTsKICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gKGlzQXJyYXkoVHlwZSkgPyBUeXBlW1R5cGUubGVuZ3RoIC0gMV0gOiBUeXBlKS5wcm90b3R5cGU7CiAgICAgIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7CiAgICAgIHJldHVybmVkVmFsdWUgPSBpbnZva2UoVHlwZSwgaW5zdGFuY2UsIGxvY2Fscyk7CgogICAgICByZXR1cm4gaXNPYmplY3QocmV0dXJuZWRWYWx1ZSkgfHwgaXNGdW5jdGlvbihyZXR1cm5lZFZhbHVlKSA/IHJldHVybmVkVmFsdWUgOiBpbnN0YW5jZTsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBpbnZva2U6IGludm9rZSwKICAgICAgaW5zdGFudGlhdGU6IGluc3RhbnRpYXRlLAogICAgICBnZXQ6IGdldFNlcnZpY2UsCiAgICAgIGFubm90YXRlOiBhbm5vdGF0ZSwKICAgICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSArIHByb3ZpZGVyU3VmZml4KSB8fCBjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTsKICAgICAgfQogICAgfTsKICB9Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgbmcuJGFuY2hvclNjcm9sbAogKiBAcmVxdWlyZXMgJHdpbmRvdwogKiBAcmVxdWlyZXMgJGxvY2F0aW9uCiAqIEByZXF1aXJlcyAkcm9vdFNjb3BlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBXaGVuIGNhbGxlZCwgaXQgY2hlY2tzIGN1cnJlbnQgdmFsdWUgb2YgYCRsb2NhdGlvbi5oYXNoKClgIGFuZCBzY3JvbGwgdG8gcmVsYXRlZCBlbGVtZW50LAogKiBhY2NvcmRpbmcgdG8gcnVsZXMgc3BlY2lmaWVkIGluCiAqIHtAbGluayBodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjL092ZXJ2aWV3Lmh0bWwjdGhlLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCBIdG1sNSBzcGVjfS4KICoKICogSXQgYWxzbyB3YXRjaGVzIHRoZSBgJGxvY2F0aW9uLmhhc2goKWAgYW5kIHNjcm9sbHMgd2hlbmV2ZXIgaXQgY2hhbmdlcyB0byBtYXRjaCBhbnkgYW5jaG9yLgogKiBUaGlzIGNhbiBiZSBkaXNhYmxlZCBieSBjYWxsaW5nIGAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIuZGlzYWJsZUF1dG9TY3JvbGxpbmcoKWAuCiAqIAogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxkaXYgaWQ9InNjcm9sbEFyZWEiIG5nLWNvbnRyb2xsZXI9IlNjcm9sbEN0cmwiPgogICAgICAgICA8YSBuZy1jbGljaz0iZ290b0JvdHRvbSgpIj5HbyB0byBib3R0b208L2E+CiAgICAgICAgIDxhIGlkPSJib3R0b20iPjwvYT4gWW91J3JlIGF0IHRoZSBib3R0b20hCiAgICAgICA8L2Rpdj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICAgICAgIGZ1bmN0aW9uIFNjcm9sbEN0cmwoJHNjb3BlLCAkbG9jYXRpb24sICRhbmNob3JTY3JvbGwpIHsKICAgICAgICAgJHNjb3BlLmdvdG9Cb3R0b20gPSBmdW5jdGlvbiAoKXsKICAgICAgICAgICAvLyBzZXQgdGhlIGxvY2F0aW9uLmhhc2ggdG8gdGhlIGlkIG9mCiAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgeW91IHdpc2ggdG8gc2Nyb2xsIHRvLgogICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdib3R0b20nKTsKICAgICAgICAgICAKICAgICAgICAgICAvLyBjYWxsICRhbmNob3JTY3JvbGwoKQogICAgICAgICAgICRhbmNob3JTY3JvbGwoKTsKICAgICAgICAgfQogICAgICAgfQogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzdHlsZS5jc3MiPgogICAgICAgI3Njcm9sbEFyZWEgewogICAgICAgICBoZWlnaHQ6IDM1MHB4OwogICAgICAgICBvdmVyZmxvdzogYXV0bzsKICAgICAgIH0KCiAgICAgICAjYm90dG9tIHsKICAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgIG1hcmdpbi10b3A6IDIwMDBweDsKICAgICAgIH0KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCmZ1bmN0aW9uICRBbmNob3JTY3JvbGxQcm92aWRlcigpIHsKCiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTsKCiAgdGhpcy5kaXNhYmxlQXV0b1Njcm9sbGluZyA9IGZ1bmN0aW9uKCkgewogICAgYXV0b1Njcm9sbGluZ0VuYWJsZWQgPSBmYWxzZTsKICB9OwoKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkd2luZG93LCAkbG9jYXRpb24sICRyb290U2NvcGUpIHsKICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7CgogICAgLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGdldCBmaXJzdCBhbmNob3IgZnJvbSBhIE5vZGVMaXN0CiAgICAvLyBjYW4ndCB1c2UgZmlsdGVyLmZpbHRlciwgYXMgaXQgYWNjZXB0cyBvbmx5IGluc3RhbmNlcyBvZiBBcnJheQogICAgLy8gYW5kIElFIGNhbid0IGNvbnZlcnQgTm9kZUxpc3QgdG8gYW4gYXJyYXkgdXNpbmcgW10uc2xpY2UKICAgIC8vIFRPRE8odm9qdGEpOiB1c2UgZmlsdGVyIGlmIHdlIGNoYW5nZSBpdCB0byBhY2NlcHQgbGlzdHMgYXMgd2VsbAogICAgZnVuY3Rpb24gZ2V0Rmlyc3RBbmNob3IobGlzdCkgewogICAgICB2YXIgcmVzdWx0ID0gbnVsbDsKICAgICAgZm9yRWFjaChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgaWYgKCFyZXN1bHQgJiYgbG93ZXJjYXNlKGVsZW1lbnQubm9kZU5hbWUpID09PSAnYScpIHJlc3VsdCA9IGVsZW1lbnQ7CiAgICAgIH0pOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIGZ1bmN0aW9uIHNjcm9sbCgpIHsKICAgICAgdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpLCBlbG07CgogICAgICAvLyBlbXB0eSBoYXNoLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZQogICAgICBpZiAoIWhhc2gpICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7CgogICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWQKICAgICAgZWxzZSBpZiAoKGVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2gpKSkgZWxtLnNjcm9sbEludG9WaWV3KCk7CgogICAgICAvLyBmaXJzdCBhbmNob3Igd2l0aCBnaXZlbiBuYW1lIDotRAogICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgZWxtLnNjcm9sbEludG9WaWV3KCk7CgogICAgICAvLyBubyBlbGVtZW50IGFuZCBoYXNoID09ICd0b3AnLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZQogICAgICBlbHNlIGlmIChoYXNoID09PSAndG9wJykgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTsKICAgIH0KCiAgICAvLyBkb2VzIG5vdCBzY3JvbGwgd2hlbiB1c2VyIGNsaWNrcyBvbiBhbmNob3IgbGluayB0aGF0IGlzIGN1cnJlbnRseSBvbgogICAgLy8gKG5vIHVybCBjaGFuZ2UsIG5vICRsb2NhdGlvbi5oYXNoKCkgY2hhbmdlKSwgYnJvd3NlciBuYXRpdmUgZG9lcyBzY3JvbGwKICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkgewogICAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2goKSB7cmV0dXJuICRsb2NhdGlvbi5oYXNoKCk7fSwKICAgICAgICBmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2hBY3Rpb24oKSB7CiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoc2Nyb2xsKTsKICAgICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gc2Nyb2xsOwogIH1dOwp9Cgp2YXIgJGFuaW1hdGVNaW5FcnIgPSBtaW5FcnIoJyRhbmltYXRlJyk7CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kYW5pbWF0ZVByb3ZpZGVyCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mICRhbmltYXRlIHRoYXQgZG9lc24ndCBwZXJmb3JtIGFueSBhbmltYXRpb25zLCBpbnN0ZWFkIGp1c3QKICogc3luY2hyb25vdXNseSBwZXJmb3JtcyBET00KICogdXBkYXRlcyBhbmQgY2FsbHMgZG9uZSgpIGNhbGxiYWNrcy4KICoKICogSW4gb3JkZXIgdG8gZW5hYmxlIGFuaW1hdGlvbnMgdGhlIG5nQW5pbWF0ZSBtb2R1bGUgaGFzIHRvIGJlIGxvYWRlZC4KICoKICogVG8gc2VlIHRoZSBmdW5jdGlvbmFsIGltcGxlbWVudGF0aW9uIGNoZWNrIG91dCBzcmMvbmdBbmltYXRlL2FuaW1hdGUuanMKICovCnZhciAkQW5pbWF0ZVByb3ZpZGVyID0gWyckcHJvdmlkZScsIGZ1bmN0aW9uKCRwcm92aWRlKSB7CgogIAogIHRoaXMuJCRzZWxlY3RvcnMgPSB7fTsKCgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLiRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXIKICAgKiBAbWV0aG9kT2YgbmcuJGFuaW1hdGVQcm92aWRlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmVnaXN0ZXJzIGEgbmV3IGluamVjdGFibGUgYW5pbWF0aW9uIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIHByb2R1Y2VzIHRoZQogICAqIGFuaW1hdGlvbiBvYmplY3Qgd2hpY2ggY29udGFpbnMgY2FsbGJhY2sgZnVuY3Rpb25zIGZvciBlYWNoIGV2ZW50IHRoYXQgaXMgZXhwZWN0ZWQgdG8gYmUKICAgKiBhbmltYXRlZC4KICAgKgogICAqICAgKiBgZXZlbnRGbmA6IGBmdW5jdGlvbihFbGVtZW50LCBkb25lRnVuY3Rpb24pYCBUaGUgZWxlbWVudCB0byBhbmltYXRlLCB0aGUgYGRvbmVGdW5jdGlvbmAKICAgKiAgIG11c3QgYmUgY2FsbGVkIG9uY2UgdGhlIGVsZW1lbnQgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLiBJZiBhIGZ1bmN0aW9uIGlzIHJldHVybmVkIHRoZW4gdGhlCiAgICogICBhbmltYXRpb24gc2VydmljZSB3aWxsIHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uIHdoZW5ldmVyIGEgY2FuY2VsIGV2ZW50IGlzCiAgICogICB0cmlnZ2VyZWQuCiAgICoKICAgKgogICAqPHByZT4KICAgKiAgIHJldHVybiB7CiAgICAgKiAgICAgZXZlbnRGbiA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHsKICAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvbgogICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKCkKICAgICAqICAgICAgIHJldHVybiBmdW5jdGlvbiBjYW5jZWxsYXRpb25GdW5jdGlvbigpIHsKICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uCiAgICAgKiAgICAgICB9CiAgICAgKiAgICAgfQogICAgICogICB9CiAgICo8L3ByZT4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24uCiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZmFjdG9yeSBUaGUgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcmV0dXJuIHRoZSBhbmltYXRpb24KICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC4KICAgKi8KICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgZmFjdG9yeSkgewogICAgdmFyIGtleSA9IG5hbWUgKyAnLWFuaW1hdGlvbic7CiAgICBpZiAobmFtZSAmJiBuYW1lLmNoYXJBdCgwKSAhPSAnLicpIHRocm93ICRhbmltYXRlTWluRXJyKCdub3Rjc2VsJywKICAgICAgICAiRXhwZWN0aW5nIGNsYXNzIHNlbGVjdG9yIHN0YXJ0aW5nIHdpdGggJy4nIGdvdCAnezB9Jy4iLCBuYW1lKTsKICAgIHRoaXMuJCRzZWxlY3RvcnNbbmFtZS5zdWJzdHIoMSldID0ga2V5OwogICAgJHByb3ZpZGUuZmFjdG9yeShrZXksIGZhY3RvcnkpOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLiRhbmltYXRlUHJvdmlkZXIjY2xhc3NOYW1lRmlsdGVyCiAgICogQG1ldGhvZE9mIG5nLiRhbmltYXRlUHJvdmlkZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgYW5kL29yIHJldHVybnMgdGhlIENTUyBjbGFzcyByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyBjaGVja2VkIHdoZW4gcGVyZm9ybWluZwogICAqIGFuIGFuaW1hdGlvbi4gVXBvbiBib290c3RyYXAgdGhlIGNsYXNzTmFtZUZpbHRlciB2YWx1ZSBpcyBub3Qgc2V0IGF0IGFsbCBhbmQgd2lsbAogICAqIHRoZXJlZm9yZSBlbmFibGUgJGFuaW1hdGUgdG8gYXR0ZW1wdCB0byBwZXJmb3JtIGFuIGFuaW1hdGlvbiBvbiBhbnkgZWxlbWVudC4KICAgKiBXaGVuIHNldHRpbmcgdGhlIGNsYXNzTmFtZUZpbHRlciB2YWx1ZSwgYW5pbWF0aW9ucyB3aWxsIG9ubHkgYmUgcGVyZm9ybWVkIG9uIGVsZW1lbnRzCiAgICogdGhhdCBzdWNjZXNzZnVsbHkgbWF0Y2ggdGhlIGZpbHRlciBleHByZXNzaW9uLiBUaGlzIGluIHR1cm4gY2FuIGJvb3N0IHBlcmZvcm1hbmNlCiAgICogZm9yIGxvdy1wb3dlcmVkIGRldmljZXMgYXMgd2VsbCBhcyBhcHBsaWNhdGlvbnMgY29udGFpbmluZyBhIGxvdCBvZiBzdHJ1Y3R1cmFsIG9wZXJhdGlvbnMuCiAgICogQHBhcmFtIHtSZWdFeHA9fSBleHByZXNzaW9uIFRoZSBjbGFzc05hbWUgZXhwcmVzc2lvbiB3aGljaCB3aWxsIGJlIGNoZWNrZWQgYWdhaW5zdCBhbGwgYW5pbWF0aW9ucwogICAqIEByZXR1cm4ge1JlZ0V4cH0gVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSBleHByZXNzaW9uIHZhbHVlLiBJZiBudWxsIHRoZW4gdGhlcmUgaXMgbm8gZXhwcmVzc2lvbiB2YWx1ZQogICAqLwogIHRoaXMuY2xhc3NOYW1lRmlsdGVyID0gZnVuY3Rpb24oZXhwcmVzc2lvbikgewogICAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgewogICAgICB0aGlzLiQkY2xhc3NOYW1lRmlsdGVyID0gKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBSZWdFeHApID8gZXhwcmVzc2lvbiA6IG51bGw7CiAgICB9CiAgICByZXR1cm4gdGhpcy4kJGNsYXNzTmFtZUZpbHRlcjsKICB9OwoKICB0aGlzLiRnZXQgPSBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHsKCiAgICAvKioKICAgICAqCiAgICAgKiBAbmdkb2Mgb2JqZWN0CiAgICAgKiBAbmFtZSBuZy4kYW5pbWF0ZQogICAgICogQGRlc2NyaXB0aW9uIFRoZSAkYW5pbWF0ZSBzZXJ2aWNlIHByb3ZpZGVzIHJ1ZGltZW50YXJ5IERPTSBtYW5pcHVsYXRpb24gZnVuY3Rpb25zIHRvCiAgICAgKiBpbnNlcnQsIHJlbW92ZSBhbmQgbW92ZSBlbGVtZW50cyB3aXRoaW4gdGhlIERPTSwgYXMgd2VsbCBhcyBhZGRpbmcgYW5kIHJlbW92aW5nIGNsYXNzZXMuCiAgICAgKiBUaGlzIHNlcnZpY2UgaXMgdGhlIGNvcmUgc2VydmljZSB1c2VkIGJ5IHRoZSBuZ0FuaW1hdGUgJGFuaW1hdG9yIHNlcnZpY2Ugd2hpY2ggcHJvdmlkZXMKICAgICAqIGhpZ2gtbGV2ZWwgYW5pbWF0aW9uIGhvb2tzIGZvciBDU1MgYW5kIEphdmFTY3JpcHQuCiAgICAgKgogICAgICogJGFuaW1hdGUgaXMgYXZhaWxhYmxlIGluIHRoZSBBbmd1bGFySlMgY29yZSwgaG93ZXZlciwgdGhlIG5nQW5pbWF0ZSBtb2R1bGUgbXVzdCBiZSBpbmNsdWRlZAogICAgICogdG8gZW5hYmxlIGZ1bGwgb3V0IGFuaW1hdGlvbiBzdXBwb3J0LiBPdGhlcndpc2UsICRhbmltYXRlIHdpbGwgb25seSBwZXJmb3JtIHNpbXBsZSBET00KICAgICAqIG1hbmlwdWxhdGlvbiBvcGVyYXRpb25zLgogICAgICoKICAgICAqIFRvIGxlYXJuIG1vcmUgYWJvdXQgZW5hYmxpbmcgYW5pbWF0aW9uIHN1cHBvcnQsIGNsaWNrIGhlcmUgdG8gdmlzaXQgdGhlIHtAbGluayBuZ0FuaW1hdGUKICAgICAqIG5nQW5pbWF0ZSBtb2R1bGUgcGFnZX0gYXMgd2VsbCBhcyB0aGUge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZSBuZ0FuaW1hdGUgJGFuaW1hdGUgc2VydmljZQogICAgICogcGFnZX0uCiAgICAgKi8KICAgIHJldHVybiB7CgogICAgICAvKioKICAgICAgICoKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRhbmltYXRlI2VudGVyCiAgICAgICAqIEBtZXRob2RPZiBuZy4kYW5pbWF0ZQogICAgICAgKiBAZnVuY3Rpb24KICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgdGhlIGVsZW1lbnQgaW50byB0aGUgRE9NIGVpdGhlciBhZnRlciB0aGUgYGFmdGVyYCBlbGVtZW50IG9yIHdpdGhpbgogICAgICAgKiAgIHRoZSBgcGFyZW50YCBlbGVtZW50LiBPbmNlIGNvbXBsZXRlLCB0aGUgZG9uZSgpIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQgKGlmIHByb3ZpZGVkKS4KICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET00KICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQgYXMKICAgICAgICogICBhIGNoaWxkIChpZiB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudCkKICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQKICAgICAgICogICBhZnRlciBpdHNlbGYKICAgICAgICogQHBhcmFtIHtmdW5jdGlvbj19IGRvbmUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBhZnRlciB0aGUgZWxlbWVudCBoYXMgYmVlbgogICAgICAgKiAgIGluc2VydGVkIGludG8gdGhlIERPTQogICAgICAgKi8KICAgICAgZW50ZXIgOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBkb25lKSB7CiAgICAgICAgaWYgKGFmdGVyKSB7CiAgICAgICAgICBhZnRlci5hZnRlcihlbGVtZW50KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKCFwYXJlbnQgfHwgIXBhcmVudFswXSkgewogICAgICAgICAgICBwYXJlbnQgPSBhZnRlci5wYXJlbnQoKTsKICAgICAgICAgIH0KICAgICAgICAgIHBhcmVudC5hcHBlbmQoZWxlbWVudCk7CiAgICAgICAgfQogICAgICAgIGRvbmUgJiYgJHRpbWVvdXQoZG9uZSwgMCwgZmFsc2UpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kYW5pbWF0ZSNsZWF2ZQogICAgICAgKiBAbWV0aG9kT2YgbmcuJGFuaW1hdGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTS4gT25jZSBjb21wbGV0ZSwgdGhlIGRvbmUoKSBjYWxsYmFjayB3aWxsIGJlCiAgICAgICAqICAgZmlyZWQgKGlmIHByb3ZpZGVkKS4KICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIERPTQogICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gZG9uZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGFmdGVyIHRoZSBlbGVtZW50IGhhcyBiZWVuCiAgICAgICAqICAgcmVtb3ZlZCBmcm9tIHRoZSBET00KICAgICAgICovCiAgICAgIGxlYXZlIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkgewogICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgZG9uZSAmJiAkdGltZW91dChkb25lLCAwLCBmYWxzZSk7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICoKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRhbmltYXRlI21vdmUKICAgICAgICogQG1ldGhvZE9mIG5nLiRhbmltYXRlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKiBAZGVzY3JpcHRpb24gTW92ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwcm92aWRlZCBlbGVtZW50IHdpdGhpbiB0aGUgRE9NIHRvIGJlIHBsYWNlZAogICAgICAgKiBlaXRoZXIgYWZ0ZXIgdGhlIGBhZnRlcmAgZWxlbWVudCBvciBpbnNpZGUgb2YgdGhlIGBwYXJlbnRgIGVsZW1lbnQuIE9uY2UgY29tcGxldGUsIHRoZQogICAgICAgKiBkb25lKCkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCAoaWYgcHJvdmlkZWQpLgogICAgICAgKiAKICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBtb3ZlZCBhcm91bmQgd2l0aGluIHRoZQogICAgICAgKiAgIERPTQogICAgICAgKiBAcGFyYW0ge2pRdWVyeS9qcUxpdGUgZWxlbWVudH0gcGFyZW50IHRoZSBwYXJlbnQgZWxlbWVudCB3aGVyZSB0aGUgZWxlbWVudCB3aWxsIGJlCiAgICAgICAqICAgaW5zZXJ0ZWQgaW50byAoaWYgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpCiAgICAgICAqIEBwYXJhbSB7alF1ZXJ5L2pxTGl0ZSBlbGVtZW50fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IHdoZXJlIHRoZSBlbGVtZW50IHdpbGwgYmUKICAgICAgICogICBwb3NpdGlvbmVkIG5leHQgdG8KICAgICAgICogQHBhcmFtIHtmdW5jdGlvbj19IGRvbmUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIChpZiBwcm92aWRlZCkgdGhhdCB3aWxsIGJlIGZpcmVkIGFmdGVyIHRoZQogICAgICAgKiAgIGVsZW1lbnQgaGFzIGJlZW4gbW92ZWQgdG8gaXRzIG5ldyBwb3NpdGlvbgogICAgICAgKi8KICAgICAgbW92ZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIGRvbmUpIHsKICAgICAgICAvLyBEbyBub3QgcmVtb3ZlIGVsZW1lbnQgYmVmb3JlIGluc2VydC4gUmVtb3Zpbmcgd2lsbCBjYXVzZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUKICAgICAgICAvLyBlbGVtZW50IHRvIGJlIGRyb3BwZWQuIEluc2VydCB3aWxsIGltcGxpY2l0bHkgZG8gdGhlIHJlbW92ZS4KICAgICAgICB0aGlzLmVudGVyKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIGRvbmUpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kYW5pbWF0ZSNhZGRDbGFzcwogICAgICAgKiBAbWV0aG9kT2YgbmcuJGFuaW1hdGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGRzIHRoZSBwcm92aWRlZCBjbGFzc05hbWUgQ1NTIGNsYXNzIHZhbHVlIHRvIHRoZSBwcm92aWRlZCBlbGVtZW50LiBPbmNlCiAgICAgICAqIGNvbXBsZXRlLCB0aGUgZG9uZSgpIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQgKGlmIHByb3ZpZGVkKS4KICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBoYXZlIHRoZSBjbGFzc05hbWUgdmFsdWUKICAgICAgICogICBhZGRlZCB0byBpdAogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3Mgd2hpY2ggd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudAogICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gZG9uZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gKGlmIHByb3ZpZGVkKSB0aGF0IHdpbGwgYmUgZmlyZWQgYWZ0ZXIgdGhlCiAgICAgICAqICAgY2xhc3NOYW1lIHZhbHVlIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBlbGVtZW50CiAgICAgICAqLwogICAgICBhZGRDbGFzcyA6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkgewogICAgICAgIGNsYXNzTmFtZSA9IGlzU3RyaW5nKGNsYXNzTmFtZSkgPwogICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lIDoKICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXkoY2xhc3NOYW1lKSA/IGNsYXNzTmFtZS5qb2luKCcgJykgOiAnJzsKICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgICBqcUxpdGVBZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpOwogICAgICAgIH0pOwogICAgICAgIGRvbmUgJiYgJHRpbWVvdXQoZG9uZSwgMCwgZmFsc2UpOwogICAgICB9LAoKICAgICAgLyoqCiAgICAgICAqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kYW5pbWF0ZSNyZW1vdmVDbGFzcwogICAgICAgKiBAbWV0aG9kT2YgbmcuJGFuaW1hdGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqIEBkZXNjcmlwdGlvbiBSZW1vdmVzIHRoZSBwcm92aWRlZCBjbGFzc05hbWUgQ1NTIGNsYXNzIHZhbHVlIGZyb20gdGhlIHByb3ZpZGVkIGVsZW1lbnQuCiAgICAgICAqIE9uY2UgY29tcGxldGUsIHRoZSBkb25lKCkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCAoaWYgcHJvdmlkZWQpLgogICAgICAgKiBAcGFyYW0ge2pRdWVyeS9qcUxpdGUgZWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGhhdmUgdGhlIGNsYXNzTmFtZSB2YWx1ZQogICAgICAgKiAgIHJlbW92ZWQgZnJvbSBpdAogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3Mgd2hpY2ggd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQKICAgICAgICogQHBhcmFtIHtmdW5jdGlvbj19IGRvbmUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIChpZiBwcm92aWRlZCkgdGhhdCB3aWxsIGJlIGZpcmVkIGFmdGVyIHRoZQogICAgICAgKiAgIGNsYXNzTmFtZSB2YWx1ZSBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQKICAgICAgICovCiAgICAgIHJlbW92ZUNsYXNzIDogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7CiAgICAgICAgY2xhc3NOYW1lID0gaXNTdHJpbmcoY2xhc3NOYW1lKSA/CiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgOgogICAgICAgICAgICAgICAgICAgICAgaXNBcnJheShjbGFzc05hbWUpID8gY2xhc3NOYW1lLmpvaW4oJyAnKSA6ICcnOwogICAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICAgIGpxTGl0ZVJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7CiAgICAgICAgfSk7CiAgICAgICAgZG9uZSAmJiAkdGltZW91dChkb25lLCAwLCBmYWxzZSk7CiAgICAgIH0sCgogICAgICBlbmFibGVkIDogbm9vcAogICAgfTsKICB9XTsKfV07CgovKioKICogISBUaGlzIGlzIGEgcHJpdmF0ZSB1bmRvY3VtZW50ZWQgc2VydmljZSAhCiAqCiAqIEBuYW1lIG5nLiRicm93c2VyCiAqIEByZXF1aXJlcyAkbG9nCiAqIEBkZXNjcmlwdGlvbgogKiBUaGlzIG9iamVjdCBoYXMgdHdvIGdvYWxzOgogKgogKiAtIGhpZGUgYWxsIHRoZSBnbG9iYWwgc3RhdGUgaW4gdGhlIGJyb3dzZXIgY2F1c2VkIGJ5IHRoZSB3aW5kb3cgb2JqZWN0CiAqIC0gYWJzdHJhY3QgYXdheSBhbGwgdGhlIGJyb3dzZXIgc3BlY2lmaWMgZmVhdHVyZXMgYW5kIGluY29uc2lzdGVuY2llcwogKgogKiBGb3IgdGVzdHMgd2UgcHJvdmlkZSB7QGxpbmsgbmdNb2NrLiRicm93c2VyIG1vY2sgaW1wbGVtZW50YXRpb259IG9mIHRoZSBgJGJyb3dzZXJgCiAqIHNlcnZpY2UsIHdoaWNoIGNhbiBiZSB1c2VkIGZvciBjb252ZW5pZW50IHRlc3Rpbmcgb2YgdGhlIGFwcGxpY2F0aW9uIHdpdGhvdXQgdGhlIGludGVyYWN0aW9uIHdpdGgKICogdGhlIHJlYWwgYnJvd3NlciBhcGlzLgogKi8KLyoqCiAqIEBwYXJhbSB7b2JqZWN0fSB3aW5kb3cgVGhlIGdsb2JhbCB3aW5kb3cgb2JqZWN0LgogKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgalF1ZXJ5IHdyYXBwZWQgZG9jdW1lbnQuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gWEhSIFhNTEh0dHBSZXF1ZXN0IGNvbnN0cnVjdG9yLgogKiBAcGFyYW0ge29iamVjdH0gJGxvZyBjb25zb2xlLmxvZyBvciBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBpbnRlcmZhY2UuCiAqIEBwYXJhbSB7b2JqZWN0fSAkc25pZmZlciAkc25pZmZlciBzZXJ2aWNlCiAqLwpmdW5jdGlvbiBCcm93c2VyKHdpbmRvdywgZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKSB7CiAgdmFyIHNlbGYgPSB0aGlzLAogICAgICByYXdEb2N1bWVudCA9IGRvY3VtZW50WzBdLAogICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbiwKICAgICAgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5LAogICAgICBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQsCiAgICAgIGNsZWFyVGltZW91dCA9IHdpbmRvdy5jbGVhclRpbWVvdXQsCiAgICAgIHBlbmRpbmdEZWZlcklkcyA9IHt9OwoKICBzZWxmLmlzTW9jayA9IGZhbHNlOwoKICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSAwOwogIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MgPSBbXTsKCiAgLy8gVE9ETyh2b2p0YSk6IHJlbW92ZSB0aGlzIHRlbXBvcmFyeSBhcGkKICBzZWxmLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QgPSBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdDsKICBzZWxmLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSBmdW5jdGlvbigpIHsgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsgfTsKCiAgLyoqCiAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24oc3VwcG9ydHMgY3VycnlpbmcpIGFuZCBkZWNyZW1lbnRzIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYAogICAqIGNvdW50ZXIuIElmIHRoZSBjb3VudGVyIHJlYWNoZXMgMCwgYWxsIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYCBhcmUgZXhlY3V0ZWQuCiAgICovCiAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pIHsKICAgIHRyeSB7CiAgICAgIGZuLmFwcGx5KG51bGwsIHNsaWNlQXJncyhhcmd1bWVudHMsIDEpKTsKICAgIH0gZmluYWxseSB7CiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50LS07CiAgICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkgewogICAgICAgIHdoaWxlKG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5sZW5ndGgpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wb3AoKSgpOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkbG9nLmVycm9yKGUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgLyoqCiAgICogQHByaXZhdGUKICAgKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyB1c2VkIG9ubHkgYnkgc2NlbmFyaW8gcnVubmVyCiAgICogVE9ETyh2b2p0YSk6IHByZWZpeCB0aGlzIG1ldGhvZCB3aXRoICQkID8KICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiBubyBvdXRzdGFuZGluZyByZXF1ZXN0CiAgICovCiAgc2VsZi5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgIC8vIGZvcmNlIGJyb3dzZXIgdG8gZXhlY3V0ZSBhbGwgcG9sbEZucyAtIHRoaXMgaXMgbmVlZGVkIHNvIHRoYXQgY29va2llcyBhbmQgb3RoZXIgcG9sbGVycyBmaXJlCiAgICAvLyBhdCBzb21lIGRldGVybWluaXN0aWMgdGltZSBpbiByZXNwZWN0IHRvIHRoZSB0ZXN0IHJ1bm5lcidzIGFjdGlvbnMuIExlYXZpbmcgdGhpbmdzIHVwIHRvIHRoZQogICAgLy8gcmVndWxhciBwb2xsZXIgd291bGQgcmVzdWx0IGluIGZsYWt5IHRlc3RzLgogICAgZm9yRWFjaChwb2xsRm5zLCBmdW5jdGlvbihwb2xsRm4peyBwb2xsRm4oKTsgfSk7CgogICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7CiAgICAgIGNhbGxiYWNrKCk7CiAgICB9IGVsc2UgewogICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucHVzaChjYWxsYmFjayk7CiAgICB9CiAgfTsKCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAvLyBQb2xsIFdhdGNoZXIgQVBJCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICB2YXIgcG9sbEZucyA9IFtdLAogICAgICBwb2xsVGltZW91dDsKCiAgLyoqCiAgICogQG5hbWUgbmcuJGJyb3dzZXIjYWRkUG9sbEZuCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICoKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIFBvbGwgZnVuY3Rpb24gdG8gYWRkCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBBZGRzIGEgZnVuY3Rpb24gdG8gdGhlIGxpc3Qgb2YgZnVuY3Rpb25zIHRoYXQgcG9sbGVyIHBlcmlvZGljYWxseSBleGVjdXRlcywKICAgKiBhbmQgc3RhcnRzIHBvbGxpbmcgaWYgbm90IHN0YXJ0ZWQgeWV0LgogICAqCiAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IHRoZSBhZGRlZCBmdW5jdGlvbgogICAqLwogIHNlbGYuYWRkUG9sbEZuID0gZnVuY3Rpb24oZm4pIHsKICAgIGlmIChpc1VuZGVmaW5lZChwb2xsVGltZW91dCkpIHN0YXJ0UG9sbGVyKDEwMCwgc2V0VGltZW91dCk7CiAgICBwb2xsRm5zLnB1c2goZm4pOwogICAgcmV0dXJuIGZuOwogIH07CgogIC8qKgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbCBIb3cgb2Z0ZW4gc2hvdWxkIGJyb3dzZXIgY2FsbCBwb2xsIGZ1bmN0aW9ucyAobXMpCiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBzZXRUaW1lb3V0IFJlZmVyZW5jZSB0byBhIHJlYWwgb3IgZmFrZSBgc2V0VGltZW91dGAgZnVuY3Rpb24uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDb25maWd1cmVzIHRoZSBwb2xsZXIgdG8gcnVuIGluIHRoZSBzcGVjaWZpZWQgaW50ZXJ2YWxzLCB1c2luZyB0aGUgc3BlY2lmaWVkCiAgICogc2V0VGltZW91dCBmbiBhbmQga2lja3MgaXQgb2ZmLgogICAqLwogIGZ1bmN0aW9uIHN0YXJ0UG9sbGVyKGludGVydmFsLCBzZXRUaW1lb3V0KSB7CiAgICAoZnVuY3Rpb24gY2hlY2soKSB7CiAgICAgIGZvckVhY2gocG9sbEZucywgZnVuY3Rpb24ocG9sbEZuKXsgcG9sbEZuKCk7IH0pOwogICAgICBwb2xsVGltZW91dCA9IHNldFRpbWVvdXQoY2hlY2ssIGludGVydmFsKTsKICAgIH0pKCk7CiAgfQoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIFVSTCBBUEkKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICB2YXIgbGFzdEJyb3dzZXJVcmwgPSBsb2NhdGlvbi5ocmVmLAogICAgICBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmZpbmQoJ2Jhc2UnKSwKICAgICAgbmV3TG9jYXRpb24gPSBudWxsOwoKICAvKioKICAgKiBAbmFtZSBuZy4kYnJvd3NlciN1cmwKICAgKiBAbWV0aG9kT2YgbmcuJGJyb3dzZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEdFVFRFUjoKICAgKiBXaXRob3V0IGFueSBhcmd1bWVudCwgdGhpcyBtZXRob2QganVzdCByZXR1cm5zIGN1cnJlbnQgdmFsdWUgb2YgbG9jYXRpb24uaHJlZi4KICAgKgogICAqIFNFVFRFUjoKICAgKiBXaXRoIGF0IGxlYXN0IG9uZSBhcmd1bWVudCwgdGhpcyBtZXRob2Qgc2V0cyB1cmwgdG8gbmV3IHZhbHVlLgogICAqIElmIGh0bWw1IGhpc3RvcnkgYXBpIHN1cHBvcnRlZCwgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSBpcyB1c2VkLCBvdGhlcndpc2UKICAgKiBsb2NhdGlvbi5ocmVmL2xvY2F0aW9uLnJlcGxhY2UgaXMgdXNlZC4KICAgKiBSZXR1cm5zIGl0cyBvd24gaW5zdGFuY2UgdG8gYWxsb3cgY2hhaW5pbmcKICAgKgogICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlCiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb24gc2VydmljZX0gdG8gY2hhbmdlIHVybC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgTmV3IHVybCAod2hlbiB1c2VkIGFzIHNldHRlcikKICAgKiBAcGFyYW0ge2Jvb2xlYW49fSByZXBsYWNlIFNob3VsZCBuZXcgdXJsIHJlcGxhY2UgY3VycmVudCBoaXN0b3J5IHJlY29yZCA/CiAgICovCiAgc2VsZi51cmwgPSBmdW5jdGlvbih1cmwsIHJlcGxhY2UpIHsKICAgIC8vIEFuZHJvaWQgQnJvd3NlciBCRkNhY2hlIGNhdXNlcyBsb2NhdGlvbiwgaGlzdG9yeSByZWZlcmVuY2UgdG8gYmVjb21lIHN0YWxlLgogICAgaWYgKGxvY2F0aW9uICE9PSB3aW5kb3cubG9jYXRpb24pIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uOwogICAgaWYgKGhpc3RvcnkgIT09IHdpbmRvdy5oaXN0b3J5KSBoaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7CgogICAgLy8gc2V0dGVyCiAgICBpZiAodXJsKSB7CiAgICAgIGlmIChsYXN0QnJvd3NlclVybCA9PSB1cmwpIHJldHVybjsKICAgICAgbGFzdEJyb3dzZXJVcmwgPSB1cmw7CiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5KSB7CiAgICAgICAgaWYgKHJlcGxhY2UpIGhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsICcnLCB1cmwpOwogICAgICAgIGVsc2UgewogICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgJycsIHVybCk7CiAgICAgICAgICAvLyBDcmF6eSBPcGVyYSBCdWc6IGh0dHA6Ly9teS5vcGVyYS5jb20vY29tbXVuaXR5L2ZvcnVtcy90b3BpYy5kbWw/aWQ9MTE4NTQ2MgogICAgICAgICAgYmFzZUVsZW1lbnQuYXR0cignaHJlZicsIGJhc2VFbGVtZW50LmF0dHIoJ2hyZWYnKSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIG5ld0xvY2F0aW9uID0gdXJsOwogICAgICAgIGlmIChyZXBsYWNlKSB7CiAgICAgICAgICBsb2NhdGlvbi5yZXBsYWNlKHVybCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB1cmw7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBzZWxmOwogICAgLy8gZ2V0dGVyCiAgICB9IGVsc2UgewogICAgICAvLyAtIG5ld0xvY2F0aW9uIGlzIGEgd29ya2Fyb3VuZCBmb3IgYW4gSUU3LTkgaXNzdWUgd2l0aCBsb2NhdGlvbi5yZXBsYWNlIGFuZCBsb2NhdGlvbi5ocmVmCiAgICAgIC8vICAgbWV0aG9kcyBub3QgdXBkYXRpbmcgbG9jYXRpb24uaHJlZiBzeW5jaHJvbm91c2x5LgogICAgICAvLyAtIHRoZSByZXBsYWNlbWVudCBpcyBhIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQwNzE3MgogICAgICByZXR1cm4gbmV3TG9jYXRpb24gfHwgbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8lMjcvZywiJyIpOwogICAgfQogIH07CgogIHZhciB1cmxDaGFuZ2VMaXN0ZW5lcnMgPSBbXSwKICAgICAgdXJsQ2hhbmdlSW5pdCA9IGZhbHNlOwoKICBmdW5jdGlvbiBmaXJlVXJsQ2hhbmdlKCkgewogICAgbmV3TG9jYXRpb24gPSBudWxsOwogICAgaWYgKGxhc3RCcm93c2VyVXJsID09IHNlbGYudXJsKCkpIHJldHVybjsKCiAgICBsYXN0QnJvd3NlclVybCA9IHNlbGYudXJsKCk7CiAgICBmb3JFYWNoKHVybENoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHsKICAgICAgbGlzdGVuZXIoc2VsZi51cmwoKSk7CiAgICB9KTsKICB9CgogIC8qKgogICAqIEBuYW1lIG5nLiRicm93c2VyI29uVXJsQ2hhbmdlCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyCiAgICogQFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLgogICAqCiAgICogSXQncyBvbmx5IGNhbGxlZCB3aGVuIHRoZSB1cmwgaXMgY2hhbmdlZCBmcm9tIG91dHNpZGUgb2YgYW5ndWxhcjoKICAgKiAtIHVzZXIgdHlwZXMgZGlmZmVyZW50IHVybCBpbnRvIGFkZHJlc3MgYmFyCiAgICogLSB1c2VyIGNsaWNrcyBvbiBoaXN0b3J5IChmb3J3YXJkL2JhY2spIGJ1dHRvbgogICAqIC0gdXNlciBjbGlja3Mgb24gYSBsaW5rCiAgICoKICAgKiBJdCdzIG5vdCBjYWxsZWQgd2hlbiB1cmwgaXMgY2hhbmdlZCBieSAkYnJvd3Nlci51cmwoKSBtZXRob2QKICAgKgogICAqIFRoZSBsaXN0ZW5lciBnZXRzIGNhbGxlZCB3aXRoIG5ldyB1cmwgYXMgcGFyYW1ldGVyLgogICAqCiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5IHRoZSAkbG9jYXRpb24gc2VydmljZS4gUGxlYXNlIHVzZSB0aGUKICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBtb25pdG9yIHVybCBjaGFuZ2VzIGluIGFuZ3VsYXIgYXBwcy4KICAgKgogICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nKX0gbGlzdGVuZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdXJsIGNoYW5nZXMuCiAgICogQHJldHVybiB7ZnVuY3Rpb24oc3RyaW5nKX0gUmV0dXJucyB0aGUgcmVnaXN0ZXJlZCBsaXN0ZW5lciBmbiAtIGhhbmR5IGlmIHRoZSBmbiBpcyBhbm9ueW1vdXMuCiAgICovCiAgc2VsZi5vblVybENoYW5nZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICBpZiAoIXVybENoYW5nZUluaXQpIHsKICAgICAgLy8gV2UgbGlzdGVuIG9uIGJvdGggKGhhc2hjaGFuZ2UvcG9wc3RhdGUpIHdoZW4gYXZhaWxhYmxlLCBhcyBzb21lIGJyb3dzZXJzIChlLmcuIE9wZXJhKQogICAgICAvLyBkb24ndCBmaXJlIHBvcHN0YXRlIHdoZW4gdXNlciBjaGFuZ2UgdGhlIGFkZHJlc3MgYmFyIGFuZCBkb24ndCBmaXJlIGhhc2hjaGFuZ2Ugd2hlbiB1cmwKICAgICAgLy8gY2hhbmdlZCBieSBwdXNoL3JlcGxhY2VTdGF0ZQoKICAgICAgLy8gaHRtbDUgaGlzdG9yeSBhcGkgLSBwb3BzdGF0ZSBldmVudAogICAgICBpZiAoJHNuaWZmZXIuaGlzdG9yeSkganFMaXRlKHdpbmRvdykub24oJ3BvcHN0YXRlJywgZmlyZVVybENoYW5nZSk7CiAgICAgIC8vIGhhc2hjaGFuZ2UgZXZlbnQKICAgICAgaWYgKCRzbmlmZmVyLmhhc2hjaGFuZ2UpIGpxTGl0ZSh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgZmlyZVVybENoYW5nZSk7CiAgICAgIC8vIHBvbGxpbmcKICAgICAgZWxzZSBzZWxmLmFkZFBvbGxGbihmaXJlVXJsQ2hhbmdlKTsKCiAgICAgIHVybENoYW5nZUluaXQgPSB0cnVlOwogICAgfQoKICAgIHVybENoYW5nZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTsKICAgIHJldHVybiBjYWxsYmFjazsKICB9OwoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIC8vIE1pc2MgQVBJCiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgLyoqCiAgICogQG5hbWUgbmcuJGJyb3dzZXIjYmFzZUhyZWYKICAgKiBAbWV0aG9kT2YgbmcuJGJyb3dzZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJldHVybnMgY3VycmVudCA8YmFzZSBocmVmPgogICAqIChhbHdheXMgcmVsYXRpdmUgLSB3aXRob3V0IGRvbWFpbikKICAgKgogICAqIEByZXR1cm5zIHtzdHJpbmc9fSBjdXJyZW50IDxiYXNlIGhyZWY+CiAgICovCiAgc2VsZi5iYXNlSHJlZiA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGhyZWYgPSBiYXNlRWxlbWVudC5hdHRyKCdocmVmJyk7CiAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXihodHRwcz9cOik/XC9cL1teXC9dKi8sICcnKSA6ICcnOwogIH07CgogIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgLy8gQ29va2llcyBBUEkKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogIHZhciBsYXN0Q29va2llcyA9IHt9OwogIHZhciBsYXN0Q29va2llU3RyaW5nID0gJyc7CiAgdmFyIGNvb2tpZVBhdGggPSBzZWxmLmJhc2VIcmVmKCk7CgogIC8qKgogICAqIEBuYW1lIG5nLiRicm93c2VyI2Nvb2tpZXMKICAgKiBAbWV0aG9kT2YgbmcuJGJyb3dzZXIKICAgKgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBDb29raWUgbmFtZQogICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgQ29va2llIHZhbHVlCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGUgY29va2llcyBtZXRob2QgcHJvdmlkZXMgYSAncHJpdmF0ZScgbG93IGxldmVsIGFjY2VzcyB0byBicm93c2VyIGNvb2tpZXMuCiAgICogSXQgaXMgbm90IG1lYW50IHRvIGJlIHVzZWQgZGlyZWN0bHksIHVzZSB0aGUgJGNvb2tpZSBzZXJ2aWNlIGluc3RlYWQuCiAgICoKICAgKiBUaGUgcmV0dXJuIHZhbHVlcyB2YXJ5IGRlcGVuZGluZyBvbiB0aGUgYXJndW1lbnRzIHRoYXQgdGhlIG1ldGhvZCB3YXMgY2FsbGVkIHdpdGggYXMgZm9sbG93czoKICAgKgogICAqIC0gY29va2llcygpIC0+IGhhc2ggb2YgYWxsIGNvb2tpZXMsIHRoaXMgaXMgTk9UIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgc3RhdGUsIHNvIGRvIG5vdCBtb2RpZnkKICAgKiAgIGl0CiAgICogLSBjb29raWVzKG5hbWUsIHZhbHVlKSAtPiBzZXQgbmFtZSB0byB2YWx1ZSwgaWYgdmFsdWUgaXMgdW5kZWZpbmVkIGRlbGV0ZSB0aGUgY29va2llCiAgICogLSBjb29raWVzKG5hbWUpIC0+IHRoZSBzYW1lIGFzIChuYW1lLCB1bmRlZmluZWQpID09IERFTEVURVMgKG5vIG9uZSBjYWxscyBpdCByaWdodCBub3cgdGhhdAogICAqICAgd2F5KQogICAqCiAgICogQHJldHVybnMge09iamVjdH0gSGFzaCBvZiBhbGwgY29va2llcyAoaWYgY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlcikKICAgKi8KICBzZWxmLmNvb2tpZXMgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgLyogZ2xvYmFsIGVzY2FwZTogZmFsc2UsIHVuZXNjYXBlOiBmYWxzZSAqLwogICAgdmFyIGNvb2tpZUxlbmd0aCwgY29va2llQXJyYXksIGNvb2tpZSwgaSwgaW5kZXg7CgogICAgaWYgKG5hbWUpIHsKICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICByYXdEb2N1bWVudC5jb29raWUgPSBlc2NhcGUobmFtZSkgKyAiPTtwYXRoPSIgKyBjb29raWVQYXRoICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiO2V4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQiOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHsKICAgICAgICAgIGNvb2tpZUxlbmd0aCA9IChyYXdEb2N1bWVudC5jb29raWUgPSBlc2NhcGUobmFtZSkgKyAnPScgKyBlc2NhcGUodmFsdWUpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnO3BhdGg9JyArIGNvb2tpZVBhdGgpLmxlbmd0aCArIDE7CgogICAgICAgICAgLy8gcGVyIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzIxMDkudHh0IGJyb3dzZXIgbXVzdCBhbGxvdyBhdCBtaW5pbXVtOgogICAgICAgICAgLy8gLSAzMDAgY29va2llcwogICAgICAgICAgLy8gLSAyMCBjb29raWVzIHBlciB1bmlxdWUgZG9tYWluCiAgICAgICAgICAvLyAtIDQwOTYgYnl0ZXMgcGVyIGNvb2tpZQogICAgICAgICAgaWYgKGNvb2tpZUxlbmd0aCA+IDQwOTYpIHsKICAgICAgICAgICAgJGxvZy53YXJuKCJDb29raWUgJyIrIG5hbWUgKwogICAgICAgICAgICAgICInIHBvc3NpYmx5IG5vdCBzZXQgb3Igb3ZlcmZsb3dlZCBiZWNhdXNlIGl0IHdhcyB0b28gbGFyZ2UgKCIrCiAgICAgICAgICAgICAgY29va2llTGVuZ3RoICsgIiA+IDQwOTYgYnl0ZXMpISIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKHJhd0RvY3VtZW50LmNvb2tpZSAhPT0gbGFzdENvb2tpZVN0cmluZykgewogICAgICAgIGxhc3RDb29raWVTdHJpbmcgPSByYXdEb2N1bWVudC5jb29raWU7CiAgICAgICAgY29va2llQXJyYXkgPSBsYXN0Q29va2llU3RyaW5nLnNwbGl0KCI7ICIpOwogICAgICAgIGxhc3RDb29raWVzID0ge307CgogICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb29raWVBcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgICAgY29va2llID0gY29va2llQXJyYXlbaV07CiAgICAgICAgICBpbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7CiAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7IC8vaWdub3JlIG5hbWVsZXNzIGNvb2tpZXMKICAgICAgICAgICAgbmFtZSA9IHVuZXNjYXBlKGNvb2tpZS5zdWJzdHJpbmcoMCwgaW5kZXgpKTsKICAgICAgICAgICAgLy8gdGhlIGZpcnN0IHZhbHVlIHRoYXQgaXMgc2VlbiBmb3IgYSBjb29raWUgaXMgdGhlIG1vc3QKICAgICAgICAgICAgLy8gc3BlY2lmaWMgb25lLiAgdmFsdWVzIGZvciB0aGUgc2FtZSBjb29raWUgbmFtZSB0aGF0CiAgICAgICAgICAgIC8vIGZvbGxvdyBhcmUgZm9yIGxlc3Mgc3BlY2lmaWMgcGF0aHMuCiAgICAgICAgICAgIGlmIChsYXN0Q29va2llc1tuYW1lXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgbGFzdENvb2tpZXNbbmFtZV0gPSB1bmVzY2FwZShjb29raWUuc3Vic3RyaW5nKGluZGV4ICsgMSkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBsYXN0Q29va2llczsKICAgIH0KICB9OwoKCiAgLyoqCiAgICogQG5hbWUgbmcuJGJyb3dzZXIjZGVmZXIKICAgKiBAbWV0aG9kT2YgbmcuJGJyb3dzZXIKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdobydzIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVmZXJyZWQuCiAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gb2YgbWlsbGlzZWNvbmRzIHRvIGRlZmVyIHRoZSBmdW5jdGlvbiBleGVjdXRpb24uCiAgICogQHJldHVybnMgeyp9IERlZmVySWQgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlIHRhc2sgdmlhIGAkYnJvd3Nlci5kZWZlci5jYW5jZWwoKWAuCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBFeGVjdXRlcyBhIGZuIGFzeW5jaHJvbm91c2x5IHZpYSBgc2V0VGltZW91dChmbiwgZGVsYXkpYC4KICAgKgogICAqIFVubGlrZSB3aGVuIGNhbGxpbmcgYHNldFRpbWVvdXRgIGRpcmVjdGx5LCBpbiB0ZXN0IHRoaXMgZnVuY3Rpb24gaXMgbW9ja2VkIGFuZCBpbnN0ZWFkIG9mIHVzaW5nCiAgICogYHNldFRpbWVvdXRgIGluIHRlc3RzLCB0aGUgZm5zIGFyZSBxdWV1ZWQgaW4gYW4gYXJyYXksIHdoaWNoIGNhbiBiZSBwcm9ncmFtbWF0aWNhbGx5IGZsdXNoZWQKICAgKiB2aWEgYCRicm93c2VyLmRlZmVyLmZsdXNoKClgLgogICAqCiAgICovCiAgc2VsZi5kZWZlciA9IGZ1bmN0aW9uKGZuLCBkZWxheSkgewogICAgdmFyIHRpbWVvdXRJZDsKICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7CiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW3RpbWVvdXRJZF07CiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKTsKICAgIH0sIGRlbGF5IHx8IDApOwogICAgcGVuZGluZ0RlZmVySWRzW3RpbWVvdXRJZF0gPSB0cnVlOwogICAgcmV0dXJuIHRpbWVvdXRJZDsKICB9OwoKCiAgLyoqCiAgICogQG5hbWUgbmcuJGJyb3dzZXIjZGVmZXIuY2FuY2VsCiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyLmRlZmVyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDYW5jZWxzIGEgZGVmZXJyZWQgdGFzayBpZGVudGlmaWVkIHdpdGggYGRlZmVySWRgLgogICAqCiAgICogQHBhcmFtIHsqfSBkZWZlcklkIFRva2VuIHJldHVybmVkIGJ5IHRoZSBgJGJyb3dzZXIuZGVmZXJgIGZ1bmN0aW9uLgogICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFzayBoYXNuJ3QgZXhlY3V0ZWQgeWV0IGFuZCB3YXMgc3VjY2Vzc2Z1bGx5CiAgICogICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkLgogICAqLwogIHNlbGYuZGVmZXIuY2FuY2VsID0gZnVuY3Rpb24oZGVmZXJJZCkgewogICAgaWYgKHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXSkgewogICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW2RlZmVySWRdOwogICAgICBjbGVhclRpbWVvdXQoZGVmZXJJZCk7CiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9OwoKfQoKZnVuY3Rpb24gJEJyb3dzZXJQcm92aWRlcigpewogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9nJywgJyRzbmlmZmVyJywgJyRkb2N1bWVudCcsCiAgICAgIGZ1bmN0aW9uKCAkd2luZG93LCAgICRsb2csICAgJHNuaWZmZXIsICAgJGRvY3VtZW50KXsKICAgICAgICByZXR1cm4gbmV3IEJyb3dzZXIoJHdpbmRvdywgJGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcik7CiAgICAgIH1dOwp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kY2FjaGVGYWN0b3J5CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBGYWN0b3J5IHRoYXQgY29uc3RydWN0cyBjYWNoZSBvYmplY3RzIGFuZCBnaXZlcyBhY2Nlc3MgdG8gdGhlbS4KICogCiAqIDxwcmU+CiAqIAogKiAgdmFyIGNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpOwogKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdjYWNoZUlkJykpLnRvQmUoY2FjaGUpOwogKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdub1N1Y2hDYWNoZUlkJykpLm5vdC50b0JlRGVmaW5lZCgpOwogKgogKiAgY2FjaGUucHV0KCJrZXkiLCAidmFsdWUiKTsKICogIGNhY2hlLnB1dCgiYW5vdGhlciBrZXkiLCAiYW5vdGhlciB2YWx1ZSIpOwogKgogKiAgLy8gV2UndmUgc3BlY2lmaWVkIG5vIG9wdGlvbnMgb24gY3JlYXRpb24KICogIGV4cGVjdChjYWNoZS5pbmZvKCkpLnRvRXF1YWwoe2lkOiAnY2FjaGVJZCcsIHNpemU6IDJ9KTsgCiAqIAogKiA8L3ByZT4KICoKICoKICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiB0aGUgbmV3bHkgY3JlYXRlZCBjYWNoZS4KICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBjYWNoZSBiZWhhdmlvci4gUHJvcGVydGllczoKICoKICogICAtIGB7bnVtYmVyPX1gIGBjYXBhY2l0eWAg4oCUIHR1cm5zIHRoZSBjYWNoZSBpbnRvIExSVSBjYWNoZS4KICoKICogQHJldHVybnMge29iamVjdH0gTmV3bHkgY3JlYXRlZCBjYWNoZSBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHNldCBvZiBtZXRob2RzOgogKgogKiAtIGB7b2JqZWN0fWAgYGluZm8oKWAg4oCUIFJldHVybnMgaWQsIHNpemUsIGFuZCBvcHRpb25zIG9mIGNhY2hlLgogKiAtIGB7eyp9fWAgYHB1dCh7c3RyaW5nfSBrZXksIHsqfSB2YWx1ZSlgIOKAlCBQdXRzIGEgbmV3IGtleS12YWx1ZSBwYWlyIGludG8gdGhlIGNhY2hlIGFuZCByZXR1cm5zCiAqICAgaXQuCiAqIC0gYHt7Kn19YCBgZ2V0KHtzdHJpbmd9IGtleSlgIOKAlCBSZXR1cm5zIGNhY2hlZCB2YWx1ZSBmb3IgYGtleWAgb3IgdW5kZWZpbmVkIGZvciBjYWNoZSBtaXNzLgogKiAtIGB7dm9pZH1gIGByZW1vdmUoe3N0cmluZ30ga2V5KWAg4oCUIFJlbW92ZXMgYSBrZXktdmFsdWUgcGFpciBmcm9tIHRoZSBjYWNoZS4KICogLSBge3ZvaWR9YCBgcmVtb3ZlQWxsKClgIOKAlCBSZW1vdmVzIGFsbCBjYWNoZWQgdmFsdWVzLgogKiAtIGB7dm9pZH1gIGBkZXN0cm95KClgIOKAlCBSZW1vdmVzIHJlZmVyZW5jZXMgdG8gdGhpcyBjYWNoZSBmcm9tICRjYWNoZUZhY3RvcnkuCiAqCiAqLwpmdW5jdGlvbiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIoKSB7CgogIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGNhY2hlcyA9IHt9OwoKICAgIGZ1bmN0aW9uIGNhY2hlRmFjdG9yeShjYWNoZUlkLCBvcHRpb25zKSB7CiAgICAgIGlmIChjYWNoZUlkIGluIGNhY2hlcykgewogICAgICAgIHRocm93IG1pbkVycignJGNhY2hlRmFjdG9yeScpKCdpaWQnLCAiQ2FjaGVJZCAnezB9JyBpcyBhbHJlYWR5IHRha2VuISIsIGNhY2hlSWQpOwogICAgICB9CgogICAgICB2YXIgc2l6ZSA9IDAsCiAgICAgICAgICBzdGF0cyA9IGV4dGVuZCh7fSwgb3B0aW9ucywge2lkOiBjYWNoZUlkfSksCiAgICAgICAgICBkYXRhID0ge30sCiAgICAgICAgICBjYXBhY2l0eSA9IChvcHRpb25zICYmIG9wdGlvbnMuY2FwYWNpdHkpIHx8IE51bWJlci5NQVhfVkFMVUUsCiAgICAgICAgICBscnVIYXNoID0ge30sCiAgICAgICAgICBmcmVzaEVuZCA9IG51bGwsCiAgICAgICAgICBzdGFsZUVuZCA9IG51bGw7CgogICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdID0gewoKICAgICAgICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0ge2tleToga2V5fSk7CgogICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7CgogICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuOwogICAgICAgICAgaWYgKCEoa2V5IGluIGRhdGEpKSBzaXplKys7CiAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTsKCiAgICAgICAgICBpZiAoc2l6ZSA+IGNhcGFjaXR5KSB7CiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN0YWxlRW5kLmtleSk7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0sCgoKICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldOwoKICAgICAgICAgIGlmICghbHJ1RW50cnkpIHJldHVybjsKCiAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTsKCiAgICAgICAgICByZXR1cm4gZGF0YVtrZXldOwogICAgICAgIH0sCgoKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldOwoKICAgICAgICAgIGlmICghbHJ1RW50cnkpIHJldHVybjsKCiAgICAgICAgICBpZiAobHJ1RW50cnkgPT0gZnJlc2hFbmQpIGZyZXNoRW5kID0gbHJ1RW50cnkucDsKICAgICAgICAgIGlmIChscnVFbnRyeSA9PSBzdGFsZUVuZCkgc3RhbGVFbmQgPSBscnVFbnRyeS5uOwogICAgICAgICAgbGluayhscnVFbnRyeS5uLGxydUVudHJ5LnApOwoKICAgICAgICAgIGRlbGV0ZSBscnVIYXNoW2tleV07CiAgICAgICAgICBkZWxldGUgZGF0YVtrZXldOwogICAgICAgICAgc2l6ZS0tOwogICAgICAgIH0sCgoKICAgICAgICByZW1vdmVBbGw6IGZ1bmN0aW9uKCkgewogICAgICAgICAgZGF0YSA9IHt9OwogICAgICAgICAgc2l6ZSA9IDA7CiAgICAgICAgICBscnVIYXNoID0ge307CiAgICAgICAgICBmcmVzaEVuZCA9IHN0YWxlRW5kID0gbnVsbDsKICAgICAgICB9LAoKCiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7CiAgICAgICAgICBkYXRhID0gbnVsbDsKICAgICAgICAgIHN0YXRzID0gbnVsbDsKICAgICAgICAgIGxydUhhc2ggPSBudWxsOwogICAgICAgICAgZGVsZXRlIGNhY2hlc1tjYWNoZUlkXTsKICAgICAgICB9LAoKCiAgICAgICAgaW5mbzogZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywge3NpemU6IHNpemV9KTsKICAgICAgICB9CiAgICAgIH07CgoKICAgICAgLyoqCiAgICAgICAqIG1ha2VzIHRoZSBgZW50cnlgIHRoZSBmcmVzaEVuZCBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0CiAgICAgICAqLwogICAgICBmdW5jdGlvbiByZWZyZXNoKGVudHJ5KSB7CiAgICAgICAgaWYgKGVudHJ5ICE9IGZyZXNoRW5kKSB7CiAgICAgICAgICBpZiAoIXN0YWxlRW5kKSB7CiAgICAgICAgICAgIHN0YWxlRW5kID0gZW50cnk7CiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWxlRW5kID09IGVudHJ5KSB7CiAgICAgICAgICAgIHN0YWxlRW5kID0gZW50cnkubjsKICAgICAgICAgIH0KCiAgICAgICAgICBsaW5rKGVudHJ5Lm4sIGVudHJ5LnApOwogICAgICAgICAgbGluayhlbnRyeSwgZnJlc2hFbmQpOwogICAgICAgICAgZnJlc2hFbmQgPSBlbnRyeTsKICAgICAgICAgIGZyZXNoRW5kLm4gPSBudWxsOwogICAgICAgIH0KICAgICAgfQoKCiAgICAgIC8qKgogICAgICAgKiBiaWRpcmVjdGlvbmFsbHkgbGlua3MgdHdvIGVudHJpZXMgb2YgdGhlIExSVSBsaW5rZWQgbGlzdAogICAgICAgKi8KICAgICAgZnVuY3Rpb24gbGluayhuZXh0RW50cnksIHByZXZFbnRyeSkgewogICAgICAgIGlmIChuZXh0RW50cnkgIT0gcHJldkVudHJ5KSB7CiAgICAgICAgICBpZiAobmV4dEVudHJ5KSBuZXh0RW50cnkucCA9IHByZXZFbnRyeTsgLy9wIHN0YW5kcyBmb3IgcHJldmlvdXMsICdwcmV2JyBkaWRuJ3QgbWluaWZ5CiAgICAgICAgICBpZiAocHJldkVudHJ5KSBwcmV2RW50cnkubiA9IG5leHRFbnRyeTsgLy9uIHN0YW5kcyBmb3IgbmV4dCwgJ25leHQnIGRpZG4ndCBtaW5pZnkKICAgICAgICB9CiAgICAgIH0KICAgIH0KCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kY2FjaGVGYWN0b3J5I2luZm8KICAgKiBAbWV0aG9kT2YgbmcuJGNhY2hlRmFjdG9yeQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCB0aGUgb2YgdGhlIGNhY2hlcyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkCiAgICoKICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIGtleS12YWx1ZSBtYXAgb2YgYGNhY2hlSWRgIHRvIHRoZSByZXN1bHQgb2YgY2FsbGluZyBgY2FjaGUjaW5mb2AKICAgKi8KICAgIGNhY2hlRmFjdG9yeS5pbmZvID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBpbmZvID0ge307CiAgICAgIGZvckVhY2goY2FjaGVzLCBmdW5jdGlvbihjYWNoZSwgY2FjaGVJZCkgewogICAgICAgIGluZm9bY2FjaGVJZF0gPSBjYWNoZS5pbmZvKCk7CiAgICAgIH0pOwogICAgICByZXR1cm4gaW5mbzsKICAgIH07CgoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGNhY2hlRmFjdG9yeSNnZXQKICAgKiBAbWV0aG9kT2YgbmcuJGNhY2hlRmFjdG9yeQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogR2V0IGFjY2VzcyB0byBhIGNhY2hlIG9iamVjdCBieSB0aGUgYGNhY2hlSWRgIHVzZWQgd2hlbiBpdCB3YXMgY3JlYXRlZC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgYSBjYWNoZSB0byBhY2Nlc3MuCiAgICogQHJldHVybnMge29iamVjdH0gQ2FjaGUgb2JqZWN0IGlkZW50aWZpZWQgYnkgdGhlIGNhY2hlSWQgb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2ggY2FjaGUuCiAgICovCiAgICBjYWNoZUZhY3RvcnkuZ2V0ID0gZnVuY3Rpb24oY2FjaGVJZCkgewogICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdOwogICAgfTsKCgogICAgcmV0dXJuIGNhY2hlRmFjdG9yeTsKICB9Owp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kdGVtcGxhdGVDYWNoZQogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGZpcnN0IHRpbWUgYSB0ZW1wbGF0ZSBpcyB1c2VkLCBpdCBpcyBsb2FkZWQgaW4gdGhlIHRlbXBsYXRlIGNhY2hlIGZvciBxdWljayByZXRyaWV2YWwuIFlvdQogKiBjYW4gbG9hZCB0ZW1wbGF0ZXMgZGlyZWN0bHkgaW50byB0aGUgY2FjaGUgaW4gYSBgc2NyaXB0YCB0YWcsIG9yIGJ5IGNvbnN1bWluZyB0aGUKICogYCR0ZW1wbGF0ZUNhY2hlYCBzZXJ2aWNlIGRpcmVjdGx5LgogKiAKICogQWRkaW5nIHZpYSB0aGUgYHNjcmlwdGAgdGFnOgogKiA8cHJlPgogKiA8aHRtbCBuZy1hcHA+CiAqIDxoZWFkPgogKiA8c2NyaXB0IHR5cGU9InRleHQvbmctdGVtcGxhdGUiIGlkPSJ0ZW1wbGF0ZUlkLmh0bWwiPgogKiAgIFRoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlCiAqIDwvc2NyaXB0PgogKiA8L2hlYWQ+CiAqICAgLi4uCiAqIDwvaHRtbD4KICogPC9wcmU+CiAqIAogKiAqKk5vdGU6KiogdGhlIGBzY3JpcHRgIHRhZyBjb250YWluaW5nIHRoZSB0ZW1wbGF0ZSBkb2VzIG5vdCBuZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBgaGVhZGAgb2YKICogdGhlIGRvY3VtZW50LCBidXQgaXQgbXVzdCBiZSBiZWxvdyB0aGUgYG5nLWFwcGAgZGVmaW5pdGlvbi4KICogCiAqIEFkZGluZyB2aWEgdGhlICR0ZW1wbGF0ZUNhY2hlIHNlcnZpY2U6CiAqIAogKiA8cHJlPgogKiB2YXIgbXlBcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSk7CiAqIG15QXBwLnJ1bihmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgewogKiAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGVtcGxhdGVJZC5odG1sJywgJ1RoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlJyk7CiAqIH0pOwogKiA8L3ByZT4KICogCiAqIFRvIHJldHJpZXZlIHRoZSB0ZW1wbGF0ZSBsYXRlciwgc2ltcGx5IHVzZSBpdCBpbiB5b3VyIEhUTUw6CiAqIDxwcmU+CiAqIDxkaXYgbmctaW5jbHVkZT0iICd0ZW1wbGF0ZUlkLmh0bWwnICI+PC9kaXY+CiAqIDwvcHJlPgogKiAKICogb3IgZ2V0IGl0IHZpYSBKYXZhc2NyaXB0OgogKiA8cHJlPgogKiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3RlbXBsYXRlSWQuaHRtbCcpCiAqIDwvcHJlPgogKiAKICogU2VlIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LgogKgogKi8KZnVuY3Rpb24gJFRlbXBsYXRlQ2FjaGVQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7CiAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgndGVtcGxhdGVzJyk7CiAgfV07Cn0KCi8qICEgVkFSSUFCTEUvRlVOQ1RJT04gTkFNSU5HIENPTlZFTlRJT05TIFRIQVQgQVBQTFkgVE8gVEhJUyBGSUxFIQogKgogKiBET00tcmVsYXRlZCB2YXJpYWJsZXM6CiAqCiAqIC0gIm5vZGUiIC0gRE9NIE5vZGUKICogLSAiZWxlbWVudCIgLSBET00gRWxlbWVudCBvciBOb2RlCiAqIC0gIiRub2RlIiBvciAiJGVsZW1lbnQiIC0ganFMaXRlLXdyYXBwZWQgbm9kZSBvciBlbGVtZW50CiAqCiAqCiAqIENvbXBpbGVyIHJlbGF0ZWQgc3R1ZmY6CiAqCiAqIC0gImxpbmtGbiIgLSBsaW5raW5nIGZuIG9mIGEgc2luZ2xlIGRpcmVjdGl2ZQogKiAtICJub2RlTGlua0ZuIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgcGFydGljdWxhciBub2RlCiAqIC0gImNoaWxkTGlua0ZuIiAtICBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBjaGlsZCBub2RlcyBvZiBhIHBhcnRpY3VsYXIgbm9kZQogKiAtICJjb21wb3NpdGVMaW5rRm4iIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBjb21waWxhdGlvbiByb290IChub2RlTGlzdCkKICovCgoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBuZy4kY29tcGlsZQogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqIENvbXBpbGVzIGFuIEhUTUwgc3RyaW5nIG9yIERPTSBpbnRvIGEgdGVtcGxhdGUgYW5kIHByb2R1Y2VzIGEgdGVtcGxhdGUgZnVuY3Rpb24sIHdoaWNoCiAqIGNhbiB0aGVuIGJlIHVzZWQgdG8gbGluayB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBgc2NvcGVgfSBhbmQgdGhlIHRlbXBsYXRlIHRvZ2V0aGVyLgogKgogKiBUaGUgY29tcGlsYXRpb24gaXMgYSBwcm9jZXNzIG9mIHdhbGtpbmcgdGhlIERPTSB0cmVlIGFuZCBtYXRjaGluZyBET00gZWxlbWVudHMgdG8KICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjbWV0aG9kc19kaXJlY3RpdmUgZGlyZWN0aXZlc30uCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGU6KiogVGhpcyBkb2N1bWVudCBpcyBhbiBpbi1kZXB0aCByZWZlcmVuY2Ugb2YgYWxsIGRpcmVjdGl2ZSBvcHRpb25zLgogKiBGb3IgYSBnZW50bGUgaW50cm9kdWN0aW9uIHRvIGRpcmVjdGl2ZXMgd2l0aCBleGFtcGxlcyBvZiBjb21tb24gdXNlIGNhc2VzLAogKiBzZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlIGd1aWRlfS4KICogPC9kaXY+CiAqCiAqICMjIENvbXByZWhlbnNpdmUgRGlyZWN0aXZlIEFQSQogKgogKiBUaGVyZSBhcmUgbWFueSBkaWZmZXJlbnQgb3B0aW9ucyBmb3IgYSBkaXJlY3RpdmUuCiAqCiAqIFRoZSBkaWZmZXJlbmNlIHJlc2lkZXMgaW4gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmFjdG9yeSBmdW5jdGlvbi4KICogWW91IGNhbiBlaXRoZXIgcmV0dXJuIGEgIkRpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdCIgKHNlZSBiZWxvdykgdGhhdCBkZWZpbmVzIHRoZSBkaXJlY3RpdmUgcHJvcGVydGllcywKICogb3IganVzdCB0aGUgYHBvc3RMaW5rYCBmdW5jdGlvbiAoYWxsIG90aGVyIHByb3BlcnRpZXMgd2lsbCBoYXZlIHRoZSBkZWZhdWx0IHZhbHVlcykuCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiPgogKiAqKkJlc3QgUHJhY3RpY2U6KiogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlICJkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3QiIGZvcm0uCiAqIDwvZGl2PgogKgogKiBIZXJlJ3MgYW4gZXhhbXBsZSBkaXJlY3RpdmUgZGVjbGFyZWQgd2l0aCBhIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdDoKICoKICogPHByZT4KICogICB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSguLi4pOwogKgogKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHsKICogICAgIHZhciBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0ID0gewogKiAgICAgICBwcmlvcml0eTogMCwKICogICAgICAgdGVtcGxhdGU6ICc8ZGl2PjwvZGl2PicsIC8vIG9yIC8vIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsgLi4uIH0sCiAqICAgICAgIC8vIG9yCiAqICAgICAgIC8vIHRlbXBsYXRlVXJsOiAnZGlyZWN0aXZlLmh0bWwnLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LAogKiAgICAgICByZXBsYWNlOiBmYWxzZSwKICogICAgICAgdHJhbnNjbHVkZTogZmFsc2UsCiAqICAgICAgIHJlc3RyaWN0OiAnQScsCiAqICAgICAgIHNjb3BlOiBmYWxzZSwKICogICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdHJhbnNjbHVkZSwgb3RoZXJJbmplY3RhYmxlcykgeyAuLi4gfSwKICogICAgICAgcmVxdWlyZTogJ3NpYmxpbmdEaXJlY3RpdmVOYW1lJywgLy8gb3IgLy8gWydecGFyZW50RGlyZWN0aXZlTmFtZScsICc/b3B0aW9uYWxEaXJlY3RpdmVOYW1lJywgJz9eb3B0aW9uYWxQYXJlbnQnXSwKICogICAgICAgY29tcGlsZTogZnVuY3Rpb24gY29tcGlsZSh0RWxlbWVudCwgdEF0dHJzLCB0cmFuc2NsdWRlKSB7CiAqICAgICAgICAgcmV0dXJuIHsKICogICAgICAgICAgIHByZTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSwKICogICAgICAgICAgIHBvc3Q6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9CiAqICAgICAgICAgfQogKiAgICAgICAgIC8vIG9yCiAqICAgICAgICAgLy8gcmV0dXJuIGZ1bmN0aW9uIHBvc3RMaW5rKCAuLi4gKSB7IC4uLiB9CiAqICAgICAgIH0sCiAqICAgICAgIC8vIG9yCiAqICAgICAgIC8vIGxpbms6IHsKICogICAgICAgLy8gIHByZTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSwKICogICAgICAgLy8gIHBvc3Q6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9CiAqICAgICAgIC8vIH0KICogICAgICAgLy8gb3IKICogICAgICAgLy8gbGluazogZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH0KICogICAgIH07CiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDsKICogICB9KTsKICogPC9wcmU+CiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGU6KiogQW55IHVuc3BlY2lmaWVkIG9wdGlvbnMgd2lsbCB1c2UgdGhlIGRlZmF1bHQgdmFsdWUuIFlvdSBjYW4gc2VlIHRoZSBkZWZhdWx0IHZhbHVlcyBiZWxvdy4KICogPC9kaXY+CiAqCiAqIFRoZXJlZm9yZSB0aGUgYWJvdmUgY2FuIGJlIHNpbXBsaWZpZWQgYXM6CiAqCiAqIDxwcmU+CiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTsKICoKICogICBteU1vZHVsZS5kaXJlY3RpdmUoJ2RpcmVjdGl2ZU5hbWUnLCBmdW5jdGlvbiBmYWN0b3J5KGluamVjdGFibGVzKSB7CiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHsKICogICAgICAgbGluazogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHsgLi4uIH0KICogICAgIH07CiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDsKICogICAgIC8vIG9yCiAqICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHsgLi4uIH0KICogICB9KTsKICogPC9wcmU+CiAqCiAqCiAqCiAqICMjIyBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3QKICoKICogVGhlIGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdCBwcm92aWRlcyBpbnN0cnVjdGlvbnMgdG8gdGhlIHtAbGluayBhcGkvbmcuJGNvbXBpbGUKICogY29tcGlsZXJ9LiBUaGUgYXR0cmlidXRlcyBhcmU6CiAqCiAqICMjIyMgYHByaW9yaXR5YAogKiBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBkaXJlY3RpdmVzIGRlZmluZWQgb24gYSBzaW5nbGUgRE9NIGVsZW1lbnQsIHNvbWV0aW1lcyBpdAogKiBpcyBuZWNlc3NhcnkgdG8gc3BlY2lmeSB0aGUgb3JkZXIgaW4gd2hpY2ggdGhlIGRpcmVjdGl2ZXMgYXJlIGFwcGxpZWQuIFRoZSBgcHJpb3JpdHlgIGlzIHVzZWQKICogdG8gc29ydCB0aGUgZGlyZWN0aXZlcyBiZWZvcmUgdGhlaXIgYGNvbXBpbGVgIGZ1bmN0aW9ucyBnZXQgY2FsbGVkLiBQcmlvcml0eSBpcyBkZWZpbmVkIGFzIGEKICogbnVtYmVyLiBEaXJlY3RpdmVzIHdpdGggZ3JlYXRlciBudW1lcmljYWwgYHByaW9yaXR5YCBhcmUgY29tcGlsZWQgZmlyc3QuIFByZS1saW5rIGZ1bmN0aW9ucwogKiBhcmUgYWxzbyBydW4gaW4gcHJpb3JpdHkgb3JkZXIsIGJ1dCBwb3N0LWxpbmsgZnVuY3Rpb25zIGFyZSBydW4gaW4gcmV2ZXJzZSBvcmRlci4gVGhlIG9yZGVyCiAqIG9mIGRpcmVjdGl2ZXMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBpcyB1bmRlZmluZWQuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIGAwYC4KICoKICogIyMjIyBgdGVybWluYWxgCiAqIElmIHNldCB0byB0cnVlIHRoZW4gdGhlIGN1cnJlbnQgYHByaW9yaXR5YCB3aWxsIGJlIHRoZSBsYXN0IHNldCBvZiBkaXJlY3RpdmVzCiAqIHdoaWNoIHdpbGwgZXhlY3V0ZSAoYW55IGRpcmVjdGl2ZXMgYXQgdGhlIGN1cnJlbnQgcHJpb3JpdHkgd2lsbCBzdGlsbCBleGVjdXRlCiAqIGFzIHRoZSBvcmRlciBvZiBleGVjdXRpb24gb24gc2FtZSBgcHJpb3JpdHlgIGlzIHVuZGVmaW5lZCkuCiAqCiAqICMjIyMgYHNjb3BlYAogKiAqKklmIHNldCB0byBgdHJ1ZWAsKiogdGhlbiBhIG5ldyBzY29wZSB3aWxsIGJlIGNyZWF0ZWQgZm9yIHRoaXMgZGlyZWN0aXZlLiBJZiBtdWx0aXBsZSBkaXJlY3RpdmVzIG9uIHRoZQogKiBzYW1lIGVsZW1lbnQgcmVxdWVzdCBhIG5ldyBzY29wZSwgb25seSBvbmUgbmV3IHNjb3BlIGlzIGNyZWF0ZWQuIFRoZSBuZXcgc2NvcGUgcnVsZSBkb2VzIG5vdAogKiBhcHBseSBmb3IgdGhlIHJvb3Qgb2YgdGhlIHRlbXBsYXRlIHNpbmNlIHRoZSByb290IG9mIHRoZSB0ZW1wbGF0ZSBhbHdheXMgZ2V0cyBhIG5ldyBzY29wZS4KICoKICogKipJZiBzZXQgdG8gYHt9YCAob2JqZWN0IGhhc2gpLCoqIHRoZW4gYSBuZXcgImlzb2xhdGUiIHNjb3BlIGlzIGNyZWF0ZWQuIFRoZSAnaXNvbGF0ZScgc2NvcGUgZGlmZmVycyBmcm9tCiAqIG5vcm1hbCBzY29wZSBpbiB0aGF0IGl0IGRvZXMgbm90IHByb3RvdHlwaWNhbGx5IGluaGVyaXQgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBUaGlzIGlzIHVzZWZ1bAogKiB3aGVuIGNyZWF0aW5nIHJldXNhYmxlIGNvbXBvbmVudHMsIHdoaWNoIHNob3VsZCBub3QgYWNjaWRlbnRhbGx5IHJlYWQgb3IgbW9kaWZ5IGRhdGEgaW4gdGhlCiAqIHBhcmVudCBzY29wZS4KICoKICogVGhlICdpc29sYXRlJyBzY29wZSB0YWtlcyBhbiBvYmplY3QgaGFzaCB3aGljaCBkZWZpbmVzIGEgc2V0IG9mIGxvY2FsIHNjb3BlIHByb3BlcnRpZXMKICogZGVyaXZlZCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuIFRoZXNlIGxvY2FsIHByb3BlcnRpZXMgYXJlIHVzZWZ1bCBmb3IgYWxpYXNpbmcgdmFsdWVzIGZvcgogKiB0ZW1wbGF0ZXMuIExvY2FscyBkZWZpbml0aW9uIGlzIGEgaGFzaCBvZiBsb2NhbCBzY29wZSBwcm9wZXJ0eSB0byBpdHMgc291cmNlOgogKgogKiAqIGBAYCBvciBgQGF0dHJgIC0gYmluZCBhIGxvY2FsIHNjb3BlIHByb3BlcnR5IHRvIHRoZSB2YWx1ZSBvZiBET00gYXR0cmlidXRlLiBUaGUgcmVzdWx0IGlzCiAqICAgYWx3YXlzIGEgc3RyaW5nIHNpbmNlIERPTSBhdHRyaWJ1dGVzIGFyZSBzdHJpbmdzLiBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgIHRoZW4gdGhlCiAqICAgYXR0cmlidXRlIG5hbWUgaXMgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbG9jYWwgbmFtZS4KICogICBHaXZlbiBgPHdpZGdldCBteS1hdHRyPSJoZWxsbyB7e25hbWV9fSI+YCBhbmQgd2lkZ2V0IGRlZmluaXRpb24KICogICBvZiBgc2NvcGU6IHsgbG9jYWxOYW1lOidAbXlBdHRyJyB9YCwgdGhlbiB3aWRnZXQgc2NvcGUgcHJvcGVydHkgYGxvY2FsTmFtZWAgd2lsbCByZWZsZWN0CiAqICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiBgaGVsbG8ge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlCiAqICAgYGxvY2FsTmFtZWAgcHJvcGVydHkgb24gdGhlIHdpZGdldCBzY29wZS4gVGhlIGBuYW1lYCBpcyByZWFkIGZyb20gdGhlIHBhcmVudCBzY29wZSAobm90CiAqICAgY29tcG9uZW50IHNjb3BlKS4KICoKICogKiBgPWAgb3IgYD1hdHRyYCAtIHNldCB1cCBiaS1kaXJlY3Rpb25hbCBiaW5kaW5nIGJldHdlZW4gYSBsb2NhbCBzY29wZSBwcm9wZXJ0eSBhbmQgdGhlCiAqICAgcGFyZW50IHNjb3BlIHByb3BlcnR5IG9mIG5hbWUgZGVmaW5lZCB2aWEgdGhlIHZhbHVlIG9mIHRoZSBgYXR0cmAgYXR0cmlidXRlLiBJZiBubyBgYXR0cmAKICogICBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLgogKiAgIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9InBhcmVudE1vZGVsIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZgogKiAgIGBzY29wZTogeyBsb2NhbE1vZGVsOic9bXlBdHRyJyB9YCwgdGhlbiB3aWRnZXQgc2NvcGUgcHJvcGVydHkgYGxvY2FsTW9kZWxgIHdpbGwgcmVmbGVjdCB0aGUKICogICB2YWx1ZSBvZiBgcGFyZW50TW9kZWxgIG9uIHRoZSBwYXJlbnQgc2NvcGUuIEFueSBjaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWQKICogICBpbiBgbG9jYWxNb2RlbGAgYW5kIGFueSBjaGFuZ2VzIGluIGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgaW4gYHBhcmVudE1vZGVsYC4gSWYgdGhlIHBhcmVudAogKiAgIHNjb3BlIHByb3BlcnR5IGRvZXNuJ3QgZXhpc3QsIGl0IHdpbGwgdGhyb3cgYSBOT05fQVNTSUdOQUJMRV9NT0RFTF9FWFBSRVNTSU9OIGV4Y2VwdGlvbi4gWW91CiAqICAgY2FuIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNpbmcgYD0/YCBvciBgPT9hdHRyYCBpbiBvcmRlciB0byBmbGFnIHRoZSBwcm9wZXJ0eSBhcyBvcHRpb25hbC4KICoKICogKiBgJmAgb3IgYCZhdHRyYCAtIHByb3ZpZGVzIGEgd2F5IHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiB0aGUgY29udGV4dCBvZiB0aGUgcGFyZW50IHNjb3BlLgogKiAgIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZQogKiAgIGxvY2FsIG5hbWUuIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9ImNvdW50ID0gY291bnQgKyB2YWx1ZSI+YCBhbmQgd2lkZ2V0IGRlZmluaXRpb24gb2YKICogICBgc2NvcGU6IHsgbG9jYWxGbjonJm15QXR0cicgfWAsIHRoZW4gaXNvbGF0ZSBzY29wZSBwcm9wZXJ0eSBgbG9jYWxGbmAgd2lsbCBwb2ludCB0bwogKiAgIGEgZnVuY3Rpb24gd3JhcHBlciBmb3IgdGhlIGBjb3VudCA9IGNvdW50ICsgdmFsdWVgIGV4cHJlc3Npb24uIE9mdGVuIGl0J3MgZGVzaXJhYmxlIHRvCiAqICAgcGFzcyBkYXRhIGZyb20gdGhlIGlzb2xhdGVkIHNjb3BlIHZpYSBhbiBleHByZXNzaW9uIGFuZCB0byB0aGUgcGFyZW50IHNjb3BlLCB0aGlzIGNhbiBiZQogKiAgIGRvbmUgYnkgcGFzc2luZyBhIG1hcCBvZiBsb2NhbCB2YXJpYWJsZSBuYW1lcyBhbmQgdmFsdWVzIGludG8gdGhlIGV4cHJlc3Npb24gd3JhcHBlciBmbi4KICogICBGb3IgZXhhbXBsZSwgaWYgdGhlIGV4cHJlc3Npb24gaXMgYGluY3JlbWVudChhbW91bnQpYCB0aGVuIHdlIGNhbiBzcGVjaWZ5IHRoZSBhbW91bnQgdmFsdWUKICogICBieSBjYWxsaW5nIHRoZSBgbG9jYWxGbmAgYXMgYGxvY2FsRm4oe2Ftb3VudDogMjJ9KWAuCiAqCiAqCiAqCiAqICMjIyMgYGNvbnRyb2xsZXJgCiAqIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIFRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBiZWZvcmUgdGhlCiAqIHByZS1saW5raW5nIHBoYXNlIGFuZCBpdCBpcyBzaGFyZWQgd2l0aCBvdGhlciBkaXJlY3RpdmVzIChzZWUKICogYHJlcXVpcmVgIGF0dHJpYnV0ZSkuIFRoaXMgYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIGNvbW11bmljYXRlIHdpdGggZWFjaCBvdGhlciBhbmQgYXVnbWVudAogKiBlYWNoIG90aGVyJ3MgYmVoYXZpb3IuIFRoZSBjb250cm9sbGVyIGlzIGluamVjdGFibGUgKGFuZCBzdXBwb3J0cyBicmFja2V0IG5vdGF0aW9uKSB3aXRoIHRoZSBmb2xsb3dpbmcgbG9jYWxzOgogKgogKiAqIGAkc2NvcGVgIC0gQ3VycmVudCBzY29wZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnQKICogKiBgJGVsZW1lbnRgIC0gQ3VycmVudCBlbGVtZW50CiAqICogYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudAogKiAqIGAkdHJhbnNjbHVkZWAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLgogKiAgICBUaGUgc2NvcGUgY2FuIGJlIG92ZXJyaWRkZW4gYnkgYW4gb3B0aW9uYWwgZmlyc3QgYXJndW1lbnQuCiAqICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuKWAuCiAqCiAqCiAqICMjIyMgYHJlcXVpcmVgCiAqIFJlcXVpcmUgYW5vdGhlciBkaXJlY3RpdmUgYW5kIGluamVjdCBpdHMgY29udHJvbGxlciBhcyB0aGUgZm91cnRoIGFyZ3VtZW50IHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGUKICogYHJlcXVpcmVgIHRha2VzIGEgc3RyaW5nIG5hbWUgKG9yIGFycmF5IG9mIHN0cmluZ3MpIG9mIHRoZSBkaXJlY3RpdmUocykgdG8gcGFzcyBpbi4gSWYgYW4gYXJyYXkgaXMgdXNlZCwgdGhlCiAqIGluamVjdGVkIGFyZ3VtZW50IHdpbGwgYmUgYW4gYXJyYXkgaW4gY29ycmVzcG9uZGluZyBvcmRlci4gSWYgbm8gc3VjaCBkaXJlY3RpdmUgY2FuIGJlCiAqIGZvdW5kLCBvciBpZiB0aGUgZGlyZWN0aXZlIGRvZXMgbm90IGhhdmUgYSBjb250cm9sbGVyLCB0aGVuIGFuIGVycm9yIGlzIHJhaXNlZC4gVGhlIG5hbWUgY2FuIGJlIHByZWZpeGVkIHdpdGg6CiAqCiAqICogKG5vIHByZWZpeCkgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb24gdGhlIGN1cnJlbnQgZWxlbWVudC4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLgogKiAqIGA/YCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIG9yIHBhc3MgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLgogKiAqIGBeYCAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQncyBwYXJlbnRzLiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuCiAqICogYD9eYCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCdzIHBhcmVudHMgb3IgcGFzcyBgbnVsbGAgdG8gdGhlCiAqICAgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC4KICoKICoKICogIyMjIyBgY29udHJvbGxlckFzYAogKiBDb250cm9sbGVyIGFsaWFzIGF0IHRoZSBkaXJlY3RpdmUgc2NvcGUuIEFuIGFsaWFzIGZvciB0aGUgY29udHJvbGxlciBzbyBpdAogKiBjYW4gYmUgcmVmZXJlbmNlZCBhdCB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlLiBUaGUgZGlyZWN0aXZlIG5lZWRzIHRvIGRlZmluZSBhIHNjb3BlIGZvciB0aGlzCiAqIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZC4gVXNlZnVsIGluIHRoZSBjYXNlIHdoZW4gZGlyZWN0aXZlIGlzIHVzZWQgYXMgY29tcG9uZW50LgogKgogKgogKiAjIyMjIGByZXN0cmljdGAKICogU3RyaW5nIG9mIHN1YnNldCBvZiBgRUFDTWAgd2hpY2ggcmVzdHJpY3RzIHRoZSBkaXJlY3RpdmUgdG8gYSBzcGVjaWZpYyBkaXJlY3RpdmUKICogZGVjbGFyYXRpb24gc3R5bGUuIElmIG9taXR0ZWQsIHRoZSBkZWZhdWx0IChhdHRyaWJ1dGVzIG9ubHkpIGlzIHVzZWQuCiAqCiAqICogYEVgIC0gRWxlbWVudCBuYW1lOiBgPG15LWRpcmVjdGl2ZT48L215LWRpcmVjdGl2ZT5gCiAqICogYEFgIC0gQXR0cmlidXRlIChkZWZhdWx0KTogYDxkaXYgbXktZGlyZWN0aXZlPSJleHAiPjwvZGl2PmAKICogKiBgQ2AgLSBDbGFzczogYDxkaXYgY2xhc3M9Im15LWRpcmVjdGl2ZTogZXhwOyI+PC9kaXY+YAogKiAqIGBNYCAtIENvbW1lbnQ6IGA8IS0tIGRpcmVjdGl2ZTogbXktZGlyZWN0aXZlIGV4cCAtLT5gCiAqCiAqCiAqICMjIyMgYHRlbXBsYXRlYAogKiByZXBsYWNlIHRoZSBjdXJyZW50IGVsZW1lbnQgd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIEhUTUwuIFRoZSByZXBsYWNlbWVudCBwcm9jZXNzCiAqIG1pZ3JhdGVzIGFsbCBvZiB0aGUgYXR0cmlidXRlcyAvIGNsYXNzZXMgZnJvbSB0aGUgb2xkIGVsZW1lbnQgdG8gdGhlIG5ldyBvbmUuIFNlZSB0aGUKICoge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNjcmVhdGluZy1jdXN0b20tZGlyZWN0aXZlc19jcmVhdGluZy1kaXJlY3RpdmVzX3RlbXBsYXRlLWV4cGFuZGluZy1kaXJlY3RpdmUKICogRGlyZWN0aXZlcyBHdWlkZX0gZm9yIGFuIGV4YW1wbGUuCiAqCiAqIFlvdSBjYW4gc3BlY2lmeSBgdGVtcGxhdGVgIGFzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdGVtcGxhdGUgb3IgYXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcwogKiB0d28gYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYCBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZAogKiByZXR1cm5zIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgdGVtcGxhdGUuCiAqCiAqCiAqICMjIyMgYHRlbXBsYXRlVXJsYAogKiBTYW1lIGFzIGB0ZW1wbGF0ZWAgYnV0IHRoZSB0ZW1wbGF0ZSBpcyBsb2FkZWQgZnJvbSB0aGUgc3BlY2lmaWVkIFVSTC4gQmVjYXVzZQogKiB0aGUgdGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgdGhlIGNvbXBpbGF0aW9uL2xpbmtpbmcgaXMgc3VzcGVuZGVkIHVudGlsIHRoZSB0ZW1wbGF0ZQogKiBpcyBsb2FkZWQuCiAqCiAqIFlvdSBjYW4gc3BlY2lmeSBgdGVtcGxhdGVVcmxgIGFzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgVVJMIG9yIGFzIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvCiAqIGFyZ3VtZW50cyBgdEVsZW1lbnRgIGFuZCBgdEF0dHJzYCAoZGVzY3JpYmVkIGluIHRoZSBgY29tcGlsZWAgZnVuY3Rpb24gYXBpIGJlbG93KSBhbmQgcmV0dXJucwogKiBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHVybC4gIEluIGVpdGhlciBjYXNlLCB0aGUgdGVtcGxhdGUgVVJMIGlzIHBhc3NlZCB0aHJvdWdoIHtAbGluawogKiBhcGkvbmcuJHNjZSNtZXRob2RzX2dldFRydXN0ZWRSZXNvdXJjZVVybCAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0uCiAqCiAqCiAqICMjIyMgYHJlcGxhY2VgCiAqIHNwZWNpZnkgd2hlcmUgdGhlIHRlbXBsYXRlIHNob3VsZCBiZSBpbnNlcnRlZC4gRGVmYXVsdHMgdG8gYGZhbHNlYC4KICoKICogKiBgdHJ1ZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBjdXJyZW50IGVsZW1lbnQuCiAqICogYGZhbHNlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50IGVsZW1lbnQuCiAqCiAqCiAqICMjIyMgYHRyYW5zY2x1ZGVgCiAqIGNvbXBpbGUgdGhlIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgYW5kIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBkaXJlY3RpdmUuCiAqIFR5cGljYWxseSB1c2VkIHdpdGgge0BsaW5rIGFwaS9uZy5kaXJlY3RpdmU6bmdUcmFuc2NsdWRlCiAqIG5nVHJhbnNjbHVkZX0uIFRoZSBhZHZhbnRhZ2Ugb2YgdHJhbnNjbHVzaW9uIGlzIHRoYXQgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmVjZWl2ZXMgYQogKiB0cmFuc2NsdXNpb24gZnVuY3Rpb24gd2hpY2ggaXMgcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHNjb3BlLiBJbiBhIHR5cGljYWwgc2V0dXAgdGhlIHdpZGdldAogKiBjcmVhdGVzIGFuIGBpc29sYXRlYCBzY29wZSwgYnV0IHRoZSB0cmFuc2NsdXNpb24gaXMgbm90IGEgY2hpbGQsIGJ1dCBhIHNpYmxpbmcgb2YgdGhlIGBpc29sYXRlYAogKiBzY29wZS4gVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgdGhlIHdpZGdldCB0byBoYXZlIHByaXZhdGUgc3RhdGUsIGFuZCB0aGUgdHJhbnNjbHVzaW9uIHRvCiAqIGJlIGJvdW5kIHRvIHRoZSBwYXJlbnQgKHByZS1gaXNvbGF0ZWApIHNjb3BlLgogKgogKiAqIGB0cnVlYCAtIHRyYW5zY2x1ZGUgdGhlIGNvbnRlbnQgb2YgdGhlIGRpcmVjdGl2ZS4KICogKiBgJ2VsZW1lbnQnYCAtIHRyYW5zY2x1ZGUgdGhlIHdob2xlIGVsZW1lbnQgaW5jbHVkaW5nIGFueSBkaXJlY3RpdmVzIGRlZmluZWQgYXQgbG93ZXIgcHJpb3JpdHkuCiAqCiAqCiAqICMjIyMgYGNvbXBpbGVgCiAqCiAqIDxwcmU+CiAqICAgZnVuY3Rpb24gY29tcGlsZSh0RWxlbWVudCwgdEF0dHJzLCB0cmFuc2NsdWRlKSB7IC4uLiB9CiAqIDwvcHJlPgogKgogKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBkZWFscyB3aXRoIHRyYW5zZm9ybWluZyB0aGUgdGVtcGxhdGUgRE9NLiBTaW5jZSBtb3N0IGRpcmVjdGl2ZXMgZG8gbm90IGRvCiAqIHRlbXBsYXRlIHRyYW5zZm9ybWF0aW9uLCBpdCBpcyBub3QgdXNlZCBvZnRlbi4gRXhhbXBsZXMgdGhhdCByZXF1aXJlIGNvbXBpbGUgZnVuY3Rpb25zIGFyZQogKiBkaXJlY3RpdmVzIHRoYXQgdHJhbnNmb3JtIHRlbXBsYXRlIERPTSwgc3VjaCBhcyB7QGxpbmsKICogYXBpL25nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0sIG9yIGxvYWQgdGhlIGNvbnRlbnRzCiAqIGFzeW5jaHJvbm91c2x5LCBzdWNoIGFzIHtAbGluayBhcGkvbmdSb3V0ZS5kaXJlY3RpdmU6bmdWaWV3IG5nVmlld30uIFRoZQogKiBjb21waWxlIGZ1bmN0aW9uIHRha2VzIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzLgogKgogKiAgICogYHRFbGVtZW50YCAtIHRlbXBsYXRlIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGhhcyBiZWVuIGRlY2xhcmVkLiBJdCBpcwogKiAgICAgc2FmZSB0byBkbyB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiBvbiB0aGUgZWxlbWVudCBhbmQgY2hpbGQgZWxlbWVudHMgb25seS4KICoKICogICAqIGB0QXR0cnNgIC0gdGVtcGxhdGUgYXR0cmlidXRlcyAtIE5vcm1hbGl6ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzIGRlY2xhcmVkIG9uIHRoaXMgZWxlbWVudCBzaGFyZWQKICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBjb21waWxlIGZ1bmN0aW9ucy4KICoKICogICAqIGB0cmFuc2NsdWRlYCAtICBbKkRFUFJFQ0FURUQqIV0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb246IGBmdW5jdGlvbihzY29wZSwgY2xvbmVMaW5raW5nRm4pYAogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC13YXJuaW5nIj4KICogKipOb3RlOioqIFRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSBhbmQgdGhlIGxpbmsgaW5zdGFuY2UgbWF5IGJlIGRpZmZlcmVudCBvYmplY3RzIGlmIHRoZSB0ZW1wbGF0ZSBoYXMKICogYmVlbiBjbG9uZWQuIEZvciB0aGlzIHJlYXNvbiBpdCBpcyAqKm5vdCoqIHNhZmUgdG8gZG8gYW55dGhpbmcgb3RoZXIgdGhhbiBET00gdHJhbnNmb3JtYXRpb25zIHRoYXQKICogYXBwbHkgdG8gYWxsIGNsb25lZCBET00gbm9kZXMgd2l0aGluIHRoZSBjb21waWxlIGZ1bmN0aW9uLiBTcGVjaWZpY2FsbHksIERPTSBsaXN0ZW5lciByZWdpc3RyYXRpb24KICogc2hvdWxkIGJlIGRvbmUgaW4gYSBsaW5raW5nIGZ1bmN0aW9uIHJhdGhlciB0aGFuIGluIGEgY29tcGlsZSBmdW5jdGlvbi4KICogPC9kaXY+CiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LWVycm9yIj4KICogKipOb3RlOioqIFRoZSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWQgdG8gdGhlIGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXQKICogICBlLmcuIGRvZXMgbm90IGtub3cgYWJvdXQgdGhlIHJpZ2h0IG91dGVyIHNjb3BlLiBQbGVhc2UgdXNlIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHRoYXQgaXMgcGFzc2VkCiAqICAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC4KICogPC9kaXY+CgogKiBBIGNvbXBpbGUgZnVuY3Rpb24gY2FuIGhhdmUgYSByZXR1cm4gdmFsdWUgd2hpY2ggY2FuIGJlIGVpdGhlciBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdC4KICoKICogKiByZXR1cm5pbmcgYSAocG9zdC1saW5rKSBmdW5jdGlvbiAtIGlzIGVxdWl2YWxlbnQgdG8gcmVnaXN0ZXJpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gdmlhIHRoZQogKiAgIGBsaW5rYCBwcm9wZXJ0eSBvZiB0aGUgY29uZmlnIG9iamVjdCB3aGVuIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGVtcHR5LgogKgogKiAqIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBmdW5jdGlvbihzKSByZWdpc3RlcmVkIHZpYSBgcHJlYCBhbmQgYHBvc3RgIHByb3BlcnRpZXMgLSBhbGxvd3MgeW91IHRvCiAqICAgY29udHJvbCB3aGVuIGEgbGlua2luZyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGR1cmluZyB0aGUgbGlua2luZyBwaGFzZS4gU2VlIGluZm8gYWJvdXQKICogICBwcmUtbGlua2luZyBhbmQgcG9zdC1saW5raW5nIGZ1bmN0aW9ucyBiZWxvdy4KICoKICoKICogIyMjIyBgbGlua2AKICogVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIG9ubHkgaWYgdGhlIGBjb21waWxlYCBwcm9wZXJ0eSBpcyBub3QgZGVmaW5lZC4KICoKICogPHByZT4KICogICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlRm4pIHsgLi4uIH0KICogPC9wcmU+CiAqCiAqIFRoZSBsaW5rIGZ1bmN0aW9uIGlzIHJlc3BvbnNpYmxlIGZvciByZWdpc3RlcmluZyBET00gbGlzdGVuZXJzIGFzIHdlbGwgYXMgdXBkYXRpbmcgdGhlIERPTS4gSXQgaXMKICogZXhlY3V0ZWQgYWZ0ZXIgdGhlIHRlbXBsYXRlIGhhcyBiZWVuIGNsb25lZC4gVGhpcyBpcyB3aGVyZSBtb3N0IG9mIHRoZSBkaXJlY3RpdmUgbG9naWMgd2lsbCBiZQogKiBwdXQuCiAqCiAqICAgKiBgc2NvcGVgIC0ge0BsaW5rIGFwaS9uZy4kcm9vdFNjb3BlLlNjb3BlIFNjb3BlfSAtIFRoZSBzY29wZSB0byBiZSB1c2VkIGJ5IHRoZQogKiAgICAgZGlyZWN0aXZlIGZvciByZWdpc3RlcmluZyB7QGxpbmsgYXBpL25nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kd2F0Y2ggd2F0Y2hlc30uCiAqCiAqICAgKiBgaUVsZW1lbnRgIC0gaW5zdGFuY2UgZWxlbWVudCAtIFRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgaXMgdG8gYmUgdXNlZC4gSXQgaXMgc2FmZSB0bwogKiAgICAgbWFuaXB1bGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQgb25seSBpbiBgcG9zdExpbmtgIGZ1bmN0aW9uIHNpbmNlIHRoZSBjaGlsZHJlbiBoYXZlCiAqICAgICBhbHJlYWR5IGJlZW4gbGlua2VkLgogKgogKiAgICogYGlBdHRyc2AgLSBpbnN0YW5jZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZAogKiAgICAgYmV0d2VlbiBhbGwgZGlyZWN0aXZlIGxpbmtpbmcgZnVuY3Rpb25zLgogKgogKiAgICogYGNvbnRyb2xsZXJgIC0gYSBjb250cm9sbGVyIGluc3RhbmNlIC0gQSBjb250cm9sbGVyIGluc3RhbmNlIGlmIGF0IGxlYXN0IG9uZSBkaXJlY3RpdmUgb24gdGhlCiAqICAgICBlbGVtZW50IGRlZmluZXMgYSBjb250cm9sbGVyLiBUaGUgY29udHJvbGxlciBpcyBzaGFyZWQgYW1vbmcgYWxsIHRoZSBkaXJlY3RpdmVzLCB3aGljaCBhbGxvd3MKICogICAgIHRoZSBkaXJlY3RpdmVzIHRvIHVzZSB0aGUgY29udHJvbGxlcnMgYXMgYSBjb21tdW5pY2F0aW9uIGNoYW5uZWwuCiAqCiAqICAgKiBgdHJhbnNjbHVkZUZuYCAtIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uIHByZS1ib3VuZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGUuCiAqICAgICBUaGUgc2NvcGUgY2FuIGJlIG92ZXJyaWRkZW4gYnkgYW4gb3B0aW9uYWwgZmlyc3QgYXJndW1lbnQuIFRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIGAkdHJhbnNjbHVkZWAKICogICAgIHBhcmFtZXRlciBvZiBkaXJlY3RpdmUgY29udHJvbGxlcnMuCiAqICAgICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4pYC4KICoKICoKICogIyMjIyBQcmUtbGlua2luZyBmdW5jdGlvbgogKgogKiBFeGVjdXRlZCBiZWZvcmUgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuIE5vdCBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBzaW5jZSB0aGUKICogY29tcGlsZXIgbGlua2luZyBmdW5jdGlvbiB3aWxsIGZhaWwgdG8gbG9jYXRlIHRoZSBjb3JyZWN0IGVsZW1lbnRzIGZvciBsaW5raW5nLgogKgogKiAjIyMjIFBvc3QtbGlua2luZyBmdW5jdGlvbgogKgogKiBFeGVjdXRlZCBhZnRlciB0aGUgY2hpbGQgZWxlbWVudHMgYXJlIGxpbmtlZC4gSXQgaXMgc2FmZSB0byBkbyBET00gdHJhbnNmb3JtYXRpb24gaW4gdGhlIHBvc3QtbGlua2luZyBmdW5jdGlvbi4KICoKICogPGEgbmFtZT0iQXR0cmlidXRlcyI+PC9hPgogKiAjIyMgQXR0cmlidXRlcwogKgogKiBUaGUge0BsaW5rIGFwaS9uZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyBBdHRyaWJ1dGVzfSBvYmplY3QgLSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIgaW4gdGhlCiAqIGBsaW5rKClgIG9yIGBjb21waWxlKClgIGZ1bmN0aW9ucy4gSXQgaGFzIGEgdmFyaWV0eSBvZiB1c2VzLgogKgogKiBhY2Nlc3NpbmcgKk5vcm1hbGl6ZWQgYXR0cmlidXRlIG5hbWVzOioKICogRGlyZWN0aXZlcyBsaWtlICduZ0JpbmQnIGNhbiBiZSBleHByZXNzZWQgaW4gbWFueSB3YXlzOiAnbmc6YmluZCcsIGBkYXRhLW5nLWJpbmRgLCBvciAneC1uZy1iaW5kJy4KICogdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFsbG93cyBmb3Igbm9ybWFsaXplZCBhY2Nlc3MgdG8KICogICB0aGUgYXR0cmlidXRlcy4KICoKICogKiAqRGlyZWN0aXZlIGludGVyLWNvbW11bmljYXRpb246KiBBbGwgZGlyZWN0aXZlcyBzaGFyZSB0aGUgc2FtZSBpbnN0YW5jZSBvZiB0aGUgYXR0cmlidXRlcwogKiAgIG9iamVjdCB3aGljaCBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gdXNlIHRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhcyBpbnRlciBkaXJlY3RpdmUKICogICBjb21tdW5pY2F0aW9uLgogKgogKiAqICpTdXBwb3J0cyBpbnRlcnBvbGF0aW9uOiogSW50ZXJwb2xhdGlvbiBhdHRyaWJ1dGVzIGFyZSBhc3NpZ25lZCB0byB0aGUgYXR0cmlidXRlIG9iamVjdAogKiAgIGFsbG93aW5nIG90aGVyIGRpcmVjdGl2ZXMgdG8gcmVhZCB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlLgogKgogKiAqICpPYnNlcnZpbmcgaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZXM6KiBVc2UgYCRvYnNlcnZlYCB0byBvYnNlcnZlIHRoZSB2YWx1ZSBjaGFuZ2VzIG9mIGF0dHJpYnV0ZXMKICogICB0aGF0IGNvbnRhaW4gaW50ZXJwb2xhdGlvbiAoZS5nLiBgc3JjPSJ7e2Jhcn19ImApLiBOb3Qgb25seSBpcyB0aGlzIHZlcnkgZWZmaWNpZW50IGJ1dCBpdCdzIGFsc28KICogICB0aGUgb25seSB3YXkgdG8gZWFzaWx5IGdldCB0aGUgYWN0dWFsIHZhbHVlIGJlY2F1c2UgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlIHRoZSBpbnRlcnBvbGF0aW9uCiAqICAgaGFzbid0IGJlZW4gZXZhbHVhdGVkIHlldCBhbmQgc28gdGhlIHZhbHVlIGlzIGF0IHRoaXMgdGltZSBzZXQgdG8gYHVuZGVmaW5lZGAuCiAqCiAqIDxwcmU+CiAqIGZ1bmN0aW9uIGxpbmtpbmdGbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkgewogKiAgIC8vIGdldCB0aGUgYXR0cmlidXRlIHZhbHVlCiAqICAgY29uc29sZS5sb2coYXR0cnMubmdNb2RlbCk7CiAqCiAqICAgLy8gY2hhbmdlIHRoZSBhdHRyaWJ1dGUKICogICBhdHRycy4kc2V0KCduZ01vZGVsJywgJ25ldyB2YWx1ZScpOwogKgogKiAgIC8vIG9ic2VydmUgY2hhbmdlcyB0byBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlCiAqICAgYXR0cnMuJG9ic2VydmUoJ25nTW9kZWwnLCBmdW5jdGlvbih2YWx1ZSkgewogKiAgICAgY29uc29sZS5sb2coJ25nTW9kZWwgaGFzIGNoYW5nZWQgdmFsdWUgdG8gJyArIHZhbHVlKTsKICogICB9KTsKICogfQogKiA8L3ByZT4KICoKICogQmVsb3cgaXMgYW4gZXhhbXBsZSB1c2luZyBgJGNvbXBpbGVQcm92aWRlcmAuCiAqCiAqIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPgogKiAqKk5vdGUqKjogVHlwaWNhbGx5IGRpcmVjdGl2ZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCBgbW9kdWxlLmRpcmVjdGl2ZWAuIFRoZSBleGFtcGxlIGJlbG93IGlzCiAqIHRvIGlsbHVzdHJhdGUgaG93IGAkY29tcGlsZWAgd29ya3MuCiAqIDwvZGl2PgogKgogPGRvYzpleGFtcGxlIG1vZHVsZT0iY29tcGlsZSI+CiAgIDxkb2M6c291cmNlPgogICAgPHNjcmlwdD4KICAgICAgYW5ndWxhci5tb2R1bGUoJ2NvbXBpbGUnLCBbXSwgZnVuY3Rpb24oJGNvbXBpbGVQcm92aWRlcikgewogICAgICAgIC8vIGNvbmZpZ3VyZSBuZXcgJ2NvbXBpbGUnIGRpcmVjdGl2ZSBieSBwYXNzaW5nIGEgZGlyZWN0aXZlCiAgICAgICAgLy8gZmFjdG9yeSBmdW5jdGlvbi4gVGhlIGZhY3RvcnkgZnVuY3Rpb24gaW5qZWN0cyB0aGUgJyRjb21waWxlJwogICAgICAgICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCdjb21waWxlJywgZnVuY3Rpb24oJGNvbXBpbGUpIHsKICAgICAgICAgIC8vIGRpcmVjdGl2ZSBmYWN0b3J5IGNyZWF0ZXMgYSBsaW5rIGZ1bmN0aW9uCiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7CiAgICAgICAgICAgIHNjb3BlLiR3YXRjaCgKICAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSkgewogICAgICAgICAgICAgICAgIC8vIHdhdGNoIHRoZSAnY29tcGlsZScgZXhwcmVzc2lvbiBmb3IgY2hhbmdlcwogICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiRldmFsKGF0dHJzLmNvbXBpbGUpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlICdjb21waWxlJyBleHByZXNzaW9uIGNoYW5nZXMKICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBpdCBpbnRvIHRoZSBjdXJyZW50IERPTQogICAgICAgICAgICAgICAgZWxlbWVudC5odG1sKHZhbHVlKTsKCiAgICAgICAgICAgICAgICAvLyBjb21waWxlIHRoZSBuZXcgRE9NIGFuZCBsaW5rIGl0IHRvIHRoZSBjdXJyZW50CiAgICAgICAgICAgICAgICAvLyBzY29wZS4KICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIG9ubHkgY29tcGlsZSAuY2hpbGROb2RlcyBzbyB0aGF0CiAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBnZXQgaW50byBpbmZpbml0ZSBsb29wIGNvbXBpbGluZyBvdXJzZWx2ZXMKICAgICAgICAgICAgICAgICRjb21waWxlKGVsZW1lbnQuY29udGVudHMoKSkoc2NvcGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICAgIH07CiAgICAgICAgfSkKICAgICAgfSk7CgogICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICRzY29wZS5uYW1lID0gJ0FuZ3VsYXInOwogICAgICAgICRzY29wZS5odG1sID0gJ0hlbGxvIHt7bmFtZX19JzsKICAgICAgfQogICAgPC9zY3JpcHQ+CiAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICA8aW5wdXQgbmctbW9kZWw9Im5hbWUiPiA8YnI+CiAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD0iaHRtbCI+PC90ZXh0YXJlYT4gPGJyPgogICAgICA8ZGl2IGNvbXBpbGU9Imh0bWwiPjwvZGl2PgogICAgPC9kaXY+CiAgIDwvZG9jOnNvdXJjZT4KICAgPGRvYzpzY2VuYXJpbz4KICAgICBpdCgnc2hvdWxkIGF1dG8gY29tcGlsZScsIGZ1bmN0aW9uKCkgewogICAgICAgZXhwZWN0KGVsZW1lbnQoJ2Rpdltjb21waWxlXScpLnRleHQoKSkudG9CZSgnSGVsbG8gQW5ndWxhcicpOwogICAgICAgaW5wdXQoJ2h0bWwnKS5lbnRlcigne3tuYW1lfX0hJyk7CiAgICAgICBleHBlY3QoZWxlbWVudCgnZGl2W2NvbXBpbGVdJykudGV4dCgpKS50b0JlKCdBbmd1bGFyIScpOwogICAgIH0pOwogICA8L2RvYzpzY2VuYXJpbz4KIDwvZG9jOmV4YW1wbGU+CgogKgogKgogKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgdG8gY29tcGlsZSBpbnRvIGEgdGVtcGxhdGUgZnVuY3Rpb24uCiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZVssIGNsb25lQXR0YWNoRm5dfSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzLgogKiBAcGFyYW0ge251bWJlcn0gbWF4UHJpb3JpdHkgb25seSBhcHBseSBkaXJlY3RpdmVzIGxvd2VyIHRoZW4gZ2l2ZW4gcHJpb3JpdHkgKE9ubHkgZWZmZWN0cyB0aGUKICogICAgICAgICAgICAgICAgIHJvb3QgZWxlbWVudChzKSwgbm90IHRoZWlyIGNoaWxkcmVuKQogKiBAcmV0dXJucyB7ZnVuY3Rpb24oc2NvcGVbLCBjbG9uZUF0dGFjaEZuXSl9IGEgbGluayBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIGJpbmQgdGVtcGxhdGUKICogKGEgRE9NIGVsZW1lbnQvdHJlZSkgdG8gYSBzY29wZS4gV2hlcmU6CiAqCiAqICAqIGBzY29wZWAgLSBBIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIFNjb3BlfSB0byBiaW5kIHRvLgogKiAgKiBgY2xvbmVBdHRhY2hGbmAgLSBJZiBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGxpbmsgZnVuY3Rpb24gd2lsbCBjbG9uZSB0aGUKICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGUKICogIGNsb25lZCBlbGVtZW50cyB0byB0aGUgRE9NIGRvY3VtZW50IGF0IHRoZSBhcHByb3ByaWF0ZSBwbGFjZS4gVGhlIGBjbG9uZUF0dGFjaEZuYCBpcwogKiAgY2FsbGVkIGFzOiA8YnI+IGBjbG9uZUF0dGFjaEZuKGNsb25lZEVsZW1lbnQsIHNjb3BlKWAgd2hlcmU6CiAqCiAqICAgICAgKiBgY2xvbmVkRWxlbWVudGAgLSBpcyBhIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBgZWxlbWVudGAgcGFzc2VkIGludG8gdGhlIGNvbXBpbGVyLgogKiAgICAgICogYHNjb3BlYCAtIGlzIHRoZSBjdXJyZW50IHNjb3BlIHdpdGggd2hpY2ggdGhlIGxpbmtpbmcgZnVuY3Rpb24gaXMgd29ya2luZyB3aXRoLgogKgogKiBDYWxsaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHRlbXBsYXRlLiBJdCBpcyBlaXRoZXIgdGhlIG9yaWdpbmFsCiAqIGVsZW1lbnQgcGFzc2VkIGluLCBvciB0aGUgY2xvbmUgb2YgdGhlIGVsZW1lbnQgaWYgdGhlIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZC4KICoKICogQWZ0ZXIgbGlua2luZyB0aGUgdmlldyBpcyBub3QgdXBkYXRlZCB1bnRpbCBhZnRlciBhIGNhbGwgdG8gJGRpZ2VzdCB3aGljaCB0eXBpY2FsbHkgaXMgZG9uZSBieQogKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkuCiAqCiAqIElmIHlvdSBuZWVkIGFjY2VzcyB0byB0aGUgYm91bmQgdmlldywgdGhlcmUgYXJlIHR3byB3YXlzIHRvIGRvIGl0OgogKgogKiAtIElmIHlvdSBhcmUgbm90IGFza2luZyB0aGUgbGlua2luZyBmdW5jdGlvbiB0byBjbG9uZSB0aGUgdGVtcGxhdGUsIGNyZWF0ZSB0aGUgRE9NIGVsZW1lbnQocykKICogICBiZWZvcmUgeW91IHNlbmQgdGhlbSB0byB0aGUgY29tcGlsZXIgYW5kIGtlZXAgdGhpcyByZWZlcmVuY2UgYXJvdW5kLgogKiAgIDxwcmU+CiAqICAgICB2YXIgZWxlbWVudCA9ICRjb21waWxlKCc8cD57e3RvdGFsfX08L3A+Jykoc2NvcGUpOwogKiAgIDwvcHJlPgogKgogKiAtIGlmIG9uIHRoZSBvdGhlciBoYW5kLCB5b3UgbmVlZCB0aGUgZWxlbWVudCB0byBiZSBjbG9uZWQsIHRoZSB2aWV3IHJlZmVyZW5jZSBmcm9tIHRoZSBvcmlnaW5hbAogKiAgIGV4YW1wbGUgd291bGQgbm90IHBvaW50IHRvIHRoZSBjbG9uZSwgYnV0IHJhdGhlciB0byB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdGhhdCB3YXMgY2xvbmVkLiBJbgogKiAgIHRoaXMgY2FzZSwgeW91IGNhbiBhY2Nlc3MgdGhlIGNsb25lIHZpYSB0aGUgY2xvbmVBdHRhY2hGbjoKICogICA8cHJlPgogKiAgICAgdmFyIHRlbXBsYXRlRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgnPHA+e3t0b3RhbH19PC9wPicpLAogKiAgICAgICAgIHNjb3BlID0gLi4uLjsKICoKICogICAgIHZhciBjbG9uZWRFbGVtZW50ID0gJGNvbXBpbGUodGVtcGxhdGVFbGVtZW50KShzY29wZSwgZnVuY3Rpb24oY2xvbmVkRWxlbWVudCwgc2NvcGUpIHsKICogICAgICAgLy9hdHRhY2ggdGhlIGNsb25lIHRvIERPTSBkb2N1bWVudCBhdCB0aGUgcmlnaHQgcGxhY2UKICogICAgIH0pOwogKgogKiAgICAgLy9ub3cgd2UgaGF2ZSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBET00gdmlhIGBjbG9uZWRFbGVtZW50YAogKiAgIDwvcHJlPgogKgogKgogKiBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRoZSBjb21waWxlciB3b3Jrcywgc2VlIHRoZQogKiB7QGxpbmsgZ3VpZGUvY29tcGlsZXIgQW5ndWxhciBIVE1MIENvbXBpbGVyfSBzZWN0aW9uIG9mIHRoZSBEZXZlbG9wZXIgR3VpZGUuCiAqLwoKdmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpOwoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lIG5nLiRjb21waWxlUHJvdmlkZXIKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKi8KJENvbXBpbGVQcm92aWRlci4kaW5qZWN0ID0gWyckcHJvdmlkZScsICckJHNhbml0aXplVXJpUHJvdmlkZXInXTsKZnVuY3Rpb24gJENvbXBpbGVQcm92aWRlcigkcHJvdmlkZSwgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyKSB7CiAgdmFyIGhhc0RpcmVjdGl2ZXMgPSB7fSwKICAgICAgU3VmZml4ID0gJ0RpcmVjdGl2ZScsCiAgICAgIENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCA9IC9eXHMqZGlyZWN0aXZlXDpccyooW1xkXHdcLV9dKylccysoLiopJC8sCiAgICAgIENMQVNTX0RJUkVDVElWRV9SRUdFWFAgPSAvKChbXGRcd1wtX10rKSg/Olw6KFteO10rKSk/Oz8pLzsKCiAgLy8gUmVmOiBodHRwOi8vZGV2ZWxvcGVycy53aGF0d2cub3JnL3dlYmFwcGFwaXMuaHRtbCNldmVudC1oYW5kbGVyLWlkbC1hdHRyaWJ1dGVzCiAgLy8gVGhlIGFzc3VtcHRpb24gaXMgdGhhdCBmdXR1cmUgRE9NIGV2ZW50IGF0dHJpYnV0ZSBuYW1lcyB3aWxsIGJlZ2luIHdpdGgKICAvLyAnb24nIGFuZCBiZSBjb21wb3NlZCBvZiBvbmx5IEVuZ2xpc2ggbGV0dGVycy4KICB2YXIgRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCA9IC9eKG9uW2Etel0rfGZvcm1hY3Rpb24pJC87CgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlCiAgICogQG1ldGhvZE9mIG5nLiRjb21waWxlUHJvdmlkZXIKICAgKiBAZnVuY3Rpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJlZ2lzdGVyIGEgbmV3IGRpcmVjdGl2ZSB3aXRoIHRoZSBjb21waWxlci4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBkaXJlY3RpdmUgaW4gY2FtZWwtY2FzZSAoaS5lLiA8Y29kZT5uZ0JpbmQ8L2NvZGU+IHdoaWNoCiAgICogICAgd2lsbCBtYXRjaCBhcyA8Y29kZT5uZy1iaW5kPC9jb2RlPiksIG9yIGFuIG9iamVjdCBtYXAgb2YgZGlyZWN0aXZlcyB3aGVyZSB0aGUga2V5cyBhcmUgdGhlCiAgICogICAgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuCiAgICogQHBhcmFtIHtmdW5jdGlvbnxBcnJheX0gZGlyZWN0aXZlRmFjdG9yeSBBbiBpbmplY3RhYmxlIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uLiBTZWUKICAgKiAgICB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlfSBmb3IgbW9yZSBpbmZvLgogICAqIEByZXR1cm5zIHtuZy4kY29tcGlsZVByb3ZpZGVyfSBTZWxmIGZvciBjaGFpbmluZy4KICAgKi8KICAgdGhpcy5kaXJlY3RpdmUgPSBmdW5jdGlvbiByZWdpc3RlckRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmVGYWN0b3J5KSB7CiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnZGlyZWN0aXZlJyk7CiAgICBpZiAoaXNTdHJpbmcobmFtZSkpIHsKICAgICAgYXNzZXJ0QXJnKGRpcmVjdGl2ZUZhY3RvcnksICdkaXJlY3RpdmVGYWN0b3J5Jyk7CiAgICAgIGlmICghaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0gPSBbXTsKICAgICAgICAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBTdWZmaXgsIFsnJGluamVjdG9yJywgJyRleGNlcHRpb25IYW5kbGVyJywKICAgICAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHsKICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZXMgPSBbXTsKICAgICAgICAgICAgZm9yRWFjaChoYXNEaXJlY3RpdmVzW25hbWVdLCBmdW5jdGlvbihkaXJlY3RpdmVGYWN0b3J5LCBpbmRleCkgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gJGluamVjdG9yLmludm9rZShkaXJlY3RpdmVGYWN0b3J5KTsKICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcmVjdGl2ZSkpIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlID0geyBjb21waWxlOiB2YWx1ZUZuKGRpcmVjdGl2ZSkgfTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRpcmVjdGl2ZS5jb21waWxlICYmIGRpcmVjdGl2ZS5saW5rKSB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5jb21waWxlID0gdmFsdWVGbihkaXJlY3RpdmUubGluayk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHkgfHwgMDsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5pbmRleCA9IGluZGV4OwogICAgICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUgPSBkaXJlY3RpdmUubmFtZSB8fCBuYW1lOwogICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZSB8fCAoZGlyZWN0aXZlLmNvbnRyb2xsZXIgJiYgZGlyZWN0aXZlLm5hbWUpOwogICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZGlyZWN0aXZlLnJlc3RyaWN0IHx8ICdBJzsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBkaXJlY3RpdmVzOwogICAgICAgICAgfV0pOwogICAgICB9CiAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0ucHVzaChkaXJlY3RpdmVGYWN0b3J5KTsKICAgIH0gZWxzZSB7CiAgICAgIGZvckVhY2gobmFtZSwgcmV2ZXJzZVBhcmFtcyhyZWdpc3RlckRpcmVjdGl2ZSkpOwogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfTsKCgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLiRjb21waWxlUHJvdmlkZXIjYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QKICAgKiBAbWV0aG9kT2YgbmcuJGNvbXBpbGVQcm92aWRlcgogICAqIEBmdW5jdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZQogICAqIHVybHMgZHVyaW5nIGFbaHJlZl0gc2FuaXRpemF0aW9uLgogICAqCiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy4KICAgKgogICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gYVtocmVmXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvCiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YAogICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLAogICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS4KICAgKgogICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC4KICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yCiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLgogICAqLwogIHRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHsKICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkgewogICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QocmVnZXhwKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7CiAgICB9CiAgfTsKCgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLiRjb21waWxlUHJvdmlkZXIjaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0CiAgICogQG1ldGhvZE9mIG5nLiRjb21waWxlUHJvdmlkZXIKICAgKiBAZnVuY3Rpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmUKICAgKiB1cmxzIGR1cmluZyBpbWdbc3JjXSBzYW5pdGl6YXRpb24uCiAgICoKICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50IFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLgogICAqCiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvCiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdGAKICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSwKICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uCiAgICoKICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguCiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvcgogICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS4KICAgKi8KICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkgewogICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7CiAgICAgICQkc2FuaXRpemVVcmlQcm92aWRlci5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QocmVnZXhwKTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCgpOwogICAgfQogIH07CgogIHRoaXMuJGdldCA9IFsKICAgICAgICAgICAgJyRpbmplY3RvcicsICckaW50ZXJwb2xhdGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJHBhcnNlJywKICAgICAgICAgICAgJyRjb250cm9sbGVyJywgJyRyb290U2NvcGUnLCAnJGRvY3VtZW50JywgJyRzY2UnLCAnJGFuaW1hdGUnLCAnJCRzYW5pdGl6ZVVyaScsCiAgICBmdW5jdGlvbigkaW5qZWN0b3IsICAgJGludGVycG9sYXRlLCAgICRleGNlcHRpb25IYW5kbGVyLCAgICRodHRwLCAgICR0ZW1wbGF0ZUNhY2hlLCAgICRwYXJzZSwKICAgICAgICAgICAgICRjb250cm9sbGVyLCAgICRyb290U2NvcGUsICAgJGRvY3VtZW50LCAgICRzY2UsICAgJGFuaW1hdGUsICAgJCRzYW5pdGl6ZVVyaSkgewoKICAgIHZhciBBdHRyaWJ1dGVzID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cikgewogICAgICB0aGlzLiQkZWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgIHRoaXMuJGF0dHIgPSBhdHRyIHx8IHt9OwogICAgfTsKCiAgICBBdHRyaWJ1dGVzLnByb3RvdHlwZSA9IHsKICAgICAgJG5vcm1hbGl6ZTogZGlyZWN0aXZlTm9ybWFsaXplLAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGFkZENsYXNzCiAgICAgICAqIEBtZXRob2RPZiBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcwogICAgICAgKiBAZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIEFkZHMgdGhlIENTUyBjbGFzcyB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNsYXNzVmFsIHBhcmFtZXRlciB0byB0aGUgZWxlbWVudC4gSWYgYW5pbWF0aW9ucwogICAgICAgKiBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIGFkZGl0aW9uLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQKICAgICAgICovCiAgICAgICRhZGRDbGFzcyA6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7CiAgICAgICAgaWYoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkgewogICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTsKICAgICAgICB9CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRyZW1vdmVDbGFzcwogICAgICAgKiBAbWV0aG9kT2YgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBSZW1vdmVzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgZnJvbSB0aGUgZWxlbWVudC4gSWYKICAgICAgICogYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIHJlbW92YWwuCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQKICAgICAgICovCiAgICAgICRyZW1vdmVDbGFzcyA6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7CiAgICAgICAgaWYoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkgewogICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTsKICAgICAgICB9CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyR1cGRhdGVDbGFzcwogICAgICAgKiBAbWV0aG9kT2YgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBBZGRzIGFuZCByZW1vdmVzIHRoZSBhcHByb3ByaWF0ZSBDU1MgY2xhc3MgdmFsdWVzIHRvIHRoZSBlbGVtZW50IGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlCiAgICAgICAqIGJldHdlZW4gdGhlIG5ldyBhbmQgb2xkIENTUyBjbGFzcyB2YWx1ZXMgKHNwZWNpZmllZCBhcyBuZXdDbGFzc2VzIGFuZCBvbGRDbGFzc2VzKS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0NsYXNzZXMgVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSB2YWx1ZQogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkQ2xhc3NlcyBUaGUgZm9ybWVyIENTUyBjbGFzc05hbWUgdmFsdWUKICAgICAgICovCiAgICAgICR1cGRhdGVDbGFzcyA6IGZ1bmN0aW9uKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpIHsKICAgICAgICB0aGlzLiRyZW1vdmVDbGFzcyh0b2tlbkRpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3NlcykpOwogICAgICAgIHRoaXMuJGFkZENsYXNzKHRva2VuRGlmZmVyZW5jZShuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKSk7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogU2V0IGEgbm9ybWFsaXplZCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaW4gYSB3YXkgc3VjaCB0aGF0IGFsbCBkaXJlY3RpdmVzCiAgICAgICAqIGNhbiBzaGFyZSB0aGUgYXR0cmlidXRlLiBUaGlzIGZ1bmN0aW9uIHByb3Blcmx5IGhhbmRsZXMgYm9vbGVhbiBhdHRyaWJ1dGVzLgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpCiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuIElmIGBudWxsYCBhdHRyaWJ1dGUgd2lsbCBiZSBkZWxldGVkLgogICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB3cml0ZUF0dHIgSWYgZmFsc2UsIGRvZXMgbm90IHdyaXRlIHRoZSB2YWx1ZSB0byBET00gZWxlbWVudCBhdHRyaWJ1dGUuCiAgICAgICAqICAgICBEZWZhdWx0cyB0byB0cnVlLgogICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJOYW1lIE9wdGlvbmFsIG5vbmUgbm9ybWFsaXplZCBuYW1lLiBEZWZhdWx0cyB0byBrZXkuCiAgICAgICAqLwogICAgICAkc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlLCB3cml0ZUF0dHIsIGF0dHJOYW1lKSB7CiAgICAgICAgLy8gVE9ETzogZGVjaWRlIHdoZXRoZXIgb3Igbm90IHRvIHRocm93IGFuIGVycm9yIGlmICJjbGFzcyIKICAgICAgICAvL2lzIHNldCB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc2luY2UgaXQgbWF5IGNhdXNlICR1cGRhdGVDbGFzcyB0bwogICAgICAgIC8vYmVjb21lIHVuc3RhYmxlLgoKICAgICAgICB2YXIgYm9vbGVhbktleSA9IGdldEJvb2xlYW5BdHRyTmFtZSh0aGlzLiQkZWxlbWVudFswXSwga2V5KSwKICAgICAgICAgICAgbm9ybWFsaXplZFZhbCwKICAgICAgICAgICAgbm9kZU5hbWU7CgogICAgICAgIGlmIChib29sZWFuS2V5KSB7CiAgICAgICAgICB0aGlzLiQkZWxlbWVudC5wcm9wKGtleSwgdmFsdWUpOwogICAgICAgICAgYXR0ck5hbWUgPSBib29sZWFuS2V5OwogICAgICAgIH0KCiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7CgogICAgICAgIC8vIHRyYW5zbGF0ZSBub3JtYWxpemVkIGtleSB0byBhY3R1YWwga2V5CiAgICAgICAgaWYgKGF0dHJOYW1lKSB7CiAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYXR0ck5hbWUgPSB0aGlzLiRhdHRyW2tleV07CiAgICAgICAgICBpZiAoIWF0dHJOYW1lKSB7CiAgICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lID0gc25ha2VfY2FzZShrZXksICctJyk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBub2RlTmFtZSA9IG5vZGVOYW1lXyh0aGlzLiQkZWxlbWVudCk7CgogICAgICAgIC8vIHNhbml0aXplIGFbaHJlZl0gYW5kIGltZ1tzcmNdIHZhbHVlcwogICAgICAgIGlmICgobm9kZU5hbWUgPT09ICdBJyAmJiBrZXkgPT09ICdocmVmJykgfHwKICAgICAgICAgICAgKG5vZGVOYW1lID09PSAnSU1HJyAmJiBrZXkgPT09ICdzcmMnKSkgewogICAgICAgICAgdGhpc1trZXldID0gdmFsdWUgPSAkJHNhbml0aXplVXJpKHZhbHVlLCBrZXkgPT09ICdzcmMnKTsKICAgICAgICB9CgogICAgICAgIGlmICh3cml0ZUF0dHIgIT09IGZhbHNlKSB7CiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5yZW1vdmVBdHRyKGF0dHJOYW1lKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LmF0dHIoYXR0ck5hbWUsIHZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIGZpcmUgb2JzZXJ2ZXJzCiAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gdGhpcy4kJG9ic2VydmVyczsKICAgICAgICAkJG9ic2VydmVycyAmJiBmb3JFYWNoKCQkb2JzZXJ2ZXJzW2tleV0sIGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBmbih2YWx1ZSk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9LAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJG9ic2VydmUKICAgICAgICogQG1ldGhvZE9mIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogT2JzZXJ2ZXMgYW4gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZS4KICAgICAgICoKICAgICAgICogVGhlIG9ic2VydmVyIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGR1cmluZyB0aGUgbmV4dCBgJGRpZ2VzdGAgZm9sbG93aW5nCiAgICAgICAqIGNvbXBpbGF0aW9uLiBUaGUgb2JzZXJ2ZXIgaXMgdGhlbiBpbnZva2VkIHdoZW5ldmVyIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUKICAgICAgICogY2hhbmdlcy4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKSAuCiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oaW50ZXJwb2xhdGVkVmFsdWUpfSBmbiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyCiAgICAgICAgICAgICAgICB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgY2hhbmdlcy4KICAgICAgICogICAgICAgIFNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNBdHRyaWJ1dGVzIERpcmVjdGl2ZXN9IGd1aWRlIGZvciBtb3JlIGluZm8uCiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSB0aGUgYGZuYCBwYXJhbWV0ZXIuCiAgICAgICAqLwogICAgICAkb2JzZXJ2ZTogZnVuY3Rpb24oa2V5LCBmbikgewogICAgICAgIHZhciBhdHRycyA9IHRoaXMsCiAgICAgICAgICAgICQkb2JzZXJ2ZXJzID0gKGF0dHJzLiQkb2JzZXJ2ZXJzIHx8IChhdHRycy4kJG9ic2VydmVycyA9IHt9KSksCiAgICAgICAgICAgIGxpc3RlbmVycyA9ICgkJG9ic2VydmVyc1trZXldIHx8ICgkJG9ic2VydmVyc1trZXldID0gW10pKTsKCiAgICAgICAgbGlzdGVuZXJzLnB1c2goZm4pOwogICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICghbGlzdGVuZXJzLiQkaW50ZXIpIHsKICAgICAgICAgICAgLy8gbm8gb25lIHJlZ2lzdGVyZWQgYXR0cmlidXRlIGludGVycG9sYXRpb24gZnVuY3Rpb24sIHNvIGxldHMgY2FsbCBpdCBtYW51YWxseQogICAgICAgICAgICBmbihhdHRyc1trZXldKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZm47CiAgICAgIH0KICAgIH07CgogICAgdmFyIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksCiAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLAogICAgICAgIGRlbm9ybWFsaXplVGVtcGxhdGUgPSAoc3RhcnRTeW1ib2wgPT0gJ3t7JyB8fCBlbmRTeW1ib2wgID09ICd9fScpCiAgICAgICAgICAgID8gaWRlbnRpdHkKICAgICAgICAgICAgOiBmdW5jdGlvbiBkZW5vcm1hbGl6ZVRlbXBsYXRlKHRlbXBsYXRlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1x7XHsvZywgc3RhcnRTeW1ib2wpLnJlcGxhY2UoL319L2csIGVuZFN5bWJvbCk7CiAgICAgICAgfSwKICAgICAgICBOR19BVFRSX0JJTkRJTkcgPSAvXm5nQXR0cltBLVpdLzsKCgogICAgcmV0dXJuIGNvbXBpbGU7CgogICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKICAgIGZ1bmN0aW9uIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLAogICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7CiAgICAgIGlmICghKCRjb21waWxlTm9kZXMgaW5zdGFuY2VvZiBqcUxpdGUpKSB7CiAgICAgICAgLy8ganF1ZXJ5IGFsd2F5cyByZXdyYXBzLCB3aGVyZWFzIHdlIG5lZWQgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHNlbGVjdG9yIHNvIHRoYXQgd2UgY2FuCiAgICAgICAgLy8gbW9kaWZ5IGl0LgogICAgICAgICRjb21waWxlTm9kZXMgPSBqcUxpdGUoJGNvbXBpbGVOb2Rlcyk7CiAgICAgIH0KICAgICAgLy8gV2UgY2FuIG5vdCBjb21waWxlIHRvcCBsZXZlbCB0ZXh0IGVsZW1lbnRzIHNpbmNlIHRleHQgbm9kZXMgY2FuIGJlIG1lcmdlZCBhbmQgd2Ugd2lsbAogICAgICAvLyBub3QgYmUgYWJsZSB0byBhdHRhY2ggc2NvcGUgZGF0YSB0byB0aGVtLCBzbyB3ZSB3aWxsIHdyYXAgdGhlbSBpbiA8c3Bhbj4KICAgICAgZm9yRWFjaCgkY29tcGlsZU5vZGVzLCBmdW5jdGlvbihub2RlLCBpbmRleCl7CiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyAvKiB0ZXh0IG5vZGUgKi8gJiYgbm9kZS5ub2RlVmFsdWUubWF0Y2goL1xTKy8pIC8qIG5vbi1lbXB0eSAqLyApIHsKICAgICAgICAgICRjb21waWxlTm9kZXNbaW5kZXhdID0gbm9kZSA9IGpxTGl0ZShub2RlKS53cmFwKCc8c3Bhbj48L3NwYW4+JykucGFyZW50KClbMF07CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdmFyIGNvbXBvc2l0ZUxpbmtGbiA9CiAgICAgICAgICAgICAgY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7CiAgICAgIHNhZmVBZGRDbGFzcygkY29tcGlsZU5vZGVzLCAnbmctc2NvcGUnKTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uIHB1YmxpY0xpbmtGbihzY29wZSwgY2xvbmVDb25uZWN0Rm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycyl7CiAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTsKICAgICAgICAvLyBpbXBvcnRhbnQhITogd2UgbXVzdCBjYWxsIG91ciBqcUxpdGUuY2xvbmUoKSBzaW5jZSB0aGUgalF1ZXJ5IG9uZSBpcyB0cnlpbmcgdG8gYmUgc21hcnQKICAgICAgICAvLyBhbmQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgRE9NLgogICAgICAgIHZhciAkbGlua05vZGUgPSBjbG9uZUNvbm5lY3RGbgogICAgICAgICAgPyBKUUxpdGVQcm90b3R5cGUuY2xvbmUuY2FsbCgkY29tcGlsZU5vZGVzKSAvLyBJTVBPUlRBTlQhISEKICAgICAgICAgIDogJGNvbXBpbGVOb2RlczsKCiAgICAgICAgZm9yRWFjaCh0cmFuc2NsdWRlQ29udHJvbGxlcnMsIGZ1bmN0aW9uKGluc3RhbmNlLCBuYW1lKSB7CiAgICAgICAgICAkbGlua05vZGUuZGF0YSgnJCcgKyBuYW1lICsgJ0NvbnRyb2xsZXInLCBpbnN0YW5jZSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIEF0dGFjaCBzY29wZSBvbmx5IHRvIG5vbi10ZXh0IG5vZGVzLgogICAgICAgIGZvcih2YXIgaSA9IDAsIGlpID0gJGxpbmtOb2RlLmxlbmd0aDsgaTxpaTsgaSsrKSB7CiAgICAgICAgICB2YXIgbm9kZSA9ICRsaW5rTm9kZVtpXSwKICAgICAgICAgICAgICBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7CiAgICAgICAgICBpZiAobm9kZVR5cGUgPT09IDEgLyogZWxlbWVudCAqLyB8fCBub2RlVHlwZSA9PT0gOSAvKiBkb2N1bWVudCAqLykgewogICAgICAgICAgICAkbGlua05vZGUuZXEoaSkuZGF0YSgnJHNjb3BlJywgc2NvcGUpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGNsb25lQ29ubmVjdEZuKSBjbG9uZUNvbm5lY3RGbigkbGlua05vZGUsIHNjb3BlKTsKICAgICAgICBpZiAoY29tcG9zaXRlTGlua0ZuKSBjb21wb3NpdGVMaW5rRm4oc2NvcGUsICRsaW5rTm9kZSwgJGxpbmtOb2RlKTsKICAgICAgICByZXR1cm4gJGxpbmtOb2RlOwogICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgY2xhc3NOYW1lKSB7CiAgICAgIHRyeSB7CiAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoY2xhc3NOYW1lKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgLy8gaWdub3JlLCBzaW5jZSBpdCBtZWFucyB0aGF0IHdlIGFyZSB0cnlpbmcgdG8gc2V0IGNsYXNzIG9uCiAgICAgICAgLy8gU1ZHIGVsZW1lbnQsIHdoZXJlIGNsYXNzIG5hbWUgaXMgcmVhZC1vbmx5LgogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBDb21waWxlIGZ1bmN0aW9uIG1hdGNoZXMgZWFjaCBub2RlIGluIG5vZGVMaXN0IGFnYWluc3QgdGhlIGRpcmVjdGl2ZXMuIE9uY2UgYWxsIGRpcmVjdGl2ZXMKICAgICAqIGZvciBhIHBhcnRpY3VsYXIgbm9kZSBhcmUgY29sbGVjdGVkIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGFyZSBleGVjdXRlZC4gVGhlIGNvbXBpbGUKICAgICAqIGZ1bmN0aW9ucyByZXR1cm4gdmFsdWVzIC0gdGhlIGxpbmtpbmcgZnVuY3Rpb25zIC0gYXJlIGNvbWJpbmVkIGludG8gYSBjb21wb3NpdGUgbGlua2luZwogICAgICogZnVuY3Rpb24sIHdoaWNoIGlzIHRoZSBhIGxpbmtpbmcgZnVuY3Rpb24gZm9yIHRoZSBub2RlLgogICAgICoKICAgICAqIEBwYXJhbSB7Tm9kZUxpc3R9IG5vZGVMaXN0IGFuIGFycmF5IG9mIG5vZGVzIG9yIE5vZGVMaXN0IHRvIGNvbXBpbGUKICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZVssIGNsb25lQXR0YWNoRm5dfSB0cmFuc2NsdWRlRm4gQSBsaW5raW5nIGZ1bmN0aW9uLCB3aGVyZSB0aGUKICAgICAqICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3IGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuCiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSAkcm9vdEVsZW1lbnQgSWYgdGhlIG5vZGVMaXN0IGlzIHRoZSByb290IG9mIHRoZSBjb21waWxhdGlvbiB0cmVlIHRoZW4KICAgICAqICAgICAgICB0aGUgcm9vdEVsZW1lbnQgbXVzdCBiZSBzZXQgdGhlIGpxTGl0ZSBjb2xsZWN0aW9uIG9mIHRoZSBjb21waWxlIHJvb3QuIFRoaXMgaXMKICAgICAqICAgICAgICBuZWVkZWQgc28gdGhhdCB0aGUganFMaXRlIGNvbGxlY3Rpb24gaXRlbXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggd2lkZ2V0cy4KICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS4KICAgICAqIEByZXR1cm5zIHs/ZnVuY3Rpb259IEEgY29tcG9zaXRlIGxpbmtpbmcgZnVuY3Rpb24gb2YgYWxsIG9mIHRoZSBtYXRjaGVkIGRpcmVjdGl2ZXMgb3IgbnVsbC4KICAgICAqLwogICAgZnVuY3Rpb24gY29tcGlsZU5vZGVzKG5vZGVMaXN0LCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHsKICAgICAgdmFyIGxpbmtGbnMgPSBbXSwKICAgICAgICAgIGF0dHJzLCBkaXJlY3RpdmVzLCBub2RlTGlua0ZuLCBjaGlsZE5vZGVzLCBjaGlsZExpbmtGbiwgbGlua0ZuRm91bmQ7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgYXR0cnMgPSBuZXcgQXR0cmlidXRlcygpOwoKICAgICAgICAvLyB3ZSBtdXN0IGFsd2F5cyByZWZlciB0byBub2RlTGlzdFtpXSBzaW5jZSB0aGUgbm9kZXMgY2FuIGJlIHJlcGxhY2VkIHVuZGVybmVhdGggdXMuCiAgICAgICAgZGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKG5vZGVMaXN0W2ldLCBbXSwgYXR0cnMsIGkgPT09IDAgPyBtYXhQcmlvcml0eSA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZURpcmVjdGl2ZSk7CgogICAgICAgIG5vZGVMaW5rRm4gPSAoZGlyZWN0aXZlcy5sZW5ndGgpCiAgICAgICAgICAgID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgW10sIFtdLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KQogICAgICAgICAgICA6IG51bGw7CgogICAgICAgIGlmIChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4uc2NvcGUpIHsKICAgICAgICAgIHNhZmVBZGRDbGFzcyhqcUxpdGUobm9kZUxpc3RbaV0pLCAnbmctc2NvcGUnKTsKICAgICAgICB9CgogICAgICAgIGNoaWxkTGlua0ZuID0gKG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi50ZXJtaW5hbCB8fAogICAgICAgICAgICAgICAgICAgICAgIShjaGlsZE5vZGVzID0gbm9kZUxpc3RbaV0uY2hpbGROb2RlcykgfHwKICAgICAgICAgICAgICAgICAgICAgICFjaGlsZE5vZGVzLmxlbmd0aCkKICAgICAgICAgICAgPyBudWxsCiAgICAgICAgICAgIDogY29tcGlsZU5vZGVzKGNoaWxkTm9kZXMsCiAgICAgICAgICAgICAgICAgbm9kZUxpbmtGbiA/IG5vZGVMaW5rRm4udHJhbnNjbHVkZSA6IHRyYW5zY2x1ZGVGbik7CgogICAgICAgIGxpbmtGbnMucHVzaChub2RlTGlua0ZuLCBjaGlsZExpbmtGbik7CiAgICAgICAgbGlua0ZuRm91bmQgPSBsaW5rRm5Gb3VuZCB8fCBub2RlTGlua0ZuIHx8IGNoaWxkTGlua0ZuOwogICAgICAgIC8vdXNlIHRoZSBwcmV2aW91cyBjb250ZXh0IG9ubHkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSB2aXJ0dWFsIGdyb3VwCiAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IG51bGw7CiAgICAgIH0KCiAgICAgIC8vIHJldHVybiBhIGxpbmtpbmcgZnVuY3Rpb24gaWYgd2UgaGF2ZSBmb3VuZCBhbnl0aGluZywgbnVsbCBvdGhlcndpc2UKICAgICAgcmV0dXJuIGxpbmtGbkZvdW5kID8gY29tcG9zaXRlTGlua0ZuIDogbnVsbDsKCiAgICAgIGZ1bmN0aW9uIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgbm9kZUxpc3QsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHsKICAgICAgICB2YXIgbm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4sIG5vZGUsICRub2RlLCBjaGlsZFNjb3BlLCBjaGlsZFRyYW5zY2x1ZGVGbiwgaSwgaWksIG47CgogICAgICAgIC8vIGNvcHkgbm9kZUxpc3Qgc28gdGhhdCBsaW5raW5nIGRvZXNuJ3QgYnJlYWsgZHVlIHRvIGxpdmUgbGlzdCB1cGRhdGVzLgogICAgICAgIHZhciBub2RlTGlzdExlbmd0aCA9IG5vZGVMaXN0Lmxlbmd0aCwKICAgICAgICAgICAgc3RhYmxlTm9kZUxpc3QgPSBuZXcgQXJyYXkobm9kZUxpc3RMZW5ndGgpOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlTGlzdExlbmd0aDsgaSsrKSB7CiAgICAgICAgICBzdGFibGVOb2RlTGlzdFtpXSA9IG5vZGVMaXN0W2ldOwogICAgICAgIH0KCiAgICAgICAgZm9yKGkgPSAwLCBuID0gMCwgaWkgPSBsaW5rRm5zLmxlbmd0aDsgaSA8IGlpOyBuKyspIHsKICAgICAgICAgIG5vZGUgPSBzdGFibGVOb2RlTGlzdFtuXTsKICAgICAgICAgIG5vZGVMaW5rRm4gPSBsaW5rRm5zW2krK107CiAgICAgICAgICBjaGlsZExpbmtGbiA9IGxpbmtGbnNbaSsrXTsKICAgICAgICAgICRub2RlID0ganFMaXRlKG5vZGUpOwoKICAgICAgICAgIGlmIChub2RlTGlua0ZuKSB7CiAgICAgICAgICAgIGlmIChub2RlTGlua0ZuLnNjb3BlKSB7CiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlLiRuZXcoKTsKICAgICAgICAgICAgICAkbm9kZS5kYXRhKCckc2NvcGUnLCBjaGlsZFNjb3BlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBub2RlTGlua0ZuLnRyYW5zY2x1ZGU7CiAgICAgICAgICAgIGlmIChjaGlsZFRyYW5zY2x1ZGVGbiB8fCAoIWJvdW5kVHJhbnNjbHVkZUZuICYmIHRyYW5zY2x1ZGVGbikpIHsKICAgICAgICAgICAgICBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBjaGlsZFNjb3BlLCBub2RlLCAkcm9vdEVsZW1lbnQsCiAgICAgICAgICAgICAgICBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgY2hpbGRUcmFuc2NsdWRlRm4gfHwgdHJhbnNjbHVkZUZuKQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgY2hpbGRTY29wZSwgbm9kZSwgJHJvb3RFbGVtZW50LCBib3VuZFRyYW5zY2x1ZGVGbik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRMaW5rRm4pIHsKICAgICAgICAgICAgY2hpbGRMaW5rRm4oc2NvcGUsIG5vZGUuY2hpbGROb2RlcywgdW5kZWZpbmVkLCBib3VuZFRyYW5zY2x1ZGVGbik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIHRyYW5zY2x1ZGVGbikgewogICAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRUcmFuc2NsdWRlRm4odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMpIHsKICAgICAgICB2YXIgc2NvcGVDcmVhdGVkID0gZmFsc2U7CgogICAgICAgIGlmICghdHJhbnNjbHVkZWRTY29wZSkgewogICAgICAgICAgdHJhbnNjbHVkZWRTY29wZSA9IHNjb3BlLiRuZXcoKTsKICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7CiAgICAgICAgICBzY29wZUNyZWF0ZWQgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgdmFyIGNsb25lID0gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIGNvbnRyb2xsZXJzKTsKICAgICAgICBpZiAoc2NvcGVDcmVhdGVkKSB7CiAgICAgICAgICBjbG9uZS5vbignJGRlc3Ryb3knLCBiaW5kKHRyYW5zY2x1ZGVkU2NvcGUsIHRyYW5zY2x1ZGVkU2NvcGUuJGRlc3Ryb3kpKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNsb25lOwogICAgICB9OwogICAgfQoKICAgIC8qKgogICAgICogTG9va3MgZm9yIGRpcmVjdGl2ZXMgb24gdGhlIGdpdmVuIG5vZGUgYW5kIGFkZHMgdGhlbSB0byB0aGUgZGlyZWN0aXZlIGNvbGxlY3Rpb24gd2hpY2ggaXMKICAgICAqIHNvcnRlZC4KICAgICAqCiAgICAgKiBAcGFyYW0gbm9kZSBOb2RlIHRvIHNlYXJjaC4KICAgICAqIEBwYXJhbSBkaXJlY3RpdmVzIEFuIGFycmF5IHRvIHdoaWNoIHRoZSBkaXJlY3RpdmVzIGFyZSBhZGRlZCB0by4gVGhpcyBhcnJheSBpcyBzb3J0ZWQgYmVmb3JlCiAgICAgKiAgICAgICAgdGhlIGZ1bmN0aW9uIHJldHVybnMuCiAgICAgKiBAcGFyYW0gYXR0cnMgVGhlIHNoYXJlZCBhdHRycyBvYmplY3Qgd2hpY2ggaXMgdXNlZCB0byBwb3B1bGF0ZSB0aGUgbm9ybWFsaXplZCBhdHRyaWJ1dGVzLgogICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhQcmlvcml0eSBNYXggZGlyZWN0aXZlIHByaW9yaXR5LgogICAgICovCiAgICBmdW5jdGlvbiBjb2xsZWN0RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkgewogICAgICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlLAogICAgICAgICAgYXR0cnNNYXAgPSBhdHRycy4kYXR0ciwKICAgICAgICAgIG1hdGNoLAogICAgICAgICAgY2xhc3NOYW1lOwoKICAgICAgc3dpdGNoKG5vZGVUeXBlKSB7CiAgICAgICAgY2FzZSAxOiAvKiBFbGVtZW50ICovCiAgICAgICAgICAvLyB1c2UgdGhlIG5vZGUgbmFtZTogPGRpcmVjdGl2ZT4KICAgICAgICAgIGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLAogICAgICAgICAgICAgIGRpcmVjdGl2ZU5vcm1hbGl6ZShub2RlTmFtZV8obm9kZSkudG9Mb3dlckNhc2UoKSksICdFJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSk7CgogICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzCiAgICAgICAgICBmb3IgKHZhciBhdHRyLCBuYW1lLCBuTmFtZSwgbmdBdHRyTmFtZSwgdmFsdWUsIG5BdHRycyA9IG5vZGUuYXR0cmlidXRlcywKICAgICAgICAgICAgICAgICAgIGogPSAwLCBqaiA9IG5BdHRycyAmJiBuQXR0cnMubGVuZ3RoOyBqIDwgamo7IGorKykgewogICAgICAgICAgICB2YXIgYXR0clN0YXJ0TmFtZSA9IGZhbHNlOwogICAgICAgICAgICB2YXIgYXR0ckVuZE5hbWUgPSBmYWxzZTsKCiAgICAgICAgICAgIGF0dHIgPSBuQXR0cnNbal07CiAgICAgICAgICAgIGlmICghbXNpZSB8fCBtc2llID49IDggfHwgYXR0ci5zcGVjaWZpZWQpIHsKICAgICAgICAgICAgICBuYW1lID0gYXR0ci5uYW1lOwogICAgICAgICAgICAgIC8vIHN1cHBvcnQgbmdBdHRyIGF0dHJpYnV0ZSBiaW5kaW5nCiAgICAgICAgICAgICAgbmdBdHRyTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKTsKICAgICAgICAgICAgICBpZiAoTkdfQVRUUl9CSU5ESU5HLnRlc3QobmdBdHRyTmFtZSkpIHsKICAgICAgICAgICAgICAgIG5hbWUgPSBzbmFrZV9jYXNlKG5nQXR0ck5hbWUuc3Vic3RyKDYpLCAnLScpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZU5OYW1lID0gbmdBdHRyTmFtZS5yZXBsYWNlKC8oU3RhcnR8RW5kKSQvLCAnJyk7CiAgICAgICAgICAgICAgaWYgKG5nQXR0ck5hbWUgPT09IGRpcmVjdGl2ZU5OYW1lICsgJ1N0YXJ0JykgewogICAgICAgICAgICAgICAgYXR0clN0YXJ0TmFtZSA9IG5hbWU7CiAgICAgICAgICAgICAgICBhdHRyRW5kTmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gNSkgKyAnZW5kJzsKICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDYpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZS50b0xvd2VyQ2FzZSgpKTsKICAgICAgICAgICAgICBhdHRyc01hcFtuTmFtZV0gPSBuYW1lOwogICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHZhbHVlID0gdHJpbShhdHRyLnZhbHVlKTsKICAgICAgICAgICAgICBpZiAoZ2V0Qm9vbGVhbkF0dHJOYW1lKG5vZGUsIG5OYW1lKSkgewogICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJ1ZTsgLy8gcHJlc2VuY2UgbWVhbnMgdHJ1ZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5OYW1lKTsKICAgICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdBJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgYXR0clN0YXJ0TmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJFbmROYW1lKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIHVzZSBjbGFzcyBhcyBkaXJlY3RpdmUKICAgICAgICAgIGNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lOwogICAgICAgICAgaWYgKGlzU3RyaW5nKGNsYXNzTmFtZSkgJiYgY2xhc3NOYW1lICE9PSAnJykgewogICAgICAgICAgICB3aGlsZSAobWF0Y2ggPSBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKSkgewogICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzJdKTsKICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQycsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpKSB7CiAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cmltKG1hdGNoWzNdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cihtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMzogLyogVGV4dCBOb2RlICovCiAgICAgICAgICBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgbm9kZS5ub2RlVmFsdWUpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSA4OiAvKiBDb21tZW50ICovCiAgICAgICAgICB0cnkgewogICAgICAgICAgICBtYXRjaCA9IENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUC5leGVjKG5vZGUubm9kZVZhbHVlKTsKICAgICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMV0pOwogICAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHsKICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbMl0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAvLyB0dXJucyBvdXQgdGhhdCB1bmRlciBzb21lIGNpcmN1bXN0YW5jZXMgSUU5IHRocm93cyBlcnJvcnMgd2hlbiBvbmUgYXR0ZW1wdHMgdG8gcmVhZAogICAgICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS4KICAgICAgICAgICAgLy8gSnVzdCBpZ25vcmUgaXQgYW5kIGNvbnRpbnVlLiAoQ2FuJ3Qgc2VlbSB0byByZXByb2R1Y2UgaW4gdGVzdCBjYXNlLikKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBkaXJlY3RpdmVzLnNvcnQoYnlQcmlvcml0eSk7CiAgICAgIHJldHVybiBkaXJlY3RpdmVzOwogICAgfQoKICAgIC8qKgogICAgICogR2l2ZW4gYSBub2RlIHdpdGggYW4gZGlyZWN0aXZlLXN0YXJ0IGl0IGNvbGxlY3RzIGFsbCBvZiB0aGUgc2libGluZ3MgdW50aWwgaXQgZmluZHMKICAgICAqIGRpcmVjdGl2ZS1lbmQuCiAgICAgKiBAcGFyYW0gbm9kZQogICAgICogQHBhcmFtIGF0dHJTdGFydAogICAgICogQHBhcmFtIGF0dHJFbmQKICAgICAqIEByZXR1cm5zIHsqfQogICAgICovCiAgICBmdW5jdGlvbiBncm91cFNjYW4obm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7CiAgICAgIHZhciBub2RlcyA9IFtdOwogICAgICB2YXIgZGVwdGggPSAwOwogICAgICBpZiAoYXR0clN0YXJ0ICYmIG5vZGUuaGFzQXR0cmlidXRlICYmIG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIHsKICAgICAgICB2YXIgc3RhcnROb2RlID0gbm9kZTsKICAgICAgICBkbyB7CiAgICAgICAgICBpZiAoIW5vZGUpIHsKICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3V0ZXJkaXInLAogICAgICAgICAgICAgICAgICAgICAgIlVudGVybWluYXRlZCBhdHRyaWJ1dGUsIGZvdW5kICd7MH0nIGJ1dCBubyBtYXRjaGluZyAnezF9JyBmb3VuZC4iLAogICAgICAgICAgICAgICAgICAgICAgYXR0clN0YXJ0LCBhdHRyRW5kKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEgLyoqIEVsZW1lbnQgKiovKSB7CiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyU3RhcnQpKSBkZXB0aCsrOwogICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0ckVuZCkpIGRlcHRoLS07CiAgICAgICAgICB9CiAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpOwogICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7CiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBub2Rlcy5wdXNoKG5vZGUpOwogICAgICB9CgogICAgICByZXR1cm4ganFMaXRlKG5vZGVzKTsKICAgIH0KCiAgICAvKioKICAgICAqIFdyYXBwZXIgZm9yIGxpbmtpbmcgZnVuY3Rpb24gd2hpY2ggY29udmVydHMgbm9ybWFsIGxpbmtpbmcgZnVuY3Rpb24gaW50byBhIGdyb3VwZWQKICAgICAqIGxpbmtpbmcgZnVuY3Rpb24uCiAgICAgKiBAcGFyYW0gbGlua0ZuCiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0CiAgICAgKiBAcGFyYW0gYXR0ckVuZAogICAgICogQHJldHVybnMge0Z1bmN0aW9ufQogICAgICovCiAgICBmdW5jdGlvbiBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCkgewogICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7CiAgICAgICAgZWxlbWVudCA9IGdyb3VwU2NhbihlbGVtZW50WzBdLCBhdHRyU3RhcnQsIGF0dHJFbmQpOwogICAgICAgIHJldHVybiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTsKICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICAqIE9uY2UgdGhlIGRpcmVjdGl2ZXMgaGF2ZSBiZWVuIGNvbGxlY3RlZCwgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGlzIG1ldGhvZAogICAgICogaXMgcmVzcG9uc2libGUgZm9yIGlubGluaW5nIGRpcmVjdGl2ZSB0ZW1wbGF0ZXMgYXMgd2VsbCBhcyB0ZXJtaW5hdGluZyB0aGUgYXBwbGljYXRpb24KICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0FycmF5fSBkaXJlY3RpdmVzIEFycmF5IG9mIGNvbGxlY3RlZCBkaXJlY3RpdmVzIHRvIGV4ZWN1dGUgdGhlaXIgY29tcGlsZSBmdW5jdGlvbi4KICAgICAqICAgICAgICB0aGlzIG5lZWRzIHRvIGJlIHByZS1zb3J0ZWQgYnkgcHJpb3JpdHkgb3JkZXIuCiAgICAgKiBAcGFyYW0ge05vZGV9IGNvbXBpbGVOb2RlIFRoZSByYXcgRE9NIG5vZGUgdG8gYXBwbHkgdGhlIGNvbXBpbGUgZnVuY3Rpb25zIHRvCiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVBdHRycyBUaGUgc2hhcmVkIGF0dHJpYnV0ZSBmdW5jdGlvbgogICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlWywgY2xvbmVBdHRhY2hGbl19IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCBvZiB0aGUgdHJhbnNjbHVkZWQgcGFyZW50IHNjb3BlLgogICAgICogQHBhcmFtIHtKUUxpdGV9IGpxQ29sbGVjdGlvbiBJZiB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlIHRoZW4gdGhpcwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCBoYXMgdGhlIHJvb3QganFMaXRlIGFycmF5IHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gaXQuCiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSBBbiBvcHRpb25hbCBkaXJlY3RpdmUgdGhhdCB3aWxsIGJlIGlnbm9yZWQgd2hlbgogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGlsaW5nIHRoZSB0cmFuc2NsdXNpb24uCiAgICAgKiBAcGFyYW0ge0FycmF5LjxGdW5jdGlvbj59IHByZUxpbmtGbnMKICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcG9zdExpbmtGbnMKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IENvbnRleHQgdXNlZCBmb3IgcHJldmlvdXMgY29tcGlsYXRpb24gb2YgdGhlIGN1cnJlbnQKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUKICAgICAqIEByZXR1cm5zIGxpbmtGbgogICAgICovCiAgICBmdW5jdGlvbiBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIHRyYW5zY2x1ZGVGbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcUNvbGxlY3Rpb24sIG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkgewogICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0ID0gcHJldmlvdXNDb21waWxlQ29udGV4dCB8fCB7fTsKCiAgICAgIHZhciB0ZXJtaW5hbFByaW9yaXR5ID0gLU51bWJlci5NQVhfVkFMVUUsCiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSwKICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5jb250cm9sbGVyRGlyZWN0aXZlcywKICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQubmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLAogICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LnRlbXBsYXRlRGlyZWN0aXZlLAogICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQubm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSwKICAgICAgICAgIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBmYWxzZSwKICAgICAgICAgIGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gZmFsc2UsCiAgICAgICAgICAkY29tcGlsZU5vZGUgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudCA9IGpxTGl0ZShjb21waWxlTm9kZSksCiAgICAgICAgICBkaXJlY3RpdmUsCiAgICAgICAgICBkaXJlY3RpdmVOYW1lLAogICAgICAgICAgJHRlbXBsYXRlLAogICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSwKICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gdHJhbnNjbHVkZUZuLAogICAgICAgICAgbGlua0ZuLAogICAgICAgICAgZGlyZWN0aXZlVmFsdWU7CgogICAgICAvLyBleGVjdXRlcyBhbGwgZGlyZWN0aXZlcyBvbiB0aGUgY3VycmVudCBlbGVtZW50CiAgICAgIGZvcih2YXIgaSA9IDAsIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTsKICAgICAgICB2YXIgYXR0clN0YXJ0ID0gZGlyZWN0aXZlLiQkc3RhcnQ7CiAgICAgICAgdmFyIGF0dHJFbmQgPSBkaXJlY3RpdmUuJCRlbmQ7CgogICAgICAgIC8vIGNvbGxlY3QgbXVsdGlibG9jayBzZWN0aW9ucwogICAgICAgIGlmIChhdHRyU3RhcnQpIHsKICAgICAgICAgICRjb21waWxlTm9kZSA9IGdyb3VwU2Nhbihjb21waWxlTm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKTsKICAgICAgICB9CiAgICAgICAgJHRlbXBsYXRlID0gdW5kZWZpbmVkOwoKICAgICAgICBpZiAodGVybWluYWxQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkgewogICAgICAgICAgYnJlYWs7IC8vIHByZXZlbnQgZnVydGhlciBwcm9jZXNzaW5nIG9mIGRpcmVjdGl2ZXMKICAgICAgICB9CgogICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5zY29wZSkgewogICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBuZXdTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7CgogICAgICAgICAgLy8gc2tpcCB0aGUgY2hlY2sgZm9yIGRpcmVjdGl2ZXMgd2l0aCBhc3luYyB0ZW1wbGF0ZXMsIHdlJ2xsIGNoZWNrIHRoZSBkZXJpdmVkIHN5bmMKICAgICAgICAgIC8vIGRpcmVjdGl2ZSB3aGVuIHRoZSB0ZW1wbGF0ZSBhcnJpdmVzCiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkgewogICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBkaXJlY3RpdmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21waWxlTm9kZSk7CiAgICAgICAgICAgIGlmIChpc09iamVjdChkaXJlY3RpdmVWYWx1ZSkpIHsKICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZTsKCiAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHsKICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7CiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzIHx8IHt9OwogICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoIiciICsgZGlyZWN0aXZlTmFtZSArICInIGNvbnRyb2xsZXIiLAogICAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7CiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IGRpcmVjdGl2ZTsKICAgICAgICB9CgogICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50cmFuc2NsdWRlKSB7CiAgICAgICAgICBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlID0gdHJ1ZTsKCiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgbmdJZiBhbmQgbmdSZXBlYXQgc28gdGhhdCB3ZSBkb24ndCBjb21wbGFpbiBhYm91dCBkdXBsaWNhdGUgdHJhbnNjbHVzaW9uLgogICAgICAgICAgLy8gVGhpcyBvcHRpb24gc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBkaXJlY3RpdmVzIHRoYXQga25vdyBob3cgdG8gaG93IHRvIHNhZmVseSBoYW5kbGUgZWxlbWVudCB0cmFuc2NsdXNpb24sCiAgICAgICAgICAvLyB3aGVyZSB0aGUgdHJhbnNjbHVkZWQgbm9kZXMgYXJlIGFkZGVkIG9yIHJlcGxhY2VkIGFmdGVyIGxpbmtpbmcuCiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS4kJHRsYikgewogICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndHJhbnNjbHVzaW9uJywgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9PSAnZWxlbWVudCcpIHsKICAgICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSB0cnVlOwogICAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5OwogICAgICAgICAgICAkdGVtcGxhdGUgPSBncm91cFNjYW4oY29tcGlsZU5vZGUsIGF0dHJTdGFydCwgYXR0ckVuZCk7CiAgICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0KICAgICAgICAgICAgICAgIGpxTGl0ZShkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgJyArIGRpcmVjdGl2ZU5hbWUgKyAnOiAnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlQXR0cnNbZGlyZWN0aXZlTmFtZV0gKyAnICcpKTsKICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF07CiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwganFMaXRlKHNsaWNlQXJncygkdGVtcGxhdGUpKSwgY29tcGlsZU5vZGUpOwoKICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB0ZXJtaW5hbFByaW9yaXR5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSAmJiByZXBsYWNlRGlyZWN0aXZlLm5hbWUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgcGFzcyBpbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBjb250cm9sbGVyRGlyZWN0aXZlcyAtIG90aGVyd2lzZSB3ZSdsbCBjcmVhdGUgZHVwbGljYXRlcyBjb250cm9sbGVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSBvciB0ZW1wbGF0ZURpcmVjdGl2ZSAtIGNvbWJpbmluZyB0ZW1wbGF0ZXMgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGVsZW1lbnQgdHJhbnNjbHVzaW9uIGRvZXNuJ3QgbWFrZSBzZW5zZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCBvbmx5IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgc28gdGhhdCB3ZSBwcmV2ZW50IHB1dHRpbmcgdHJhbnNjbHVzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uIHRoZSBzYW1lIGVsZW1lbnQgbW9yZSB0aGFuIG9uY2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKSkuY29udGVudHMoKTsKICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmVtcHR5KCk7IC8vIGNsZWFyIGNvbnRlbnRzCiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsZSgkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbik7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlKSB7CiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpOwogICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7CgogICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSAoaXNGdW5jdGlvbihkaXJlY3RpdmUudGVtcGxhdGUpKQogICAgICAgICAgICAgID8gZGlyZWN0aXZlLnRlbXBsYXRlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycykKICAgICAgICAgICAgICA6IGRpcmVjdGl2ZS50ZW1wbGF0ZTsKCiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpOwoKICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkgewogICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlOwogICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoJzxkaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaW0oZGlyZWN0aXZlVmFsdWUpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nKS5jb250ZW50cygpOwogICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTsKCiAgICAgICAgICAgIGlmICgkdGVtcGxhdGUubGVuZ3RoICE9IDEgfHwgY29tcGlsZU5vZGUubm9kZVR5cGUgIT09IDEpIHsKICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLAogICAgICAgICAgICAgICAgICAiVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSAnezB9JyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX0iLAogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVOYW1lLCAnJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7CgogICAgICAgICAgICB2YXIgbmV3VGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319OwoKICAgICAgICAgICAgLy8gY29tYmluZSBkaXJlY3RpdmVzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUgYW5kIGZyb20gdGhlIHRlbXBsYXRlOgogICAgICAgICAgICAvLyAtIHRha2UgdGhlIGFycmF5IG9mIGRpcmVjdGl2ZXMgZm9yIHRoaXMgZWxlbWVudAogICAgICAgICAgICAvLyAtIHNwbGl0IGl0IGludG8gdHdvIHBhcnRzLCB0aG9zZSB0aGF0IGFscmVhZHkgYXBwbGllZCAocHJvY2Vzc2VkKSBhbmQgdGhvc2UgdGhhdCB3ZXJlbid0ICh1bnByb2Nlc3NlZCkKICAgICAgICAgICAgLy8gLSBjb2xsZWN0IGRpcmVjdGl2ZXMgZnJvbSB0aGUgdGVtcGxhdGUgYW5kIHNvcnQgdGhlbSBieSBwcmlvcml0eQogICAgICAgICAgICAvLyAtIGNvbWJpbmUgZGlyZWN0aXZlcyBhczogcHJvY2Vzc2VkICsgdGVtcGxhdGUgKyB1bnByb2Nlc3NlZAogICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCBuZXdUZW1wbGF0ZUF0dHJzKTsKICAgICAgICAgICAgdmFyIHVucHJvY2Vzc2VkRGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuc3BsaWNlKGkgKyAxLCBkaXJlY3RpdmVzLmxlbmd0aCAtIChpICsgMSkpOwoKICAgICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkgewogICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVzQXNJc29sYXRlKHRlbXBsYXRlRGlyZWN0aXZlcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuY29uY2F0KHRlbXBsYXRlRGlyZWN0aXZlcykuY29uY2F0KHVucHJvY2Vzc2VkRGlyZWN0aXZlcyk7CiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRlbXBsYXRlQXR0cnMsIG5ld1RlbXBsYXRlQXR0cnMpOwoKICAgICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGRpcmVjdGl2ZVZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChkaXJlY3RpdmUudGVtcGxhdGVVcmwpIHsKICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7CiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTsKCiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHsKICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBub2RlTGlua0ZuID0gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMuc3BsaWNlKGksIGRpcmVjdGl2ZXMubGVuZ3RoIC0gaSksICRjb21waWxlTm9kZSwKICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzLCBqcUNvbGxlY3Rpb24sIGNoaWxkVHJhbnNjbHVkZUZuLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywgewogICAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXM6IGNvbnRyb2xsZXJEaXJlY3RpdmVzLAogICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlOiBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsCiAgICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZTogdGVtcGxhdGVEaXJlY3RpdmUsCiAgICAgICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlOiBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOwogICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aXZlLmNvbXBpbGUpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxpbmtGbiA9IGRpcmVjdGl2ZS5jb21waWxlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgY2hpbGRUcmFuc2NsdWRlRm4pOwogICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihsaW5rRm4pKSB7CiAgICAgICAgICAgICAgYWRkTGlua0ZucyhudWxsLCBsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlua0ZuKSB7CiAgICAgICAgICAgICAgYWRkTGlua0ZucyhsaW5rRm4ucHJlLCBsaW5rRm4ucG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkY29tcGlsZU5vZGUpKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChkaXJlY3RpdmUudGVybWluYWwpIHsKICAgICAgICAgIG5vZGVMaW5rRm4udGVybWluYWwgPSB0cnVlOwogICAgICAgICAgdGVybWluYWxQcmlvcml0eSA9IE1hdGgubWF4KHRlcm1pbmFsUHJpb3JpdHksIGRpcmVjdGl2ZS5wcmlvcml0eSk7CiAgICAgICAgfQoKICAgICAgfQoKICAgICAgbm9kZUxpbmtGbi5zY29wZSA9IG5ld1Njb3BlRGlyZWN0aXZlICYmIG5ld1Njb3BlRGlyZWN0aXZlLnNjb3BlID09PSB0cnVlOwogICAgICBub2RlTGlua0ZuLnRyYW5zY2x1ZGUgPSBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlICYmIGNoaWxkVHJhbnNjbHVkZUZuOwoKICAgICAgLy8gbWlnaHQgYmUgbm9ybWFsIG9yIGRlbGF5ZWQgbm9kZUxpbmtGbiBkZXBlbmRpbmcgb24gaWYgdGVtcGxhdGVVcmwgaXMgcHJlc2VudAogICAgICByZXR1cm4gbm9kZUxpbmtGbjsKCiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgICBmdW5jdGlvbiBhZGRMaW5rRm5zKHByZSwgcG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7CiAgICAgICAgaWYgKHByZSkgewogICAgICAgICAgaWYgKGF0dHJTdGFydCkgcHJlID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocHJlLCBhdHRyU3RhcnQsIGF0dHJFbmQpOwogICAgICAgICAgcHJlLnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTsKICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPT09IGRpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUpIHsKICAgICAgICAgICAgcHJlID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHByZSwge2lzb2xhdGVTY29wZTogdHJ1ZX0pOwogICAgICAgICAgfQogICAgICAgICAgcHJlTGlua0Zucy5wdXNoKHByZSk7CiAgICAgICAgfQogICAgICAgIGlmIChwb3N0KSB7CiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSBwb3N0ID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKTsKICAgICAgICAgIHBvc3QucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlOwogICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9PT0gZGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSkgewogICAgICAgICAgICBwb3N0ID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHBvc3QsIHtpc29sYXRlU2NvcGU6IHRydWV9KTsKICAgICAgICAgIH0KICAgICAgICAgIHBvc3RMaW5rRm5zLnB1c2gocG9zdCk7CiAgICAgICAgfQogICAgICB9CgoKICAgICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlcnMocmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykgewogICAgICAgIHZhciB2YWx1ZSwgcmV0cmlldmFsTWV0aG9kID0gJ2RhdGEnLCBvcHRpb25hbCA9IGZhbHNlOwogICAgICAgIGlmIChpc1N0cmluZyhyZXF1aXJlKSkgewogICAgICAgICAgd2hpbGUoKHZhbHVlID0gcmVxdWlyZS5jaGFyQXQoMCkpID09ICdeJyB8fCB2YWx1ZSA9PSAnPycpIHsKICAgICAgICAgICAgcmVxdWlyZSA9IHJlcXVpcmUuc3Vic3RyKDEpOwogICAgICAgICAgICBpZiAodmFsdWUgPT0gJ14nKSB7CiAgICAgICAgICAgICAgcmV0cmlldmFsTWV0aG9kID0gJ2luaGVyaXRlZERhdGEnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9wdGlvbmFsID0gb3B0aW9uYWwgfHwgdmFsdWUgPT0gJz8nOwogICAgICAgICAgfQogICAgICAgICAgdmFsdWUgPSBudWxsOwoKICAgICAgICAgIGlmIChlbGVtZW50Q29udHJvbGxlcnMgJiYgcmV0cmlldmFsTWV0aG9kID09PSAnZGF0YScpIHsKICAgICAgICAgICAgdmFsdWUgPSBlbGVtZW50Q29udHJvbGxlcnNbcmVxdWlyZV07CiAgICAgICAgICB9CiAgICAgICAgICB2YWx1ZSA9IHZhbHVlIHx8ICRlbGVtZW50W3JldHJpZXZhbE1ldGhvZF0oJyQnICsgcmVxdWlyZSArICdDb250cm9sbGVyJyk7CgogICAgICAgICAgaWYgKCF2YWx1ZSAmJiAhb3B0aW9uYWwpIHsKICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2N0cmVxJywKICAgICAgICAgICAgICAgICJDb250cm9sbGVyICd7MH0nLCByZXF1aXJlZCBieSBkaXJlY3RpdmUgJ3sxfScsIGNhbid0IGJlIGZvdW5kISIsCiAgICAgICAgICAgICAgICByZXF1aXJlLCBkaXJlY3RpdmVOYW1lKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVxdWlyZSkpIHsKICAgICAgICAgIHZhbHVlID0gW107CiAgICAgICAgICBmb3JFYWNoKHJlcXVpcmUsIGZ1bmN0aW9uKHJlcXVpcmUpIHsKICAgICAgICAgICAgdmFsdWUucHVzaChnZXRDb250cm9sbGVycyhyZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICB9CgoKICAgICAgZnVuY3Rpb24gbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7CiAgICAgICAgdmFyIGF0dHJzLCAkZWxlbWVudCwgaSwgaWksIGxpbmtGbiwgY29udHJvbGxlciwgaXNvbGF0ZVNjb3BlLCBlbGVtZW50Q29udHJvbGxlcnMgPSB7fSwgdHJhbnNjbHVkZUZuOwoKICAgICAgICBpZiAoY29tcGlsZU5vZGUgPT09IGxpbmtOb2RlKSB7CiAgICAgICAgICBhdHRycyA9IHRlbXBsYXRlQXR0cnM7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGF0dHJzID0gc2hhbGxvd0NvcHkodGVtcGxhdGVBdHRycywgbmV3IEF0dHJpYnV0ZXMoanFMaXRlKGxpbmtOb2RlKSwgdGVtcGxhdGVBdHRycy4kYXR0cikpOwogICAgICAgIH0KICAgICAgICAkZWxlbWVudCA9IGF0dHJzLiQkZWxlbWVudDsKCiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkgewogICAgICAgICAgdmFyIExPQ0FMX1JFR0VYUCA9IC9eXHMqKFtAPSZdKShcPz8pXHMqKFx3KilccyokLzsKICAgICAgICAgIHZhciAkbGlua05vZGUgPSBqcUxpdGUobGlua05vZGUpOwoKICAgICAgICAgIGlzb2xhdGVTY29wZSA9IHNjb3BlLiRuZXcodHJ1ZSk7CgogICAgICAgICAgaWYgKHRlbXBsYXRlRGlyZWN0aXZlICYmICh0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUpKSB7CiAgICAgICAgICAgICRsaW5rTm9kZS5kYXRhKCckaXNvbGF0ZVNjb3BlJywgaXNvbGF0ZVNjb3BlKSA7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkbGlua05vZGUuZGF0YSgnJGlzb2xhdGVTY29wZU5vVGVtcGxhdGUnLCBpc29sYXRlU2NvcGUpOwogICAgICAgICAgfQoKCgogICAgICAgICAgc2FmZUFkZENsYXNzKCRsaW5rTm9kZSwgJ25nLWlzb2xhdGUtc2NvcGUnKTsKCiAgICAgICAgICBmb3JFYWNoKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5zY29wZSwgZnVuY3Rpb24oZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7CiAgICAgICAgICAgIHZhciBtYXRjaCA9IGRlZmluaXRpb24ubWF0Y2goTE9DQUxfUkVHRVhQKSB8fCBbXSwKICAgICAgICAgICAgICAgIGF0dHJOYW1lID0gbWF0Y2hbM10gfHwgc2NvcGVOYW1lLAogICAgICAgICAgICAgICAgb3B0aW9uYWwgPSAobWF0Y2hbMl0gPT0gJz8nKSwKICAgICAgICAgICAgICAgIG1vZGUgPSBtYXRjaFsxXSwgLy8gQCwgPSwgb3IgJgogICAgICAgICAgICAgICAgbGFzdFZhbHVlLAogICAgICAgICAgICAgICAgcGFyZW50R2V0LCBwYXJlbnRTZXQsIGNvbXBhcmU7CgogICAgICAgICAgICBpc29sYXRlU2NvcGUuJCRpc29sYXRlQmluZGluZ3Nbc2NvcGVOYW1lXSA9IG1vZGUgKyBhdHRyTmFtZTsKCiAgICAgICAgICAgIHN3aXRjaCAobW9kZSkgewoKICAgICAgICAgICAgICBjYXNlICdAJzoKICAgICAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKGF0dHJOYW1lLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgICAgICBpc29sYXRlU2NvcGVbc2NvcGVOYW1lXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBhdHRycy4kJG9ic2VydmVyc1thdHRyTmFtZV0uJCRzY29wZSA9IHNjb3BlOwogICAgICAgICAgICAgICAgaWYoIGF0dHJzW2F0dHJOYW1lXSApIHsKICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBoYXMgYmVlbiBwcm92aWRlZCB0aGVuIHdlIHRyaWdnZXIgYW4gaW50ZXJwb2xhdGlvbiB0byBlbnN1cmUKICAgICAgICAgICAgICAgICAgLy8gdGhlIHZhbHVlIGlzIHRoZXJlIGZvciB1c2UgaW4gdGhlIGxpbmsgZm4KICAgICAgICAgICAgICAgICAgaXNvbGF0ZVNjb3BlW3Njb3BlTmFtZV0gPSAkaW50ZXJwb2xhdGUoYXR0cnNbYXR0ck5hbWVdKShzY29wZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAnPSc6CiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwgJiYgIWF0dHJzW2F0dHJOYW1lXSkgewogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBwYXJlbnRHZXQgPSAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKTsKICAgICAgICAgICAgICAgIGlmIChwYXJlbnRHZXQubGl0ZXJhbCkgewogICAgICAgICAgICAgICAgICBjb21wYXJlID0gZXF1YWxzOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgY29tcGFyZSA9IGZ1bmN0aW9uKGEsYikgeyByZXR1cm4gYSA9PT0gYjsgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBhcmVudFNldCA9IHBhcmVudEdldC5hc3NpZ24gfHwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBjaGFuZ2UsIG9yIHdlIHdpbGwgdGhyb3cgdGhpcyBleGNlcHRpb24gb24gZXZlcnkgJGRpZ2VzdAogICAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBpc29sYXRlU2NvcGVbc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7CiAgICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub25hc3NpZ24nLAogICAgICAgICAgICAgICAgICAgICAgIkV4cHJlc3Npb24gJ3swfScgdXNlZCB3aXRoIGRpcmVjdGl2ZSAnezF9JyBpcyBub24tYXNzaWduYWJsZSEiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnNbYXR0ck5hbWVdLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUubmFtZSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gaXNvbGF0ZVNjb3BlW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpOwogICAgICAgICAgICAgICAgaXNvbGF0ZVNjb3BlLiR3YXRjaChmdW5jdGlvbiBwYXJlbnRWYWx1ZVdhdGNoKCkgewogICAgICAgICAgICAgICAgICB2YXIgcGFyZW50VmFsdWUgPSBwYXJlbnRHZXQoc2NvcGUpOwogICAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGlzb2xhdGVTY29wZVtzY29wZU5hbWVdKSkgewogICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBvdXQgb2Ygc3luYyBhbmQgbmVlZCB0byBjb3B5CiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBsYXN0VmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAvLyBwYXJlbnQgY2hhbmdlZCBhbmQgaXQgaGFzIHByZWNlZGVuY2UKICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGVTY29wZVtzY29wZU5hbWVdID0gcGFyZW50VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgY2FuIGJlIGFzc2lnbmVkIHRoZW4gZG8gc28KICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFNldChzY29wZSwgcGFyZW50VmFsdWUgPSBpc29sYXRlU2NvcGVbc2NvcGVOYW1lXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBsYXN0VmFsdWUgPSBwYXJlbnRWYWx1ZTsKICAgICAgICAgICAgICAgIH0sIG51bGwsIHBhcmVudEdldC5saXRlcmFsKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlICcmJzoKICAgICAgICAgICAgICAgIHBhcmVudEdldCA9ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pOwogICAgICAgICAgICAgICAgaXNvbGF0ZVNjb3BlW3Njb3BlTmFtZV0gPSBmdW5jdGlvbihsb2NhbHMpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEdldChzY29wZSwgbG9jYWxzKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJywKICAgICAgICAgICAgICAgICAgICAiSW52YWxpZCBpc29sYXRlIHNjb3BlIGRlZmluaXRpb24gZm9yIGRpcmVjdGl2ZSAnezB9Jy4iICsKICAgICAgICAgICAgICAgICAgICAiIERlZmluaXRpb246IHsuLi4gezF9OiAnezJ9JyAuLi59IiwKICAgICAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUubmFtZSwgc2NvcGVOYW1lLCBkZWZpbml0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuICYmIGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlOwogICAgICAgIGlmIChjb250cm9sbGVyRGlyZWN0aXZlcykgewogICAgICAgICAgZm9yRWFjaChjb250cm9sbGVyRGlyZWN0aXZlcywgZnVuY3Rpb24oZGlyZWN0aXZlKSB7CiAgICAgICAgICAgIHZhciBsb2NhbHMgPSB7CiAgICAgICAgICAgICAgJHNjb3BlOiBkaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSwKICAgICAgICAgICAgICAkZWxlbWVudDogJGVsZW1lbnQsCiAgICAgICAgICAgICAgJGF0dHJzOiBhdHRycywKICAgICAgICAgICAgICAkdHJhbnNjbHVkZTogdHJhbnNjbHVkZUZuCiAgICAgICAgICAgIH0sIGNvbnRyb2xsZXJJbnN0YW5jZTsKCiAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBkaXJlY3RpdmUuY29udHJvbGxlcjsKICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIgPT0gJ0AnKSB7CiAgICAgICAgICAgICAgY29udHJvbGxlciA9IGF0dHJzW2RpcmVjdGl2ZS5uYW1lXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlID0gJGNvbnRyb2xsZXIoY29udHJvbGxlciwgbG9jYWxzKTsKICAgICAgICAgICAgLy8gRm9yIGRpcmVjdGl2ZXMgd2l0aCBlbGVtZW50IHRyYW5zY2x1c2lvbiB0aGUgZWxlbWVudCBpcyBhIGNvbW1lbnQsCiAgICAgICAgICAgIC8vIGJ1dCBqUXVlcnkgLmRhdGEgZG9lc24ndCBzdXBwb3J0IGF0dGFjaGluZyBkYXRhIHRvIGNvbW1lbnQgbm9kZXMgYXMgaXQncyBoYXJkIHRvCiAgICAgICAgICAgIC8vIGNsZWFuIHVwIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC84MzM1KS4KICAgICAgICAgICAgLy8gSW5zdGVhZCwgd2Ugc2F2ZSB0aGUgY29udHJvbGxlcnMgZm9yIHRoZSBlbGVtZW50IGluIGEgbG9jYWwgaGFzaCBhbmQgYXR0YWNoIHRvIC5kYXRhCiAgICAgICAgICAgIC8vIGxhdGVyLCBvbmNlIHdlIGhhdmUgdGhlIGFjdHVhbCBlbGVtZW50LgogICAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnNbZGlyZWN0aXZlLm5hbWVdID0gY29udHJvbGxlckluc3RhbmNlOwogICAgICAgICAgICBpZiAoIWhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlKSB7CiAgICAgICAgICAgICAgJGVsZW1lbnQuZGF0YSgnJCcgKyBkaXJlY3RpdmUubmFtZSArICdDb250cm9sbGVyJywgY29udHJvbGxlckluc3RhbmNlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZS5jb250cm9sbGVyQXMpIHsKICAgICAgICAgICAgICBsb2NhbHMuJHNjb3BlW2RpcmVjdGl2ZS5jb250cm9sbGVyQXNdID0gY29udHJvbGxlckluc3RhbmNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8vIFBSRUxJTktJTkcKICAgICAgICBmb3IoaSA9IDAsIGlpID0gcHJlTGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBsaW5rRm4gPSBwcmVMaW5rRm5zW2ldOwogICAgICAgICAgICBsaW5rRm4obGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsCiAgICAgICAgICAgICAgICBsaW5rRm4ucmVxdWlyZSAmJiBnZXRDb250cm9sbGVycyhsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksIHRyYW5zY2x1ZGVGbik7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBSRUNVUlNJT04KICAgICAgICAvLyBXZSBvbmx5IHBhc3MgdGhlIGlzb2xhdGUgc2NvcGUsIGlmIHRoZSBpc29sYXRlIGRpcmVjdGl2ZSBoYXMgYSB0ZW1wbGF0ZSwKICAgICAgICAvLyBvdGhlcndpc2UgdGhlIGNoaWxkIGVsZW1lbnRzIGRvIG5vdCBiZWxvbmcgdG8gdGhlIGlzb2xhdGUgZGlyZWN0aXZlLgogICAgICAgIHZhciBzY29wZVRvQ2hpbGQgPSBzY29wZTsKICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlICYmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGUgfHwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlVXJsID09PSBudWxsKSkgewogICAgICAgICAgc2NvcGVUb0NoaWxkID0gaXNvbGF0ZVNjb3BlOwogICAgICAgIH0KICAgICAgICBjaGlsZExpbmtGbiAmJiBjaGlsZExpbmtGbihzY29wZVRvQ2hpbGQsIGxpbmtOb2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pOwoKICAgICAgICAvLyBQT1NUTElOS0lORwogICAgICAgIGZvcihpID0gcG9zdExpbmtGbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGxpbmtGbiA9IHBvc3RMaW5rRm5zW2ldOwogICAgICAgICAgICBsaW5rRm4obGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsCiAgICAgICAgICAgICAgICBsaW5rRm4ucmVxdWlyZSAmJiBnZXRDb250cm9sbGVycyhsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksIHRyYW5zY2x1ZGVGbik7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGluamVjdGVkIGFzIGAkdHJhbnNjbHVkZWAuCiAgICAgICAgZnVuY3Rpb24gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGUoc2NvcGUsIGNsb25lQXR0YWNoRm4pIHsKICAgICAgICAgIHZhciB0cmFuc2NsdWRlQ29udHJvbGxlcnM7CgogICAgICAgICAgLy8gbm8gc2NvcGUgcGFzc2VkCiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgY2xvbmVBdHRhY2hGbiA9IHNjb3BlOwogICAgICAgICAgICBzY29wZSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUpIHsKICAgICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gZWxlbWVudENvbnRyb2xsZXJzOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBib3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgY2xvbmVBdHRhY2hGbiwgdHJhbnNjbHVkZUNvbnRyb2xsZXJzKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBtYXJrRGlyZWN0aXZlc0FzSXNvbGF0ZShkaXJlY3RpdmVzKSB7CiAgICAgIC8vIG1hcmsgYWxsIGRpcmVjdGl2ZXMgYXMgbmVlZGluZyBpc29sYXRlIHNjb3BlLgogICAgICBmb3IgKHZhciBqID0gMCwgamogPSBkaXJlY3RpdmVzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHsKICAgICAgICBkaXJlY3RpdmVzW2pdID0gaW5oZXJpdChkaXJlY3RpdmVzW2pdLCB7JCRpc29sYXRlU2NvcGU6IHRydWV9KTsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogbG9va3MgdXAgdGhlIGRpcmVjdGl2ZSBhbmQgZGVjb3JhdGVzIGl0IHdpdGggZXhjZXB0aW9uIGhhbmRsaW5nIGFuZCBwcm9wZXIgcGFyYW1ldGVycy4gV2UKICAgICAqIGNhbGwgdGhpcyB0aGUgYm91bmREaXJlY3RpdmUuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgZGlyZWN0aXZlIHRvIGxvb2sgdXAuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gVGhlIGRpcmVjdGl2ZSBtdXN0IGJlIGZvdW5kIGluIHNwZWNpZmljIGZvcm1hdC4KICAgICAqICAgU3RyaW5nIGNvbnRhaW5pbmcgYW55IG9mIHRoZXNlcyBjaGFyYWN0ZXJzOgogICAgICoKICAgICAqICAgKiBgRWA6IGVsZW1lbnQgbmFtZQogICAgICogICAqIGBBJzogYXR0cmlidXRlCiAgICAgKiAgICogYENgOiBjbGFzcwogICAgICogICAqIGBNYDogY29tbWVudAogICAgICogQHJldHVybnMgdHJ1ZSBpZiBkaXJlY3RpdmUgd2FzIGFkZGVkLgogICAgICovCiAgICBmdW5jdGlvbiBhZGREaXJlY3RpdmUodERpcmVjdGl2ZXMsIG5hbWUsIGxvY2F0aW9uLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBzdGFydEF0dHJOYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEF0dHJOYW1lKSB7CiAgICAgIGlmIChuYW1lID09PSBpZ25vcmVEaXJlY3RpdmUpIHJldHVybiBudWxsOwogICAgICB2YXIgbWF0Y2ggPSBudWxsOwogICAgICBpZiAoaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgIGZvcih2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSwKICAgICAgICAgICAgaSA9IDAsIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7IGk8aWk7IGkrKykgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTsKICAgICAgICAgICAgaWYgKCAobWF4UHJpb3JpdHkgPT09IHVuZGVmaW5lZCB8fCBtYXhQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkgJiYKICAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QuaW5kZXhPZihsb2NhdGlvbikgIT0gLTEpIHsKICAgICAgICAgICAgICBpZiAoc3RhcnRBdHRyTmFtZSkgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlID0gaW5oZXJpdChkaXJlY3RpdmUsIHskJHN0YXJ0OiBzdGFydEF0dHJOYW1lLCAkJGVuZDogZW5kQXR0ck5hbWV9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdERpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpOwogICAgICAgICAgICAgIG1hdGNoID0gZGlyZWN0aXZlOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG1hdGNoOwogICAgfQoKCiAgICAvKioKICAgICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVwbGFjZWQgd2l0aCBIVE1MIHRlbXBsYXRlIHRoZW4gdGhlIG5ldyBhdHRyaWJ1dGVzCiAgICAgKiBvbiB0aGUgdGVtcGxhdGUgbmVlZCB0byBiZSBtZXJnZWQgd2l0aCB0aGUgZXhpc3RpbmcgYXR0cmlidXRlcyBpbiB0aGUgRE9NLgogICAgICogVGhlIGRlc2lyZWQgZWZmZWN0IGlzIHRvIGhhdmUgYm90aCBvZiB0aGUgYXR0cmlidXRlcyBwcmVzZW50LgogICAgICoKICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkc3QgZGVzdGluYXRpb24gYXR0cmlidXRlcyAob3JpZ2luYWwgRE9NKQogICAgICogQHBhcmFtIHtvYmplY3R9IHNyYyBzb3VyY2UgYXR0cmlidXRlcyAoZnJvbSB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlKQogICAgICovCiAgICBmdW5jdGlvbiBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyhkc3QsIHNyYykgewogICAgICB2YXIgc3JjQXR0ciA9IHNyYy4kYXR0ciwKICAgICAgICAgIGRzdEF0dHIgPSBkc3QuJGF0dHIsCiAgICAgICAgICAkZWxlbWVudCA9IGRzdC4kJGVsZW1lbnQ7CgogICAgICAvLyByZWFwcGx5IHRoZSBvbGQgYXR0cmlidXRlcyB0byB0aGUgbmV3IGVsZW1lbnQKICAgICAgZm9yRWFjaChkc3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcpIHsKICAgICAgICAgIGlmIChzcmNba2V5XSkgewogICAgICAgICAgICB2YWx1ZSArPSAoa2V5ID09PSAnc3R5bGUnID8gJzsnIDogJyAnKSArIHNyY1trZXldOwogICAgICAgICAgfQogICAgICAgICAgZHN0LiRzZXQoa2V5LCB2YWx1ZSwgdHJ1ZSwgc3JjQXR0cltrZXldKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgLy8gY29weSB0aGUgbmV3IGF0dHJpYnV0ZXMgb24gdGhlIG9sZCBhdHRycyBvYmplY3QKICAgICAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAgICBpZiAoa2V5ID09ICdjbGFzcycpIHsKICAgICAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgdmFsdWUpOwogICAgICAgICAgZHN0WydjbGFzcyddID0gKGRzdFsnY2xhc3MnXSA/IGRzdFsnY2xhc3MnXSArICcgJyA6ICcnKSArIHZhbHVlOwogICAgICAgIH0gZWxzZSBpZiAoa2V5ID09ICdzdHlsZScpIHsKICAgICAgICAgICRlbGVtZW50LmF0dHIoJ3N0eWxlJywgJGVsZW1lbnQuYXR0cignc3R5bGUnKSArICc7JyArIHZhbHVlKTsKICAgICAgICAgIGRzdFsnc3R5bGUnXSA9IChkc3RbJ3N0eWxlJ10gPyBkc3RbJ3N0eWxlJ10gKyAnOycgOiAnJykgKyB2YWx1ZTsKICAgICAgICAgIC8vIGBkc3RgIHdpbGwgbmV2ZXIgY29udGFpbiBoYXNPd25Qcm9wZXJ0eSBhcyBET00gcGFyc2VyIHdvbid0IGxldCBpdC4KICAgICAgICAgIC8vIFlvdSB3aWxsIGdldCBhbiAiSW52YWxpZENoYXJhY3RlckVycm9yOiBET00gRXhjZXB0aW9uIDUiIGVycm9yIGlmIHlvdQogICAgICAgICAgLy8gaGF2ZSBhbiBhdHRyaWJ1dGUgbGlrZSAiaGFzLW93bi1wcm9wZXJ0eSIgb3IgImRhdGEtaGFzLW93bi1wcm9wZXJ0eSIsIGV0Yy4KICAgICAgICB9IGVsc2UgaWYgKGtleS5jaGFyQXQoMCkgIT0gJyQnICYmICFkc3QuaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTsKICAgICAgICAgIGRzdEF0dHJba2V5XSA9IHNyY0F0dHJba2V5XTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKCiAgICBmdW5jdGlvbiBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcywgJGNvbXBpbGVOb2RlLCB0QXR0cnMsCiAgICAgICAgJHJvb3RFbGVtZW50LCBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHsKICAgICAgdmFyIGxpbmtRdWV1ZSA9IFtdLAogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4sCiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sCiAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdLAogICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlID0gZGlyZWN0aXZlcy5zaGlmdCgpLAogICAgICAgICAgLy8gVGhlIGZhY3QgdGhhdCB3ZSBoYXZlIHRvIGNvcHkgYW5kIHBhdGNoIHRoZSBkaXJlY3RpdmUgc2VlbXMgd3JvbmchCiAgICAgICAgICBkZXJpdmVkU3luY0RpcmVjdGl2ZSA9IGV4dGVuZCh7fSwgb3JpZ0FzeW5jRGlyZWN0aXZlLCB7CiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBudWxsLCB0cmFuc2NsdWRlOiBudWxsLCByZXBsYWNlOiBudWxsLCAkJG9yaWdpbmFsRGlyZWN0aXZlOiBvcmlnQXN5bmNEaXJlY3RpdmUKICAgICAgICAgIH0pLAogICAgICAgICAgdGVtcGxhdGVVcmwgPSAoaXNGdW5jdGlvbihvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwpKQogICAgICAgICAgICAgID8gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKCRjb21waWxlTm9kZSwgdEF0dHJzKQogICAgICAgICAgICAgIDogb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsOwoKICAgICAgJGNvbXBpbGVOb2RlLmVtcHR5KCk7CgogICAgICAkaHR0cC5nZXQoJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodGVtcGxhdGVVcmwpLCB7Y2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuCiAgICAgICAgc3VjY2VzcyhmdW5jdGlvbihjb250ZW50KSB7CiAgICAgICAgICB2YXIgY29tcGlsZU5vZGUsIHRlbXBUZW1wbGF0ZUF0dHJzLCAkdGVtcGxhdGUsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm47CgogICAgICAgICAgY29udGVudCA9IGRlbm9ybWFsaXplVGVtcGxhdGUoY29udGVudCk7CgogICAgICAgICAgaWYgKG9yaWdBc3luY0RpcmVjdGl2ZS5yZXBsYWNlKSB7CiAgICAgICAgICAgICR0ZW1wbGF0ZSA9IGpxTGl0ZSgnPGRpdj4nICsgdHJpbShjb250ZW50KSArICc8L2Rpdj4nKS5jb250ZW50cygpOwogICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTsKCiAgICAgICAgICAgIGlmICgkdGVtcGxhdGUubGVuZ3RoICE9IDEgfHwgY29tcGlsZU5vZGUubm9kZVR5cGUgIT09IDEpIHsKICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLAogICAgICAgICAgICAgICAgICAiVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSAnezB9JyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX0iLAogICAgICAgICAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUubmFtZSwgdGVtcGxhdGVVcmwpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0ZW1wVGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319OwogICAgICAgICAgICByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpOwogICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCB0ZW1wVGVtcGxhdGVBdHRycyk7CgogICAgICAgICAgICBpZiAoaXNPYmplY3Qob3JpZ0FzeW5jRGlyZWN0aXZlLnNjb3BlKSkgewogICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVzQXNJc29sYXRlKHRlbXBsYXRlRGlyZWN0aXZlcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZGlyZWN0aXZlcyA9IHRlbXBsYXRlRGlyZWN0aXZlcy5jb25jYXQoZGlyZWN0aXZlcyk7CiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRBdHRycywgdGVtcFRlbXBsYXRlQXR0cnMpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29tcGlsZU5vZGUgPSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlOwogICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChjb250ZW50KTsKICAgICAgICAgIH0KCiAgICAgICAgICBkaXJlY3RpdmVzLnVuc2hpZnQoZGVyaXZlZFN5bmNEaXJlY3RpdmUpOwoKICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuID0gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0QXR0cnMsCiAgICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4sICRjb21waWxlTm9kZSwgb3JpZ0FzeW5jRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywKICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KTsKICAgICAgICAgIGZvckVhY2goJHJvb3RFbGVtZW50LCBmdW5jdGlvbihub2RlLCBpKSB7CiAgICAgICAgICAgIGlmIChub2RlID09IGNvbXBpbGVOb2RlKSB7CiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50W2ldID0gJGNvbXBpbGVOb2RlWzBdOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiA9IGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGVbMF0uY2hpbGROb2RlcywgY2hpbGRUcmFuc2NsdWRlRm4pOwoKCiAgICAgICAgICB3aGlsZShsaW5rUXVldWUubGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBzY29wZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLAogICAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLAogICAgICAgICAgICAgICAgbGlua1Jvb3RFbGVtZW50ID0gbGlua1F1ZXVlLnNoaWZ0KCksCiAgICAgICAgICAgICAgICBib3VuZFRyYW5zY2x1ZGVGbiA9IGxpbmtRdWV1ZS5zaGlmdCgpLAogICAgICAgICAgICAgICAgbGlua05vZGUgPSAkY29tcGlsZU5vZGVbMF07CgogICAgICAgICAgICBpZiAoYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSAhPT0gYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSkgewogICAgICAgICAgICAgIC8vIGl0IHdhcyBjbG9uZWQgdGhlcmVmb3JlIHdlIGhhdmUgdG8gY2xvbmUgYXMgd2VsbC4KICAgICAgICAgICAgICBsaW5rTm9kZSA9IGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKTsKICAgICAgICAgICAgICByZXBsYWNlV2l0aChsaW5rUm9vdEVsZW1lbnQsIGpxTGl0ZShiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlKSwgbGlua05vZGUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlKSB7CiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwKICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICAgIH0KICAgICAgICAgIGxpbmtRdWV1ZSA9IG51bGw7CiAgICAgICAgfSkuCiAgICAgICAgZXJyb3IoZnVuY3Rpb24ocmVzcG9uc2UsIGNvZGUsIGhlYWRlcnMsIGNvbmZpZykgewogICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbG9hZCcsICdGYWlsZWQgdG8gbG9hZCB0ZW1wbGF0ZTogezB9JywgY29uZmlnLnVybCk7CiAgICAgICAgfSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gZGVsYXllZE5vZGVMaW5rRm4oaWdub3JlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHsKICAgICAgICBpZiAobGlua1F1ZXVlKSB7CiAgICAgICAgICBsaW5rUXVldWUucHVzaChzY29wZSk7CiAgICAgICAgICBsaW5rUXVldWUucHVzaChub2RlKTsKICAgICAgICAgIGxpbmtRdWV1ZS5wdXNoKHJvb3RFbGVtZW50KTsKICAgICAgICAgIGxpbmtRdWV1ZS5wdXNoKGJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CgoKICAgIC8qKgogICAgICogU29ydGluZyBmdW5jdGlvbiBmb3IgYm91bmQgZGlyZWN0aXZlcy4KICAgICAqLwogICAgZnVuY3Rpb24gYnlQcmlvcml0eShhLCBiKSB7CiAgICAgIHZhciBkaWZmID0gYi5wcmlvcml0eSAtIGEucHJpb3JpdHk7CiAgICAgIGlmIChkaWZmICE9PSAwKSByZXR1cm4gZGlmZjsKICAgICAgaWYgKGEubmFtZSAhPT0gYi5uYW1lKSByZXR1cm4gKGEubmFtZSA8IGIubmFtZSkgPyAtMSA6IDE7CiAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDsKICAgIH0KCgogICAgZnVuY3Rpb24gYXNzZXJ0Tm9EdXBsaWNhdGUod2hhdCwgcHJldmlvdXNEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgZWxlbWVudCkgewogICAgICBpZiAocHJldmlvdXNEaXJlY3RpdmUpIHsKICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbXVsdGlkaXInLCAnTXVsdGlwbGUgZGlyZWN0aXZlcyBbezB9LCB7MX1dIGFza2luZyBmb3IgezJ9IG9uOiB7M30nLAogICAgICAgICAgICBwcmV2aW91c0RpcmVjdGl2ZS5uYW1lLCBkaXJlY3RpdmUubmFtZSwgd2hhdCwgc3RhcnRpbmdUYWcoZWxlbWVudCkpOwogICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIGFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZShkaXJlY3RpdmVzLCB0ZXh0KSB7CiAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHRleHQsIHRydWUpOwogICAgICBpZiAoaW50ZXJwb2xhdGVGbikgewogICAgICAgIGRpcmVjdGl2ZXMucHVzaCh7CiAgICAgICAgICBwcmlvcml0eTogMCwKICAgICAgICAgIGNvbXBpbGU6IHZhbHVlRm4oZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7CiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpLAogICAgICAgICAgICAgICAgYmluZGluZ3MgPSBwYXJlbnQuZGF0YSgnJGJpbmRpbmcnKSB8fCBbXTsKICAgICAgICAgICAgYmluZGluZ3MucHVzaChpbnRlcnBvbGF0ZUZuKTsKICAgICAgICAgICAgc2FmZUFkZENsYXNzKHBhcmVudC5kYXRhKCckYmluZGluZycsIGJpbmRpbmdzKSwgJ25nLWJpbmRpbmcnKTsKICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgIG5vZGVbMF0ubm9kZVZhbHVlID0gdmFsdWU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSkKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKCiAgICBmdW5jdGlvbiBnZXRUcnVzdGVkQ29udGV4dChub2RlLCBhdHRyTm9ybWFsaXplZE5hbWUpIHsKICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PSAic3JjZG9jIikgewogICAgICAgIHJldHVybiAkc2NlLkhUTUw7CiAgICAgIH0KICAgICAgdmFyIHRhZyA9IG5vZGVOYW1lXyhub2RlKTsKICAgICAgLy8gbWFjdGlvblt4bGluazpocmVmXSBjYW4gc291cmNlIFNWRy4gIEl0J3Mgbm90IGxpbWl0ZWQgdG8gPG1hY3Rpb24+LgogICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09ICJ4bGlua0hyZWYiIHx8CiAgICAgICAgICAodGFnID09ICJGT1JNIiAmJiBhdHRyTm9ybWFsaXplZE5hbWUgPT0gImFjdGlvbiIpIHx8CiAgICAgICAgICAodGFnICE9ICJJTUciICYmIChhdHRyTm9ybWFsaXplZE5hbWUgPT0gInNyYyIgfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOb3JtYWxpemVkTmFtZSA9PSAibmdTcmMiKSkpIHsKICAgICAgICByZXR1cm4gJHNjZS5SRVNPVVJDRV9VUkw7CiAgICAgIH0KICAgIH0KCgogICAgZnVuY3Rpb24gYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuYW1lKSB7CiAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHZhbHVlLCB0cnVlKTsKCiAgICAgIC8vIG5vIGludGVycG9sYXRpb24gZm91bmQgLT4gaWdub3JlCiAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgcmV0dXJuOwoKCiAgICAgIGlmIChuYW1lID09PSAibXVsdGlwbGUiICYmIG5vZGVOYW1lXyhub2RlKSA9PT0gIlNFTEVDVCIpIHsKICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigic2VsbXVsdGkiLAogICAgICAgICAgICAiQmluZGluZyB0byB0aGUgJ211bHRpcGxlJyBhdHRyaWJ1dGUgaXMgbm90IHN1cHBvcnRlZC4gRWxlbWVudDogezB9IiwKICAgICAgICAgICAgc3RhcnRpbmdUYWcobm9kZSkpOwogICAgICB9CgogICAgICBkaXJlY3RpdmVzLnB1c2goewogICAgICAgIHByaW9yaXR5OiAxMDAsCiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgcHJlOiBmdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVQcmVMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICAgICAgICAgIHZhciAkJG9ic2VydmVycyA9IChhdHRyLiQkb2JzZXJ2ZXJzIHx8IChhdHRyLiQkb2JzZXJ2ZXJzID0ge30pKTsKCiAgICAgICAgICAgICAgICBpZiAoRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUC50ZXN0KG5hbWUpKSB7CiAgICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub2RvbWV2ZW50cycsCiAgICAgICAgICAgICAgICAgICAgICAiSW50ZXJwb2xhdGlvbnMgZm9yIEhUTUwgRE9NIGV2ZW50IGF0dHJpYnV0ZXMgYXJlIGRpc2FsbG93ZWQuICBQbGVhc2UgdXNlIHRoZSAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAibmctIHZlcnNpb25zIChzdWNoIGFzIG5nLWNsaWNrIGluc3RlYWQgb2Ygb25jbGljaykgaW5zdGVhZC4iKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGludGVycG9sYXRlIGFnYWluLCBpbiBjYXNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZAogICAgICAgICAgICAgICAgLy8gKGUuZy4gYnkgYW5vdGhlciBkaXJlY3RpdmUncyBjb21waWxlIGZ1bmN0aW9uKQogICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShhdHRyW25hbWVdLCB0cnVlLCBnZXRUcnVzdGVkQ29udGV4dChub2RlLCBuYW1lKSk7CgogICAgICAgICAgICAgICAgLy8gaWYgYXR0cmlidXRlIHdhcyB1cGRhdGVkIHNvIHRoYXQgdGhlcmUgaXMgbm8gaW50ZXJwb2xhdGlvbiBnb2luZyBvbiB3ZSBkb24ndCB3YW50IHRvCiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhbnkgb2JzZXJ2ZXJzCiAgICAgICAgICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjsKCiAgICAgICAgICAgICAgICAvLyBUT0RPKGkpOiB0aGlzIHNob3VsZCBsaWtlbHkgYmUgYXR0ci4kc2V0KG5hbWUsIGl0ZXJwb2xhdGVGbihzY29wZSkgc28gdGhhdCB3ZSByZXNldCB0aGUKICAgICAgICAgICAgICAgIC8vIGFjdHVhbCBhdHRyIHZhbHVlCiAgICAgICAgICAgICAgICBhdHRyW25hbWVdID0gaW50ZXJwb2xhdGVGbihzY29wZSk7CiAgICAgICAgICAgICAgICAoJCRvYnNlcnZlcnNbbmFtZV0gfHwgKCQkb2JzZXJ2ZXJzW25hbWVdID0gW10pKS4kJGludGVyID0gdHJ1ZTsKICAgICAgICAgICAgICAgIChhdHRyLiQkb2JzZXJ2ZXJzICYmIGF0dHIuJCRvYnNlcnZlcnNbbmFtZV0uJCRzY29wZSB8fCBzY29wZSkuCiAgICAgICAgICAgICAgICAgICR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIGNsYXNzIGF0dHJpYnV0ZSBhZGRpdGlvbiArIHJlbW92YWwKICAgICAgICAgICAgICAgICAgICAvL3NvIHRoYXQgY2xhc3MgY2hhbmdlcyBjYW4gdGFwIGludG8gdGhlIGFuaW1hdGlvbgogICAgICAgICAgICAgICAgICAgIC8vaG9va3MgcHJvdmlkZWQgYnkgdGhlICRhbmltYXRlIHNlcnZpY2UuIEJlIHN1cmUgdG8KICAgICAgICAgICAgICAgICAgICAvL3NraXAgYW5pbWF0aW9ucyB3aGVuIHRoZSBmaXJzdCBkaWdlc3Qgb2NjdXJzICh3aGVuCiAgICAgICAgICAgICAgICAgICAgLy9ib3RoIHRoZSBuZXcgYW5kIHRoZSBvbGQgdmFsdWVzIGFyZSB0aGUgc2FtZSkgc2luY2UKICAgICAgICAgICAgICAgICAgICAvL3RoZSBDU1MgY2xhc3NlcyBhcmUgdGhlIG5vbi1pbnRlcnBvbGF0ZWQgdmFsdWVzCiAgICAgICAgICAgICAgICAgICAgaWYobmFtZSA9PT0gJ2NsYXNzJyAmJiBuZXdWYWx1ZSAhPSBvbGRWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgYXR0ci4kdXBkYXRlQ2xhc3MobmV3VmFsdWUsIG9sZFZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIG5ld1ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgfSk7CiAgICB9CgoKICAgIC8qKgogICAgICogVGhpcyBpcyBhIHNwZWNpYWwganFMaXRlLnJlcGxhY2VXaXRoLCB3aGljaCBjYW4gcmVwbGFjZSBpdGVtcyB3aGljaAogICAgICogaGF2ZSBubyBwYXJlbnRzLCBwcm92aWRlZCB0aGF0IHRoZSBjb250YWluaW5nIGpxTGl0ZSBjb2xsZWN0aW9uIGlzIHByb3ZpZGVkLgogICAgICoKICAgICAqIEBwYXJhbSB7SnFMaXRlPX0gJHJvb3RFbGVtZW50IFRoZSByb290IG9mIHRoZSBjb21waWxlIHRyZWUuIFVzZWQgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSBub2RlcwogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHJvb3Qgb2YgdGhlIHRyZWUuCiAgICAgKiBAcGFyYW0ge0pxTGl0ZX0gZWxlbWVudHNUb1JlbW92ZSBUaGUganFMaXRlIGVsZW1lbnQgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHJlcGxhY2UuIFdlIGtlZXAKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzaGVsbCwgYnV0IHJlcGxhY2UgaXRzIERPTSBub2RlIHJlZmVyZW5jZS4KICAgICAqIEBwYXJhbSB7Tm9kZX0gbmV3Tm9kZSBUaGUgbmV3IERPTSBub2RlLgogICAgICovCiAgICBmdW5jdGlvbiByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsIGVsZW1lbnRzVG9SZW1vdmUsIG5ld05vZGUpIHsKICAgICAgdmFyIGZpcnN0RWxlbWVudFRvUmVtb3ZlID0gZWxlbWVudHNUb1JlbW92ZVswXSwKICAgICAgICAgIHJlbW92ZUNvdW50ID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGgsCiAgICAgICAgICBwYXJlbnQgPSBmaXJzdEVsZW1lbnRUb1JlbW92ZS5wYXJlbnROb2RlLAogICAgICAgICAgaSwgaWk7CgogICAgICBpZiAoJHJvb3RFbGVtZW50KSB7CiAgICAgICAgZm9yKGkgPSAwLCBpaSA9ICRyb290RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50W2ldID09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7CiAgICAgICAgICAgICRyb290RWxlbWVudFtpKytdID0gbmV3Tm9kZTsKICAgICAgICAgICAgZm9yICh2YXIgaiA9IGksIGoyID0gaiArIHJlbW92ZUNvdW50IC0gMSwKICAgICAgICAgICAgICAgICAgICAgamogPSAkcm9vdEVsZW1lbnQubGVuZ3RoOwogICAgICAgICAgICAgICAgIGogPCBqajsgaisrLCBqMisrKSB7CiAgICAgICAgICAgICAgaWYgKGoyIDwgamopIHsKICAgICAgICAgICAgICAgICRyb290RWxlbWVudFtqXSA9ICRyb290RWxlbWVudFtqMl07CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSAkcm9vdEVsZW1lbnRbal07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRyb290RWxlbWVudC5sZW5ndGggLT0gcmVtb3ZlQ291bnQgLSAxOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChwYXJlbnQpIHsKICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5ld05vZGUsIGZpcnN0RWxlbWVudFRvUmVtb3ZlKTsKICAgICAgfQogICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7CiAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGZpcnN0RWxlbWVudFRvUmVtb3ZlKTsKICAgICAgbmV3Tm9kZVtqcUxpdGUuZXhwYW5kb10gPSBmaXJzdEVsZW1lbnRUb1JlbW92ZVtqcUxpdGUuZXhwYW5kb107CiAgICAgIGZvciAodmFyIGsgPSAxLCBrayA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoOyBrIDwga2s7IGsrKykgewogICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNUb1JlbW92ZVtrXTsKICAgICAgICBqcUxpdGUoZWxlbWVudCkucmVtb3ZlKCk7IC8vIG11c3QgZG8gdGhpcyB3YXkgdG8gY2xlYW4gdXAgZXhwYW5kbwogICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpOwogICAgICAgIGRlbGV0ZSBlbGVtZW50c1RvUmVtb3ZlW2tdOwogICAgICB9CgogICAgICBlbGVtZW50c1RvUmVtb3ZlWzBdID0gbmV3Tm9kZTsKICAgICAgZWxlbWVudHNUb1JlbW92ZS5sZW5ndGggPSAxOwogICAgfQoKCiAgICBmdW5jdGlvbiBjbG9uZUFuZEFubm90YXRlRm4oZm4sIGFubm90YXRpb24pIHsKICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbigpIHsgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH0sIGZuLCBhbm5vdGF0aW9uKTsKICAgIH0KICB9XTsKfQoKdmFyIFBSRUZJWF9SRUdFWFAgPSAvXih4W1w6XC1fXXxkYXRhW1w6XC1fXSkvaTsKLyoqCiAqIENvbnZlcnRzIGFsbCBhY2NlcHRlZCBkaXJlY3RpdmVzIGZvcm1hdCBpbnRvIHByb3BlciBkaXJlY3RpdmUgbmFtZS4KICogQWxsIG9mIHRoZXNlIHdpbGwgYmVjb21lICdteURpcmVjdGl2ZSc6CiAqICAgbXk6RGlyZWN0aXZlCiAqICAgbXktZGlyZWN0aXZlCiAqICAgeC1teS1kaXJlY3RpdmUKICogICBkYXRhLW15OmRpcmVjdGl2ZQogKgogKiBBbHNvIHRoZXJlIGlzIHNwZWNpYWwgY2FzZSBmb3IgTW96IHByZWZpeCBzdGFydGluZyB3aXRoIHVwcGVyIGNhc2UgbGV0dGVyLgogKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZQogKi8KZnVuY3Rpb24gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpIHsKICByZXR1cm4gY2FtZWxDYXNlKG5hbWUucmVwbGFjZShQUkVGSVhfUkVHRVhQLCAnJykpOwp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcwogKgogKiBAZGVzY3JpcHRpb24KICogQSBzaGFyZWQgb2JqZWN0IGJldHdlZW4gZGlyZWN0aXZlIGNvbXBpbGUgLyBsaW5raW5nIGZ1bmN0aW9ucyB3aGljaCBjb250YWlucyBub3JtYWxpemVkIERPTQogKiBlbGVtZW50IGF0dHJpYnV0ZXMuIFRoZSB2YWx1ZXMgcmVmbGVjdCBjdXJyZW50IGJpbmRpbmcgc3RhdGUgYHt7IH19YC4gVGhlIG5vcm1hbGl6YXRpb24gaXMKICogbmVlZGVkIHNpbmNlIGFsbCBvZiB0aGVzZSBhcmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IGluIEFuZ3VsYXI6CiAqCiAqICAgIDxzcGFuIG5nOmJpbmQ9ImEiIG5nLWJpbmQ9ImEiIGRhdGEtbmctYmluZD0iYSIgeC1uZy1iaW5kPSJhIj4KICovCgovKioKICogQG5nZG9jIHByb3BlcnR5CiAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhdHRyCiAqIEBwcm9wZXJ0eU9mIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzCiAqIEByZXR1cm5zIHtvYmplY3R9IEEgbWFwIG9mIERPTSBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lcyB0byB0aGUgbm9ybWFsaXplZCBuYW1lLiBUaGlzIGlzCiAqICAgICAgICAgICAgICAgICAgIG5lZWRlZCB0byBkbyByZXZlcnNlIGxvb2t1cCBmcm9tIG5vcm1hbGl6ZWQgbmFtZSBiYWNrIHRvIGFjdHVhbCBuYW1lLgogKi8KCgovKioKICogQG5nZG9jIGZ1bmN0aW9uCiAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRzZXQKICogQG1ldGhvZE9mIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogU2V0IERPTSBlbGVtZW50IGF0dHJpYnV0ZSB2YWx1ZS4KICoKICoKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9ybWFsaXplZCBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBtb2RpZnkuIFRoZSBuYW1lIGlzCiAqICAgICAgICAgIHJldmVyc2UtdHJhbnNsYXRlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhdHRyICRhdHRyfQogKiAgICAgICAgICBwcm9wZXJ0eSB0byB0aGUgb3JpZ2luYWwgbmFtZS4KICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHNldCB0aGUgYXR0cmlidXRlIHRvLiBUaGUgdmFsdWUgY2FuIGJlIGFuIGludGVycG9sYXRlZCBzdHJpbmcuCiAqLwoKCgovKioKICogQ2xvc3VyZSBjb21waWxlciB0eXBlIGluZm9ybWF0aW9uCiAqLwoKZnVuY3Rpb24gbm9kZXNldExpbmtpbmdGbigKICAvKiBhbmd1bGFyLlNjb3BlICovIHNjb3BlLAogIC8qIE5vZGVMaXN0ICovIG5vZGVMaXN0LAogIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsCiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovIGJvdW5kVHJhbnNjbHVkZUZuCil7fQoKZnVuY3Rpb24gZGlyZWN0aXZlTGlua2luZ0ZuKAogIC8qIG5vZGVzZXRMaW5raW5nRm4gKi8gbm9kZXNldExpbmtpbmdGbiwKICAvKiBhbmd1bGFyLlNjb3BlICovIHNjb3BlLAogIC8qIE5vZGUgKi8gbm9kZSwKICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LAogIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGbgope30KCmZ1bmN0aW9uIHRva2VuRGlmZmVyZW5jZShzdHIxLCBzdHIyKSB7CiAgdmFyIHZhbHVlcyA9ICcnLAogICAgICB0b2tlbnMxID0gc3RyMS5zcGxpdCgvXHMrLyksCiAgICAgIHRva2VuczIgPSBzdHIyLnNwbGl0KC9ccysvKTsKCiAgb3V0ZXI6CiAgZm9yKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHsKICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07CiAgICBmb3IodmFyIGogPSAwOyBqIDwgdG9rZW5zMi5sZW5ndGg7IGorKykgewogICAgICBpZih0b2tlbiA9PSB0b2tlbnMyW2pdKSBjb250aW51ZSBvdXRlcjsKICAgIH0KICAgIHZhbHVlcyArPSAodmFsdWVzLmxlbmd0aCA+IDAgPyAnICcgOiAnJykgKyB0b2tlbjsKICB9CiAgcmV0dXJuIHZhbHVlczsKfQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGNvbnRyb2xsZXJQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICogVGhlIHtAbGluayBuZy4kY29udHJvbGxlciAkY29udHJvbGxlciBzZXJ2aWNlfSBpcyB1c2VkIGJ5IEFuZ3VsYXIgdG8gY3JlYXRlIG5ldwogKiBjb250cm9sbGVycy4KICoKICogVGhpcyBwcm92aWRlciBhbGxvd3MgY29udHJvbGxlciByZWdpc3RyYXRpb24gdmlhIHRoZQogKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNtZXRob2RzX3JlZ2lzdGVyIHJlZ2lzdGVyfSBtZXRob2QuCiAqLwpmdW5jdGlvbiAkQ29udHJvbGxlclByb3ZpZGVyKCkgewogIHZhciBjb250cm9sbGVycyA9IHt9LAogICAgICBDTlRSTF9SRUcgPSAvXihcUyspKFxzK2FzXHMrKFx3KykpPyQvOwoKCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlcgogICAqIEBtZXRob2RPZiBuZy4kY29udHJvbGxlclByb3ZpZGVyCiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIENvbnRyb2xsZXIgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBjb250cm9sbGVycyB3aGVyZSB0aGUga2V5cyBhcmUKICAgKiAgICB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuCiAgICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheX0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmbiAob3B0aW9uYWxseSBkZWNvcmF0ZWQgd2l0aCBESQogICAqICAgIGFubm90YXRpb25zIGluIHRoZSBhcnJheSBub3RhdGlvbikuCiAgICovCiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGNvbnN0cnVjdG9yKSB7CiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnY29udHJvbGxlcicpOwogICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7CiAgICAgIGV4dGVuZChjb250cm9sbGVycywgbmFtZSk7CiAgICB9IGVsc2UgewogICAgICBjb250cm9sbGVyc1tuYW1lXSA9IGNvbnN0cnVjdG9yOwogICAgfQogIH07CgoKICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckd2luZG93JywgZnVuY3Rpb24oJGluamVjdG9yLCAkd2luZG93KSB7CgogICAgLyoqCiAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAqIEBuYW1lIG5nLiRjb250cm9sbGVyCiAgICAgKiBAcmVxdWlyZXMgJGluamVjdG9yCiAgICAgKgogICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGNvbnN0cnVjdG9yIElmIGNhbGxlZCB3aXRoIGEgZnVuY3Rpb24gdGhlbiBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgdGhlCiAgICAgKiAgICBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBPdGhlcndpc2UgaXQncyBjb25zaWRlcmVkIHRvIGJlIGEgc3RyaW5nIHdoaWNoIGlzIHVzZWQKICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6CiAgICAgKgogICAgICogICAgKiBjaGVjayBpZiBhIGNvbnRyb2xsZXIgd2l0aCBnaXZlbiBuYW1lIGlzIHJlZ2lzdGVyZWQgdmlhIGAkY29udHJvbGxlclByb3ZpZGVyYAogICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yCiAgICAgKiAgICAqIGNoZWNrIGB3aW5kb3dbY29uc3RydWN0b3JdYCBvbiB0aGUgZ2xvYmFsIGB3aW5kb3dgIG9iamVjdAogICAgICoKICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci4KICAgICAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgZ2l2ZW4gY29udHJvbGxlci4KICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIGAkY29udHJvbGxlcmAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgaW5zdGFudGlhdGluZyBjb250cm9sbGVycy4KICAgICAqCiAgICAgKiBJdCdzIGp1c3QgYSBzaW1wbGUgY2FsbCB0byB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvCiAgICAgKiBhIHNlcnZpY2UsIHNvIHRoYXQgb25lIGNhbiBvdmVycmlkZSB0aGlzIHNlcnZpY2Ugd2l0aCB7QGxpbmsgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTY0OTc4OAogICAgICogQkMgdmVyc2lvbn0uCiAgICAgKi8KICAgIHJldHVybiBmdW5jdGlvbihleHByZXNzaW9uLCBsb2NhbHMpIHsKICAgICAgdmFyIGluc3RhbmNlLCBtYXRjaCwgY29uc3RydWN0b3IsIGlkZW50aWZpZXI7CgogICAgICBpZihpc1N0cmluZyhleHByZXNzaW9uKSkgewogICAgICAgIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaChDTlRSTF9SRUcpLAogICAgICAgIGNvbnN0cnVjdG9yID0gbWF0Y2hbMV0sCiAgICAgICAgaWRlbnRpZmllciA9IG1hdGNoWzNdOwogICAgICAgIGV4cHJlc3Npb24gPSBjb250cm9sbGVycy5oYXNPd25Qcm9wZXJ0eShjb25zdHJ1Y3RvcikKICAgICAgICAgICAgPyBjb250cm9sbGVyc1tjb25zdHJ1Y3Rvcl0KICAgICAgICAgICAgOiBnZXR0ZXIobG9jYWxzLiRzY29wZSwgY29uc3RydWN0b3IsIHRydWUpIHx8IGdldHRlcigkd2luZG93LCBjb25zdHJ1Y3RvciwgdHJ1ZSk7CgogICAgICAgIGFzc2VydEFyZ0ZuKGV4cHJlc3Npb24sIGNvbnN0cnVjdG9yLCB0cnVlKTsKICAgICAgfQoKICAgICAgaW5zdGFuY2UgPSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoZXhwcmVzc2lvbiwgbG9jYWxzKTsKCiAgICAgIGlmIChpZGVudGlmaWVyKSB7CiAgICAgICAgaWYgKCEobG9jYWxzICYmIHR5cGVvZiBsb2NhbHMuJHNjb3BlID09ICdvYmplY3QnKSkgewogICAgICAgICAgdGhyb3cgbWluRXJyKCckY29udHJvbGxlcicpKCdub3NjcCcsCiAgICAgICAgICAgICAgIkNhbm5vdCBleHBvcnQgY29udHJvbGxlciAnezB9JyBhcyAnezF9JyEgTm8gJHNjb3BlIG9iamVjdCBwcm92aWRlZCB2aWEgYGxvY2Fsc2AuIiwKICAgICAgICAgICAgICBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUsIGlkZW50aWZpZXIpOwogICAgICAgIH0KCiAgICAgICAgbG9jYWxzLiRzY29wZVtpZGVudGlmaWVyXSA9IGluc3RhbmNlOwogICAgICB9CgogICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICB9OwogIH1dOwp9CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kZG9jdW1lbnQKICogQHJlcXVpcmVzICR3aW5kb3cKICoKICogQGRlc2NyaXB0aW9uCiAqIEEge0BsaW5rIGFuZ3VsYXIuZWxlbWVudCBqUXVlcnkgb3IganFMaXRlfSB3cmFwcGVyIGZvciB0aGUgYnJvd3NlcidzIGB3aW5kb3cuZG9jdW1lbnRgIG9iamVjdC4KICovCmZ1bmN0aW9uICREb2N1bWVudFByb3ZpZGVyKCl7CiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24od2luZG93KXsKICAgIHJldHVybiBqcUxpdGUod2luZG93LmRvY3VtZW50KTsKICB9XTsKfQoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBuZy4kZXhjZXB0aW9uSGFuZGxlcgogKiBAcmVxdWlyZXMgJGxvZwogKgogKiBAZGVzY3JpcHRpb24KICogQW55IHVuY2F1Z2h0IGV4Y2VwdGlvbiBpbiBhbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRlbGVnYXRlZCB0byB0aGlzIHNlcnZpY2UuCiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSBkZWxlZ2F0ZXMgdG8gYCRsb2cuZXJyb3JgIHdoaWNoIGxvZ3MgaXQgaW50bwogKiB0aGUgYnJvd3NlciBjb25zb2xlLgogKiAKICogSW4gdW5pdCB0ZXN0cywgaWYgYGFuZ3VsYXItbW9ja3MuanNgIGlzIGxvYWRlZCwgdGhpcyBzZXJ2aWNlIGlzIG92ZXJyaWRkZW4gYnkKICoge0BsaW5rIG5nTW9jay4kZXhjZXB0aW9uSGFuZGxlciBtb2NrICRleGNlcHRpb25IYW5kbGVyfSB3aGljaCBhaWRzIGluIHRlc3RpbmcuCiAqCiAqICMjIEV4YW1wbGU6CiAqIAogKiA8cHJlPgogKiAgIGFuZ3VsYXIubW9kdWxlKCdleGNlcHRpb25PdmVycmlkZScsIFtdKS5mYWN0b3J5KCckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uICgpIHsKICogICAgIHJldHVybiBmdW5jdGlvbiAoZXhjZXB0aW9uLCBjYXVzZSkgewogKiAgICAgICBleGNlcHRpb24ubWVzc2FnZSArPSAnIChjYXVzZWQgYnkgIicgKyBjYXVzZSArICciKSc7CiAqICAgICAgIHRocm93IGV4Y2VwdGlvbjsKICogICAgIH07CiAqICAgfSk7CiAqIDwvcHJlPgogKiAKICogVGhpcyBleGFtcGxlIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbCBhY3Rpb24gb2YgYCRleGNlcHRpb25IYW5kbGVyYCwgdG8gbWFrZSBhbmd1bGFyCiAqIGV4Y2VwdGlvbnMgZmFpbCBoYXJkIHdoZW4gdGhleSBoYXBwZW4sIGluc3RlYWQgb2YganVzdCBsb2dnaW5nIHRvIHRoZSBjb25zb2xlLgogKgogKiBAcGFyYW0ge0Vycm9yfSBleGNlcHRpb24gRXhjZXB0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IuCiAqIEBwYXJhbSB7c3RyaW5nPX0gY2F1c2Ugb3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbnRleHQgaW4gd2hpY2gKICogICAgICAgdGhlIGVycm9yIHdhcyB0aHJvd24uCiAqCiAqLwpmdW5jdGlvbiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkgewogIHRoaXMuJGdldCA9IFsnJGxvZycsIGZ1bmN0aW9uKCRsb2cpIHsKICAgIHJldHVybiBmdW5jdGlvbihleGNlcHRpb24sIGNhdXNlKSB7CiAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTsKICAgIH07CiAgfV07Cn0KCi8qKgogKiBQYXJzZSBoZWFkZXJzIGludG8ga2V5IHZhbHVlIG9iamVjdAogKgogKiBAcGFyYW0ge3N0cmluZ30gaGVhZGVycyBSYXcgaGVhZGVycyBhcyBhIHN0cmluZwogKiBAcmV0dXJucyB7T2JqZWN0fSBQYXJzZWQgaGVhZGVycyBhcyBrZXkgdmFsdWUgb2JqZWN0CiAqLwpmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykgewogIHZhciBwYXJzZWQgPSB7fSwga2V5LCB2YWwsIGk7CgogIGlmICghaGVhZGVycykgcmV0dXJuIHBhcnNlZDsKCiAgZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcbicpLCBmdW5jdGlvbihsaW5lKSB7CiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7CiAgICBrZXkgPSBsb3dlcmNhc2UodHJpbShsaW5lLnN1YnN0cigwLCBpKSkpOwogICAgdmFsID0gdHJpbShsaW5lLnN1YnN0cihpICsgMSkpOwoKICAgIGlmIChrZXkpIHsKICAgICAgaWYgKHBhcnNlZFtrZXldKSB7CiAgICAgICAgcGFyc2VkW2tleV0gKz0gJywgJyArIHZhbDsKICAgICAgfSBlbHNlIHsKICAgICAgICBwYXJzZWRba2V5XSA9IHZhbDsKICAgICAgfQogICAgfQogIH0pOwoKICByZXR1cm4gcGFyc2VkOwp9CgoKLyoqCiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byBwYXJzZWQgaGVhZGVycy4KICoKICogSGVhZGVycyBhcmUgbGF6eSBwYXJzZWQgd2hlbiBmaXJzdCByZXF1ZXN0ZWQuCiAqIEBzZWUgcGFyc2VIZWFkZXJzCiAqCiAqIEBwYXJhbSB7KHN0cmluZ3xPYmplY3QpfSBoZWFkZXJzIEhlYWRlcnMgdG8gcHJvdmlkZSBhY2Nlc3MgdG8uCiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmc9KX0gUmV0dXJucyBhIGdldHRlciBmdW5jdGlvbiB3aGljaCBpZiBjYWxsZWQgd2l0aDoKICoKICogICAtIGlmIGNhbGxlZCB3aXRoIHNpbmdsZSBhbiBhcmd1bWVudCByZXR1cm5zIGEgc2luZ2xlIGhlYWRlciB2YWx1ZSBvciBudWxsCiAqICAgLSBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMgcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgaGVhZGVycy4KICovCmZ1bmN0aW9uIGhlYWRlcnNHZXR0ZXIoaGVhZGVycykgewogIHZhciBoZWFkZXJzT2JqID0gaXNPYmplY3QoaGVhZGVycykgPyBoZWFkZXJzIDogdW5kZWZpbmVkOwoKICByZXR1cm4gZnVuY3Rpb24obmFtZSkgewogICAgaWYgKCFoZWFkZXJzT2JqKSBoZWFkZXJzT2JqID0gIHBhcnNlSGVhZGVycyhoZWFkZXJzKTsKCiAgICBpZiAobmFtZSkgewogICAgICByZXR1cm4gaGVhZGVyc09ialtsb3dlcmNhc2UobmFtZSldIHx8IG51bGw7CiAgICB9CgogICAgcmV0dXJuIGhlYWRlcnNPYmo7CiAgfTsKfQoKCi8qKgogKiBDaGFpbiBhbGwgZ2l2ZW4gZnVuY3Rpb25zCiAqCiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBmb3IgYm90aCByZXF1ZXN0IGFuZCByZXNwb25zZSB0cmFuc2Zvcm1pbmcKICoKICogQHBhcmFtIHsqfSBkYXRhIERhdGEgdG8gdHJhbnNmb3JtLgogKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZz0pfSBoZWFkZXJzIEh0dHAgaGVhZGVycyBnZXR0ZXIgZm4uCiAqIEBwYXJhbSB7KGZ1bmN0aW9ufEFycmF5LjxmdW5jdGlvbj4pfSBmbnMgRnVuY3Rpb24gb3IgYW4gYXJyYXkgb2YgZnVuY3Rpb25zLgogKiBAcmV0dXJucyB7Kn0gVHJhbnNmb3JtZWQgZGF0YS4KICovCmZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7CiAgaWYgKGlzRnVuY3Rpb24oZm5zKSkKICAgIHJldHVybiBmbnMoZGF0YSwgaGVhZGVycyk7CgogIGZvckVhY2goZm5zLCBmdW5jdGlvbihmbikgewogICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpOwogIH0pOwoKICByZXR1cm4gZGF0YTsKfQoKCmZ1bmN0aW9uIGlzU3VjY2VzcyhzdGF0dXMpIHsKICByZXR1cm4gMjAwIDw9IHN0YXR1cyAmJiBzdGF0dXMgPCAzMDA7Cn0KCgpmdW5jdGlvbiAkSHR0cFByb3ZpZGVyKCkgewogIHZhciBKU09OX1NUQVJUID0gL15ccyooXFt8XHtbXlx7XSkvLAogICAgICBKU09OX0VORCA9IC9bXH1cXV1ccyokLywKICAgICAgUFJPVEVDVElPTl9QUkVGSVggPSAvXlwpXF1cfScsP1xuLywKICAgICAgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnfTsKCiAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHsKICAgIC8vIHRyYW5zZm9ybSBpbmNvbWluZyByZXNwb25zZSBkYXRhCiAgICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uKGRhdGEpIHsKICAgICAgaWYgKGlzU3RyaW5nKGRhdGEpKSB7CiAgICAgICAgLy8gc3RyaXAganNvbiB2dWxuZXJhYmlsaXR5IHByb3RlY3Rpb24gcHJlZml4CiAgICAgICAgZGF0YSA9IGRhdGEucmVwbGFjZShQUk9URUNUSU9OX1BSRUZJWCwgJycpOwogICAgICAgIGlmIChKU09OX1NUQVJULnRlc3QoZGF0YSkgJiYgSlNPTl9FTkQudGVzdChkYXRhKSkKICAgICAgICAgIGRhdGEgPSBmcm9tSnNvbihkYXRhKTsKICAgICAgfQogICAgICByZXR1cm4gZGF0YTsKICAgIH1dLAoKICAgIC8vIHRyYW5zZm9ybSBvdXRnb2luZyByZXF1ZXN0IGRhdGEKICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkKSB7CiAgICAgIHJldHVybiBpc09iamVjdChkKSAmJiAhaXNGaWxlKGQpID8gdG9Kc29uKGQpIDogZDsKICAgIH1dLAoKICAgIC8vIGRlZmF1bHQgaGVhZGVycwogICAgaGVhZGVyczogewogICAgICBjb21tb246IHsKICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicKICAgICAgfSwKICAgICAgcG9zdDogICBjb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSwKICAgICAgcHV0OiAgICBjb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSwKICAgICAgcGF0Y2g6ICBjb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKQogICAgfSwKCiAgICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLAogICAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nCiAgfTsKCiAgLyoqCiAgICogQXJlIG9yZGVyZWQgYnkgcmVxdWVzdCwgaS5lLiB0aGV5IGFyZSBhcHBsaWVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZQogICAqIGFycmF5LCBvbiByZXF1ZXN0LCBidXQgcmV2ZXJzZSBvcmRlciwgb24gcmVzcG9uc2UuCiAgICovCiAgdmFyIGludGVyY2VwdG9yRmFjdG9yaWVzID0gdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTsKCiAgLyoqCiAgICogRm9yIGhpc3RvcmljYWwgcmVhc29ucywgcmVzcG9uc2UgaW50ZXJjZXB0b3JzIGFyZSBvcmRlcmVkIGJ5IHRoZSBvcmRlciBpbiB3aGljaAogICAqIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHJlc3BvbnNlLiAoVGhpcyBpcyB0aGUgb3Bwb3NpdGUgb2YgaW50ZXJjZXB0b3JGYWN0b3JpZXMpCiAgICovCiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JGYWN0b3JpZXMgPSB0aGlzLnJlc3BvbnNlSW50ZXJjZXB0b3JzID0gW107CgogIHRoaXMuJGdldCA9IFsnJGh0dHBCYWNrZW5kJywgJyRicm93c2VyJywgJyRjYWNoZUZhY3RvcnknLCAnJHJvb3RTY29wZScsICckcScsICckaW5qZWN0b3InLAogICAgICBmdW5jdGlvbigkaHR0cEJhY2tlbmQsICRicm93c2VyLCAkY2FjaGVGYWN0b3J5LCAkcm9vdFNjb3BlLCAkcSwgJGluamVjdG9yKSB7CgogICAgdmFyIGRlZmF1bHRDYWNoZSA9ICRjYWNoZUZhY3RvcnkoJyRodHRwJyk7CgogICAgLyoqCiAgICAgKiBJbnRlcmNlcHRvcnMgc3RvcmVkIGluIHJldmVyc2Ugb3JkZXIuIElubmVyIGludGVyY2VwdG9ycyBiZWZvcmUgb3V0ZXIgaW50ZXJjZXB0b3JzLgogICAgICogVGhlIHJldmVyc2FsIGlzIG5lZWRlZCBzbyB0aGF0IHdlIGNhbiBidWlsZCB1cCB0aGUgaW50ZXJjZXB0aW9uIGNoYWluIGFyb3VuZCB0aGUKICAgICAqIHNlcnZlciByZXF1ZXN0LgogICAgICovCiAgICB2YXIgcmV2ZXJzZWRJbnRlcmNlcHRvcnMgPSBbXTsKCiAgICBmb3JFYWNoKGludGVyY2VwdG9yRmFjdG9yaWVzLCBmdW5jdGlvbihpbnRlcmNlcHRvckZhY3RvcnkpIHsKICAgICAgcmV2ZXJzZWRJbnRlcmNlcHRvcnMudW5zaGlmdChpc1N0cmluZyhpbnRlcmNlcHRvckZhY3RvcnkpCiAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoaW50ZXJjZXB0b3JGYWN0b3J5KSA6ICRpbmplY3Rvci5pbnZva2UoaW50ZXJjZXB0b3JGYWN0b3J5KSk7CiAgICB9KTsKCiAgICBmb3JFYWNoKHJlc3BvbnNlSW50ZXJjZXB0b3JGYWN0b3JpZXMsIGZ1bmN0aW9uKGludGVyY2VwdG9yRmFjdG9yeSwgaW5kZXgpIHsKICAgICAgdmFyIHJlc3BvbnNlRm4gPSBpc1N0cmluZyhpbnRlcmNlcHRvckZhY3RvcnkpCiAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoaW50ZXJjZXB0b3JGYWN0b3J5KQogICAgICAgICAgOiAkaW5qZWN0b3IuaW52b2tlKGludGVyY2VwdG9yRmFjdG9yeSk7CgogICAgICAvKioKICAgICAgICogUmVzcG9uc2UgaW50ZXJjZXB0b3JzIGdvIGJlZm9yZSAiYXJvdW5kIiBpbnRlcmNlcHRvcnMgKG5vIHJlYWwgcmVhc29uLCBqdXN0CiAgICAgICAqIGhhZCB0byBwaWNrIG9uZS4pIEJ1dCB0aGV5IGFyZSBhbHJlYWR5IHJldmVyc2VkLCBzbyB3ZSBjYW4ndCB1c2UgdW5zaGlmdCwgaGVuY2UKICAgICAgICogdGhlIHNwbGljZS4KICAgICAgICovCiAgICAgIHJldmVyc2VkSW50ZXJjZXB0b3JzLnNwbGljZShpbmRleCwgMCwgewogICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgcmV0dXJuIHJlc3BvbnNlRm4oJHEud2hlbihyZXNwb25zZSkpOwogICAgICAgIH0sCiAgICAgICAgcmVzcG9uc2VFcnJvcjogZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgIHJldHVybiByZXNwb25zZUZuKCRxLnJlamVjdChyZXNwb25zZSkpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9KTsKCgogICAgLyoqCiAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAqIEBuYW1lIG5nLiRodHRwCiAgICAgKiBAcmVxdWlyZXMgJGh0dHBCYWNrZW5kCiAgICAgKiBAcmVxdWlyZXMgJGJyb3dzZXIKICAgICAqIEByZXF1aXJlcyAkY2FjaGVGYWN0b3J5CiAgICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZQogICAgICogQHJlcXVpcmVzICRxCiAgICAgKiBAcmVxdWlyZXMgJGluamVjdG9yCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBUaGUgYCRodHRwYCBzZXJ2aWNlIGlzIGEgY29yZSBBbmd1bGFyIHNlcnZpY2UgdGhhdCBmYWNpbGl0YXRlcyBjb21tdW5pY2F0aW9uIHdpdGggdGhlIHJlbW90ZQogICAgICogSFRUUCBzZXJ2ZXJzIHZpYSB0aGUgYnJvd3NlcidzIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi94bWxodHRwcmVxdWVzdAogICAgICogWE1MSHR0cFJlcXVlc3R9IG9iamVjdCBvciB2aWEge0BsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlAgSlNPTlB9LgogICAgICoKICAgICAqIEZvciB1bml0IHRlc3RpbmcgYXBwbGljYXRpb25zIHRoYXQgdXNlIGAkaHR0cGAgc2VydmljZSwgc2VlCiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCAkaHR0cEJhY2tlbmQgbW9ja30uCiAgICAgKgogICAgICogRm9yIGEgaGlnaGVyIGxldmVsIG9mIGFic3RyYWN0aW9uLCBwbGVhc2UgY2hlY2sgb3V0IHRoZSB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2UKICAgICAqICRyZXNvdXJjZX0gc2VydmljZS4KICAgICAqCiAgICAgKiBUaGUgJGh0dHAgQVBJIGlzIGJhc2VkIG9uIHRoZSB7QGxpbmsgbmcuJHEgZGVmZXJyZWQvcHJvbWlzZSBBUElzfSBleHBvc2VkIGJ5CiAgICAgKiB0aGUgJHEgc2VydmljZS4gV2hpbGUgZm9yIHNpbXBsZSB1c2FnZSBwYXR0ZXJucyB0aGlzIGRvZXNuJ3QgbWF0dGVyIG11Y2gsIGZvciBhZHZhbmNlZCB1c2FnZQogICAgICogaXQgaXMgaW1wb3J0YW50IHRvIGZhbWlsaWFyaXplIHlvdXJzZWxmIHdpdGggdGhlc2UgQVBJcyBhbmQgdGhlIGd1YXJhbnRlZXMgdGhleSBwcm92aWRlLgogICAgICoKICAgICAqCiAgICAgKiAjIEdlbmVyYWwgdXNhZ2UKICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudCDigJQgYSBjb25maWd1cmF0aW9uIG9iamVjdCDigJQKICAgICAqIHRoYXQgaXMgdXNlZCB0byBnZW5lcmF0ZSBhbiBIVFRQIHJlcXVlc3QgYW5kIHJldHVybnMgIGEge0BsaW5rIG5nLiRxIHByb21pc2V9CiAgICAgKiB3aXRoIHR3byAkaHR0cCBzcGVjaWZpYyBtZXRob2RzOiBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAuCiAgICAgKgogICAgICogPHByZT4KICAgICAqICAgJGh0dHAoe21ldGhvZDogJ0dFVCcsIHVybDogJy9zb21lVXJsJ30pLgogICAgICogICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHsKICAgICAqICAgICAgIC8vIHRoaXMgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkKICAgICAqICAgICAgIC8vIHdoZW4gdGhlIHJlc3BvbnNlIGlzIGF2YWlsYWJsZQogICAgICogICAgIH0pLgogICAgICogICAgIGVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7CiAgICAgKiAgICAgICAvLyBjYWxsZWQgYXN5bmNocm9ub3VzbHkgaWYgYW4gZXJyb3Igb2NjdXJzCiAgICAgKiAgICAgICAvLyBvciBzZXJ2ZXIgcmV0dXJucyByZXNwb25zZSB3aXRoIGFuIGVycm9yIHN0YXR1cy4KICAgICAqICAgICB9KTsKICAgICAqIDwvcHJlPgogICAgICoKICAgICAqIFNpbmNlIHRoZSByZXR1cm5lZCB2YWx1ZSBvZiBjYWxsaW5nIHRoZSAkaHR0cCBmdW5jdGlvbiBpcyBhIGBwcm9taXNlYCwgeW91IGNhbiBhbHNvIHVzZQogICAgICogdGhlIGB0aGVuYCBtZXRob2QgdG8gcmVnaXN0ZXIgY2FsbGJhY2tzLCBhbmQgdGhlc2UgY2FsbGJhY2tzIHdpbGwgcmVjZWl2ZSBhIHNpbmdsZSBhcmd1bWVudCDigJMKICAgICAqIGFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHJlc3BvbnNlLiBTZWUgdGhlIEFQSSBzaWduYXR1cmUgYW5kIHR5cGUgaW5mbyBiZWxvdyBmb3IgbW9yZQogICAgICogZGV0YWlscy4KICAgICAqCiAgICAgKiBBIHJlc3BvbnNlIHN0YXR1cyBjb2RlIGJldHdlZW4gMjAwIGFuZCAyOTkgaXMgY29uc2lkZXJlZCBhIHN1Y2Nlc3Mgc3RhdHVzIGFuZAogICAgICogd2lsbCByZXN1bHQgaW4gdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgYmVpbmcgY2FsbGVkLiBOb3RlIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsCiAgICAgKiBYTUxIdHRwUmVxdWVzdCB3aWxsIHRyYW5zcGFyZW50bHkgZm9sbG93IGl0LCBtZWFuaW5nIHRoYXQgdGhlIGVycm9yIGNhbGxiYWNrIHdpbGwgbm90IGJlCiAgICAgKiBjYWxsZWQgZm9yIHN1Y2ggcmVzcG9uc2VzLgogICAgICoKICAgICAqICMgQ2FsbGluZyAkaHR0cCBmcm9tIG91dHNpZGUgQW5ndWxhckpTCiAgICAgKiBUaGUgYCRodHRwYCBzZXJ2aWNlIHdpbGwgbm90IGFjdHVhbGx5IHNlbmQgdGhlIHJlcXVlc3QgdW50aWwgdGhlIG5leHQgYCRkaWdlc3QoKWAgaXMKICAgICAqIGV4ZWN1dGVkLiBOb3JtYWxseSB0aGlzIGlzIG5vdCBhbiBpc3N1ZSwgc2luY2UgYWxtb3N0IGFsbCB0aGUgdGltZSB5b3VyIGNhbGwgdG8gYCRodHRwYCB3aWxsCiAgICAgKiBiZSBmcm9tIHdpdGhpbiBhIGAkYXBwbHkoKWAgYmxvY2suCiAgICAgKiBJZiB5b3UgYXJlIGNhbGxpbmcgYCRodHRwYCBmcm9tIG91dHNpZGUgQW5ndWxhciwgdGhlbiB5b3Ugc2hvdWxkIHdyYXAgaXQgaW4gYSBjYWxsIHRvCiAgICAgKiBgJGFwcGx5YCB0byBjYXVzZSBhICRkaWdlc3QgdG8gb2NjdXIgYW5kIGFsc28gdG8gaGFuZGxlIGVycm9ycyBpbiB0aGUgYmxvY2sgY29ycmVjdGx5LgogICAgICoKICAgICAqIGBgYAogICAgICogJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAqICAgJGh0dHAoLi4uKTsKICAgICAqIH0pOwogICAgICogYGBgCiAgICAgKgogICAgICogIyBXcml0aW5nIFVuaXQgVGVzdHMgdGhhdCB1c2UgJGh0dHAKICAgICAqIFdoZW4gdW5pdCB0ZXN0aW5nIHlvdSBhcmUgbW9zdGx5IHJlc3BvbnNpYmxlIGZvciBzY2hlZHVsaW5nIHRoZSBgJGRpZ2VzdGAgY3ljbGUuIElmIHlvdSBkbwogICAgICogbm90IHRyaWdnZXIgYSBgJGRpZ2VzdGAgYmVmb3JlIGNhbGxpbmcgYCRodHRwQmFja2VuZC5mbHVzaCgpYCB0aGVuIHRoZSByZXF1ZXN0IHdpbGwgbm90IGhhdmUKICAgICAqIGJlZW4gbWFkZSBhbmQgYCRodHRwQmFja2VuZC5leHBlY3QoLi4uKWAgZXhwZWN0YXRpb25zIHdpbGwgZmFpbC4gIFRoZSBzb2x1dGlvbiBpcyB0byBydW4gdGhlCiAgICAgKiBjb2RlIHRoYXQgY2FsbHMgdGhlIGAkaHR0cCgpYCBtZXRob2QgaW5zaWRlIGEgJGFwcGx5IGJsb2NrIGFzIGV4cGxhaW5lZCBpbiB0aGUgcHJldmlvdXMKICAgICAqIHNlY3Rpb24uCiAgICAgKgogICAgICogYGBgCiAgICAgKiAkaHR0cEJhY2tlbmQuZXhwZWN0R0VUKC4uLik7CiAgICAgKiAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICogICAkaHR0cC5nZXQoLi4uKTsKICAgICAqIH0pOwogICAgICogJGh0dHBCYWNrZW5kLmZsdXNoKCk7CiAgICAgKiBgYGAKICAgICAqCiAgICAgKiAjIFNob3J0Y3V0IG1ldGhvZHMKICAgICAqCiAgICAgKiBTaW5jZSBhbGwgaW52b2NhdGlvbnMgb2YgdGhlICRodHRwIHNlcnZpY2UgcmVxdWlyZSBwYXNzaW5nIGluIGFuIEhUVFAgbWV0aG9kIGFuZCBVUkwsIGFuZAogICAgICogUE9TVC9QVVQgcmVxdWVzdHMgcmVxdWlyZSByZXF1ZXN0IGRhdGEgdG8gYmUgcHJvdmlkZWQgYXMgd2VsbCwgc2hvcnRjdXQgbWV0aG9kcwogICAgICogd2VyZSBjcmVhdGVkOgogICAgICoKICAgICAqIDxwcmU+CiAgICAgKiAgICRodHRwLmdldCgnL3NvbWVVcmwnKS5zdWNjZXNzKHN1Y2Nlc3NDYWxsYmFjayk7CiAgICAgKiAgICRodHRwLnBvc3QoJy9zb21lVXJsJywgZGF0YSkuc3VjY2VzcyhzdWNjZXNzQ2FsbGJhY2spOwogICAgICogPC9wcmU+CiAgICAgKgogICAgICogQ29tcGxldGUgbGlzdCBvZiBzaG9ydGN1dCBtZXRob2RzOgogICAgICoKICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI21ldGhvZHNfZ2V0ICRodHRwLmdldH0KICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI21ldGhvZHNfaGVhZCAkaHR0cC5oZWFkfQogICAgICogLSB7QGxpbmsgbmcuJGh0dHAjbWV0aG9kc19wb3N0ICRodHRwLnBvc3R9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNtZXRob2RzX3B1dCAkaHR0cC5wdXR9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNtZXRob2RzX2RlbGV0ZSAkaHR0cC5kZWxldGV9CiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNtZXRob2RzX2pzb25wICRodHRwLmpzb25wfQogICAgICoKICAgICAqCiAgICAgKiAjIFNldHRpbmcgSFRUUCBIZWFkZXJzCiAgICAgKgogICAgICogVGhlICRodHRwIHNlcnZpY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGFkZCBjZXJ0YWluIEhUVFAgaGVhZGVycyB0byBhbGwgcmVxdWVzdHMuIFRoZXNlIGRlZmF1bHRzCiAgICAgKiBjYW4gYmUgZnVsbHkgY29uZmlndXJlZCBieSBhY2Nlc3NpbmcgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnNgIGNvbmZpZ3VyYXRpb24KICAgICAqIG9iamVjdCwgd2hpY2ggY3VycmVudGx5IGNvbnRhaW5zIHRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uOgogICAgICoKICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25gIChoZWFkZXJzIHRoYXQgYXJlIGNvbW1vbiBmb3IgYWxsIHJlcXVlc3RzKToKICAgICAqICAgLSBgQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqIC8gKmAKICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cykKICAgICAqICAgLSBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYAogICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnB1dGAgKGhlYWRlciBkZWZhdWx0cyBmb3IgUFVUIHJlcXVlc3RzKQogICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gCiAgICAgKgogICAgICogVG8gYWRkIG9yIG92ZXJ3cml0ZSB0aGVzZSBkZWZhdWx0cywgc2ltcGx5IGFkZCBvciByZW1vdmUgYSBwcm9wZXJ0eSBmcm9tIHRoZXNlIGNvbmZpZ3VyYXRpb24KICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdAogICAgICogd2l0aCB0aGUgbG93ZXJjYXNlZCBIVFRQIG1ldGhvZCBuYW1lIGFzIHRoZSBrZXksIGUuZy4KICAgICAqIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0ID0geyAnTXktSGVhZGVyJyA6ICd2YWx1ZScgfS4KICAgICAqCiAgICAgKiBUaGUgZGVmYXVsdHMgY2FuIGFsc28gYmUgc2V0IGF0IHJ1bnRpbWUgdmlhIHRoZSBgJGh0dHAuZGVmYXVsdHNgIG9iamVjdCBpbiB0aGUgc2FtZQogICAgICogZmFzaGlvbi4gRm9yIGV4YW1wbGU6CiAgICAgKgogICAgICogYGBgCiAgICAgKiBtb2R1bGUucnVuKGZ1bmN0aW9uKCRodHRwKSB7CiAgICAgKiAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhlbnRpY2F0aW9uID0gJ0Jhc2ljIFltVmxjRHBpYjI5dycKICAgICAqIH0pOwogICAgICogYGBgCiAgICAgKgogICAgICogSW4gYWRkaXRpb24sIHlvdSBjYW4gc3VwcGx5IGEgYGhlYWRlcnNgIHByb3BlcnR5IGluIHRoZSBjb25maWcgb2JqZWN0IHBhc3NlZCB3aGVuCiAgICAgKiBjYWxsaW5nIGAkaHR0cChjb25maWcpYCwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBkZWZhdWx0cyB3aXRob3V0IGNoYW5naW5nIHRoZW0gZ2xvYmFsbHkuCiAgICAgKgogICAgICoKICAgICAqICMgVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXMKICAgICAqCiAgICAgKiBCb3RoIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgY2FuIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHRyYW5zZm9ybSBmdW5jdGlvbnMuIEJ5IGRlZmF1bHQsIEFuZ3VsYXIKICAgICAqIGFwcGxpZXMgdGhlc2UgdHJhbnNmb3JtYXRpb25zOgogICAgICoKICAgICAqIFJlcXVlc3QgdHJhbnNmb3JtYXRpb25zOgogICAgICoKICAgICAqIC0gSWYgdGhlIGBkYXRhYCBwcm9wZXJ0eSBvZiB0aGUgcmVxdWVzdCBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWlucyBhbiBvYmplY3QsIHNlcmlhbGl6ZSBpdAogICAgICogICBpbnRvIEpTT04gZm9ybWF0LgogICAgICoKICAgICAqIFJlc3BvbnNlIHRyYW5zZm9ybWF0aW9uczoKICAgICAqCiAgICAgKiAgLSBJZiBYU1JGIHByZWZpeCBpcyBkZXRlY3RlZCwgc3RyaXAgaXQgKHNlZSBTZWN1cml0eSBDb25zaWRlcmF0aW9ucyBzZWN0aW9uIGJlbG93KS4KICAgICAqICAtIElmIEpTT04gcmVzcG9uc2UgaXMgZGV0ZWN0ZWQsIGRlc2VyaWFsaXplIGl0IHVzaW5nIGEgSlNPTiBwYXJzZXIuCiAgICAgKgogICAgICogVG8gZ2xvYmFsbHkgYXVnbWVudCBvciBvdmVycmlkZSB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1zLCBtb2RpZnkgdGhlCiAgICAgKiBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCBhbmQgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgCiAgICAgKiBwcm9wZXJ0aWVzLiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSBieSBkZWZhdWx0IGFuIGFycmF5IG9mIHRyYW5zZm9ybSBmdW5jdGlvbnMsIHdoaWNoIGFsbG93cyB5b3UKICAgICAqIHRvIGBwdXNoYCBvciBgdW5zaGlmdGAgYSBuZXcgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gaW50byB0aGUgdHJhbnNmb3JtYXRpb24gY2hhaW4uIFlvdSBjYW4KICAgICAqIGFsc28gZGVjaWRlIHRvIGNvbXBsZXRlbHkgb3ZlcnJpZGUgYW55IGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIGJ5IGFzc2lnbmluZyB5b3VyCiAgICAgKiB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnMgdG8gdGhlc2UgcHJvcGVydGllcyBkaXJlY3RseSB3aXRob3V0IHRoZSBhcnJheSB3cmFwcGVyLiAgVGhlc2UgZGVmYXVsdHMKICAgICAqIGFyZSBhZ2FpbiBhdmFpbGFibGUgb24gdGhlICRodHRwIGZhY3RvcnkgYXQgcnVuLXRpbWUsIHdoaWNoIG1heSBiZSB1c2VmdWwgaWYgeW91IGhhdmUgcnVuLXRpbWUKICAgICAqIHNlcnZpY2VzIHlvdSB3aXNoIHRvIGJlIGludm9sdmVkIGluIHlvdXIgdHJhbnNmb3JtYXRpb25zLgogICAgICoKICAgICAqIFNpbWlsYXJseSwgdG8gbG9jYWxseSBvdmVycmlkZSB0aGUgcmVxdWVzdC9yZXNwb25zZSB0cmFuc2Zvcm1zLCBhdWdtZW50IHRoZQogICAgICogYHRyYW5zZm9ybVJlcXVlc3RgIGFuZC9vciBgdHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMgb2YgdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHBhc3NlZAogICAgICogaW50byBgJGh0dHBgLgogICAgICoKICAgICAqCiAgICAgKiAjIENhY2hpbmcKICAgICAqCiAgICAgKiBUbyBlbmFibGUgY2FjaGluZywgc2V0IHRoZSByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gYGNhY2hlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAgKHRvIHVzZSBkZWZhdWx0CiAgICAgKiBjYWNoZSkgb3IgdG8gYSBjdXN0b20gY2FjaGUgb2JqZWN0IChidWlsdCB3aXRoIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pLgogICAgICogV2hlbiB0aGUgY2FjaGUgaXMgZW5hYmxlZCwgYCRodHRwYCBzdG9yZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBpbiB0aGUgc3BlY2lmaWVkCiAgICAgKiBjYWNoZS4gVGhlIG5leHQgdGltZSB0aGUgc2FtZSByZXF1ZXN0IGlzIG1hZGUsIHRoZSByZXNwb25zZSBpcyBzZXJ2ZWQgZnJvbSB0aGUgY2FjaGUgd2l0aG91dAogICAgICogc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci4KICAgICAqCiAgICAgKiBOb3RlIHRoYXQgZXZlbiBpZiB0aGUgcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gY2FjaGUsIGRlbGl2ZXJ5IG9mIHRoZSBkYXRhIGlzIGFzeW5jaHJvbm91cyBpbgogICAgICogdGhlIHNhbWUgd2F5IHRoYXQgcmVhbCByZXF1ZXN0cyBhcmUuCiAgICAgKgogICAgICogSWYgdGhlcmUgYXJlIG11bHRpcGxlIEdFVCByZXF1ZXN0cyBmb3IgdGhlIHNhbWUgVVJMIHRoYXQgc2hvdWxkIGJlIGNhY2hlZCB1c2luZyB0aGUgc2FtZQogICAgICogY2FjaGUsIGJ1dCB0aGUgY2FjaGUgaXMgbm90IHBvcHVsYXRlZCB5ZXQsIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB3aWxsIGJlIG1hZGUgYW5kCiAgICAgKiB0aGUgcmVtYWluaW5nIHJlcXVlc3RzIHdpbGwgYmUgZnVsZmlsbGVkIHVzaW5nIHRoZSByZXNwb25zZSBmcm9tIHRoZSBmaXJzdCByZXF1ZXN0LgogICAgICoKICAgICAqIFlvdSBjYW4gY2hhbmdlIHRoZSBkZWZhdWx0IGNhY2hlIHRvIGEgbmV3IG9iamVjdCAoYnVpbHQgd2l0aAogICAgICoge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfSkgYnkgdXBkYXRpbmcgdGhlCiAgICAgKiB7QGxpbmsgbmcuJGh0dHAjcHJvcGVydGllc19kZWZhdWx0cyBgJGh0dHAuZGVmYXVsdHMuY2FjaGVgfSBwcm9wZXJ0eS4gQWxsIHJlcXVlc3RzIHdobyBzZXQKICAgICAqIHRoZWlyIGBjYWNoZWAgcHJvcGVydHkgdG8gYHRydWVgIHdpbGwgbm93IHVzZSB0aGlzIGNhY2hlIG9iamVjdC4KICAgICAqCiAgICAgKiBJZiB5b3Ugc2V0IHRoZSBkZWZhdWx0IGNhY2hlIHRvIGBmYWxzZWAgdGhlbiBvbmx5IHJlcXVlc3RzIHRoYXQgc3BlY2lmeSB0aGVpciBvd24gY3VzdG9tCiAgICAgKiBjYWNoZSBvYmplY3Qgd2lsbCBiZSBjYWNoZWQuCiAgICAgKgogICAgICogIyBJbnRlcmNlcHRvcnMKICAgICAqCiAgICAgKiBCZWZvcmUgeW91IHN0YXJ0IGNyZWF0aW5nIGludGVyY2VwdG9ycywgYmUgc3VyZSB0byB1bmRlcnN0YW5kIHRoZQogICAgICoge0BsaW5rIG5nLiRxICRxIGFuZCBkZWZlcnJlZC9wcm9taXNlIEFQSXN9LgogICAgICoKICAgICAqIEZvciBwdXJwb3NlcyBvZiBnbG9iYWwgZXJyb3IgaGFuZGxpbmcsIGF1dGhlbnRpY2F0aW9uLCBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvcgogICAgICogYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLCBpdCBpcyBkZXNpcmFibGUgdG8gYmUKICAgICAqIGFibGUgdG8gaW50ZXJjZXB0IHJlcXVlc3RzIGJlZm9yZSB0aGV5IGFyZSBoYW5kZWQgdG8gdGhlIHNlcnZlciBhbmQKICAgICAqIHJlc3BvbnNlcyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdAogICAgICogaW5pdGlhdGVkIHRoZXNlIHJlcXVlc3RzLiBUaGUgaW50ZXJjZXB0b3JzIGxldmVyYWdlIHRoZSB7QGxpbmsgbmcuJHEKICAgICAqIHByb21pc2UgQVBJc30gdG8gZnVsZmlsbCB0aGlzIG5lZWQgZm9yIGJvdGggc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZy4KICAgICAqCiAgICAgKiBUaGUgaW50ZXJjZXB0b3JzIGFyZSBzZXJ2aWNlIGZhY3RvcmllcyB0aGF0IGFyZSByZWdpc3RlcmVkIHdpdGggdGhlIGAkaHR0cFByb3ZpZGVyYCBieQogICAgICogYWRkaW5nIHRoZW0gdG8gdGhlIGAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9yc2AgYXJyYXkuIFRoZSBmYWN0b3J5IGlzIGNhbGxlZCBhbmQKICAgICAqIGluamVjdGVkIHdpdGggZGVwZW5kZW5jaWVzIChpZiBzcGVjaWZpZWQpIGFuZCByZXR1cm5zIHRoZSBpbnRlcmNlcHRvci4KICAgICAqCiAgICAgKiBUaGVyZSBhcmUgdHdvIGtpbmRzIG9mIGludGVyY2VwdG9ycyAoYW5kIHR3byBraW5kcyBvZiByZWplY3Rpb24gaW50ZXJjZXB0b3JzKToKICAgICAqCiAgICAgKiAgICogYHJlcXVlc3RgOiBpbnRlcmNlcHRvcnMgZ2V0IGNhbGxlZCB3aXRoIGh0dHAgYGNvbmZpZ2Agb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0bwogICAgICogICAgIG1vZGlmeSB0aGUgYGNvbmZpZ2Agb3IgY3JlYXRlIGEgbmV3IG9uZS4gVGhlIGZ1bmN0aW9uIG5lZWRzIHRvIHJldHVybiB0aGUgYGNvbmZpZ2AKICAgICAqICAgICBkaXJlY3RseSBvciBhcyBhIHByb21pc2UuCiAgICAgKiAgICogYHJlcXVlc3RFcnJvcmA6IGludGVyY2VwdG9yIGdldHMgY2FsbGVkIHdoZW4gYSBwcmV2aW91cyBpbnRlcmNlcHRvciB0aHJldyBhbiBlcnJvciBvcgogICAgICogICAgIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uCiAgICAgKiAgICogYHJlc3BvbnNlYDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBodHRwIGByZXNwb25zZWAgb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0bwogICAgICogICAgIG1vZGlmeSB0aGUgYHJlc3BvbnNlYCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgcmVzcG9uc2VgCiAgICAgKiAgICAgZGlyZWN0bHkgb3IgYXMgYSBwcm9taXNlLgogICAgICogICAqIGByZXNwb25zZUVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yCiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi4KICAgICAqCiAgICAgKgogICAgICogPHByZT4KICAgICAqICAgLy8gcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIGFzIGEgc2VydmljZQogICAgICogICAkcHJvdmlkZS5mYWN0b3J5KCdteUh0dHBJbnRlcmNlcHRvcicsIGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHsKICAgICAqICAgICByZXR1cm4gewogICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kCiAgICAgKiAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2VzcwogICAgICogICAgICAgICByZXR1cm4gY29uZmlnIHx8ICRxLndoZW4oY29uZmlnKTsKICAgICAqICAgICAgIH0sCiAgICAgKgogICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kCiAgICAgKiAgICAgICdyZXF1ZXN0RXJyb3InOiBmdW5jdGlvbihyZWplY3Rpb24pIHsKICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yCiAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlamVjdGlvbikpIHsKICAgICAqICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VPck5ld1Byb21pc2UKICAgICAqICAgICAgICAgfQogICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7CiAgICAgKiAgICAgICB9LAogICAgICoKICAgICAqCiAgICAgKgogICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kCiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2VzcwogICAgICogICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgJHEud2hlbihyZXNwb25zZSk7CiAgICAgKiAgICAgICB9LAogICAgICoKICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZAogICAgICogICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikgewogICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3IKICAgICAqICAgICAgICAgaWYgKGNhblJlY292ZXIocmVqZWN0aW9uKSkgewogICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZQogICAgICogICAgICAgICB9CiAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTsKICAgICAqICAgICAgIH0KICAgICAqICAgICB9OwogICAgICogICB9KTsKICAgICAqCiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ215SHR0cEludGVyY2VwdG9yJyk7CiAgICAgKgogICAgICoKICAgICAqICAgLy8gYWx0ZXJuYXRpdmVseSwgcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIHZpYSBhbiBhbm9ueW1vdXMgZmFjdG9yeQogICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHsKICAgICAqICAgICByZXR1cm4gewogICAgICogICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZQogICAgICogICAgICAgfSwKICAgICAqCiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZQogICAgICogICAgICAgfQogICAgICogICAgIH07CiAgICAgKiAgIH0pOwogICAgICogPC9wcmU+CiAgICAgKgogICAgICogIyBSZXNwb25zZSBpbnRlcmNlcHRvcnMgKERFUFJFQ0FURUQpCiAgICAgKgogICAgICogQmVmb3JlIHlvdSBzdGFydCBjcmVhdGluZyBpbnRlcmNlcHRvcnMsIGJlIHN1cmUgdG8gdW5kZXJzdGFuZCB0aGUKICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS4KICAgICAqCiAgICAgKiBGb3IgcHVycG9zZXMgb2YgZ2xvYmFsIGVycm9yIGhhbmRsaW5nLCBhdXRoZW50aWNhdGlvbiBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvcgogICAgICogYXN5bmNocm9ub3VzIHByZXByb2Nlc3Npbmcgb2YgcmVjZWl2ZWQgcmVzcG9uc2VzLCBpdCBpcyBkZXNpcmFibGUgdG8gYmUgYWJsZSB0byBpbnRlcmNlcHQKICAgICAqIHJlc3BvbnNlcyBmb3IgaHR0cCByZXF1ZXN0cyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdAogICAgICogaW5pdGlhdGVkIHRoZXNlIHJlcXVlc3RzLiBUaGUgcmVzcG9uc2UgaW50ZXJjZXB0b3JzIGxldmVyYWdlIHRoZSB7QGxpbmsgbmcuJHEKICAgICAqIHByb21pc2UgYXBpc30gdG8gZnVsZmlsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZXByb2Nlc3NpbmcuCiAgICAgKgogICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSAkaHR0cFByb3ZpZGVyIGJ5CiAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIucmVzcG9uc2VJbnRlcmNlcHRvcnNgIGFycmF5LiBUaGUgZmFjdG9yeSBpcyBjYWxsZWQgYW5kCiAgICAgKiBpbmplY3RlZCB3aXRoIGRlcGVuZGVuY2llcyAoaWYgc3BlY2lmaWVkKSBhbmQgcmV0dXJucyB0aGUgaW50ZXJjZXB0b3IgIOKAlCBhIGZ1bmN0aW9uIHRoYXQKICAgICAqIHRha2VzIGEge0BsaW5rIG5nLiRxIHByb21pc2V9IGFuZCByZXR1cm5zIHRoZSBvcmlnaW5hbCBvciBhIG5ldyBwcm9taXNlLgogICAgICoKICAgICAqIDxwcmU+CiAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2UKICAgICAqICAgJHByb3ZpZGUuZmFjdG9yeSgnbXlIdHRwSW50ZXJjZXB0b3InLCBmdW5jdGlvbigkcSwgZGVwZW5kZW5jeTEsIGRlcGVuZGVuY3kyKSB7CiAgICAgKiAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb21pc2UpIHsKICAgICAqICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3MKICAgICAqICAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICogICAgICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yCiAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlc3BvbnNlKSkgewogICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZQogICAgICogICAgICAgICB9CiAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpOwogICAgICogICAgICAgfSk7CiAgICAgKiAgICAgfQogICAgICogICB9KTsKICAgICAqCiAgICAgKiAgICRodHRwUHJvdmlkZXIucmVzcG9uc2VJbnRlcmNlcHRvcnMucHVzaCgnbXlIdHRwSW50ZXJjZXB0b3InKTsKICAgICAqCiAgICAgKgogICAgICogICAvLyByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgdmlhIGFuIGFub255bW91cyBmYWN0b3J5CiAgICAgKiAgICRodHRwUHJvdmlkZXIucmVzcG9uc2VJbnRlcmNlcHRvcnMucHVzaChmdW5jdGlvbigkcSwgZGVwZW5kZW5jeTEsIGRlcGVuZGVuY3kyKSB7CiAgICAgKiAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb21pc2UpIHsKICAgICAqICAgICAgIC8vIHNhbWUgYXMgYWJvdmUKICAgICAqICAgICB9CiAgICAgKiAgIH0pOwogICAgICogPC9wcmU+CiAgICAgKgogICAgICoKICAgICAqICMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMKICAgICAqCiAgICAgKiBXaGVuIGRlc2lnbmluZyB3ZWIgYXBwbGljYXRpb25zLCBjb25zaWRlciBzZWN1cml0eSB0aHJlYXRzIGZyb206CiAgICAgKgogICAgICogLSB7QGxpbmsgaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4CiAgICAgKiAgIEpTT04gdnVsbmVyYWJpbGl0eX0KICAgICAqIC0ge0BsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkgWFNSRn0KICAgICAqCiAgICAgKiBCb3RoIHNlcnZlciBhbmQgdGhlIGNsaWVudCBtdXN0IGNvb3BlcmF0ZSBpbiBvcmRlciB0byBlbGltaW5hdGUgdGhlc2UgdGhyZWF0cy4gQW5ndWxhciBjb21lcwogICAgICogcHJlLWNvbmZpZ3VyZWQgd2l0aCBzdHJhdGVnaWVzIHRoYXQgYWRkcmVzcyB0aGVzZSBpc3N1ZXMsIGJ1dCBmb3IgdGhpcyB0byB3b3JrIGJhY2tlbmQgc2VydmVyCiAgICAgKiBjb29wZXJhdGlvbiBpcyByZXF1aXJlZC4KICAgICAqCiAgICAgKiAjIyBKU09OIFZ1bG5lcmFiaWxpdHkgUHJvdGVjdGlvbgogICAgICoKICAgICAqIEEge0BsaW5rIGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweAogICAgICogSlNPTiB2dWxuZXJhYmlsaXR5fSBhbGxvd3MgdGhpcmQgcGFydHkgd2Vic2l0ZSB0byB0dXJuIHlvdXIgSlNPTiByZXNvdXJjZSBVUkwgaW50bwogICAgICoge0BsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlAgSlNPTlB9IHJlcXVlc3QgdW5kZXIgc29tZSBjb25kaXRpb25zLiBUbwogICAgICogY291bnRlciB0aGlzIHlvdXIgc2VydmVyIGNhbiBwcmVmaXggYWxsIEpTT04gcmVxdWVzdHMgd2l0aCBmb2xsb3dpbmcgc3RyaW5nIGAiKV19JyxcbiJgLgogICAgICogQW5ndWxhciB3aWxsIGF1dG9tYXRpY2FsbHkgc3RyaXAgdGhlIHByZWZpeCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBhcyBKU09OLgogICAgICoKICAgICAqIEZvciBleGFtcGxlIGlmIHlvdXIgc2VydmVyIG5lZWRzIHRvIHJldHVybjoKICAgICAqIDxwcmU+CiAgICAgKiBbJ29uZScsJ3R3byddCiAgICAgKiA8L3ByZT4KICAgICAqCiAgICAgKiB3aGljaCBpcyB2dWxuZXJhYmxlIHRvIGF0dGFjaywgeW91ciBzZXJ2ZXIgY2FuIHJldHVybjoKICAgICAqIDxwcmU+CiAgICAgKiApXX0nLAogICAgICogWydvbmUnLCd0d28nXQogICAgICogPC9wcmU+CiAgICAgKgogICAgICogQW5ndWxhciB3aWxsIHN0cmlwIHRoZSBwcmVmaXgsIGJlZm9yZSBwcm9jZXNzaW5nIHRoZSBKU09OLgogICAgICoKICAgICAqCiAgICAgKiAjIyBDcm9zcyBTaXRlIFJlcXVlc3QgRm9yZ2VyeSAoWFNSRikgUHJvdGVjdGlvbgogICAgICoKICAgICAqIHtAbGluayBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5IFhTUkZ9IGlzIGEgdGVjaG5pcXVlIGJ5IHdoaWNoCiAgICAgKiBhbiB1bmF1dGhvcml6ZWQgc2l0ZSBjYW4gZ2FpbiB5b3VyIHVzZXIncyBwcml2YXRlIGRhdGEuIEFuZ3VsYXIgcHJvdmlkZXMgYSBtZWNoYW5pc20KICAgICAqIHRvIGNvdW50ZXIgWFNSRi4gV2hlbiBwZXJmb3JtaW5nIFhIUiByZXF1ZXN0cywgdGhlICRodHRwIHNlcnZpY2UgcmVhZHMgYSB0b2tlbiBmcm9tIGEgY29va2llCiAgICAgKiAoYnkgZGVmYXVsdCwgYFhTUkYtVE9LRU5gKSBhbmQgc2V0cyBpdCBhcyBhbiBIVFRQIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5CiAgICAgKiBKYXZhU2NyaXB0IHRoYXQgcnVucyBvbiB5b3VyIGRvbWFpbiBjb3VsZCByZWFkIHRoZSBjb29raWUsIHlvdXIgc2VydmVyIGNhbiBiZSBhc3N1cmVkIHRoYXQKICAgICAqIHRoZSBYSFIgY2FtZSBmcm9tIEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbi4gVGhlIGhlYWRlciB3aWxsIG5vdCBiZSBzZXQgZm9yCiAgICAgKiBjcm9zcy1kb21haW4gcmVxdWVzdHMuCiAgICAgKgogICAgICogVG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcywgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gc2V0IGEgdG9rZW4gaW4gYSBKYXZhU2NyaXB0IHJlYWRhYmxlIHNlc3Npb24KICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIHRoZSBmaXJzdCBIVFRQIEdFVCByZXF1ZXN0LiBPbiBzdWJzZXF1ZW50IFhIUiByZXF1ZXN0cyB0aGUKICAgICAqIHNlcnZlciBjYW4gdmVyaWZ5IHRoYXQgdGhlIGNvb2tpZSBtYXRjaGVzIGBYLVhTUkYtVE9LRU5gIEhUVFAgaGVhZGVyLCBhbmQgdGhlcmVmb3JlIGJlIHN1cmUKICAgICAqIHRoYXQgb25seSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4gY291bGQgaGF2ZSBzZW50IHRoZSByZXF1ZXN0LiBUaGUgdG9rZW4gbXVzdCBiZQogICAgICogdW5pcXVlIGZvciBlYWNoIHVzZXIgYW5kIG11c3QgYmUgdmVyaWZpYWJsZSBieSB0aGUgc2VydmVyICh0byBwcmV2ZW50IHRoZSBKYXZhU2NyaXB0IGZyb20KICAgICAqIG1ha2luZyB1cCBpdHMgb3duIHRva2VucykuIFdlIHJlY29tbWVuZCB0aGF0IHRoZSB0b2tlbiBpcyBhIGRpZ2VzdCBvZiB5b3VyIHNpdGUncwogICAgICogYXV0aGVudGljYXRpb24gY29va2llIHdpdGggYSB7QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FsdF8oY3J5cHRvZ3JhcGh5KSBzYWx0fQogICAgICogZm9yIGFkZGVkIHNlY3VyaXR5LgogICAgICoKICAgICAqIFRoZSBuYW1lIG9mIHRoZSBoZWFkZXJzIGNhbiBiZSBzcGVjaWZpZWQgdXNpbmcgdGhlIHhzcmZIZWFkZXJOYW1lIGFuZCB4c3JmQ29va2llTmFtZQogICAgICogcHJvcGVydGllcyBvZiBlaXRoZXIgJGh0dHBQcm92aWRlci5kZWZhdWx0cyBhdCBjb25maWctdGltZSwgJGh0dHAuZGVmYXVsdHMgYXQgcnVuLXRpbWUsCiAgICAgKiBvciB0aGUgcGVyLXJlcXVlc3QgY29uZmlnIG9iamVjdC4KICAgICAqCiAgICAgKgogICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBPYmplY3QgZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCBob3cgaXQgc2hvdWxkIGJlCiAgICAgKiAgICBwcm9jZXNzZWQuIFRoZSBvYmplY3QgaGFzIGZvbGxvd2luZyBwcm9wZXJ0aWVzOgogICAgICoKICAgICAqICAgIC0gKiptZXRob2QqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBtZXRob2QgKGUuZy4gJ0dFVCcsICdQT1NUJywgZXRjKQogICAgICogICAgLSAqKnVybCoqIOKAkyBge3N0cmluZ31gIOKAkyBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkLgogICAgICogICAgLSAqKnBhcmFtcyoqIOKAkyBge09iamVjdC48c3RyaW5nfE9iamVjdD59YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3Igb2JqZWN0cyB3aGljaCB3aWxsIGJlIHR1cm5lZAogICAgICogICAgICB0byBgP2tleTE9dmFsdWUxJmtleTI9dmFsdWUyYCBhZnRlciB0aGUgdXJsLiBJZiB0aGUgdmFsdWUgaXMgbm90IGEgc3RyaW5nLCBpdCB3aWxsIGJlCiAgICAgKiAgICAgIEpTT05pZmllZC4KICAgICAqICAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBEYXRhIHRvIGJlIHNlbnQgYXMgdGhlIHJlcXVlc3QgbWVzc2FnZSBkYXRhLgogICAgICogICAgLSAqKmhlYWRlcnMqKiDigJMgYHtPYmplY3R9YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3IgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBzdHJpbmdzIHJlcHJlc2VudGluZwogICAgICogICAgICBIVFRQIGhlYWRlcnMgdG8gc2VuZCB0byB0aGUgc2VydmVyLiBJZiB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gaXMgbnVsbCwgdGhlCiAgICAgKiAgICAgIGhlYWRlciB3aWxsIG5vdCBiZSBzZW50LgogICAgICogICAgLSAqKnhzcmZIZWFkZXJOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGUgWFNSRiB0b2tlbi4KICAgICAqICAgIC0gKip4c3JmQ29va2llTmFtZSoqIOKAkyBge3N0cmluZ31gIOKAkyBOYW1lIG9mIGNvb2tpZSBjb250YWluaW5nIHRoZSBYU1JGIHRva2VuLgogICAgICogICAgLSAqKnRyYW5zZm9ybVJlcXVlc3QqKiDigJMKICAgICAqICAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcik+fWAg4oCTCiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cAogICAgICogICAgICByZXF1ZXN0IGJvZHkgYW5kIGhlYWRlcnMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgc2VyaWFsaXplZCkgdmVyc2lvbi4KICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXNwb25zZSoqIOKAkwogICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJMKICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwCiAgICAgKiAgICAgIHJlc3BvbnNlIGJvZHkgYW5kIGhlYWRlcnMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgZGVzZXJpYWxpemVkKSB2ZXJzaW9uLgogICAgICogICAgLSAqKmNhY2hlKiog4oCTIGB7Ym9vbGVhbnxDYWNoZX1gIOKAkyBJZiB0cnVlLCBhIGRlZmF1bHQgJGh0dHAgY2FjaGUgd2lsbCBiZSB1c2VkIHRvIGNhY2hlIHRoZQogICAgICogICAgICBHRVQgcmVxdWVzdCwgb3RoZXJ3aXNlIGlmIGEgY2FjaGUgaW5zdGFuY2UgYnVpbHQgd2l0aAogICAgICogICAgICB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fSwgdGhpcyBjYWNoZSB3aWxsIGJlIHVzZWQgZm9yCiAgICAgKiAgICAgIGNhY2hpbmcuCiAgICAgKiAgICAtICoqdGltZW91dCoqIOKAkyBge251bWJlcnxQcm9taXNlfWAg4oCTIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLCBvciB7QGxpbmsgbmcuJHEgcHJvbWlzZX0KICAgICAqICAgICAgdGhhdCBzaG91bGQgYWJvcnQgdGhlIHJlcXVlc3Qgd2hlbiByZXNvbHZlZC4KICAgICAqICAgIC0gKip3aXRoQ3JlZGVudGlhbHMqKiAtIGB7Ym9vbGVhbn1gIC0gd2hldGhlciB0byB0byBzZXQgdGhlIGB3aXRoQ3JlZGVudGlhbHNgIGZsYWcgb24gdGhlCiAgICAgKiAgICAgIFhIUiBvYmplY3QuIFNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vaHR0cF9hY2Nlc3NfY29udHJvbCNzZWN0aW9uXzUKICAgICAqICAgICAgcmVxdWVzdHMgd2l0aCBjcmVkZW50aWFsc30gZm9yIG1vcmUgaW5mb3JtYXRpb24uCiAgICAgKiAgICAtICoqcmVzcG9uc2VUeXBlKiogLSBge3N0cmluZ31gIC0gc2VlIHtAbGluawogICAgICogICAgICBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9YTUxIdHRwUmVxdWVzdCNyZXNwb25zZVR5cGUgcmVxdWVzdFR5cGV9LgogICAgICoKICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gUmV0dXJucyBhIHtAbGluayBuZy4kcSBwcm9taXNlfSBvYmplY3Qgd2l0aCB0aGUKICAgICAqICAgc3RhbmRhcmQgYHRoZW5gIG1ldGhvZCBhbmQgdHdvIGh0dHAgc3BlY2lmaWMgbWV0aG9kczogYHN1Y2Nlc3NgIGFuZCBgZXJyb3JgLiBUaGUgYHRoZW5gCiAgICAgKiAgIG1ldGhvZCB0YWtlcyB0d28gYXJndW1lbnRzIGEgc3VjY2VzcyBhbmQgYW4gZXJyb3IgY2FsbGJhY2sgd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2l0aCBhCiAgICAgKiAgIHJlc3BvbnNlIG9iamVjdC4gVGhlIGBzdWNjZXNzYCBhbmQgYGVycm9yYCBtZXRob2RzIHRha2UgYSBzaW5nbGUgYXJndW1lbnQgLSBhIGZ1bmN0aW9uIHRoYXQKICAgICAqICAgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkcyBvciBmYWlscyByZXNwZWN0aXZlbHkuIFRoZSBhcmd1bWVudHMgcGFzc2VkIGludG8KICAgICAqICAgdGhlc2UgZnVuY3Rpb25zIGFyZSBkZXN0cnVjdHVyZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlc3BvbnNlIG9iamVjdCBwYXNzZWQgaW50byB0aGUKICAgICAqICAgYHRoZW5gIG1ldGhvZC4gVGhlIHJlc3BvbnNlIG9iamVjdCBoYXMgdGhlc2UgcHJvcGVydGllczoKICAgICAqCiAgICAgKiAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBUaGUgcmVzcG9uc2UgYm9keSB0cmFuc2Zvcm1lZCB3aXRoIHRoZSB0cmFuc2Zvcm0KICAgICAqICAgICBmdW5jdGlvbnMuCiAgICAgKiAgIC0gKipzdGF0dXMqKiDigJMgYHtudW1iZXJ9YCDigJMgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuCiAgICAgKiAgIC0gKipoZWFkZXJzKiog4oCTIGB7ZnVuY3Rpb24oW2hlYWRlck5hbWVdKX1gIOKAkyBIZWFkZXIgZ2V0dGVyIGZ1bmN0aW9uLgogICAgICogICAtICoqY29uZmlnKiog4oCTIGB7T2JqZWN0fWAg4oCTIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IHdhcyB1c2VkIHRvIGdlbmVyYXRlIHRoZSByZXF1ZXN0LgogICAgICoKICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPE9iamVjdD59IHBlbmRpbmdSZXF1ZXN0cyBBcnJheSBvZiBjb25maWcgb2JqZWN0cyBmb3IgY3VycmVudGx5IHBlbmRpbmcKICAgICAqICAgcmVxdWVzdHMuIFRoaXMgaXMgcHJpbWFyaWx5IG1lYW50IHRvIGJlIHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy4KICAgICAqCiAgICAgKgogICAgICogQGV4YW1wbGUKPGV4YW1wbGU+CjxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogIDxkaXYgbmctY29udHJvbGxlcj0iRmV0Y2hDdHJsIj4KICAgIDxzZWxlY3QgbmctbW9kZWw9Im1ldGhvZCI+CiAgICAgIDxvcHRpb24+R0VUPC9vcHRpb24+CiAgICAgIDxvcHRpb24+SlNPTlA8L29wdGlvbj4KICAgIDwvc2VsZWN0PgogICAgPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJ1cmwiIHNpemU9IjgwIi8+CiAgICA8YnV0dG9uIG5nLWNsaWNrPSJmZXRjaCgpIj5mZXRjaDwvYnV0dG9uPjxicj4KICAgIDxidXR0b24gbmctY2xpY2s9InVwZGF0ZU1vZGVsKCdHRVQnLCAnaHR0cC1oZWxsby5odG1sJykiPlNhbXBsZSBHRVQ8L2J1dHRvbj4KICAgIDxidXR0b24KICAgICAgbmctY2xpY2s9InVwZGF0ZU1vZGVsKCdKU09OUCcsCiAgICAgICAgICAgICAgICAgICAgJ2h0dHA6Ly9hbmd1bGFyanMub3JnL2dyZWV0LnBocD9jYWxsYmFjaz1KU09OX0NBTExCQUNLJm5hbWU9U3VwZXIlMjBIZXJvJykiPgogICAgICBTYW1wbGUgSlNPTlAKICAgIDwvYnV0dG9uPgogICAgPGJ1dHRvbgogICAgICBuZy1jbGljaz0idXBkYXRlTW9kZWwoJ0pTT05QJywgJ2h0dHA6Ly9hbmd1bGFyanMub3JnL2RvZXNudGV4aXN0JmNhbGxiYWNrPUpTT05fQ0FMTEJBQ0snKSI+CiAgICAgICAgSW52YWxpZCBKU09OUAogICAgICA8L2J1dHRvbj4KICAgIDxwcmU+aHR0cCBzdGF0dXMgY29kZToge3tzdGF0dXN9fTwvcHJlPgogICAgPHByZT5odHRwIHJlc3BvbnNlIGRhdGE6IHt7ZGF0YX19PC9wcmU+CiAgPC9kaXY+CjwvZmlsZT4KPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICBmdW5jdGlvbiBGZXRjaEN0cmwoJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHsKICAgICRzY29wZS5tZXRob2QgPSAnR0VUJzsKICAgICRzY29wZS51cmwgPSAnaHR0cC1oZWxsby5odG1sJzsKCiAgICAkc2NvcGUuZmV0Y2ggPSBmdW5jdGlvbigpIHsKICAgICAgJHNjb3BlLmNvZGUgPSBudWxsOwogICAgICAkc2NvcGUucmVzcG9uc2UgPSBudWxsOwoKICAgICAgJGh0dHAoe21ldGhvZDogJHNjb3BlLm1ldGhvZCwgdXJsOiAkc2NvcGUudXJsLCBjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS4KICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YTsKICAgICAgICB9KS4KICAgICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YSB8fCAiUmVxdWVzdCBmYWlsZWQiOwogICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgfSk7CiAgICB9OwoKICAgICRzY29wZS51cGRhdGVNb2RlbCA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsKSB7CiAgICAgICRzY29wZS5tZXRob2QgPSBtZXRob2Q7CiAgICAgICRzY29wZS51cmwgPSB1cmw7CiAgICB9OwogIH0KPC9maWxlPgo8ZmlsZSBuYW1lPSJodHRwLWhlbGxvLmh0bWwiPgogIEhlbGxvLCAkaHR0cCEKPC9maWxlPgo8ZmlsZSBuYW1lPSJzY2VuYXJpby5qcyI+CiAgaXQoJ3Nob3VsZCBtYWtlIGFuIHhociBHRVQgcmVxdWVzdCcsIGZ1bmN0aW9uKCkgewogICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiU2FtcGxlIEdFVCIpJykuY2xpY2soKTsKICAgIGVsZW1lbnQoJzpidXR0b246Y29udGFpbnMoImZldGNoIiknKS5jbGljaygpOwogICAgZXhwZWN0KGJpbmRpbmcoJ3N0YXR1cycpKS50b0JlKCcyMDAnKTsKICAgIGV4cGVjdChiaW5kaW5nKCdkYXRhJykpLnRvTWF0Y2goL0hlbGxvLCBcJGh0dHAhLyk7CiAgfSk7CgogIGl0KCdzaG91bGQgbWFrZSBhIEpTT05QIHJlcXVlc3QgdG8gYW5ndWxhcmpzLm9yZycsIGZ1bmN0aW9uKCkgewogICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiU2FtcGxlIEpTT05QIiknKS5jbGljaygpOwogICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiZmV0Y2giKScpLmNsaWNrKCk7CiAgICBleHBlY3QoYmluZGluZygnc3RhdHVzJykpLnRvQmUoJzIwMCcpOwogICAgZXhwZWN0KGJpbmRpbmcoJ2RhdGEnKSkudG9NYXRjaCgvU3VwZXIgSGVybyEvKTsKICB9KTsKCiAgaXQoJ3Nob3VsZCBtYWtlIEpTT05QIHJlcXVlc3QgdG8gaW52YWxpZCBVUkwgYW5kIGludm9rZSB0aGUgZXJyb3IgaGFuZGxlcicsCiAgICAgIGZ1bmN0aW9uKCkgewogICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucygiSW52YWxpZCBKU09OUCIpJykuY2xpY2soKTsKICAgIGVsZW1lbnQoJzpidXR0b246Y29udGFpbnMoImZldGNoIiknKS5jbGljaygpOwogICAgZXhwZWN0KGJpbmRpbmcoJ3N0YXR1cycpKS50b0JlKCcwJyk7CiAgICBleHBlY3QoYmluZGluZygnZGF0YScpKS50b0JlKCdSZXF1ZXN0IGZhaWxlZCcpOwogIH0pOwo8L2ZpbGU+CjwvZXhhbXBsZT4KICAgICAqLwogICAgZnVuY3Rpb24gJGh0dHAocmVxdWVzdENvbmZpZykgewogICAgICB2YXIgY29uZmlnID0gewogICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3QsCiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlCiAgICAgIH07CiAgICAgIHZhciBoZWFkZXJzID0gbWVyZ2VIZWFkZXJzKHJlcXVlc3RDb25maWcpOwoKICAgICAgZXh0ZW5kKGNvbmZpZywgcmVxdWVzdENvbmZpZyk7CiAgICAgIGNvbmZpZy5oZWFkZXJzID0gaGVhZGVyczsKICAgICAgY29uZmlnLm1ldGhvZCA9IHVwcGVyY2FzZShjb25maWcubWV0aG9kKTsKCiAgICAgIHZhciB4c3JmVmFsdWUgPSB1cmxJc1NhbWVPcmlnaW4oY29uZmlnLnVybCkKICAgICAgICAgID8gJGJyb3dzZXIuY29va2llcygpW2NvbmZpZy54c3JmQ29va2llTmFtZSB8fCBkZWZhdWx0cy54c3JmQ29va2llTmFtZV0KICAgICAgICAgIDogdW5kZWZpbmVkOwogICAgICBpZiAoeHNyZlZhbHVlKSB7CiAgICAgICAgaGVhZGVyc1soY29uZmlnLnhzcmZIZWFkZXJOYW1lIHx8IGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lKV0gPSB4c3JmVmFsdWU7CiAgICAgIH0KCgogICAgICB2YXIgc2VydmVyUmVxdWVzdCA9IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICAgIGhlYWRlcnMgPSBjb25maWcuaGVhZGVyczsKICAgICAgICB2YXIgcmVxRGF0YSA9IHRyYW5zZm9ybURhdGEoY29uZmlnLmRhdGEsIGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0KTsKCiAgICAgICAgLy8gc3RyaXAgY29udGVudC10eXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkCiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNvbmZpZy5kYXRhKSkgewogICAgICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwgaGVhZGVyKSB7CiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UoaGVhZGVyKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlcl07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpICYmICFpc1VuZGVmaW5lZChkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMpKSB7CiAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzID0gZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzOwogICAgICAgIH0KCiAgICAgICAgLy8gc2VuZCByZXF1ZXN0CiAgICAgICAgcmV0dXJuIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhLCBoZWFkZXJzKS50aGVuKHRyYW5zZm9ybVJlc3BvbnNlLCB0cmFuc2Zvcm1SZXNwb25zZSk7CiAgICAgIH07CgogICAgICB2YXIgY2hhaW4gPSBbc2VydmVyUmVxdWVzdCwgdW5kZWZpbmVkXTsKICAgICAgdmFyIHByb21pc2UgPSAkcS53aGVuKGNvbmZpZyk7CgogICAgICAvLyBhcHBseSBpbnRlcmNlcHRvcnMKICAgICAgZm9yRWFjaChyZXZlcnNlZEludGVyY2VwdG9ycywgZnVuY3Rpb24oaW50ZXJjZXB0b3IpIHsKICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVxdWVzdCB8fCBpbnRlcmNlcHRvci5yZXF1ZXN0RXJyb3IpIHsKICAgICAgICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IucmVxdWVzdCwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKTsKICAgICAgICB9CiAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlc3BvbnNlIHx8IGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpIHsKICAgICAgICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IucmVzcG9uc2UsIGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICB3aGlsZShjaGFpbi5sZW5ndGgpIHsKICAgICAgICB2YXIgdGhlbkZuID0gY2hhaW4uc2hpZnQoKTsKICAgICAgICB2YXIgcmVqZWN0Rm4gPSBjaGFpbi5zaGlmdCgpOwoKICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHRoZW5GbiwgcmVqZWN0Rm4pOwogICAgICB9CgogICAgICBwcm9taXNlLnN1Y2Nlc3MgPSBmdW5jdGlvbihmbikgewogICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBwcm9taXNlOwogICAgICB9OwoKICAgICAgcHJvbWlzZS5lcnJvciA9IGZ1bmN0aW9uKGZuKSB7CiAgICAgICAgcHJvbWlzZS50aGVuKG51bGwsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICBmbihyZXNwb25zZS5kYXRhLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLmhlYWRlcnMsIGNvbmZpZyk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHByb21pc2U7CiAgICAgIH07CgogICAgICByZXR1cm4gcHJvbWlzZTsKCiAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKHJlc3BvbnNlKSB7CiAgICAgICAgLy8gbWFrZSBhIGNvcHkgc2luY2UgdGhlIHJlc3BvbnNlIG11c3QgYmUgY2FjaGVhYmxlCiAgICAgICAgdmFyIHJlc3AgPSBleHRlbmQoe30sIHJlc3BvbnNlLCB7CiAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1EYXRhKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLmhlYWRlcnMsIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSkKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gKGlzU3VjY2VzcyhyZXNwb25zZS5zdGF0dXMpKQogICAgICAgICAgPyByZXNwCiAgICAgICAgICA6ICRxLnJlamVjdChyZXNwKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gbWVyZ2VIZWFkZXJzKGNvbmZpZykgewogICAgICAgIHZhciBkZWZIZWFkZXJzID0gZGVmYXVsdHMuaGVhZGVycywKICAgICAgICAgICAgcmVxSGVhZGVycyA9IGV4dGVuZCh7fSwgY29uZmlnLmhlYWRlcnMpLAogICAgICAgICAgICBkZWZIZWFkZXJOYW1lLCBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lLCByZXFIZWFkZXJOYW1lOwoKICAgICAgICBkZWZIZWFkZXJzID0gZXh0ZW5kKHt9LCBkZWZIZWFkZXJzLmNvbW1vbiwgZGVmSGVhZGVyc1tsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCldKTsKCiAgICAgICAgLy8gZXhlY3V0ZSBpZiBoZWFkZXIgdmFsdWUgaXMgZnVuY3Rpb24KICAgICAgICBleGVjSGVhZGVycyhkZWZIZWFkZXJzKTsKICAgICAgICBleGVjSGVhZGVycyhyZXFIZWFkZXJzKTsKCiAgICAgICAgLy8gdXNpbmcgZm9yLWluIGluc3RlYWQgb2YgZm9yRWFjaCB0byBhdm9pZCB1bmVjZXNzYXJ5IGl0ZXJhdGlvbiBhZnRlciBoZWFkZXIgaGFzIGJlZW4gZm91bmQKICAgICAgICBkZWZhdWx0SGVhZGVyc0l0ZXJhdGlvbjoKICAgICAgICBmb3IgKGRlZkhlYWRlck5hbWUgaW4gZGVmSGVhZGVycykgewogICAgICAgICAgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSA9IGxvd2VyY2FzZShkZWZIZWFkZXJOYW1lKTsKCiAgICAgICAgICBmb3IgKHJlcUhlYWRlck5hbWUgaW4gcmVxSGVhZGVycykgewogICAgICAgICAgICBpZiAobG93ZXJjYXNlKHJlcUhlYWRlck5hbWUpID09PSBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lKSB7CiAgICAgICAgICAgICAgY29udGludWUgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb247CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXFIZWFkZXJzW2RlZkhlYWRlck5hbWVdID0gZGVmSGVhZGVyc1tkZWZIZWFkZXJOYW1lXTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXFIZWFkZXJzOwoKICAgICAgICBmdW5jdGlvbiBleGVjSGVhZGVycyhoZWFkZXJzKSB7CiAgICAgICAgICB2YXIgaGVhZGVyQ29udGVudDsKCiAgICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKGhlYWRlckZuLCBoZWFkZXIpIHsKICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGVhZGVyRm4pKSB7CiAgICAgICAgICAgICAgaGVhZGVyQ29udGVudCA9IGhlYWRlckZuKCk7CiAgICAgICAgICAgICAgaWYgKGhlYWRlckNvbnRlbnQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaGVhZGVyc1toZWFkZXJdID0gaGVhZGVyQ29udGVudDsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgICRodHRwLnBlbmRpbmdSZXF1ZXN0cyA9IFtdOwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGh0dHAjZ2V0CiAgICAgKiBAbWV0aG9kT2YgbmcuJGh0dHAKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBHRVRgIHJlcXVlc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QKICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3QKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGh0dHAjZGVsZXRlCiAgICAgKiBAbWV0aG9kT2YgbmcuJGh0dHAKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBERUxFVEVgIHJlcXVlc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QKICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0CiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3QKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGh0dHAjaGVhZAogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSEVBRGAgcmVxdWVzdC4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdAogICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QKICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdAogICAgICovCgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSBuZy4kaHR0cCNqc29ucAogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSlNPTlBgIHJlcXVlc3QuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QuCiAgICAgKiAgICAgICAgICAgICAgICAgICAgIFNob3VsZCBjb250YWluIGBKU09OX0NBTExCQUNLYCBzdHJpbmcuCiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KICAgIGNyZWF0ZVNob3J0TWV0aG9kcygnZ2V0JywgJ2RlbGV0ZScsICdoZWFkJywgJ2pzb25wJyk7CgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSBuZy4kaHR0cCNwb3N0CiAgICAgKiBAbWV0aG9kT2YgbmcuJGh0dHAKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQT1NUYCByZXF1ZXN0LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRodHRwI3B1dAogICAgICogQG1ldGhvZE9mIG5nLiRodHRwCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUFVUYCByZXF1ZXN0LgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0CiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50CiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdAogICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0CiAgICAgKi8KICAgIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKCdwb3N0JywgJ3B1dCcpOwoKICAgICAgICAvKioKICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHkKICAgICAgICAgKiBAbmFtZSBuZy4kaHR0cCNkZWZhdWx0cwogICAgICAgICAqIEBwcm9wZXJ0eU9mIG5nLiRodHRwCiAgICAgICAgICoKICAgICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICAgKiBSdW50aW1lIGVxdWl2YWxlbnQgb2YgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzYCBwcm9wZXJ0eS4gQWxsb3dzIGNvbmZpZ3VyYXRpb24gb2YKICAgICAgICAgKiBkZWZhdWx0IGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscyBhcyB3ZWxsIGFzIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucy4KICAgICAgICAgKgogICAgICAgICAqIFNlZSAiU2V0dGluZyBIVFRQIEhlYWRlcnMiIGFuZCAiVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXMiIHNlY3Rpb25zIGFib3ZlLgogICAgICAgICAqLwogICAgJGh0dHAuZGVmYXVsdHMgPSBkZWZhdWx0czsKCgogICAgcmV0dXJuICRodHRwOwoKCiAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHMobmFtZXMpIHsKICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7CiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKGNvbmZpZyB8fCB7fSwgewogICAgICAgICAgICBtZXRob2Q6IG5hbWUsCiAgICAgICAgICAgIHVybDogdXJsCiAgICAgICAgICB9KSk7CiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKG5hbWUpIHsKICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7CiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKGNvbmZpZyB8fCB7fSwgewogICAgICAgICAgICBtZXRob2Q6IG5hbWUsCiAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICB9KSk7CiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9CgoKICAgIC8qKgogICAgICogTWFrZXMgdGhlIHJlcXVlc3QuCiAgICAgKgogICAgICogISEhIEFDQ0VTU0VTIENMT1NVUkUgVkFSUzoKICAgICAqICRodHRwQmFja2VuZCwgZGVmYXVsdHMsICRsb2csICRyb290U2NvcGUsIGRlZmF1bHRDYWNoZSwgJGh0dHAucGVuZGluZ1JlcXVlc3RzCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhLCByZXFIZWFkZXJzKSB7CiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksCiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSwKICAgICAgICAgIGNhY2hlLAogICAgICAgICAgY2FjaGVkUmVzcCwKICAgICAgICAgIHVybCA9IGJ1aWxkVXJsKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMpOwoKICAgICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnB1c2goY29uZmlnKTsKICAgICAgcHJvbWlzZS50aGVuKHJlbW92ZVBlbmRpbmdSZXEsIHJlbW92ZVBlbmRpbmdSZXEpOwoKCiAgICAgIGlmICgoY29uZmlnLmNhY2hlIHx8IGRlZmF1bHRzLmNhY2hlKSAmJiBjb25maWcuY2FjaGUgIT09IGZhbHNlICYmIGNvbmZpZy5tZXRob2QgPT0gJ0dFVCcpIHsKICAgICAgICBjYWNoZSA9IGlzT2JqZWN0KGNvbmZpZy5jYWNoZSkgPyBjb25maWcuY2FjaGUKICAgICAgICAgICAgICA6IGlzT2JqZWN0KGRlZmF1bHRzLmNhY2hlKSA/IGRlZmF1bHRzLmNhY2hlCiAgICAgICAgICAgICAgOiBkZWZhdWx0Q2FjaGU7CiAgICAgIH0KCiAgICAgIGlmIChjYWNoZSkgewogICAgICAgIGNhY2hlZFJlc3AgPSBjYWNoZS5nZXQodXJsKTsKICAgICAgICBpZiAoaXNEZWZpbmVkKGNhY2hlZFJlc3ApKSB7CiAgICAgICAgICBpZiAoY2FjaGVkUmVzcC50aGVuKSB7CiAgICAgICAgICAgIC8vIGNhY2hlZCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCwgYnV0IHRoZXJlIGlzIG5vIHJlc3BvbnNlIHlldAogICAgICAgICAgICBjYWNoZWRSZXNwLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRSZXNwOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gc2VydmluZyBmcm9tIGNhY2hlCiAgICAgICAgICAgIGlmIChpc0FycmF5KGNhY2hlZFJlc3ApKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoY2FjaGVkUmVzcFsxXSwgY2FjaGVkUmVzcFswXSwgY29weShjYWNoZWRSZXNwWzJdKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UoY2FjaGVkUmVzcCwgMjAwLCB7fSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gcHV0IHRoZSBwcm9taXNlIGZvciB0aGUgbm9uLXRyYW5zZm9ybWVkIHJlc3BvbnNlIGludG8gY2FjaGUgYXMgYSBwbGFjZWhvbGRlcgogICAgICAgICAgY2FjaGUucHV0KHVybCwgcHJvbWlzZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBpZiB3ZSB3b24ndCBoYXZlIHRoZSByZXNwb25zZSBpbiBjYWNoZSwgc2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZAogICAgICBpZiAoaXNVbmRlZmluZWQoY2FjaGVkUmVzcCkpIHsKICAgICAgICAkaHR0cEJhY2tlbmQoY29uZmlnLm1ldGhvZCwgdXJsLCByZXFEYXRhLCBkb25lLCByZXFIZWFkZXJzLCBjb25maWcudGltZW91dCwKICAgICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscywgY29uZmlnLnJlc3BvbnNlVHlwZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBwcm9taXNlOwoKCiAgICAgIC8qKgogICAgICAgKiBDYWxsYmFjayByZWdpc3RlcmVkIHRvICRodHRwQmFja2VuZCgpOgogICAgICAgKiAgLSBjYWNoZXMgdGhlIHJlc3BvbnNlIGlmIGRlc2lyZWQKICAgICAgICogIC0gcmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlCiAgICAgICAqICAtIGNhbGxzICRhcHBseQogICAgICAgKi8KICAgICAgZnVuY3Rpb24gZG9uZShzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nKSB7CiAgICAgICAgaWYgKGNhY2hlKSB7CiAgICAgICAgICBpZiAoaXNTdWNjZXNzKHN0YXR1cykpIHsKICAgICAgICAgICAgY2FjaGUucHV0KHVybCwgW3N0YXR1cywgcmVzcG9uc2UsIHBhcnNlSGVhZGVycyhoZWFkZXJzU3RyaW5nKV0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gcmVtb3ZlIHByb21pc2UgZnJvbSB0aGUgY2FjaGUKICAgICAgICAgICAgY2FjaGUucmVtb3ZlKHVybCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzU3RyaW5nKTsKICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkgJHJvb3RTY29wZS4kYXBwbHkoKTsKICAgICAgfQoKCiAgICAgIC8qKgogICAgICAgKiBSZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2UuCiAgICAgICAqLwogICAgICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7CiAgICAgICAgLy8gbm9ybWFsaXplIGludGVybmFsIHN0YXR1c2VzIHRvIDAKICAgICAgICBzdGF0dXMgPSBNYXRoLm1heChzdGF0dXMsIDApOwoKICAgICAgICAoaXNTdWNjZXNzKHN0YXR1cykgPyBkZWZlcnJlZC5yZXNvbHZlIDogZGVmZXJyZWQucmVqZWN0KSh7CiAgICAgICAgICBkYXRhOiByZXNwb25zZSwKICAgICAgICAgIHN0YXR1czogc3RhdHVzLAogICAgICAgICAgaGVhZGVyczogaGVhZGVyc0dldHRlcihoZWFkZXJzKSwKICAgICAgICAgIGNvbmZpZzogY29uZmlnCiAgICAgICAgfSk7CiAgICAgIH0KCgogICAgICBmdW5jdGlvbiByZW1vdmVQZW5kaW5nUmVxKCkgewogICAgICAgIHZhciBpZHggPSBpbmRleE9mKCRodHRwLnBlbmRpbmdSZXF1ZXN0cywgY29uZmlnKTsKICAgICAgICBpZiAoaWR4ICE9PSAtMSkgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnNwbGljZShpZHgsIDEpOwogICAgICB9CiAgICB9CgoKICAgIGZ1bmN0aW9uIGJ1aWxkVXJsKHVybCwgcGFyYW1zKSB7CiAgICAgICAgICBpZiAoIXBhcmFtcykgcmV0dXJuIHVybDsKICAgICAgICAgIHZhciBwYXJ0cyA9IFtdOwogICAgICAgICAgZm9yRWFjaFNvcnRlZChwYXJhbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsKICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuOwogICAgICAgICAgICBpZiAoIWlzQXJyYXkodmFsdWUpKSB2YWx1ZSA9IFt2YWx1ZV07CgogICAgICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbih2KSB7CiAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHYpKSB7CiAgICAgICAgICAgICAgICB2ID0gdG9Kc29uKHYpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSkgKyAnPScgKwogICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlVXJpUXVlcnkodikpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIHVybCArICgodXJsLmluZGV4T2YoJz8nKSA9PSAtMSkgPyAnPycgOiAnJicpICsgcGFydHMuam9pbignJicpOwogICAgICAgIH0KCgogIH1dOwp9CgpmdW5jdGlvbiBjcmVhdGVYaHIobWV0aG9kKSB7CiAgLy8gSUU4IGRvZXNuJ3Qgc3VwcG9ydCBQQVRDSCBtZXRob2QsIGJ1dCB0aGUgQWN0aXZlWCBvYmplY3QgZG9lcwogIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovCiAgcmV0dXJuIChtc2llIDw9IDggJiYgbG93ZXJjYXNlKG1ldGhvZCkgPT09ICdwYXRjaCcpCiAgICAgID8gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJykKICAgICAgOiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7Cn0KCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kaHR0cEJhY2tlbmQKICogQHJlcXVpcmVzICRicm93c2VyCiAqIEByZXF1aXJlcyAkd2luZG93CiAqIEByZXF1aXJlcyAkZG9jdW1lbnQKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUVFAgYmFja2VuZCB1c2VkIGJ5IHRoZSB7QGxpbmsgbmcuJGh0dHAgc2VydmljZX0gdGhhdCBkZWxlZ2F0ZXMgdG8KICogWE1MSHR0cFJlcXVlc3Qgb2JqZWN0IG9yIEpTT05QIGFuZCBkZWFscyB3aXRoIGJyb3dzZXIgaW5jb21wYXRpYmlsaXRpZXMuCiAqCiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB1c2UgdGhpcyBzZXJ2aWNlIGRpcmVjdGx5LCBpbnN0ZWFkIHVzZSB0aGUgaGlnaGVyLWxldmVsIGFic3RyYWN0aW9uczoKICoge0BsaW5rIG5nLiRodHRwICRodHRwfSBvciB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2UgJHJlc291cmNlfS4KICoKICogRHVyaW5nIHRlc3RpbmcgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzd2FwcGVkIHdpdGgge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgbW9jawogKiAkaHR0cEJhY2tlbmR9IHdoaWNoIGNhbiBiZSB0cmFpbmVkIHdpdGggcmVzcG9uc2VzLgogKi8KZnVuY3Rpb24gJEh0dHBCYWNrZW5kUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckd2luZG93JywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRicm93c2VyLCAkd2luZG93LCAkZG9jdW1lbnQpIHsKICAgIHJldHVybiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgY3JlYXRlWGhyLCAkYnJvd3Nlci5kZWZlciwgJHdpbmRvdy5hbmd1bGFyLmNhbGxiYWNrcywgJGRvY3VtZW50WzBdKTsKICB9XTsKfQoKZnVuY3Rpb24gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsIGNyZWF0ZVhociwgJGJyb3dzZXJEZWZlciwgY2FsbGJhY2tzLCByYXdEb2N1bWVudCkgewogIHZhciBBQk9SVEVEID0gLTE7CgogIC8vIFRPRE8odm9qdGEpOiBmaXggdGhlIHNpZ25hdHVyZQogIHJldHVybiBmdW5jdGlvbihtZXRob2QsIHVybCwgcG9zdCwgY2FsbGJhY2ssIGhlYWRlcnMsIHRpbWVvdXQsIHdpdGhDcmVkZW50aWFscywgcmVzcG9uc2VUeXBlKSB7CiAgICB2YXIgc3RhdHVzOwogICAgJGJyb3dzZXIuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCgpOwogICAgdXJsID0gdXJsIHx8ICRicm93c2VyLnVybCgpOwoKICAgIGlmIChsb3dlcmNhc2UobWV0aG9kKSA9PSAnanNvbnAnKSB7CiAgICAgIHZhciBjYWxsYmFja0lkID0gJ18nICsgKGNhbGxiYWNrcy5jb3VudGVyKyspLnRvU3RyaW5nKDM2KTsKICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gZnVuY3Rpb24oZGF0YSkgewogICAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXS5kYXRhID0gZGF0YTsKICAgICAgfTsKCiAgICAgIHZhciBqc29ucERvbmUgPSBqc29ucFJlcSh1cmwucmVwbGFjZSgnSlNPTl9DQUxMQkFDSycsICdhbmd1bGFyLmNhbGxiYWNrcy4nICsgY2FsbGJhY2tJZCksCiAgICAgICAgICBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmRhdGEpIHsKICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgMjAwLCBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzIHx8IC0yKTsKICAgICAgICB9CiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gYW5ndWxhci5ub29wOwogICAgICB9KTsKICAgIH0gZWxzZSB7CgogICAgICB2YXIgeGhyID0gY3JlYXRlWGhyKG1ldGhvZCk7CgogICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7CiAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGtleSkgewogICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7CiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICAvLyBJbiBJRTYgYW5kIDcsIHRoaXMgbWlnaHQgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHkgd2hlbiB4aHIuc2VuZCBiZWxvdyBpcyBjYWxsZWQgYW5kIHRoZQogICAgICAvLyByZXNwb25zZSBpcyBpbiB0aGUgY2FjaGUuIHRoZSBwcm9taXNlIGFwaSB3aWxsIGVuc3VyZSB0aGF0IHRvIHRoZSBhcHAgY29kZSB0aGUgYXBpIGlzCiAgICAgIC8vIGFsd2F5cyBhc3luYwogICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gb25yZWFkeXN0YXRlY2hhbmdlIG1pZ2h0IGdldCBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2l0aCByZWFkeVN0YXRlID09PSA0IG9uIG1vYmlsZSB3ZWJraXQgY2F1c2VkIGJ5CiAgICAgICAgLy8geGhycyB0aGF0IGFyZSByZXNvbHZlZCB3aGlsZSB0aGUgYXBwIGlzIGluIHRoZSBiYWNrZ3JvdW5kIChzZWUgIzU0MjYpLgogICAgICAgIC8vIHNpbmNlIGNhbGxpbmcgY29tcGxldGVSZXF1ZXN0IHNldHMgdGhlIGB4aHJgIHZhcmlhYmxlIHRvIG51bGwsIHdlIGp1c3QgY2hlY2sgaWYgaXQncyBub3QgbnVsbCBiZWZvcmUKICAgICAgICAvLyBjb250aW51aW5nCiAgICAgICAgLy8KICAgICAgICAvLyB3ZSBjYW4ndCBzZXQgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSB0byB1bmRlZmluZWQgb3IgZGVsZXRlIGl0IGJlY2F1c2UgdGhhdCBicmVha3MgSUU4IChtZXRob2Q9UEFUQ0gpIGFuZAogICAgICAgIC8vIFNhZmFyaSByZXNwZWN0aXZlbHkuCiAgICAgICAgaWYgKHhociAmJiB4aHIucmVhZHlTdGF0ZSA9PSA0KSB7CiAgICAgICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gbnVsbCwKICAgICAgICAgICAgICByZXNwb25zZSA9IG51bGw7CgogICAgICAgICAgaWYoc3RhdHVzICE9PSBBQk9SVEVEKSB7CiAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTsKCiAgICAgICAgICAgIC8vIHJlc3BvbnNlVGV4dCBpcyB0aGUgb2xkLXNjaG9vbCB3YXkgb2YgcmV0cmlldmluZyByZXNwb25zZSAoc3VwcG9ydGVkIGJ5IElFOCAmIDkpCiAgICAgICAgICAgIC8vIHJlc3BvbnNlL3Jlc3BvbnNlVHlwZSBwcm9wZXJ0aWVzIHdlcmUgaW50cm9kdWNlZCBpbiBYSFIgTGV2ZWwyIHNwZWMgKHN1cHBvcnRlZCBieSBJRTEwKQogICAgICAgICAgICByZXNwb25zZSA9ICgncmVzcG9uc2UnIGluIHhocikgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0OwogICAgICAgICAgfQoKICAgICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywKICAgICAgICAgICAgICBzdGF0dXMgfHwgeGhyLnN0YXR1cywKICAgICAgICAgICAgICByZXNwb25zZSwKICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnMpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHsKICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTsKICAgICAgfQoKICAgICAgaWYgKHJlc3BvbnNlVHlwZSkgewogICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7CiAgICAgIH0KCiAgICAgIHhoci5zZW5kKHBvc3QgfHwgbnVsbCk7CiAgICB9CgogICAgaWYgKHRpbWVvdXQgPiAwKSB7CiAgICAgIHZhciB0aW1lb3V0SWQgPSAkYnJvd3NlckRlZmVyKHRpbWVvdXRSZXF1ZXN0LCB0aW1lb3V0KTsKICAgIH0gZWxzZSBpZiAodGltZW91dCAmJiB0aW1lb3V0LnRoZW4pIHsKICAgICAgdGltZW91dC50aGVuKHRpbWVvdXRSZXF1ZXN0KTsKICAgIH0KCgogICAgZnVuY3Rpb24gdGltZW91dFJlcXVlc3QoKSB7CiAgICAgIHN0YXR1cyA9IEFCT1JURUQ7CiAgICAgIGpzb25wRG9uZSAmJiBqc29ucERvbmUoKTsKICAgICAgeGhyICYmIHhoci5hYm9ydCgpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZykgewogICAgICAvLyBjYW5jZWwgdGltZW91dCBhbmQgc3Vic2VxdWVudCB0aW1lb3V0IHByb21pc2UgcmVzb2x1dGlvbgogICAgICB0aW1lb3V0SWQgJiYgJGJyb3dzZXJEZWZlci5jYW5jZWwodGltZW91dElkKTsKICAgICAganNvbnBEb25lID0geGhyID0gbnVsbDsKCiAgICAgIC8vIGZpeCBzdGF0dXMgY29kZSB3aGVuIGl0IGlzIDAgKDAgc3RhdHVzIGlzIHVuZG9jdW1lbnRlZCkuCiAgICAgIC8vIE9jY3VycyB3aGVuIGFjY2Vzc2luZyBmaWxlIHJlc291cmNlcy4KICAgICAgLy8gT24gQW5kcm9pZCA0LjEgc3RvY2sgYnJvd3NlciBpdCBvY2N1cnMgd2hpbGUgcmV0cmlldmluZyBmaWxlcyBmcm9tIGFwcGxpY2F0aW9uIGNhY2hlLgogICAgICBzdGF0dXMgPSAoc3RhdHVzID09PSAwKSA/IChyZXNwb25zZSA/IDIwMCA6IDQwNCkgOiBzdGF0dXM7CgogICAgICAvLyBub3JtYWxpemUgSUUgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKQogICAgICBzdGF0dXMgPSBzdGF0dXMgPT0gMTIyMyA/IDIwNCA6IHN0YXR1czsKCiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcpOwogICAgICAkYnJvd3Nlci4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApOwogICAgfQogIH07CgogIGZ1bmN0aW9uIGpzb25wUmVxKHVybCwgZG9uZSkgewogICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHNoaXQgd2l0aCBzY3JpcHQgZWxlbWVudHMsIGUuZy46CiAgICAvLyAtIGZldGNoZXMgbG9jYWwgc2NyaXB0cyB2aWEgWEhSIGFuZCBldmFscyB0aGVtCiAgICAvLyAtIGFkZHMgYW5kIGltbWVkaWF0ZWx5IHJlbW92ZXMgc2NyaXB0IGVsZW1lbnRzIGZyb20gdGhlIGRvY3VtZW50CiAgICB2YXIgc2NyaXB0ID0gcmF3RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksCiAgICAgICAgZG9uZVdyYXBwZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9uZXJyb3IgPSBudWxsOwogICAgICAgICAgcmF3RG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JpcHQpOwogICAgICAgICAgaWYgKGRvbmUpIGRvbmUoKTsKICAgICAgICB9OwoKICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7CiAgICBzY3JpcHQuc3JjID0gdXJsOwoKICAgIGlmIChtc2llICYmIG1zaWUgPD0gOCkgewogICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKC9sb2FkZWR8Y29tcGxldGUvLnRlc3Qoc2NyaXB0LnJlYWR5U3RhdGUpKSB7CiAgICAgICAgICBkb25lV3JhcHBlcigpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uKCkgewogICAgICAgIGRvbmVXcmFwcGVyKCk7CiAgICAgIH07CiAgICB9CgogICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgcmV0dXJuIGRvbmVXcmFwcGVyOwogIH0KfQoKdmFyICRpbnRlcnBvbGF0ZU1pbkVyciA9IG1pbkVycignJGludGVycG9sYXRlJyk7CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kaW50ZXJwb2xhdGVQcm92aWRlcgogKiBAZnVuY3Rpb24KICoKICogQGRlc2NyaXB0aW9uCiAqCiAqIFVzZWQgZm9yIGNvbmZpZ3VyaW5nIHRoZSBpbnRlcnBvbGF0aW9uIG1hcmt1cC4gRGVmYXVsdHMgdG8gYHt7YCBhbmQgYH19YC4KICoKICogQGV4YW1wbGUKPGRvYzpleGFtcGxlIG1vZHVsZT0iY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCI+Cjxkb2M6c291cmNlPgo8c2NyaXB0PgogIHZhciBjdXN0b21JbnRlcnBvbGF0aW9uQXBwID0gYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUludGVycG9sYXRpb25BcHAnLCBbXSk7CgogIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29uZmlnKGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZVByb3ZpZGVyKSB7CiAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbCgnLy8nKTsKICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbCgnLy8nKTsKICB9KTsKCgogIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29udHJvbGxlcignRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbiBEZW1vQ29udHJvbGxlcigpIHsKICAgICAgdGhpcy5sYWJlbCA9ICJUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLiI7CiAgfSk7Cjwvc2NyaXB0Pgo8ZGl2IG5nLWFwcD0iQXBwIiBuZy1jb250cm9sbGVyPSJEZW1vQ29udHJvbGxlciBhcyBkZW1vIj4KICAgIC8vZGVtby5sYWJlbC8vCjwvZGl2Pgo8L2RvYzpzb3VyY2U+Cjxkb2M6c2NlbmFyaW8+CiBpdCgnc2hvdWxkIGludGVycG9sYXRlIGJpbmRpbmcgd2l0aCBjdXN0b20gc3ltYm9scycsIGZ1bmN0aW9uKCkgewogIGV4cGVjdChiaW5kaW5nKCdkZW1vLmxhYmVsJykpLnRvQmUoJ1RoaXMgYmluZGluZyBpcyBicm91Z2h0IHlvdSBieSAvLyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuJyk7CiB9KTsKPC9kb2M6c2NlbmFyaW8+CjwvZG9jOmV4YW1wbGU+CiAqLwpmdW5jdGlvbiAkSW50ZXJwb2xhdGVQcm92aWRlcigpIHsKICB2YXIgc3RhcnRTeW1ib2wgPSAne3snOwogIHZhciBlbmRTeW1ib2wgPSAnfX0nOwoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2wKICAgKiBAbWV0aG9kT2YgbmcuJGludGVycG9sYXRlUHJvdmlkZXIKICAgKiBAZGVzY3JpcHRpb24KICAgKiBTeW1ib2wgdG8gZGVub3RlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIHN0YXJ0aW5nIHN5bWJvbCB0by4KICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHN5bWJvbCB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLgogICAqLwogIHRoaXMuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSl7CiAgICBpZiAodmFsdWUpIHsKICAgICAgc3RhcnRTeW1ib2wgPSB2YWx1ZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gc3RhcnRTeW1ib2w7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbAogICAqIEBtZXRob2RPZiBuZy4kaW50ZXJwb2xhdGVQcm92aWRlcgogICAqIEBkZXNjcmlwdGlvbgogICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBlbmRpbmcgc3ltYm9sIHRvLgogICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuCiAgICovCiAgdGhpcy5lbmRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSl7CiAgICBpZiAodmFsdWUpIHsKICAgICAgZW5kU3ltYm9sID0gdmFsdWU7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGVuZFN5bWJvbDsKICAgIH0KICB9OwoKCiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHNjZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRzY2UpIHsKICAgIHZhciBzdGFydFN5bWJvbExlbmd0aCA9IHN0YXJ0U3ltYm9sLmxlbmd0aCwKICAgICAgICBlbmRTeW1ib2xMZW5ndGggPSBlbmRTeW1ib2wubGVuZ3RoOwoKICAgIC8qKgogICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgKiBAbmFtZSBuZy4kaW50ZXJwb2xhdGUKICAgICAqIEBmdW5jdGlvbgogICAgICoKICAgICAqIEByZXF1aXJlcyAkcGFyc2UKICAgICAqIEByZXF1aXJlcyAkc2NlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKgogICAgICogQ29tcGlsZXMgYSBzdHJpbmcgd2l0aCBtYXJrdXAgaW50byBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLiBUaGlzIHNlcnZpY2UgaXMgdXNlZCBieSB0aGUKICAgICAqIEhUTUwge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSBzZXJ2aWNlIGZvciBkYXRhIGJpbmRpbmcuIFNlZQogICAgICoge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyICRpbnRlcnBvbGF0ZVByb3ZpZGVyfSBmb3IgY29uZmlndXJpbmcgdGhlCiAgICAgKiBpbnRlcnBvbGF0aW9uIG1hcmt1cC4KICAgICAqCiAgICAgKgogICAgICAgPHByZT4KICAgICAgICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWQKICAgICAgICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgnSGVsbG8ge3tuYW1lIHwgdXBwZXJjYXNlfX0hJyk7CiAgICAgICAgIGV4cGVjdChleHAoe25hbWU6J0FuZ3VsYXInfSkudG9FcXVhbCgnSGVsbG8gQU5HVUxBUiEnKTsKICAgICAgIDwvcHJlPgogICAgICoKICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB3aXRoIG1hcmt1cCB0byBpbnRlcnBvbGF0ZS4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG11c3RIYXZlRXhwcmVzc2lvbiBpZiBzZXQgdG8gdHJ1ZSB0aGVuIHRoZSBpbnRlcnBvbGF0aW9uIHN0cmluZyBtdXN0IGhhdmUKICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gcmV0dXJuIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFN0cmluZ3Mgd2l0aCBubwogICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiB3aWxsIHJldHVybiBudWxsIGZvciB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHJ1c3RlZENvbnRleHQgd2hlbiBwcm92aWRlZCwgdGhlIHJldHVybmVkIGZ1bmN0aW9uIHBhc3NlcyB0aGUgaW50ZXJwb2xhdGVkCiAgICAgKiAgICByZXN1bHQgdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkKGludGVycG9sYXRlZFJlc3VsdCwKICAgICAqICAgIHRydXN0ZWRDb250ZXh0KX0gYmVmb3JlIHJldHVybmluZyBpdC4gIFJlZmVyIHRvIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlIHRoYXQKICAgICAqICAgIHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGZvciBkZXRhaWxzLgogICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQpfSBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGUKICAgICAqICAgIGludGVycG9sYXRlZCBzdHJpbmcuIFRoZSBmdW5jdGlvbiBoYXMgdGhlc2UgcGFyYW1ldGVyczoKICAgICAqCiAgICAgKiAgICAqIGBjb250ZXh0YDogYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzIGFyZSBldmFsdWF0ZWQKICAgICAqICAgICAgYWdhaW5zdC4KICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uICRpbnRlcnBvbGF0ZSh0ZXh0LCBtdXN0SGF2ZUV4cHJlc3Npb24sIHRydXN0ZWRDb250ZXh0KSB7CiAgICAgIHZhciBzdGFydEluZGV4LAogICAgICAgICAgZW5kSW5kZXgsCiAgICAgICAgICBpbmRleCA9IDAsCiAgICAgICAgICBwYXJ0cyA9IFtdLAogICAgICAgICAgbGVuZ3RoID0gdGV4dC5sZW5ndGgsCiAgICAgICAgICBoYXNJbnRlcnBvbGF0aW9uID0gZmFsc2UsCiAgICAgICAgICBmbiwKICAgICAgICAgIGV4cCwKICAgICAgICAgIGNvbmNhdCA9IFtdOwoKICAgICAgd2hpbGUoaW5kZXggPCBsZW5ndGgpIHsKICAgICAgICBpZiAoICgoc3RhcnRJbmRleCA9IHRleHQuaW5kZXhPZihzdGFydFN5bWJvbCwgaW5kZXgpKSAhPSAtMSkgJiYKICAgICAgICAgICAgICgoZW5kSW5kZXggPSB0ZXh0LmluZGV4T2YoZW5kU3ltYm9sLCBzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgpKSAhPSAtMSkgKSB7CiAgICAgICAgICAoaW5kZXggIT0gc3RhcnRJbmRleCkgJiYgcGFydHMucHVzaCh0ZXh0LnN1YnN0cmluZyhpbmRleCwgc3RhcnRJbmRleCkpOwogICAgICAgICAgcGFydHMucHVzaChmbiA9ICRwYXJzZShleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KSkpOwogICAgICAgICAgZm4uZXhwID0gZXhwOwogICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDsKICAgICAgICAgIGhhc0ludGVycG9sYXRpb24gPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyB3ZSBkaWQgbm90IGZpbmQgYW55dGhpbmcsIHNvIHdlIGhhdmUgdG8gYWRkIHRoZSByZW1haW5kZXIgdG8gdGhlIHBhcnRzIGFycmF5CiAgICAgICAgICAoaW5kZXggIT0gbGVuZ3RoKSAmJiBwYXJ0cy5wdXNoKHRleHQuc3Vic3RyaW5nKGluZGV4KSk7CiAgICAgICAgICBpbmRleCA9IGxlbmd0aDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmICghKGxlbmd0aCA9IHBhcnRzLmxlbmd0aCkpIHsKICAgICAgICAvLyB3ZSBhZGRlZCwgbm90aGluZywgbXVzdCBoYXZlIGJlZW4gYW4gZW1wdHkgc3RyaW5nLgogICAgICAgIHBhcnRzLnB1c2goJycpOwogICAgICAgIGxlbmd0aCA9IDE7CiAgICAgIH0KCiAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mCiAgICAgIC8vIGNvbmNhdGVuYXRlZCB2YWx1ZXMgYXJlIHVuc2FmZSB0byB1c2UgYW5kIGNvdWxkIGVhc2lseSBsZWFkIHRvIFhTUy4gIEJ5IHJlcXVpcmluZyB0aGF0IGEKICAgICAgLy8gc2luZ2xlIGV4cHJlc3Npb24gYmUgdXNlZCBmb3IgaWZyYW1lW3NyY10sIG9iamVjdFtzcmNdLCBldGMuLCB3ZSBlbnN1cmUgdGhhdCB0aGUgdmFsdWUKICAgICAgLy8gdGhhdCdzIHVzZWQgaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3IKICAgICAgLy8gbWFrZSBpdCBvYnZpb3VzIHRoYXQgeW91IGJvdW5kIHRoZSB2YWx1ZSB0byBzb21lIHVzZXIgY29udHJvbGxlZCB2YWx1ZS4gIFRoaXMgaGVscHMgcmVkdWNlCiAgICAgIC8vIHRoZSBsb2FkIHdoZW4gYXVkaXRpbmcgZm9yIFhTUyBpc3N1ZXMuCiAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBwYXJ0cy5sZW5ndGggPiAxKSB7CiAgICAgICAgICB0aHJvdyAkaW50ZXJwb2xhdGVNaW5FcnIoJ25vY29uY2F0JywKICAgICAgICAgICAgICAiRXJyb3Igd2hpbGUgaW50ZXJwb2xhdGluZzogezB9XG5TdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkaXNhbGxvd3MgIiArCiAgICAgICAgICAgICAgImludGVycG9sYXRpb25zIHRoYXQgY29uY2F0ZW5hdGUgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hlbiBhIHRydXN0ZWQgdmFsdWUgaXMgIiArCiAgICAgICAgICAgICAgInJlcXVpcmVkLiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2UiLCB0ZXh0KTsKICAgICAgfQoKICAgICAgaWYgKCFtdXN0SGF2ZUV4cHJlc3Npb24gIHx8IGhhc0ludGVycG9sYXRpb24pIHsKICAgICAgICBjb25jYXQubGVuZ3RoID0gbGVuZ3RoOwogICAgICAgIGZuID0gZnVuY3Rpb24oY29udGV4dCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgaWkgPSBsZW5ndGgsIHBhcnQ7IGk8aWk7IGkrKykgewogICAgICAgICAgICAgIGlmICh0eXBlb2YgKHBhcnQgPSBwYXJ0c1tpXSkgPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgcGFydCA9IHBhcnQoY29udGV4dCk7CiAgICAgICAgICAgICAgICBpZiAodHJ1c3RlZENvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgcGFydCA9ICRzY2UuZ2V0VHJ1c3RlZCh0cnVzdGVkQ29udGV4dCwgcGFydCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBwYXJ0ID0gJHNjZS52YWx1ZU9mKHBhcnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHBhcnQgPT09IG51bGwgfHwgaXNVbmRlZmluZWQocGFydCkpIHsKICAgICAgICAgICAgICAgICAgcGFydCA9ICcnOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFydCAhPSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICBwYXJ0ID0gdG9Kc29uKHBhcnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb25jYXRbaV0gPSBwYXJ0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBjb25jYXQuam9pbignJyk7CiAgICAgICAgICB9CiAgICAgICAgICBjYXRjaChlcnIpIHsKICAgICAgICAgICAgdmFyIG5ld0VyciA9ICRpbnRlcnBvbGF0ZU1pbkVycignaW50ZXJyJywgIkNhbid0IGludGVycG9sYXRlOiB7MH1cbnsxfSIsIHRleHQsCiAgICAgICAgICAgICAgICBlcnIudG9TdHJpbmcoKSk7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKG5ld0Vycik7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBmbi5leHAgPSB0ZXh0OwogICAgICAgIGZuLnBhcnRzID0gcGFydHM7CiAgICAgICAgcmV0dXJuIGZuOwogICAgICB9CiAgICB9CgoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGludGVycG9sYXRlI3N0YXJ0U3ltYm9sCiAgICAgKiBAbWV0aG9kT2YgbmcuJGludGVycG9sYXRlCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuCiAgICAgKgogICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbCAkaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbH0gdG8gY2hhbmdlCiAgICAgKiB0aGUgc3ltYm9sLgogICAgICoKICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHN0YXJ0IHN5bWJvbC4KICAgICAqLwogICAgJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBzdGFydFN5bWJvbDsKICAgIH07CgoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJGludGVycG9sYXRlI2VuZFN5bWJvbAogICAgICogQG1ldGhvZE9mIG5nLiRpbnRlcnBvbGF0ZQogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC4KICAgICAqCiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbCAkaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2x9IHRvIGNoYW5nZQogICAgICogdGhlIHN5bWJvbC4KICAgICAqCiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzdGFydCBzeW1ib2wuCiAgICAgKi8KICAgICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2wgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIGVuZFN5bWJvbDsKICAgIH07CgogICAgcmV0dXJuICRpbnRlcnBvbGF0ZTsKICB9XTsKfQoKZnVuY3Rpb24gJEludGVydmFsUHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyR3aW5kb3cnLCAnJHEnLAogICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkd2luZG93LCAgICRxKSB7CiAgICB2YXIgaW50ZXJ2YWxzID0ge307CgoKICAgICAvKioKICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgKiBAbmFtZSBuZy4kaW50ZXJ2YWwKICAgICAgKgogICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldEludGVydmFsYC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZXZlcnkgYGRlbGF5YAogICAgICAqIG1pbGxpc2Vjb25kcy4KICAgICAgKgogICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gaXMgYSBwcm9taXNlLiBUaGlzIHByb21pc2Ugd2lsbCBiZQogICAgICAqIG5vdGlmaWVkIHVwb24gZWFjaCB0aWNrIG9mIHRoZSBpbnRlcnZhbCwgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgYWZ0ZXIgYGNvdW50YCBpdGVyYXRpb25zLCBvcgogICAgICAqIHJ1biBpbmRlZmluaXRlbHkgaWYgYGNvdW50YCBpcyBub3QgZGVmaW5lZC4gVGhlIHZhbHVlIG9mIHRoZSBub3RpZmljYXRpb24gd2lsbCBiZSB0aGUKICAgICAgKiBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGF0IGhhdmUgcnVuLgogICAgICAqIFRvIGNhbmNlbCBhbiBpbnRlcnZhbCwgY2FsbCBgJGludGVydmFsLmNhbmNlbChwcm9taXNlKWAuCiAgICAgICoKICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiRpbnRlcnZhbCNtZXRob2RzX2ZsdXNoIGAkaW50ZXJ2YWwuZmx1c2gobWlsbGlzKWB9IHRvCiAgICAgICogbW92ZSBmb3J3YXJkIGJ5IGBtaWxsaXNgIG1pbGxpc2Vjb25kcyBhbmQgdHJpZ2dlciBhbnkgZnVuY3Rpb25zIHNjaGVkdWxlZCB0byBydW4gaW4gdGhhdAogICAgICAqIHRpbWUuCiAgICAgICogCiAgICAgICogPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAgICAgICogKipOb3RlKio6IEludGVydmFscyBjcmVhdGVkIGJ5IHRoaXMgc2VydmljZSBtdXN0IGJlIGV4cGxpY2l0bHkgZGVzdHJveWVkIHdoZW4geW91IGFyZSBmaW5pc2hlZAogICAgICAqIHdpdGggdGhlbS4gIEluIHBhcnRpY3VsYXIgdGhleSBhcmUgbm90IGF1dG9tYXRpY2FsbHkgZGVzdHJveWVkIHdoZW4gYSBjb250cm9sbGVyJ3Mgc2NvcGUgb3IgYQogICAgICAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgYXJlIGRlc3Ryb3llZC4KICAgICAgKiBZb3Ugc2hvdWxkIHRha2UgdGhpcyBpbnRvIGNvbnNpZGVyYXRpb24gYW5kIG1ha2Ugc3VyZSB0byBhbHdheXMgY2FuY2VsIHRoZSBpbnRlcnZhbCBhdCB0aGUKICAgICAgKiBhcHByb3ByaWF0ZSBtb21lbnQuICBTZWUgdGhlIGV4YW1wbGUgYmVsb3cgZm9yIG1vcmUgZGV0YWlscyBvbiBob3cgYW5kIHdoZW4gdG8gZG8gdGhpcy4KICAgICAgKiA8L2Rpdj4KICAgICAgKgogICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgcmVwZWF0ZWRseS4KICAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIGVhY2ggZnVuY3Rpb24gY2FsbC4KICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtjb3VudD0wXSBOdW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LiBJZiBub3Qgc2V0LCBvciAwLCB3aWxsIHJlcGVhdAogICAgICAqICAgaW5kZWZpbml0ZWx5LgogICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlCiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kYXBwbHkgJGFwcGx5fSBibG9jay4KICAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHdoaWNoIHdpbGwgYmUgbm90aWZpZWQgb24gZWFjaCBpdGVyYXRpb24uCiAgICAgICoKICAgICAgKiBAZXhhbXBsZQogICAgICA8ZG9jOmV4YW1wbGUgbW9kdWxlPSJ0aW1lIj4KICAgICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgIGZ1bmN0aW9uIEN0cmwyKCRzY29wZSwkaW50ZXJ2YWwpIHsKICAgICAgICAgICAgICAkc2NvcGUuZm9ybWF0ID0gJ00vZC95eSBoOm1tOnNzIGEnOwogICAgICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwOwogICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwOwoKICAgICAgICAgICAgICB2YXIgc3RvcDsKICAgICAgICAgICAgICAkc2NvcGUuZmlnaHQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIC8vIERvbid0IHN0YXJ0IGEgbmV3IGZpZ2h0IGlmIHdlIGFyZSBhbHJlYWR5IGZpZ2h0aW5nCiAgICAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuOwoKICAgICAgICAgICAgICAgIHN0b3AgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYmxvb2RfMSA+IDAgJiYgJHNjb3BlLmJsb29kXzIgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9ICRzY29wZS5ibG9vZF8xIC0gMzsKICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gJHNjb3BlLmJsb29kXzIgLSA0OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3BGaWdodCgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCAxMDApOwogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChzdG9wKSkgewogICAgICAgICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKHN0b3ApOwogICAgICAgICAgICAgICAgICBzdG9wID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICRzY29wZS5yZXNldEZpZ2h0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9IDEwMDsKICAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWQgdG9vCiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0aW1lJywgW10pCiAgICAgICAgICAgICAgLy8gUmVnaXN0ZXIgdGhlICdteUN1cnJlbnRUaW1lJyBkaXJlY3RpdmUgZmFjdG9yeSBtZXRob2QuCiAgICAgICAgICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS4KICAgICAgICAgICAgICAuZGlyZWN0aXZlKCdteUN1cnJlbnRUaW1lJywgZnVuY3Rpb24oJGludGVydmFsLCBkYXRlRmlsdGVyKSB7CiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIGRpcmVjdGl2ZSBsaW5rIGZ1bmN0aW9uLiAoY29tcGlsZSBmdW5jdGlvbiBub3QgbmVlZGVkKQogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogICAgICAgICAgICAgICAgICB2YXIgZm9ybWF0LCAgLy8gZGF0ZSBmb3JtYXQKICAgICAgICAgICAgICAgICAgc3RvcFRpbWU7IC8vIHNvIHRoYXQgd2UgY2FuIGNhbmNlbCB0aGUgdGltZSB1cGRhdGVzCgogICAgICAgICAgICAgICAgICAvLyB1c2VkIHRvIHVwZGF0ZSB0aGUgVUkKICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGltZSgpIHsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRleHQoZGF0ZUZpbHRlcihuZXcgRGF0ZSgpLCBmb3JtYXQpKTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgLy8gd2F0Y2ggdGhlIGV4cHJlc3Npb24sIGFuZCB1cGRhdGUgdGhlIFVJIG9uIGNoYW5nZS4KICAgICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLm15Q3VycmVudFRpbWUsIGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpOwogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIHN0b3BUaW1lID0gJGludGVydmFsKHVwZGF0ZVRpbWUsIDEwMDApOwoKICAgICAgICAgICAgICAgICAgLy8gbGlzdGVuIG9uIERPTSBkZXN0cm95IChyZW1vdmFsKSBldmVudCwgYW5kIGNhbmNlbCB0aGUgbmV4dCBVSSB1cGRhdGUKICAgICAgICAgICAgICAgICAgLy8gdG8gcHJldmVudCB1cGRhdGluZyB0aW1lIG9mdGVyIHRoZSBET00gZWxlbWVudCB3YXMgcmVtb3ZlZC4KICAgICAgICAgICAgICAgICAgZWxlbWVudC5iaW5kKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoc3RvcFRpbWUpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgIDwvc2NyaXB0PgoKICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybDIiPgogICAgICAgICAgICAgIERhdGUgZm9ybWF0OiA8aW5wdXQgbmctbW9kZWw9ImZvcm1hdCI+IDxoci8+CiAgICAgICAgICAgICAgQ3VycmVudCB0aW1lIGlzOiA8c3BhbiBteS1jdXJyZW50LXRpbWU9ImZvcm1hdCI+PC9zcGFuPgogICAgICAgICAgICAgIDxoci8+CiAgICAgICAgICAgICAgQmxvb2QgMSA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMX19PC9mb250PgogICAgICAgICAgICAgIEJsb29kIDIgOiA8Zm9udCBjb2xvcj0ncmVkJz57e2Jsb29kXzJ9fTwvZm9udD4KICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgZGF0YS1uZy1jbGljaz0iZmlnaHQoKSI+RmlnaHQ8L2J1dHRvbj4KICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgZGF0YS1uZy1jbGljaz0ic3RvcEZpZ2h0KCkiPlN0b3BGaWdodDwvYnV0dG9uPgogICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBkYXRhLW5nLWNsaWNrPSJyZXNldEZpZ2h0KCkiPnJlc2V0RmlnaHQ8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPC9kb2M6c291cmNlPgogICAgICA8L2RvYzpleGFtcGxlPgogICAgICAqLwogICAgZnVuY3Rpb24gaW50ZXJ2YWwoZm4sIGRlbGF5LCBjb3VudCwgaW52b2tlQXBwbHkpIHsKICAgICAgdmFyIHNldEludGVydmFsID0gJHdpbmRvdy5zZXRJbnRlcnZhbCwKICAgICAgICAgIGNsZWFySW50ZXJ2YWwgPSAkd2luZG93LmNsZWFySW50ZXJ2YWwsCiAgICAgICAgICBkZWZlcnJlZCA9ICRxLmRlZmVyKCksCiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSwKICAgICAgICAgIGl0ZXJhdGlvbiA9IDAsCiAgICAgICAgICBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpOwogICAgICAKICAgICAgY291bnQgPSBpc0RlZmluZWQoY291bnQpID8gY291bnQgOiAwLAoKICAgICAgcHJvbWlzZS50aGVuKG51bGwsIG51bGwsIGZuKTsKCiAgICAgIHByb21pc2UuJCRpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gdGljaygpIHsKICAgICAgICBkZWZlcnJlZC5ub3RpZnkoaXRlcmF0aW9uKyspOwoKICAgICAgICBpZiAoY291bnQgPiAwICYmIGl0ZXJhdGlvbiA+PSBjb3VudCkgewogICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpdGVyYXRpb24pOwogICAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7CiAgICAgICAgICBkZWxldGUgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXTsKICAgICAgICB9CgogICAgICAgIGlmICghc2tpcEFwcGx5KSAkcm9vdFNjb3BlLiRhcHBseSgpOwoKICAgICAgfSwgZGVsYXkpOwoKICAgICAgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXSA9IGRlZmVycmVkOwoKICAgICAgcmV0dXJuIHByb21pc2U7CiAgICB9CgoKICAgICAvKioKICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgKiBAbmFtZSBuZy4kaW50ZXJ2YWwjY2FuY2VsCiAgICAgICogQG1ldGhvZE9mIG5nLiRpbnRlcnZhbAogICAgICAqCiAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuCiAgICAgICoKICAgICAgKiBAcGFyYW0ge251bWJlcn0gcHJvbWlzZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJGludGVydmFsYCBmdW5jdGlvbi4KICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgd2FzIHN1Y2Nlc3NmdWxseSBjYW5jZWxlZC4KICAgICAgKi8KICAgIGludGVydmFsLmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHsKICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS4kJGludGVydmFsSWQgaW4gaW50ZXJ2YWxzKSB7CiAgICAgICAgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXS5yZWplY3QoJ2NhbmNlbGVkJyk7CiAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7CiAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgICByZXR1cm4gaW50ZXJ2YWw7CiAgfV07Cn0KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRsb2NhbGUKICoKICogQGRlc2NyaXB0aW9uCiAqICRsb2NhbGUgc2VydmljZSBwcm92aWRlcyBsb2NhbGl6YXRpb24gcnVsZXMgZm9yIHZhcmlvdXMgQW5ndWxhciBjb21wb25lbnRzLiBBcyBvZiByaWdodCBub3cgdGhlCiAqIG9ubHkgcHVibGljIGFwaSBpczoKICoKICogKiBgaWRgIOKAkyBge3N0cmluZ31gIOKAkyBsb2NhbGUgaWQgZm9ybWF0dGVkIGFzIGBsYW5ndWFnZUlkLWNvdW50cnlJZGAgKGUuZy4gYGVuLXVzYCkKICovCmZ1bmN0aW9uICRMb2NhbGVQcm92aWRlcigpewogIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgaWQ6ICdlbi11cycsCgogICAgICBOVU1CRVJfRk9STUFUUzogewogICAgICAgIERFQ0lNQUxfU0VQOiAnLicsCiAgICAgICAgR1JPVVBfU0VQOiAnLCcsCiAgICAgICAgUEFUVEVSTlM6IFsKICAgICAgICAgIHsgLy8gRGVjaW1hbCBQYXR0ZXJuCiAgICAgICAgICAgIG1pbkludDogMSwKICAgICAgICAgICAgbWluRnJhYzogMCwKICAgICAgICAgICAgbWF4RnJhYzogMywKICAgICAgICAgICAgcG9zUHJlOiAnJywKICAgICAgICAgICAgcG9zU3VmOiAnJywKICAgICAgICAgICAgbmVnUHJlOiAnLScsCiAgICAgICAgICAgIG5lZ1N1ZjogJycsCiAgICAgICAgICAgIGdTaXplOiAzLAogICAgICAgICAgICBsZ1NpemU6IDMKICAgICAgICAgIH0seyAvL0N1cnJlbmN5IFBhdHRlcm4KICAgICAgICAgICAgbWluSW50OiAxLAogICAgICAgICAgICBtaW5GcmFjOiAyLAogICAgICAgICAgICBtYXhGcmFjOiAyLAogICAgICAgICAgICBwb3NQcmU6ICdcdTAwQTQnLAogICAgICAgICAgICBwb3NTdWY6ICcnLAogICAgICAgICAgICBuZWdQcmU6ICcoXHUwMEE0JywKICAgICAgICAgICAgbmVnU3VmOiAnKScsCiAgICAgICAgICAgIGdTaXplOiAzLAogICAgICAgICAgICBsZ1NpemU6IDMKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgIENVUlJFTkNZX1NZTTogJyQnCiAgICAgIH0sCgogICAgICBEQVRFVElNRV9GT1JNQVRTOiB7CiAgICAgICAgTU9OVEg6CiAgICAgICAgICAgICdKYW51YXJ5LEZlYnJ1YXJ5LE1hcmNoLEFwcmlsLE1heSxKdW5lLEp1bHksQXVndXN0LFNlcHRlbWJlcixPY3RvYmVyLE5vdmVtYmVyLERlY2VtYmVyJwogICAgICAgICAgICAuc3BsaXQoJywnKSwKICAgICAgICBTSE9SVE1PTlRIOiAgJ0phbixGZWIsTWFyLEFwcixNYXksSnVuLEp1bCxBdWcsU2VwLE9jdCxOb3YsRGVjJy5zcGxpdCgnLCcpLAogICAgICAgIERBWTogJ1N1bmRheSxNb25kYXksVHVlc2RheSxXZWRuZXNkYXksVGh1cnNkYXksRnJpZGF5LFNhdHVyZGF5Jy5zcGxpdCgnLCcpLAogICAgICAgIFNIT1JUREFZOiAnU3VuLE1vbixUdWUsV2VkLFRodSxGcmksU2F0Jy5zcGxpdCgnLCcpLAogICAgICAgIEFNUE1TOiBbJ0FNJywnUE0nXSwKICAgICAgICBtZWRpdW06ICdNTU0gZCwgeSBoOm1tOnNzIGEnLAogICAgICAgIHNob3J0OiAnTS9kL3l5IGg6bW0gYScsCiAgICAgICAgZnVsbERhdGU6ICdFRUVFLCBNTU1NIGQsIHknLAogICAgICAgIGxvbmdEYXRlOiAnTU1NTSBkLCB5JywKICAgICAgICBtZWRpdW1EYXRlOiAnTU1NIGQsIHknLAogICAgICAgIHNob3J0RGF0ZTogJ00vZC95eScsCiAgICAgICAgbWVkaXVtVGltZTogJ2g6bW06c3MgYScsCiAgICAgICAgc2hvcnRUaW1lOiAnaDptbSBhJwogICAgICB9LAoKICAgICAgcGx1cmFsQ2F0OiBmdW5jdGlvbihudW0pIHsKICAgICAgICBpZiAobnVtID09PSAxKSB7CiAgICAgICAgICByZXR1cm4gJ29uZSc7CiAgICAgICAgfQogICAgICAgIHJldHVybiAnb3RoZXInOwogICAgICB9CiAgICB9OwogIH07Cn0KCnZhciBQQVRIX01BVENIID0gL14oW15cPyNdKikoXD8oW14jXSopKT8oIyguKikpPyQvLAogICAgREVGQVVMVF9QT1JUUyA9IHsnaHR0cCc6IDgwLCAnaHR0cHMnOiA0NDMsICdmdHAnOiAyMX07CnZhciAkbG9jYXRpb25NaW5FcnIgPSBtaW5FcnIoJyRsb2NhdGlvbicpOwoKCi8qKgogKiBFbmNvZGUgcGF0aCB1c2luZyBlbmNvZGVVcmlTZWdtZW50LCBpZ25vcmluZyBmb3J3YXJkIHNsYXNoZXMKICoKICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBlbmNvZGUKICogQHJldHVybnMge3N0cmluZ30KICovCmZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkgewogIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy8nKSwKICAgICAgaSA9IHNlZ21lbnRzLmxlbmd0aDsKCiAgd2hpbGUgKGktLSkgewogICAgc2VnbWVudHNbaV0gPSBlbmNvZGVVcmlTZWdtZW50KHNlZ21lbnRzW2ldKTsKICB9CgogIHJldHVybiBzZWdtZW50cy5qb2luKCcvJyk7Cn0KCmZ1bmN0aW9uIHBhcnNlQWJzb2x1dGVVcmwoYWJzb2x1dGVVcmwsIGxvY2F0aW9uT2JqLCBhcHBCYXNlKSB7CiAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUoYWJzb2x1dGVVcmwsIGFwcEJhc2UpOwoKICBsb2NhdGlvbk9iai4kJHByb3RvY29sID0gcGFyc2VkVXJsLnByb3RvY29sOwogIGxvY2F0aW9uT2JqLiQkaG9zdCA9IHBhcnNlZFVybC5ob3N0bmFtZTsKICBsb2NhdGlvbk9iai4kJHBvcnQgPSBpbnQocGFyc2VkVXJsLnBvcnQpIHx8IERFRkFVTFRfUE9SVFNbcGFyc2VkVXJsLnByb3RvY29sXSB8fCBudWxsOwp9CgoKZnVuY3Rpb24gcGFyc2VBcHBVcmwocmVsYXRpdmVVcmwsIGxvY2F0aW9uT2JqLCBhcHBCYXNlKSB7CiAgdmFyIHByZWZpeGVkID0gKHJlbGF0aXZlVXJsLmNoYXJBdCgwKSAhPT0gJy8nKTsKICBpZiAocHJlZml4ZWQpIHsKICAgIHJlbGF0aXZlVXJsID0gJy8nICsgcmVsYXRpdmVVcmw7CiAgfQogIHZhciBtYXRjaCA9IHVybFJlc29sdmUocmVsYXRpdmVVcmwsIGFwcEJhc2UpOwogIGxvY2F0aW9uT2JqLiQkcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChwcmVmaXhlZCAmJiBtYXRjaC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyA/CiAgICAgIG1hdGNoLnBhdGhuYW1lLnN1YnN0cmluZygxKSA6IG1hdGNoLnBhdGhuYW1lKTsKICBsb2NhdGlvbk9iai4kJHNlYXJjaCA9IHBhcnNlS2V5VmFsdWUobWF0Y2guc2VhcmNoKTsKICBsb2NhdGlvbk9iai4kJGhhc2ggPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2guaGFzaCk7CgogIC8vIG1ha2Ugc3VyZSBwYXRoIHN0YXJ0cyB3aXRoICcvJzsKICBpZiAobG9jYXRpb25PYmouJCRwYXRoICYmIGxvY2F0aW9uT2JqLiQkcGF0aC5jaGFyQXQoMCkgIT0gJy8nKSB7CiAgICBsb2NhdGlvbk9iai4kJHBhdGggPSAnLycgKyBsb2NhdGlvbk9iai4kJHBhdGg7CiAgfQp9CgoKLyoqCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBiZWdpbgogKiBAcGFyYW0ge3N0cmluZ30gd2hvbGUKICogQHJldHVybnMge3N0cmluZ30gcmV0dXJucyB0ZXh0IGZyb20gd2hvbGUgYWZ0ZXIgYmVnaW4gb3IgdW5kZWZpbmVkIGlmIGl0IGRvZXMgbm90IGJlZ2luIHdpdGgKICogICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQgc3RyaW5nLgogKi8KZnVuY3Rpb24gYmVnaW5zV2l0aChiZWdpbiwgd2hvbGUpIHsKICBpZiAod2hvbGUuaW5kZXhPZihiZWdpbikgPT09IDApIHsKICAgIHJldHVybiB3aG9sZS5zdWJzdHIoYmVnaW4ubGVuZ3RoKTsKICB9Cn0KCgpmdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7CiAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTsKICByZXR1cm4gaW5kZXggPT0gLTEgPyB1cmwgOiB1cmwuc3Vic3RyKDAsIGluZGV4KTsKfQoKCmZ1bmN0aW9uIHN0cmlwRmlsZSh1cmwpIHsKICByZXR1cm4gdXJsLnN1YnN0cigwLCBzdHJpcEhhc2godXJsKS5sYXN0SW5kZXhPZignLycpICsgMSk7Cn0KCi8qIHJldHVybiB0aGUgc2VydmVyIG9ubHkgKHNjaGVtZTovL2hvc3Q6cG9ydCkgKi8KZnVuY3Rpb24gc2VydmVyQmFzZSh1cmwpIHsKICByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZignLycsIHVybC5pbmRleE9mKCcvLycpICsgMikpOwp9CgoKLyoqCiAqIExvY2F0aW9uSHRtbDVVcmwgcmVwcmVzZW50cyBhbiB1cmwKICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIEhUTUw1IG1vZGUgaXMgZW5hYmxlZCBhbmQgc3VwcG9ydGVkCiAqCiAqIEBjb25zdHJ1Y3RvcgogKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTAogKiBAcGFyYW0ge3N0cmluZ30gYmFzZVByZWZpeCB1cmwgcGF0aCBwcmVmaXgKICovCmZ1bmN0aW9uIExvY2F0aW9uSHRtbDVVcmwoYXBwQmFzZSwgYmFzZVByZWZpeCkgewogIHRoaXMuJCRodG1sNSA9IHRydWU7CiAgYmFzZVByZWZpeCA9IGJhc2VQcmVmaXggfHwgJyc7CiAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7CiAgcGFyc2VBYnNvbHV0ZVVybChhcHBCYXNlLCB0aGlzLCBhcHBCYXNlKTsKCgogIC8qKgogICAqIFBhcnNlIGdpdmVuIGh0bWw1IChyZWd1bGFyKSB1cmwgc3RyaW5nIGludG8gcHJvcGVydGllcwogICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdBYnNvbHV0ZVVybCBIVE1MNSB1cmwKICAgKiBAcHJpdmF0ZQogICAqLwogIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkgewogICAgdmFyIHBhdGhVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCk7CiAgICBpZiAoIWlzU3RyaW5nKHBhdGhVcmwpKSB7CiAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaXB0aHByZngnLCAnSW52YWxpZCB1cmwgInswfSIsIG1pc3NpbmcgcGF0aCBwcmVmaXggInsxfSIuJywgdXJsLAogICAgICAgICAgYXBwQmFzZU5vRmlsZSk7CiAgICB9CgogICAgcGFyc2VBcHBVcmwocGF0aFVybCwgdGhpcywgYXBwQmFzZSk7CgogICAgaWYgKCF0aGlzLiQkcGF0aCkgewogICAgICB0aGlzLiQkcGF0aCA9ICcvJzsKICAgIH0KCiAgICB0aGlzLiQkY29tcG9zZSgpOwogIH07CgogIC8qKgogICAqIENvbXBvc2UgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHkKICAgKiBAcHJpdmF0ZQogICAqLwogIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSwKICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnOwoKICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoOwogICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2VOb0ZpbGUgKyB0aGlzLiQkdXJsLnN1YnN0cigxKTsgLy8gZmlyc3QgY2hhciBpcyBhbHdheXMgJy8nCiAgfTsKCiAgdGhpcy4kJHJld3JpdGUgPSBmdW5jdGlvbih1cmwpIHsKICAgIHZhciBhcHBVcmwsIHByZXZBcHBVcmw7CgogICAgaWYgKCAoYXBwVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlLCB1cmwpKSAhPT0gdW5kZWZpbmVkICkgewogICAgICBwcmV2QXBwVXJsID0gYXBwVXJsOwogICAgICBpZiAoIChhcHBVcmwgPSBiZWdpbnNXaXRoKGJhc2VQcmVmaXgsIGFwcFVybCkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgcmV0dXJuIGFwcEJhc2VOb0ZpbGUgKyAoYmVnaW5zV2l0aCgnLycsIGFwcFVybCkgfHwgYXBwVXJsKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gYXBwQmFzZSArIHByZXZBcHBVcmw7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoIChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpICE9PSB1bmRlZmluZWQgKSB7CiAgICAgIHJldHVybiBhcHBCYXNlTm9GaWxlICsgYXBwVXJsOwogICAgfSBlbHNlIGlmIChhcHBCYXNlTm9GaWxlID09IHVybCArICcvJykgewogICAgICByZXR1cm4gYXBwQmFzZU5vRmlsZTsKICAgIH0KICB9Owp9CgoKLyoqCiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyB1cmwKICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIGRldmVsb3BlciBkb2Vzbid0IG9wdCBpbnRvIGh0bWw1IG1vZGUuCiAqIEl0IGFsc28gc2VydmVzIGFzIHRoZSBiYXNlIGNsYXNzIGZvciBodG1sNSBtb2RlIGZhbGxiYWNrIG9uIGxlZ2FjeSBicm93c2Vycy4KICoKICogQGNvbnN0cnVjdG9yCiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMCiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoUHJlZml4IGhhc2hiYW5nIHByZWZpeAogKi8KZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ1VybChhcHBCYXNlLCBoYXNoUHJlZml4KSB7CiAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7CgogIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcywgYXBwQmFzZSk7CgoKICAvKioKICAgKiBQYXJzZSBnaXZlbiBoYXNoYmFuZyB1cmwgaW50byBwcm9wZXJ0aWVzCiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyB1cmwKICAgKiBAcHJpdmF0ZQogICAqLwogIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkgewogICAgdmFyIHdpdGhvdXRCYXNlVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlLCB1cmwpIHx8IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKTsKICAgIHZhciB3aXRob3V0SGFzaFVybCA9IHdpdGhvdXRCYXNlVXJsLmNoYXJBdCgwKSA9PSAnIycKICAgICAgICA/IGJlZ2luc1dpdGgoaGFzaFByZWZpeCwgd2l0aG91dEJhc2VVcmwpCiAgICAgICAgOiAodGhpcy4kJGh0bWw1KQogICAgICAgICAgPyB3aXRob3V0QmFzZVVybAogICAgICAgICAgOiAnJzsKCiAgICBpZiAoIWlzU3RyaW5nKHdpdGhvdXRIYXNoVXJsKSkgewogICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2loc2hwcmZ4JywgJ0ludmFsaWQgdXJsICJ7MH0iLCBtaXNzaW5nIGhhc2ggcHJlZml4ICJ7MX0iLicsIHVybCwKICAgICAgICAgIGhhc2hQcmVmaXgpOwogICAgfQogICAgcGFyc2VBcHBVcmwod2l0aG91dEhhc2hVcmwsIHRoaXMsIGFwcEJhc2UpOwoKICAgIHRoaXMuJCRwYXRoID0gcmVtb3ZlV2luZG93c0RyaXZlTmFtZSh0aGlzLiQkcGF0aCwgd2l0aG91dEhhc2hVcmwsIGFwcEJhc2UpOwoKICAgIHRoaXMuJCRjb21wb3NlKCk7CgogICAgLyoKICAgICAqIEluIFdpbmRvd3MsIG9uIGFuIGFuY2hvciBub2RlIG9uIGRvY3VtZW50cyBsb2FkZWQgZnJvbQogICAgICogdGhlIGZpbGVzeXN0ZW0sIHRoZSBicm93c2VyIHdpbGwgcmV0dXJuIGEgcGF0aG5hbWUKICAgICAqIHByZWZpeGVkIHdpdGggdGhlIGRyaXZlIG5hbWUgKCcvQzovcGF0aCcpIHdoZW4gYQogICAgICogcGF0aG5hbWUgd2l0aG91dCBhIGRyaXZlIGlzIHNldDoKICAgICAqICAqIGEuc2V0QXR0cmlidXRlKCdocmVmJywgJy9mb28nKQogICAgICogICAqIGEucGF0aG5hbWUgPT09ICcvQzovZm9vJyAvL3RydWUKICAgICAqCiAgICAgKiBJbnNpZGUgb2YgQW5ndWxhciwgd2UncmUgYWx3YXlzIHVzaW5nIHBhdGhuYW1lcyB0aGF0CiAgICAgKiBkbyBub3QgaW5jbHVkZSBkcml2ZSBuYW1lcyBmb3Igcm91dGluZy4KICAgICAqLwogICAgZnVuY3Rpb24gcmVtb3ZlV2luZG93c0RyaXZlTmFtZSAocGF0aCwgdXJsLCBiYXNlKSB7CiAgICAgIC8qCiAgICAgIE1hdGNoZXMgcGF0aHMgZm9yIGZpbGUgcHJvdG9jb2wgb24gd2luZG93cywKICAgICAgc3VjaCBhcyAvQzovZm9vL2JhciwgYW5kIGNhcHR1cmVzIG9ubHkgL2Zvby9iYXIuCiAgICAgICovCiAgICAgIHZhciB3aW5kb3dzRmlsZVBhdGhFeHAgPSAvXlwvPy4qPzooXC8uKikvOwoKICAgICAgdmFyIGZpcnN0UGF0aFNlZ21lbnRNYXRjaDsKCiAgICAgIC8vR2V0IHRoZSByZWxhdGl2ZSBwYXRoIGZyb20gdGhlIGlucHV0IFVSTC4KICAgICAgaWYgKHVybC5pbmRleE9mKGJhc2UpID09PSAwKSB7CiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoYmFzZSwgJycpOwogICAgICB9CgogICAgICAvKgogICAgICAgKiBUaGUgaW5wdXQgVVJMIGludGVudGlvbmFsbHkgY29udGFpbnMgYQogICAgICAgKiBmaXJzdCBwYXRoIHNlZ21lbnQgdGhhdCBlbmRzIHdpdGggYSBjb2xvbi4KICAgICAgICovCiAgICAgIGlmICh3aW5kb3dzRmlsZVBhdGhFeHAuZXhlYyh1cmwpKSB7CiAgICAgICAgcmV0dXJuIHBhdGg7CiAgICAgIH0KCiAgICAgIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA9IHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHBhdGgpOwogICAgICByZXR1cm4gZmlyc3RQYXRoU2VnbWVudE1hdGNoID8gZmlyc3RQYXRoU2VnbWVudE1hdGNoWzFdIDogcGF0aDsKICAgIH0KICB9OwoKICAvKioKICAgKiBDb21wb3NlIGhhc2hiYW5nIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5CiAgICogQHByaXZhdGUKICAgKi8KICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksCiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJzsKCiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDsKICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlICsgKHRoaXMuJCR1cmwgPyBoYXNoUHJlZml4ICsgdGhpcy4kJHVybCA6ICcnKTsKICB9OwoKICB0aGlzLiQkcmV3cml0ZSA9IGZ1bmN0aW9uKHVybCkgewogICAgaWYoc3RyaXBIYXNoKGFwcEJhc2UpID09IHN0cmlwSGFzaCh1cmwpKSB7CiAgICAgIHJldHVybiB1cmw7CiAgICB9CiAgfTsKfQoKCi8qKgogKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgdXJsCiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBodG1sNSBoaXN0b3J5IGFwaSBpcyBlbmFibGVkIGJ1dCB0aGUgYnJvd3NlcgogKiBkb2VzIG5vdCBzdXBwb3J0IGl0LgogKgogKiBAY29uc3RydWN0b3IKICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkwKICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4CiAqLwpmdW5jdGlvbiBMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybChhcHBCYXNlLCBoYXNoUHJlZml4KSB7CiAgdGhpcy4kJGh0bWw1ID0gdHJ1ZTsKICBMb2NhdGlvbkhhc2hiYW5nVXJsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgogIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpOwoKICB0aGlzLiQkcmV3cml0ZSA9IGZ1bmN0aW9uKHVybCkgewogICAgdmFyIGFwcFVybDsKCiAgICBpZiAoIGFwcEJhc2UgPT0gc3RyaXBIYXNoKHVybCkgKSB7CiAgICAgIHJldHVybiB1cmw7CiAgICB9IGVsc2UgaWYgKCAoYXBwVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlTm9GaWxlLCB1cmwpKSApIHsKICAgICAgcmV0dXJuIGFwcEJhc2UgKyBoYXNoUHJlZml4ICsgYXBwVXJsOwogICAgfSBlbHNlIGlmICggYXBwQmFzZU5vRmlsZSA9PT0gdXJsICsgJy8nKSB7CiAgICAgIHJldHVybiBhcHBCYXNlTm9GaWxlOwogICAgfQogIH07Cn0KCgpMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybC5wcm90b3R5cGUgPQogIExvY2F0aW9uSGFzaGJhbmdVcmwucHJvdG90eXBlID0KICBMb2NhdGlvbkh0bWw1VXJsLnByb3RvdHlwZSA9IHsKCiAgLyoqCiAgICogQXJlIHdlIGluIGh0bWw1IG1vZGU/CiAgICogQHByaXZhdGUKICAgKi8KICAkJGh0bWw1OiBmYWxzZSwKCiAgLyoqCiAgICogSGFzIGFueSBjaGFuZ2UgYmVlbiByZXBsYWNpbmcgPwogICAqIEBwcml2YXRlCiAgICovCiAgJCRyZXBsYWNlOiBmYWxzZSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNhYnNVcmwKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS4KICAgKgogICAqIFJldHVybiBmdWxsIHVybCByZXByZXNlbnRhdGlvbiB3aXRoIGFsbCBzZWdtZW50cyBlbmNvZGVkIGFjY29yZGluZyB0byBydWxlcyBzcGVjaWZpZWQgaW4KICAgKiB7QGxpbmsgaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzk4Ni50eHQgUkZDIDM5ODZ9LgogICAqCiAgICogQHJldHVybiB7c3RyaW5nfSBmdWxsIHVybAogICAqLwogIGFic1VybDogbG9jYXRpb25HZXR0ZXIoJyQkYWJzVXJsJyksCgogIC8qKgogICAqIEBuZ2RvYyBtZXRob2QKICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jdXJsCiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLgogICAqCiAgICogUmV0dXJuIHVybCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKSB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuCiAgICoKICAgKiBDaGFuZ2UgcGF0aCwgc2VhcmNoIGFuZCBoYXNoLCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmc9fSB1cmwgTmV3IHVybCB3aXRob3V0IGJhc2UgcHJlZml4IChlLmcuIGAvcGF0aD9hPWIjaGFzaGApCiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXBsYWNlIFRoZSBwYXRoIHRoYXQgd2lsbCBiZSBjaGFuZ2VkCiAgICogQHJldHVybiB7c3RyaW5nfSB1cmwKICAgKi8KICB1cmw6IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSkgewogICAgaWYgKGlzVW5kZWZpbmVkKHVybCkpCiAgICAgIHJldHVybiB0aGlzLiQkdXJsOwoKICAgIHZhciBtYXRjaCA9IFBBVEhfTUFUQ0guZXhlYyh1cmwpOwogICAgaWYgKG1hdGNoWzFdKSB0aGlzLnBhdGgoZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzFdKSk7CiAgICBpZiAobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pIHRoaXMuc2VhcmNoKG1hdGNoWzNdIHx8ICcnKTsKICAgIHRoaXMuaGFzaChtYXRjaFs1XSB8fCAnJywgcmVwbGFjZSk7CgogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNwcm90b2NvbAogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LgogICAqCiAgICogUmV0dXJuIHByb3RvY29sIG9mIGN1cnJlbnQgdXJsLgogICAqCiAgICogQHJldHVybiB7c3RyaW5nfSBwcm90b2NvbCBvZiBjdXJyZW50IHVybAogICAqLwogIHByb3RvY29sOiBsb2NhdGlvbkdldHRlcignJCRwcm90b2NvbCcpLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI2hvc3QKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS4KICAgKgogICAqIFJldHVybiBob3N0IG9mIGN1cnJlbnQgdXJsLgogICAqCiAgICogQHJldHVybiB7c3RyaW5nfSBob3N0IG9mIGN1cnJlbnQgdXJsLgogICAqLwogIGhvc3Q6IGxvY2F0aW9uR2V0dGVyKCckJGhvc3QnKSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNwb3J0CiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuCiAgICoKICAgKiBSZXR1cm4gcG9ydCBvZiBjdXJyZW50IHVybC4KICAgKgogICAqIEByZXR1cm4ge051bWJlcn0gcG9ydAogICAqLwogIHBvcnQ6IGxvY2F0aW9uR2V0dGVyKCckJHBvcnQnKSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNwYXRoCiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLgogICAqCiAgICogUmV0dXJuIHBhdGggb2YgY3VycmVudCB1cmwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLgogICAqCiAgICogQ2hhbmdlIHBhdGggd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC4KICAgKgogICAqIE5vdGU6IFBhdGggc2hvdWxkIGFsd2F5cyBiZWdpbiB3aXRoIGZvcndhcmQgc2xhc2ggKC8pLCB0aGlzIG1ldGhvZCB3aWxsIGFkZCB0aGUgZm9yd2FyZCBzbGFzaAogICAqIGlmIGl0IGlzIG1pc3NpbmcuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdGggTmV3IHBhdGgKICAgKiBAcmV0dXJuIHtzdHJpbmd9IHBhdGgKICAgKi8KICBwYXRoOiBsb2NhdGlvbkdldHRlclNldHRlcignJCRwYXRoJywgZnVuY3Rpb24ocGF0aCkgewogICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoOwogIH0pLAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI3NlYXJjaAogICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb24KICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci4KICAgKgogICAqIFJldHVybiBzZWFyY2ggcGFydCAoYXMgb2JqZWN0KSBvZiBjdXJyZW50IHVybCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuCiAgICoKICAgKiBDaGFuZ2Ugc2VhcmNoIHBhcnQgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nPnxPYmplY3QuPEFycmF5LjxzdHJpbmc+Pn0gc2VhcmNoIE5ldyBzZWFyY2ggcGFyYW1zIC0gc3RyaW5nIG9yCiAgICogaGFzaCBvYmplY3QuIEhhc2ggb2JqZWN0IG1heSBjb250YWluIGFuIGFycmF5IG9mIHZhbHVlcywgd2hpY2ggd2lsbCBiZSBkZWNvZGVkIGFzIGR1cGxpY2F0ZXMgaW4KICAgKiB0aGUgdXJsLgogICAqCiAgICogQHBhcmFtIHsoc3RyaW5nfEFycmF5PHN0cmluZz4pPX0gcGFyYW1WYWx1ZSBJZiBgc2VhcmNoYCBpcyBhIHN0cmluZywgdGhlbiBgcGFyYW1WYWx1ZWAgd2lsbCBvdmVycmlkZSBvbmx5IGEKICAgKiBzaW5nbGUgc2VhcmNoIHBhcmFtZXRlci4gSWYgYHBhcmFtVmFsdWVgIGlzIGFuIGFycmF5LCBpdCB3aWxsIHNldCB0aGUgcGFyYW1ldGVyIGFzIGEKICAgKiBjb21tYS1zZXBhcmF0ZWQgdmFsdWUuIElmIGBwYXJhbVZhbHVlYCBpcyBgbnVsbGAsIHRoZSBwYXJhbWV0ZXIgd2lsbCBiZSBkZWxldGVkLgogICAqCiAgICogQHJldHVybiB7c3RyaW5nfSBzZWFyY2gKICAgKi8KICBzZWFyY2g6IGZ1bmN0aW9uKHNlYXJjaCwgcGFyYW1WYWx1ZSkgewogICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgIGNhc2UgMDoKICAgICAgICByZXR1cm4gdGhpcy4kJHNlYXJjaDsKICAgICAgY2FzZSAxOgogICAgICAgIGlmIChpc1N0cmluZyhzZWFyY2gpKSB7CiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShzZWFyY2gpOwogICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc2VhcmNoKSkgewogICAgICAgICAgdGhpcy4kJHNlYXJjaCA9IHNlYXJjaDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpc3JjaGFyZycsCiAgICAgICAgICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgYCRsb2NhdGlvbiNzZWFyY2goKWAgY2FsbCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIG9iamVjdC4nKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHBhcmFtVmFsdWUpIHx8IHBhcmFtVmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgIGRlbGV0ZSB0aGlzLiQkc2VhcmNoW3NlYXJjaF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJCRzZWFyY2hbc2VhcmNoXSA9IHBhcmFtVmFsdWU7CiAgICAgICAgfQogICAgfQoKICAgIHRoaXMuJCRjb21wb3NlKCk7CiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI2hhc2gKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuCiAgICoKICAgKiBSZXR1cm4gaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuCiAgICoKICAgKiBDaGFuZ2UgaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmc9fSBoYXNoIE5ldyBoYXNoIGZyYWdtZW50CiAgICogQHJldHVybiB7c3RyaW5nfSBoYXNoCiAgICovCiAgaGFzaDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkaGFzaCcsIGlkZW50aXR5KSwKCiAgLyoqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNyZXBsYWNlCiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvbgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogSWYgY2FsbGVkLCBhbGwgY2hhbmdlcyB0byAkbG9jYXRpb24gZHVyaW5nIGN1cnJlbnQgYCRkaWdlc3RgIHdpbGwgYmUgcmVwbGFjaW5nIGN1cnJlbnQgaGlzdG9yeQogICAqIHJlY29yZCwgaW5zdGVhZCBvZiBhZGRpbmcgbmV3IG9uZS4KICAgKi8KICByZXBsYWNlOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuJCRyZXBsYWNlID0gdHJ1ZTsKICAgIHJldHVybiB0aGlzOwogIH0KfTsKCmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyKHByb3BlcnR5KSB7CiAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXNbcHJvcGVydHldOwogIH07Cn0KCgpmdW5jdGlvbiBsb2NhdGlvbkdldHRlclNldHRlcihwcm9wZXJ0eSwgcHJlcHJvY2VzcykgewogIHJldHVybiBmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkKICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHldOwoKICAgIHRoaXNbcHJvcGVydHldID0gcHJlcHJvY2Vzcyh2YWx1ZSk7CiAgICB0aGlzLiQkY29tcG9zZSgpOwoKICAgIHJldHVybiB0aGlzOwogIH07Cn0KCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kbG9jYXRpb24KICoKICogQHJlcXVpcmVzICRicm93c2VyCiAqIEByZXF1aXJlcyAkc25pZmZlcgogKiBAcmVxdWlyZXMgJHJvb3RFbGVtZW50CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgJGxvY2F0aW9uIHNlcnZpY2UgcGFyc2VzIHRoZSBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIgKGJhc2VkIG9uIHRoZQogKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vd2luZG93LmxvY2F0aW9uIHdpbmRvdy5sb2NhdGlvbn0pIGFuZCBtYWtlcyB0aGUgVVJMCiAqIGF2YWlsYWJsZSB0byB5b3VyIGFwcGxpY2F0aW9uLiBDaGFuZ2VzIHRvIHRoZSBVUkwgaW4gdGhlIGFkZHJlc3MgYmFyIGFyZSByZWZsZWN0ZWQgaW50bwogKiAkbG9jYXRpb24gc2VydmljZSBhbmQgY2hhbmdlcyB0byAkbG9jYXRpb24gYXJlIHJlZmxlY3RlZCBpbnRvIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLgogKgogKiAqKlRoZSAkbG9jYXRpb24gc2VydmljZToqKgogKgogKiAtIEV4cG9zZXMgdGhlIGN1cnJlbnQgVVJMIGluIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLCBzbyB5b3UgY2FuCiAqICAgLSBXYXRjaCBhbmQgb2JzZXJ2ZSB0aGUgVVJMLgogKiAgIC0gQ2hhbmdlIHRoZSBVUkwuCiAqIC0gU3luY2hyb25pemVzIHRoZSBVUkwgd2l0aCB0aGUgYnJvd3NlciB3aGVuIHRoZSB1c2VyCiAqICAgLSBDaGFuZ2VzIHRoZSBhZGRyZXNzIGJhci4KICogICAtIENsaWNrcyB0aGUgYmFjayBvciBmb3J3YXJkIGJ1dHRvbiAob3IgY2xpY2tzIGEgSGlzdG9yeSBsaW5rKS4KICogICAtIENsaWNrcyBvbiBhIGxpbmsuCiAqIC0gUmVwcmVzZW50cyB0aGUgVVJMIG9iamVjdCBhcyBhIHNldCBvZiBtZXRob2RzIChwcm90b2NvbCwgaG9zdCwgcG9ydCwgcGF0aCwgc2VhcmNoLCBoYXNoKS4KICoKICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIHtAbGluayBndWlkZS9kZXZfZ3VpZGUuc2VydmljZXMuJGxvY2F0aW9uIERldmVsb3BlciBHdWlkZTogQW5ndWxhcgogKiBTZXJ2aWNlczogVXNpbmcgJGxvY2F0aW9ufQogKi8KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRsb2NhdGlvblByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKiBVc2UgdGhlIGAkbG9jYXRpb25Qcm92aWRlcmAgdG8gY29uZmlndXJlIGhvdyB0aGUgYXBwbGljYXRpb24gZGVlcCBsaW5raW5nIHBhdGhzIGFyZSBzdG9yZWQuCiAqLwpmdW5jdGlvbiAkTG9jYXRpb25Qcm92aWRlcigpewogIHZhciBoYXNoUHJlZml4ID0gJycsCiAgICAgIGh0bWw1TW9kZSA9IGZhbHNlOwoKICAvKioKICAgKiBAbmdkb2MgcHJvcGVydHkKICAgKiBAbmFtZSBuZy4kbG9jYXRpb25Qcm92aWRlciNoYXNoUHJlZml4CiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvblByb3ZpZGVyCiAgICogQGRlc2NyaXB0aW9uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXggUHJlZml4IGZvciBoYXNoIHBhcnQgKGNvbnRhaW5pbmcgcGF0aCBhbmQgc2VhcmNoKQogICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyCiAgICovCiAgdGhpcy5oYXNoUHJlZml4ID0gZnVuY3Rpb24ocHJlZml4KSB7CiAgICBpZiAoaXNEZWZpbmVkKHByZWZpeCkpIHsKICAgICAgaGFzaFByZWZpeCA9IHByZWZpeDsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gaGFzaFByZWZpeDsKICAgIH0KICB9OwoKICAvKioKICAgKiBAbmdkb2MgcHJvcGVydHkKICAgKiBAbmFtZSBuZy4kbG9jYXRpb25Qcm92aWRlciNodG1sNU1vZGUKICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uUHJvdmlkZXIKICAgKiBAZGVzY3JpcHRpb24KICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBtb2RlIFVzZSBIVE1MNSBzdHJhdGVneSBpZiBhdmFpbGFibGUuCiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXIKICAgKi8KICB0aGlzLmh0bWw1TW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHsKICAgIGlmIChpc0RlZmluZWQobW9kZSkpIHsKICAgICAgaHRtbDVNb2RlID0gbW9kZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gaHRtbDVNb2RlOwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBldmVudAogICAqIEBuYW1lIG5nLiRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdGFydAogICAqIEBldmVudE9mIG5nLiRsb2NhdGlvbgogICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGUKICAgKiBAZGVzY3JpcHRpb24KICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSBVUkwgd2lsbCBjaGFuZ2UuIFRoaXMgY2hhbmdlIGNhbiBiZSBwcmV2ZW50ZWQgYnkgY2FsbGluZwogICAqIGBwcmV2ZW50RGVmYXVsdGAgbWV0aG9kIG9mIHRoZSBldmVudC4gU2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gZm9yIG1vcmUKICAgKiBkZXRhaWxzIGFib3V0IGV2ZW50IG9iamVjdC4gVXBvbiBzdWNjZXNzZnVsIGNoYW5nZQogICAqIHtAbGluayBuZy4kbG9jYXRpb24jZXZlbnRzXyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MgJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc30gaXMgZmlyZWQuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuCiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMCiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC4KICAgKi8KCiAgLyoqCiAgICogQG5nZG9jIGV2ZW50CiAgICogQG5hbWUgbmcuJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MKICAgKiBAZXZlbnRPZiBuZy4kbG9jYXRpb24KICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlCiAgICogQGRlc2NyaXB0aW9uCiAgICogQnJvYWRjYXN0ZWQgYWZ0ZXIgYSBVUkwgd2FzIGNoYW5nZWQuCiAgICoKICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuCiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMCiAgICogQHBhcmFtIHtzdHJpbmc9fSBvbGRVcmwgVVJMIHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC4KICAgKi8KCiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRzbmlmZmVyJywgJyRyb290RWxlbWVudCcsCiAgICAgIGZ1bmN0aW9uKCAkcm9vdFNjb3BlLCAgICRicm93c2VyLCAgICRzbmlmZmVyLCAgICRyb290RWxlbWVudCkgewogICAgdmFyICRsb2NhdGlvbiwKICAgICAgICBMb2NhdGlvbk1vZGUsCiAgICAgICAgYmFzZUhyZWYgPSAkYnJvd3Nlci5iYXNlSHJlZigpLCAvLyBpZiBiYXNlW2hyZWZdIGlzIHVuZGVmaW5lZCwgaXQgZGVmYXVsdHMgdG8gJycKICAgICAgICBpbml0aWFsVXJsID0gJGJyb3dzZXIudXJsKCksCiAgICAgICAgYXBwQmFzZTsKCiAgICBpZiAoaHRtbDVNb2RlKSB7CiAgICAgIGFwcEJhc2UgPSBzZXJ2ZXJCYXNlKGluaXRpYWxVcmwpICsgKGJhc2VIcmVmIHx8ICcvJyk7CiAgICAgIExvY2F0aW9uTW9kZSA9ICRzbmlmZmVyLmhpc3RvcnkgPyBMb2NhdGlvbkh0bWw1VXJsIDogTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmw7CiAgICB9IGVsc2UgewogICAgICBhcHBCYXNlID0gc3RyaXBIYXNoKGluaXRpYWxVcmwpOwogICAgICBMb2NhdGlvbk1vZGUgPSBMb2NhdGlvbkhhc2hiYW5nVXJsOwogICAgfQogICAgJGxvY2F0aW9uID0gbmV3IExvY2F0aW9uTW9kZShhcHBCYXNlLCAnIycgKyBoYXNoUHJlZml4KTsKICAgICRsb2NhdGlvbi4kJHBhcnNlKCRsb2NhdGlvbi4kJHJld3JpdGUoaW5pdGlhbFVybCkpOwoKICAgICRyb290RWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkgewogICAgICAvLyBUT0RPKHZvanRhKTogcmV3cml0ZSBsaW5rIHdoZW4gb3BlbmluZyBpbiBuZXcgdGFiL3dpbmRvdyAoaW4gbGVnYWN5IGJyb3dzZXIpCiAgICAgIC8vIGN1cnJlbnRseSB3ZSBvcGVuIG5pY2UgdXJsIGxpbmsgYW5kIHJlZGlyZWN0IHRoZW4KCiAgICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQud2hpY2ggPT0gMikgcmV0dXJuOwoKICAgICAgdmFyIGVsbSA9IGpxTGl0ZShldmVudC50YXJnZXQpOwoKICAgICAgLy8gdHJhdmVyc2UgdGhlIERPTSB1cCB0byBmaW5kIGZpcnN0IEEgdGFnCiAgICAgIHdoaWxlIChsb3dlcmNhc2UoZWxtWzBdLm5vZGVOYW1lKSAhPT0gJ2EnKSB7CiAgICAgICAgLy8gaWdub3JlIHJld3JpdGluZyBpZiBubyBBIHRhZyAocmVhY2hlZCByb290IGVsZW1lbnQsIG9yIG5vIHBhcmVudCAtIHJlbW92ZWQgZnJvbSBkb2N1bWVudCkKICAgICAgICBpZiAoZWxtWzBdID09PSAkcm9vdEVsZW1lbnRbMF0gfHwgIShlbG0gPSBlbG0ucGFyZW50KCkpWzBdKSByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBhYnNIcmVmID0gZWxtLnByb3AoJ2hyZWYnKTsKCiAgICAgIGlmIChpc09iamVjdChhYnNIcmVmKSAmJiBhYnNIcmVmLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHsKICAgICAgICAvLyBTVkdBbmltYXRlZFN0cmluZy5hbmltVmFsIHNob3VsZCBiZSBpZGVudGljYWwgdG8gU1ZHQW5pbWF0ZWRTdHJpbmcuYmFzZVZhbCwgdW5sZXNzIGR1cmluZwogICAgICAgIC8vIGFuIGFuaW1hdGlvbi4KICAgICAgICBhYnNIcmVmID0gdXJsUmVzb2x2ZShhYnNIcmVmLmFuaW1WYWwpLmhyZWY7CiAgICAgIH0KCiAgICAgIHZhciByZXdyaXR0ZW5VcmwgPSAkbG9jYXRpb24uJCRyZXdyaXRlKGFic0hyZWYpOwoKICAgICAgaWYgKGFic0hyZWYgJiYgIWVsbS5hdHRyKCd0YXJnZXQnKSAmJiByZXdyaXR0ZW5VcmwgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICBpZiAocmV3cml0dGVuVXJsICE9ICRicm93c2VyLnVybCgpKSB7CiAgICAgICAgICAvLyB1cGRhdGUgbG9jYXRpb24gbWFudWFsbHkKICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKHJld3JpdHRlblVybCk7CiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSgpOwogICAgICAgICAgLy8gaGFjayB0byB3b3JrIGFyb3VuZCBGRjYgYnVnIDY4NDIwOCB3aGVuIHNjZW5hcmlvIHJ1bm5lciBjbGlja3Mgb24gbGlua3MKICAgICAgICAgIHdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXSA9IHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKCgogICAgLy8gcmV3cml0ZSBoYXNoYmFuZyB1cmwgPD4gaHRtbDUgdXJsCiAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9IGluaXRpYWxVcmwpIHsKICAgICAgJGJyb3dzZXIudXJsKCRsb2NhdGlvbi5hYnNVcmwoKSwgdHJ1ZSk7CiAgICB9CgogICAgLy8gdXBkYXRlICRsb2NhdGlvbiB3aGVuICRicm93c2VyIHVybCBjaGFuZ2VzCiAgICAkYnJvd3Nlci5vblVybENoYW5nZShmdW5jdGlvbihuZXdVcmwpIHsKICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPSBuZXdVcmwpIHsKICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7CiAgICAgICAgICB2YXIgb2xkVXJsID0gJGxvY2F0aW9uLmFic1VybCgpOwoKICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG5ld1VybCk7CiAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsIG5ld1VybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVXJsKS5kZWZhdWx0UHJldmVudGVkKSB7CiAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7CiAgICAgICAgICAgICRicm93c2VyLnVybChvbGRVcmwpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRkaWdlc3QoKTsKICAgICAgfQogICAgfSk7CgogICAgLy8gdXBkYXRlIGJyb3dzZXIKICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMDsKICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uICRsb2NhdGlvbldhdGNoKCkgewogICAgICB2YXIgb2xkVXJsID0gJGJyb3dzZXIudXJsKCk7CiAgICAgIHZhciBjdXJyZW50UmVwbGFjZSA9ICRsb2NhdGlvbi4kJHJlcGxhY2U7CgogICAgICBpZiAoIWNoYW5nZUNvdW50ZXIgfHwgb2xkVXJsICE9ICRsb2NhdGlvbi5hYnNVcmwoKSkgewogICAgICAgIGNoYW5nZUNvdW50ZXIrKzsKICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7CiAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsICRsb2NhdGlvbi5hYnNVcmwoKSwgb2xkVXJsKS4KICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkKSB7CiAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkYnJvd3Nlci51cmwoJGxvY2F0aW9uLmFic1VybCgpLCBjdXJyZW50UmVwbGFjZSk7CiAgICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgICAkbG9jYXRpb24uJCRyZXBsYWNlID0gZmFsc2U7CgogICAgICByZXR1cm4gY2hhbmdlQ291bnRlcjsKICAgIH0pOwoKICAgIHJldHVybiAkbG9jYXRpb247CgogICAgZnVuY3Rpb24gYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwpIHsKICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwpOwogICAgfQp9XTsKfQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJGxvZwogKiBAcmVxdWlyZXMgJHdpbmRvdwogKgogKiBAZGVzY3JpcHRpb24KICogU2ltcGxlIHNlcnZpY2UgZm9yIGxvZ2dpbmcuIERlZmF1bHQgaW1wbGVtZW50YXRpb24gc2FmZWx5IHdyaXRlcyB0aGUgbWVzc2FnZQogKiBpbnRvIHRoZSBicm93c2VyJ3MgY29uc29sZSAoaWYgcHJlc2VudCkuCiAqIAogKiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgc2VydmljZSBpcyB0byBzaW1wbGlmeSBkZWJ1Z2dpbmcgYW5kIHRyb3VibGVzaG9vdGluZy4KICoKICogVGhlIGRlZmF1bHQgaXMgdG8gbG9nIGBkZWJ1Z2AgbWVzc2FnZXMuIFlvdSBjYW4gdXNlCiAqIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgbmcuJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZH0gdG8gY2hhbmdlIHRoaXMuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgICBmdW5jdGlvbiBMb2dDdHJsKCRzY29wZSwgJGxvZykgewogICAgICAgICAkc2NvcGUuJGxvZyA9ICRsb2c7CiAgICAgICAgICRzY29wZS5tZXNzYWdlID0gJ0hlbGxvIFdvcmxkISc7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJMb2dDdHJsIj4KICAgICAgICAgPHA+UmVsb2FkIHRoaXMgcGFnZSB3aXRoIG9wZW4gY29uc29sZSwgZW50ZXIgdGV4dCBhbmQgaGl0IHRoZSBsb2cgYnV0dG9uLi4uPC9wPgogICAgICAgICBNZXNzYWdlOgogICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im1lc3NhZ2UiLz4KICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iJGxvZy5sb2cobWVzc2FnZSkiPmxvZzwvYnV0dG9uPgogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSIkbG9nLndhcm4obWVzc2FnZSkiPndhcm48L2J1dHRvbj4KICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iJGxvZy5pbmZvKG1lc3NhZ2UpIj5pbmZvPC9idXR0b24+CiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9IiRsb2cuZXJyb3IobWVzc2FnZSkiPmVycm9yPC9idXR0b24+CiAgICAgICA8L2Rpdj4KICAgICA8L2ZpbGU+CiAgIDwvZXhhbXBsZT4KICovCgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy4kbG9nUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqIFVzZSB0aGUgYCRsb2dQcm92aWRlcmAgdG8gY29uZmlndXJlIGhvdyB0aGUgYXBwbGljYXRpb24gbG9ncyBtZXNzYWdlcwogKi8KZnVuY3Rpb24gJExvZ1Byb3ZpZGVyKCl7CiAgdmFyIGRlYnVnID0gdHJ1ZSwKICAgICAgc2VsZiA9IHRoaXM7CiAgCiAgLyoqCiAgICogQG5nZG9jIHByb3BlcnR5CiAgICogQG5hbWUgbmcuJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZAogICAqIEBtZXRob2RPZiBuZy4kbG9nUHJvdmlkZXIKICAgKiBAZGVzY3JpcHRpb24KICAgKiBAcGFyYW0ge3N0cmluZz19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXMKICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlcgogICAqLwogIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykgewogICAgaWYgKGlzRGVmaW5lZChmbGFnKSkgewogICAgICBkZWJ1ZyA9IGZsYWc7CiAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBkZWJ1ZzsKICAgIH0KICB9OwogIAogIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpewogICAgcmV0dXJuIHsKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgbmcuJGxvZyNsb2cKICAgICAgICogQG1ldGhvZE9mIG5nLiRsb2cKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2UKICAgICAgICovCiAgICAgIGxvZzogY29uc29sZUxvZygnbG9nJyksCgogICAgICAvKioKICAgICAgICogQG5nZG9jIG1ldGhvZAogICAgICAgKiBAbmFtZSBuZy4kbG9nI2luZm8KICAgICAgICogQG1ldGhvZE9mIG5nLiRsb2cKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2UKICAgICAgICovCiAgICAgIGluZm86IGNvbnNvbGVMb2coJ2luZm8nKSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lIG5nLiRsb2cjd2FybgogICAgICAgKiBAbWV0aG9kT2YgbmcuJGxvZwogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2UKICAgICAgICovCiAgICAgIHdhcm46IGNvbnNvbGVMb2coJ3dhcm4nKSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgICAqIEBuYW1lIG5nLiRsb2cjZXJyb3IKICAgICAgICogQG1ldGhvZE9mIG5nLiRsb2cKICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2UKICAgICAgICovCiAgICAgIGVycm9yOiBjb25zb2xlTG9nKCdlcnJvcicpLAogICAgICAKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAgICogQG5hbWUgbmcuJGxvZyNkZWJ1ZwogICAgICAgKiBAbWV0aG9kT2YgbmcuJGxvZwogICAgICAgKiAKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFdyaXRlIGEgZGVidWcgbWVzc2FnZQogICAgICAgKi8KICAgICAgZGVidWc6IChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGZuID0gY29uc29sZUxvZygnZGVidWcnKTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKGRlYnVnKSB7CiAgICAgICAgICAgIGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfSgpKQogICAgfTsKCiAgICBmdW5jdGlvbiBmb3JtYXRFcnJvcihhcmcpIHsKICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7CiAgICAgICAgaWYgKGFyZy5zdGFjaykgewogICAgICAgICAgYXJnID0gKGFyZy5tZXNzYWdlICYmIGFyZy5zdGFjay5pbmRleE9mKGFyZy5tZXNzYWdlKSA9PT0gLTEpCiAgICAgICAgICAgICAgPyAnRXJyb3I6ICcgKyBhcmcubWVzc2FnZSArICdcbicgKyBhcmcuc3RhY2sKICAgICAgICAgICAgICA6IGFyZy5zdGFjazsKICAgICAgICB9IGVsc2UgaWYgKGFyZy5zb3VyY2VVUkwpIHsKICAgICAgICAgIGFyZyA9IGFyZy5tZXNzYWdlICsgJ1xuJyArIGFyZy5zb3VyY2VVUkwgKyAnOicgKyBhcmcubGluZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGFyZzsKICAgIH0KCiAgICBmdW5jdGlvbiBjb25zb2xlTG9nKHR5cGUpIHsKICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sCiAgICAgICAgICBsb2dGbiA9IGNvbnNvbGVbdHlwZV0gfHwgY29uc29sZS5sb2cgfHwgbm9vcCwKICAgICAgICAgIGhhc0FwcGx5ID0gZmFsc2U7CgogICAgICAvLyBOb3RlOiByZWFkaW5nIGxvZ0ZuLmFwcGx5IHRocm93cyBhbiBlcnJvciBpbiBJRTExIGluIElFOCBkb2N1bWVudCBtb2RlLgogICAgICAvLyBUaGUgcmVhc29uIGJlaGluZCB0aGlzIGlzIHRoYXQgY29uc29sZS5sb2cgaGFzIHR5cGUgIm9iamVjdCIgaW4gSUU4Li4uCiAgICAgIHRyeSB7CiAgICAgICAgaGFzQXBwbHkgPSAhISBsb2dGbi5hcHBseTsKICAgICAgfSBjYXRjaCAoZSkge30KCiAgICAgIGlmIChoYXNBcHBseSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBhcmdzID0gW107CiAgICAgICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24oYXJnKSB7CiAgICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIGxvZ0ZuLmFwcGx5KGNvbnNvbGUsIGFyZ3MpOwogICAgICAgIH07CiAgICAgIH0KCiAgICAgIC8vIHdlIGFyZSBJRSB3aGljaCBlaXRoZXIgZG9lc24ndCBoYXZlIHdpbmRvdy5jb25zb2xlID0+IHRoaXMgaXMgbm9vcCBhbmQgd2UgZG8gbm90aGluZywKICAgICAgLy8gb3Igd2UgYXJlIElFIHdoZXJlIGNvbnNvbGUubG9nIGRvZXNuJ3QgaGF2ZSBhcHBseSBzbyB3ZSBsb2cgYXQgbGVhc3QgZmlyc3QgMiBhcmdzCiAgICAgIHJldHVybiBmdW5jdGlvbihhcmcxLCBhcmcyKSB7CiAgICAgICAgbG9nRm4oYXJnMSwgYXJnMiA9PSBudWxsID8gJycgOiBhcmcyKTsKICAgICAgfTsKICAgIH0KICB9XTsKfQoKdmFyICRwYXJzZU1pbkVyciA9IG1pbkVycignJHBhcnNlJyk7CnZhciBwcm9taXNlV2FybmluZ0NhY2hlID0ge307CnZhciBwcm9taXNlV2FybmluZzsKCi8vIFNhbmRib3hpbmcgQW5ndWxhciBFeHByZXNzaW9ucwovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gQW5ndWxhciBleHByZXNzaW9ucyBhcmUgZ2VuZXJhbGx5IGNvbnNpZGVyZWQgc2FmZSBiZWNhdXNlIHRoZXNlIGV4cHJlc3Npb25zIG9ubHkgaGF2ZSBkaXJlY3QKLy8gYWNjZXNzIHRvICRzY29wZSBhbmQgbG9jYWxzLiBIb3dldmVyLCBvbmUgY2FuIG9idGFpbiB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBKUyBjb2RlIGJ5Ci8vIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byBuYXRpdmUgSlMgZnVuY3Rpb25zIHN1Y2ggYXMgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yLgovLwovLyBBcyBhbiBleGFtcGxlLCBjb25zaWRlciB0aGUgZm9sbG93aW5nIEFuZ3VsYXIgZXhwcmVzc2lvbjoKLy8KLy8gICB7fS50b1N0cmluZy5jb25zdHJ1Y3RvcihhbGVydCgiZXZpbCBKUyBjb2RlIikpCi8vCi8vIFdlIHdhbnQgdG8gcHJldmVudCB0aGlzIHR5cGUgb2YgYWNjZXNzLiBGb3IgdGhlIHNha2Ugb2YgcGVyZm9ybWFuY2UsIGR1cmluZyB0aGUgbGV4aW5nIHBoYXNlIHdlCi8vIGRpc2FsbG93IGFueSAiZG90dGVkIiBhY2Nlc3MgdG8gYW55IG1lbWJlciBuYW1lZCAiY29uc3RydWN0b3IiLgovLwovLyBGb3IgcmVmbGVjdGl2ZSBjYWxscyAoYVtiXSkgd2UgY2hlY2sgdGhhdCB0aGUgdmFsdWUgb2YgdGhlIGxvb2t1cCBpcyBub3QgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yCi8vIHdoaWxlIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24sIHdoaWNoIGlzIGEgc3Ryb25nZXIgYnV0IG1vcmUgZXhwZW5zaXZlIHRlc3QuIFNpbmNlIHJlZmxlY3RpdmUKLy8gY2FsbHMgYXJlIGV4cGVuc2l2ZSBhbnl3YXksIHRoaXMgaXMgbm90IHN1Y2ggYSBiaWcgZGVhbCBjb21wYXJlZCB0byBzdGF0aWMgZGVyZWZlcmVuY2luZy4KLy8KLy8gVGhpcyBzYW5kYm94aW5nIHRlY2huaXF1ZSBpcyBub3QgcGVyZmVjdCBhbmQgZG9lc24ndCBhaW0gdG8gYmUuIFRoZSBnb2FsIGlzIHRvIHByZXZlbnQgZXhwbG9pdHMKLy8gYWdhaW5zdCB0aGUgZXhwcmVzc2lvbiBsYW5ndWFnZSwgYnV0IG5vdCB0byBwcmV2ZW50IGV4cGxvaXRzIHRoYXQgd2VyZSBlbmFibGVkIGJ5IGV4cG9zaW5nCi8vIHNlbnNpdGl2ZSBKYXZhU2NyaXB0IG9yIGJyb3dzZXIgYXBpcyBvbiBTY29wZS4gRXhwb3Npbmcgc3VjaCBvYmplY3RzIG9uIGEgU2NvcGUgaXMgbmV2ZXIgYSBnb29kCi8vIHByYWN0aWNlIGFuZCB0aGVyZWZvcmUgd2UgYXJlIG5vdCBldmVuIHRyeWluZyB0byBwcm90ZWN0IGFnYWluc3QgaW50ZXJhY3Rpb24gd2l0aCBhbiBvYmplY3QKLy8gZXhwbGljaXRseSBleHBvc2VkIGluIHRoaXMgd2F5LgovLwovLyBBIGRldmVsb3BlciBjb3VsZCBmb2lsIHRoZSBuYW1lIGNoZWNrIGJ5IGFsaWFzaW5nIHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3RvciB1bmRlciBhIGRpZmZlcmVudAovLyBuYW1lIG9uIHRoZSBzY29wZS4KLy8KLy8gSW4gZ2VuZXJhbCwgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGFjY2VzcyBhIFdpbmRvdyBvYmplY3QgZnJvbSBhbiBhbmd1bGFyIGV4cHJlc3Npb24gdW5sZXNzIGEKLy8gd2luZG93IG9yIHNvbWUgRE9NIG9iamVjdCB0aGF0IGhhcyBhIHJlZmVyZW5jZSB0byB3aW5kb3cgaXMgcHVibGlzaGVkIG9udG8gYSBTY29wZS4KCmZ1bmN0aW9uIGVuc3VyZVNhZmVNZW1iZXJOYW1lKG5hbWUsIGZ1bGxFeHByZXNzaW9uKSB7CiAgaWYgKG5hbWUgPT09ICJjb25zdHJ1Y3RvciIpIHsKICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZsZCcsCiAgICAgICAgJ1JlZmVyZW5jaW5nICJjb25zdHJ1Y3RvciIgZmllbGQgaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLAogICAgICAgIGZ1bGxFeHByZXNzaW9uKTsKICB9CiAgcmV0dXJuIG5hbWU7Cn0KCmZ1bmN0aW9uIGVuc3VyZVNhZmVPYmplY3Qob2JqLCBmdWxsRXhwcmVzc2lvbikgewogIC8vIG5pZnR5IGNoZWNrIGlmIG9iaiBpcyBGdW5jdGlvbiB0aGF0IGlzIGZhc3QgYW5kIHdvcmtzIGFjcm9zcyBpZnJhbWVzIGFuZCBvdGhlciBjb250ZXh0cwogIGlmIChvYmopIHsKICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IG9iaikgewogICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbicsCiAgICAgICAgICAnUmVmZXJlbmNpbmcgRnVuY3Rpb24gaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLAogICAgICAgICAgZnVsbEV4cHJlc3Npb24pOwogICAgfSBlbHNlIGlmICgvLyBpc1dpbmRvdyhvYmopCiAgICAgICAgb2JqLmRvY3VtZW50ICYmIG9iai5sb2NhdGlvbiAmJiBvYmouYWxlcnQgJiYgb2JqLnNldEludGVydmFsKSB7CiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY3dpbmRvdycsCiAgICAgICAgICAnUmVmZXJlbmNpbmcgdGhlIFdpbmRvdyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsCiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7CiAgICB9IGVsc2UgaWYgKC8vIGlzRWxlbWVudChvYmopCiAgICAgICAgb2JqLmNoaWxkcmVuICYmIChvYmoubm9kZU5hbWUgfHwgKG9iai5vbiAmJiBvYmouZmluZCkpKSB7CiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2RvbScsCiAgICAgICAgICAnUmVmZXJlbmNpbmcgRE9NIG5vZGVzIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JywKICAgICAgICAgIGZ1bGxFeHByZXNzaW9uKTsKICAgIH0KICB9CiAgcmV0dXJuIG9iajsKfQoKdmFyIE9QRVJBVE9SUyA9IHsKICAgIC8qIGpzaGludCBiaXR3aXNlIDogZmFsc2UgKi8KICAgICdudWxsJzpmdW5jdGlvbigpe3JldHVybiBudWxsO30sCiAgICAndHJ1ZSc6ZnVuY3Rpb24oKXtyZXR1cm4gdHJ1ZTt9LAogICAgJ2ZhbHNlJzpmdW5jdGlvbigpe3JldHVybiBmYWxzZTt9LAogICAgdW5kZWZpbmVkOm5vb3AsCiAgICAnKyc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpewogICAgICBhPWEoc2VsZiwgbG9jYWxzKTsgYj1iKHNlbGYsIGxvY2Fscyk7CiAgICAgIGlmIChpc0RlZmluZWQoYSkpIHsKICAgICAgICBpZiAoaXNEZWZpbmVkKGIpKSB7CiAgICAgICAgICByZXR1cm4gYSArIGI7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhOwogICAgICB9CiAgICAgIHJldHVybiBpc0RlZmluZWQoYik/Yjp1bmRlZmluZWQ7fSwKICAgICctJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7CiAgICAgICAgICBhPWEoc2VsZiwgbG9jYWxzKTsgYj1iKHNlbGYsIGxvY2Fscyk7CiAgICAgICAgICByZXR1cm4gKGlzRGVmaW5lZChhKT9hOjApLShpc0RlZmluZWQoYik/YjowKTsKICAgICAgICB9LAogICAgJyonOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpKmIoc2VsZiwgbG9jYWxzKTt9LAogICAgJy8nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpL2Ioc2VsZiwgbG9jYWxzKTt9LAogICAgJyUnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpJWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJ14nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpXmIoc2VsZiwgbG9jYWxzKTt9LAogICAgJz0nOm5vb3AsCiAgICAnPT09JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk9PT1iKHNlbGYsIGxvY2Fscyk7fSwKICAgICchPT0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSE9PWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJz09JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKT09YihzZWxmLCBsb2NhbHMpO30sCiAgICAnIT0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpIT1iKHNlbGYsIGxvY2Fscyk7fSwKICAgICc8JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKTxiKHNlbGYsIGxvY2Fscyk7fSwKICAgICc+JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKT5iKHNlbGYsIGxvY2Fscyk7fSwKICAgICc8PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk8PWIoc2VsZiwgbG9jYWxzKTt9LAogICAgJz49JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKT49YihzZWxmLCBsb2NhbHMpO30sCiAgICAnJiYnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpJiZiKHNlbGYsIGxvY2Fscyk7fSwKICAgICd8fCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyl8fGIoc2VsZiwgbG9jYWxzKTt9LAogICAgJyYnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpJmIoc2VsZiwgbG9jYWxzKTt9LAovLyAgICAnfCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhfGI7fSwKICAgICd8JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGIoc2VsZiwgbG9jYWxzKShzZWxmLCBsb2NhbHMsIGEoc2VsZiwgbG9jYWxzKSk7fSwKICAgICchJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEpe3JldHVybiAhYShzZWxmLCBsb2NhbHMpO30KfTsKLyoganNoaW50IGJpdHdpc2U6IHRydWUgKi8KdmFyIEVTQ0FQRSA9IHsibiI6IlxuIiwgImYiOiJcZiIsICJyIjoiXHIiLCAidCI6Ilx0IiwgInYiOiJcdiIsICInIjoiJyIsICciJzonIid9OwoKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgoKLyoqCiAqIEBjb25zdHJ1Y3RvcgogKi8KdmFyIExleGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOwp9OwoKTGV4ZXIucHJvdG90eXBlID0gewogIGNvbnN0cnVjdG9yOiBMZXhlciwKCiAgbGV4OiBmdW5jdGlvbiAodGV4dCkgewogICAgdGhpcy50ZXh0ID0gdGV4dDsKCiAgICB0aGlzLmluZGV4ID0gMDsKICAgIHRoaXMuY2ggPSB1bmRlZmluZWQ7CiAgICB0aGlzLmxhc3RDaCA9ICc6JzsgLy8gY2FuIHN0YXJ0IHJlZ2V4cAoKICAgIHRoaXMudG9rZW5zID0gW107CgogICAgdmFyIHRva2VuOwogICAgdmFyIGpzb24gPSBbXTsKCiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHsKICAgICAgdGhpcy5jaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7CiAgICAgIGlmICh0aGlzLmlzKCciXCcnKSkgewogICAgICAgIHRoaXMucmVhZFN0cmluZyh0aGlzLmNoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTnVtYmVyKHRoaXMuY2gpIHx8IHRoaXMuaXMoJy4nKSAmJiB0aGlzLmlzTnVtYmVyKHRoaXMucGVlaygpKSkgewogICAgICAgIHRoaXMucmVhZE51bWJlcigpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJZGVudCh0aGlzLmNoKSkgewogICAgICAgIHRoaXMucmVhZElkZW50KCk7CiAgICAgICAgLy8gaWRlbnRpZmllcnMgY2FuIG9ubHkgYmUgaWYgdGhlIHByZWNlZGluZyBjaGFyIHdhcyBhIHsgb3IgLAogICAgICAgIGlmICh0aGlzLndhcygneywnKSAmJiBqc29uWzBdID09PSAneycgJiYKICAgICAgICAgICAgKHRva2VuID0gdGhpcy50b2tlbnNbdGhpcy50b2tlbnMubGVuZ3RoIC0gMV0pKSB7CiAgICAgICAgICB0b2tlbi5qc29uID0gdG9rZW4udGV4dC5pbmRleE9mKCcuJykgPT09IC0xOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0aGlzLmlzKCcoKXt9W10uLDs6PycpKSB7CiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCwKICAgICAgICAgIHRleHQ6IHRoaXMuY2gsCiAgICAgICAgICBqc29uOiAodGhpcy53YXMoJzpbLCcpICYmIHRoaXMuaXMoJ3tbJykpIHx8IHRoaXMuaXMoJ31dOiwnKQogICAgICAgIH0pOwogICAgICAgIGlmICh0aGlzLmlzKCd7WycpKSBqc29uLnVuc2hpZnQodGhpcy5jaCk7CiAgICAgICAgaWYgKHRoaXMuaXMoJ31dJykpIGpzb24uc2hpZnQoKTsKICAgICAgICB0aGlzLmluZGV4Kys7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1doaXRlc3BhY2UodGhpcy5jaCkpIHsKICAgICAgICB0aGlzLmluZGV4Kys7CiAgICAgICAgY29udGludWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGNoMiA9IHRoaXMuY2ggKyB0aGlzLnBlZWsoKTsKICAgICAgICB2YXIgY2gzID0gY2gyICsgdGhpcy5wZWVrKDIpOwogICAgICAgIHZhciBmbiA9IE9QRVJBVE9SU1t0aGlzLmNoXTsKICAgICAgICB2YXIgZm4yID0gT1BFUkFUT1JTW2NoMl07CiAgICAgICAgdmFyIGZuMyA9IE9QRVJBVE9SU1tjaDNdOwogICAgICAgIGlmIChmbjMpIHsKICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiBjaDMsIGZuOiBmbjN9KTsKICAgICAgICAgIHRoaXMuaW5kZXggKz0gMzsKICAgICAgICB9IGVsc2UgaWYgKGZuMikgewogICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IGNoMiwgZm46IGZuMn0pOwogICAgICAgICAgdGhpcy5pbmRleCArPSAyOwogICAgICAgIH0gZWxzZSBpZiAoZm4pIHsKICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgICAgICBpbmRleDogdGhpcy5pbmRleCwKICAgICAgICAgICAgdGV4dDogdGhpcy5jaCwKICAgICAgICAgICAgZm46IGZuLAogICAgICAgICAgICBqc29uOiAodGhpcy53YXMoJ1ssOicpICYmIHRoaXMuaXMoJystJykpCiAgICAgICAgICB9KTsKICAgICAgICAgIHRoaXMuaW5kZXggKz0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdVbmV4cGVjdGVkIG5leHQgY2hhcmFjdGVyICcsIHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyAxKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5sYXN0Q2ggPSB0aGlzLmNoOwogICAgfQogICAgcmV0dXJuIHRoaXMudG9rZW5zOwogIH0sCgogIGlzOiBmdW5jdGlvbihjaGFycykgewogICAgcmV0dXJuIGNoYXJzLmluZGV4T2YodGhpcy5jaCkgIT09IC0xOwogIH0sCgogIHdhczogZnVuY3Rpb24oY2hhcnMpIHsKICAgIHJldHVybiBjaGFycy5pbmRleE9mKHRoaXMubGFzdENoKSAhPT0gLTE7CiAgfSwKCiAgcGVlazogZnVuY3Rpb24oaSkgewogICAgdmFyIG51bSA9IGkgfHwgMTsKICAgIHJldHVybiAodGhpcy5pbmRleCArIG51bSA8IHRoaXMudGV4dC5sZW5ndGgpID8gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4ICsgbnVtKSA6IGZhbHNlOwogIH0sCgogIGlzTnVtYmVyOiBmdW5jdGlvbihjaCkgewogICAgcmV0dXJuICgnMCcgPD0gY2ggJiYgY2ggPD0gJzknKTsKICB9LAoKICBpc1doaXRlc3BhY2U6IGZ1bmN0aW9uKGNoKSB7CiAgICAvLyBJRSB0cmVhdHMgbm9uLWJyZWFraW5nIHNwYWNlIGFzIFx1MDBBMAogICAgcmV0dXJuIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXHInIHx8IGNoID09PSAnXHQnIHx8CiAgICAgICAgICAgIGNoID09PSAnXG4nIHx8IGNoID09PSAnXHYnIHx8IGNoID09PSAnXHUwMEEwJyk7CiAgfSwKCiAgaXNJZGVudDogZnVuY3Rpb24oY2gpIHsKICAgIHJldHVybiAoJ2EnIDw9IGNoICYmIGNoIDw9ICd6JyB8fAogICAgICAgICAgICAnQScgPD0gY2ggJiYgY2ggPD0gJ1onIHx8CiAgICAgICAgICAgICdfJyA9PT0gY2ggfHwgY2ggPT09ICckJyk7CiAgfSwKCiAgaXNFeHBPcGVyYXRvcjogZnVuY3Rpb24oY2gpIHsKICAgIHJldHVybiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnIHx8IHRoaXMuaXNOdW1iZXIoY2gpKTsKICB9LAoKICB0aHJvd0Vycm9yOiBmdW5jdGlvbihlcnJvciwgc3RhcnQsIGVuZCkgewogICAgZW5kID0gZW5kIHx8IHRoaXMuaW5kZXg7CiAgICB2YXIgY29sU3RyID0gKGlzRGVmaW5lZChzdGFydCkKICAgICAgICAgICAgPyAncyAnICsgc3RhcnQgKyAgJy0nICsgdGhpcy5pbmRleCArICcgWycgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpICsgJ10nCiAgICAgICAgICAgIDogJyAnICsgZW5kKTsKICAgIHRocm93ICRwYXJzZU1pbkVycignbGV4ZXJyJywgJ0xleGVyIEVycm9yOiB7MH0gYXQgY29sdW1uezF9IGluIGV4cHJlc3Npb24gW3syfV0uJywKICAgICAgICBlcnJvciwgY29sU3RyLCB0aGlzLnRleHQpOwogIH0sCgogIHJlYWROdW1iZXI6IGZ1bmN0aW9uKCkgewogICAgdmFyIG51bWJlciA9ICcnOwogICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDsKICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkgewogICAgICB2YXIgY2ggPSBsb3dlcmNhc2UodGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KSk7CiAgICAgIGlmIChjaCA9PSAnLicgfHwgdGhpcy5pc051bWJlcihjaCkpIHsKICAgICAgICBudW1iZXIgKz0gY2g7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHBlZWtDaCA9IHRoaXMucGVlaygpOwogICAgICAgIGlmIChjaCA9PSAnZScgJiYgdGhpcy5pc0V4cE9wZXJhdG9yKHBlZWtDaCkpIHsKICAgICAgICAgIG51bWJlciArPSBjaDsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiYKICAgICAgICAgICAgcGVla0NoICYmIHRoaXMuaXNOdW1iZXIocGVla0NoKSAmJgogICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHsKICAgICAgICAgIG51bWJlciArPSBjaDsKICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiYKICAgICAgICAgICAgKCFwZWVrQ2ggfHwgIXRoaXMuaXNOdW1iZXIocGVla0NoKSkgJiYKICAgICAgICAgICAgbnVtYmVyLmNoYXJBdChudW1iZXIubGVuZ3RoIC0gMSkgPT0gJ2UnKSB7CiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0ludmFsaWQgZXhwb25lbnQnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuaW5kZXgrKzsKICAgIH0KICAgIG51bWJlciA9IDEgKiBudW1iZXI7CiAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgaW5kZXg6IHN0YXJ0LAogICAgICB0ZXh0OiBudW1iZXIsCiAgICAgIGpzb246IHRydWUsCiAgICAgIGZuOiBmdW5jdGlvbigpIHsgcmV0dXJuIG51bWJlcjsgfQogICAgfSk7CiAgfSwKCiAgcmVhZElkZW50OiBmdW5jdGlvbigpIHsKICAgIHZhciBwYXJzZXIgPSB0aGlzOwoKICAgIHZhciBpZGVudCA9ICcnOwogICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDsKCiAgICB2YXIgbGFzdERvdCwgcGVla0luZGV4LCBtZXRob2ROYW1lLCBjaDsKCiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHsKICAgICAgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpOwogICAgICBpZiAoY2ggPT09ICcuJyB8fCB0aGlzLmlzSWRlbnQoY2gpIHx8IHRoaXMuaXNOdW1iZXIoY2gpKSB7CiAgICAgICAgaWYgKGNoID09PSAnLicpIGxhc3REb3QgPSB0aGlzLmluZGV4OwogICAgICAgIGlkZW50ICs9IGNoOwogICAgICB9IGVsc2UgewogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIHRoaXMuaW5kZXgrKzsKICAgIH0KCiAgICAvL2NoZWNrIGlmIHRoaXMgaXMgbm90IGEgbWV0aG9kIGludm9jYXRpb24gYW5kIGlmIGl0IGlzIGJhY2sgb3V0IHRvIGxhc3QgZG90CiAgICBpZiAobGFzdERvdCkgewogICAgICBwZWVrSW5kZXggPSB0aGlzLmluZGV4OwogICAgICB3aGlsZSAocGVla0luZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkgewogICAgICAgIGNoID0gdGhpcy50ZXh0LmNoYXJBdChwZWVrSW5kZXgpOwogICAgICAgIGlmIChjaCA9PT0gJygnKSB7CiAgICAgICAgICBtZXRob2ROYW1lID0gaWRlbnQuc3Vic3RyKGxhc3REb3QgLSBzdGFydCArIDEpOwogICAgICAgICAgaWRlbnQgPSBpZGVudC5zdWJzdHIoMCwgbGFzdERvdCAtIHN0YXJ0KTsKICAgICAgICAgIHRoaXMuaW5kZXggPSBwZWVrSW5kZXg7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMuaXNXaGl0ZXNwYWNlKGNoKSkgewogICAgICAgICAgcGVla0luZGV4Kys7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfQoKCiAgICB2YXIgdG9rZW4gPSB7CiAgICAgIGluZGV4OiBzdGFydCwKICAgICAgdGV4dDogaWRlbnQKICAgIH07CgogICAgLy8gT1BFUkFUT1JTIGlzIG91ciBvd24gb2JqZWN0IHNvIHdlIGRvbid0IG5lZWQgdG8gdXNlIHNwZWNpYWwgaGFzT3duUHJvcGVydHlGbgogICAgaWYgKE9QRVJBVE9SUy5oYXNPd25Qcm9wZXJ0eShpZGVudCkpIHsKICAgICAgdG9rZW4uZm4gPSBPUEVSQVRPUlNbaWRlbnRdOwogICAgICB0b2tlbi5qc29uID0gT1BFUkFUT1JTW2lkZW50XTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBnZXR0ZXIgPSBnZXR0ZXJGbihpZGVudCwgdGhpcy5vcHRpb25zLCB0aGlzLnRleHQpOwogICAgICB0b2tlbi5mbiA9IGV4dGVuZChmdW5jdGlvbihzZWxmLCBsb2NhbHMpIHsKICAgICAgICByZXR1cm4gKGdldHRlcihzZWxmLCBsb2NhbHMpKTsKICAgICAgfSwgewogICAgICAgIGFzc2lnbjogZnVuY3Rpb24oc2VsZiwgdmFsdWUpIHsKICAgICAgICAgIHJldHVybiBzZXR0ZXIoc2VsZiwgaWRlbnQsIHZhbHVlLCBwYXJzZXIudGV4dCwgcGFyc2VyLm9wdGlvbnMpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgdGhpcy50b2tlbnMucHVzaCh0b2tlbik7CgogICAgaWYgKG1ldGhvZE5hbWUpIHsKICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgaW5kZXg6bGFzdERvdCwKICAgICAgICB0ZXh0OiAnLicsCiAgICAgICAganNvbjogZmFsc2UKICAgICAgfSk7CiAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgIGluZGV4OiBsYXN0RG90ICsgMSwKICAgICAgICB0ZXh0OiBtZXRob2ROYW1lLAogICAgICAgIGpzb246IGZhbHNlCiAgICAgIH0pOwogICAgfQogIH0sCgogIHJlYWRTdHJpbmc6IGZ1bmN0aW9uKHF1b3RlKSB7CiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4OwogICAgdGhpcy5pbmRleCsrOwogICAgdmFyIHN0cmluZyA9ICcnOwogICAgdmFyIHJhd1N0cmluZyA9IHF1b3RlOwogICAgdmFyIGVzY2FwZSA9IGZhbHNlOwogICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7CiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7CiAgICAgIHJhd1N0cmluZyArPSBjaDsKICAgICAgaWYgKGVzY2FwZSkgewogICAgICAgIGlmIChjaCA9PT0gJ3UnKSB7CiAgICAgICAgICB2YXIgaGV4ID0gdGhpcy50ZXh0LnN1YnN0cmluZyh0aGlzLmluZGV4ICsgMSwgdGhpcy5pbmRleCArIDUpOwogICAgICAgICAgaWYgKCFoZXgubWF0Y2goL1tcZGEtZl17NH0vaSkpCiAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFx1JyArIGhleCArICddJyk7CiAgICAgICAgICB0aGlzLmluZGV4ICs9IDQ7CiAgICAgICAgICBzdHJpbmcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChoZXgsIDE2KSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciByZXAgPSBFU0NBUEVbY2hdOwogICAgICAgICAgaWYgKHJlcCkgewogICAgICAgICAgICBzdHJpbmcgKz0gcmVwOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RyaW5nICs9IGNoOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlc2NhcGUgPSBmYWxzZTsKICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcJykgewogICAgICAgIGVzY2FwZSA9IHRydWU7CiAgICAgIH0gZWxzZSBpZiAoY2ggPT09IHF1b3RlKSB7CiAgICAgICAgdGhpcy5pbmRleCsrOwogICAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgICAgaW5kZXg6IHN0YXJ0LAogICAgICAgICAgdGV4dDogcmF3U3RyaW5nLAogICAgICAgICAgc3RyaW5nOiBzdHJpbmcsCiAgICAgICAgICBqc29uOiB0cnVlLAogICAgICAgICAgZm46IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3RyaW5nOyB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgewogICAgICAgIHN0cmluZyArPSBjaDsKICAgICAgfQogICAgICB0aGlzLmluZGV4Kys7CiAgICB9CiAgICB0aGlzLnRocm93RXJyb3IoJ1VudGVybWluYXRlZCBxdW90ZScsIHN0YXJ0KTsKICB9Cn07CgoKLyoqCiAqIEBjb25zdHJ1Y3RvcgogKi8KdmFyIFBhcnNlciA9IGZ1bmN0aW9uIChsZXhlciwgJGZpbHRlciwgb3B0aW9ucykgewogIHRoaXMubGV4ZXIgPSBsZXhlcjsKICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyOwogIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7Cn07CgpQYXJzZXIuWkVSTyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH07CgpQYXJzZXIucHJvdG90eXBlID0gewogIGNvbnN0cnVjdG9yOiBQYXJzZXIsCgogIHBhcnNlOiBmdW5jdGlvbiAodGV4dCwganNvbikgewogICAgdGhpcy50ZXh0ID0gdGV4dDsKCiAgICAvL1RPRE8oaSk6IHN0cmlwIGFsbCB0aGUgb2Jzb2x0ZSBqc29uIHN0dWZmIGZyb20gdGhpcyBmaWxlCiAgICB0aGlzLmpzb24gPSBqc29uOwoKICAgIHRoaXMudG9rZW5zID0gdGhpcy5sZXhlci5sZXgodGV4dCk7CgogICAgaWYgKGpzb24pIHsKICAgICAgLy8gVGhlIGV4dHJhIGxldmVsIG9mIGFsaWFzaW5nIGlzIGhlcmUsIGp1c3QgaW4gY2FzZSB0aGUgbGV4ZXIgbWlzc2VzIHNvbWV0aGluZywgc28gdGhhdAogICAgICAvLyB3ZSBwcmV2ZW50IGFueSBhY2NpZGVudGFsIGV4ZWN1dGlvbiBpbiBKU09OLgogICAgICB0aGlzLmFzc2lnbm1lbnQgPSB0aGlzLmxvZ2ljYWxPUjsKCiAgICAgIHRoaXMuZnVuY3Rpb25DYWxsID0KICAgICAgdGhpcy5maWVsZEFjY2VzcyA9CiAgICAgIHRoaXMub2JqZWN0SW5kZXggPQogICAgICB0aGlzLmZpbHRlckNoYWluID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBub3QgdmFsaWQganNvbicsIHt0ZXh0OiB0ZXh0LCBpbmRleDogMH0pOwogICAgICB9OwogICAgfQoKICAgIHZhciB2YWx1ZSA9IGpzb24gPyB0aGlzLnByaW1hcnkoKSA6IHRoaXMuc3RhdGVtZW50cygpOwoKICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggIT09IDApIHsKICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBhbiB1bmV4cGVjdGVkIHRva2VuJywgdGhpcy50b2tlbnNbMF0pOwogICAgfQoKICAgIHZhbHVlLmxpdGVyYWwgPSAhIXZhbHVlLmxpdGVyYWw7CiAgICB2YWx1ZS5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7CgogICAgcmV0dXJuIHZhbHVlOwogIH0sCgogIHByaW1hcnk6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBwcmltYXJ5OwogICAgaWYgKHRoaXMuZXhwZWN0KCcoJykpIHsKICAgICAgcHJpbWFyeSA9IHRoaXMuZmlsdGVyQ2hhaW4oKTsKICAgICAgdGhpcy5jb25zdW1lKCcpJyk7CiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCdbJykpIHsKICAgICAgcHJpbWFyeSA9IHRoaXMuYXJyYXlEZWNsYXJhdGlvbigpOwogICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgneycpKSB7CiAgICAgIHByaW1hcnkgPSB0aGlzLm9iamVjdCgpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoKTsKICAgICAgcHJpbWFyeSA9IHRva2VuLmZuOwogICAgICBpZiAoIXByaW1hcnkpIHsKICAgICAgICB0aGlzLnRocm93RXJyb3IoJ25vdCBhIHByaW1hcnkgZXhwcmVzc2lvbicsIHRva2VuKTsKICAgICAgfQogICAgICBpZiAodG9rZW4uanNvbikgewogICAgICAgIHByaW1hcnkuY29uc3RhbnQgPSB0cnVlOwogICAgICAgIHByaW1hcnkubGl0ZXJhbCA9IHRydWU7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgbmV4dCwgY29udGV4dDsKICAgIHdoaWxlICgobmV4dCA9IHRoaXMuZXhwZWN0KCcoJywgJ1snLCAnLicpKSkgewogICAgICBpZiAobmV4dC50ZXh0ID09PSAnKCcpIHsKICAgICAgICBwcmltYXJ5ID0gdGhpcy5mdW5jdGlvbkNhbGwocHJpbWFyeSwgY29udGV4dCk7CiAgICAgICAgY29udGV4dCA9IG51bGw7CiAgICAgIH0gZWxzZSBpZiAobmV4dC50ZXh0ID09PSAnWycpIHsKICAgICAgICBjb250ZXh0ID0gcHJpbWFyeTsKICAgICAgICBwcmltYXJ5ID0gdGhpcy5vYmplY3RJbmRleChwcmltYXJ5KTsKICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICcuJykgewogICAgICAgIGNvbnRleHQgPSBwcmltYXJ5OwogICAgICAgIHByaW1hcnkgPSB0aGlzLmZpZWxkQWNjZXNzKHByaW1hcnkpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudGhyb3dFcnJvcignSU1QT1NTSUJMRScpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gcHJpbWFyeTsKICB9LAoKICB0aHJvd0Vycm9yOiBmdW5jdGlvbihtc2csIHRva2VuKSB7CiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3N5bnRheCcsCiAgICAgICAgJ1N5bnRheCBFcnJvcjogVG9rZW4gXCd7MH1cJyB7MX0gYXQgY29sdW1uIHsyfSBvZiB0aGUgZXhwcmVzc2lvbiBbezN9XSBzdGFydGluZyBhdCBbezR9XS4nLAogICAgICAgICAgdG9rZW4udGV4dCwgbXNnLCAodG9rZW4uaW5kZXggKyAxKSwgdGhpcy50ZXh0LCB0aGlzLnRleHQuc3Vic3RyaW5nKHRva2VuLmluZGV4KSk7CiAgfSwKCiAgcGVla1Rva2VuOiBmdW5jdGlvbigpIHsKICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPT09IDApCiAgICAgIHRocm93ICRwYXJzZU1pbkVycigndWVvZScsICdVbmV4cGVjdGVkIGVuZCBvZiBleHByZXNzaW9uOiB7MH0nLCB0aGlzLnRleHQpOwogICAgcmV0dXJuIHRoaXMudG9rZW5zWzBdOwogIH0sCgogIHBlZWs6IGZ1bmN0aW9uKGUxLCBlMiwgZTMsIGU0KSB7CiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gMCkgewogICAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2Vuc1swXTsKICAgICAgdmFyIHQgPSB0b2tlbi50ZXh0OwogICAgICBpZiAodCA9PT0gZTEgfHwgdCA9PT0gZTIgfHwgdCA9PT0gZTMgfHwgdCA9PT0gZTQgfHwKICAgICAgICAgICghZTEgJiYgIWUyICYmICFlMyAmJiAhZTQpKSB7CiAgICAgICAgcmV0dXJuIHRva2VuOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfSwKCiAgZXhwZWN0OiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCl7CiAgICB2YXIgdG9rZW4gPSB0aGlzLnBlZWsoZTEsIGUyLCBlMywgZTQpOwogICAgaWYgKHRva2VuKSB7CiAgICAgIGlmICh0aGlzLmpzb24gJiYgIXRva2VuLmpzb24pIHsKICAgICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIG5vdCB2YWxpZCBqc29uJywgdG9rZW4pOwogICAgICB9CiAgICAgIHRoaXMudG9rZW5zLnNoaWZ0KCk7CiAgICAgIHJldHVybiB0b2tlbjsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9LAoKICBjb25zdW1lOiBmdW5jdGlvbihlMSl7CiAgICBpZiAoIXRoaXMuZXhwZWN0KGUxKSkgewogICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIHVuZXhwZWN0ZWQsIGV4cGVjdGluZyBbJyArIGUxICsgJ10nLCB0aGlzLnBlZWsoKSk7CiAgICB9CiAgfSwKCiAgdW5hcnlGbjogZnVuY3Rpb24oZm4sIHJpZ2h0KSB7CiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKHNlbGYsIGxvY2FscykgewogICAgICByZXR1cm4gZm4oc2VsZiwgbG9jYWxzLCByaWdodCk7CiAgICB9LCB7CiAgICAgIGNvbnN0YW50OnJpZ2h0LmNvbnN0YW50CiAgICB9KTsKICB9LAoKICB0ZXJuYXJ5Rm46IGZ1bmN0aW9uKGxlZnQsIG1pZGRsZSwgcmlnaHQpewogICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbihzZWxmLCBsb2NhbHMpewogICAgICByZXR1cm4gbGVmdChzZWxmLCBsb2NhbHMpID8gbWlkZGxlKHNlbGYsIGxvY2FscykgOiByaWdodChzZWxmLCBsb2NhbHMpOwogICAgfSwgewogICAgICBjb25zdGFudDogbGVmdC5jb25zdGFudCAmJiBtaWRkbGUuY29uc3RhbnQgJiYgcmlnaHQuY29uc3RhbnQKICAgIH0pOwogIH0sCgogIGJpbmFyeUZuOiBmdW5jdGlvbihsZWZ0LCBmbiwgcmlnaHQpIHsKICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oc2VsZiwgbG9jYWxzKSB7CiAgICAgIHJldHVybiBmbihzZWxmLCBsb2NhbHMsIGxlZnQsIHJpZ2h0KTsKICAgIH0sIHsKICAgICAgY29uc3RhbnQ6bGVmdC5jb25zdGFudCAmJiByaWdodC5jb25zdGFudAogICAgfSk7CiAgfSwKCiAgc3RhdGVtZW50czogZnVuY3Rpb24oKSB7CiAgICB2YXIgc3RhdGVtZW50cyA9IFtdOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA+IDAgJiYgIXRoaXMucGVlaygnfScsICcpJywgJzsnLCAnXScpKQogICAgICAgIHN0YXRlbWVudHMucHVzaCh0aGlzLmZpbHRlckNoYWluKCkpOwogICAgICBpZiAoIXRoaXMuZXhwZWN0KCc7JykpIHsKICAgICAgICAvLyBvcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiBjYXNlIHdoZXJlIHRoZXJlIGlzIG9ubHkgb25lIHN0YXRlbWVudC4KICAgICAgICAvLyBUT0RPKHNpemUpOiBtYXliZSB3ZSBzaG91bGQgbm90IHN1cHBvcnQgbXVsdGlwbGUgc3RhdGVtZW50cz8KICAgICAgICByZXR1cm4gKHN0YXRlbWVudHMubGVuZ3RoID09PSAxKQogICAgICAgICAgICA/IHN0YXRlbWVudHNbMF0KICAgICAgICAgICAgOiBmdW5jdGlvbihzZWxmLCBsb2NhbHMpIHsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICB2YXIgc3RhdGVtZW50ID0gc3RhdGVtZW50c1tpXTsKICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlbWVudCkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gc3RhdGVtZW50KHNlbGYsIGxvY2Fscyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgICB9OwogICAgICB9CiAgICB9CiAgfSwKCiAgZmlsdGVyQ2hhaW46IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlZnQgPSB0aGlzLmV4cHJlc3Npb24oKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlICh0cnVlKSB7CiAgICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnfCcpKSkgewogICAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLmZpbHRlcigpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbGVmdDsKICAgICAgfQogICAgfQogIH0sCgogIGZpbHRlcjogZnVuY3Rpb24oKSB7CiAgICB2YXIgdG9rZW4gPSB0aGlzLmV4cGVjdCgpOwogICAgdmFyIGZuID0gdGhpcy4kZmlsdGVyKHRva2VuLnRleHQpOwogICAgdmFyIGFyZ3NGbiA9IFtdOwogICAgd2hpbGUgKHRydWUpIHsKICAgICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc6JykpKSB7CiAgICAgICAgYXJnc0ZuLnB1c2godGhpcy5leHByZXNzaW9uKCkpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBmbkludm9rZSA9IGZ1bmN0aW9uKHNlbGYsIGxvY2FscywgaW5wdXQpIHsKICAgICAgICAgIHZhciBhcmdzID0gW2lucHV0XTsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnc0ZuLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFyZ3MucHVzaChhcmdzRm5baV0oc2VsZiwgbG9jYWxzKSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICByZXR1cm4gZm5JbnZva2U7CiAgICAgICAgfTsKICAgICAgfQogICAgfQogIH0sCgogIGV4cHJlc3Npb246IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuYXNzaWdubWVudCgpOwogIH0sCgogIGFzc2lnbm1lbnQ6IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlZnQgPSB0aGlzLnRlcm5hcnkoKTsKICAgIHZhciByaWdodDsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPScpKSkgewogICAgICBpZiAoIWxlZnQuYXNzaWduKSB7CiAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdpbXBsaWVzIGFzc2lnbm1lbnQgYnV0IFsnICsKICAgICAgICAgICAgdGhpcy50ZXh0LnN1YnN0cmluZygwLCB0b2tlbi5pbmRleCkgKyAnXSBjYW4gbm90IGJlIGFzc2lnbmVkIHRvJywgdG9rZW4pOwogICAgICB9CiAgICAgIHJpZ2h0ID0gdGhpcy50ZXJuYXJ5KCk7CiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzKSB7CiAgICAgICAgcmV0dXJuIGxlZnQuYXNzaWduKHNjb3BlLCByaWdodChzY29wZSwgbG9jYWxzKSwgbG9jYWxzKTsKICAgICAgfTsKICAgIH0KICAgIHJldHVybiBsZWZ0OwogIH0sCgogIHRlcm5hcnk6IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlZnQgPSB0aGlzLmxvZ2ljYWxPUigpOwogICAgdmFyIG1pZGRsZTsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPycpKSkgewogICAgICBtaWRkbGUgPSB0aGlzLnRlcm5hcnkoKTsKICAgICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc6JykpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudGVybmFyeUZuKGxlZnQsIG1pZGRsZSwgdGhpcy50ZXJuYXJ5KCkpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudGhyb3dFcnJvcignZXhwZWN0ZWQgOicsIHRva2VuKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGxlZnQ7CiAgICB9CiAgfSwKCiAgbG9naWNhbE9SOiBmdW5jdGlvbigpIHsKICAgIHZhciBsZWZ0ID0gdGhpcy5sb2dpY2FsQU5EKCk7CiAgICB2YXIgdG9rZW47CiAgICB3aGlsZSAodHJ1ZSkgewogICAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJ3x8JykpKSB7CiAgICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMubG9naWNhbEFORCgpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbGVmdDsKICAgICAgfQogICAgfQogIH0sCgogIGxvZ2ljYWxBTkQ6IGZ1bmN0aW9uKCkgewogICAgdmFyIGxlZnQgPSB0aGlzLmVxdWFsaXR5KCk7CiAgICB2YXIgdG9rZW47CiAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJyYmJykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLmxvZ2ljYWxBTkQoKSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBlcXVhbGl0eTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMucmVsYXRpb25hbCgpOwogICAgdmFyIHRva2VuOwogICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc9PScsJyE9JywnPT09JywnIT09JykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLmVxdWFsaXR5KCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfSwKCiAgcmVsYXRpb25hbDogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMuYWRkaXRpdmUoKTsKICAgIHZhciB0b2tlbjsKICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPCcsICc+JywgJzw9JywgJz49JykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLnJlbGF0aW9uYWwoKSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBhZGRpdGl2ZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMubXVsdGlwbGljYXRpdmUoKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKycsJy0nKSkpIHsKICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHRoaXMubXVsdGlwbGljYXRpdmUoKSk7CiAgICB9CiAgICByZXR1cm4gbGVmdDsKICB9LAoKICBtdWx0aXBsaWNhdGl2ZTogZnVuY3Rpb24oKSB7CiAgICB2YXIgbGVmdCA9IHRoaXMudW5hcnkoKTsKICAgIHZhciB0b2tlbjsKICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKicsJy8nLCclJykpKSB7CiAgICAgIGxlZnQgPSB0aGlzLmJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB0aGlzLnVuYXJ5KCkpOwogICAgfQogICAgcmV0dXJuIGxlZnQ7CiAgfSwKCiAgdW5hcnk6IGZ1bmN0aW9uKCkgewogICAgdmFyIHRva2VuOwogICAgaWYgKHRoaXMuZXhwZWN0KCcrJykpIHsKICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeSgpOwogICAgfSBlbHNlIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnLScpKSkgewogICAgICByZXR1cm4gdGhpcy5iaW5hcnlGbihQYXJzZXIuWkVSTywgdG9rZW4uZm4sIHRoaXMudW5hcnkoKSk7CiAgICB9IGVsc2UgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCchJykpKSB7CiAgICAgIHJldHVybiB0aGlzLnVuYXJ5Rm4odG9rZW4uZm4sIHRoaXMudW5hcnkoKSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gdGhpcy5wcmltYXJ5KCk7CiAgICB9CiAgfSwKCiAgZmllbGRBY2Nlc3M6IGZ1bmN0aW9uKG9iamVjdCkgewogICAgdmFyIHBhcnNlciA9IHRoaXM7CiAgICB2YXIgZmllbGQgPSB0aGlzLmV4cGVjdCgpLnRleHQ7CiAgICB2YXIgZ2V0dGVyID0gZ2V0dGVyRm4oZmllbGQsIHRoaXMub3B0aW9ucywgdGhpcy50ZXh0KTsKCiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIHNlbGYpIHsKICAgICAgcmV0dXJuIGdldHRlcihzZWxmIHx8IG9iamVjdChzY29wZSwgbG9jYWxzKSwgbG9jYWxzKTsKICAgIH0sIHsKICAgICAgYXNzaWduOiBmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2FscykgewogICAgICAgIHJldHVybiBzZXR0ZXIob2JqZWN0KHNjb3BlLCBsb2NhbHMpLCBmaWVsZCwgdmFsdWUsIHBhcnNlci50ZXh0LCBwYXJzZXIub3B0aW9ucyk7CiAgICAgIH0KICAgIH0pOwogIH0sCgogIG9iamVjdEluZGV4OiBmdW5jdGlvbihvYmopIHsKICAgIHZhciBwYXJzZXIgPSB0aGlzOwoKICAgIHZhciBpbmRleEZuID0gdGhpcy5leHByZXNzaW9uKCk7CiAgICB0aGlzLmNvbnN1bWUoJ10nKTsKCiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKHNlbGYsIGxvY2FscykgewogICAgICB2YXIgbyA9IG9iaihzZWxmLCBsb2NhbHMpLAogICAgICAgICAgaSA9IGluZGV4Rm4oc2VsZiwgbG9jYWxzKSwKICAgICAgICAgIHYsIHA7CgogICAgICBpZiAoIW8pIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIHYgPSBlbnN1cmVTYWZlT2JqZWN0KG9baV0sIHBhcnNlci50ZXh0KTsKICAgICAgaWYgKHYgJiYgdi50aGVuICYmIHBhcnNlci5vcHRpb25zLnVud3JhcFByb21pc2VzKSB7CiAgICAgICAgcCA9IHY7CiAgICAgICAgaWYgKCEoJyQkdicgaW4gdikpIHsKICAgICAgICAgIHAuJCR2ID0gdW5kZWZpbmVkOwogICAgICAgICAgcC50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwLiQkdiA9IHZhbDsgfSk7CiAgICAgICAgfQogICAgICAgIHYgPSB2LiQkdjsKICAgICAgfQogICAgICByZXR1cm4gdjsKICAgIH0sIHsKICAgICAgYXNzaWduOiBmdW5jdGlvbihzZWxmLCB2YWx1ZSwgbG9jYWxzKSB7CiAgICAgICAgdmFyIGtleSA9IGluZGV4Rm4oc2VsZiwgbG9jYWxzKTsKICAgICAgICAvLyBwcmV2ZW50IG92ZXJ3cml0aW5nIG9mIEZ1bmN0aW9uLmNvbnN0cnVjdG9yIHdoaWNoIHdvdWxkIGJyZWFrIGVuc3VyZVNhZmVPYmplY3QgY2hlY2sKICAgICAgICB2YXIgc2FmZSA9IGVuc3VyZVNhZmVPYmplY3Qob2JqKHNlbGYsIGxvY2FscyksIHBhcnNlci50ZXh0KTsKICAgICAgICByZXR1cm4gc2FmZVtrZXldID0gdmFsdWU7CiAgICAgIH0KICAgIH0pOwogIH0sCgogIGZ1bmN0aW9uQ2FsbDogZnVuY3Rpb24oZm4sIGNvbnRleHRHZXR0ZXIpIHsKICAgIHZhciBhcmdzRm4gPSBbXTsKICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICcpJykgewogICAgICBkbyB7CiAgICAgICAgYXJnc0ZuLnB1c2godGhpcy5leHByZXNzaW9uKCkpOwogICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTsKICAgIH0KICAgIHRoaXMuY29uc3VtZSgnKScpOwoKICAgIHZhciBwYXJzZXIgPSB0aGlzOwoKICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzKSB7CiAgICAgIHZhciBhcmdzID0gW107CiAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dEdldHRlciA/IGNvbnRleHRHZXR0ZXIoc2NvcGUsIGxvY2FscykgOiBzY29wZTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJnc0ZuLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgYXJncy5wdXNoKGFyZ3NGbltpXShzY29wZSwgbG9jYWxzKSk7CiAgICAgIH0KICAgICAgdmFyIGZuUHRyID0gZm4oc2NvcGUsIGxvY2FscywgY29udGV4dCkgfHwgbm9vcDsKCiAgICAgIGVuc3VyZVNhZmVPYmplY3QoY29udGV4dCwgcGFyc2VyLnRleHQpOwogICAgICBlbnN1cmVTYWZlT2JqZWN0KGZuUHRyLCBwYXJzZXIudGV4dCk7CgogICAgICAvLyBJRSBzdHVwaWRpdHkhIChJRSBkb2Vzbid0IGhhdmUgYXBwbHkgZm9yIHNvbWUgbmF0aXZlIGZ1bmN0aW9ucykKICAgICAgdmFyIHYgPSBmblB0ci5hcHBseQogICAgICAgICAgICA/IGZuUHRyLmFwcGx5KGNvbnRleHQsIGFyZ3MpCiAgICAgICAgICAgIDogZm5QdHIoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7CgogICAgICByZXR1cm4gZW5zdXJlU2FmZU9iamVjdCh2LCBwYXJzZXIudGV4dCk7CiAgICB9OwogIH0sCgogIC8vIFRoaXMgaXMgdXNlZCB3aXRoIGpzb24gYXJyYXkgZGVjbGFyYXRpb24KICBhcnJheURlY2xhcmF0aW9uOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZWxlbWVudEZucyA9IFtdOwogICAgdmFyIGFsbENvbnN0YW50ID0gdHJ1ZTsKICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICddJykgewogICAgICBkbyB7CiAgICAgICAgdmFyIGVsZW1lbnRGbiA9IHRoaXMuZXhwcmVzc2lvbigpOwogICAgICAgIGVsZW1lbnRGbnMucHVzaChlbGVtZW50Rm4pOwogICAgICAgIGlmICghZWxlbWVudEZuLmNvbnN0YW50KSB7CiAgICAgICAgICBhbGxDb25zdGFudCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7CiAgICB9CiAgICB0aGlzLmNvbnN1bWUoJ10nKTsKCiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKHNlbGYsIGxvY2FscykgewogICAgICB2YXIgYXJyYXkgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50Rm5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgYXJyYXkucHVzaChlbGVtZW50Rm5zW2ldKHNlbGYsIGxvY2FscykpOwogICAgICB9CiAgICAgIHJldHVybiBhcnJheTsKICAgIH0sIHsKICAgICAgbGl0ZXJhbDogdHJ1ZSwKICAgICAgY29uc3RhbnQ6IGFsbENvbnN0YW50CiAgICB9KTsKICB9LAoKICBvYmplY3Q6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBrZXlWYWx1ZXMgPSBbXTsKICAgIHZhciBhbGxDb25zdGFudCA9IHRydWU7CiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnfScpIHsKICAgICAgZG8gewogICAgICAgIHZhciB0b2tlbiA9IHRoaXMuZXhwZWN0KCksCiAgICAgICAga2V5ID0gdG9rZW4uc3RyaW5nIHx8IHRva2VuLnRleHQ7CiAgICAgICAgdGhpcy5jb25zdW1lKCc6Jyk7CiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5leHByZXNzaW9uKCk7CiAgICAgICAga2V5VmFsdWVzLnB1c2goe2tleToga2V5LCB2YWx1ZTogdmFsdWV9KTsKICAgICAgICBpZiAoIXZhbHVlLmNvbnN0YW50KSB7CiAgICAgICAgICBhbGxDb25zdGFudCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7CiAgICB9CiAgICB0aGlzLmNvbnN1bWUoJ30nKTsKCiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKHNlbGYsIGxvY2FscykgewogICAgICB2YXIgb2JqZWN0ID0ge307CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5VmFsdWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGtleVZhbHVlID0ga2V5VmFsdWVzW2ldOwogICAgICAgIG9iamVjdFtrZXlWYWx1ZS5rZXldID0ga2V5VmFsdWUudmFsdWUoc2VsZiwgbG9jYWxzKTsKICAgICAgfQogICAgICByZXR1cm4gb2JqZWN0OwogICAgfSwgewogICAgICBsaXRlcmFsOiB0cnVlLAogICAgICBjb25zdGFudDogYWxsQ29uc3RhbnQKICAgIH0pOwogIH0KfTsKCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLyBQYXJzZXIgaGVscGVyIGZ1bmN0aW9ucwovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKZnVuY3Rpb24gc2V0dGVyKG9iaiwgcGF0aCwgc2V0VmFsdWUsIGZ1bGxFeHAsIG9wdGlvbnMpIHsKICAvL25lZWRlZD8KICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCiAgdmFyIGVsZW1lbnQgPSBwYXRoLnNwbGl0KCcuJyksIGtleTsKICBmb3IgKHZhciBpID0gMDsgZWxlbWVudC5sZW5ndGggPiAxOyBpKyspIHsKICAgIGtleSA9IGVuc3VyZVNhZmVNZW1iZXJOYW1lKGVsZW1lbnQuc2hpZnQoKSwgZnVsbEV4cCk7CiAgICB2YXIgcHJvcGVydHlPYmogPSBvYmpba2V5XTsKICAgIGlmICghcHJvcGVydHlPYmopIHsKICAgICAgcHJvcGVydHlPYmogPSB7fTsKICAgICAgb2JqW2tleV0gPSBwcm9wZXJ0eU9iajsKICAgIH0KICAgIG9iaiA9IHByb3BlcnR5T2JqOwogICAgaWYgKG9iai50aGVuICYmIG9wdGlvbnMudW53cmFwUHJvbWlzZXMpIHsKICAgICAgcHJvbWlzZVdhcm5pbmcoZnVsbEV4cCk7CiAgICAgIGlmICghKCIkJHYiIGluIG9iaikpIHsKICAgICAgICAoZnVuY3Rpb24ocHJvbWlzZSkgewogICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7IH0KICAgICAgICApKG9iaik7CiAgICAgIH0KICAgICAgaWYgKG9iai4kJHYgPT09IHVuZGVmaW5lZCkgewogICAgICAgIG9iai4kJHYgPSB7fTsKICAgICAgfQogICAgICBvYmogPSBvYmouJCR2OwogICAgfQogIH0KICBrZXkgPSBlbnN1cmVTYWZlTWVtYmVyTmFtZShlbGVtZW50LnNoaWZ0KCksIGZ1bGxFeHApOwogIG9ialtrZXldID0gc2V0VmFsdWU7CiAgcmV0dXJuIHNldFZhbHVlOwp9Cgp2YXIgZ2V0dGVyRm5DYWNoZSA9IHt9OwoKLyoqCiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSAiQmxhY2sgSG9sZSIgdmFyaWFudCBmcm9tOgogKiAtIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXJqcy1wYXJzZS1nZXR0ZXIvNAogKiAtIGh0dHA6Ly9qc3BlcmYuY29tL3BhdGgtZXZhbHVhdGlvbi1zaW1wbGlmaWVkLzcKICovCmZ1bmN0aW9uIGNzcFNhZmVHZXR0ZXJGbihrZXkwLCBrZXkxLCBrZXkyLCBrZXkzLCBrZXk0LCBmdWxsRXhwLCBvcHRpb25zKSB7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MCwgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MSwgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MiwgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MywgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5NCwgZnVsbEV4cCk7CgogIHJldHVybiAhb3B0aW9ucy51bndyYXBQcm9taXNlcwogICAgICA/IGZ1bmN0aW9uIGNzcFNhZmVHZXR0ZXIoc2NvcGUsIGxvY2FscykgewogICAgICAgICAgdmFyIHBhdGhWYWwgPSAobG9jYWxzICYmIGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShrZXkwKSkgPyBsb2NhbHMgOiBzY29wZTsKCiAgICAgICAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gcGF0aFZhbDsKICAgICAgICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTBdOwoKICAgICAgICAgIGlmICgha2V5MSkgcmV0dXJuIHBhdGhWYWw7CiAgICAgICAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5MV07CgogICAgICAgICAgaWYgKCFrZXkyKSByZXR1cm4gcGF0aFZhbDsKICAgICAgICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgICBwYXRoVmFsID0gcGF0aFZhbFtrZXkyXTsKCiAgICAgICAgICBpZiAoIWtleTMpIHJldHVybiBwYXRoVmFsOwogICAgICAgICAgaWYgKHBhdGhWYWwgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICAgIHBhdGhWYWwgPSBwYXRoVmFsW2tleTNdOwoKICAgICAgICAgIGlmICgha2V5NCkgcmV0dXJuIHBhdGhWYWw7CiAgICAgICAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5NF07CgogICAgICAgICAgcmV0dXJuIHBhdGhWYWw7CiAgICAgICAgfQogICAgICA6IGZ1bmN0aW9uIGNzcFNhZmVQcm9taXNlRW5hYmxlZEdldHRlcihzY29wZSwgbG9jYWxzKSB7CiAgICAgICAgICB2YXIgcGF0aFZhbCA9IChsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleTApKSA/IGxvY2FscyA6IHNjb3BlLAogICAgICAgICAgICAgIHByb21pc2U7CgogICAgICAgICAgaWYgKHBhdGhWYWwgPT0gbnVsbCkgcmV0dXJuIHBhdGhWYWw7CgogICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5MF07CiAgICAgICAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHsKICAgICAgICAgICAgcHJvbWlzZVdhcm5pbmcoZnVsbEV4cCk7CiAgICAgICAgICAgIGlmICghKCIkJHYiIGluIHBhdGhWYWwpKSB7CiAgICAgICAgICAgICAgcHJvbWlzZSA9IHBhdGhWYWw7CiAgICAgICAgICAgICAgcHJvbWlzZS4kJHYgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWwuJCR2OwogICAgICAgICAgfQoKICAgICAgICAgIGlmICgha2V5MSkgcmV0dXJuIHBhdGhWYWw7CiAgICAgICAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5MV07CiAgICAgICAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHsKICAgICAgICAgICAgcHJvbWlzZVdhcm5pbmcoZnVsbEV4cCk7CiAgICAgICAgICAgIGlmICghKCIkJHYiIGluIHBhdGhWYWwpKSB7CiAgICAgICAgICAgICAgcHJvbWlzZSA9IHBhdGhWYWw7CiAgICAgICAgICAgICAgcHJvbWlzZS4kJHYgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWwuJCR2OwogICAgICAgICAgfQoKICAgICAgICAgIGlmICgha2V5MikgcmV0dXJuIHBhdGhWYWw7CiAgICAgICAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5Ml07CiAgICAgICAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHsKICAgICAgICAgICAgcHJvbWlzZVdhcm5pbmcoZnVsbEV4cCk7CiAgICAgICAgICAgIGlmICghKCIkJHYiIGluIHBhdGhWYWwpKSB7CiAgICAgICAgICAgICAgcHJvbWlzZSA9IHBhdGhWYWw7CiAgICAgICAgICAgICAgcHJvbWlzZS4kJHYgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWwuJCR2OwogICAgICAgICAgfQoKICAgICAgICAgIGlmICgha2V5MykgcmV0dXJuIHBhdGhWYWw7CiAgICAgICAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5M107CiAgICAgICAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHsKICAgICAgICAgICAgcHJvbWlzZVdhcm5pbmcoZnVsbEV4cCk7CiAgICAgICAgICAgIGlmICghKCIkJHYiIGluIHBhdGhWYWwpKSB7CiAgICAgICAgICAgICAgcHJvbWlzZSA9IHBhdGhWYWw7CiAgICAgICAgICAgICAgcHJvbWlzZS4kJHYgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWwuJCR2OwogICAgICAgICAgfQoKICAgICAgICAgIGlmICgha2V5NCkgcmV0dXJuIHBhdGhWYWw7CiAgICAgICAgICBpZiAocGF0aFZhbCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5NF07CiAgICAgICAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHsKICAgICAgICAgICAgcHJvbWlzZVdhcm5pbmcoZnVsbEV4cCk7CiAgICAgICAgICAgIGlmICghKCIkJHYiIGluIHBhdGhWYWwpKSB7CiAgICAgICAgICAgICAgcHJvbWlzZSA9IHBhdGhWYWw7CiAgICAgICAgICAgICAgcHJvbWlzZS4kJHYgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGF0aFZhbCA9IHBhdGhWYWwuJCR2OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHBhdGhWYWw7CiAgICAgICAgfTsKfQoKZnVuY3Rpb24gc2ltcGxlR2V0dGVyRm4xKGtleTAsIGZ1bGxFeHApIHsKICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXkwLCBmdWxsRXhwKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIHNpbXBsZUdldHRlckZuMShzY29wZSwgbG9jYWxzKSB7CiAgICBpZiAoc2NvcGUgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDsKICAgIHJldHVybiAoKGxvY2FscyAmJiBsb2NhbHMuaGFzT3duUHJvcGVydHkoa2V5MCkpID8gbG9jYWxzIDogc2NvcGUpW2tleTBdOwogIH07Cn0KCmZ1bmN0aW9uIHNpbXBsZUdldHRlckZuMihrZXkwLCBrZXkxLCBmdWxsRXhwKSB7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MCwgZnVsbEV4cCk7CiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MSwgZnVsbEV4cCk7CgogIHJldHVybiBmdW5jdGlvbiBzaW1wbGVHZXR0ZXJGbjIoc2NvcGUsIGxvY2FscykgewogICAgaWYgKHNjb3BlID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7CiAgICBzY29wZSA9ICgobG9jYWxzICYmIGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShrZXkwKSkgPyBsb2NhbHMgOiBzY29wZSlba2V5MF07CiAgICByZXR1cm4gc2NvcGUgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHNjb3BlW2tleTFdOwogIH07Cn0KCmZ1bmN0aW9uIGdldHRlckZuKHBhdGgsIG9wdGlvbnMsIGZ1bGxFeHApIHsKICAvLyBDaGVjayB3aGV0aGVyIHRoZSBjYWNoZSBoYXMgdGhpcyBnZXR0ZXIgYWxyZWFkeS4KICAvLyBXZSBjYW4gdXNlIGhhc093blByb3BlcnR5IGRpcmVjdGx5IG9uIHRoZSBjYWNoZSBiZWNhdXNlIHdlIGVuc3VyZSwKICAvLyBzZWUgYmVsb3csIHRoYXQgdGhlIGNhY2hlIG5ldmVyIHN0b3JlcyBhIHBhdGggY2FsbGVkICdoYXNPd25Qcm9wZXJ0eScKICBpZiAoZ2V0dGVyRm5DYWNoZS5oYXNPd25Qcm9wZXJ0eShwYXRoKSkgewogICAgcmV0dXJuIGdldHRlckZuQ2FjaGVbcGF0aF07CiAgfQoKICB2YXIgcGF0aEtleXMgPSBwYXRoLnNwbGl0KCcuJyksCiAgICAgIHBhdGhLZXlzTGVuZ3RoID0gcGF0aEtleXMubGVuZ3RoLAogICAgICBmbjsKCiAgLy8gV2hlbiB3ZSBoYXZlIG9ubHkgMSBvciAyIHRva2VucywgdXNlIG9wdGltaXplZCBzcGVjaWFsIGNhc2UgY2xvc3VyZXMuCiAgLy8gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLXBhcnNlLWdldHRlci82CiAgaWYgKCFvcHRpb25zLnVud3JhcFByb21pc2VzICYmIHBhdGhLZXlzTGVuZ3RoID09PSAxKSB7CiAgICBmbiA9IHNpbXBsZUdldHRlckZuMShwYXRoS2V5c1swXSwgZnVsbEV4cCk7CiAgfSBlbHNlIGlmICghb3B0aW9ucy51bndyYXBQcm9taXNlcyAmJiBwYXRoS2V5c0xlbmd0aCA9PT0gMikgewogICAgZm4gPSBzaW1wbGVHZXR0ZXJGbjIocGF0aEtleXNbMF0sIHBhdGhLZXlzWzFdLCBmdWxsRXhwKTsKICB9IGVsc2UgaWYgKG9wdGlvbnMuY3NwKSB7CiAgICBpZiAocGF0aEtleXNMZW5ndGggPCA2KSB7CiAgICAgIGZuID0gY3NwU2FmZUdldHRlckZuKHBhdGhLZXlzWzBdLCBwYXRoS2V5c1sxXSwgcGF0aEtleXNbMl0sIHBhdGhLZXlzWzNdLCBwYXRoS2V5c1s0XSwgZnVsbEV4cCwKICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zKTsKICAgIH0gZWxzZSB7CiAgICAgIGZuID0gZnVuY3Rpb24oc2NvcGUsIGxvY2FscykgewogICAgICAgIHZhciBpID0gMCwgdmFsOwogICAgICAgIGRvIHsKICAgICAgICAgIHZhbCA9IGNzcFNhZmVHZXR0ZXJGbihwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhLZXlzW2krK10sIGZ1bGxFeHAsIG9wdGlvbnMpKHNjb3BlLCBsb2NhbHMpOwoKICAgICAgICAgIGxvY2FscyA9IHVuZGVmaW5lZDsgLy8gY2xlYXIgYWZ0ZXIgZmlyc3QgaXRlcmF0aW9uCiAgICAgICAgICBzY29wZSA9IHZhbDsKICAgICAgICB9IHdoaWxlIChpIDwgcGF0aEtleXNMZW5ndGgpOwogICAgICAgIHJldHVybiB2YWw7CiAgICAgIH07CiAgICB9CiAgfSBlbHNlIHsKICAgIHZhciBjb2RlID0gJ3ZhciBwO1xuJzsKICAgIGZvckVhY2gocGF0aEtleXMsIGZ1bmN0aW9uKGtleSwgaW5kZXgpIHsKICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5LCBmdWxsRXhwKTsKICAgICAgY29kZSArPSAnaWYocyA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xuJyArCiAgICAgICAgICAgICAgJ3M9JysgKGluZGV4CiAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBzaW1wbHkgZGVyZWZlcmVuY2UgJ3MnIG9uIGFueSAuZG90IG5vdGF0aW9uCiAgICAgICAgICAgICAgICAgICAgICA/ICdzJwogICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGlmIHdlIGFyZSBmaXJzdCB0aGVuIHdlIGNoZWNrIGxvY2FscyBmaXJzdCwgYW5kIGlmIHNvIHJlYWQgaXQgZmlyc3QKICAgICAgICAgICAgICAgICAgICAgIDogJygoayYmay5oYXNPd25Qcm9wZXJ0eSgiJyArIGtleSArICciKSk/azpzKScpICsgJ1siJyArIGtleSArICciXScgKyAnO1xuJyArCiAgICAgICAgICAgICAgKG9wdGlvbnMudW53cmFwUHJvbWlzZXMKICAgICAgICAgICAgICAgID8gJ2lmIChzICYmIHMudGhlbikge1xuJyArCiAgICAgICAgICAgICAgICAgICcgcHcoIicgKyBmdWxsRXhwLnJlcGxhY2UoLyhbIlxyXG5dKS9nLCAnXFwkMScpICsgJyIpO1xuJyArCiAgICAgICAgICAgICAgICAgICcgaWYgKCEoIiQkdiIgaW4gcykpIHtcbicgKwogICAgICAgICAgICAgICAgICAgICcgcD1zO1xuJyArCiAgICAgICAgICAgICAgICAgICAgJyBwLiQkdiA9IHVuZGVmaW5lZDtcbicgKwogICAgICAgICAgICAgICAgICAgICcgcC50aGVuKGZ1bmN0aW9uKHYpIHtwLiQkdj12O30pO1xuJyArCiAgICAgICAgICAgICAgICAgICAgJ31cbicgKwogICAgICAgICAgICAgICAgICAnIHM9cy4kJHZcbicgKwogICAgICAgICAgICAgICAgJ31cbicKICAgICAgICAgICAgICAgIDogJycpOwogICAgfSk7CiAgICBjb2RlICs9ICdyZXR1cm4gczsnOwoKICAgIC8qIGpzaGludCAtVzA1NCAqLwogICAgdmFyIGV2YWxlZEZuR2V0dGVyID0gbmV3IEZ1bmN0aW9uKCdzJywgJ2snLCAncHcnLCBjb2RlKTsgLy8gcz1zY29wZSwgaz1sb2NhbHMsIHB3PXByb21pc2VXYXJuaW5nCiAgICAvKiBqc2hpbnQgK1cwNTQgKi8KICAgIGV2YWxlZEZuR2V0dGVyLnRvU3RyaW5nID0gdmFsdWVGbihjb2RlKTsKICAgIGZuID0gb3B0aW9ucy51bndyYXBQcm9taXNlcyA/IGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMpIHsKICAgICAgcmV0dXJuIGV2YWxlZEZuR2V0dGVyKHNjb3BlLCBsb2NhbHMsIHByb21pc2VXYXJuaW5nKTsKICAgIH0gOiBldmFsZWRGbkdldHRlcjsKICB9CgogIC8vIE9ubHkgY2FjaGUgdGhlIHZhbHVlIGlmIGl0J3Mgbm90IGdvaW5nIHRvIG1lc3MgdXAgdGhlIGNhY2hlIG9iamVjdAogIC8vIFRoaXMgaXMgbW9yZSBwZXJmb3JtYW50IHRoYXQgdXNpbmcgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsCiAgaWYgKHBhdGggIT09ICdoYXNPd25Qcm9wZXJ0eScpIHsKICAgIGdldHRlckZuQ2FjaGVbcGF0aF0gPSBmbjsKICB9CiAgcmV0dXJuIGZuOwp9CgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBuZy4kcGFyc2UKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi4KICoKICogPHByZT4KICogICB2YXIgZ2V0dGVyID0gJHBhcnNlKCd1c2VyLm5hbWUnKTsKICogICB2YXIgc2V0dGVyID0gZ2V0dGVyLmFzc2lnbjsKICogICB2YXIgY29udGV4dCA9IHt1c2VyOntuYW1lOidhbmd1bGFyJ319OwogKiAgIHZhciBsb2NhbHMgPSB7dXNlcjp7bmFtZTonbG9jYWwnfX07CiAqCiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0KSkudG9FcXVhbCgnYW5ndWxhcicpOwogKiAgIHNldHRlcihjb250ZXh0LCAnbmV3VmFsdWUnKTsKICogICBleHBlY3QoY29udGV4dC51c2VyLm5hbWUpLnRvRXF1YWwoJ25ld1ZhbHVlJyk7CiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0LCBsb2NhbHMpKS50b0VxdWFsKCdsb2NhbCcpOwogKiA8L3ByZT4KICoKICoKICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS4KICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjoKICoKICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncwogKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS4KICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbgogKiAgICAgIGBjb250ZXh0YC4KICoKICogICAgVGhlIHJldHVybmVkIGZ1bmN0aW9uIGFsc28gaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczoKICogICAgICAqIGBsaXRlcmFsYCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24ncyB0b3AtbGV2ZWwgbm9kZSBpcyBhIEphdmFTY3JpcHQKICogICAgICAgIGxpdGVyYWwuCiAqICAgICAgKiBgY29uc3RhbnRgIOKAkyBge2Jvb2xlYW59YCDigJMgd2hldGhlciB0aGUgZXhwcmVzc2lvbiBpcyBtYWRlIGVudGlyZWx5IG9mIEphdmFTY3JpcHQKICogICAgICAgIGNvbnN0YW50IGxpdGVyYWxzLgogKiAgICAgICogYGFzc2lnbmAg4oCTIGB7P2Z1bmN0aW9uKGNvbnRleHQsIHZhbHVlKX1gIOKAkyBpZiB0aGUgZXhwcmVzc2lvbiBpcyBhc3NpZ25hYmxlLCB0aGlzIHdpbGwgYmUKICogICAgICAgIHNldCB0byBhIGZ1bmN0aW9uIHRvIGNoYW5nZSBpdHMgdmFsdWUgb24gdGhlIGdpdmVuIGNvbnRleHQuCiAqCiAqLwoKCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRwYXJzZVByb3ZpZGVyCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogYCRwYXJzZVByb3ZpZGVyYCBjYW4gYmUgdXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIHtAbGluayBuZy4kcGFyc2UgJHBhcnNlfQogKiAgc2VydmljZS4KICovCmZ1bmN0aW9uICRQYXJzZVByb3ZpZGVyKCkgewogIHZhciBjYWNoZSA9IHt9OwoKICB2YXIgJHBhcnNlT3B0aW9ucyA9IHsKICAgIGNzcDogZmFsc2UsCiAgICB1bndyYXBQcm9taXNlczogZmFsc2UsCiAgICBsb2dQcm9taXNlV2FybmluZ3M6IHRydWUKICB9OwoKCiAgLyoqCiAgICogQGRlcHJlY2F0ZWQgUHJvbWlzZSB1bndyYXBwaW5nIHZpYSAkcGFyc2UgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuCiAgICoKICAgKiBAbmdkb2MgbWV0aG9kCiAgICogQG5hbWUgbmcuJHBhcnNlUHJvdmlkZXIjdW53cmFwUHJvbWlzZXMKICAgKiBAbWV0aG9kT2YgbmcuJHBhcnNlUHJvdmlkZXIKICAgKiBAZGVzY3JpcHRpb24KICAgKgogICAqICoqVGhpcyBmZWF0dXJlIGlzIGRlcHJlY2F0ZWQsIHNlZSBkZXByZWNhdGlvbiBub3RlcyBiZWxvdyBmb3IgbW9yZSBpbmZvKioKICAgKgogICAqIElmIHNldCB0byB0cnVlIChkZWZhdWx0IGlzIGZhbHNlKSwgJHBhcnNlIHdpbGwgdW53cmFwIHByb21pc2VzIGF1dG9tYXRpY2FsbHkgd2hlbiBhIHByb21pc2UgaXMKICAgKiBmb3VuZCBhdCBhbnkgcGFydCBvZiB0aGUgZXhwcmVzc2lvbi4gSW4gb3RoZXIgd29yZHMsIGlmIHNldCB0byB0cnVlLCB0aGUgZXhwcmVzc2lvbiB3aWxsIGFsd2F5cwogICAqIHJlc3VsdCBpbiBhIG5vbi1wcm9taXNlIHZhbHVlLgogICAqCiAgICogV2hpbGUgdGhlIHByb21pc2UgaXMgdW5yZXNvbHZlZCwgaXQncyB0cmVhdGVkIGFzIHVuZGVmaW5lZCwgYnV0IG9uY2UgcmVzb2x2ZWQgYW5kIGZ1bGZpbGxlZCwKICAgKiB0aGUgZnVsZmlsbG1lbnQgdmFsdWUgaXMgdXNlZCBpbiBwbGFjZSBvZiB0aGUgcHJvbWlzZSB3aGlsZSBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLgogICAqCiAgICogKipEZXByZWNhdGlvbiBub3RpY2UqKgogICAqCiAgICogVGhpcyBpcyBhIGZlYXR1cmUgdGhhdCBkaWRuJ3QgcHJvdmUgdG8gYmUgd2lsZGx5IHVzZWZ1bCBvciBwb3B1bGFyLCBwcmltYXJpbHkgYmVjYXVzZSBvZiB0aGUKICAgKiBkaWNob3RvbXkgYmV0d2VlbiBkYXRhIGFjY2VzcyBpbiB0ZW1wbGF0ZXMgKGFjY2Vzc2VkIGFzIHJhdyB2YWx1ZXMpIGFuZCBjb250cm9sbGVyIGNvZGUKICAgKiAoYWNjZXNzZWQgYXMgcHJvbWlzZXMpLgogICAqCiAgICogSW4gbW9zdCBjb2RlIHdlIGVuZGVkIHVwIHJlc29sdmluZyBwcm9taXNlcyBtYW51YWxseSBpbiBjb250cm9sbGVycyBhbnl3YXkgYW5kIHRodXMgdW5pZnlpbmcKICAgKiB0aGUgbW9kZWwgYWNjZXNzIHRoZXJlLgogICAqCiAgICogT3RoZXIgZG93bnNpZGVzIG9mIGF1dG9tYXRpYyBwcm9taXNlIHVud3JhcHBpbmc6CiAgICoKICAgKiAtIHdoZW4gYnVpbGRpbmcgY29tcG9uZW50cyBpdCdzIG9mdGVuIGRlc2lyYWJsZSB0byByZWNlaXZlIHRoZSByYXcgcHJvbWlzZXMKICAgKiAtIGFkZHMgY29tcGxleGl0eSBhbmQgc2xvd3MgZG93biBleHByZXNzaW9uIGV2YWx1YXRpb24KICAgKiAtIG1ha2VzIGV4cHJlc3Npb24gY29kZSBwcmUtZ2VuZXJhdGlvbiB1bmF0dHJhY3RpdmUgZHVlIHRvIHRoZSBhbW91bnQgb2YgY29kZSB0aGF0IG5lZWRzIHRvIGJlCiAgICogICBnZW5lcmF0ZWQKICAgKiAtIG1ha2VzIElERSBhdXRvLWNvbXBsZXRpb24gYW5kIHRvb2wgc3VwcG9ydCBoYXJkCiAgICoKICAgKiAqKldhcm5pbmcgTG9ncyoqCiAgICoKICAgKiBJZiB0aGUgdW53cmFwcGluZyBpcyBlbmFibGVkLCBBbmd1bGFyIHdpbGwgbG9nIGEgd2FybmluZyBhYm91dCBlYWNoIGV4cHJlc3Npb24gdGhhdCB1bndyYXBzIGEKICAgKiBwcm9taXNlICh0byByZWR1Y2UgdGhlIG5vaXNlLCBlYWNoIGV4cHJlc3Npb24gaXMgbG9nZ2VkIG9ubHkgb25jZSkuIFRvIGRpc2FibGUgdGhpcyBsb2dnaW5nIHVzZQogICAqIGAkcGFyc2VQcm92aWRlci5sb2dQcm9taXNlV2FybmluZ3MoZmFsc2UpYCBhcGkuCiAgICoKICAgKgogICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIE5ldyB2YWx1ZS4KICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxzZWxmfSBSZXR1cm5zIHRoZSBjdXJyZW50IHNldHRpbmcgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGVyLgogICAqLwogIHRoaXMudW53cmFwUHJvbWlzZXMgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgJHBhcnNlT3B0aW9ucy51bndyYXBQcm9taXNlcyA9ICEhdmFsdWU7CiAgICAgIHJldHVybiB0aGlzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuICRwYXJzZU9wdGlvbnMudW53cmFwUHJvbWlzZXM7CiAgICB9CiAgfTsKCgogIC8qKgogICAqIEBkZXByZWNhdGVkIFByb21pc2UgdW53cmFwcGluZyB2aWEgJHBhcnNlIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLgogICAqCiAgICogQG5nZG9jIG1ldGhvZAogICAqIEBuYW1lIG5nLiRwYXJzZVByb3ZpZGVyI2xvZ1Byb21pc2VXYXJuaW5ncwogICAqIEBtZXRob2RPZiBuZy4kcGFyc2VQcm92aWRlcgogICAqIEBkZXNjcmlwdGlvbgogICAqCiAgICogQ29udHJvbHMgd2hldGhlciBBbmd1bGFyIHNob3VsZCBsb2cgYSB3YXJuaW5nIG9uIGFueSBlbmNvdW50ZXIgb2YgYSBwcm9taXNlIGluIGFuIGV4cHJlc3Npb24uCiAgICoKICAgKiBUaGUgZGVmYXVsdCBpcyBzZXQgdG8gYHRydWVgLgogICAqCiAgICogVGhpcyBzZXR0aW5nIGFwcGxpZXMgb25seSBpZiBgJHBhcnNlUHJvdmlkZXIudW53cmFwUHJvbWlzZXNgIHNldHRpbmcgaXMgc2V0IHRvIHRydWUgYXMgd2VsbC4KICAgKgogICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIE5ldyB2YWx1ZS4KICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxzZWxmfSBSZXR1cm5zIHRoZSBjdXJyZW50IHNldHRpbmcgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGVyLgogICAqLwogdGhpcy5sb2dQcm9taXNlV2FybmluZ3MgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHsKICAgICAgJHBhcnNlT3B0aW9ucy5sb2dQcm9taXNlV2FybmluZ3MgPSB2YWx1ZTsKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gJHBhcnNlT3B0aW9ucy5sb2dQcm9taXNlV2FybmluZ3M7CiAgICB9CiAgfTsKCgogIHRoaXMuJGdldCA9IFsnJGZpbHRlcicsICckc25pZmZlcicsICckbG9nJywgZnVuY3Rpb24oJGZpbHRlciwgJHNuaWZmZXIsICRsb2cpIHsKICAgICRwYXJzZU9wdGlvbnMuY3NwID0gJHNuaWZmZXIuY3NwOwoKICAgIHByb21pc2VXYXJuaW5nID0gZnVuY3Rpb24gcHJvbWlzZVdhcm5pbmdGbihmdWxsRXhwKSB7CiAgICAgIGlmICghJHBhcnNlT3B0aW9ucy5sb2dQcm9taXNlV2FybmluZ3MgfHwgcHJvbWlzZVdhcm5pbmdDYWNoZS5oYXNPd25Qcm9wZXJ0eShmdWxsRXhwKSkgcmV0dXJuOwogICAgICBwcm9taXNlV2FybmluZ0NhY2hlW2Z1bGxFeHBdID0gdHJ1ZTsKICAgICAgJGxvZy53YXJuKCdbJHBhcnNlXSBQcm9taXNlIGZvdW5kIGluIHRoZSBleHByZXNzaW9uIGAnICsgZnVsbEV4cCArICdgLiAnICsKICAgICAgICAgICdBdXRvbWF0aWMgdW53cmFwcGluZyBvZiBwcm9taXNlcyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRlcHJlY2F0ZWQuJyk7CiAgICB9OwoKICAgIHJldHVybiBmdW5jdGlvbihleHApIHsKICAgICAgdmFyIHBhcnNlZEV4cHJlc3Npb247CgogICAgICBzd2l0Y2ggKHR5cGVvZiBleHApIHsKICAgICAgICBjYXNlICdzdHJpbmcnOgoKICAgICAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShleHApKSB7CiAgICAgICAgICAgIHJldHVybiBjYWNoZVtleHBdOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBsZXhlciA9IG5ldyBMZXhlcigkcGFyc2VPcHRpb25zKTsKICAgICAgICAgIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKGxleGVyLCAkZmlsdGVyLCAkcGFyc2VPcHRpb25zKTsKICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSBwYXJzZXIucGFyc2UoZXhwLCBmYWxzZSk7CgogICAgICAgICAgaWYgKGV4cCAhPT0gJ2hhc093blByb3BlcnR5JykgewogICAgICAgICAgICAvLyBPbmx5IGNhY2hlIHRoZSB2YWx1ZSBpZiBpdCdzIG5vdCBnb2luZyB0byBtZXNzIHVwIHRoZSBjYWNoZSBvYmplY3QKICAgICAgICAgICAgLy8gVGhpcyBpcyBtb3JlIHBlcmZvcm1hbnQgdGhhdCB1c2luZyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwKICAgICAgICAgICAgY2FjaGVbZXhwXSA9IHBhcnNlZEV4cHJlc3Npb247CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb247CgogICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzoKICAgICAgICAgIHJldHVybiBleHA7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gbm9vcDsKICAgICAgfQogICAgfTsKICB9XTsKfQoKLyoqCiAqIEBuZ2RvYyBzZXJ2aWNlCiAqIEBuYW1lIG5nLiRxCiAqIEByZXF1aXJlcyAkcm9vdFNjb3BlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBBIHByb21pc2UvZGVmZXJyZWQgaW1wbGVtZW50YXRpb24gaW5zcGlyZWQgYnkgW0tyaXMgS293YWwncyBRXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpLgogKgogKiBbVGhlIENvbW1vbkpTIFByb21pc2UgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1Byb21pc2VzKSBkZXNjcmliZXMgYSBwcm9taXNlIGFzIGFuCiAqIGludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgYW4gYWN0aW9uIHRoYXQgaXMKICogcGVyZm9ybWVkIGFzeW5jaHJvbm91c2x5LCBhbmQgbWF5IG9yIG1heSBub3QgYmUgZmluaXNoZWQgYXQgYW55IGdpdmVuIHBvaW50IGluIHRpbWUuCiAqCiAqIEZyb20gdGhlIHBlcnNwZWN0aXZlIG9mIGRlYWxpbmcgd2l0aCBlcnJvciBoYW5kbGluZywgZGVmZXJyZWQgYW5kIHByb21pc2UgQVBJcyBhcmUgdG8KICogYXN5bmNocm9ub3VzIHByb2dyYW1taW5nIHdoYXQgYHRyeWAsIGBjYXRjaGAgYW5kIGB0aHJvd2Aga2V5d29yZHMgYXJlIHRvIHN5bmNocm9ub3VzIHByb2dyYW1taW5nLgogKgogKiA8cHJlPgogKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBzY29wZWAgYXJlCiAqICAgLy8gYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuCiAqCiAqICAgZnVuY3Rpb24gYXN5bmNHcmVldChuYW1lKSB7CiAqICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpOwogKgogKiAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICogICAgICAgLy8gc2luY2UgdGhpcyBmbiBleGVjdXRlcyBhc3luYyBpbiBhIGZ1dHVyZSB0dXJuIG9mIHRoZSBldmVudCBsb29wLCB3ZSBuZWVkIHRvIHdyYXAKICogICAgICAgLy8gb3VyIGNvZGUgaW50byBhbiAkYXBwbHkgY2FsbCBzbyB0aGF0IHRoZSBtb2RlbCBjaGFuZ2VzIGFyZSBwcm9wZXJseSBvYnNlcnZlZC4KICogICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogKiAgICAgICAgIGRlZmVycmVkLm5vdGlmeSgnQWJvdXQgdG8gZ3JlZXQgJyArIG5hbWUgKyAnLicpOwogKgogKiAgICAgICAgIGlmIChva1RvR3JlZXQobmFtZSkpIHsKICogICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7CiAqICAgICAgICAgfSBlbHNlIHsKICogICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnR3JlZXRpbmcgJyArIG5hbWUgKyAnIGlzIG5vdCBhbGxvd2VkLicpOwogKiAgICAgICAgIH0KICogICAgICAgfSk7CiAqICAgICB9LCAxMDAwKTsKICoKICogICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlOwogKiAgIH0KICoKICogICB2YXIgcHJvbWlzZSA9IGFzeW5jR3JlZXQoJ1JvYmluIEhvb2QnKTsKICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHsKICogICAgIGFsZXJ0KCdTdWNjZXNzOiAnICsgZ3JlZXRpbmcpOwogKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7CiAqICAgfSwgZnVuY3Rpb24odXBkYXRlKSB7CiAqICAgICBhbGVydCgnR290IG5vdGlmaWNhdGlvbjogJyArIHVwZGF0ZSk7CiAqICAgfSk7CiAqIDwvcHJlPgogKgogKiBBdCBmaXJzdCBpdCBtaWdodCBub3QgYmUgb2J2aW91cyB3aHkgdGhpcyBleHRyYSBjb21wbGV4aXR5IGlzIHdvcnRoIHRoZSB0cm91YmxlLiBUaGUgcGF5b2ZmCiAqIGNvbWVzIGluIHRoZSB3YXkgb2YgZ3VhcmFudGVlcyB0aGF0IHByb21pc2UgYW5kIGRlZmVycmVkIEFQSXMgbWFrZSwgc2VlCiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvdW5jb21tb25qcy9ibG9iL21hc3Rlci9wcm9taXNlcy9zcGVjaWZpY2F0aW9uLm1kLgogKgogKiBBZGRpdGlvbmFsbHkgdGhlIHByb21pc2UgYXBpIGFsbG93cyBmb3IgY29tcG9zaXRpb24gdGhhdCBpcyB2ZXJ5IGhhcmQgdG8gZG8gd2l0aCB0aGUKICogdHJhZGl0aW9uYWwgY2FsbGJhY2sgKFtDUFNdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29udGludWF0aW9uLXBhc3Npbmdfc3R5bGUpKSBhcHByb2FjaC4KICogRm9yIG1vcmUgb24gdGhpcyBwbGVhc2Ugc2VlIHRoZSBbUSBkb2N1bWVudGF0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpIGVzcGVjaWFsbHkgdGhlCiAqIHNlY3Rpb24gb24gc2VyaWFsIG9yIHBhcmFsbGVsIGpvaW5pbmcgb2YgcHJvbWlzZXMuCiAqCiAqCiAqICMgVGhlIERlZmVycmVkIEFQSQogKgogKiBBIG5ldyBpbnN0YW5jZSBvZiBkZWZlcnJlZCBpcyBjb25zdHJ1Y3RlZCBieSBjYWxsaW5nIGAkcS5kZWZlcigpYC4KICoKICogVGhlIHB1cnBvc2Ugb2YgdGhlIGRlZmVycmVkIG9iamVjdCBpcyB0byBleHBvc2UgdGhlIGFzc29jaWF0ZWQgUHJvbWlzZSBpbnN0YW5jZSBhcyB3ZWxsIGFzIEFQSXMKICogdGhhdCBjYW4gYmUgdXNlZCBmb3Igc2lnbmFsaW5nIHRoZSBzdWNjZXNzZnVsIG9yIHVuc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLCBhcyB3ZWxsIGFzIHRoZSBzdGF0dXMKICogb2YgdGhlIHRhc2suCiAqCiAqICoqTWV0aG9kcyoqCiAqCiAqIC0gYHJlc29sdmUodmFsdWUpYCDigJMgcmVzb2x2ZXMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgdmFsdWVgLiBJZiB0aGUgdmFsdWUgaXMgYSByZWplY3Rpb24KICogICBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAsIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaW5zdGVhZC4KICogLSBgcmVqZWN0KHJlYXNvbilgIOKAkyByZWplY3RzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHJlYXNvbmAuIFRoaXMgaXMgZXF1aXZhbGVudCB0bwogKiAgIHJlc29sdmluZyBpdCB3aXRoIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YC4KICogLSBgbm90aWZ5KHZhbHVlKWAgLSBwcm92aWRlcyB1cGRhdGVzIG9uIHRoZSBzdGF0dXMgb2YgdGhlIHByb21pc2VzIGV4ZWN1dGlvbi4gVGhpcyBtYXkgYmUgY2FsbGVkCiAqICAgbXVsdGlwbGUgdGltZXMgYmVmb3JlIHRoZSBwcm9taXNlIGlzIGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZC4KICoKICogKipQcm9wZXJ0aWVzKioKICoKICogLSBwcm9taXNlIOKAkyBge1Byb21pc2V9YCDigJMgcHJvbWlzZSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGVmZXJyZWQuCiAqCiAqCiAqICMgVGhlIFByb21pc2UgQVBJCiAqCiAqIEEgbmV3IHByb21pc2UgaW5zdGFuY2UgaXMgY3JlYXRlZCB3aGVuIGEgZGVmZXJyZWQgaW5zdGFuY2UgaXMgY3JlYXRlZCBhbmQgY2FuIGJlIHJldHJpZXZlZCBieQogKiBjYWxsaW5nIGBkZWZlcnJlZC5wcm9taXNlYC4KICoKICogVGhlIHB1cnBvc2Ugb2YgdGhlIHByb21pc2Ugb2JqZWN0IGlzIHRvIGFsbG93IGZvciBpbnRlcmVzdGVkIHBhcnRpZXMgdG8gZ2V0IGFjY2VzcyB0byB0aGUgcmVzdWx0CiAqIG9mIHRoZSBkZWZlcnJlZCB0YXNrIHdoZW4gaXQgY29tcGxldGVzLgogKgogKiAqKk1ldGhvZHMqKgogKgogKiAtIGB0aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaywgbm90aWZ5Q2FsbGJhY2spYCDigJMgcmVnYXJkbGVzcyBvZiB3aGVuIHRoZSBwcm9taXNlIHdhcyBvcgogKiAgIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGB0aGVuYCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5CiAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHQKICogICBvciByZWplY3Rpb24gcmVhc29uLiBBZGRpdGlvbmFsbHksIHRoZSBub3RpZnkgY2FsbGJhY2sgbWF5IGJlIGNhbGxlZCB6ZXJvIG9yIG1vcmUgdGltZXMgdG8KICogICBwcm92aWRlIGEgcHJvZ3Jlc3MgaW5kaWNhdGlvbiwgYmVmb3JlIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLgogKgogKiAgIFRoaXMgbWV0aG9kICpyZXR1cm5zIGEgbmV3IHByb21pc2UqIHdoaWNoIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZQogKiAgIGBzdWNjZXNzQ2FsbGJhY2tgLCBgZXJyb3JDYWxsYmFja2AuIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlCiAqICAgYG5vdGlmeUNhbGxiYWNrYCBtZXRob2QuIFRoZSBwcm9taXNlIGNhbiBub3QgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2sKICogICBtZXRob2QuCiAqCiAqIC0gYGNhdGNoKGVycm9yQ2FsbGJhY2spYCDigJMgc2hvcnRoYW5kIGZvciBgcHJvbWlzZS50aGVuKG51bGwsIGVycm9yQ2FsbGJhY2spYAogKgogKiAtIGBmaW5hbGx5KGNhbGxiYWNrKWAg4oCTIGFsbG93cyB5b3UgdG8gb2JzZXJ2ZSBlaXRoZXIgdGhlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBvZiBhIHByb21pc2UsCiAqICAgYnV0IHRvIGRvIHNvIHdpdGhvdXQgbW9kaWZ5aW5nIHRoZSBmaW5hbCB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgdG8gcmVsZWFzZSByZXNvdXJjZXMgb3IgZG8gc29tZQogKiAgIGNsZWFuLXVwIHRoYXQgbmVlZHMgdG8gYmUgZG9uZSB3aGV0aGVyIHRoZSBwcm9taXNlIHdhcyByZWplY3RlZCBvciByZXNvbHZlZC4gU2VlIHRoZSBbZnVsbAogKiAgIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS93aWtpL0FQSS1SZWZlcmVuY2UjcHJvbWlzZWZpbmFsbHljYWxsYmFjaykgZm9yCiAqICAgbW9yZSBpbmZvcm1hdGlvbi4KICoKICogICBCZWNhdXNlIGBmaW5hbGx5YCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gSmF2YVNjcmlwdCBhbmQgcmVzZXJ2ZWQga2V5d29yZHMgYXJlIG5vdCBzdXBwb3J0ZWQgYXMKICogICBwcm9wZXJ0eSBuYW1lcyBieSBFUzMsIHlvdSdsbCBuZWVkIHRvIGludm9rZSB0aGUgbWV0aG9kIGxpa2UgYHByb21pc2VbJ2ZpbmFsbHknXShjYWxsYmFjaylgIHRvCiAqICAgbWFrZSB5b3VyIGNvZGUgSUU4IGNvbXBhdGlibGUuCiAqCiAqICMgQ2hhaW5pbmcgcHJvbWlzZXMKICoKICogQmVjYXVzZSBjYWxsaW5nIHRoZSBgdGhlbmAgbWV0aG9kIG9mIGEgcHJvbWlzZSByZXR1cm5zIGEgbmV3IGRlcml2ZWQgcHJvbWlzZSwgaXQgaXMgZWFzaWx5CiAqIHBvc3NpYmxlIHRvIGNyZWF0ZSBhIGNoYWluIG9mIHByb21pc2VzOgogKgogKiA8cHJlPgogKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICogICAgIHJldHVybiByZXN1bHQgKyAxOwogKiAgIH0pOwogKgogKiAgIC8vIHByb21pc2VCIHdpbGwgYmUgcmVzb2x2ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgcHJvbWlzZUEgaXMgcmVzb2x2ZWQgYW5kIGl0cyB2YWx1ZQogKiAgIC8vIHdpbGwgYmUgdGhlIHJlc3VsdCBvZiBwcm9taXNlQSBpbmNyZW1lbnRlZCBieSAxCiAqIDwvcHJlPgogKgogKiBJdCBpcyBwb3NzaWJsZSB0byBjcmVhdGUgY2hhaW5zIG9mIGFueSBsZW5ndGggYW5kIHNpbmNlIGEgcHJvbWlzZSBjYW4gYmUgcmVzb2x2ZWQgd2l0aCBhbm90aGVyCiAqIHByb21pc2UgKHdoaWNoIHdpbGwgZGVmZXIgaXRzIHJlc29sdXRpb24gZnVydGhlciksIGl0IGlzIHBvc3NpYmxlIHRvIHBhdXNlL2RlZmVyIHJlc29sdXRpb24gb2YKICogdGhlIHByb21pc2VzIGF0IGFueSBwb2ludCBpbiB0aGUgY2hhaW4uIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gaW1wbGVtZW50IHBvd2VyZnVsIEFQSXMgbGlrZQogKiAkaHR0cCdzIHJlc3BvbnNlIGludGVyY2VwdG9ycy4KICoKICoKICogIyBEaWZmZXJlbmNlcyBiZXR3ZWVuIEtyaXMgS293YWwncyBRIGFuZCAkcQogKgogKiAgVGhlcmUgYXJlIHR3byBtYWluIGRpZmZlcmVuY2VzOgogKgogKiAtICRxIGlzIGludGVncmF0ZWQgd2l0aCB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGV9IFNjb3BlIG1vZGVsIG9ic2VydmF0aW9uCiAqICAgbWVjaGFuaXNtIGluIGFuZ3VsYXIsIHdoaWNoIG1lYW5zIGZhc3RlciBwcm9wYWdhdGlvbiBvZiByZXNvbHV0aW9uIG9yIHJlamVjdGlvbiBpbnRvIHlvdXIKICogICBtb2RlbHMgYW5kIGF2b2lkaW5nIHVubmVjZXNzYXJ5IGJyb3dzZXIgcmVwYWludHMsIHdoaWNoIHdvdWxkIHJlc3VsdCBpbiBmbGlja2VyaW5nIFVJLgogKiAtIFEgaGFzIG1hbnkgbW9yZSBmZWF0dXJlcyB0aGFuICRxLCBidXQgdGhhdCBjb21lcyBhdCBhIGNvc3Qgb2YgYnl0ZXMuICRxIGlzIHRpbnksIGJ1dCBjb250YWlucwogKiAgIGFsbCB0aGUgaW1wb3J0YW50IGZ1bmN0aW9uYWxpdHkgbmVlZGVkIGZvciBjb21tb24gYXN5bmMgdGFza3MuCiAqCiAqICAjIFRlc3RpbmcKICoKICogIDxwcmU+CiAqICAgIGl0KCdzaG91bGQgc2ltdWxhdGUgcHJvbWlzZScsIGluamVjdChmdW5jdGlvbigkcSwgJHJvb3RTY29wZSkgewogKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7CiAqICAgICAgdmFyIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlOwogKiAgICAgIHZhciByZXNvbHZlZFZhbHVlOwogKgogKiAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkgeyByZXNvbHZlZFZhbHVlID0gdmFsdWU7IH0pOwogKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7CiAqCiAqICAgICAgLy8gU2ltdWxhdGUgcmVzb2x2aW5nIG9mIHByb21pc2UKICogICAgICBkZWZlcnJlZC5yZXNvbHZlKDEyMyk7CiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LgogKiAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSB3YW50IHRoZSBwcm9taXNlIEFQSSB0byBhbHdheXMgYmUgYXN5bmMsIHdoZXRoZXIgb3Igbm90CiAqICAgICAgLy8gaXQgZ290IGNhbGxlZCBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5LgogKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7CiAqCiAqICAgICAgLy8gUHJvcGFnYXRlIHByb21pc2UgcmVzb2x1dGlvbiB0byAndGhlbicgZnVuY3Rpb25zIHVzaW5nICRhcHBseSgpLgogKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7CiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvRXF1YWwoMTIzKTsKICogICAgfSkpOwogKiAgPC9wcmU+CiAqLwpmdW5jdGlvbiAkUVByb3ZpZGVyKCkgewoKICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikgewogICAgcmV0dXJuIHFGYWN0b3J5KGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7CiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlcik7CiAgfV07Cn0KCgovKioKICogQ29uc3RydWN0cyBhIHByb21pc2UgbWFuYWdlci4KICoKICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbil9IG5leHRUaWNrIEZ1bmN0aW9uIGZvciBleGVjdXRpbmcgZnVuY3Rpb25zIGluIHRoZSBuZXh0IHR1cm4uCiAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uKil9IGV4Y2VwdGlvbkhhbmRsZXIgRnVuY3Rpb24gaW50byB3aGljaCB1bmV4cGVjdGVkIGV4Y2VwdGlvbnMgYXJlIHBhc3NlZCBmb3IKICogICAgIGRlYnVnZ2luZyBwdXJwb3Nlcy4KICogQHJldHVybnMge29iamVjdH0gUHJvbWlzZSBtYW5hZ2VyLgogKi8KZnVuY3Rpb24gcUZhY3RvcnkobmV4dFRpY2ssIGV4Y2VwdGlvbkhhbmRsZXIpIHsKCiAgLyoqCiAgICogQG5nZG9jCiAgICogQG5hbWUgbmcuJHEjZGVmZXIKICAgKiBAbWV0aG9kT2YgbmcuJHEKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDcmVhdGVzIGEgYERlZmVycmVkYCBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyBhIHRhc2sgd2hpY2ggd2lsbCBmaW5pc2ggaW4gdGhlIGZ1dHVyZS4KICAgKgogICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiBkZWZlcnJlZC4KICAgKi8KICB2YXIgZGVmZXIgPSBmdW5jdGlvbigpIHsKICAgIHZhciBwZW5kaW5nID0gW10sCiAgICAgICAgdmFsdWUsIGRlZmVycmVkOwoKICAgIGRlZmVycmVkID0gewoKICAgICAgcmVzb2x2ZTogZnVuY3Rpb24odmFsKSB7CiAgICAgICAgaWYgKHBlbmRpbmcpIHsKICAgICAgICAgIHZhciBjYWxsYmFja3MgPSBwZW5kaW5nOwogICAgICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDsKICAgICAgICAgIHZhbHVlID0gcmVmKHZhbCk7CgogICAgICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGgpIHsKICAgICAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrOwogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXTsKICAgICAgICAgICAgICAgIHZhbHVlLnRoZW4oY2FsbGJhY2tbMF0sIGNhbGxiYWNrWzFdLCBjYWxsYmFja1syXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCgoKICAgICAgcmVqZWN0OiBmdW5jdGlvbihyZWFzb24pIHsKICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlamVjdChyZWFzb24pKTsKICAgICAgfSwKCgogICAgICBub3RpZnk6IGZ1bmN0aW9uKHByb2dyZXNzKSB7CiAgICAgICAgaWYgKHBlbmRpbmcpIHsKICAgICAgICAgIHZhciBjYWxsYmFja3MgPSBwZW5kaW5nOwoKICAgICAgICAgIGlmIChwZW5kaW5nLmxlbmd0aCkgewogICAgICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICB2YXIgY2FsbGJhY2s7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldOwogICAgICAgICAgICAgICAgY2FsbGJhY2tbMl0ocHJvZ3Jlc3MpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAoKCiAgICAgIHByb21pc2U6IHsKICAgICAgICB0aGVuOiBmdW5jdGlvbihjYWxsYmFjaywgZXJyYmFjaywgcHJvZ3Jlc3NiYWNrKSB7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gZGVmZXIoKTsKCiAgICAgICAgICB2YXIgd3JhcHBlZENhbGxiYWNrID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXN1bHQucmVzb2x2ZSgoaXNGdW5jdGlvbihjYWxsYmFjaykgPyBjYWxsYmFjayA6IGRlZmF1bHRDYWxsYmFjaykodmFsdWUpKTsKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgcmVzdWx0LnJlamVjdChlKTsKICAgICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwoKICAgICAgICAgIHZhciB3cmFwcGVkRXJyYmFjayA9IGZ1bmN0aW9uKHJlYXNvbikgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHJlc3VsdC5yZXNvbHZlKChpc0Z1bmN0aW9uKGVycmJhY2spID8gZXJyYmFjayA6IGRlZmF1bHRFcnJiYWNrKShyZWFzb24pKTsKICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgcmVzdWx0LnJlamVjdChlKTsKICAgICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwoKICAgICAgICAgIHZhciB3cmFwcGVkUHJvZ3Jlc3NiYWNrID0gZnVuY3Rpb24ocHJvZ3Jlc3MpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXN1bHQubm90aWZ5KChpc0Z1bmN0aW9uKHByb2dyZXNzYmFjaykgPyBwcm9ncmVzc2JhY2sgOiBkZWZhdWx0Q2FsbGJhY2spKHByb2dyZXNzKSk7CiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CgogICAgICAgICAgaWYgKHBlbmRpbmcpIHsKICAgICAgICAgICAgcGVuZGluZy5wdXNoKFt3cmFwcGVkQ2FsbGJhY2ssIHdyYXBwZWRFcnJiYWNrLCB3cmFwcGVkUHJvZ3Jlc3NiYWNrXSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YWx1ZS50aGVuKHdyYXBwZWRDYWxsYmFjaywgd3JhcHBlZEVycmJhY2ssIHdyYXBwZWRQcm9ncmVzc2JhY2spOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiByZXN1bHQucHJvbWlzZTsKICAgICAgICB9LAoKICAgICAgICAiY2F0Y2giOiBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBjYWxsYmFjayk7CiAgICAgICAgfSwKCiAgICAgICAgImZpbmFsbHkiOiBmdW5jdGlvbihjYWxsYmFjaykgewoKICAgICAgICAgIGZ1bmN0aW9uIG1ha2VQcm9taXNlKHZhbHVlLCByZXNvbHZlZCkgewogICAgICAgICAgICB2YXIgcmVzdWx0ID0gZGVmZXIoKTsKICAgICAgICAgICAgaWYgKHJlc29sdmVkKSB7CiAgICAgICAgICAgICAgcmVzdWx0LnJlc29sdmUodmFsdWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlc3VsdC5yZWplY3QodmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXN1bHQucHJvbWlzZTsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgaXNSZXNvbHZlZCkgewogICAgICAgICAgICB2YXIgY2FsbGJhY2tPdXRwdXQgPSBudWxsOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGNhbGxiYWNrT3V0cHV0ID0gKGNhbGxiYWNrIHx8ZGVmYXVsdENhbGxiYWNrKSgpOwogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gbWFrZVByb21pc2UoZSwgZmFsc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChjYWxsYmFja091dHB1dCAmJiBpc0Z1bmN0aW9uKGNhbGxiYWNrT3V0cHV0LnRoZW4pKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrT3V0cHV0LnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVByb21pc2UoZXJyb3IsIGZhbHNlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHRydWUpOwogICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHsKICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGVycm9yLCBmYWxzZSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIGRlZmVycmVkOwogIH07CgoKICB2YXIgcmVmID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIGlmICh2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnRoZW4pKSByZXR1cm4gdmFsdWU7CiAgICByZXR1cm4gewogICAgICB0aGVuOiBmdW5jdGlvbihjYWxsYmFjaykgewogICAgICAgIHZhciByZXN1bHQgPSBkZWZlcigpOwogICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgcmVzdWx0LnJlc29sdmUoY2FsbGJhY2sodmFsdWUpKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7CiAgICAgIH0KICAgIH07CiAgfTsKCgogIC8qKgogICAqIEBuZ2RvYwogICAqIEBuYW1lIG5nLiRxI3JlamVjdAogICAqIEBtZXRob2RPZiBuZy4kcQogICAqIEBkZXNjcmlwdGlvbgogICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGByZWFzb25gLiBUaGlzIGFwaSBzaG91bGQgYmUKICAgKiB1c2VkIHRvIGZvcndhcmQgcmVqZWN0aW9uIGluIGEgY2hhaW4gb2YgcHJvbWlzZXMuIElmIHlvdSBhcmUgZGVhbGluZyB3aXRoIHRoZSBsYXN0IHByb21pc2UgaW4KICAgKiBhIHByb21pc2UgY2hhaW4sIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGl0LgogICAqCiAgICogV2hlbiBjb21wYXJpbmcgZGVmZXJyZWRzL3Byb21pc2VzIHRvIHRoZSBmYW1pbGlhciBiZWhhdmlvciBvZiB0cnkvY2F0Y2gvdGhyb3csIHRoaW5rIG9mCiAgICogYHJlamVjdGAgYXMgdGhlIGB0aHJvd2Aga2V5d29yZCBpbiBKYXZhU2NyaXB0LiBUaGlzIGFsc28gbWVhbnMgdGhhdCBpZiB5b3UgImNhdGNoIiBhbiBlcnJvciB2aWEKICAgKiBhIHByb21pc2UgZXJyb3IgY2FsbGJhY2sgYW5kIHlvdSB3YW50IHRvIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSBwcm9taXNlIGRlcml2ZWQgZnJvbSB0aGUKICAgKiBjdXJyZW50IHByb21pc2UsIHlvdSBoYXZlIHRvICJyZXRocm93IiB0aGUgZXJyb3IgYnkgcmV0dXJuaW5nIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYQogICAqIGByZWplY3RgLgogICAqCiAgICogPHByZT4KICAgKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICAgKiAgICAgLy8gc3VjY2VzczogZG8gc29tZXRoaW5nIGFuZCByZXNvbHZlIHByb21pc2VCCiAgICogICAgIC8vICAgICAgICAgIHdpdGggdGhlIG9sZCBvciBhIG5ldyByZXN1bHQKICAgKiAgICAgcmV0dXJuIHJlc3VsdDsKICAgKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogICAqICAgICAvLyBlcnJvcjogaGFuZGxlIHRoZSBlcnJvciBpZiBwb3NzaWJsZSBhbmQKICAgKiAgICAgLy8gICAgICAgIHJlc29sdmUgcHJvbWlzZUIgd2l0aCBuZXdQcm9taXNlT3JWYWx1ZSwKICAgKiAgICAgLy8gICAgICAgIG90aGVyd2lzZSBmb3J3YXJkIHRoZSByZWplY3Rpb24gdG8gcHJvbWlzZUIKICAgKiAgICAgaWYgKGNhbkhhbmRsZShyZWFzb24pKSB7CiAgICogICAgICAvLyBoYW5kbGUgdGhlIGVycm9yIGFuZCByZWNvdmVyCiAgICogICAgICByZXR1cm4gbmV3UHJvbWlzZU9yVmFsdWU7CiAgICogICAgIH0KICAgKiAgICAgcmV0dXJuICRxLnJlamVjdChyZWFzb24pOwogICAqICAgfSk7CiAgICogPC9wcmU+CiAgICoKICAgKiBAcGFyYW0geyp9IHJlYXNvbiBDb25zdGFudCwgbWVzc2FnZSwgZXhjZXB0aW9uIG9yIGFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHJlamVjdGlvbiByZWFzb24uCiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2FzIGFscmVhZHkgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgYHJlYXNvbmAuCiAgICovCiAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uKHJlYXNvbikgewogICAgcmV0dXJuIHsKICAgICAgdGhlbjogZnVuY3Rpb24oY2FsbGJhY2ssIGVycmJhY2spIHsKICAgICAgICB2YXIgcmVzdWx0ID0gZGVmZXIoKTsKICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJlc3VsdC5yZXNvbHZlKChpc0Z1bmN0aW9uKGVycmJhY2spID8gZXJyYmFjayA6IGRlZmF1bHRFcnJiYWNrKShyZWFzb24pKTsKICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICByZXN1bHQucmVqZWN0KGUpOwogICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiByZXN1bHQucHJvbWlzZTsKICAgICAgfQogICAgfTsKICB9OwoKCiAgLyoqCiAgICogQG5nZG9jCiAgICogQG5hbWUgbmcuJHEjd2hlbgogICAqIEBtZXRob2RPZiBuZy4kcQogICAqIEBkZXNjcmlwdGlvbgogICAqIFdyYXBzIGFuIG9iamVjdCB0aGF0IG1pZ2h0IGJlIGEgdmFsdWUgb3IgYSAoM3JkIHBhcnR5KSB0aGVuLWFibGUgcHJvbWlzZSBpbnRvIGEgJHEgcHJvbWlzZS4KICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSBhcmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IG1pZ2h0IG9yIG1pZ2h0IG5vdCBiZSBhIHByb21pc2UsIG9yIGlmCiAgICogdGhlIHByb21pc2UgY29tZXMgZnJvbSBhIHNvdXJjZSB0aGF0IGNhbid0IGJlIHRydXN0ZWQuCiAgICoKICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9yIGEgcHJvbWlzZQogICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSBvZiB0aGUgcGFzc2VkIHZhbHVlIG9yIHByb21pc2UKICAgKi8KICB2YXIgd2hlbiA9IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaywgZXJyYmFjaywgcHJvZ3Jlc3NiYWNrKSB7CiAgICB2YXIgcmVzdWx0ID0gZGVmZXIoKSwKICAgICAgICBkb25lOwoKICAgIHZhciB3cmFwcGVkQ2FsbGJhY2sgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiAoaXNGdW5jdGlvbihjYWxsYmFjaykgPyBjYWxsYmFjayA6IGRlZmF1bHRDYWxsYmFjaykodmFsdWUpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICByZXR1cm4gcmVqZWN0KGUpOwogICAgICB9CiAgICB9OwoKICAgIHZhciB3cmFwcGVkRXJyYmFjayA9IGZ1bmN0aW9uKHJlYXNvbikgewogICAgICB0cnkgewogICAgICAgIHJldHVybiAoaXNGdW5jdGlvbihlcnJiYWNrKSA/IGVycmJhY2sgOiBkZWZhdWx0RXJyYmFjaykocmVhc29uKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgcmV0dXJuIHJlamVjdChlKTsKICAgICAgfQogICAgfTsKCiAgICB2YXIgd3JhcHBlZFByb2dyZXNzYmFjayA9IGZ1bmN0aW9uKHByb2dyZXNzKSB7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIChpc0Z1bmN0aW9uKHByb2dyZXNzYmFjaykgPyBwcm9ncmVzc2JhY2sgOiBkZWZhdWx0Q2FsbGJhY2spKHByb2dyZXNzKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgIH0KICAgIH07CgogICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgIHJlZih2YWx1ZSkudGhlbihmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIGlmIChkb25lKSByZXR1cm47CiAgICAgICAgZG9uZSA9IHRydWU7CiAgICAgICAgcmVzdWx0LnJlc29sdmUocmVmKHZhbHVlKS50aGVuKHdyYXBwZWRDYWxsYmFjaywgd3JhcHBlZEVycmJhY2ssIHdyYXBwZWRQcm9ncmVzc2JhY2spKTsKICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7CiAgICAgICAgaWYgKGRvbmUpIHJldHVybjsKICAgICAgICBkb25lID0gdHJ1ZTsKICAgICAgICByZXN1bHQucmVzb2x2ZSh3cmFwcGVkRXJyYmFjayhyZWFzb24pKTsKICAgICAgfSwgZnVuY3Rpb24ocHJvZ3Jlc3MpIHsKICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOwogICAgICAgIHJlc3VsdC5ub3RpZnkod3JhcHBlZFByb2dyZXNzYmFjayhwcm9ncmVzcykpOwogICAgICB9KTsKICAgIH0pOwoKICAgIHJldHVybiByZXN1bHQucHJvbWlzZTsKICB9OwoKCiAgZnVuY3Rpb24gZGVmYXVsdENhbGxiYWNrKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfQoKCiAgZnVuY3Rpb24gZGVmYXVsdEVycmJhY2socmVhc29uKSB7CiAgICByZXR1cm4gcmVqZWN0KHJlYXNvbik7CiAgfQoKCiAgLyoqCiAgICogQG5nZG9jCiAgICogQG5hbWUgbmcuJHEjYWxsCiAgICogQG1ldGhvZE9mIG5nLiRxCiAgICogQGRlc2NyaXB0aW9uCiAgICogQ29tYmluZXMgbXVsdGlwbGUgcHJvbWlzZXMgaW50byBhIHNpbmdsZSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBhbGwgb2YgdGhlIGlucHV0CiAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLgogICAqCiAgICogQHBhcmFtIHtBcnJheS48UHJvbWlzZT58T2JqZWN0LjxQcm9taXNlPn0gcHJvbWlzZXMgQW4gYXJyYXkgb3IgaGFzaCBvZiBwcm9taXNlcy4KICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5L2hhc2ggb2YgdmFsdWVzLAogICAqICAgZWFjaCB2YWx1ZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9taXNlIGF0IHRoZSBzYW1lIGluZGV4L2tleSBpbiB0aGUgYHByb21pc2VzYCBhcnJheS9oYXNoLgogICAqICAgSWYgYW55IG9mIHRoZSBwcm9taXNlcyBpcyByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLCB0aGlzIHJlc3VsdGluZyBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQKICAgKiAgIHdpdGggdGhlIHNhbWUgcmVqZWN0aW9uIHZhbHVlLgogICAqLwogIGZ1bmN0aW9uIGFsbChwcm9taXNlcykgewogICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKSwKICAgICAgICBjb3VudGVyID0gMCwKICAgICAgICByZXN1bHRzID0gaXNBcnJheShwcm9taXNlcykgPyBbXSA6IHt9OwoKICAgIGZvckVhY2gocHJvbWlzZXMsIGZ1bmN0aW9uKHByb21pc2UsIGtleSkgewogICAgICBjb3VudGVyKys7CiAgICAgIHJlZihwcm9taXNlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKHJlc3VsdHMuaGFzT3duUHJvcGVydHkoa2V5KSkgcmV0dXJuOwogICAgICAgIHJlc3VsdHNba2V5XSA9IHZhbHVlOwogICAgICAgIGlmICghKC0tY291bnRlcikpIGRlZmVycmVkLnJlc29sdmUocmVzdWx0cyk7CiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgewogICAgICAgIGlmIChyZXN1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybjsKICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVhc29uKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBpZiAoY291bnRlciA9PT0gMCkgewogICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpOwogICAgfQoKICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlOwogIH0KCiAgcmV0dXJuIHsKICAgIGRlZmVyOiBkZWZlciwKICAgIHJlamVjdDogcmVqZWN0LAogICAgd2hlbjogd2hlbiwKICAgIGFsbDogYWxsCiAgfTsKfQoKLyoqCiAqIERFU0lHTiBOT1RFUwogKgogKiBUaGUgZGVzaWduIGRlY2lzaW9ucyBiZWhpbmQgdGhlIHNjb3BlIGFyZSBoZWF2aWx5IGZhdm9yZWQgZm9yIHNwZWVkIGFuZCBtZW1vcnkgY29uc3VtcHRpb24uCiAqCiAqIFRoZSB0eXBpY2FsIHVzZSBvZiBzY29wZSBpcyB0byB3YXRjaCB0aGUgZXhwcmVzc2lvbnMsIHdoaWNoIG1vc3Qgb2YgdGhlIHRpbWUgcmV0dXJuIHRoZSBzYW1lCiAqIHZhbHVlIGFzIGxhc3QgdGltZSBzbyB3ZSBvcHRpbWl6ZSB0aGUgb3BlcmF0aW9uLgogKgogKiBDbG9zdXJlcyBjb25zdHJ1Y3Rpb24gaXMgZXhwZW5zaXZlIGluIHRlcm1zIG9mIHNwZWVkIGFzIHdlbGwgYXMgbWVtb3J5OgogKiAgIC0gTm8gY2xvc3VyZXMsIGluc3RlYWQgdXNlIHByb3RvdHlwaWNhbCBpbmhlcml0YW5jZSBmb3IgQVBJCiAqICAgLSBJbnRlcm5hbCBzdGF0ZSBuZWVkcyB0byBiZSBzdG9yZWQgb24gc2NvcGUgZGlyZWN0bHksIHdoaWNoIG1lYW5zIHRoYXQgcHJpdmF0ZSBzdGF0ZSBpcwogKiAgICAgZXhwb3NlZCBhcyAkJF9fX18gcHJvcGVydGllcwogKgogKiBMb29wIG9wZXJhdGlvbnMgYXJlIG9wdGltaXplZCBieSB1c2luZyB3aGlsZShjb3VudC0tKSB7IC4uLiB9CiAqICAgLSB0aGlzIG1lYW5zIHRoYXQgaW4gb3JkZXIgdG8ga2VlcCB0aGUgc2FtZSBvcmRlciBvZiBleGVjdXRpb24gYXMgYWRkaXRpb24gd2UgaGF2ZSB0byBhZGQKICogICAgIGl0ZW1zIHRvIHRoZSBhcnJheSBhdCB0aGUgYmVnaW5uaW5nIChzaGlmdCkgaW5zdGVhZCBvZiBhdCB0aGUgZW5kIChwdXNoKQogKgogKiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgYW5kIHJlbW92ZWQgb2Z0ZW4KICogICAtIFVzaW5nIGFuIGFycmF5IHdvdWxkIGJlIHNsb3cgc2luY2UgaW5zZXJ0cyBpbiBtaWRkbGUgYXJlIGV4cGVuc2l2ZSBzbyB3ZSB1c2UgbGlua2VkIGxpc3QKICoKICogVGhlcmUgYXJlIGZldyB3YXRjaGVzIHRoZW4gYSBsb3Qgb2Ygb2JzZXJ2ZXJzLiBUaGlzIGlzIHdoeSB5b3UgZG9uJ3Qgd2FudCB0aGUgb2JzZXJ2ZXIgdG8gYmUKICogaW1wbGVtZW50ZWQgaW4gdGhlIHNhbWUgd2F5IGFzIHdhdGNoLiBXYXRjaCByZXF1aXJlcyByZXR1cm4gb2YgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24gd2hpY2gKICogYXJlIGV4cGVuc2l2ZSB0byBjb25zdHJ1Y3QuCiAqLwoKCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRyb290U2NvcGVQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogUHJvdmlkZXIgZm9yIHRoZSAkcm9vdFNjb3BlIHNlcnZpY2UuCiAqLwoKLyoqCiAqIEBuZ2RvYyBmdW5jdGlvbgogKiBAbmFtZSBuZy4kcm9vdFNjb3BlUHJvdmlkZXIjZGlnZXN0VHRsCiAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlUHJvdmlkZXIKICogQGRlc2NyaXB0aW9uCiAqCiAqIFNldHMgdGhlIG51bWJlciBvZiBgJGRpZ2VzdGAgaXRlcmF0aW9ucyB0aGUgc2NvcGUgc2hvdWxkIGF0dGVtcHQgdG8gZXhlY3V0ZSBiZWZvcmUgZ2l2aW5nIHVwIGFuZAogKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS4KICoKICogVGhlIGN1cnJlbnQgZGVmYXVsdCBpcyAxMCBpdGVyYXRpb25zLgogKgogKiBJbiBjb21wbGV4IGFwcGxpY2F0aW9ucyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIGRlcGVuZGVuY2llcyBiZXR3ZWVuIGAkd2F0Y2hgcyB3aWxsIHJlc3VsdCBpbgogKiBzZXZlcmFsIGRpZ2VzdCBpdGVyYXRpb25zLiBIb3dldmVyIGlmIGFuIGFwcGxpY2F0aW9uIG5lZWRzIG1vcmUgdGhhbiB0aGUgZGVmYXVsdCAxMCBkaWdlc3QKICogaXRlcmF0aW9ucyBmb3IgaXRzIG1vZGVsIHRvIHN0YWJpbGl6ZSB0aGVuIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgd2hhdCBpcyBjYXVzaW5nIHRoZSBtb2RlbCB0bwogKiBjb250aW51b3VzbHkgY2hhbmdlIGR1cmluZyB0aGUgZGlnZXN0LgogKgogKiBJbmNyZWFzaW5nIHRoZSBUVEwgY291bGQgaGF2ZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMsIHNvIHlvdSBzaG91bGQgbm90IGNoYW5nZSBpdCB3aXRob3V0CiAqIHByb3BlciBqdXN0aWZpY2F0aW9uLgogKgogKiBAcGFyYW0ge251bWJlcn0gbGltaXQgVGhlIG51bWJlciBvZiBkaWdlc3QgaXRlcmF0aW9ucy4KICovCgoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJHJvb3RTY29wZQogKiBAZGVzY3JpcHRpb24KICoKICogRXZlcnkgYXBwbGljYXRpb24gaGFzIGEgc2luZ2xlIHJvb3Qge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LgogKiBBbGwgb3RoZXIgc2NvcGVzIGFyZSBkZXNjZW5kYW50IHNjb3BlcyBvZiB0aGUgcm9vdCBzY29wZS4gU2NvcGVzIHByb3ZpZGUgc2VwYXJhdGlvbgogKiBiZXR3ZWVuIHRoZSBtb2RlbCBhbmQgdGhlIHZpZXcsIHZpYSBhIG1lY2hhbmlzbSBmb3Igd2F0Y2hpbmcgdGhlIG1vZGVsIGZvciBjaGFuZ2VzLgogKiBUaGV5IGFsc28gcHJvdmlkZSBhbiBldmVudCBlbWlzc2lvbi9icm9hZGNhc3QgYW5kIHN1YnNjcmlwdGlvbiBmYWNpbGl0eS4gU2VlIHRoZQogKiB7QGxpbmsgZ3VpZGUvc2NvcGUgZGV2ZWxvcGVyIGd1aWRlIG9uIHNjb3Blc30uCiAqLwpmdW5jdGlvbiAkUm9vdFNjb3BlUHJvdmlkZXIoKXsKICB2YXIgVFRMID0gMTA7CiAgdmFyICRyb290U2NvcGVNaW5FcnIgPSBtaW5FcnIoJyRyb290U2NvcGUnKTsKICB2YXIgbGFzdERpcnR5V2F0Y2ggPSBudWxsOwoKICB0aGlzLmRpZ2VzdFR0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICBUVEwgPSB2YWx1ZTsKICAgIH0KICAgIHJldHVybiBUVEw7CiAgfTsKCiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHBhcnNlJywgJyRicm93c2VyJywKICAgICAgZnVuY3Rpb24oICRpbmplY3RvciwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkcGFyc2UsICAgJGJyb3dzZXIpIHsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogQSByb290IHNjb3BlIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlICRyb290U2NvcGV9IGtleSBmcm9tIHRoZQogICAgICoge0BsaW5rIEFVVE8uJGluamVjdG9yICRpbmplY3Rvcn0uIENoaWxkIHNjb3BlcyBhcmUgY3JlYXRlZCB1c2luZyB0aGUKICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlbgogICAgICogY29tcGlsZWQgSFRNTCB0ZW1wbGF0ZSBpcyBleGVjdXRlZC4pCiAgICAgKgogICAgICogSGVyZSBpcyBhIHNpbXBsZSBzY29wZSBzbmlwcGV0IHRvIHNob3cgaG93IHlvdSBjYW4gaW50ZXJhY3Qgd2l0aCB0aGUgc2NvcGUuCiAgICAgKiA8cHJlPgogICAgICogPGZpbGUgc3JjPSIuL3Rlc3Qvbmcvcm9vdFNjb3BlU3BlYy5qcyIgdGFnPSJkb2NzMSIgLz4KICAgICAqIDwvcHJlPgogICAgICoKICAgICAqICMgSW5oZXJpdGFuY2UKICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOgogICAgICogPHByZT4KICAgICAgICAgdmFyIHBhcmVudCA9ICRyb290U2NvcGU7CiAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7CgogICAgICAgICBwYXJlbnQuc2FsdXRhdGlvbiA9ICJIZWxsbyI7CiAgICAgICAgIGNoaWxkLm5hbWUgPSAiV29ybGQiOwogICAgICAgICBleHBlY3QoY2hpbGQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTsKCiAgICAgICAgIGNoaWxkLnNhbHV0YXRpb24gPSAiV2VsY29tZSI7CiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdXZWxjb21lJyk7CiAgICAgICAgIGV4cGVjdChwYXJlbnQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTsKICAgICAqIDwvcHJlPgogICAgICoKICAgICAqCiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbigpPj19IHByb3ZpZGVycyBNYXAgb2Ygc2VydmljZSBmYWN0b3J5IHdoaWNoIG5lZWQgdG8gYmUKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgZm9yIHRoZSBjdXJyZW50IHNjb3BlLiBEZWZhdWx0cyB0byB7QGxpbmsgbmd9LgogICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj49fSBpbnN0YW5jZUNhY2hlIFByb3ZpZGVzIHByZS1pbnN0YW50aWF0ZWQgc2VydmljZXMgd2hpY2ggc2hvdWxkCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZC9vdmVycmlkZSBzZXJ2aWNlcyBwcm92aWRlZCBieSBgcHJvdmlkZXJzYC4gVGhpcyBpcyBoYW5keQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHVuaXQtdGVzdGluZyBhbmQgaGF2aW5nIHRoZSBuZWVkIHRvIG92ZXJyaWRlIGEgZGVmYXVsdAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLgogICAgICogQHJldHVybnMge09iamVjdH0gTmV3bHkgY3JlYXRlZCBzY29wZS4KICAgICAqCiAgICAgKi8KICAgIGZ1bmN0aW9uIFNjb3BlKCkgewogICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTsKICAgICAgdGhpcy4kJHBoYXNlID0gdGhpcy4kcGFyZW50ID0gdGhpcy4kJHdhdGNoZXJzID0KICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nID0KICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsOwogICAgICB0aGlzWyd0aGlzJ10gPSB0aGlzLiRyb290ID0gIHRoaXM7CiAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSBmYWxzZTsKICAgICAgdGhpcy4kJGFzeW5jUXVldWUgPSBbXTsKICAgICAgdGhpcy4kJHBvc3REaWdlc3RRdWV1ZSA9IFtdOwogICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307CiAgICAgIHRoaXMuJCRsaXN0ZW5lckNvdW50ID0ge307CiAgICAgIHRoaXMuJCRpc29sYXRlQmluZGluZ3MgPSB7fTsKICAgIH0KCiAgICAvKioKICAgICAqIEBuZ2RvYyBwcm9wZXJ0eQogICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkaWQKICAgICAqIEBwcm9wZXJ0eU9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFVuaXF1ZSBzY29wZSBJRCAobW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIGFscGhhbnVtZXJpYyBzZXF1ZW5jZSkgdXNlZnVsIGZvcgogICAgICogICBkZWJ1Z2dpbmcuCiAgICAgKi8KCgogICAgU2NvcGUucHJvdG90eXBlID0gewogICAgICBjb25zdHJ1Y3RvcjogU2NvcGUsCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkbmV3CiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogQ3JlYXRlcyBhIG5ldyBjaGlsZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uCiAgICAgICAqCiAgICAgICAqIFRoZSBwYXJlbnQgc2NvcGUgd2lsbCBwcm9wYWdhdGUgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJGRpZ2VzdCAkZGlnZXN0KCl9IGFuZAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRkaWdlc3QgJGRpZ2VzdCgpfSBldmVudHMuIFRoZSBzY29wZSBjYW4gYmUgcmVtb3ZlZCBmcm9tIHRoZQogICAgICAgKiBzY29wZSBoaWVyYXJjaHkgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kZGVzdHJveSAkZGVzdHJveSgpfS4KICAgICAgICoKICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kZGVzdHJveSAkZGVzdHJveSgpfSBtdXN0IGJlIGNhbGxlZCBvbiBhIHNjb3BlIHdoZW4gaXQgaXMKICAgICAgICogZGVzaXJlZCBmb3IgdGhlIHNjb3BlIGFuZCBpdHMgY2hpbGQgc2NvcGVzIHRvIGJlIHBlcm1hbmVudGx5IGRldGFjaGVkIGZyb20gdGhlIHBhcmVudCBhbmQKICAgICAgICogdGh1cyBzdG9wIHBhcnRpY2lwYXRpbmcgaW4gbW9kZWwgY2hhbmdlIGRldGVjdGlvbiBhbmQgbGlzdGVuZXIgbm90aWZpY2F0aW9uIGJ5IGludm9raW5nLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzb2xhdGUgSWYgdHJ1ZSwgdGhlbiB0aGUgc2NvcGUgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIHRoZQogICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy4KICAgICAgICogICAgICAgICBXaGVuIGNyZWF0aW5nIHdpZGdldHMsIGl0IGlzIHVzZWZ1bCBmb3IgdGhlIHdpZGdldCB0byBub3QgYWNjaWRlbnRhbGx5IHJlYWQgcGFyZW50CiAgICAgICAqICAgICAgICAgc3RhdGUuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXdseSBjcmVhdGVkIGNoaWxkIHNjb3BlLgogICAgICAgKgogICAgICAgKi8KICAgICAgJG5ldzogZnVuY3Rpb24oaXNvbGF0ZSkgewogICAgICAgIHZhciBDaGlsZFNjb3BlLAogICAgICAgICAgICBjaGlsZDsKCiAgICAgICAgaWYgKGlzb2xhdGUpIHsKICAgICAgICAgIGNoaWxkID0gbmV3IFNjb3BlKCk7CiAgICAgICAgICBjaGlsZC4kcm9vdCA9IHRoaXMuJHJvb3Q7CiAgICAgICAgICAvLyBlbnN1cmUgdGhhdCB0aGVyZSBpcyBqdXN0IG9uZSBhc3luYyBxdWV1ZSBwZXIgJHJvb3RTY29wZSBhbmQgaXRzIGNoaWxkcmVuCiAgICAgICAgICBjaGlsZC4kJGFzeW5jUXVldWUgPSB0aGlzLiQkYXN5bmNRdWV1ZTsKICAgICAgICAgIGNoaWxkLiQkcG9zdERpZ2VzdFF1ZXVlID0gdGhpcy4kJHBvc3REaWdlc3RRdWV1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgQ2hpbGRTY29wZSA9IGZ1bmN0aW9uKCkge307IC8vIHNob3VsZCBiZSBhbm9ueW1vdXM7IFRoaXMgaXMgc28gdGhhdCB3aGVuIHRoZSBtaW5pZmllciBtdW5nZXMKICAgICAgICAgICAgLy8gdGhlIG5hbWUgaXQgZG9lcyBub3QgYmVjb21lIHJhbmRvbSBzZXQgb2YgY2hhcnMuIFRoaXMgd2lsbCB0aGVuIHNob3cgdXAgYXMgY2xhc3MKICAgICAgICAgICAgLy8gbmFtZSBpbiB0aGUgd2ViIGluc3BlY3Rvci4KICAgICAgICAgIENoaWxkU2NvcGUucHJvdG90eXBlID0gdGhpczsKICAgICAgICAgIGNoaWxkID0gbmV3IENoaWxkU2NvcGUoKTsKICAgICAgICAgIGNoaWxkLiRpZCA9IG5leHRVaWQoKTsKICAgICAgICB9CiAgICAgICAgY2hpbGRbJ3RoaXMnXSA9IGNoaWxkOwogICAgICAgIGNoaWxkLiQkbGlzdGVuZXJzID0ge307CiAgICAgICAgY2hpbGQuJCRsaXN0ZW5lckNvdW50ID0ge307CiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHRoaXM7CiAgICAgICAgY2hpbGQuJCR3YXRjaGVycyA9IGNoaWxkLiQkbmV4dFNpYmxpbmcgPSBjaGlsZC4kJGNoaWxkSGVhZCA9IGNoaWxkLiQkY2hpbGRUYWlsID0gbnVsbDsKICAgICAgICBjaGlsZC4kJHByZXZTaWJsaW5nID0gdGhpcy4kJGNoaWxkVGFpbDsKICAgICAgICBpZiAodGhpcy4kJGNoaWxkSGVhZCkgewogICAgICAgICAgdGhpcy4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7CiAgICAgICAgICB0aGlzLiQkY2hpbGRUYWlsID0gY2hpbGQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJCRjaGlsZEhlYWQgPSB0aGlzLiQkY2hpbGRUYWlsID0gY2hpbGQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjaGlsZDsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2gKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBSZWdpc3RlcnMgYSBgbGlzdGVuZXJgIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLgogICAgICAgKgogICAgICAgKiAtIFRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBjYWxsZWQgb24gZXZlcnkgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRkaWdlc3QKICAgICAgICogICAkZGlnZXN0KCl9IGFuZCBzaG91bGQgcmV0dXJuIHRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgd2F0Y2hlZC4gKFNpbmNlCiAgICAgICAqICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kZGlnZXN0ICRkaWdlc3QoKX0gcmVydW5zIHdoZW4gaXQgZGV0ZWN0cyBjaGFuZ2VzIHRoZQogICAgICAgKiAgIGB3YXRjaEV4cHJlc3Npb25gIGNhbiBleGVjdXRlIG11bHRpcGxlIHRpbWVzIHBlcgogICAgICAgKiAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJGRpZ2VzdCAkZGlnZXN0KCl9IGFuZCBzaG91bGQgYmUgaWRlbXBvdGVudC4pCiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIG9ubHkgd2hlbiB0aGUgdmFsdWUgZnJvbSB0aGUgY3VycmVudCBgd2F0Y2hFeHByZXNzaW9uYCBhbmQgdGhlCiAgICAgICAqICAgcHJldmlvdXMgY2FsbCB0byBgd2F0Y2hFeHByZXNzaW9uYCBhcmUgbm90IGVxdWFsICh3aXRoIHRoZSBleGNlcHRpb24gb2YgdGhlIGluaXRpYWwgcnVuLAogICAgICAgKiAgIHNlZSBiZWxvdykuIFRoZSBpbmVxdWFsaXR5IGlzIGRldGVybWluZWQgYWNjb3JkaW5nIHRvCiAgICAgICAqICAge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBmdW5jdGlvbi4gVG8gc2F2ZSB0aGUgdmFsdWUgb2YgdGhlIG9iamVjdCBmb3IgbGF0ZXIgY29tcGFyaXNvbiwKICAgICAgICogICB0aGUge0BsaW5rIGFuZ3VsYXIuY29weX0gZnVuY3Rpb24gaXMgdXNlZC4gSXQgYWxzbyBtZWFucyB0aGF0IHdhdGNoaW5nIGNvbXBsZXggb3B0aW9ucwogICAgICAgKiAgIHdpbGwgaGF2ZSBhZHZlcnNlIG1lbW9yeSBhbmQgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLgogICAgICAgKiAtIFRoZSB3YXRjaCBgbGlzdGVuZXJgIG1heSBjaGFuZ2UgdGhlIG1vZGVsLCB3aGljaCBtYXkgdHJpZ2dlciBvdGhlciBgbGlzdGVuZXJgcyB0byBmaXJlLgogICAgICAgKiAgIFRoaXMgaXMgYWNoaWV2ZWQgYnkgcmVydW5uaW5nIHRoZSB3YXRjaGVycyB1bnRpbCBubyBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gVGhlIHJlcnVuCiAgICAgICAqICAgaXRlcmF0aW9uIGxpbWl0IGlzIDEwIHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcCBkZWFkbG9jay4KICAgICAgICoKICAgICAgICoKICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kZGlnZXN0ICRkaWdlc3R9IGlzIGNhbGxlZCwKICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGggbm8gYGxpc3RlbmVyYC4gKFNpbmNlIGB3YXRjaEV4cHJlc3Npb25gCiAgICAgICAqIGNhbiBleGVjdXRlIG11bHRpcGxlIHRpbWVzIHBlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUgd2hlbiBhCiAgICAgICAqIGNoYW5nZSBpcyBkZXRlY3RlZCwgYmUgcHJlcGFyZWQgZm9yIG11bHRpcGxlIGNhbGxzIHRvIHlvdXIgbGlzdGVuZXIuKQogICAgICAgKgogICAgICAgKiBBZnRlciBhIHdhdGNoZXIgaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBzY29wZSwgdGhlIGBsaXN0ZW5lcmAgZm4gaXMgY2FsbGVkIGFzeW5jaHJvbm91c2x5CiAgICAgICAqICh2aWEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kZXZhbEFzeW5jICRldmFsQXN5bmN9KSB0byBpbml0aWFsaXplIHRoZQogICAgICAgKiB3YXRjaGVyLiBJbiByYXJlIGNhc2VzLCB0aGlzIGlzIHVuZGVzaXJhYmxlIGJlY2F1c2UgdGhlIGxpc3RlbmVyIGlzIGNhbGxlZCB3aGVuIHRoZSByZXN1bHQKICAgICAgICogb2YgYHdhdGNoRXhwcmVzc2lvbmAgZGlkbid0IGNoYW5nZS4gVG8gZGV0ZWN0IHRoaXMgc2NlbmFyaW8gd2l0aGluIHRoZSBgbGlzdGVuZXJgIGZuLCB5b3UKICAgICAgICogY2FuIGNvbXBhcmUgdGhlIGBuZXdWYWxgIGFuZCBgb2xkVmFsYC4gSWYgdGhlc2UgdHdvIHZhbHVlcyBhcmUgaWRlbnRpY2FsIChgPT09YCkgdGhlbiB0aGUKICAgICAgICogbGlzdGVuZXIgd2FzIGNhbGxlZCBkdWUgdG8gaW5pdGlhbGl6YXRpb24uCiAgICAgICAqCiAgICAgICAqIFRoZSBleGFtcGxlIGJlbG93IGNvbnRhaW5zIGFuIGlsbHVzdHJhdGlvbiBvZiB1c2luZyBhIGZ1bmN0aW9uIGFzIHlvdXIgJHdhdGNoIGxpc3RlbmVyCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiA8cHJlPgogICAgICAgICAgIC8vIGxldCdzIGFzc3VtZSB0aGF0IHNjb3BlIHdhcyBkZXBlbmRlbmN5IGluamVjdGVkIGFzIHRoZSAkcm9vdFNjb3BlCiAgICAgICAgICAgdmFyIHNjb3BlID0gJHJvb3RTY29wZTsKICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJzsKICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDsKCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7CiAgICAgICAgICAgfSk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CgogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICAvLyBubyB2YXJpYWJsZSBjaGFuZ2UKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTsKCiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJzsKICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7CgoKCiAgICAgICAgICAgLy8gVXNpbmcgYSBsaXN0ZW5lciBmdW5jdGlvbgogICAgICAgICAgIHZhciBmb29kOwogICAgICAgICAgIHNjb3BlLmZvb2RDb3VudGVyID0gMDsKICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7CiAgICAgICAgICAgc2NvcGUuJHdhdGNoKAogICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgbGlzdGVuZXIgZnVuY3Rpb24KICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gZm9vZDsgfSwKICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGNoYW5nZSBoYW5kbGVyCiAgICAgICAgICAgICBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsKICAgICAgICAgICAgICAgaWYgKCBuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgKSB7CiAgICAgICAgICAgICAgICAgLy8gT25seSBpbmNyZW1lbnQgdGhlIGNvdW50ZXIgaWYgdGhlIHZhbHVlIGNoYW5nZWQKICAgICAgICAgICAgICAgICBzY29wZS5mb29kQ291bnRlciA9IHNjb3BlLmZvb2RDb3VudGVyICsgMTsKICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfQogICAgICAgICAgICk7CiAgICAgICAgICAgLy8gTm8gZGlnZXN0IGhhcyBiZWVuIHJ1biBzbyB0aGUgY291bnRlciB3aWxsIGJlIHplcm8KICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7CgogICAgICAgICAgIC8vIFJ1biB0aGUgZGlnZXN0IGJ1dCBzaW5jZSBmb29kIGhhcyBub3QgY2hhbmdlZCBjb3VudCB3aWxsIHN0aWxsIGJlIHplcm8KICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApOwoKICAgICAgICAgICAvLyBVcGRhdGUgZm9vZCBhbmQgcnVuIGRpZ2VzdC4gIE5vdyB0aGUgY291bnRlciB3aWxsIGluY3JlbWVudAogICAgICAgICAgIGZvb2QgPSAnY2hlZXNlYnVyZ2VyJzsKICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDEpOwoKICAgICAgICogPC9wcmU+CiAgICAgICAqCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7KGZ1bmN0aW9uKCl8c3RyaW5nKX0gd2F0Y2hFeHByZXNzaW9uIEV4cHJlc3Npb24gdGhhdCBpcyBldmFsdWF0ZWQgb24gZWFjaAogICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEEgY2hhbmdlIGluIHRoZSByZXR1cm4gdmFsdWUgdHJpZ2dlcnMKICAgICAgICogICAgYSBjYWxsIHRvIHRoZSBgbGlzdGVuZXJgLgogICAgICAgKgogICAgICAgKiAgICAtIGBzdHJpbmdgOiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0KICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogY2FsbGVkIHdpdGggY3VycmVudCBgc2NvcGVgIGFzIGEgcGFyYW1ldGVyLgogICAgICAgKiBAcGFyYW0geyhmdW5jdGlvbigpfHN0cmluZyk9fSBsaXN0ZW5lciBDYWxsYmFjayBjYWxsZWQgd2hlbmV2ZXIgdGhlIHJldHVybiB2YWx1ZSBvZgogICAgICAgKiAgIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLgogICAgICAgKgogICAgICAgKiAgICAtIGBzdHJpbmdgOiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0KICAgICAgICogICAgLSBgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlLCBzY29wZSlgOiBjYWxsZWQgd2l0aCBjdXJyZW50IGFuZCBwcmV2aW91cyB2YWx1ZXMgYXMKICAgICAgICogICAgICBwYXJhbWV0ZXJzLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvYmplY3RFcXVhbGl0eSBDb21wYXJlIG9iamVjdCBmb3IgZXF1YWxpdHkgcmF0aGVyIHRoYW4gZm9yIHJlZmVyZW5jZS4KICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4KICAgICAgICovCiAgICAgICR3YXRjaDogZnVuY3Rpb24od2F0Y2hFeHAsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSkgewogICAgICAgIHZhciBzY29wZSA9IHRoaXMsCiAgICAgICAgICAgIGdldCA9IGNvbXBpbGVUb0ZuKHdhdGNoRXhwLCAnd2F0Y2gnKSwKICAgICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzLAogICAgICAgICAgICB3YXRjaGVyID0gewogICAgICAgICAgICAgIGZuOiBsaXN0ZW5lciwKICAgICAgICAgICAgICBsYXN0OiBpbml0V2F0Y2hWYWwsCiAgICAgICAgICAgICAgZ2V0OiBnZXQsCiAgICAgICAgICAgICAgZXhwOiB3YXRjaEV4cCwKICAgICAgICAgICAgICBlcTogISFvYmplY3RFcXVhbGl0eQogICAgICAgICAgICB9OwoKICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7CgogICAgICAgIC8vIGluIHRoZSBjYXNlIHVzZXIgcGFzcyBzdHJpbmcsIHdlIG5lZWQgdG8gY29tcGlsZSBpdCwgZG8gd2UgcmVhbGx5IG5lZWQgdGhpcyA/CiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkgewogICAgICAgICAgdmFyIGxpc3RlbkZuID0gY29tcGlsZVRvRm4obGlzdGVuZXIgfHwgbm9vcCwgJ2xpc3RlbmVyJyk7CiAgICAgICAgICB3YXRjaGVyLmZuID0gZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKSB7bGlzdGVuRm4oc2NvcGUpO307CiAgICAgICAgfQoKICAgICAgICBpZiAodHlwZW9mIHdhdGNoRXhwID09ICdzdHJpbmcnICYmIGdldC5jb25zdGFudCkgewogICAgICAgICAgdmFyIG9yaWdpbmFsRm4gPSB3YXRjaGVyLmZuOwogICAgICAgICAgd2F0Y2hlci5mbiA9IGZ1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsLCBzY29wZSkgewogICAgICAgICAgICBvcmlnaW5hbEZuLmNhbGwodGhpcywgbmV3VmFsLCBvbGRWYWwsIHNjb3BlKTsKICAgICAgICAgICAgYXJyYXlSZW1vdmUoYXJyYXksIHdhdGNoZXIpOwogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGlmICghYXJyYXkpIHsKICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyA9IFtdOwogICAgICAgIH0KICAgICAgICAvLyB3ZSB1c2UgdW5zaGlmdCBzaW5jZSB3ZSB1c2UgYSB3aGlsZSBsb29wIGluICRkaWdlc3QgZm9yIHNwZWVkLgogICAgICAgIC8vIHRoZSB3aGlsZSBsb29wIHJlYWRzIGluIHJldmVyc2Ugb3JkZXIuCiAgICAgICAgYXJyYXkudW5zaGlmdCh3YXRjaGVyKTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgYXJyYXlSZW1vdmUoYXJyYXksIHdhdGNoZXIpOwogICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsOwogICAgICAgIH07CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb24KICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBTaGFsbG93IHdhdGNoZXMgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZCBmaXJlcyB3aGVuZXZlciBhbnkgb2YgdGhlIHByb3BlcnRpZXMgY2hhbmdlCiAgICAgICAqIChmb3IgYXJyYXlzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIGFycmF5IGl0ZW1zOyBmb3Igb2JqZWN0IG1hcHMsIHRoaXMgaW1wbGllcyB3YXRjaGluZwogICAgICAgKiB0aGUgcHJvcGVydGllcykuIElmIGEgY2hhbmdlIGlzIGRldGVjdGVkLCB0aGUgYGxpc3RlbmVyYCBjYWxsYmFjayBpcyBmaXJlZC4KICAgICAgICoKICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnkKICAgICAgICogICBjYWxsIHRvICRkaWdlc3QoKSB0byBzZWUgaWYgYW55IGl0ZW1zIGhhdmUgYmVlbiBhZGRlZCwgcmVtb3ZlZCwgb3IgbW92ZWQuCiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueXRoaW5nIHdpdGhpbiB0aGUgYG9iamAgaGFzIGNoYW5nZWQuIEV4YW1wbGVzIGluY2x1ZGUKICAgICAgICogICBhZGRpbmcsIHJlbW92aW5nLCBhbmQgbW92aW5nIGl0ZW1zIGJlbG9uZ2luZyB0byBhbiBvYmplY3Qgb3IgYXJyYXkuCiAgICAgICAqCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiA8cHJlPgogICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydpZ29yJywgJ21hdGlhcycsICdtaXNrbycsICdqYW1lcyddOwogICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7CgogICAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ25hbWVzJywgZnVuY3Rpb24obmV3TmFtZXMsIG9sZE5hbWVzKSB7CiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTsKICAgICAgICAgICRzY29wZS4kZGlnZXN0KCk7CgogICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzCiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTsKCiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7CiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpOwoKICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZQogICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoMyk7CiAgICAgICAqIDwvcHJlPgogICAgICAgKgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ3xGdW5jdGlvbihzY29wZSl9IG9iaiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uIFRoZQogICAgICAgKiAgICBleHByZXNzaW9uIHZhbHVlIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaAogICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEFueSBzaGFsbG93IGNoYW5nZSB3aXRoaW4gdGhlCiAgICAgICAqICAgIGNvbGxlY3Rpb24gd2lsbCB0cmlnZ2VyIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXdDb2xsZWN0aW9uLCBvbGRDb2xsZWN0aW9uLCBzY29wZSl9IGxpc3RlbmVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcwogICAgICAgKiAgICBmaXJlZCB3aXRoIGJvdGggdGhlIGBuZXdDb2xsZWN0aW9uYCBhbmQgYG9sZENvbGxlY3Rpb25gIGFzIHBhcmFtZXRlcnMuCiAgICAgICAqICAgIFRoZSBgbmV3Q29sbGVjdGlvbmAgb2JqZWN0IGlzIHRoZSBuZXdseSBtb2RpZmllZCBkYXRhIG9idGFpbmVkIGZyb20gdGhlIGBvYmpgIGV4cHJlc3Npb24KICAgICAgICogICAgYW5kIHRoZSBgb2xkQ29sbGVjdGlvbmAgb2JqZWN0IGlzIGEgY29weSBvZiB0aGUgZm9ybWVyIGNvbGxlY3Rpb24gZGF0YS4KICAgICAgICogICAgVGhlIGBzY29wZWAgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlLgogICAgICAgKgogICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4gV2hlbiB0aGUKICAgICAgICogICAgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLCB0aGUgaW50ZXJuYWwgd2F0Y2ggb3BlcmF0aW9uIGlzIHRlcm1pbmF0ZWQuCiAgICAgICAqLwogICAgICAkd2F0Y2hDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmosIGxpc3RlbmVyKSB7CiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgIHZhciBvbGRWYWx1ZTsKICAgICAgICB2YXIgbmV3VmFsdWU7CiAgICAgICAgdmFyIGNoYW5nZURldGVjdGVkID0gMDsKICAgICAgICB2YXIgb2JqR2V0dGVyID0gJHBhcnNlKG9iaik7CiAgICAgICAgdmFyIGludGVybmFsQXJyYXkgPSBbXTsKICAgICAgICB2YXIgaW50ZXJuYWxPYmplY3QgPSB7fTsKICAgICAgICB2YXIgb2xkTGVuZ3RoID0gMDsKCiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbldhdGNoKCkgewogICAgICAgICAgbmV3VmFsdWUgPSBvYmpHZXR0ZXIoc2VsZik7CiAgICAgICAgICB2YXIgbmV3TGVuZ3RoLCBrZXk7CgogICAgICAgICAgaWYgKCFpc09iamVjdChuZXdWYWx1ZSkpIHsKICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkgewogICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7CiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKzsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShuZXdWYWx1ZSkpIHsKICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbEFycmF5KSB7CiAgICAgICAgICAgICAgLy8gd2UgYXJlIHRyYW5zaXRpb25pbmcgZnJvbSBzb21ldGhpbmcgd2hpY2ggd2FzIG5vdCBhbiBhcnJheSBpbnRvIGFycmF5LgogICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxBcnJheTsKICAgICAgICAgICAgICBvbGRMZW5ndGggPSBvbGRWYWx1ZS5sZW5ndGggPSAwOwogICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5ld0xlbmd0aCA9IG5ld1ZhbHVlLmxlbmd0aDsKCiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkgewogICAgICAgICAgICAgIC8vIGlmIGxlbmd0aHMgZG8gbm90IG1hdGNoIHdlIG5lZWQgdG8gdHJpZ2dlciBjaGFuZ2Ugbm90aWZpY2F0aW9uCiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKzsKICAgICAgICAgICAgICBvbGRWYWx1ZS5sZW5ndGggPSBvbGRMZW5ndGggPSBuZXdMZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAob2xkVmFsdWVbaV0gIT09IG5ld1ZhbHVlW2ldKSB7CiAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrOwogICAgICAgICAgICAgICAgb2xkVmFsdWVbaV0gPSBuZXdWYWx1ZVtpXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxPYmplY3QpIHsKICAgICAgICAgICAgICAvLyB3ZSBhcmUgdHJhbnNpdGlvbmluZyBmcm9tIHNvbWV0aGluZyB3aGljaCB3YXMgbm90IGFuIG9iamVjdCBpbnRvIG9iamVjdC4KICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGludGVybmFsT2JqZWN0ID0ge307CiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gMDsKICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGNvcHkgdGhlIGl0ZW1zIHRvIG9sZFZhbHVlIGFuZCBsb29rIGZvciBjaGFuZ2VzLgogICAgICAgICAgICBuZXdMZW5ndGggPSAwOwogICAgICAgICAgICBmb3IgKGtleSBpbiBuZXdWYWx1ZSkgewogICAgICAgICAgICAgIGlmIChuZXdWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICBuZXdMZW5ndGgrKzsKICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZVtrZXldICE9PSBuZXdWYWx1ZVtrZXldKSB7CiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKzsKICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZVtrZXldID0gbmV3VmFsdWVba2V5XTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoKys7CiAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdWYWx1ZVtrZXldOwogICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7CiAgICAgICAgICAgICAgLy8gd2UgdXNlZCB0byBoYXZlIG1vcmUga2V5cywgbmVlZCB0byBmaW5kIHRoZW0gYW5kIGRlc3Ryb3kgdGhlbS4KICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrOwogICAgICAgICAgICAgIGZvcihrZXkgaW4gb2xkVmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFuZXdWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aC0tOwogICAgICAgICAgICAgICAgICBkZWxldGUgb2xkVmFsdWVba2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBjaGFuZ2VEZXRlY3RlZDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uICR3YXRjaENvbGxlY3Rpb25BY3Rpb24oKSB7CiAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZSwgb2xkVmFsdWUsIHNlbGYpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRoaXMuJHdhdGNoKCR3YXRjaENvbGxlY3Rpb25XYXRjaCwgJHdhdGNoQ29sbGVjdGlvbkFjdGlvbik7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdAogICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZS5TY29wZQogICAgICAgKiBAZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFByb2Nlc3NlcyBhbGwgb2YgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJHdhdGNoIHdhdGNoZXJzfSBvZiB0aGUgY3VycmVudCBzY29wZSBhbmQKICAgICAgICogaXRzIGNoaWxkcmVuLiBCZWNhdXNlIGEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kd2F0Y2ggd2F0Y2hlcn0ncyBsaXN0ZW5lciBjYW4gY2hhbmdlCiAgICAgICAqIHRoZSBtb2RlbCwgdGhlIGAkZGlnZXN0KClgIGtlZXBzIGNhbGxpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJHdhdGNoIHdhdGNoZXJzfQogICAgICAgKiB1bnRpbCBubyBtb3JlIGxpc3RlbmVycyBhcmUgZmlyaW5nLiBUaGlzIG1lYW5zIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gZ2V0IGludG8gYW4gaW5maW5pdGUKICAgICAgICogbG9vcC4gVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGAnTWF4aW11bSBpdGVyYXRpb24gbGltaXQgZXhjZWVkZWQuJ2AgaWYgdGhlIG51bWJlciBvZgogICAgICAgKiBpdGVyYXRpb25zIGV4Y2VlZHMgMTAuCiAgICAgICAqCiAgICAgICAqIFVzdWFsbHksIHlvdSBkb24ndCBjYWxsIGAkZGlnZXN0KClgIGRpcmVjdGx5IGluCiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDb250cm9sbGVyIGNvbnRyb2xsZXJzfSBvciBpbgogICAgICAgKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNtZXRob2RzX2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4KICAgICAgICogSW5zdGVhZCwgeW91IHNob3VsZCBjYWxsIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJGFwcGx5ICRhcHBseSgpfSAodHlwaWNhbGx5IGZyb20gd2l0aGluCiAgICAgICAqIGEge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjbWV0aG9kc19kaXJlY3RpdmUgZGlyZWN0aXZlc30pLCB3aGljaCB3aWxsIGZvcmNlIGEgYCRkaWdlc3QoKWAuCiAgICAgICAqCiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIGAkZGlnZXN0KClgIGlzIGNhbGxlZCwKICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGgKICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kd2F0Y2ggJHdhdGNoKCl9IHdpdGggbm8gYGxpc3RlbmVyYC4KICAgICAgICoKICAgICAgICogSW4gdW5pdCB0ZXN0cywgeW91IG1heSBuZWVkIHRvIGNhbGwgYCRkaWdlc3QoKWAgdG8gc2ltdWxhdGUgdGhlIHNjb3BlIGxpZmUgY3ljbGUuCiAgICAgICAqCiAgICAgICAqICMgRXhhbXBsZQogICAgICAgKiA8cHJlPgogICAgICAgICAgIHZhciBzY29wZSA9IC4uLjsKICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJzsKICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDsKCiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7CiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7CiAgICAgICAgICAgfSk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7CgogICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTsKICAgICAgICAgICAvLyBubyB2YXJpYWJsZSBjaGFuZ2UKICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTsKCiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJzsKICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7CiAgICAgICAqIDwvcHJlPgogICAgICAgKgogICAgICAgKi8KICAgICAgJGRpZ2VzdDogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHdhdGNoLCB2YWx1ZSwgbGFzdCwKICAgICAgICAgICAgd2F0Y2hlcnMsCiAgICAgICAgICAgIGFzeW5jUXVldWUgPSB0aGlzLiQkYXN5bmNRdWV1ZSwKICAgICAgICAgICAgcG9zdERpZ2VzdFF1ZXVlID0gdGhpcy4kJHBvc3REaWdlc3RRdWV1ZSwKICAgICAgICAgICAgbGVuZ3RoLAogICAgICAgICAgICBkaXJ0eSwgdHRsID0gVFRMLAogICAgICAgICAgICBuZXh0LCBjdXJyZW50LCB0YXJnZXQgPSB0aGlzLAogICAgICAgICAgICB3YXRjaExvZyA9IFtdLAogICAgICAgICAgICBsb2dJZHgsIGxvZ01zZywgYXN5bmNUYXNrOwoKICAgICAgICBiZWdpblBoYXNlKCckZGlnZXN0Jyk7CgogICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDsKCiAgICAgICAgZG8geyAvLyAid2hpbGUgZGlydHkiIGxvb3AKICAgICAgICAgIGRpcnR5ID0gZmFsc2U7CiAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0OwoKICAgICAgICAgIHdoaWxlKGFzeW5jUXVldWUubGVuZ3RoKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgYXN5bmNUYXNrID0gYXN5bmNRdWV1ZS5zaGlmdCgpOwogICAgICAgICAgICAgIGFzeW5jVGFzay5zY29wZS4kZXZhbChhc3luY1Rhc2suZXhwcmVzc2lvbik7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICBjbGVhclBoYXNlKCk7CiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDoKICAgICAgICAgIGRvIHsgLy8gInRyYXZlcnNlIHRoZSBzY29wZXMiIGxvb3AKICAgICAgICAgICAgaWYgKCh3YXRjaGVycyA9IGN1cnJlbnQuJCR3YXRjaGVycykpIHsKICAgICAgICAgICAgICAvLyBwcm9jZXNzIG91ciB3YXRjaGVzCiAgICAgICAgICAgICAgbGVuZ3RoID0gd2F0Y2hlcnMubGVuZ3RoOwogICAgICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1tsZW5ndGhdOwogICAgICAgICAgICAgICAgICAvLyBNb3N0IGNvbW1vbiB3YXRjaGVzIGFyZSBvbiBwcmltaXRpdmVzLCBpbiB3aGljaCBjYXNlIHdlIGNhbiBzaG9ydAogICAgICAgICAgICAgICAgICAvLyBjaXJjdWl0IGl0IHdpdGggPT09IG9wZXJhdG9yLCBvbmx5IHdoZW4gPT09IGZhaWxzIGRvIHdlIHVzZSAuZXF1YWxzCiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCkgewogICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgPSB3YXRjaC5nZXQoY3VycmVudCkpICE9PSAobGFzdCA9IHdhdGNoLmxhc3QpICYmCiAgICAgICAgICAgICAgICAgICAgICAgICEod2F0Y2guZXEKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZXF1YWxzKHZhbHVlLCBsYXN0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHR5cGVvZiBsYXN0ID09ICdudW1iZXInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBpc05hTih2YWx1ZSkgJiYgaXNOYU4obGFzdCkpKSkgewogICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSB3YXRjaDsKICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmxhc3QgPSB3YXRjaC5lcSA/IGNvcHkodmFsdWUpIDogdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICB3YXRjaC5mbih2YWx1ZSwgKChsYXN0ID09PSBpbml0V2F0Y2hWYWwpID8gdmFsdWUgOiBsYXN0KSwgY3VycmVudCk7CiAgICAgICAgICAgICAgICAgICAgICBpZiAodHRsIDwgNSkgewogICAgICAgICAgICAgICAgICAgICAgICBsb2dJZHggPSA0IC0gdHRsOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdhdGNoTG9nW2xvZ0lkeF0pIHdhdGNoTG9nW2xvZ0lkeF0gPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nTXNnID0gKGlzRnVuY3Rpb24od2F0Y2guZXhwKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2ZuOiAnICsgKHdhdGNoLmV4cC5uYW1lIHx8IHdhdGNoLmV4cC50b1N0cmluZygpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB3YXRjaC5leHA7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ01zZyArPSAnOyBuZXdWYWw6ICcgKyB0b0pzb24odmFsdWUpICsgJzsgb2xkVmFsOiAnICsgdG9Kc29uKGxhc3QpOwogICAgICAgICAgICAgICAgICAgICAgICB3YXRjaExvZ1tsb2dJZHhdLnB1c2gobG9nTXNnKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdhdGNoID09PSBsYXN0RGlydHlXYXRjaCkgewogICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG1vc3QgcmVjZW50bHkgZGlydHkgd2F0Y2hlciBpcyBub3cgY2xlYW4sIHNob3J0IGNpcmN1aXQgc2luY2UgdGhlIHJlbWFpbmluZyB3YXRjaGVycwogICAgICAgICAgICAgICAgICAgICAgLy8gaGF2ZSBhbHJlYWR5IGJlZW4gdGVzdGVkLgogICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIHRyYXZlcnNlU2NvcGVzTG9vcDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgY2xlYXJQaGFzZSgpOwogICAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbAogICAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IQogICAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRicm9hZGNhc3QKICAgICAgICAgICAgaWYgKCEobmV4dCA9IChjdXJyZW50LiQkY2hpbGRIZWFkIHx8CiAgICAgICAgICAgICAgICAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkgewogICAgICAgICAgICAgIHdoaWxlKGN1cnJlbnQgIT09IHRhcmdldCAmJiAhKG5leHQgPSBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7CgogICAgICAgICAgLy8gYGJyZWFrIHRyYXZlcnNlU2NvcGVzTG9vcDtgIHRha2VzIHVzIHRvIGhlcmUKCiAgICAgICAgICBpZigoZGlydHkgfHwgYXN5bmNRdWV1ZS5sZW5ndGgpICYmICEodHRsLS0pKSB7CiAgICAgICAgICAgIGNsZWFyUGhhc2UoKTsKICAgICAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5mZGlnJywKICAgICAgICAgICAgICAgICd7MH0gJGRpZ2VzdCgpIGl0ZXJhdGlvbnMgcmVhY2hlZC4gQWJvcnRpbmchXG4nICsKICAgICAgICAgICAgICAgICdXYXRjaGVycyBmaXJlZCBpbiB0aGUgbGFzdCA1IGl0ZXJhdGlvbnM6IHsxfScsCiAgICAgICAgICAgICAgICBUVEwsIHRvSnNvbih3YXRjaExvZykpOwogICAgICAgICAgfQoKICAgICAgICB9IHdoaWxlIChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCk7CgogICAgICAgIGNsZWFyUGhhc2UoKTsKCiAgICAgICAgd2hpbGUocG9zdERpZ2VzdFF1ZXVlLmxlbmd0aCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLnNoaWZ0KCkoKTsKICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAoKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZXZlbnQKICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveQogICAgICAgKiBAZXZlbnRPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHNjb3BlIGJlaW5nIGRlc3Ryb3llZAogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogQnJvYWRjYXN0ZWQgd2hlbiBhIHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4gYXJlIGJlaW5nIGRlc3Ryb3llZC4KICAgICAgICoKICAgICAgICogTm90ZSB0aGF0LCBpbiBBbmd1bGFySlMsIHRoZXJlIGlzIGFsc28gYSBgJGRlc3Ryb3lgIGpRdWVyeSBldmVudCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8KICAgICAgICogY2xlYW4gdXAgRE9NIGJpbmRpbmdzIGJlZm9yZSBhbiBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLgogICAgICAgKi8KCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveQogICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZS5TY29wZQogICAgICAgKiBAZnVuY3Rpb24KICAgICAgICoKICAgICAgICogQGRlc2NyaXB0aW9uCiAgICAgICAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgc2NvcGUgKGFuZCBhbGwgb2YgaXRzIGNoaWxkcmVuKSBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuIFJlbW92YWwgaW1wbGllcwogICAgICAgKiB0aGF0IGNhbGxzIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJGRpZ2VzdCAkZGlnZXN0KCl9IHdpbGwgbm8gbG9uZ2VyCiAgICAgICAqIHByb3BhZ2F0ZSB0byB0aGUgY3VycmVudCBzY29wZSBhbmQgaXRzIGNoaWxkcmVuLiBSZW1vdmFsIGFsc28gaW1wbGllcyB0aGF0IHRoZSBjdXJyZW50CiAgICAgICAqIHNjb3BlIGlzIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uCiAgICAgICAqCiAgICAgICAqIFRoZSBgJGRlc3Ryb3koKWAgaXMgdXN1YWxseSB1c2VkIGJ5IGRpcmVjdGl2ZXMgc3VjaCBhcwogICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fSBmb3IgbWFuYWdpbmcgdGhlCiAgICAgICAqIHVucm9sbGluZyBvZiB0aGUgbG9vcC4KICAgICAgICoKICAgICAgICogSnVzdCBiZWZvcmUgYSBzY29wZSBpcyBkZXN0cm95ZWQsIGEgYCRkZXN0cm95YCBldmVudCBpcyBicm9hZGNhc3RlZCBvbiB0aGlzIHNjb3BlLgogICAgICAgKiBBcHBsaWNhdGlvbiBjb2RlIGNhbiByZWdpc3RlciBhIGAkZGVzdHJveWAgZXZlbnQgaGFuZGxlciB0aGF0IHdpbGwgZ2l2ZSBpdCBhIGNoYW5jZSB0bwogICAgICAgKiBwZXJmb3JtIGFueSBuZWNlc3NhcnkgY2xlYW51cC4KICAgICAgICoKICAgICAgICogTm90ZSB0aGF0LCBpbiBBbmd1bGFySlMsIHRoZXJlIGlzIGFsc28gYSBgJGRlc3Ryb3lgIGpRdWVyeSBldmVudCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8KICAgICAgICogY2xlYW4gdXAgRE9NIGJpbmRpbmdzIGJlZm9yZSBhbiBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLgogICAgICAgKi8KICAgICAgJGRlc3Ryb3k6IGZ1bmN0aW9uKCkgewogICAgICAgIC8vIHdlIGNhbid0IGRlc3Ryb3kgdGhlIHJvb3Qgc2NvcGUgb3IgYSBzY29wZSB0aGF0IGhhcyBiZWVuIGFscmVhZHkgZGVzdHJveWVkCiAgICAgICAgaWYgKHRoaXMuJCRkZXN0cm95ZWQpIHJldHVybjsKICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy4kcGFyZW50OwoKICAgICAgICB0aGlzLiRicm9hZGNhc3QoJyRkZXN0cm95Jyk7CiAgICAgICAgdGhpcy4kJGRlc3Ryb3llZCA9IHRydWU7CiAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUpIHJldHVybjsKCiAgICAgICAgZm9yRWFjaCh0aGlzLiQkbGlzdGVuZXJDb3VudCwgYmluZChudWxsLCBkZWNyZW1lbnRMaXN0ZW5lckNvdW50LCB0aGlzKSk7CgogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkcHJldlNpYmxpbmcpIHRoaXMuJCRwcmV2U2libGluZy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJG5leHRTaWJsaW5nOwogICAgICAgIGlmICh0aGlzLiQkbmV4dFNpYmxpbmcpIHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nOwoKICAgICAgICAvLyBUaGlzIGlzIGJvZ3VzIGNvZGUgdGhhdCB3b3JrcyBhcm91bmQgQ2hyb21lJ3MgR0MgbGVhawogICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTMxMyNpc3N1ZWNvbW1lbnQtMTAzNzg0NTEKICAgICAgICB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkY2hpbGRIZWFkID0KICAgICAgICAgICAgdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWwKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBFeGVjdXRlcyB0aGUgYGV4cHJlc3Npb25gIG9uIHRoZSBjdXJyZW50IHNjb3BlIGFuZCByZXR1cm5zIHRoZSByZXN1bHQuIEFueSBleGNlcHRpb25zIGluCiAgICAgICAqIHRoZSBleHByZXNzaW9uIGFyZSBwcm9wYWdhdGVkICh1bmNhdWdodCkuIFRoaXMgaXMgdXNlZnVsIHdoZW4gZXZhbHVhdGluZyBBbmd1bGFyCiAgICAgICAqIGV4cHJlc3Npb25zLgogICAgICAgKgogICAgICAgKiAjIEV4YW1wbGUKICAgICAgICogPHByZT4KICAgICAgICAgICB2YXIgc2NvcGUgPSBuZy4kcm9vdFNjb3BlLlNjb3BlKCk7CiAgICAgICAgICAgc2NvcGUuYSA9IDE7CiAgICAgICAgICAgc2NvcGUuYiA9IDI7CgogICAgICAgICAgIGV4cGVjdChzY29wZS4kZXZhbCgnYStiJykpLnRvRXF1YWwoMyk7CiAgICAgICAgICAgZXhwZWN0KHNjb3BlLiRldmFsKGZ1bmN0aW9uKHNjb3BlKXsgcmV0dXJuIHNjb3BlLmEgKyBzY29wZS5iOyB9KSkudG9FcXVhbCgzKTsKICAgICAgICogPC9wcmU+CiAgICAgICAqCiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cHJlc3Npb24gQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLgogICAgICAgKgogICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluICB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS4KICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci4KICAgICAgICoKICAgICAgICogQHBhcmFtIHsob2JqZWN0KT19IGxvY2FscyBMb2NhbCB2YXJpYWJsZXMgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluIHNjb3BlLgogICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLgogICAgICAgKi8KICAgICAgJGV2YWw6IGZ1bmN0aW9uKGV4cHIsIGxvY2FscykgewogICAgICAgIHJldHVybiAkcGFyc2UoZXhwcikodGhpcywgbG9jYWxzKTsKICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jCiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogRXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gb24gdGhlIGN1cnJlbnQgc2NvcGUgYXQgYSBsYXRlciBwb2ludCBpbiB0aW1lLgogICAgICAgKgogICAgICAgKiBUaGUgYCRldmFsQXN5bmNgIG1ha2VzIG5vIGd1YXJhbnRlZXMgYXMgdG8gd2hlbiB0aGUgYGV4cHJlc3Npb25gIHdpbGwgYmUgZXhlY3V0ZWQsIG9ubHkKICAgICAgICogdGhhdDoKICAgICAgICoKICAgICAgICogICAtIGl0IHdpbGwgZXhlY3V0ZSBhZnRlciB0aGUgZnVuY3Rpb24gdGhhdCBzY2hlZHVsZWQgdGhlIGV2YWx1YXRpb24gKHByZWZlcmFibHkgYmVmb3JlIERPTQogICAgICAgKiAgICAgcmVuZGVyaW5nKS4KICAgICAgICogICAtIGF0IGxlYXN0IG9uZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRkaWdlc3QgJGRpZ2VzdCBjeWNsZX0gd2lsbCBiZSBwZXJmb3JtZWQgYWZ0ZXIKICAgICAgICogICAgIGBleHByZXNzaW9uYCBleGVjdXRpb24uCiAgICAgICAqCiAgICAgICAqIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZQogICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuCiAgICAgICAqCiAgICAgICAqIF9fTm90ZTpfXyBpZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgYCRkaWdlc3RgIGN5Y2xlLCBhIG5ldyBgJGRpZ2VzdGAgY3ljbGUKICAgICAgICogd2lsbCBiZSBzY2hlZHVsZWQuIEhvd2V2ZXIsIGl0IGlzIGVuY291cmFnZWQgdG8gYWx3YXlzIGNhbGwgY29kZSB0aGF0IGNoYW5nZXMgdGhlIG1vZGVsCiAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC4KICAgICAgICoKICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuCiAgICAgICAqCiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uCiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuCiAgICAgICAqCiAgICAgICAqLwogICAgICAkZXZhbEFzeW5jOiBmdW5jdGlvbihleHByKSB7CiAgICAgICAgLy8gaWYgd2UgYXJlIG91dHNpZGUgb2YgYW4gJGRpZ2VzdCBsb29wIGFuZCB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHdlIGFyZSBzY2hlZHVsaW5nIGFzeW5jCiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2gKICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSAmJiAhJHJvb3RTY29wZS4kJGFzeW5jUXVldWUubGVuZ3RoKSB7CiAgICAgICAgICAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuJCRhc3luY1F1ZXVlLmxlbmd0aCkgewogICAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHRoaXMuJCRhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBleHByZXNzaW9uOiBleHByfSk7CiAgICAgIH0sCgogICAgICAkJHBvc3REaWdlc3QgOiBmdW5jdGlvbihmbikgewogICAgICAgIHRoaXMuJCRwb3N0RGlnZXN0UXVldWUucHVzaChmbik7CiAgICAgIH0sCgogICAgICAvKioKICAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5CiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhcgogICAgICAgKiBmcmFtZXdvcmsuIChGb3IgZXhhbXBsZSBmcm9tIGJyb3dzZXIgRE9NIGV2ZW50cywgc2V0VGltZW91dCwgWEhSIG9yIHRoaXJkIHBhcnR5IGxpYnJhcmllcykuCiAgICAgICAqIEJlY2F1c2Ugd2UgYXJlIGNhbGxpbmcgaW50byB0aGUgYW5ndWxhciBmcmFtZXdvcmsgd2UgbmVlZCB0byBwZXJmb3JtIHByb3BlciBzY29wZSBsaWZlCiAgICAgICAqIGN5Y2xlIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LAogICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRkaWdlc3QgZXhlY3V0aW5nIHdhdGNoZXN9LgogICAgICAgKgogICAgICAgKiAjIyBMaWZlIGN5Y2xlCiAgICAgICAqCiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYAogICAgICAgKiA8cHJlPgogICAgICAgICAgIGZ1bmN0aW9uICRhcHBseShleHByKSB7CiAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICByZXR1cm4gJGV2YWwoZXhwcik7CiAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgJHJvb3QuJGRpZ2VzdCgpOwogICAgICAgICAgICAgfQogICAgICAgICAgIH0KICAgICAgICogPC9wcmU+CiAgICAgICAqCiAgICAgICAqCiAgICAgICAqIFNjb3BlJ3MgYCRhcHBseSgpYCBtZXRob2QgdHJhbnNpdGlvbnMgdGhyb3VnaCB0aGUgZm9sbG93aW5nIHN0YWdlczoKICAgICAgICoKICAgICAgICogMS4gVGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIGV4ZWN1dGVkIHVzaW5nIHRoZQogICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRldmFsICRldmFsKCl9IG1ldGhvZC4KICAgICAgICogMi4gQW55IGV4Y2VwdGlvbnMgZnJvbSB0aGUgZXhlY3V0aW9uIG9mIHRoZSBleHByZXNzaW9uIGFyZSBmb3J3YXJkZWQgdG8gdGhlCiAgICAgICAqICAgIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgICogMy4gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJHdhdGNoIHdhdGNofSBsaXN0ZW5lcnMgYXJlIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZQogICAgICAgKiAgICBleHByZXNzaW9uIHdhcyBleGVjdXRlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLgogICAgICAgKgogICAgICAgKgogICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLgogICAgICAgKgogICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LgogICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuCiAgICAgICAqCiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uCiAgICAgICAqLwogICAgICAkYXBwbHk6IGZ1bmN0aW9uKGV4cHIpIHsKICAgICAgICB0cnkgewogICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7CiAgICAgICAgICByZXR1cm4gdGhpcy4kZXZhbChleHByKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgY2xlYXJQaGFzZSgpOwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB0aHJvdyBlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKCiAgICAgIC8qKgogICAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkb24KICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBMaXN0ZW5zIG9uIGV2ZW50cyBvZiBhIGdpdmVuIHR5cGUuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRlbWl0ICRlbWl0fSBmb3IKICAgICAgICogZGlzY3Vzc2lvbiBvZiBldmVudCBsaWZlIGN5Y2xlLgogICAgICAgKgogICAgICAgKiBUaGUgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gZm9ybWF0IGlzOiBgZnVuY3Rpb24oZXZlbnQsIGFyZ3MuLi4pYC4gVGhlIGBldmVudGAgb2JqZWN0CiAgICAgICAqIHBhc3NlZCBpbnRvIHRoZSBsaXN0ZW5lciBoYXMgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOgogICAgICAgKgogICAgICAgKiAgIC0gYHRhcmdldFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIG9uIHdoaWNoIHRoZSBldmVudCB3YXMgYCRlbWl0YC1lZCBvcgogICAgICAgKiAgICAgYCRicm9hZGNhc3RgLWVkLgogICAgICAgKiAgIC0gYGN1cnJlbnRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBjdXJyZW50IHNjb3BlIHdoaWNoIGlzIGhhbmRsaW5nIHRoZSBldmVudC4KICAgICAgICogICAtIGBuYW1lYCAtIGB7c3RyaW5nfWA6IG5hbWUgb2YgdGhlIGV2ZW50LgogICAgICAgKiAgIC0gYHN0b3BQcm9wYWdhdGlvbmAgLSBge2Z1bmN0aW9uPX1gOiBjYWxsaW5nIGBzdG9wUHJvcGFnYXRpb25gIGZ1bmN0aW9uIHdpbGwgY2FuY2VsCiAgICAgICAqICAgICBmdXJ0aGVyIGV2ZW50IHByb3BhZ2F0aW9uIChhdmFpbGFibGUgb25seSBmb3IgZXZlbnRzIHRoYXQgd2VyZSBgJGVtaXRgLWVkKS4KICAgICAgICogICAtIGBwcmV2ZW50RGVmYXVsdGAgLSBge2Z1bmN0aW9ufWA6IGNhbGxpbmcgYHByZXZlbnREZWZhdWx0YCBzZXRzIGBkZWZhdWx0UHJldmVudGVkYCBmbGFnCiAgICAgICAqICAgICB0byB0cnVlLgogICAgICAgKiAgIC0gYGRlZmF1bHRQcmV2ZW50ZWRgIC0gYHtib29sZWFufWA6IHRydWUgaWYgYHByZXZlbnREZWZhdWx0YCB3YXMgY2FsbGVkLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGxpc3RlbiBvbi4KICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudCwgYXJncy4uLil9IGxpc3RlbmVyIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC4KICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4KICAgICAgICovCiAgICAgICRvbjogZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHsKICAgICAgICB2YXIgbmFtZWRMaXN0ZW5lcnMgPSB0aGlzLiQkbGlzdGVuZXJzW25hbWVdOwogICAgICAgIGlmICghbmFtZWRMaXN0ZW5lcnMpIHsKICAgICAgICAgIHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV0gPSBuYW1lZExpc3RlbmVycyA9IFtdOwogICAgICAgIH0KICAgICAgICBuYW1lZExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsKCiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzOwogICAgICAgIGRvIHsKICAgICAgICAgIGlmICghY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHsKICAgICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gPSAwOwogICAgICAgICAgfQogICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0rKzsKICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpOwoKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaW5kZXhPZihuYW1lZExpc3RlbmVycywgbGlzdGVuZXIpXSA9IG51bGw7CiAgICAgICAgICBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KHNlbGYsIDEsIG5hbWUpOwogICAgICAgIH07CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyRlbWl0CiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlCiAgICAgICAqIEBmdW5jdGlvbgogICAgICAgKgogICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgdXB3YXJkcyB0aHJvdWdoIHRoZSBzY29wZSBoaWVyYXJjaHkgbm90aWZ5aW5nIHRoZQogICAgICAgKiByZWdpc3RlcmVkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJG9ufSBsaXN0ZW5lcnMuCiAgICAgICAqCiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRlbWl0YCB3YXMgY2FsbGVkLiBBbGwKICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldAogICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHRyYXZlcnNlcyB1cHdhcmRzIHRvd2FyZCB0aGUgcm9vdCBzY29wZSBhbmQgY2FsbHMgYWxsCiAgICAgICAqIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCB3aWxsIHN0b3AgcHJvcGFnYXRpbmcgaWYgb25lIG9mIHRoZSBsaXN0ZW5lcnMKICAgICAgICogY2FuY2VscyBpdC4KICAgICAgICoKICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJG9uIGxpc3RlbmVyc30gd2lsbCBiZSBwYXNzZWQKICAgICAgICogb250byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLgogICAgICAgKgogICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGVtaXQuCiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBzZXQgb2YgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy4KICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QgKHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRvbn0pLgogICAgICAgKi8KICAgICAgJGVtaXQ6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHsKICAgICAgICB2YXIgZW1wdHkgPSBbXSwKICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMsCiAgICAgICAgICAgIHNjb3BlID0gdGhpcywKICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsCiAgICAgICAgICAgIGV2ZW50ID0gewogICAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHNjb3BlLAogICAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7c3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTt9LAogICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksCiAgICAgICAgICAgIGksIGxlbmd0aDsKCiAgICAgICAgZG8gewogICAgICAgICAgbmFtZWRMaXN0ZW5lcnMgPSBzY29wZS4kJGxpc3RlbmVyc1tuYW1lXSB8fCBlbXB0eTsKICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IHNjb3BlOwogICAgICAgICAgZm9yIChpPTAsIGxlbmd0aD1uYW1lZExpc3RlbmVycy5sZW5ndGg7IGk8bGVuZ3RoOyBpKyspIHsKCiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXkKICAgICAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVyc1tpXSkgewogICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgICBpLS07CiAgICAgICAgICAgICAgbGVuZ3RoLS07CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAvL2FsbG93IGFsbCBsaXN0ZW5lcnMgYXR0YWNoZWQgdG8gdGhlIGN1cnJlbnQgc2NvcGUgdG8gcnVuCiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICAvL2lmIGFueSBsaXN0ZW5lciBvbiB0aGUgY3VycmVudCBzY29wZSBzdG9wcyBwcm9wYWdhdGlvbiwgcHJldmVudCBidWJibGluZwogICAgICAgICAgaWYgKHN0b3BQcm9wYWdhdGlvbikgcmV0dXJuIGV2ZW50OwogICAgICAgICAgLy90cmF2ZXJzZSB1cHdhcmRzCiAgICAgICAgICBzY29wZSA9IHNjb3BlLiRwYXJlbnQ7CiAgICAgICAgfSB3aGlsZSAoc2NvcGUpOwoKICAgICAgICByZXR1cm4gZXZlbnQ7CiAgICAgIH0sCgoKICAgICAgLyoqCiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyRicm9hZGNhc3QKICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGUKICAgICAgICogQGZ1bmN0aW9uCiAgICAgICAqCiAgICAgICAqIEBkZXNjcmlwdGlvbgogICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCBkb3dud2FyZHMgdG8gYWxsIGNoaWxkIHNjb3BlcyAoYW5kIHRoZWlyIGNoaWxkcmVuKSBub3RpZnlpbmcgdGhlCiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjbWV0aG9kc18kb259IGxpc3RlbmVycy4KICAgICAgICoKICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGJyb2FkY2FzdGAgd2FzIGNhbGxlZC4gQWxsCiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlI21ldGhvZHNfJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXQKICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCBwcm9wYWdhdGVzIHRvIGFsbCBkaXJlY3QgYW5kIGluZGlyZWN0IHNjb3BlcyBvZiB0aGUgY3VycmVudAogICAgICAgKiBzY29wZSBhbmQgY2FsbHMgYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCBjYW5ub3QgYmUgY2FuY2VsZWQuCiAgICAgICAqCiAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkCiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgICoKICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBicm9hZGNhc3QuCiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBzZXQgb2YgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy4KICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QsIHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRvbn0KICAgICAgICovCiAgICAgICRicm9hZGNhc3Q6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHsKICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcywKICAgICAgICAgICAgY3VycmVudCA9IHRhcmdldCwKICAgICAgICAgICAgbmV4dCA9IHRhcmdldCwKICAgICAgICAgICAgZXZlbnQgPSB7CiAgICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgICB0YXJnZXRTY29wZTogdGFyZ2V0LAogICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksCiAgICAgICAgICAgIGxpc3RlbmVycywgaSwgbGVuZ3RoOwoKICAgICAgICAvL2Rvd24gd2hpbGUgeW91IGNhbiwgdGhlbiB1cCBhbmQgbmV4dCBzaWJsaW5nIG9yIHVwIGFuZCBuZXh0IHNpYmxpbmcgdW50aWwgYmFjayBhdCByb290CiAgICAgICAgd2hpbGUgKChjdXJyZW50ID0gbmV4dCkpIHsKICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IGN1cnJlbnQ7CiAgICAgICAgICBsaXN0ZW5lcnMgPSBjdXJyZW50LiQkbGlzdGVuZXJzW25hbWVdIHx8IFtdOwogICAgICAgICAgZm9yIChpPTAsIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGk8bGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheQogICAgICAgICAgICBpZiAoIWxpc3RlbmVyc1tpXSkgewogICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgICAgIGxlbmd0aC0tOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpOwogICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbAogICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCEKICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGRpZ2VzdAogICAgICAgICAgLy8gKHRob3VnaCBpdCBkaWZmZXJzIGR1ZSB0byBoYXZpbmcgdGhlIGV4dHJhIGNoZWNrIGZvciAkJGxpc3RlbmVyQ291bnQpCiAgICAgICAgICBpZiAoIShuZXh0ID0gKChjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSAmJiBjdXJyZW50LiQkY2hpbGRIZWFkKSB8fAogICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7CiAgICAgICAgICAgIHdoaWxlKGN1cnJlbnQgIT09IHRhcmdldCAmJiAhKG5leHQgPSBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSB7CiAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGV2ZW50OwogICAgICB9CiAgICB9OwoKICAgIHZhciAkcm9vdFNjb3BlID0gbmV3IFNjb3BlKCk7CgogICAgcmV0dXJuICRyb290U2NvcGU7CgoKICAgIGZ1bmN0aW9uIGJlZ2luUGhhc2UocGhhc2UpIHsKICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkgewogICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2lucHJvZycsICd7MH0gYWxyZWFkeSBpbiBwcm9ncmVzcycsICRyb290U2NvcGUuJCRwaGFzZSk7CiAgICAgIH0KCiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IHBoYXNlOwogICAgfQoKICAgIGZ1bmN0aW9uIGNsZWFyUGhhc2UoKSB7CiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IG51bGw7CiAgICB9CgogICAgZnVuY3Rpb24gY29tcGlsZVRvRm4oZXhwLCBuYW1lKSB7CiAgICAgIHZhciBmbiA9ICRwYXJzZShleHApOwogICAgICBhc3NlcnRBcmdGbihmbiwgbmFtZSk7CiAgICAgIHJldHVybiBmbjsKICAgIH0KCiAgICBmdW5jdGlvbiBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KGN1cnJlbnQsIGNvdW50LCBuYW1lKSB7CiAgICAgIGRvIHsKICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSAtPSBjb3VudDsKCiAgICAgICAgaWYgKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID09PSAwKSB7CiAgICAgICAgICBkZWxldGUgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV07CiAgICAgICAgfQogICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpOwogICAgfQoKICAgIC8qKgogICAgICogZnVuY3Rpb24gdXNlZCBhcyBhbiBpbml0aWFsIHZhbHVlIGZvciB3YXRjaGVycy4KICAgICAqIGJlY2F1c2UgaXQncyB1bmlxdWUgd2UgY2FuIGVhc2lseSB0ZWxsIGl0IGFwYXJ0IGZyb20gb3RoZXIgdmFsdWVzCiAgICAgKi8KICAgIGZ1bmN0aW9uIGluaXRXYXRjaFZhbCgpIHt9CiAgfV07Cn0KCi8qKgogKiBAZGVzY3JpcHRpb24KICogUHJpdmF0ZSBzZXJ2aWNlIHRvIHNhbml0aXplIHVyaXMgZm9yIGxpbmtzIGFuZCBpbWFnZXMuIFVzZWQgYnkgJGNvbXBpbGUgYW5kICRzYW5pdGl6ZS4KICovCmZ1bmN0aW9uICQkU2FuaXRpemVVcmlQcm92aWRlcigpIHsKICB2YXIgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxzKihodHRwcz98ZnRwfG1haWx0b3x0ZWx8ZmlsZSk6LywKICAgIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXHMqKGh0dHBzP3xmdHB8ZmlsZSk6fGRhdGE6aW1hZ2VcLy87CgogIC8qKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmUKICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi4KICAgKgogICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuCiAgICoKICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50bwogICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdGAKICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSwKICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uCiAgICoKICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguCiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvcgogICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS4KICAgKi8KICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7CiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHsKICAgICAgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgcmV0dXJuIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0OwogIH07CgoKICAvKioKICAgKiBAZGVzY3JpcHRpb24KICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlCiAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLgogICAqCiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy4KICAgKgogICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gaW1nW3NyY10gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50bwogICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgCiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsCiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLgogICAqCiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLgogICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3IKICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuCiAgICovCiAgdGhpcy5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHsKICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkgewogICAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgcmV0dXJuIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdDsKICB9OwoKICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBmdW5jdGlvbiBzYW5pdGl6ZVVyaSh1cmksIGlzSW1hZ2UpIHsKICAgICAgdmFyIHJlZ2V4ID0gaXNJbWFnZSA/IGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA6IGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0OwogICAgICB2YXIgbm9ybWFsaXplZFZhbDsKICAgICAgLy8gTk9URTogdXJsUmVzb2x2ZSgpIGRvZXNuJ3Qgc3VwcG9ydCBJRSA8IDggc28gd2UgZG9uJ3Qgc2FuaXRpemUgZm9yIHRoYXQgY2FzZS4KICAgICAgaWYgKCFtc2llIHx8IG1zaWUgPj0gOCApIHsKICAgICAgICBub3JtYWxpemVkVmFsID0gdXJsUmVzb2x2ZSh1cmkpLmhyZWY7CiAgICAgICAgaWYgKG5vcm1hbGl6ZWRWYWwgIT09ICcnICYmICFub3JtYWxpemVkVmFsLm1hdGNoKHJlZ2V4KSkgewogICAgICAgICAgcmV0dXJuICd1bnNhZmU6Jytub3JtYWxpemVkVmFsOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdXJpOwogICAgfTsKICB9Owp9Cgp2YXIgJHNjZU1pbkVyciA9IG1pbkVycignJHNjZScpOwoKdmFyIFNDRV9DT05URVhUUyA9IHsKICBIVE1MOiAnaHRtbCcsCiAgQ1NTOiAnY3NzJywKICBVUkw6ICd1cmwnLAogIC8vIFJFU09VUkNFX1VSTCBpcyBhIHN1YnR5cGUgb2YgVVJMIHVzZWQgaW4gY29udGV4dHMgd2hlcmUgYSBwcml2aWxlZ2VkIHJlc291cmNlIGlzIHNvdXJjZWQgZnJvbSBhCiAgLy8gdXJsLiAgKGUuZy4gbmctaW5jbHVkZSwgc2NyaXB0IHNyYywgdGVtcGxhdGVVcmwpCiAgUkVTT1VSQ0VfVVJMOiAncmVzb3VyY2VVcmwnLAogIEpTOiAnanMnCn07CgovLyBIZWxwZXIgZnVuY3Rpb25zIGZvbGxvdy4KCi8vIENvcGllZCBmcm9tOgovLyBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmU5NjIKLy8gUHJlcmVxOiBzIGlzIGEgc3RyaW5nLgpmdW5jdGlvbiBlc2NhcGVGb3JSZWdleHAocykgewogIHJldHVybiBzLnJlcGxhY2UoLyhbLSgpXFtcXXt9Kz8qLiRcXnwsOiM8IVxcXSkvZywgJ1xcJDEnKS4KICAgICAgICAgICByZXBsYWNlKC9ceDA4L2csICdcXHgwOCcpOwp9CgoKZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSB7CiAgaWYgKG1hdGNoZXIgPT09ICdzZWxmJykgewogICAgcmV0dXJuIG1hdGNoZXI7CiAgfSBlbHNlIGlmIChpc1N0cmluZyhtYXRjaGVyKSkgewogICAgLy8gU3RyaW5ncyBtYXRjaCBleGFjdGx5IGV4Y2VwdCBmb3IgMiB3aWxkY2FyZHMgLSAnKicgYW5kICcqKicuCiAgICAvLyAnKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIGV4Y2VwdCB0aG9zZSBmcm9tIHRoZSBzZXQgJzovLj8mJy4KICAgIC8vICcqKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIChsaWtlIC4qIGluIGEgUmVnRXhwKS4KICAgIC8vIE1vcmUgdGhhbiAyIConcyByYWlzZXMgYW4gZXJyb3IgYXMgaXQncyBpbGwgZGVmaW5lZC4KICAgIGlmIChtYXRjaGVyLmluZGV4T2YoJyoqKicpID4gLTEpIHsKICAgICAgdGhyb3cgJHNjZU1pbkVycignaXdjYXJkJywKICAgICAgICAgICdJbGxlZ2FsIHNlcXVlbmNlICoqKiBpbiBzdHJpbmcgbWF0Y2hlci4gIFN0cmluZzogezB9JywgbWF0Y2hlcik7CiAgICB9CiAgICBtYXRjaGVyID0gZXNjYXBlRm9yUmVnZXhwKG1hdGNoZXIpLgogICAgICAgICAgICAgICAgICByZXBsYWNlKCdcXCpcXConLCAnLionKS4KICAgICAgICAgICAgICAgICAgcmVwbGFjZSgnXFwqJywgJ1teOi8uPyY7XSonKTsKICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXIgKyAnJCcpOwogIH0gZWxzZSBpZiAoaXNSZWdFeHAobWF0Y2hlcikpIHsKICAgIC8vIFRoZSBvbmx5IG90aGVyIHR5cGUgb2YgbWF0Y2hlciBhbGxvd2VkIGlzIGEgUmVnZXhwLgogICAgLy8gTWF0Y2ggZW50aXJlIFVSTCAvIGRpc2FsbG93IHBhcnRpYWwgbWF0Y2hlcy4KICAgIC8vIEZsYWdzIGFyZSByZXNldCAoaS5lLiBubyBnbG9iYWwsIGlnbm9yZUNhc2Ugb3IgbXVsdGlsaW5lKQogICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgbWF0Y2hlci5zb3VyY2UgKyAnJCcpOwogIH0gZWxzZSB7CiAgICB0aHJvdyAkc2NlTWluRXJyKCdpbWF0Y2hlcicsCiAgICAgICAgJ01hdGNoZXJzIG1heSBvbmx5IGJlICJzZWxmIiwgc3RyaW5nIHBhdHRlcm5zIG9yIFJlZ0V4cCBvYmplY3RzJyk7CiAgfQp9CgoKZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcnMobWF0Y2hlcnMpIHsKICB2YXIgYWRqdXN0ZWRNYXRjaGVycyA9IFtdOwogIGlmIChpc0RlZmluZWQobWF0Y2hlcnMpKSB7CiAgICBmb3JFYWNoKG1hdGNoZXJzLCBmdW5jdGlvbihtYXRjaGVyKSB7CiAgICAgIGFkanVzdGVkTWF0Y2hlcnMucHVzaChhZGp1c3RNYXRjaGVyKG1hdGNoZXIpKTsKICAgIH0pOwogIH0KICByZXR1cm4gYWRqdXN0ZWRNYXRjaGVyczsKfQoKCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSBuZy4kc2NlRGVsZWdhdGUKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBgJHNjZURlbGVnYXRlYCBpcyBhIHNlcnZpY2UgdGhhdCBpcyB1c2VkIGJ5IHRoZSBgJHNjZWAgc2VydmljZSB0byBwcm92aWRlIHtAbGluayBuZy4kc2NlIFN0cmljdAogKiBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfSBzZXJ2aWNlcyB0byBBbmd1bGFySlMuCiAqCiAqIFR5cGljYWxseSwgeW91IHdvdWxkIGNvbmZpZ3VyZSBvciBvdmVycmlkZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGluc3RlYWQgb2YKICogdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIGN1c3RvbWl6ZSB0aGUgd2F5IFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIHdvcmtzIGluIEFuZ3VsYXJKUy4gIFRoaXMgaXMKICogYmVjYXVzZSwgd2hpbGUgdGhlIGAkc2NlYCBwcm92aWRlcyBudW1lcm91cyBzaG9ydGhhbmQgbWV0aG9kcywgZXRjLiwgeW91IHJlYWxseSBvbmx5IG5lZWQgdG8KICogb3ZlcnJpZGUgMyBjb3JlIGZ1bmN0aW9ucyAoYHRydXN0QXNgLCBgZ2V0VHJ1c3RlZGAgYW5kIGB2YWx1ZU9mYCkgdG8gcmVwbGFjZSB0aGUgd2F5IHRoaW5ncwogKiB3b3JrIGJlY2F1c2UgYCRzY2VgIGRlbGVnYXRlcyB0byBgJHNjZURlbGVnYXRlYCBmb3IgdGhlc2Ugb3BlcmF0aW9ucy4KICoKICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSB0byBjb25maWd1cmUgdGhpcyBzZXJ2aWNlLgogKgogKiBUaGUgZGVmYXVsdCBpbnN0YW5jZSBvZiBgJHNjZURlbGVnYXRlYCBzaG91bGQgd29yayBvdXQgb2YgdGhlIGJveCB3aXRoIGxpdHRsZSBwYWluLiAgV2hpbGUgeW91CiAqIGNhbiBvdmVycmlkZSBpdCBjb21wbGV0ZWx5IHRvIGNoYW5nZSB0aGUgYmVoYXZpb3Igb2YgYCRzY2VgLCB0aGUgY29tbW9uIGNhc2Ugd291bGQKICogaW52b2x2ZSBjb25maWd1cmluZyB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSBpbnN0ZWFkIGJ5IHNldHRpbmcKICogeW91ciBvd24gd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyBmb3IgdHJ1c3RpbmcgVVJMcyB1c2VkIGZvciBsb2FkaW5nIEFuZ3VsYXJKUyByZXNvdXJjZXMgc3VjaCBhcwogKiB0ZW1wbGF0ZXMuICBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjbWV0aG9kc19yZXNvdXJjZVVybFdoaXRlbGlzdAogKiAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdH0gYW5kIHtAbGluawogKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNtZXRob2RzX3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fQogKi8KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyCiAqIEBkZXNjcmlwdGlvbgogKgogKiBUaGUgYCRzY2VEZWxlZ2F0ZVByb3ZpZGVyYCBwcm92aWRlciBhbGxvd3MgZGV2ZWxvcGVycyB0byBjb25maWd1cmUgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGUKICogJHNjZURlbGVnYXRlfSBzZXJ2aWNlLiAgVGhpcyBhbGxvd3Mgb25lIHRvIGdldC9zZXQgdGhlIHdoaXRlbGlzdHMgYW5kIGJsYWNrbGlzdHMgdXNlZCB0byBlbnN1cmUKICogdGhhdCB0aGUgVVJMcyB1c2VkIGZvciBzb3VyY2luZyBBbmd1bGFyIHRlbXBsYXRlcyBhcmUgc2FmZS4gIFJlZmVyIHtAbGluawogKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNtZXRob2RzX3Jlc291cmNlVXJsV2hpdGVsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQKICoge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI21ldGhvZHNfcmVzb3VyY2VVcmxCbGFja2xpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxCbGFja2xpc3R9CiAqCiAqIEZvciB0aGUgZ2VuZXJhbCBkZXRhaWxzIGFib3V0IHRoaXMgc2VydmljZSBpbiBBbmd1bGFyLCByZWFkIHRoZSBtYWluIHBhZ2UgZm9yIHtAbGluayBuZy4kc2NlCiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS4KICoKICogKipFeGFtcGxlKio6ICBDb25zaWRlciB0aGUgZm9sbG93aW5nIGNhc2UuIDxhIG5hbWU9ImV4YW1wbGUiPjwvYT4KICoKICogLSB5b3VyIGFwcCBpcyBob3N0ZWQgYXQgdXJsIGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vYAogKiAtIGJ1dCBzb21lIG9mIHlvdXIgdGVtcGxhdGVzIGFyZSBob3N0ZWQgb24gb3RoZXIgZG9tYWlucyB5b3UgY29udHJvbCBzdWNoIGFzCiAqICAgYGh0dHA6Ly9zcnYwMS5hc3NldHMuZXhhbXBsZS5jb20vYCzCoCBgaHR0cDovL3NydjAyLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBldGMuCiAqIC0gYW5kIHlvdSBoYXZlIGFuIG9wZW4gcmVkaXJlY3QgYXQgYGh0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnU/Li4uYC4KICoKICogSGVyZSBpcyB3aGF0IGEgc2VjdXJlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgc2NlbmFyaW8gbWlnaHQgbG9vayBsaWtlOgogKgogKiA8cHJlIGNsYXNzPSJwcmV0dHlwcmludCI+CiAqICAgIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHsKICogICAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdChbCiAqICAgICAgICAvLyBBbGxvdyBzYW1lIG9yaWdpbiByZXNvdXJjZSBsb2Fkcy4KICogICAgICAgICdzZWxmJywKICogICAgICAgIC8vIEFsbG93IGxvYWRpbmcgZnJvbSBvdXIgYXNzZXRzIGRvbWFpbi4gIE5vdGljZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuICogYW5kICoqLgogKiAgICAgICAgJ2h0dHA6Ly9zcnYqLmFzc2V0cy5leGFtcGxlLmNvbS8qKiddKTsKICoKICogICAgICAvLyBUaGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0IHNvIHRoZSBvcGVuIHJlZGlyZWN0IGhlcmUgaXMgYmxvY2tlZC4KICogICAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdChbCiAqICAgICAgICAnaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2NsaWNrVGhydSoqJ10pOwogKiAgICAgIH0pOwogKiA8L3ByZT4KICovCgpmdW5jdGlvbiAkU2NlRGVsZWdhdGVQcm92aWRlcigpIHsKICB0aGlzLlNDRV9DT05URVhUUyA9IFNDRV9DT05URVhUUzsKCiAgLy8gUmVzb3VyY2UgVVJMcyBjYW4gYWxzbyBiZSB0cnVzdGVkIGJ5IHBvbGljeS4KICB2YXIgcmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBbJ3NlbGYnXSwKICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBbXTsKCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdAogICAqIEBtZXRob2RPZiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlcgogICAqIEBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtBcnJheT19IHdoaXRlbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2l0aCB0aGUgdmFsdWUKICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXIKICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuCiAgICoKICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXMKICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LgogICAqCiAgICogICAgIE5vdGU6ICoqYW4gZW1wdHkgd2hpdGVsaXN0IGFycmF5IHdpbGwgYmxvY2sgYWxsIFVSTHMqKiEKICAgKgogICAqIEByZXR1cm4ge0FycmF5fSB0aGUgY3VycmVudGx5IHNldCB3aGl0ZWxpc3QgYXJyYXkuCiAgICoKICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgYFsnc2VsZiddYCBhbGxvd2luZyBvbmx5CiAgICogc2FtZSBvcmlnaW4gcmVzb3VyY2UgcmVxdWVzdHMuCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBTZXRzL0dldHMgdGhlIHdoaXRlbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuCiAgICovCiAgdGhpcy5yZXNvdXJjZVVybFdoaXRlbGlzdCA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHsKICAgICAgcmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBhZGp1c3RNYXRjaGVycyh2YWx1ZSk7CiAgICB9CiAgICByZXR1cm4gcmVzb3VyY2VVcmxXaGl0ZWxpc3Q7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdAogICAqIEBtZXRob2RPZiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlcgogICAqIEBmdW5jdGlvbgogICAqCiAgICogQHBhcmFtIHtBcnJheT19IGJsYWNrbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxCbGFja2xpc3Qgd2l0aCB0aGUgdmFsdWUKICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXIKICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuCiAgICoKICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXMKICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LgogICAqCiAgICogICAgIFRoZSB0eXBpY2FsIHVzYWdlIGZvciB0aGUgYmxhY2tsaXN0IGlzIHRvICoqYmxvY2sKICAgKiAgICAgW29wZW4gcmVkaXJlY3RzXShodHRwOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzYwMS5odG1sKSoqIHNlcnZlZCBieSB5b3VyIGRvbWFpbiBhcwogICAqICAgICB0aGVzZSB3b3VsZCBvdGhlcndpc2UgYmUgdHJ1c3RlZCBidXQgYWN0dWFsbHkgcmV0dXJuIGNvbnRlbnQgZnJvbSB0aGUgcmVkaXJlY3RlZCBkb21haW4uCiAgICoKICAgKiAgICAgRmluYWxseSwgKip0aGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0KiogYW5kIGhhcyB0aGUgZmluYWwgc2F5LgogICAqCiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBjdXJyZW50bHkgc2V0IGJsYWNrbGlzdCBhcnJheS4KICAgKgogICAqIFRoZSAqKmRlZmF1bHQgdmFsdWUqKiB3aGVuIG5vIHdoaXRlbGlzdCBoYXMgYmVlbiBleHBsaWNpdGx5IHNldCBpcyB0aGUgZW1wdHkgYXJyYXkgKGkuZS4gdGhlcmUKICAgKiBpcyBubyBibGFja2xpc3QuKQogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cy9HZXRzIHRoZSBibGFja2xpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLgogICAqLwoKICB0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICByZXNvdXJjZVVybEJsYWNrbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTsKICAgIH0KICAgIHJldHVybiByZXNvdXJjZVVybEJsYWNrbGlzdDsKICB9OwoKICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3RvcikgewoKICAgIHZhciBodG1sU2FuaXRpemVyID0gZnVuY3Rpb24gaHRtbFNhbml0aXplcihodG1sKSB7CiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7CiAgICB9OwoKICAgIGlmICgkaW5qZWN0b3IuaGFzKCckc2FuaXRpemUnKSkgewogICAgICBodG1sU2FuaXRpemVyID0gJGluamVjdG9yLmdldCgnJHNhbml0aXplJyk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIG1hdGNoVXJsKG1hdGNoZXIsIHBhcnNlZFVybCkgewogICAgICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7CiAgICAgICAgcmV0dXJuIHVybElzU2FtZU9yaWdpbihwYXJzZWRVcmwpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIGRlZmluaXRlbHkgYSByZWdleC4gIFNlZSBhZGp1c3RNYXRjaGVycygpCiAgICAgICAgcmV0dXJuICEhbWF0Y2hlci5leGVjKHBhcnNlZFVybC5ocmVmKTsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kodXJsKSB7CiAgICAgIHZhciBwYXJzZWRVcmwgPSB1cmxSZXNvbHZlKHVybC50b1N0cmluZygpKTsKICAgICAgdmFyIGksIG4sIGFsbG93ZWQgPSBmYWxzZTsKICAgICAgLy8gRW5zdXJlIHRoYXQgYXQgbGVhc3Qgb25lIGl0ZW0gZnJvbSB0aGUgd2hpdGVsaXN0IGFsbG93cyB0aGlzIHVybC4KICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsV2hpdGVsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykgewogICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybFdoaXRlbGlzdFtpXSwgcGFyc2VkVXJsKSkgewogICAgICAgICAgYWxsb3dlZCA9IHRydWU7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGFsbG93ZWQpIHsKICAgICAgICAvLyBFbnN1cmUgdGhhdCBubyBpdGVtIGZyb20gdGhlIGJsYWNrbGlzdCBibG9ja2VkIHRoaXMgdXJsLgogICAgICAgIGZvciAoaSA9IDAsIG4gPSByZXNvdXJjZVVybEJsYWNrbGlzdC5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybEJsYWNrbGlzdFtpXSwgcGFyc2VkVXJsKSkgewogICAgICAgICAgICBhbGxvd2VkID0gZmFsc2U7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gYWxsb3dlZDsKICAgIH0KCiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhvbGRlclR5cGUoQmFzZSkgewogICAgICB2YXIgaG9sZGVyVHlwZSA9IGZ1bmN0aW9uIFRydXN0ZWRWYWx1ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlKSB7CiAgICAgICAgdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTsKICAgICAgICB9OwogICAgICB9OwogICAgICBpZiAoQmFzZSkgewogICAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlID0gbmV3IEJhc2UoKTsKICAgICAgfQogICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gc2NlVmFsdWVPZigpIHsKICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpOwogICAgICB9OwogICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHNjZVRvU3RyaW5nKCkgewogICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCkudG9TdHJpbmcoKTsKICAgICAgfTsKICAgICAgcmV0dXJuIGhvbGRlclR5cGU7CiAgICB9CgogICAgdmFyIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UgPSBnZW5lcmF0ZUhvbGRlclR5cGUoKSwKICAgICAgICBieVR5cGUgPSB7fTsKCiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkhUTUxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpOwogICAgYnlUeXBlW1NDRV9DT05URVhUUy5DU1NdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpOwogICAgYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpOwogICAgYnlUeXBlW1NDRV9DT05URVhUUy5KU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7CiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUoYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdKTsKCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzCiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZURlbGVnYXRlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3QKICAgICAqIGNvbnRleHR1YWwgZXNjYXBpbmcgY29udGV4dHMgKHN1Y2ggYXMgbmctaHRtbC1iaW5kLXVuc2FmZSwgbmctaW5jbHVkZSwgYW55IHNyYwogICAgICogYXR0cmlidXRlIGludGVycG9sYXRpb24sIGFueSBkb20gZXZlbnQgYmluZGluZyBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbgogICAgICogc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pIHRoYXQgdXNlcyB0aGUgcHJvdmlkZWQgdmFsdWUuCiAgICAgKiBTZWUge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIGVuYWJsaW5nIHN0cmljdCBjb250ZXh0dWFsIGVzY2FwaW5nLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UuICBlLmcuIHVybCwKICAgICAqICAgcmVzb3VyY2VVcmwsIGh0bWwsIGpzIGFuZCBjc3MuCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC9zYWZlLgogICAgICogQHJldHVybnMgeyp9IEEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB0byBzdGFuZCBpbiBmb3IgdGhlIHByb3ZpZGVkIGB2YWx1ZWAgaW4gcGxhY2VzCiAgICAgKiB3aGVyZSBBbmd1bGFyIGV4cGVjdHMgYSAkc2NlLnRydXN0QXMoKSByZXR1cm4gdmFsdWUuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHRydXN0QXModHlwZSwgdHJ1c3RlZFZhbHVlKSB7CiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IChieVR5cGUuaGFzT3duUHJvcGVydHkodHlwZSkgPyBieVR5cGVbdHlwZV0gOiBudWxsKTsKICAgICAgaWYgKCFDb25zdHJ1Y3RvcikgewogICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2ljb250ZXh0JywKICAgICAgICAgICAgJ0F0dGVtcHRlZCB0byB0cnVzdCBhIHZhbHVlIGluIGludmFsaWQgY29udGV4dC4gQ29udGV4dDogezB9OyBWYWx1ZTogezF9JywKICAgICAgICAgICAgdHlwZSwgdHJ1c3RlZFZhbHVlKTsKICAgICAgfQogICAgICBpZiAodHJ1c3RlZFZhbHVlID09PSBudWxsIHx8IHRydXN0ZWRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHRydXN0ZWRWYWx1ZSA9PT0gJycpIHsKICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlOwogICAgICB9CiAgICAgIC8vIEFsbCB0aGUgY3VycmVudCBjb250ZXh0cyBpbiBTQ0VfQ09OVEVYVFMgaGFwcGVuIHRvIGJlIHN0cmluZ3MuICBJbiBvcmRlciB0byBhdm9pZCB0cnVzdGluZwogICAgICAvLyBtdXRhYmxlIG9iamVjdHMsIHdlIGVuc3VyZSBoZXJlIHRoYXQgdGhlIHZhbHVlIHBhc3NlZCBpbiBpcyBhY3R1YWxseSBhIHN0cmluZy4KICAgICAgaWYgKHR5cGVvZiB0cnVzdGVkVmFsdWUgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaXR5cGUnLAogICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgbm9uLXN0cmluZyB2YWx1ZSBpbiBhIGNvbnRlbnQgcmVxdWlyaW5nIGEgc3RyaW5nOiBDb250ZXh0OiB7MH0nLAogICAgICAgICAgICB0eXBlKTsKICAgICAgfQogICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRydXN0ZWRWYWx1ZSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBAbmdkb2MgbWV0aG9kCiAgICAgKiBAbmFtZSBuZy4kc2NlRGVsZWdhdGUjdmFsdWVPZgogICAgICogQG1ldGhvZE9mIG5nLiRzY2VEZWxlZ2F0ZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogSWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgaGFkIGJlZW4gcmV0dXJuZWQgYnkgYSBwcmlvciBjYWxsIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzCiAgICAgKiBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyB0aGUgdmFsdWUgdGhhdCBoYWQgYmVlbiBwYXNzZWQgdG8ge0BsaW5rCiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LgogICAgICoKICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGlzIG5vdCBhIHZhbHVlIHRoYXQgaGFkIGJlZW4gcmV0dXJuZWQgYnkge0BsaW5rCiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCByZXR1cm5zIGl0IGFzLWlzLgogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9CiAgICAgKiAgICAgIGNhbGwgb3IgYW55dGhpbmcgZWxzZS4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgYHZhbHVlYCB0aGF0IHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzCiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gaWYgYHZhbHVlYCBpcyB0aGUgcmVzdWx0IG9mIHN1Y2ggYSBjYWxsLiAgT3RoZXJ3aXNlLCByZXR1cm5zCiAgICAgKiAgICAgYHZhbHVlYCB1bmNoYW5nZWQuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHZhbHVlT2YobWF5YmVUcnVzdGVkKSB7CiAgICAgIGlmIChtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKSB7CiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkCiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZURlbGVnYXRlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBUYWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNtZXRob2RzX3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gY2FsbCBhbmQKICAgICAqIHJldHVybnMgdGhlIG9yaWdpbmFsbHkgc3VwcGxpZWQgdmFsdWUgaWYgdGhlIHF1ZXJpZWQgY29udGV4dCB0eXBlIGlzIGEgc3VwZXJ0eXBlIG9mIHRoZQogICAgICogY3JlYXRlZCB0eXBlLiAgSWYgdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkLgogICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzCiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gY2FsbC4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhlIHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzCiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gaWYgdmFsaWQgaW4gdGhpcyBjb250ZXh0LiAgT3RoZXJ3aXNlLCB0aHJvd3MgYW4gZXhjZXB0aW9uLgogICAgICovCiAgICBmdW5jdGlvbiBnZXRUcnVzdGVkKHR5cGUsIG1heWJlVHJ1c3RlZCkgewogICAgICBpZiAobWF5YmVUcnVzdGVkID09PSBudWxsIHx8IG1heWJlVHJ1c3RlZCA9PT0gdW5kZWZpbmVkIHx8IG1heWJlVHJ1c3RlZCA9PT0gJycpIHsKICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkOwogICAgICB9CiAgICAgIHZhciBjb25zdHJ1Y3RvciA9IChieVR5cGUuaGFzT3duUHJvcGVydHkodHlwZSkgPyBieVR5cGVbdHlwZV0gOiBudWxsKTsKICAgICAgaWYgKGNvbnN0cnVjdG9yICYmIG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7CiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpOwogICAgICB9CiAgICAgIC8vIElmIHdlIGdldCBoZXJlLCB0aGVuIHdlIG1heSBvbmx5IHRha2Ugb25lIG9mIHR3byBhY3Rpb25zLgogICAgICAvLyAxLiBzYW5pdGl6ZSB0aGUgdmFsdWUgZm9yIHRoZSByZXF1ZXN0ZWQgdHlwZSwgb3IKICAgICAgLy8gMi4gdGhyb3cgYW4gZXhjZXB0aW9uLgogICAgICBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTCkgewogICAgICAgIGlmIChpc1Jlc291cmNlVXJsQWxsb3dlZEJ5UG9saWN5KG1heWJlVHJ1c3RlZCkpIHsKICAgICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2luc2VjdXJsJywKICAgICAgICAgICAgICAnQmxvY2tlZCBsb2FkaW5nIHJlc291cmNlIGZyb20gdXJsIG5vdCBhbGxvd2VkIGJ5ICRzY2VEZWxlZ2F0ZSBwb2xpY3kuICBVUkw6IHswfScsCiAgICAgICAgICAgICAgbWF5YmVUcnVzdGVkLnRvU3RyaW5nKCkpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBTQ0VfQ09OVEVYVFMuSFRNTCkgewogICAgICAgIHJldHVybiBodG1sU2FuaXRpemVyKG1heWJlVHJ1c3RlZCk7CiAgICAgIH0KICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTsKICAgIH0KCiAgICByZXR1cm4geyB0cnVzdEFzOiB0cnVzdEFzLAogICAgICAgICAgICAgZ2V0VHJ1c3RlZDogZ2V0VHJ1c3RlZCwKICAgICAgICAgICAgIHZhbHVlT2Y6IHZhbHVlT2YgfTsKICB9XTsKfQoKCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRzY2VQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogVGhlICRzY2VQcm92aWRlciBwcm92aWRlciBhbGxvd3MgZGV2ZWxvcGVycyB0byBjb25maWd1cmUgdGhlIHtAbGluayBuZy4kc2NlICRzY2V9IHNlcnZpY2UuCiAqIC0gICBlbmFibGUvZGlzYWJsZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKSBpbiBhIG1vZHVsZQogKiAtICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBkZWxlZ2F0ZQogKgogKiBSZWFkIG1vcmUgYWJvdXQge0BsaW5rIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LgogKi8KCi8qIGpzaGludCBtYXhsZW46IGZhbHNlKi8KCi8qKgogKiBAbmdkb2Mgc2VydmljZQogKiBAbmFtZSBuZy4kc2NlCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICoKICogYCRzY2VgIGlzIGEgc2VydmljZSB0aGF0IHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIHNlcnZpY2VzIHRvIEFuZ3VsYXJKUy4KICoKICogIyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZwogKgogKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKSBpcyBhIG1vZGUgaW4gd2hpY2ggQW5ndWxhckpTIHJlcXVpcmVzIGJpbmRpbmdzIGluIGNlcnRhaW4KICogY29udGV4dHMgdG8gcmVzdWx0IGluIGEgdmFsdWUgdGhhdCBpcyBtYXJrZWQgYXMgc2FmZSB0byB1c2UgZm9yIHRoYXQgY29udGV4dC4gIE9uZSBleGFtcGxlIG9mCiAqIHN1Y2ggYSBjb250ZXh0IGlzIGJpbmRpbmcgYXJiaXRyYXJ5IGh0bWwgY29udHJvbGxlZCBieSB0aGUgdXNlciB2aWEgYG5nLWJpbmQtaHRtbGAuICBXZSByZWZlcgogKiB0byB0aGVzZSBjb250ZXh0cyBhcyBwcml2aWxlZ2VkIG9yIFNDRSBjb250ZXh0cy4KICoKICogQXMgb2YgdmVyc2lvbiAxLjIsIEFuZ3VsYXIgc2hpcHMgd2l0aCBTQ0UgZW5hYmxlZCBieSBkZWZhdWx0LgogKgogKiBOb3RlOiAgV2hlbiBlbmFibGVkICh0aGUgZGVmYXVsdCksIElFOCBpbiBxdWlya3MgbW9kZSBpcyBub3Qgc3VwcG9ydGVkLiAgSW4gdGhpcyBtb2RlLCBJRTggYWxsb3dzCiAqIG9uZSB0byBleGVjdXRlIGFyYml0cmFyeSBqYXZhc2NyaXB0IGJ5IHRoZSB1c2Ugb2YgdGhlIGV4cHJlc3Npb24oKSBzeW50YXguICBSZWZlcgogKiA8aHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWUvYXJjaGl2ZS8yMDA4LzEwLzE2L2VuZGluZy1leHByZXNzaW9ucy5hc3B4PiB0byBsZWFybiBtb3JlIGFib3V0IHRoZW0uCiAqIFlvdSBjYW4gZW5zdXJlIHlvdXIgZG9jdW1lbnQgaXMgaW4gc3RhbmRhcmRzIG1vZGUgYW5kIG5vdCBxdWlya3MgbW9kZSBieSBhZGRpbmcgYDwhZG9jdHlwZSBodG1sPmAKICogdG8gdGhlIHRvcCBvZiB5b3VyIEhUTUwgZG9jdW1lbnQuCiAqCiAqIFNDRSBhc3Npc3RzIGluIHdyaXRpbmcgY29kZSBpbiB3YXkgdGhhdCAoYSkgaXMgc2VjdXJlIGJ5IGRlZmF1bHQgYW5kIChiKSBtYWtlcyBhdWRpdGluZyBmb3IKICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIHN1Y2ggYXMgWFNTLCBjbGlja2phY2tpbmcsIGV0Yy4gYSBsb3QgZWFzaWVyLgogKgogKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6CiAqCiAqIDxwcmUgY2xhc3M9InByZXR0eXByaW50Ij4KICogICAgIDxpbnB1dCBuZy1tb2RlbD0idXNlckh0bWwiPgogKiAgICAgPGRpdiBuZy1iaW5kLWh0bWw9InVzZXJIdG1sIj4KICogPC9wcmU+CiAqCiAqIE5vdGljZSB0aGF0IGBuZy1iaW5kLWh0bWxgIGlzIGJvdW5kIHRvIGB1c2VySHRtbGAgY29udHJvbGxlZCBieSB0aGUgdXNlci4gIFdpdGggU0NFCiAqIGRpc2FibGVkLCB0aGlzIGFwcGxpY2F0aW9uIGFsbG93cyB0aGUgdXNlciB0byByZW5kZXIgYXJiaXRyYXJ5IEhUTUwgaW50byB0aGUgRElWLgogKiBJbiBhIG1vcmUgcmVhbGlzdGljIGV4YW1wbGUsIG9uZSBtYXkgYmUgcmVuZGVyaW5nIHVzZXIgY29tbWVudHMsIGJsb2cgYXJ0aWNsZXMsIGV0Yy4gdmlhCiAqIGJpbmRpbmdzLiAgKEhUTUwgaXMganVzdCBvbmUgZXhhbXBsZSBvZiBhIGNvbnRleHQgd2hlcmUgcmVuZGVyaW5nIHVzZXIgY29udHJvbGxlZCBpbnB1dCBjcmVhdGVzCiAqIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4pCiAqCiAqIEZvciB0aGUgY2FzZSBvZiBIVE1MLCB5b3UgbWlnaHQgdXNlIGEgbGlicmFyeSwgZWl0aGVyIG9uIHRoZSBjbGllbnQgc2lkZSwgb3Igb24gdGhlIHNlcnZlciBzaWRlLAogKiB0byBzYW5pdGl6ZSB1bnNhZmUgSFRNTCBiZWZvcmUgYmluZGluZyB0byB0aGUgdmFsdWUgYW5kIHJlbmRlcmluZyBpdCBpbiB0aGUgZG9jdW1lbnQuCiAqCiAqIEhvdyB3b3VsZCB5b3UgZW5zdXJlIHRoYXQgZXZlcnkgcGxhY2UgdGhhdCB1c2VkIHRoZXNlIHR5cGVzIG9mIGJpbmRpbmdzIHdhcyBib3VuZCB0byBhIHZhbHVlIHRoYXQKICogd2FzIHNhbml0aXplZCBieSB5b3VyIGxpYnJhcnkgKG9yIHJldHVybmVkIGFzIHNhZmUgZm9yIHJlbmRlcmluZyBieSB5b3VyIHNlcnZlcj8pICBIb3cgY2FuIHlvdQogKiBlbnN1cmUgdGhhdCB5b3UgZGlkbid0IGFjY2lkZW50YWxseSBkZWxldGUgdGhlIGxpbmUgdGhhdCBzYW5pdGl6ZWQgdGhlIHZhbHVlLCBvciByZW5hbWVkIHNvbWUKICogcHJvcGVydGllcy9maWVsZHMgYW5kIGZvcmdvdCB0byB1cGRhdGUgdGhlIGJpbmRpbmcgdG8gdGhlIHNhbml0aXplZCB2YWx1ZT8KICoKICogVG8gYmUgc2VjdXJlIGJ5IGRlZmF1bHQsIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGFueSBzdWNoIGJpbmRpbmdzIGFyZSBkaXNhbGxvd2VkIHVubGVzcyB5b3UgY2FuCiAqIGRldGVybWluZSB0aGF0IHNvbWV0aGluZyBleHBsaWNpdGx5IHNheXMgaXQncyBzYWZlIHRvIHVzZSBhIHZhbHVlIGZvciBiaW5kaW5nIGluIHRoYXQKICogY29udGV4dC4gIFlvdSBjYW4gdGhlbiBhdWRpdCB5b3VyIGNvZGUgKGEgc2ltcGxlIGdyZXAgd291bGQgZG8pIHRvIGVuc3VyZSB0aGF0IHRoaXMgaXMgb25seSBkb25lCiAqIGZvciB0aG9zZSB2YWx1ZXMgdGhhdCB5b3UgY2FuIGVhc2lseSB0ZWxsIGFyZSBzYWZlIC0gYmVjYXVzZSB0aGV5IHdlcmUgcmVjZWl2ZWQgZnJvbSB5b3VyIHNlcnZlciwKICogc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSwgZXRjLiAgWW91IGNhbiBvcmdhbml6ZSB5b3VyIGNvZGViYXNlIHRvIGhlbHAgd2l0aCB0aGlzIC0gcGVyaGFwcwogKiBhbGxvd2luZyBvbmx5IHRoZSBmaWxlcyBpbiBhIHNwZWNpZmljIGRpcmVjdG9yeSB0byBkbyB0aGlzLiAgRW5zdXJpbmcgdGhhdCB0aGUgaW50ZXJuYWwgQVBJCiAqIGV4cG9zZWQgYnkgdGhhdCBjb2RlIGRvZXNuJ3QgbWFya3VwIGFyYml0cmFyeSB2YWx1ZXMgYXMgc2FmZSB0aGVuIGJlY29tZXMgYSBtb3JlIG1hbmFnZWFibGUgdGFzay4KICoKICogSW4gdGhlIGNhc2Ugb2YgQW5ndWxhckpTJyBTQ0Ugc2VydmljZSwgb25lIHVzZXMge0BsaW5rIG5nLiRzY2UjbWV0aG9kc190cnVzdEFzICRzY2UudHJ1c3RBc30gCiAqIChhbmQgc2hvcnRoYW5kIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LCBldGMuKSB0bwogKiBvYnRhaW4gdmFsdWVzIHRoYXQgd2lsbCBiZSBhY2NlcHRlZCBieSBTQ0UgLyBwcml2aWxlZ2VkIGNvbnRleHRzLgogKgogKgogKiAjIyBIb3cgZG9lcyBpdCB3b3JrPwogKgogKiBJbiBwcml2aWxlZ2VkIGNvbnRleHRzLCBkaXJlY3RpdmVzIGFuZCBjb2RlIHdpbGwgYmluZCB0byB0aGUgcmVzdWx0IG9mIHtAbGluayBuZy4kc2NlI21ldGhvZHNfZ2V0VHJ1c3RlZAogKiAkc2NlLmdldFRydXN0ZWQoY29udGV4dCwgdmFsdWUpfSByYXRoZXIgdGhhbiB0byB0aGUgdmFsdWUgZGlyZWN0bHkuICBEaXJlY3RpdmVzIHVzZSB7QGxpbmsKICogbmcuJHNjZSNtZXRob2RzX3BhcnNlICRzY2UucGFyc2VBc30gcmF0aGVyIHRoYW4gYCRwYXJzZWAgdG8gd2F0Y2ggYXR0cmlidXRlIGJpbmRpbmdzLCB3aGljaCBwZXJmb3JtcyB0aGUKICoge0BsaW5rIG5nLiRzY2UjbWV0aG9kc19nZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0gYmVoaW5kIHRoZSBzY2VuZXMgb24gbm9uLWNvbnN0YW50IGxpdGVyYWxzLgogKgogKiBBcyBhbiBleGFtcGxlLCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gdXNlcyB7QGxpbmsKICogbmcuJHNjZSNtZXRob2RzX3BhcnNlQXNIdG1sICRzY2UucGFyc2VBc0h0bWwoYmluZGluZyBleHByZXNzaW9uKX0uICBIZXJlJ3MgdGhlIGFjdHVhbCBjb2RlIChzbGlnaHRseQogKiBzaW1wbGlmaWVkKToKICoKICogPHByZSBjbGFzcz0icHJldHR5cHJpbnQiPgogKiAgIHZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgZnVuY3Rpb24oJHNjZSkgewogKiAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAqICAgICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNIdG1sKGF0dHIubmdCaW5kSHRtbCksIGZ1bmN0aW9uKHZhbHVlKSB7CiAqICAgICAgICAgZWxlbWVudC5odG1sKHZhbHVlIHx8ICcnKTsKICogICAgICAgfSk7CiAqICAgICB9OwogKiAgIH1dOwogKiA8L3ByZT4KICoKICogIyMgSW1wYWN0IG9uIGxvYWRpbmcgdGVtcGxhdGVzCiAqCiAqIFRoaXMgYXBwbGllcyBib3RoIHRvIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmctaW5jbHVkZWB9IGRpcmVjdGl2ZSBhcyB3ZWxsIGFzCiAqIGB0ZW1wbGF0ZVVybGAncyBzcGVjaWZpZWQgYnkge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4KICoKICogQnkgZGVmYXVsdCwgQW5ndWxhciBvbmx5IGxvYWRzIHRlbXBsYXRlcyBmcm9tIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlIGFwcGxpY2F0aW9uCiAqIGRvY3VtZW50LiAgVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rIG5nLiRzY2UjbWV0aG9kc19nZXRUcnVzdGVkUmVzb3VyY2VVcmwKICogJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9IG9uIHRoZSB0ZW1wbGF0ZSBVUkwuICBUbyBsb2FkIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgYW5kL29yCiAqIHByb3RvY29scywgeW91IG1heSBlaXRoZXIgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNtZXRob2RzX3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdAogKiB0aGVtfSBvciB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIGl0fSBpbnRvIGEgdHJ1c3RlZCB2YWx1ZS4KICoKICogKlBsZWFzZSBub3RlKjoKICogVGhlIGJyb3dzZXIncwogKiB7QGxpbmsgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdAogKiBTYW1lIE9yaWdpbiBQb2xpY3l9IGFuZCB7QGxpbmsgaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8gQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpfQogKiBwb2xpY3kgYXBwbHkgaW4gYWRkaXRpb24gdG8gdGhpcyBhbmQgbWF5IGZ1cnRoZXIgcmVzdHJpY3Qgd2hldGhlciB0aGUgdGVtcGxhdGUgaXMgc3VjY2Vzc2Z1bGx5CiAqIGxvYWRlZC4gIFRoaXMgbWVhbnMgdGhhdCB3aXRob3V0IHRoZSByaWdodCBDT1JTIHBvbGljeSwgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBhIGRpZmZlcmVudCBkb21haW4KICogd29uJ3Qgd29yayBvbiBhbGwgYnJvd3NlcnMuICBBbHNvLCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGBmaWxlOi8vYCBVUkwgZG9lcyBub3Qgd29yayBvbiBzb21lCiAqIGJyb3dzZXJzLgogKgogKiAjIyBUaGlzIGZlZWxzIGxpa2UgdG9vIG11Y2ggb3ZlcmhlYWQgZm9yIHRoZSBkZXZlbG9wZXI/CiAqCiAqIEl0J3MgaW1wb3J0YW50IHRvIHJlbWVtYmVyIHRoYXQgU0NFIG9ubHkgYXBwbGllcyB0byBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb25zLgogKgogKiBJZiB5b3VyIGV4cHJlc3Npb25zIGFyZSBjb25zdGFudCBsaXRlcmFscywgdGhleSdyZSBhdXRvbWF0aWNhbGx5IHRydXN0ZWQgYW5kIHlvdSBkb24ndCBuZWVkIHRvCiAqIGNhbGwgYCRzY2UudHJ1c3RBc2Agb24gdGhlbS4gIChlLmcuCiAqIGA8ZGl2IG5nLWh0bWwtYmluZC11bnNhZmU9Iic8Yj5pbXBsaWNpdGx5IHRydXN0ZWQ8L2I+JyI+PC9kaXY+YCkganVzdCB3b3Jrcy4KICoKICogQWRkaXRpb25hbGx5LCBgYVtocmVmXWAgYW5kIGBpbWdbc3JjXWAgYXV0b21hdGljYWxseSBzYW5pdGl6ZSB0aGVpciBVUkxzIGFuZCBkbyBub3QgcGFzcyB0aGVtCiAqIHRocm91Z2gge0BsaW5rIG5nLiRzY2UjbWV0aG9kc19nZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0uICBTQ0UgZG9lc24ndCBwbGF5IGEgcm9sZSBoZXJlLgogKgogKiBUaGUgaW5jbHVkZWQge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGNvbWVzIHdpdGggc2FuZSBkZWZhdWx0cyB0byBhbGxvdyB5b3UgdG8gbG9hZAogKiB0ZW1wbGF0ZXMgaW4gYG5nLWluY2x1ZGVgIGZyb20geW91ciBhcHBsaWNhdGlvbidzIGRvbWFpbiB3aXRob3V0IGhhdmluZyB0byBldmVuIGtub3cgYWJvdXQgU0NFLgogKiBJdCBibG9ja3MgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIGxvYWRpbmcgdGVtcGxhdGVzIG92ZXIgaHR0cCBmcm9tIGFuIGh0dHBzCiAqIHNlcnZlZCBkb2N1bWVudC4gIFlvdSBjYW4gY2hhbmdlIHRoZXNlIGJ5IHNldHRpbmcgeW91ciBvd24gY3VzdG9tIHtAbGluawogKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNtZXRob2RzX3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdHN9IGFuZCB7QGxpbmsKICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjbWV0aG9kc19yZXNvdXJjZVVybEJsYWNrbGlzdCBibGFja2xpc3RzfSBmb3IgbWF0Y2hpbmcgc3VjaCBVUkxzLgogKgogKiBUaGlzIHNpZ25pZmljYW50bHkgcmVkdWNlcyB0aGUgb3ZlcmhlYWQuICBJdCBpcyBmYXIgZWFzaWVyIHRvIHBheSB0aGUgc21hbGwgb3ZlcmhlYWQgYW5kIGhhdmUgYW4KICogYXBwbGljYXRpb24gdGhhdCdzIHNlY3VyZSBhbmQgY2FuIGJlIGF1ZGl0ZWQgdG8gdmVyaWZ5IHRoYXQgd2l0aCBtdWNoIG1vcmUgZWFzZSB0aGFuIGJvbHRpbmcKICogc2VjdXJpdHkgb250byBhbiBhcHBsaWNhdGlvbiBsYXRlci4KICoKICogPGEgbmFtZT0iY29udGV4dHMiPjwvYT4KICogIyMgV2hhdCB0cnVzdGVkIGNvbnRleHQgdHlwZXMgYXJlIHN1cHBvcnRlZD8KICoKICogfCBDb250ZXh0ICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgfAogKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18CiAqIHwgYCRzY2UuSFRNTGAgICAgICAgICB8IEZvciBIVE1MIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIFRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gZGlyZWN0aXZlIHVzZXMgdGhpcyBjb250ZXh0IGZvciBiaW5kaW5ncy4gfAogKiB8IGAkc2NlLkNTU2AgICAgICAgICAgfCBGb3IgQ1NTIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIEN1cnJlbnRseSB1bnVzZWQuICBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHwKICogfCBgJHNjZS5VUkxgICAgICAgICAgIHwgRm9yIFVSTHMgdGhhdCBhcmUgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MuICBDdXJyZW50bHkgdW51c2VkIChgPGEgaHJlZj1gIGFuZCBgPGltZyBzcmM9YCBzYW5pdGl6ZSB0aGVpciB1cmxzIGFuZCBkb24ndCBjb25zaXRpdHV0ZSBhbiBTQ0UgY29udGV4dC4gfAogKiB8IGAkc2NlLlJFU09VUkNFX1VSTGAgfCBGb3IgVVJMcyB0aGF0IGFyZSBub3Qgb25seSBzYWZlIHRvIGZvbGxvdyBhcyBsaW5rcywgYnV0IHdob3NlIGNvbnRlbnMgYXJlIGFsc28gc2FmZSB0byBpbmNsdWRlIGluIHlvdXIgYXBwbGljYXRpb24uICBFeGFtcGxlcyBpbmNsdWRlIGBuZy1pbmNsdWRlYCwgYHNyY2AgLyBgbmdTcmNgIGJpbmRpbmdzIGZvciB0YWdzIG90aGVyIHRoYW4gYElNR2AgKGUuZy4gYElGUkFNRWAsIGBPQkpFQ1RgLCBldGMuKSAgPGJyPjxicj5Ob3RlIHRoYXQgYCRzY2UuUkVTT1VSQ0VfVVJMYCBtYWtlcyBhIHN0cm9uZ2VyIHN0YXRlbWVudCBhYm91dCB0aGUgVVJMIHRoYW4gYCRzY2UuVVJMYCBkb2VzIGFuZCB0aGVyZWZvcmUgY29udGV4dHMgcmVxdWlyaW5nIHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5SRVNPVVJDRV9VUkxgIGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoYXQgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlVSTGAgYXJlIHJlcXVpcmVkLiB8CiAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5IHVudXNlZC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfAogKgogKiAjIyBGb3JtYXQgb2YgaXRlbXMgaW4ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI21ldGhvZHNfcmVzb3VyY2VVcmxXaGl0ZWxpc3QgcmVzb3VyY2VVcmxXaGl0ZWxpc3R9L3tAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNtZXRob2RzX3Jlc291cmNlVXJsQmxhY2tsaXN0IEJsYWNrbGlzdH0gPGEgbmFtZT0icmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSI+PC9hPgogKgogKiAgRWFjaCBlbGVtZW50IGluIHRoZXNlIGFycmF5cyBtdXN0IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOgogKgogKiAgLSAqKidzZWxmJyoqCiAqICAgIC0gVGhlIHNwZWNpYWwgKipzdHJpbmcqKiwgYCdzZWxmJ2AsIGNhbiBiZSB1c2VkIHRvIG1hdGNoIGFnYWluc3QgYWxsIFVSTHMgb2YgdGhlICoqc2FtZQogKiAgICAgIGRvbWFpbioqIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudCB1c2luZyB0aGUgKipzYW1lIHByb3RvY29sKiouCiAqICAtICoqU3RyaW5nKiogKGV4Y2VwdCB0aGUgc3BlY2lhbCB2YWx1ZSBgJ3NlbGYnYCkKICogICAgLSBUaGUgc3RyaW5nIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgZnVsbCAqbm9ybWFsaXplZCAvIGFic29sdXRlIFVSTCogb2YgdGhlIHJlc291cmNlCiAqICAgICAgYmVpbmcgdGVzdGVkIChzdWJzdHJpbmcgbWF0Y2hlcyBhcmUgbm90IGdvb2QgZW5vdWdoLikKICogICAgLSBUaGVyZSBhcmUgZXhhY3RseSAqKnR3byB3aWxkY2FyZCBzZXF1ZW5jZXMqKiAtIGAqYCBhbmQgYCoqYC4gIEFsbCBvdGhlciBjaGFyYWN0ZXJzCiAqICAgICAgbWF0Y2ggdGhlbXNlbHZlcy4KICogICAgLSBgKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VyYW5jZXMgb2YgYW55IGNoYXJhY3RlciBvdGhlciB0aGFuIG9uZSBvZiB0aGUgZm9sbG93aW5nIDYKICogICAgICBjaGFyYWN0ZXJzOiAnYDpgJywgJ2AvYCcsICdgLmAnLCAnYD9gJywgJ2AmYCcgYW5kICc7Jy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZQogKiAgICAgIGluIGEgd2hpdGVsaXN0LgogKiAgICAtIGAqKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VyYW5jZXMgb2YgKmFueSogY2hhcmFjdGVyLiAgQXMgc3VjaCwgaXQncyBub3QKICogICAgICBub3QgYXBwcm9wcmlhdGUgdG8gdXNlIGluIGZvciBhIHNjaGVtZSwgZG9tYWluLCBldGMuIGFzIGl0IHdvdWxkIG1hdGNoIHRvbyBtdWNoLiAgKGUuZy4KICogICAgICBodHRwOi8vKiouZXhhbXBsZS5jb20vIHdvdWxkIG1hdGNoIGh0dHA6Ly9ldmlsLmNvbS8/aWdub3JlPS5leGFtcGxlLmNvbS8gYW5kIHRoYXQgbWlnaHQKICogICAgICBub3QgaGF2ZSBiZWVuIHRoZSBpbnRlbnRpb24uKSAgSXQncyB1c2FnZSBhdCB0aGUgdmVyeSBlbmQgb2YgdGhlIHBhdGggaXMgb2suICAoZS5nLgogKiAgICAgIGh0dHA6Ly9mb28uZXhhbXBsZS5jb20vdGVtcGxhdGVzLyoqKS4KICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKQogKiAgICAtICpDYXZlYXQqOiAgV2hpbGUgcmVndWxhciBleHByZXNzaW9ucyBhcmUgcG93ZXJmdWwgYW5kIG9mZmVyIGdyZWF0IGZsZXhpYmlsaXR5LCAgdGhlaXIgc3ludGF4CiAqICAgICAgKGFuZCBhbGwgdGhlIGluZXZpdGFibGUgZXNjYXBpbmcpIG1ha2VzIHRoZW0gKmhhcmRlciB0byBtYWludGFpbiouICBJdCdzIGVhc3kgdG8KICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZAogKiAgICAgIGhhdmUgZ29vZCB0ZXN0IGNvdmVyYWdlLikuICBGb3IgaW5zdGFuY2UsIHRoZSB1c2Ugb2YgYC5gIGluIHRoZSByZWdleCBpcyBjb3JyZWN0IG9ubHkgaW4gYQogKiAgICAgIHNtYWxsIG51bWJlciBvZiBjYXNlcy4gIEEgYC5gIGNoYXJhY3RlciBpbiB0aGUgcmVnZXggdXNlZCB3aGVuIG1hdGNoaW5nIHRoZSBzY2hlbWUgb3IgYQogKiAgICAgIHN1YmRvbWFpbiBjb3VsZCBiZSBtYXRjaGVkIGFnYWluc3QgYSBgOmAgb3IgbGl0ZXJhbCBgLmAgdGhhdCB3YXMgbGlrZWx5IG5vdCBpbnRlbmRlZC4gICBJdAogKiAgICAgIGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHN0cmluZyBwYXR0ZXJucyBhbmQgb25seSBmYWxsIGJhY2sgdG8gcmVndWxhciBleHByZXNzaW9ucwogKiAgICAgIGlmIHRoZXkgYXMgYSBsYXN0IHJlc29ydC4KICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpcwogKiAgICAgIG1hdGNoZWQgYWdhaW5zdCB0aGUgKiplbnRpcmUqKiAqbm9ybWFsaXplZCAvIGFic29sdXRlIFVSTCogb2YgdGhlIHJlc291cmNlIGJlaW5nIHRlc3RlZAogKiAgICAgIChldmVuIHdoZW4gdGhlIFJlZ0V4cCBkaWQgbm90IGhhdmUgdGhlIGBeYCBhbmQgYCRgIGNvZGVzLikgIEluIGFkZGl0aW9uLCBhbnkgZmxhZ3MKICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLgogKiAgICAtIElmIHlvdSBhcmUgZ2VuZXJhdGluZyB5b3VyIEphdmFzY3JpcHQgZnJvbSBzb21lIG90aGVyIHRlbXBsYXRpbmcgZW5naW5lIChub3QKICogICAgICByZWNvbW1lbmRlZCwgZS5nLiBpbiBpc3N1ZSBbIzQwMDZdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzQwMDYpKSwKICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhbgogKiAgICAgIG9uZSBsZXZlbCBvZiBlc2NhcGluZyBkZXBlbmRpbmcgb24geW91ciB0ZW1wbGF0aW5nIGVuZ2luZSBhbmQgdGhlIHdheSB5b3UgaW50ZXJwb2xhdGVkCiAqICAgICAgdGhlIHZhbHVlLikgIERvIG1ha2UgdXNlIG9mIHlvdXIgcGxhdGZvcm0ncyBlc2NhcGluZyBtZWNoYW5pc20gYXMgaXQgbWlnaHQgYmUgZ29vZAogKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgZS5nLiBSdWJ5IGhhcwogKiAgICAgIFtSZWdleHAuZXNjYXBlKHN0cildKGh0dHA6Ly93d3cucnVieS1kb2Mub3JnL2NvcmUtMi4wLjAvUmVnZXhwLmh0bWwjbWV0aG9kLWMtZXNjYXBlKQogKiAgICAgIGFuZCBQeXRob24gaGFzIFtyZS5lc2NhcGVdKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9yZS5odG1sI3JlLmVzY2FwZSkuCiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlCiAqICAgICAgQ2xvc3VyZSBsaWJyYXJ5J3MgW2dvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZShzKV0oCiAqICAgICAgaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfc3RyaW5nX3N0cmluZy5qcy5zb3VyY2UuaHRtbCNsaW5lOTYyKS4KICoKICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSBmb3IgYW4gZXhhbXBsZS4KICoKICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS4KICoKICogQGV4YW1wbGUKPGV4YW1wbGUgbW9kdWxlPSJteVNjZUFwcCI+CjxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogIDxkaXYgbmctY29udHJvbGxlcj0ibXlBcHBDb250cm9sbGVyIGFzIG15Q3RybCI+CiAgICA8aSBuZy1iaW5kLWh0bWw9Im15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWwiIGlkPSJleHBsaWNpdGx5VHJ1c3RlZEh0bWwiPjwvaT48YnI+PGJyPgogICAgPGI+VXNlciBjb21tZW50czwvYj48YnI+CiAgICBCeSBkZWZhdWx0LCBIVE1MIHRoYXQgaXNuJ3QgZXhwbGljaXRseSB0cnVzdGVkIChlLmcuIEFsaWNlJ3MgY29tbWVudCkgaXMgc2FuaXRpemVkIHdoZW4KICAgICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhbgogICAgZXhwbG9pdC4KICAgIDxkaXYgY2xhc3M9IndlbGwiPgogICAgICA8ZGl2IG5nLXJlcGVhdD0idXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50cyI+CiAgICAgICAgPGI+e3t1c2VyQ29tbWVudC5uYW1lfX08L2I+OgogICAgICAgIDxzcGFuIG5nLWJpbmQtaHRtbD0idXNlckNvbW1lbnQuaHRtbENvbW1lbnQiIGNsYXNzPSJodG1sQ29tbWVudCI+PC9zcGFuPgogICAgICAgIDxicj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9maWxlPgoKPGZpbGUgbmFtZT0ic2NyaXB0LmpzIj4KICB2YXIgbXlTY2VBcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlTY2VBcHAnLCBbJ25nU2FuaXRpemUnXSk7CgogIG15U2NlQXBwLmNvbnRyb2xsZXIoIm15QXBwQ29udHJvbGxlciIsIGZ1bmN0aW9uIG15QXBwQ29udHJvbGxlcigkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRzY2UpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgICRodHRwLmdldCgidGVzdF9kYXRhLmpzb24iLCB7Y2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuc3VjY2VzcyhmdW5jdGlvbih1c2VyQ29tbWVudHMpIHsKICAgICAgc2VsZi51c2VyQ29tbWVudHMgPSB1c2VyQ29tbWVudHM7CiAgICB9KTsKICAgIHNlbGYuZXhwbGljaXRseVRydXN0ZWRIdG1sID0gJHNjZS50cnVzdEFzSHRtbCgKICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9InRoaXMudGV4dENvbnRlbnQ9JnF1b3Q7RXhwbGljaXRseSB0cnVzdGVkIEhUTUwgYnlwYXNzZXMgJyArCiAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDsiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTsKICB9KTsKPC9maWxlPgoKPGZpbGUgbmFtZT0idGVzdF9kYXRhLmpzb24iPgpbCiAgeyAibmFtZSI6ICJBbGljZSIsCiAgICAiaHRtbENvbW1lbnQiOgogICAgICAgICI8c3BhbiBvbm1vdXNlb3Zlcj0ndGhpcy50ZXh0Q29udGVudD1cIlBXTjNEIVwiJz5JcyA8aT5hbnlvbmU8L2k+IHJlYWRpbmcgdGhpcz88L3NwYW4+IgogIH0sCiAgeyAibmFtZSI6ICJCb2IiLAogICAgImh0bWxDb21tZW50IjogIjxpPlllcyE8L2k+ICBBbSBJIHRoZSBvbmx5IG90aGVyIG9uZT8iCiAgfQpdCjwvZmlsZT4KCjxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICBkZXNjcmliZSgnU0NFIGRvYyBkZW1vJywgZnVuY3Rpb24oKSB7CiAgICBpdCgnc2hvdWxkIHNhbml0aXplIHVudHJ1c3RlZCB2YWx1ZXMnLCBmdW5jdGlvbigpIHsKICAgICAgZXhwZWN0KGVsZW1lbnQoJy5odG1sQ29tbWVudCcpLmh0bWwoKSkudG9CZSgnPHNwYW4+SXMgPGk+YW55b25lPC9pPiByZWFkaW5nIHRoaXM/PC9zcGFuPicpOwogICAgfSk7CiAgICBpdCgnc2hvdWxkIE5PVCBzYW5pdGl6ZSBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7CiAgICAgIGV4cGVjdChlbGVtZW50KCcjZXhwbGljaXRseVRydXN0ZWRIdG1sJykuaHRtbCgpKS50b0JlKAogICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPSJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgKwogICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDsiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTsKICAgIH0pOwogIH0pOwo8L2ZpbGU+CjwvZXhhbXBsZT4KICoKICoKICoKICogIyMgQ2FuIEkgZGlzYWJsZSBTQ0UgY29tcGxldGVseT8KICoKICogWWVzLCB5b3UgY2FuLiAgSG93ZXZlciwgdGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC4gIFNDRSBnaXZlcyB5b3UgYSBsb3Qgb2Ygc2VjdXJpdHkgYmVuZWZpdHMKICogZm9yIGxpdHRsZSBjb2Rpbmcgb3ZlcmhlYWQuICBJdCB3aWxsIGJlIG11Y2ggaGFyZGVyIHRvIHRha2UgYW4gU0NFIGRpc2FibGVkIGFwcGxpY2F0aW9uIGFuZAogKiBlaXRoZXIgc2VjdXJlIGl0IG9uIHlvdXIgb3duIG9yIGVuYWJsZSBTQ0UgYXQgYSBsYXRlciBzdGFnZS4gIEl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gZGlzYWJsZSBTQ0UKICogZm9yIGNhc2VzIHdoZXJlIHlvdSBoYXZlIGEgbG90IG9mIGV4aXN0aW5nIGNvZGUgdGhhdCB3YXMgd3JpdHRlbiBiZWZvcmUgU0NFIHdhcyBpbnRyb2R1Y2VkIGFuZAogKiB5b3UncmUgbWlncmF0aW5nIHRoZW0gYSBtb2R1bGUgYXQgYSB0aW1lLgogKgogKiBUaGF0IHNhaWQsIGhlcmUncyBob3cgeW91IGNhbiBjb21wbGV0ZWx5IGRpc2FibGUgU0NFOgogKgogKiA8cHJlIGNsYXNzPSJwcmV0dHlwcmludCI+CiAqICAgYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikgewogKiAgICAgLy8gQ29tcGxldGVseSBkaXNhYmxlIFNDRS4gIEZvciBkZW1vbnN0cmF0aW9uIHB1cnBvc2VzIG9ubHkhCiAqICAgICAvLyBEbyBub3QgdXNlIGluIG5ldyBwcm9qZWN0cy4KICogICAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTsKICogICB9KTsKICogPC9wcmU+CiAqCiAqLwovKiBqc2hpbnQgbWF4bGVuOiAxMDAgKi8KCmZ1bmN0aW9uICRTY2VQcm92aWRlcigpIHsKICB2YXIgZW5hYmxlZCA9IHRydWU7CgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLnNjZVByb3ZpZGVyI2VuYWJsZWQKICAgKiBAbWV0aG9kT2YgbmcuJHNjZVByb3ZpZGVyCiAgICogQGZ1bmN0aW9uCiAgICoKICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2YWx1ZSBJZiBwcm92aWRlZCwgdGhlbiBlbmFibGVzL2Rpc2FibGVzIFNDRS4KICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIFNDRSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBFbmFibGVzL2Rpc2FibGVzIFNDRSBhbmQgcmV0dXJucyB0aGUgY3VycmVudCB2YWx1ZS4KICAgKi8KICB0aGlzLmVuYWJsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgIGVuYWJsZWQgPSAhIXZhbHVlOwogICAgfQogICAgcmV0dXJuIGVuYWJsZWQ7CiAgfTsKCgogIC8qIERlc2lnbiBub3RlcyBvbiB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3IgU0NFLgogICAqCiAgICogVGhlIEFQSSBjb250cmFjdCBmb3IgdGhlIFNDRSBkZWxlZ2F0ZQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBUaGUgU0NFIGRlbGVnYXRlIG9iamVjdCBtdXN0IHByb3ZpZGUgdGhlIGZvbGxvd2luZyAzIG1ldGhvZHM6CiAgICoKICAgKiAtIHRydXN0QXMoY29udGV4dEVudW0sIHZhbHVlKQogICAqICAgICBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRlbGwgdGhlIFNDRSBzZXJ2aWNlIHRoYXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIE9LIHRvIHVzZSBpbiB0aGUKICAgKiAgICAgY29udGV4dHMgc3BlY2lmaWVkIGJ5IGNvbnRleHRFbnVtLiAgSXQgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHRoYXQgd2lsbCBiZSBhY2NlcHRlZCBieQogICAqICAgICBnZXRUcnVzdGVkKCkgZm9yIGEgY29tcGF0aWJsZSBjb250ZXh0RW51bSBhbmQgcmV0dXJuIHRoaXMgdmFsdWUuCiAgICoKICAgKiAtIHZhbHVlT2YodmFsdWUpCiAgICogICAgIEZvciB2YWx1ZXMgdGhhdCB3ZXJlIG5vdCBwcm9kdWNlZCBieSB0cnVzdEFzKCksIHJldHVybiB0aGVtIGFzIGlzLiAgRm9yIHZhbHVlcyB0aGF0IHdlcmUKICAgKiAgICAgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgaW5wdXQgdmFsdWUgdG8gdHJ1c3RBcy4gIEJhc2ljYWxseSwgaWYKICAgKiAgICAgdHJ1c3RBcyBpcyB3cmFwcGluZyB0aGUgZ2l2ZW4gdmFsdWVzIGludG8gc29tZSB0eXBlLCB0aGlzIG9wZXJhdGlvbiB1bndyYXBzIGl0IHdoZW4gZ2l2ZW4KICAgKiAgICAgc3VjaCBhIHZhbHVlLgogICAqCiAgICogLSBnZXRUcnVzdGVkKGNvbnRleHRFbnVtLCB2YWx1ZSkKICAgKiAgICAgVGhpcyBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIHRoZSBhIHZhbHVlIHRoYXQgaXMgc2FmZSB0byB1c2UgaW4gdGhlIGNvbnRleHQgc3BlY2lmaWVkIGJ5CiAgICogICAgIGNvbnRleHRFbnVtIG9yIHRocm93IGFuZCBleGNlcHRpb24gb3RoZXJ3aXNlLgogICAqCiAgICogTk9URTogVGhpcyBjb250cmFjdCBkZWxpYmVyYXRlbHkgZG9lcyBOT1Qgc3RhdGUgdGhhdCB2YWx1ZXMgcmV0dXJuZWQgYnkgdHJ1c3RBcygpIG11c3QgYmUKICAgKiBvcGFxdWUgb3Igd3JhcHBlZCBpbiBzb21lIGhvbGRlciBvYmplY3QuICBUaGF0IGhhcHBlbnMgdG8gYmUgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLiAgRm9yCiAgICogaW5zdGFuY2UsIGFuIGltcGxlbWVudGF0aW9uIGNvdWxkIG1haW50YWluIGEgcmVnaXN0cnkgb2YgYWxsIHRydXN0ZWQgb2JqZWN0cyBieSBjb250ZXh0LiAgSW4KICAgKiBzdWNoIGEgY2FzZSwgdHJ1c3RBcygpIHdvdWxkIHJldHVybiB0aGUgc2FtZSBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIGluLiAgZ2V0VHJ1c3RlZCgpIHdvdWxkCiAgICogcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBwYXNzZWQgaW4gaWYgaXQgd2FzIGZvdW5kIGluIHRoZSByZWdpc3RyeSB1bmRlciBhIGNvbXBhdGlibGUgY29udGV4dCBvcgogICAqIHRocm93IGFuIGV4Y2VwdGlvbiBvdGhlcndpc2UuICBBbiBpbXBsZW1lbnRhdGlvbiBtaWdodCBvbmx5IHdyYXAgdmFsdWVzIHNvbWUgb2YgdGhlIHRpbWUgYmFzZWQKICAgKiBvbiBzb21lIGNyaXRlcmlhLiAgZ2V0VHJ1c3RlZCgpIG1pZ2h0IHJldHVybiBhIHZhbHVlIGFuZCBub3QgdGhyb3cgYW4gZXhjZXB0aW9uIGZvciBzcGVjaWFsCiAgICogY29uc3RhbnRzIG9yIG9iamVjdHMgZXZlbiBpZiBub3Qgd3JhcHBlZC4gIEFsbCBzdWNoIGltcGxlbWVudGF0aW9ucyBmdWxmaWxsIHRoaXMgY29udHJhY3QuCiAgICoKICAgKgogICAqIEEgbm90ZSBvbiB0aGUgaW5oZXJpdGFuY2UgbW9kZWwgZm9yIFNDRSBjb250ZXh0cwogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIEkndmUgdXNlZCBpbmhlcml0YW5jZSBhbmQgbWFkZSBSRVNPVVJDRV9VUkwgd3JhcHBlZCB0eXBlcyBhIHN1YnR5cGUgb2YgVVJMIHdyYXBwZWQgdHlwZXMuICBUaGlzCiAgICogaXMgcHVyZWx5IGFuIGltcGxlbWVudGF0aW9uIGRldGFpbHMuCiAgICoKICAgKiBUaGUgY29udHJhY3QgaXMgc2ltcGx5IHRoaXM6CiAgICoKICAgKiAgICAgZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpIHN1Y2NlZWRpbmcgaW1wbGllcyB0aGF0IGdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKQogICAqICAgICB3aWxsIGFsc28gc3VjY2VlZC4KICAgKgogICAqIEluaGVyaXRhbmNlIGhhcHBlbnMgdG8gY2FwdHVyZSB0aGlzIGluIGEgbmF0dXJhbCB3YXkuICBJbiBzb21lIGZ1dHVyZSwgd2UKICAgKiBtYXkgbm90IHVzZSBpbmhlcml0YW5jZSBhbnltb3JlLiAgVGhhdCBpcyBPSyBiZWNhdXNlIG5vIGNvZGUgb3V0c2lkZSBvZgogICAqIHNjZS5qcyBhbmQgc2NlU3BlY3MuanMgd291bGQgbmVlZCB0byBiZSBhd2FyZSBvZiB0aGlzIGRldGFpbC4KICAgKi8KCiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJHNuaWZmZXInLCAnJHNjZURlbGVnYXRlJywgZnVuY3Rpb24oCiAgICAgICAgICAgICAgICAkcGFyc2UsICAgJHNuaWZmZXIsICAgJHNjZURlbGVnYXRlKSB7CiAgICAvLyBQcmVyZXE6IEVuc3VyZSB0aGF0IHdlJ3JlIG5vdCBydW5uaW5nIGluIElFOCBxdWlya3MgbW9kZS4gIEluIHRoYXQgbW9kZSwgSUUgYWxsb3dzCiAgICAvLyB0aGUgImV4cHJlc3Npb24oamF2YXNjcmlwdCBleHByZXNzaW9uKSIgc3ludGF4IHdoaWNoIGlzIGluc2VjdXJlLgogICAgaWYgKGVuYWJsZWQgJiYgJHNuaWZmZXIubXNpZSAmJiAkc25pZmZlci5tc2llRG9jdW1lbnRNb2RlIDwgOCkgewogICAgICB0aHJvdyAkc2NlTWluRXJyKCdpZXF1aXJrcycsCiAgICAgICAgJ1N0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRvZXMgbm90IHN1cHBvcnQgSW50ZXJuZXQgRXhwbG9yZXIgdmVyc2lvbiA8IDkgaW4gcXVpcmtzICcgKwogICAgICAgICdtb2RlLiAgWW91IGNhbiBmaXggdGhpcyBieSBhZGRpbmcgdGhlIHRleHQgPCFkb2N0eXBlIGh0bWw+IHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MICcgKwogICAgICAgICdkb2N1bWVudC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlIGZvciBtb3JlIGluZm9ybWF0aW9uLicpOwogICAgfQoKICAgIHZhciBzY2UgPSBjb3B5KFNDRV9DT05URVhUUyk7CgogICAgLyoqCiAgICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgICAqIEBuYW1lIG5nLnNjZSNpc0VuYWJsZWQKICAgICAqIEBtZXRob2RPZiBuZy4kc2NlCiAgICAgKiBAZnVuY3Rpb24KICAgICAqCiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIFNDRSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuICBJZiB5b3Ugd2FudCB0byBzZXQgdGhlIHZhbHVlLCB5b3UKICAgICAqIGhhdmUgdG8gZG8gaXQgYXQgbW9kdWxlIGNvbmZpZyB0aW1lIG9uIHtAbGluayBuZy4kc2NlUHJvdmlkZXIgJHNjZVByb3ZpZGVyfS4KICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgU0NFIGlzIGVuYWJsZWQuCiAgICAgKi8KICAgIHNjZS5pc0VuYWJsZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBlbmFibGVkOwogICAgfTsKICAgIHNjZS50cnVzdEFzID0gJHNjZURlbGVnYXRlLnRydXN0QXM7CiAgICBzY2UuZ2V0VHJ1c3RlZCA9ICRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkOwogICAgc2NlLnZhbHVlT2YgPSAkc2NlRGVsZWdhdGUudmFsdWVPZjsKCiAgICBpZiAoIWVuYWJsZWQpIHsKICAgICAgc2NlLnRydXN0QXMgPSBzY2UuZ2V0VHJ1c3RlZCA9IGZ1bmN0aW9uKHR5cGUsIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTsKICAgICAgc2NlLnZhbHVlT2YgPSBpZGVudGl0eTsKICAgIH0KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2UjcGFyc2UKICAgICAqIEBtZXRob2RPZiBuZy4kc2NlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi4gIFRoaXMgaXMgbGlrZSB7QGxpbmsKICAgICAqIG5nLiRwYXJzZSAkcGFyc2V9IGFuZCBpcyBpZGVudGljYWwgd2hlbiB0aGUgZXhwcmVzc2lvbiBpcyBhIGxpdGVyYWwgY29uc3RhbnQuICBPdGhlcndpc2UsIGl0CiAgICAgKiB3cmFwcyB0aGUgZXhwcmVzc2lvbiBpbiBhIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2UjbWV0aG9kc19nZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZCgqdHlwZSosCiAgICAgKiAqcmVzdWx0Kil9CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgU0NFIGNvbnRleHQgaW4gd2hpY2ggdGhpcyByZXN1bHQgd2lsbCBiZSB1c2VkLgogICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAgICAgKgogICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncwogICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluCiAgICAgKiAgICAgIGBjb250ZXh0YC4KICAgICAqLwogICAgc2NlLnBhcnNlQXMgPSBmdW5jdGlvbiBzY2VQYXJzZUFzKHR5cGUsIGV4cHIpIHsKICAgICAgdmFyIHBhcnNlZCA9ICRwYXJzZShleHByKTsKICAgICAgaWYgKHBhcnNlZC5saXRlcmFsICYmIHBhcnNlZC5jb25zdGFudCkgewogICAgICAgIHJldHVybiBwYXJzZWQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNjZVBhcnNlQXNUcnVzdGVkKHNlbGYsIGxvY2FscykgewogICAgICAgICAgcmV0dXJuIHNjZS5nZXRUcnVzdGVkKHR5cGUsIHBhcnNlZChzZWxmLCBsb2NhbHMpKTsKICAgICAgICB9OwogICAgICB9CiAgICB9OwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJHNjZSN0cnVzdEFzCiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogRGVsZWdhdGVzIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LiAgQXMgc3VjaCwKICAgICAqIHJldHVybnMgYW4gb2JqZWN0dGhhdCBpcyB0cnVzdGVkIGJ5IGFuZ3VsYXIgZm9yIHVzZSBpbiBzcGVjaWZpZWQgc3RyaWN0IGNvbnRleHR1YWwKICAgICAqIGVzY2FwaW5nIGNvbnRleHRzIChzdWNoIGFzIG5nLWh0bWwtYmluZC11bnNhZmUsIG5nLWluY2x1ZGUsIGFueSBzcmMgYXR0cmlidXRlCiAgICAgKiBpbnRlcnBvbGF0aW9uLCBhbnkgZG9tIGV2ZW50IGJpbmRpbmcgYXR0cmlidXRlIGludGVycG9sYXRpb24gc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pCiAgICAgKiB0aGF0IHVzZXMgdGhlIHByb3ZpZGVkIHZhbHVlLiAgU2VlICoge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIGVuYWJsaW5nIHN0cmljdCBjb250ZXh0dWFsCiAgICAgKiBlc2NhcGluZy4KICAgICAqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgc2FmZSBmb3IgdXNlLiAgZS5nLiB1cmwsCiAgICAgKiAgIHJlc291cmNlX3VybCwgaHRtbCwganMgYW5kIGNzcy4KICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkL3NhZmUuCiAgICAgKiBAcmV0dXJucyB7Kn0gQSB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHN0YW5kIGluIGZvciB0aGUgcHJvdmlkZWQgYHZhbHVlYCBpbiBwbGFjZXMKICAgICAqIHdoZXJlIEFuZ3VsYXIgZXhwZWN0cyBhICRzY2UudHJ1c3RBcygpIHJldHVybiB2YWx1ZS4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJHNjZSN0cnVzdEFzSHRtbAogICAgICogQG1ldGhvZE9mIG5nLiRzY2UKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSHRtbCh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkhUTUwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy4KICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI21ldGhvZHNfZ2V0VHJ1c3RlZEh0bWwKICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXMKICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZQogICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX3RydXN0QXMgJHNjZS50cnVzdEFzfS4pCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2UjdHJ1c3RBc1VybAogICAgICogQG1ldGhvZE9mIG5nLiRzY2UKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzVXJsKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNtZXRob2RzX3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuVVJMLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuCiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX2dldFRydXN0ZWRVcmwKICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRVcmwodmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlcwogICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlCiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI21ldGhvZHNfdHJ1c3RBcyAkc2NlLnRydXN0QXN9LikKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmwKICAgICAqIEBtZXRob2RPZiBuZy4kc2NlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNtZXRob2RzX3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuCiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX2dldFRydXN0ZWRSZXNvdXJjZVVybAogICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXMKICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZSByZXR1cm4KICAgICAqICAgICB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX3RydXN0QXMgJHNjZS50cnVzdEFzfS4pCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2UjdHJ1c3RBc0pzCiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNKcyh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc190cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkpTLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuCiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX2dldFRydXN0ZWRKcwogICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXMKICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZQogICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX3RydXN0QXMgJHNjZS50cnVzdEFzfS4pCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2UjZ2V0VHJ1c3RlZAogICAgICogQG1ldGhvZE9mIG5nLiRzY2UKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIERlbGVnYXRlcyB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI21ldGhvZHNfZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgfS4gIEFzIHN1Y2gsCiAgICAgKiB0YWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2UjbWV0aG9kc190cnVzdEFzIGAkc2NlLnRydXN0QXNgfSgpIGNhbGwgYW5kIHJldHVybnMgdGhlCiAgICAgKiBvcmlnaW5hbGx5IHN1cHBsaWVkIHZhbHVlIGlmIHRoZSBxdWVyaWVkIGNvbnRleHQgdHlwZSBpcyBhIHN1cGVydHlwZSBvZiB0aGUgY3JlYXRlZCB0eXBlLgogICAgICogSWYgdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkLgogICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlI21ldGhvZHNfdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH0KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGwuCiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoZSB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0bwogICAgICogICAgICAgICAgICAgIHtAbGluayBuZy4kc2NlI21ldGhvZHNfdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH0gaWYgdmFsaWQgaW4gdGhpcyBjb250ZXh0LgogICAgICogICAgICAgICAgICAgIE90aGVyd2lzZSwgdGhyb3dzIGFuIGV4Y2VwdGlvbi4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJHNjZSNnZXRUcnVzdGVkSHRtbAogICAgICogQG1ldGhvZE9mIG5nLiRzY2UKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc19nZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC4KICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5IVE1MLCB2YWx1ZSlgCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2UjZ2V0VHJ1c3RlZENzcwogICAgICogQG1ldGhvZE9mIG5nLiRzY2UKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkQ3NzKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNtZXRob2RzX2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuCiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2UjZ2V0VHJ1c3RlZFVybAogICAgICogQG1ldGhvZE9mIG5nLiRzY2UKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkVXJsKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNtZXRob2RzX2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuCiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsCiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc19nZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH0KICAgICAqCiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGAuCiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2UjZ2V0VHJ1c3RlZEpzCiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRKcyh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjbWV0aG9kc19nZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkpTLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuCiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWAKICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJHNjZSNwYXJzZUFzSHRtbAogICAgICogQG1ldGhvZE9mIG5nLiRzY2UKICAgICAqCiAgICAgKiBAZGVzY3JpcHRpb24KICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSHRtbChleHByZXNzaW9uIHN0cmluZylgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlI21ldGhvZHNfcGFyc2UgYCRzY2UucGFyc2VBcygkc2NlLkhUTUwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAgICAgKgogICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncwogICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluCiAgICAgKiAgICAgIGBjb250ZXh0YC4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJHNjZSNwYXJzZUFzQ3NzCiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNDc3ModmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX3BhcnNlIGAkc2NlLnBhcnNlQXMoJHNjZS5DU1MsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAgICAgKgogICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncwogICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluCiAgICAgKiAgICAgIGBjb250ZXh0YC4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJHNjZSNwYXJzZUFzVXJsCiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNVcmwodmFsdWUpYCDihpIKICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX3BhcnNlIGAkc2NlLnBhcnNlQXMoJHNjZS5VUkwsIHZhbHVlKWB9CiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS4KICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246CiAgICAgKgogICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5ncwogICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuCiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluCiAgICAgKiAgICAgIGBjb250ZXh0YC4KICAgICAqLwoKICAgIC8qKgogICAgICogQG5nZG9jIG1ldGhvZAogICAgICogQG5hbWUgbmcuJHNjZSNwYXJzZUFzUmVzb3VyY2VVcmwKICAgICAqIEBtZXRob2RPZiBuZy4kc2NlCiAgICAgKgogICAgICogQGRlc2NyaXB0aW9uCiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSCiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjbWV0aG9kc19wYXJzZSBgJHNjZS5wYXJzZUFzKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuCiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOgogICAgICoKICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3MKICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLgogICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbgogICAgICogICAgICBgY29udGV4dGAuCiAgICAgKi8KCiAgICAvKioKICAgICAqIEBuZ2RvYyBtZXRob2QKICAgICAqIEBuYW1lIG5nLiRzY2UjcGFyc2VBc0pzCiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZQogICAgICoKICAgICAqIEBkZXNjcmlwdGlvbgogICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNKcyh2YWx1ZSlgIOKGkgogICAgICogICAgIHtAbGluayBuZy4kc2NlI21ldGhvZHNfcGFyc2UgYCRzY2UucGFyc2VBcygkc2NlLkpTLCB2YWx1ZSlgfQogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuCiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOgogICAgICoKICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3MKICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLgogICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbgogICAgICogICAgICBgY29udGV4dGAuCiAgICAgKi8KCiAgICAvLyBTaG9ydGhhbmQgZGVsZWdhdGlvbnMuCiAgICB2YXIgcGFyc2UgPSBzY2UucGFyc2VBcywKICAgICAgICBnZXRUcnVzdGVkID0gc2NlLmdldFRydXN0ZWQsCiAgICAgICAgdHJ1c3RBcyA9IHNjZS50cnVzdEFzOwoKICAgIGZvckVhY2goU0NFX0NPTlRFWFRTLCBmdW5jdGlvbiAoZW51bVZhbHVlLCBuYW1lKSB7CiAgICAgIHZhciBsTmFtZSA9IGxvd2VyY2FzZShuYW1lKTsKICAgICAgc2NlW2NhbWVsQ2FzZSgicGFyc2VfYXNfIiArIGxOYW1lKV0gPSBmdW5jdGlvbiAoZXhwcikgewogICAgICAgIHJldHVybiBwYXJzZShlbnVtVmFsdWUsIGV4cHIpOwogICAgICB9OwogICAgICBzY2VbY2FtZWxDYXNlKCJnZXRfdHJ1c3RlZF8iICsgbE5hbWUpXSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHJldHVybiBnZXRUcnVzdGVkKGVudW1WYWx1ZSwgdmFsdWUpOwogICAgICB9OwogICAgICBzY2VbY2FtZWxDYXNlKCJ0cnVzdF9hc18iICsgbE5hbWUpXSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHJldHVybiB0cnVzdEFzKGVudW1WYWx1ZSwgdmFsdWUpOwogICAgICB9OwogICAgfSk7CgogICAgcmV0dXJuIHNjZTsKICB9XTsKfQoKLyoqCiAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCAicHJpdmF0ZSIgc2VydmljZSAhISEKICoKICogQG5hbWUgbmcuJHNuaWZmZXIKICogQHJlcXVpcmVzICR3aW5kb3cKICogQHJlcXVpcmVzICRkb2N1bWVudAogKgogKiBAcHJvcGVydHkge2Jvb2xlYW59IGhpc3RvcnkgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IGh0bWw1IGhpc3RvcnkgYXBpID8KICogQHByb3BlcnR5IHtib29sZWFufSBoYXNoY2hhbmdlIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBoYXNoY2hhbmdlIGV2ZW50ID8KICogQHByb3BlcnR5IHtib29sZWFufSB0cmFuc2l0aW9ucyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgQ1NTIHRyYW5zaXRpb24gZXZlbnRzID8KICogQHByb3BlcnR5IHtib29sZWFufSBhbmltYXRpb25zIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBDU1MgYW5pbWF0aW9uIGV2ZW50cyA/CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGlzIGlzIHZlcnkgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRlc3RpbmcgYnJvd3NlcidzIGZlYXR1cmVzLgogKi8KZnVuY3Rpb24gJFNuaWZmZXJQcm92aWRlcigpIHsKICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50KSB7CiAgICB2YXIgZXZlbnRTdXBwb3J0ID0ge30sCiAgICAgICAgYW5kcm9pZCA9CiAgICAgICAgICBpbnQoKC9hbmRyb2lkIChcZCspLy5leGVjKGxvd2VyY2FzZSgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSksCiAgICAgICAgYm94ZWUgPSAvQm94ZWUvaS50ZXN0KCgkd2luZG93Lm5hdmlnYXRvciB8fCB7fSkudXNlckFnZW50KSwKICAgICAgICBkb2N1bWVudCA9ICRkb2N1bWVudFswXSB8fCB7fSwKICAgICAgICBkb2N1bWVudE1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUsCiAgICAgICAgdmVuZG9yUHJlZml4LAogICAgICAgIHZlbmRvclJlZ2V4ID0gL14oTW96fHdlYmtpdHxPfG1zKSg/PVtBLVpdKS8sCiAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLAogICAgICAgIHRyYW5zaXRpb25zID0gZmFsc2UsCiAgICAgICAgYW5pbWF0aW9ucyA9IGZhbHNlLAogICAgICAgIG1hdGNoOwoKICAgIGlmIChib2R5U3R5bGUpIHsKICAgICAgZm9yKHZhciBwcm9wIGluIGJvZHlTdHlsZSkgewogICAgICAgIGlmKG1hdGNoID0gdmVuZG9yUmVnZXguZXhlYyhwcm9wKSkgewogICAgICAgICAgdmVuZG9yUHJlZml4ID0gbWF0Y2hbMF07CiAgICAgICAgICB2ZW5kb3JQcmVmaXggPSB2ZW5kb3JQcmVmaXguc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB2ZW5kb3JQcmVmaXguc3Vic3RyKDEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZighdmVuZG9yUHJlZml4KSB7CiAgICAgICAgdmVuZG9yUHJlZml4ID0gKCdXZWJraXRPcGFjaXR5JyBpbiBib2R5U3R5bGUpICYmICd3ZWJraXQnOwogICAgICB9CgogICAgICB0cmFuc2l0aW9ucyA9ICEhKCgndHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ1RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSkpOwogICAgICBhbmltYXRpb25zICA9ICEhKCgnYW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpIHx8ICh2ZW5kb3JQcmVmaXggKyAnQW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpKTsKCiAgICAgIGlmIChhbmRyb2lkICYmICghdHJhbnNpdGlvbnN8fCFhbmltYXRpb25zKSkgewogICAgICAgIHRyYW5zaXRpb25zID0gaXNTdHJpbmcoZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uKTsKICAgICAgICBhbmltYXRpb25zID0gaXNTdHJpbmcoZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRBbmltYXRpb24pOwogICAgICB9CiAgICB9CgoKICAgIHJldHVybiB7CiAgICAgIC8vIEFuZHJvaWQgaGFzIGhpc3RvcnkucHVzaFN0YXRlLCBidXQgaXQgZG9lcyBub3QgdXBkYXRlIGxvY2F0aW9uIGNvcnJlY3RseQogICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhdCBhbGwuCiAgICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9kZXRhaWw/aWQ9MTc0NzEKICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTA0CgogICAgICAvLyBvbGRlciB3ZWJraXQgYnJvd3NlciAoNTMzLjkpIG9uIEJveGVlIGJveCBoYXMgZXhhY3RseSB0aGUgc2FtZSBwcm9ibGVtIGFzIEFuZHJvaWQgaGFzCiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGFsc28KICAgICAgLy8gV2UgYXJlIHB1cnBvc2VmdWxseSB1c2luZyBgIShhbmRyb2lkIDwgNClgIHRvIGNvdmVyIHRoZSBjYXNlIHdoZW4gYGFuZHJvaWRgIGlzIHVuZGVmaW5lZAogICAgICAvLyBqc2hpbnQgLVcwMTgKICAgICAgaGlzdG9yeTogISEoJHdpbmRvdy5oaXN0b3J5ICYmICR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgJiYgIShhbmRyb2lkIDwgNCkgJiYgIWJveGVlKSwKICAgICAgLy8ganNoaW50ICtXMDE4CiAgICAgIGhhc2hjaGFuZ2U6ICdvbmhhc2hjaGFuZ2UnIGluICR3aW5kb3cgJiYKICAgICAgICAgICAgICAgICAgLy8gSUU4IGNvbXBhdGlibGUgbW9kZSBsaWVzCiAgICAgICAgICAgICAgICAgICghZG9jdW1lbnRNb2RlIHx8IGRvY3VtZW50TW9kZSA+IDcpLAogICAgICBoYXNFdmVudDogZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAvLyBJRTkgaW1wbGVtZW50cyAnaW5wdXQnIGV2ZW50IGl0J3Mgc28gZnViYXJlZCB0aGF0IHdlIHJhdGhlciBwcmV0ZW5kIHRoYXQgaXQgZG9lc24ndCBoYXZlCiAgICAgICAgLy8gaXQuIEluIHBhcnRpY3VsYXIgdGhlIGV2ZW50IGlzIG5vdCBmaXJlZCB3aGVuIGJhY2tzcGFjZSBvciBkZWxldGUga2V5IGFyZSBwcmVzc2VkIG9yCiAgICAgICAgLy8gd2hlbiBjdXQgb3BlcmF0aW9uIGlzIHBlcmZvcm1lZC4KICAgICAgICBpZiAoZXZlbnQgPT0gJ2lucHV0JyAmJiBtc2llID09IDkpIHJldHVybiBmYWxzZTsKCiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50U3VwcG9ydFtldmVudF0pKSB7CiAgICAgICAgICB2YXIgZGl2RWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICBldmVudFN1cHBvcnRbZXZlbnRdID0gJ29uJyArIGV2ZW50IGluIGRpdkVsbTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBldmVudFN1cHBvcnRbZXZlbnRdOwogICAgICB9LAogICAgICBjc3A6IGNzcCgpLAogICAgICB2ZW5kb3JQcmVmaXg6IHZlbmRvclByZWZpeCwKICAgICAgdHJhbnNpdGlvbnMgOiB0cmFuc2l0aW9ucywKICAgICAgYW5pbWF0aW9ucyA6IGFuaW1hdGlvbnMsCiAgICAgIGFuZHJvaWQ6IGFuZHJvaWQsCiAgICAgIG1zaWUgOiBtc2llLAogICAgICBtc2llRG9jdW1lbnRNb2RlOiBkb2N1bWVudE1vZGUKICAgIH07CiAgfV07Cn0KCmZ1bmN0aW9uICRUaW1lb3V0UHJvdmlkZXIoKSB7CiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRxJywgJyRleGNlcHRpb25IYW5kbGVyJywKICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHEsICAgJGV4Y2VwdGlvbkhhbmRsZXIpIHsKICAgIHZhciBkZWZlcnJlZHMgPSB7fTsKCgogICAgIC8qKgogICAgICAqIEBuZ2RvYyBmdW5jdGlvbgogICAgICAqIEBuYW1lIG5nLiR0aW1lb3V0CiAgICAgICogQHJlcXVpcmVzICRicm93c2VyCiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBBbmd1bGFyJ3Mgd3JhcHBlciBmb3IgYHdpbmRvdy5zZXRUaW1lb3V0YC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgd3JhcHBlZCBpbnRvIGEgdHJ5L2NhdGNoCiAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0bwogICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS4KICAgICAgKgogICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYSB0aW1lb3V0IGZ1bmN0aW9uIGlzIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aGVuCiAgICAgICogdGhlIHRpbWVvdXQgaXMgcmVhY2hlZCBhbmQgdGhlIHRpbWVvdXQgZnVuY3Rpb24gaXMgZXhlY3V0ZWQuCiAgICAgICoKICAgICAgKiBUbyBjYW5jZWwgYSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuCiAgICAgICoKICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiR0aW1lb3V0IGAkdGltZW91dC5mbHVzaCgpYH0gdG8KICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuCiAgICAgICoKICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdob3NlIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVsYXllZC4KICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBEZWxheSBpbiBtaWxsaXNlY29uZHMuCiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2UKICAgICAgKiAgIHdpbGwgaW52b2tlIGBmbmAgd2l0aGluIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSNtZXRob2RzXyRhcHBseSAkYXBwbHl9IGJsb2NrLgogICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIHRoZSB0aW1lb3V0IGlzIHJlYWNoZWQuIFRoZSB2YWx1ZSB0aGlzCiAgICAgICogICBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBpcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgZm5gIGZ1bmN0aW9uLgogICAgICAqIAogICAgICAqLwogICAgZnVuY3Rpb24gdGltZW91dChmbiwgZGVsYXksIGludm9rZUFwcGx5KSB7CiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksCiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSwKICAgICAgICAgIHNraXBBcHBseSA9IChpc0RlZmluZWQoaW52b2tlQXBwbHkpICYmICFpbnZva2VBcHBseSksCiAgICAgICAgICB0aW1lb3V0SWQ7CgogICAgICB0aW1lb3V0SWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHsKICAgICAgICB0cnkgewogICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmbigpKTsKICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlKTsKICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpOwogICAgICAgIH0KICAgICAgICBmaW5hbGx5IHsKICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07CiAgICAgICAgfQoKICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTsKICAgICAgfSwgZGVsYXkpOwoKICAgICAgcHJvbWlzZS4kJHRpbWVvdXRJZCA9IHRpbWVvdXRJZDsKICAgICAgZGVmZXJyZWRzW3RpbWVvdXRJZF0gPSBkZWZlcnJlZDsKCiAgICAgIHJldHVybiBwcm9taXNlOwogICAgfQoKCiAgICAgLyoqCiAgICAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICAgICogQG5hbWUgbmcuJHRpbWVvdXQjY2FuY2VsCiAgICAgICogQG1ldGhvZE9mIG5nLiR0aW1lb3V0CiAgICAgICoKICAgICAgKiBAZGVzY3JpcHRpb24KICAgICAgKiBDYW5jZWxzIGEgdGFzayBhc3NvY2lhdGVkIHdpdGggdGhlIGBwcm9taXNlYC4gQXMgYSByZXN1bHQgb2YgdGhpcywgdGhlIHByb21pc2Ugd2lsbCBiZQogICAgICAqIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uCiAgICAgICoKICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIFByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkdGltZW91dGAgZnVuY3Rpb24uCiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHkKICAgICAgKiAgIGNhbmNlbGVkLgogICAgICAqLwogICAgdGltZW91dC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7CiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7CiAgICAgICAgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdLnJlamVjdCgnY2FuY2VsZWQnKTsKICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdOwogICAgICAgIHJldHVybiAkYnJvd3Nlci5kZWZlci5jYW5jZWwocHJvbWlzZS4kJHRpbWVvdXRJZCk7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKCiAgICByZXR1cm4gdGltZW91dDsKICB9XTsKfQoKLy8gTk9URTogIFRoZSB1c2FnZSBvZiB3aW5kb3cgYW5kIGRvY3VtZW50IGluc3RlYWQgb2YgJHdpbmRvdyBhbmQgJGRvY3VtZW50IGhlcmUgaXMKLy8gZGVsaWJlcmF0ZS4gIFRoaXMgc2VydmljZSBkZXBlbmRzIG9uIHRoZSBzcGVjaWZpYyBiZWhhdmlvciBvZiBhbmNob3Igbm9kZXMgY3JlYXRlZCBieSB0aGUKLy8gYnJvd3NlciAocmVzb2x2aW5nIGFuZCBwYXJzaW5nIFVSTHMpIHRoYXQgaXMgdW5saWtlbHkgdG8gYmUgcHJvdmlkZWQgYnkgbW9jayBvYmplY3RzIGFuZAovLyBjYXVzZSB1cyB0byBicmVhayB0ZXN0cy4gIEluIGFkZGl0aW9uLCB3aGVuIHRoZSBicm93c2VyIHJlc29sdmVzIGEgVVJMIGZvciBYSFIsIGl0Ci8vIGRvZXNuJ3Qga25vdyBhYm91dCBtb2NrZWQgbG9jYXRpb25zIGFuZCByZXNvbHZlcyBVUkxzIHRvIHRoZSByZWFsIGRvY3VtZW50IC0gd2hpY2ggaXMKLy8gZXhhY3RseSB0aGUgYmVoYXZpb3IgbmVlZGVkIGhlcmUuICBUaGVyZSBpcyBsaXR0bGUgdmFsdWUgaXMgbW9ja2luZyB0aGVzZSBvdXQgZm9yIHRoaXMKLy8gc2VydmljZS4KdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwp2YXIgb3JpZ2luVXJsID0gdXJsUmVzb2x2ZSh3aW5kb3cubG9jYXRpb24uaHJlZiwgdHJ1ZSk7CgoKLyoqCiAqCiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBub24tSUUgYnJvd3NlcnMKICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiBBc3NpZ25pbmcgYSBVUkwgdG8gdGhlIGhyZWYgcHJvcGVydHkgb2YgYW4gYW5jaG9yIERPTSBub2RlLCBldmVuIG9uZSBhdHRhY2hlZCB0byB0aGUgRE9NLAogKiByZXN1bHRzIGJvdGggaW4gdGhlIG5vcm1hbGl6aW5nIGFuZCBwYXJzaW5nIG9mIHRoZSBVUkwuICBOb3JtYWxpemluZyBtZWFucyB0aGF0IGEgcmVsYXRpdmUKICogVVJMIHdpbGwgYmUgcmVzb2x2ZWQgaW50byBhbiBhYnNvbHV0ZSBVUkwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LgogKiBQYXJzaW5nIG1lYW5zIHRoYXQgdGhlIGFuY2hvciBub2RlJ3MgaG9zdCwgaG9zdG5hbWUsIHByb3RvY29sLCBwb3J0LCBwYXRobmFtZSBhbmQgcmVsYXRlZAogKiBwcm9wZXJ0aWVzIGFyZSBhbGwgcG9wdWxhdGVkIHRvIHJlZmxlY3QgdGhlIG5vcm1hbGl6ZWQgVVJMLiAgVGhpcyBhcHByb2FjaCBoYXMgd2lkZQogKiBjb21wYXRpYmlsaXR5IC0gU2FmYXJpIDErLCBNb3ppbGxhIDErLCBPcGVyYSA3KyxlIGV0Yy4gIFNlZQogKiBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWwKICoKICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIElFCiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogKiBJRSA+PSA4IGFuZCA8PSAxMCBub3JtYWxpemVzIHRoZSBVUkwgd2hlbiBhc3NpZ25lZCB0byB0aGUgYW5jaG9yIG5vZGUgc2ltaWxhciB0byB0aGUgb3RoZXIKICogYnJvd3NlcnMuICBIb3dldmVyLCB0aGUgcGFyc2VkIGNvbXBvbmVudHMgd2lsbCBub3QgYmUgc2V0IGlmIHRoZSBVUkwgYXNzaWduZWQgZGlkIG5vdCBzcGVjaWZ5CiAqIHRoZW0uICAoZS5nLiBpZiB5b3UgYXNzaWduIGEuaHJlZiA9ICJmb28iLCB0aGVuIGEucHJvdG9jb2wsIGEuaG9zdCwgZXRjLiB3aWxsIGJlIGVtcHR5LikgIFdlCiAqIHdvcmsgYXJvdW5kIHRoYXQgYnkgcGVyZm9ybWluZyB0aGUgcGFyc2luZyBpbiBhIDJuZCBzdGVwIGJ5IHRha2luZyBhIHByZXZpb3VzbHkgbm9ybWFsaXplZAogKiBVUkwgKGUuZy4gYnkgYXNzaWduaW5nIHRvIGEuaHJlZikgYW5kIGFzc2lnbmluZyBpdCBhLmhyZWYgYWdhaW4uICBUaGlzIGNvcnJlY3RseSBwb3B1bGF0ZXMgdGhlCiAqIHByb3BlcnRpZXMgc3VjaCBhcyBwcm90b2NvbCwgaG9zdG5hbWUsIHBvcnQsIGV0Yy4KICoKICogSUU3IGRvZXMgbm90IG5vcm1hbGl6ZSB0aGUgVVJMIHdoZW4gYXNzaWduZWQgdG8gYW4gYW5jaG9yIG5vZGUuICAoQXBwYXJlbnRseSwgaXQgZG9lcywgaWYgb25lCiAqIHVzZXMgdGhlIGlubmVyIEhUTUwgYXBwcm9hY2ggdG8gYXNzaWduIHRoZSBVUkwgYXMgcGFydCBvZiBhbiBIVE1MIHNuaXBwZXQgLQogKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NzI3MjkpICBIb3dldmVyLCBzZXR0aW5nIGltZ1tzcmNdIGRvZXMgbm9ybWFsaXplIHRoZSBVUkwuCiAqIFVuZm9ydHVuYXRlbHksIHNldHRpbmcgaW1nW3NyY10gdG8gc29tZXRoaW5nIGxpa2UgImphdmFzY3JpcHQ6Zm9vIiBvbiBJRSB0aHJvd3MgYW4gZXhjZXB0aW9uLgogKiBTaW5jZSB0aGUgcHJpbWFyeSB1c2FnZSBmb3Igbm9ybWFsaXppbmcgVVJMcyBpcyB0byBzYW5pdGl6ZSBzdWNoIFVSTHMsIHdlIGNhbid0IHVzZSB0aGF0CiAqIG1ldGhvZCBhbmQgSUUgPCA4IGlzIHVuc3VwcG9ydGVkLgogKgogKiBSZWZlcmVuY2VzOgogKiAgIGh0dHA6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxBbmNob3JFbGVtZW50CiAqICAgaHR0cDovL3d3dy5hcHRhbmEuY29tL3JlZmVyZW5jZS9odG1sL2FwaS9IVE1MQW5jaG9yRWxlbWVudC5odG1sCiAqICAgaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzCiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzI5MDIKICogICBodHRwOi8vamFtZXMucGFkb2xzZXkuY29tL2phdmFzY3JpcHQvcGFyc2luZy11cmxzLXdpdGgtdGhlLWRvbS8KICoKICogQGZ1bmN0aW9uCiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWQuCiAqIEBkZXNjcmlwdGlvbiBOb3JtYWxpemVzIGFuZCBwYXJzZXMgYSBVUkwuCiAqIEByZXR1cm5zIHtvYmplY3R9IFJldHVybnMgdGhlIG5vcm1hbGl6ZWQgVVJMIGFzIGEgZGljdGlvbmFyeS4KICoKICogICB8IG1lbWJlciBuYW1lICAgfCBEZXNjcmlwdGlvbiAgICB8CiAqICAgfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfAogKiAgIHwgaHJlZiAgICAgICAgICB8IEEgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBwcm92aWRlZCBVUkwgaWYgaXQgd2FzIG5vdCBhbiBhYnNvbHV0ZSBVUkwgfAogKiAgIHwgcHJvdG9jb2wgICAgICB8IFRoZSBwcm90b2NvbCBpbmNsdWRpbmcgdGhlIHRyYWlsaW5nIGNvbG9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogKiAgIHwgaG9zdCAgICAgICAgICB8IFRoZSBob3N0IGFuZCBwb3J0IChpZiB0aGUgcG9ydCBpcyBub24tZGVmYXVsdCkgb2YgdGhlIG5vcm1hbGl6ZWRVcmwgICAgfAogKiAgIHwgc2VhcmNoICAgICAgICB8IFRoZSBzZWFyY2ggcGFyYW1zLCBtaW51cyB0aGUgcXVlc3Rpb24gbWFyayAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogKiAgIHwgaGFzaCAgICAgICAgICB8IFRoZSBoYXNoIHN0cmluZywgbWludXMgdGhlIGhhc2ggc3ltYm9sCiAqICAgfCBob3N0bmFtZSAgICAgIHwgVGhlIGhvc3RuYW1lCiAqICAgfCBwb3J0ICAgICAgICAgIHwgVGhlIHBvcnQsIHdpdGhvdXQgIjoiCiAqICAgfCBwYXRobmFtZSAgICAgIHwgVGhlIHBhdGhuYW1lLCBiZWdpbm5pbmcgd2l0aCAiLyIKICoKICovCmZ1bmN0aW9uIHVybFJlc29sdmUodXJsLCBiYXNlKSB7CiAgdmFyIGhyZWYgPSB1cmw7CgogIGlmIChtc2llKSB7CiAgICAvLyBOb3JtYWxpemUgYmVmb3JlIHBhcnNlLiAgUmVmZXIgSW1wbGVtZW50YXRpb24gTm90ZXMgb24gd2h5IHRoaXMgaXMKICAgIC8vIGRvbmUgaW4gdHdvIHN0ZXBzIG9uIElFLgogICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCJocmVmIiwgaHJlZik7CiAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjsKICB9CgogIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpOwoKICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzCiAgcmV0dXJuIHsKICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsCiAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLAogICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCwKICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cPy8sICcnKSA6ICcnLAogICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJywKICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSwKICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsCiAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKQogICAgICA/IHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lCiAgICAgIDogJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUKICB9Owp9CgovKioKICogUGFyc2UgYSByZXF1ZXN0IFVSTCBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhIHNhbWUtb3JpZ2luIHJlcXVlc3QgYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LgogKgogKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlcXVlc3RVcmwgVGhlIHVybCBvZiB0aGUgcmVxdWVzdCBhcyBhIHN0cmluZyB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQKICogb3IgYSBwYXJzZWQgVVJMIG9iamVjdC4KICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgZm9yIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuCiAqLwpmdW5jdGlvbiB1cmxJc1NhbWVPcmlnaW4ocmVxdWVzdFVybCkgewogIHZhciBwYXJzZWQgPSAoaXNTdHJpbmcocmVxdWVzdFVybCkpID8gdXJsUmVzb2x2ZShyZXF1ZXN0VXJsKSA6IHJlcXVlc3RVcmw7CiAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVybC5wcm90b2NvbCAmJgogICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVybC5ob3N0KTsKfQoKLyoqCiAqIEBuZ2RvYyBvYmplY3QKICogQG5hbWUgbmcuJHdpbmRvdwogKgogKiBAZGVzY3JpcHRpb24KICogQSByZWZlcmVuY2UgdG8gdGhlIGJyb3dzZXIncyBgd2luZG93YCBvYmplY3QuIFdoaWxlIGB3aW5kb3dgCiAqIGlzIGdsb2JhbGx5IGF2YWlsYWJsZSBpbiBKYXZhU2NyaXB0LCBpdCBjYXVzZXMgdGVzdGFiaWxpdHkgcHJvYmxlbXMsIGJlY2F1c2UKICogaXQgaXMgYSBnbG9iYWwgdmFyaWFibGUuIEluIGFuZ3VsYXIgd2UgYWx3YXlzIHJlZmVyIHRvIGl0IHRocm91Z2ggdGhlCiAqIGAkd2luZG93YCBzZXJ2aWNlLCBzbyBpdCBtYXkgYmUgb3ZlcnJpZGRlbiwgcmVtb3ZlZCBvciBtb2NrZWQgZm9yIHRlc3RpbmcuCiAqCiAqIEV4cHJlc3Npb25zLCBsaWtlIHRoZSBvbmUgZGVmaW5lZCBmb3IgdGhlIGBuZ0NsaWNrYCBkaXJlY3RpdmUgaW4gdGhlIGV4YW1wbGUKICogYmVsb3csIGFyZSBldmFsdWF0ZWQgd2l0aCByZXNwZWN0IHRvIHRoZSBjdXJyZW50IHNjb3BlLiAgVGhlcmVmb3JlLCB0aGVyZSBpcwogKiBubyByaXNrIG9mIGluYWR2ZXJ0ZW50bHkgY29kaW5nIGluIGEgZGVwZW5kZW5jeSBvbiBhIGdsb2JhbCB2YWx1ZSBpbiBzdWNoIGFuCiAqIGV4cHJlc3Npb24uCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlLCAkd2luZG93KSB7CiAgICAgICAgICAgJHNjb3BlLmdyZWV0aW5nID0gJ0hlbGxvLCBXb3JsZCEnOwogICAgICAgICAgICRzY29wZS5kb0dyZWV0aW5nID0gZnVuY3Rpb24oZ3JlZXRpbmcpIHsKICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydChncmVldGluZyk7CiAgICAgICAgICAgfTsKICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9ImdyZWV0aW5nIiAvPgogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPSJkb0dyZWV0aW5nKGdyZWV0aW5nKSI+QUxFUlQ8L2J1dHRvbj4KICAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIGdyZWV0aW5nIGluIHRoZSBpbnB1dCBib3gnLCBmdW5jdGlvbigpIHsKICAgICAgIGlucHV0KCdncmVldGluZycpLmVudGVyKCdIZWxsbywgRTJFIFRlc3RzJyk7CiAgICAgICAvLyBJZiB3ZSBjbGljayB0aGUgYnV0dG9uIGl0IHdpbGwgYmxvY2sgdGhlIHRlc3QgcnVubmVyCiAgICAgICAvLyBlbGVtZW50KCc6YnV0dG9uJykuY2xpY2soKTsKICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwpmdW5jdGlvbiAkV2luZG93UHJvdmlkZXIoKXsKICB0aGlzLiRnZXQgPSB2YWx1ZUZuKHdpbmRvdyk7Cn0KCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLiRmaWx0ZXJQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICoKICogRmlsdGVycyBhcmUganVzdCBmdW5jdGlvbnMgd2hpY2ggdHJhbnNmb3JtIGlucHV0IHRvIGFuIG91dHB1dC4gSG93ZXZlciBmaWx0ZXJzIG5lZWQgdG8gYmUKICogRGVwZW5kZW5jeSBJbmplY3RlZC4gVG8gYWNoaWV2ZSB0aGlzIGEgZmlsdGVyIGRlZmluaXRpb24gY29uc2lzdHMgb2YgYSBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIGlzCiAqIGFubm90YXRlZCB3aXRoIGRlcGVuZGVuY2llcyBhbmQgaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGEgZmlsdGVyIGZ1bmN0aW9uLgogKgogKiA8cHJlPgogKiAgIC8vIEZpbHRlciByZWdpc3RyYXRpb24KICogICBmdW5jdGlvbiBNeU1vZHVsZSgkcHJvdmlkZSwgJGZpbHRlclByb3ZpZGVyKSB7CiAqICAgICAvLyBjcmVhdGUgYSBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIGluamVjdGlvbiAobm90IGFsd2F5cyBuZWVkZWQpCiAqICAgICAkcHJvdmlkZS52YWx1ZSgnZ3JlZXQnLCBmdW5jdGlvbihuYW1lKXsKICogICAgICAgcmV0dXJuICdIZWxsbyAnICsgbmFtZSArICchJzsKICogICAgIH0pOwogKgogKiAgICAgLy8gcmVnaXN0ZXIgYSBmaWx0ZXIgZmFjdG9yeSB3aGljaCB1c2VzIHRoZQogKiAgICAgLy8gZ3JlZXQgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBESS4KICogICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcignZ3JlZXQnLCBmdW5jdGlvbihncmVldCl7CiAqICAgICAgIC8vIHJldHVybiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHdoaWNoIHVzZXMgdGhlIGdyZWV0IHNlcnZpY2UKICogICAgICAgLy8gdG8gZ2VuZXJhdGUgc2FsdXRhdGlvbgogKiAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkgewogKiAgICAgICAgIC8vIGZpbHRlcnMgbmVlZCB0byBiZSBmb3JnaXZpbmcgc28gY2hlY2sgaW5wdXQgdmFsaWRpdHkKICogICAgICAgICByZXR1cm4gdGV4dCAmJiBncmVldCh0ZXh0KSB8fCB0ZXh0OwogKiAgICAgICB9OwogKiAgICAgfSk7CiAqICAgfQogKiA8L3ByZT4KICoKICogVGhlIGZpbHRlciBmdW5jdGlvbiBpcyByZWdpc3RlcmVkIHdpdGggdGhlIGAkaW5qZWN0b3JgIHVuZGVyIHRoZSBmaWx0ZXIgbmFtZSBzdWZmaXggd2l0aAogKiBgRmlsdGVyYC4KICogCiAqIDxwcmU+CiAqICAgaXQoJ3Nob3VsZCBiZSB0aGUgc2FtZSBpbnN0YW5jZScsIGluamVjdCgKICogICAgIGZ1bmN0aW9uKCRmaWx0ZXJQcm92aWRlcikgewogKiAgICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ3JldmVyc2UnLCBmdW5jdGlvbigpewogKiAgICAgICAgIHJldHVybiAuLi47CiAqICAgICAgIH0pOwogKiAgICAgfSwKICogICAgIGZ1bmN0aW9uKCRmaWx0ZXIsIHJldmVyc2VGaWx0ZXIpIHsKICogICAgICAgZXhwZWN0KCRmaWx0ZXIoJ3JldmVyc2UnKSkudG9CZShyZXZlcnNlRmlsdGVyKTsKICogICAgIH0pOwogKiA8L3ByZT4KICoKICoKICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaG93IGFuZ3VsYXIgZmlsdGVycyB3b3JrLCBhbmQgaG93IHRvIGNyZWF0ZSB5b3VyIG93biBmaWx0ZXJzLCBzZWUKICoge0BsaW5rIGd1aWRlL2ZpbHRlciBGaWx0ZXJzfSBpbiB0aGUgQW5ndWxhciBEZXZlbG9wZXIgR3VpZGUuCiAqLwovKioKICogQG5nZG9jIG1ldGhvZAogKiBAbmFtZSBuZy4kZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXIKICogQG1ldGhvZE9mIG5nLiRmaWx0ZXJQcm92aWRlcgogKiBAZGVzY3JpcHRpb24KICogUmVnaXN0ZXIgZmlsdGVyIGZhY3RvcnkgZnVuY3Rpb24uCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlci4KICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gVGhlIGZpbHRlciBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIGlzIGluamVjdGFibGUuCiAqLwoKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgbmcuJGZpbHRlcgogKiBAZnVuY3Rpb24KICogQGRlc2NyaXB0aW9uCiAqIEZpbHRlcnMgYXJlIHVzZWQgZm9yIGZvcm1hdHRpbmcgZGF0YSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuCiAqCiAqIFRoZSBnZW5lcmFsIHN5bnRheCBpbiB0ZW1wbGF0ZXMgaXMgYXMgZm9sbG93czoKICoKICogICAgICAgICB7eyBleHByZXNzaW9uIFt8IGZpbHRlcl9uYW1lWzpwYXJhbWV0ZXJfdmFsdWVdIC4uLiBdIH19CiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiB0byByZXRyaWV2ZQogKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGZpbHRlciBmdW5jdGlvbgogKi8KJEZpbHRlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJ107CmZ1bmN0aW9uICRGaWx0ZXJQcm92aWRlcigkcHJvdmlkZSkgewogIHZhciBzdWZmaXggPSAnRmlsdGVyJzsKCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlcgogICAqIEBtZXRob2RPZiBuZy4kY29udHJvbGxlclByb3ZpZGVyCiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiwgb3IgYW4gb2JqZWN0IG1hcCBvZiBmaWx0ZXJzIHdoZXJlCiAgICogICAgdGhlIGtleXMgYXJlIHRoZSBmaWx0ZXIgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmaWx0ZXIgZmFjdG9yaWVzLgogICAqIEByZXR1cm5zIHtPYmplY3R9IFJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlLCBvciBpZiBhIG1hcCBvZiBmaWx0ZXJzIHdhcyBwcm92aWRlZCB0aGVuIGEgbWFwCiAgICogICAgb2YgdGhlIHJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlcy4KICAgKi8KICBmdW5jdGlvbiByZWdpc3RlcihuYW1lLCBmYWN0b3J5KSB7CiAgICBpZihpc09iamVjdChuYW1lKSkgewogICAgICB2YXIgZmlsdGVycyA9IHt9OwogICAgICBmb3JFYWNoKG5hbWUsIGZ1bmN0aW9uKGZpbHRlciwga2V5KSB7CiAgICAgICAgZmlsdGVyc1trZXldID0gcmVnaXN0ZXIoa2V5LCBmaWx0ZXIpOwogICAgICB9KTsKICAgICAgcmV0dXJuIGZpbHRlcnM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgc3VmZml4LCBmYWN0b3J5KTsKICAgIH0KICB9CiAgdGhpcy5yZWdpc3RlciA9IHJlZ2lzdGVyOwoKICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3RvcikgewogICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQobmFtZSArIHN1ZmZpeCk7CiAgICB9OwogIH1dOwoKICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgCiAgLyogZ2xvYmFsCiAgICBjdXJyZW5jeUZpbHRlcjogZmFsc2UsCiAgICBkYXRlRmlsdGVyOiBmYWxzZSwKICAgIGZpbHRlckZpbHRlcjogZmFsc2UsCiAgICBqc29uRmlsdGVyOiBmYWxzZSwKICAgIGxpbWl0VG9GaWx0ZXI6IGZhbHNlLAogICAgbG93ZXJjYXNlRmlsdGVyOiBmYWxzZSwKICAgIG51bWJlckZpbHRlcjogZmFsc2UsCiAgICBvcmRlckJ5RmlsdGVyOiBmYWxzZSwKICAgIHVwcGVyY2FzZUZpbHRlcjogZmFsc2UsCiAgKi8KCiAgcmVnaXN0ZXIoJ2N1cnJlbmN5JywgY3VycmVuY3lGaWx0ZXIpOwogIHJlZ2lzdGVyKCdkYXRlJywgZGF0ZUZpbHRlcik7CiAgcmVnaXN0ZXIoJ2ZpbHRlcicsIGZpbHRlckZpbHRlcik7CiAgcmVnaXN0ZXIoJ2pzb24nLCBqc29uRmlsdGVyKTsKICByZWdpc3RlcignbGltaXRUbycsIGxpbWl0VG9GaWx0ZXIpOwogIHJlZ2lzdGVyKCdsb3dlcmNhc2UnLCBsb3dlcmNhc2VGaWx0ZXIpOwogIHJlZ2lzdGVyKCdudW1iZXInLCBudW1iZXJGaWx0ZXIpOwogIHJlZ2lzdGVyKCdvcmRlckJ5Jywgb3JkZXJCeUZpbHRlcik7CiAgcmVnaXN0ZXIoJ3VwcGVyY2FzZScsIHVwcGVyY2FzZUZpbHRlcik7Cn0KCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpmaWx0ZXIKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTZWxlY3RzIGEgc3Vic2V0IG9mIGl0ZW1zIGZyb20gYGFycmF5YCBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyBhcnJheS4KICoKICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvdXJjZSBhcnJheS4KICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fGZ1bmN0aW9uKCl9IGV4cHJlc3Npb24gVGhlIHByZWRpY2F0ZSB0byBiZSB1c2VkIGZvciBzZWxlY3RpbmcgaXRlbXMgZnJvbQogKiAgIGBhcnJheWAuCiAqCiAqICAgQ2FuIGJlIG9uZSBvZjoKICoKICogICAtIGBzdHJpbmdgOiBUaGUgc3RyaW5nIGlzIGV2YWx1YXRlZCBhcyBhbiBleHByZXNzaW9uIGFuZCB0aGUgcmVzdWx0aW5nIHZhbHVlIGlzIHVzZWQgZm9yIHN1YnN0cmluZyBtYXRjaCBhZ2FpbnN0CiAqICAgICB0aGUgY29udGVudHMgb2YgdGhlIGBhcnJheWAuIEFsbCBzdHJpbmdzIG9yIG9iamVjdHMgd2l0aCBzdHJpbmcgcHJvcGVydGllcyBpbiBgYXJyYXlgIHRoYXQgY29udGFpbiB0aGlzIHN0cmluZwogKiAgICAgd2lsbCBiZSByZXR1cm5lZC4gVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC4KICoKICogICAtIGBPYmplY3RgOiBBIHBhdHRlcm4gb2JqZWN0IGNhbiBiZSB1c2VkIHRvIGZpbHRlciBzcGVjaWZpYyBwcm9wZXJ0aWVzIG9uIG9iamVjdHMgY29udGFpbmVkCiAqICAgICBieSBgYXJyYXlgLiBGb3IgZXhhbXBsZSBge25hbWU6Ik0iLCBwaG9uZToiMSJ9YCBwcmVkaWNhdGUgd2lsbCByZXR1cm4gYW4gYXJyYXkgb2YgaXRlbXMKICogICAgIHdoaWNoIGhhdmUgcHJvcGVydHkgYG5hbWVgIGNvbnRhaW5pbmcgIk0iIGFuZCBwcm9wZXJ0eSBgcGhvbmVgIGNvbnRhaW5pbmcgIjEiLiBBIHNwZWNpYWwKICogICAgIHByb3BlcnR5IG5hbWUgYCRgIGNhbiBiZSB1c2VkIChhcyBpbiBgeyQ6InRleHQifWApIHRvIGFjY2VwdCBhIG1hdGNoIGFnYWluc3QgYW55CiAqICAgICBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0LiBUaGF0J3MgZXF1aXZhbGVudCB0byB0aGUgc2ltcGxlIHN1YnN0cmluZyBtYXRjaCB3aXRoIGEgYHN0cmluZ2AKICogICAgIGFzIGRlc2NyaWJlZCBhYm92ZS4KICoKICogICAtIGBmdW5jdGlvbih2YWx1ZSlgOiBBIHByZWRpY2F0ZSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byB3cml0ZSBhcmJpdHJhcnkgZmlsdGVycy4gVGhlIGZ1bmN0aW9uIGlzCiAqICAgICBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgLiBUaGUgZmluYWwgcmVzdWx0IGlzIGFuIGFycmF5IG9mIHRob3NlIGVsZW1lbnRzIHRoYXQKICogICAgIHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCl8dHJ1ZXx1bmRlZmluZWR9IGNvbXBhcmF0b3IgQ29tcGFyYXRvciB3aGljaCBpcyB1c2VkIGluCiAqICAgICBkZXRlcm1pbmluZyBpZiB0aGUgZXhwZWN0ZWQgdmFsdWUgKGZyb20gdGhlIGZpbHRlciBleHByZXNzaW9uKSBhbmQgYWN0dWFsIHZhbHVlIChmcm9tCiAqICAgICB0aGUgb2JqZWN0IGluIHRoZSBhcnJheSkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBtYXRjaC4KICoKICogICBDYW4gYmUgb25lIG9mOgogKgogKiAgICAgLSBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZClgOgogKiAgICAgICBUaGUgZnVuY3Rpb24gd2lsbCBiZSBnaXZlbiB0aGUgb2JqZWN0IHZhbHVlIGFuZCB0aGUgcHJlZGljYXRlIHZhbHVlIHRvIGNvbXBhcmUgYW5kCiAqICAgICAgIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiB0aGUgaXRlbSBzaG91bGQgYmUgaW5jbHVkZWQgaW4gZmlsdGVyZWQgcmVzdWx0LgogKgogKiAgICAgLSBgdHJ1ZWA6IEEgc2hvcnRoYW5kIGZvciBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkgeyByZXR1cm4gYW5ndWxhci5lcXVhbHMoZXhwZWN0ZWQsIGFjdHVhbCl9YC4KICogICAgICAgdGhpcyBpcyBlc3NlbnRpYWxseSBzdHJpY3QgY29tcGFyaXNvbiBvZiBleHBlY3RlZCBhbmQgYWN0dWFsLgogKgogKiAgICAgLSBgZmFsc2V8dW5kZWZpbmVkYDogQSBzaG9ydCBoYW5kIGZvciBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgbG9vayBmb3IgYSBzdWJzdHJpbmcgbWF0Y2ggaW4gY2FzZQogKiAgICAgICBpbnNlbnNpdGl2ZSB3YXkuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxkaXYgbmctaW5pdD0iZnJpZW5kcyA9IFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTI3Nid9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzgwMC1CSUctTUFSWSd9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJ30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWV0dGUnLCBwaG9uZTonNTU1LTU2NzgnfV0iPjwvZGl2PgoKICAgICAgIFNlYXJjaDogPGlucHV0IG5nLW1vZGVsPSJzZWFyY2hUZXh0Ij4KICAgICAgIDx0YWJsZSBpZD0ic2VhcmNoVGV4dFJlc3VsdHMiPgogICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj4KICAgICAgICAgPHRyIG5nLXJlcGVhdD0iZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoVGV4dCI+CiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+CiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPgogICAgICAgICA8L3RyPgogICAgICAgPC90YWJsZT4KICAgICAgIDxocj4KICAgICAgIEFueTogPGlucHV0IG5nLW1vZGVsPSJzZWFyY2guJCI+IDxicj4KICAgICAgIE5hbWUgb25seSA8aW5wdXQgbmctbW9kZWw9InNlYXJjaC5uYW1lIj48YnI+CiAgICAgICBQaG9uZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD0ic2VhcmNoLnBob25lIj48YnI+CiAgICAgICBFcXVhbGl0eSA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJzdHJpY3QiPjxicj4KICAgICAgIDx0YWJsZSBpZD0ic2VhcmNoT2JqUmVzdWx0cyI+CiAgICAgICAgIDx0cj48dGg+TmFtZTwvdGg+PHRoPlBob25lPC90aD48L3RyPgogICAgICAgICA8dHIgbmctcmVwZWF0PSJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2g6c3RyaWN0Ij4KICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD4KICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+CiAgICAgICAgIDwvdHI+CiAgICAgICA8L3RhYmxlPgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggYWNyb3NzIGFsbCBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHN0cmluZycsIGZ1bmN0aW9uKCkgewogICAgICAgICBpbnB1dCgnc2VhcmNoVGV4dCcpLmVudGVyKCdtJyk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcignI3NlYXJjaFRleHRSZXN1bHRzIHRyJywgJ2ZyaWVuZCBpbiBmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKS4KICAgICAgICAgICB0b0VxdWFsKFsnTWFyeScsICdNaWtlJywgJ0FkYW0nXSk7CgogICAgICAgICBpbnB1dCgnc2VhcmNoVGV4dCcpLmVudGVyKCc3NicpOwogICAgICAgICBleHBlY3QocmVwZWF0ZXIoJyNzZWFyY2hUZXh0UmVzdWx0cyB0cicsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJ0pvaG4nLCAnSnVsaWUnXSk7CiAgICAgICB9KTsKCiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBpbiBzcGVjaWZpYyBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHByZWRpY2F0ZSBvYmplY3QnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ3NlYXJjaC4kJykuZW50ZXIoJ2knKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCcjc2VhcmNoT2JqUmVzdWx0cyB0cicsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJ01hcnknLCAnTWlrZScsICdKdWxpZScsICdKdWxpZXR0ZSddKTsKICAgICAgIH0pOwogICAgICAgaXQoJ3Nob3VsZCB1c2UgYSBlcXVhbCBjb21wYXJpc29uIHdoZW4gY29tcGFyYXRvciBpcyB0cnVlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGlucHV0KCdzZWFyY2gubmFtZScpLmVudGVyKCdKdWxpZScpOwogICAgICAgICBpbnB1dCgnc3RyaWN0JykuY2hlY2soKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCcjc2VhcmNoT2JqUmVzdWx0cyB0cicsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJ0p1bGllJ10pOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwpmdW5jdGlvbiBmaWx0ZXJGaWx0ZXIoKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBleHByZXNzaW9uLCBjb21wYXJhdG9yKSB7CiAgICBpZiAoIWlzQXJyYXkoYXJyYXkpKSByZXR1cm4gYXJyYXk7CgogICAgdmFyIGNvbXBhcmF0b3JUeXBlID0gdHlwZW9mKGNvbXBhcmF0b3IpLAogICAgICAgIHByZWRpY2F0ZXMgPSBbXTsKCiAgICBwcmVkaWNhdGVzLmNoZWNrID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwcmVkaWNhdGVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgaWYoIXByZWRpY2F0ZXNbal0odmFsdWUpKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfTsKCiAgICBpZiAoY29tcGFyYXRvclR5cGUgIT09ICdmdW5jdGlvbicpIHsKICAgICAgaWYgKGNvbXBhcmF0b3JUeXBlID09PSAnYm9vbGVhbicgJiYgY29tcGFyYXRvcikgewogICAgICAgIGNvbXBhcmF0b3IgPSBmdW5jdGlvbihvYmosIHRleHQpIHsKICAgICAgICAgIHJldHVybiBhbmd1bGFyLmVxdWFscyhvYmosIHRleHQpOwogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29tcGFyYXRvciA9IGZ1bmN0aW9uKG9iaiwgdGV4dCkgewogICAgICAgICAgdGV4dCA9ICgnJyt0ZXh0KS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgcmV0dXJuICgnJytvYmopLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0ZXh0KSA+IC0xOwogICAgICAgIH07CiAgICAgIH0KICAgIH0KCiAgICB2YXIgc2VhcmNoID0gZnVuY3Rpb24ob2JqLCB0ZXh0KXsKICAgICAgaWYgKHR5cGVvZiB0ZXh0ID09ICdzdHJpbmcnICYmIHRleHQuY2hhckF0KDApID09PSAnIScpIHsKICAgICAgICByZXR1cm4gIXNlYXJjaChvYmosIHRleHQuc3Vic3RyKDEpKTsKICAgICAgfQogICAgICBzd2l0Y2ggKHR5cGVvZiBvYmopIHsKICAgICAgICBjYXNlICJib29sZWFuIjoKICAgICAgICBjYXNlICJudW1iZXIiOgogICAgICAgIGNhc2UgInN0cmluZyI6CiAgICAgICAgICByZXR1cm4gY29tcGFyYXRvcihvYmosIHRleHQpOwogICAgICAgIGNhc2UgIm9iamVjdCI6CiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZXh0KSB7CiAgICAgICAgICAgIGNhc2UgIm9iamVjdCI6CiAgICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3Iob2JqLCB0ZXh0KTsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICBmb3IgKCB2YXIgb2JqS2V5IGluIG9iaikgewogICAgICAgICAgICAgICAgaWYgKG9iaktleS5jaGFyQXQoMCkgIT09ICckJyAmJiBzZWFyY2gob2JqW29iaktleV0sIHRleHQpKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBjYXNlICJhcnJheSI6CiAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHNlYXJjaChvYmpbaV0sIHRleHQpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9OwogICAgc3dpdGNoICh0eXBlb2YgZXhwcmVzc2lvbikgewogICAgICBjYXNlICJib29sZWFuIjoKICAgICAgY2FzZSAibnVtYmVyIjoKICAgICAgY2FzZSAic3RyaW5nIjoKICAgICAgICAvLyBTZXQgdXAgZXhwcmVzc2lvbiBvYmplY3QgYW5kIGZhbGwgdGhyb3VnaAogICAgICAgIGV4cHJlc3Npb24gPSB7JDpleHByZXNzaW9ufTsKICAgICAgICAvLyBqc2hpbnQgLVcwODYKICAgICAgY2FzZSAib2JqZWN0IjoKICAgICAgICAvLyBqc2hpbnQgK1cwODYKICAgICAgICBmb3IgKHZhciBrZXkgaW4gZXhwcmVzc2lvbikgewogICAgICAgICAgKGZ1bmN0aW9uKHBhdGgpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBleHByZXNzaW9uW3BhdGhdID09ICd1bmRlZmluZWQnKSByZXR1cm47CiAgICAgICAgICAgIHByZWRpY2F0ZXMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiBzZWFyY2gocGF0aCA9PSAnJCcgPyB2YWx1ZSA6IGdldHRlcih2YWx1ZSwgcGF0aCksIGV4cHJlc3Npb25bcGF0aF0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pKGtleSk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdmdW5jdGlvbic6CiAgICAgICAgcHJlZGljYXRlcy5wdXNoKGV4cHJlc3Npb24pOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiBhcnJheTsKICAgIH0KICAgIHZhciBmaWx0ZXJlZCA9IFtdOwogICAgZm9yICggdmFyIGogPSAwOyBqIDwgYXJyYXkubGVuZ3RoOyBqKyspIHsKICAgICAgdmFyIHZhbHVlID0gYXJyYXlbal07CiAgICAgIGlmIChwcmVkaWNhdGVzLmNoZWNrKHZhbHVlKSkgewogICAgICAgIGZpbHRlcmVkLnB1c2godmFsdWUpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZmlsdGVyZWQ7CiAgfTsKfQoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgbmcuZmlsdGVyOmN1cnJlbmN5CiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdAogKiBzeW1ib2wgZm9yIGN1cnJlbnQgbG9jYWxlIGlzIHVzZWQuCiAqCiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLgogKiBAcGFyYW0ge3N0cmluZz19IHN5bWJvbCBDdXJyZW5jeSBzeW1ib2wgb3IgaWRlbnRpZmllciB0byBiZSBkaXNwbGF5ZWQuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBudW1iZXIuCiAqCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLmFtb3VudCA9IDEyMzQuNTY7CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgbmctbW9kZWw9ImFtb3VudCI+IDxicj4KICAgICAgICAgZGVmYXVsdCBjdXJyZW5jeSBzeW1ib2wgKCQpOiB7e2Ftb3VudCB8IGN1cnJlbmN5fX08YnI+CiAgICAgICAgIGN1c3RvbSBjdXJyZW5jeSBpZGVudGlmaWVyIChVU0QkKToge3thbW91bnQgfCBjdXJyZW5jeToiVVNEJCJ9fQogICAgICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGluaXQgd2l0aCAxMjM0LjU2JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdhbW91bnQgfCBjdXJyZW5jeScpKS50b0JlKCckMSwyMzQuNTYnKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2Ftb3VudCB8IGN1cnJlbmN5OiJVU0QkIicpKS50b0JlKCdVU0QkMSwyMzQuNTYnKTsKICAgICAgIH0pOwogICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ2Ftb3VudCcpLmVudGVyKCctMTIzNCcpOwogICAgICAgICBleHBlY3QoYmluZGluZygnYW1vdW50IHwgY3VycmVuY3knKSkudG9CZSgnKCQxLDIzNC4wMCknKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2Ftb3VudCB8IGN1cnJlbmN5OiJVU0QkIicpKS50b0JlKCcoVVNEJDEsMjM0LjAwKScpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwpjdXJyZW5jeUZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107CmZ1bmN0aW9uIGN1cnJlbmN5RmlsdGVyKCRsb2NhbGUpIHsKICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7CiAgcmV0dXJuIGZ1bmN0aW9uKGFtb3VudCwgY3VycmVuY3lTeW1ib2wpewogICAgaWYgKGlzVW5kZWZpbmVkKGN1cnJlbmN5U3ltYm9sKSkgY3VycmVuY3lTeW1ib2wgPSBmb3JtYXRzLkNVUlJFTkNZX1NZTTsKICAgIHJldHVybiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgMikuCiAgICAgICAgICAgICAgICByZXBsYWNlKC9cdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpOwogIH07Cn0KCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpudW1iZXIKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBGb3JtYXRzIGEgbnVtYmVyIGFzIHRleHQuCiAqCiAqIElmIHRoZSBpbnB1dCBpcyBub3QgYSBudW1iZXIgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLgogKgogKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LgogKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIG51bWJlciB0by4KICogSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQgdGhlbiB0aGUgZnJhY3Rpb24gc2l6ZSBpcyBjb21wdXRlZCBmcm9tIHRoZSBjdXJyZW50IGxvY2FsZSdzIG51bWJlcgogKiBmb3JtYXR0aW5nIHBhdHRlcm4uIEluIHRoZSBjYXNlIG9mIHRoZSBkZWZhdWx0IGxvY2FsZSwgaXQgd2lsbCBiZSAzLgogKiBAcmV0dXJucyB7c3RyaW5nfSBOdW1iZXIgcm91bmRlZCB0byBkZWNpbWFsUGxhY2VzIGFuZCBwbGFjZXMgYSDigJws4oCdIGFmdGVyIGVhY2ggdGhpcmQgZGlnaXQuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLnZhbCA9IDEyMzQuNTY3ODk7CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgRW50ZXIgbnVtYmVyOiA8aW5wdXQgbmctbW9kZWw9J3ZhbCc+PGJyPgogICAgICAgICBEZWZhdWx0IGZvcm1hdHRpbmc6IHt7dmFsIHwgbnVtYmVyfX08YnI+CiAgICAgICAgIE5vIGZyYWN0aW9uczoge3t2YWwgfCBudW1iZXI6MH19PGJyPgogICAgICAgICBOZWdhdGl2ZSBudW1iZXI6IHt7LXZhbCB8IG51bWJlcjo0fX0KICAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgbnVtYmVycycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoYmluZGluZygndmFsIHwgbnVtYmVyJykpLnRvQmUoJzEsMjM0LjU2OCcpOwogICAgICAgICBleHBlY3QoYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkudG9CZSgnMSwyMzUnKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJy12YWwgfCBudW1iZXI6NCcpKS50b0JlKCctMSwyMzQuNTY3OScpOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ3ZhbCcpLmVudGVyKCczMzc0LjMzMycpOwogICAgICAgICBleHBlY3QoYmluZGluZygndmFsIHwgbnVtYmVyJykpLnRvQmUoJzMsMzc0LjMzMycpOwogICAgICAgICBleHBlY3QoYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkudG9CZSgnMywzNzQnKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJy12YWwgfCBudW1iZXI6NCcpKS50b0JlKCctMywzNzQuMzMzMCcpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwoKCm51bWJlckZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107CmZ1bmN0aW9uIG51bWJlckZpbHRlcigkbG9jYWxlKSB7CiAgdmFyIGZvcm1hdHMgPSAkbG9jYWxlLk5VTUJFUl9GT1JNQVRTOwogIHJldHVybiBmdW5jdGlvbihudW1iZXIsIGZyYWN0aW9uU2l6ZSkgewogICAgcmV0dXJuIGZvcm1hdE51bWJlcihudW1iZXIsIGZvcm1hdHMuUEFUVEVSTlNbMF0sIGZvcm1hdHMuR1JPVVBfU0VQLCBmb3JtYXRzLkRFQ0lNQUxfU0VQLAogICAgICBmcmFjdGlvblNpemUpOwogIH07Cn0KCnZhciBERUNJTUFMX1NFUCA9ICcuJzsKZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bWJlciwgcGF0dGVybiwgZ3JvdXBTZXAsIGRlY2ltYWxTZXAsIGZyYWN0aW9uU2l6ZSkgewogIGlmIChpc05hTihudW1iZXIpIHx8ICFpc0Zpbml0ZShudW1iZXIpKSByZXR1cm4gJyc7CgogIHZhciBpc05lZ2F0aXZlID0gbnVtYmVyIDwgMDsKICBudW1iZXIgPSBNYXRoLmFicyhudW1iZXIpOwogIHZhciBudW1TdHIgPSBudW1iZXIgKyAnJywKICAgICAgZm9ybWF0ZWRUZXh0ID0gJycsCiAgICAgIHBhcnRzID0gW107CgogIHZhciBoYXNFeHBvbmVudCA9IGZhbHNlOwogIGlmIChudW1TdHIuaW5kZXhPZignZScpICE9PSAtMSkgewogICAgdmFyIG1hdGNoID0gbnVtU3RyLm1hdGNoKC8oW1xkXC5dKyllKC0/KShcZCspLyk7CiAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMl0gPT0gJy0nICYmIG1hdGNoWzNdID4gZnJhY3Rpb25TaXplICsgMSkgewogICAgICBudW1TdHIgPSAnMCc7CiAgICB9IGVsc2UgewogICAgICBmb3JtYXRlZFRleHQgPSBudW1TdHI7CiAgICAgIGhhc0V4cG9uZW50ID0gdHJ1ZTsKICAgIH0KICB9CgogIGlmICghaGFzRXhwb25lbnQpIHsKICAgIHZhciBmcmFjdGlvbkxlbiA9IChudW1TdHIuc3BsaXQoREVDSU1BTF9TRVApWzFdIHx8ICcnKS5sZW5ndGg7CgogICAgLy8gZGV0ZXJtaW5lIGZyYWN0aW9uU2l6ZSBpZiBpdCBpcyBub3Qgc3BlY2lmaWVkCiAgICBpZiAoaXNVbmRlZmluZWQoZnJhY3Rpb25TaXplKSkgewogICAgICBmcmFjdGlvblNpemUgPSBNYXRoLm1pbihNYXRoLm1heChwYXR0ZXJuLm1pbkZyYWMsIGZyYWN0aW9uTGVuKSwgcGF0dGVybi5tYXhGcmFjKTsKICAgIH0KCiAgICB2YXIgcG93ID0gTWF0aC5wb3coMTAsIGZyYWN0aW9uU2l6ZSk7CiAgICBudW1iZXIgPSBNYXRoLnJvdW5kKG51bWJlciAqIHBvdykgLyBwb3c7CiAgICB2YXIgZnJhY3Rpb24gPSAoJycgKyBudW1iZXIpLnNwbGl0KERFQ0lNQUxfU0VQKTsKICAgIHZhciB3aG9sZSA9IGZyYWN0aW9uWzBdOwogICAgZnJhY3Rpb24gPSBmcmFjdGlvblsxXSB8fCAnJzsKCiAgICB2YXIgaSwgcG9zID0gMCwKICAgICAgICBsZ3JvdXAgPSBwYXR0ZXJuLmxnU2l6ZSwKICAgICAgICBncm91cCA9IHBhdHRlcm4uZ1NpemU7CgogICAgaWYgKHdob2xlLmxlbmd0aCA+PSAobGdyb3VwICsgZ3JvdXApKSB7CiAgICAgIHBvcyA9IHdob2xlLmxlbmd0aCAtIGxncm91cDsKICAgICAgZm9yIChpID0gMDsgaSA8IHBvczsgaSsrKSB7CiAgICAgICAgaWYgKChwb3MgLSBpKSVncm91cCA9PT0gMCAmJiBpICE9PSAwKSB7CiAgICAgICAgICBmb3JtYXRlZFRleHQgKz0gZ3JvdXBTZXA7CiAgICAgICAgfQogICAgICAgIGZvcm1hdGVkVGV4dCArPSB3aG9sZS5jaGFyQXQoaSk7CiAgICAgIH0KICAgIH0KCiAgICBmb3IgKGkgPSBwb3M7IGkgPCB3aG9sZS5sZW5ndGg7IGkrKykgewogICAgICBpZiAoKHdob2xlLmxlbmd0aCAtIGkpJWxncm91cCA9PT0gMCAmJiBpICE9PSAwKSB7CiAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IGdyb3VwU2VwOwogICAgICB9CiAgICAgIGZvcm1hdGVkVGV4dCArPSB3aG9sZS5jaGFyQXQoaSk7CiAgICB9CgogICAgLy8gZm9ybWF0IGZyYWN0aW9uIHBhcnQuCiAgICB3aGlsZShmcmFjdGlvbi5sZW5ndGggPCBmcmFjdGlvblNpemUpIHsKICAgICAgZnJhY3Rpb24gKz0gJzAnOwogICAgfQoKICAgIGlmIChmcmFjdGlvblNpemUgJiYgZnJhY3Rpb25TaXplICE9PSAiMCIpIGZvcm1hdGVkVGV4dCArPSBkZWNpbWFsU2VwICsgZnJhY3Rpb24uc3Vic3RyKDAsIGZyYWN0aW9uU2l6ZSk7CiAgfSBlbHNlIHsKCiAgICBpZiAoZnJhY3Rpb25TaXplID4gMCAmJiBudW1iZXIgPiAtMSAmJiBudW1iZXIgPCAxKSB7CiAgICAgIGZvcm1hdGVkVGV4dCA9IG51bWJlci50b0ZpeGVkKGZyYWN0aW9uU2l6ZSk7CiAgICB9CiAgfQoKICBwYXJ0cy5wdXNoKGlzTmVnYXRpdmUgPyBwYXR0ZXJuLm5lZ1ByZSA6IHBhdHRlcm4ucG9zUHJlKTsKICBwYXJ0cy5wdXNoKGZvcm1hdGVkVGV4dCk7CiAgcGFydHMucHVzaChpc05lZ2F0aXZlID8gcGF0dGVybi5uZWdTdWYgOiBwYXR0ZXJuLnBvc1N1Zik7CiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpOwp9CgpmdW5jdGlvbiBwYWROdW1iZXIobnVtLCBkaWdpdHMsIHRyaW0pIHsKICB2YXIgbmVnID0gJyc7CiAgaWYgKG51bSA8IDApIHsKICAgIG5lZyA9ICAnLSc7CiAgICBudW0gPSAtbnVtOwogIH0KICBudW0gPSAnJyArIG51bTsKICB3aGlsZShudW0ubGVuZ3RoIDwgZGlnaXRzKSBudW0gPSAnMCcgKyBudW07CiAgaWYgKHRyaW0pCiAgICBudW0gPSBudW0uc3Vic3RyKG51bS5sZW5ndGggLSBkaWdpdHMpOwogIHJldHVybiBuZWcgKyBudW07Cn0KCgpmdW5jdGlvbiBkYXRlR2V0dGVyKG5hbWUsIHNpemUsIG9mZnNldCwgdHJpbSkgewogIG9mZnNldCA9IG9mZnNldCB8fCAwOwogIHJldHVybiBmdW5jdGlvbihkYXRlKSB7CiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTsKICAgIGlmIChvZmZzZXQgPiAwIHx8IHZhbHVlID4gLW9mZnNldCkKICAgICAgdmFsdWUgKz0gb2Zmc2V0OwogICAgaWYgKHZhbHVlID09PSAwICYmIG9mZnNldCA9PSAtMTIgKSB2YWx1ZSA9IDEyOwogICAgcmV0dXJuIHBhZE51bWJlcih2YWx1ZSwgc2l6ZSwgdHJpbSk7CiAgfTsKfQoKZnVuY3Rpb24gZGF0ZVN0ckdldHRlcihuYW1lLCBzaG9ydEZvcm0pIHsKICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0cykgewogICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7CiAgICB2YXIgZ2V0ID0gdXBwZXJjYXNlKHNob3J0Rm9ybSA/ICgnU0hPUlQnICsgbmFtZSkgOiBuYW1lKTsKCiAgICByZXR1cm4gZm9ybWF0c1tnZXRdW3ZhbHVlXTsKICB9Owp9CgpmdW5jdGlvbiB0aW1lWm9uZUdldHRlcihkYXRlKSB7CiAgdmFyIHpvbmUgPSAtMSAqIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTsKICB2YXIgcGFkZGVkWm9uZSA9ICh6b25lID49IDApID8gIisiIDogIiI7CgogIHBhZGRlZFpvbmUgKz0gcGFkTnVtYmVyKE1hdGhbem9uZSA+IDAgPyAnZmxvb3InIDogJ2NlaWwnXSh6b25lIC8gNjApLCAyKSArCiAgICAgICAgICAgICAgICBwYWROdW1iZXIoTWF0aC5hYnMoem9uZSAlIDYwKSwgMik7CgogIHJldHVybiBwYWRkZWRab25lOwp9CgpmdW5jdGlvbiBhbXBtR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHsKICByZXR1cm4gZGF0ZS5nZXRIb3VycygpIDwgMTIgPyBmb3JtYXRzLkFNUE1TWzBdIDogZm9ybWF0cy5BTVBNU1sxXTsKfQoKdmFyIERBVEVfRk9STUFUUyA9IHsKICB5eXl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDQpLAogICAgeXk6IGRhdGVHZXR0ZXIoJ0Z1bGxZZWFyJywgMiwgMCwgdHJ1ZSksCiAgICAgeTogZGF0ZUdldHRlcignRnVsbFllYXInLCAxKSwKICBNTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcpLAogICBNTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJywgdHJ1ZSksCiAgICBNTTogZGF0ZUdldHRlcignTW9udGgnLCAyLCAxKSwKICAgICBNOiBkYXRlR2V0dGVyKCdNb250aCcsIDEsIDEpLAogICAgZGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAyKSwKICAgICBkOiBkYXRlR2V0dGVyKCdEYXRlJywgMSksCiAgICBISDogZGF0ZUdldHRlcignSG91cnMnLCAyKSwKICAgICBIOiBkYXRlR2V0dGVyKCdIb3VycycsIDEpLAogICAgaGg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiwgLTEyKSwKICAgICBoOiBkYXRlR2V0dGVyKCdIb3VycycsIDEsIC0xMiksCiAgICBtbTogZGF0ZUdldHRlcignTWludXRlcycsIDIpLAogICAgIG06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAxKSwKICAgIHNzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMiksCiAgICAgczogZGF0ZUdldHRlcignU2Vjb25kcycsIDEpLAogICAgIC8vIHdoaWxlIElTTyA4NjAxIHJlcXVpcmVzIGZyYWN0aW9ucyB0byBiZSBwcmVmaXhlZCB3aXRoIGAuYCBvciBgLGAKICAgICAvLyB3ZSBjYW4gYmUganVzdCBzYWZlbHkgcmVseSBvbiB1c2luZyBgc3NzYCBzaW5jZSB3ZSBjdXJyZW50bHkgZG9uJ3Qgc3VwcG9ydCBzaW5nbGUgb3IgdHdvIGRpZ2l0IGZyYWN0aW9ucwogICBzc3M6IGRhdGVHZXR0ZXIoJ01pbGxpc2Vjb25kcycsIDMpLAogIEVFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScpLAogICBFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScsIHRydWUpLAogICAgIGE6IGFtcG1HZXR0ZXIsCiAgICAgWjogdGltZVpvbmVHZXR0ZXIKfTsKCnZhciBEQVRFX0ZPUk1BVFNfU1BMSVQgPSAvKCg/OlteeU1kSGhtc2FaRSddKyl8KD86Jyg/OlteJ118JycpKicpfCg/OkUrfHkrfE0rfGQrfEgrfGgrfG0rfHMrfGF8WikpKC4qKS8sCiAgICBOVU1CRVJfU1RSSU5HID0gL15cLT9cZCskLzsKCi8qKgogKiBAbmdkb2MgZmlsdGVyCiAqIEBuYW1lIG5nLmZpbHRlcjpkYXRlCiAqIEBmdW5jdGlvbgogKgogKiBAZGVzY3JpcHRpb24KICogICBGb3JtYXRzIGBkYXRlYCB0byBhIHN0cmluZyBiYXNlZCBvbiB0aGUgcmVxdWVzdGVkIGBmb3JtYXRgLgogKgogKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czoKICoKICogICAqIGAneXl5eSdgOiA0IGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIgKGUuZy4gQUQgMSA9PiAwMDAxLCBBRCAyMDEwID0+IDIwMTApCiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApCiAqICAgKiBgJ3knYDogMSBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyLCBlLmcuIChBRCAxID0+IDEsIEFEIDE5OSA9PiAxOTkpCiAqICAgKiBgJ01NTU0nYDogTW9udGggaW4geWVhciAoSmFudWFyeS1EZWNlbWJlcikKICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpCiAqICAgKiBgJ01NJ2A6IE1vbnRoIGluIHllYXIsIHBhZGRlZCAoMDEtMTIpCiAqICAgKiBgJ00nYDogTW9udGggaW4geWVhciAoMS0xMikKICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKQogKiAgICogYCdkJ2A6IERheSBpbiBtb250aCAoMS0zMSkKICogICAqIGAnRUVFRSdgOiBEYXkgaW4gV2VlaywoU3VuZGF5LVNhdHVyZGF5KQogKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KQogKiAgICogYCdISCdgOiBIb3VyIGluIGRheSwgcGFkZGVkICgwMC0yMykKICogICAqIGAnSCdgOiBIb3VyIGluIGRheSAoMC0yMykKICogICAqIGAnaGgnYDogSG91ciBpbiBhbS9wbSwgcGFkZGVkICgwMS0xMikKICogICAqIGAnaCdgOiBIb3VyIGluIGFtL3BtLCAoMS0xMikKICogICAqIGAnbW0nYDogTWludXRlIGluIGhvdXIsIHBhZGRlZCAoMDAtNTkpCiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpCiAqICAgKiBgJ3NzJ2A6IFNlY29uZCBpbiBtaW51dGUsIHBhZGRlZCAoMDAtNTkpCiAqICAgKiBgJ3MnYDogU2Vjb25kIGluIG1pbnV0ZSAoMC01OSkKICogICAqIGAnLnNzcycgb3IgJyxzc3MnYDogTWlsbGlzZWNvbmQgaW4gc2Vjb25kLCBwYWRkZWQgKDAwMC05OTkpCiAqICAgKiBgJ2EnYDogYW0vcG0gbWFya2VyCiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLSsxMjAwKQogKgogKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYWxzbyBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBwcmVkZWZpbmVkCiAqICAge0BsaW5rIGd1aWRlL2kxOG4gbG9jYWxpemFibGUgZm9ybWF0c306CiAqCiAqICAgKiBgJ21lZGl1bSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NIGQsIHkgaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZQogKiAgICAgKGUuZy4gU2VwIDMsIDIwMTAgMTI6MDU6MDggcG0pCiAqICAgKiBgJ3Nob3J0J2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXkgaDptbSBhJ2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gOS8zLzEwIDEyOjA1IHBtKQogKiAgICogYCdmdWxsRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnRUVFRSwgTU1NTSBkLHknYCBmb3IgZW5fVVMgIGxvY2FsZQogKiAgICAgKGUuZy4gRnJpZGF5LCBTZXB0ZW1iZXIgMywgMjAxMCkKICogICAqIGAnbG9uZ0RhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcHRlbWJlciAzLCAyMDEwKQogKiAgICogYCdtZWRpdW1EYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcCAzLCAyMDEwKQogKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKQogKiAgICogYCdtZWRpdW1UaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1OjA4IHBtKQogKiAgICogYCdzaG9ydFRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW0gYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDUgcG0pCiAqCiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBjb250YWluIGxpdGVyYWwgdmFsdWVzLiBUaGVzZSBuZWVkIHRvIGJlIHF1b3RlZCB3aXRoIHNpbmdsZSBxdW90ZXMgKGUuZy4KICogICBgImggJ2luIHRoZSBtb3JuaW5nJyJgKS4gSW4gb3JkZXIgdG8gb3V0cHV0IHNpbmdsZSBxdW90ZSwgdXNlIHR3byBzaW5nbGUgcXVvdGVzIGluIGEgc2VxdWVuY2UKICogICAoZS5nLiBgImggJ28nJ2Nsb2NrJyJgKS4KICoKICogQHBhcmFtIHsoRGF0ZXxudW1iZXJ8c3RyaW5nKX0gZGF0ZSBEYXRlIHRvIGZvcm1hdCBlaXRoZXIgYXMgRGF0ZSBvYmplY3QsIG1pbGxpc2Vjb25kcyAoc3RyaW5nIG9yCiAqICAgIG51bWJlcikgb3IgdmFyaW91cyBJU08gODYwMSBkYXRldGltZSBzdHJpbmcgZm9ybWF0cyAoZS5nLiB5eXl5LU1NLWRkVEhIOm1tOnNzLlNTU1ogYW5kIGl0cwogKiAgICBzaG9ydGVyIHZlcnNpb25zIGxpa2UgeXl5eS1NTS1kZFRISDptbVosIHl5eXktTU0tZGQgb3IgeXl5eU1NZGRUSEhtbXNzWikuIElmIG5vIHRpbWV6b25lIGlzCiAqICAgIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGlucHV0LCB0aGUgdGltZSBpcyBjb25zaWRlcmVkIHRvIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS4KICogQHBhcmFtIHtzdHJpbmc9fSBmb3JtYXQgRm9ybWF0dGluZyBydWxlcyAoc2VlIERlc2NyaXB0aW9uKS4gSWYgbm90IHNwZWNpZmllZCwKICogICAgYG1lZGl1bURhdGVgIGlzIHVzZWQuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgb3IgdGhlIGlucHV0IGlmIGlucHV0IGlzIG5vdCByZWNvZ25pemVkIGFzIGRhdGUvbWlsbGlzLgogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjoKICAgICAgICAgICB7ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08YnI+CiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjoKICAgICAgICAgIHt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTxicj4KICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+OgogICAgICAgICAge3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08YnI+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBkYXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCIxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJyIpKS4KICAgICAgICAgICAgdG9NYXRjaCgvT2N0IDJcZCwgMjAxMCBcZHsxLDJ9OlxkezJ9OlxkezJ9IChBTXxQTSkvKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoIjEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonIikpLgogICAgICAgICAgICB0b01hdGNoKC8yMDEwXC0xMFwtMlxkIFxkezJ9OlxkezJ9OlxkezJ9IChcLXxcKyk/XGR7NH0vKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSciKSkuCiAgICAgICAgICAgIHRvTWF0Y2goLzEwXC8yXGRcLzIwMTAgQCBcZHsxLDJ9OlxkezJ9KEFNfFBNKS8pOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwpkYXRlRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTsKZnVuY3Rpb24gZGF0ZUZpbHRlcigkbG9jYWxlKSB7CgoKICB2YXIgUl9JU084NjAxX1NUUiA9IC9eKFxkezR9KS0/KFxkXGQpLT8oXGRcZCkoPzpUKFxkXGQpKD86Oj8oXGRcZCkoPzo6PyhcZFxkKSg/OlwuKFxkKykpPyk/KT8oWnwoWystXSkoXGRcZCk6PyhcZFxkKSk/KT8kLzsKICAgICAgICAgICAgICAgICAgICAgLy8gMSAgICAgICAgMiAgICAgICAzICAgICAgICAgNCAgICAgICAgICA1ICAgICAgICAgIDYgICAgICAgICAgNyAgICAgICAgICA4ICA5ICAgICAxMCAgICAgIDExCiAgZnVuY3Rpb24ganNvblN0cmluZ1RvRGF0ZShzdHJpbmcpIHsKICAgIHZhciBtYXRjaDsKICAgIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChSX0lTTzg2MDFfU1RSKSkgewogICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApLAogICAgICAgICAgdHpIb3VyID0gMCwKICAgICAgICAgIHR6TWluICA9IDAsCiAgICAgICAgICBkYXRlU2V0dGVyID0gbWF0Y2hbOF0gPyBkYXRlLnNldFVUQ0Z1bGxZZWFyIDogZGF0ZS5zZXRGdWxsWWVhciwKICAgICAgICAgIHRpbWVTZXR0ZXIgPSBtYXRjaFs4XSA/IGRhdGUuc2V0VVRDSG91cnMgOiBkYXRlLnNldEhvdXJzOwoKICAgICAgaWYgKG1hdGNoWzldKSB7CiAgICAgICAgdHpIb3VyID0gaW50KG1hdGNoWzldICsgbWF0Y2hbMTBdKTsKICAgICAgICB0ek1pbiA9IGludChtYXRjaFs5XSArIG1hdGNoWzExXSk7CiAgICAgIH0KICAgICAgZGF0ZVNldHRlci5jYWxsKGRhdGUsIGludChtYXRjaFsxXSksIGludChtYXRjaFsyXSkgLSAxLCBpbnQobWF0Y2hbM10pKTsKICAgICAgdmFyIGggPSBpbnQobWF0Y2hbNF18fDApIC0gdHpIb3VyOwogICAgICB2YXIgbSA9IGludChtYXRjaFs1XXx8MCkgLSB0ek1pbjsKICAgICAgdmFyIHMgPSBpbnQobWF0Y2hbNl18fDApOwogICAgICB2YXIgbXMgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoJzAuJyArIChtYXRjaFs3XXx8MCkpICogMTAwMCk7CiAgICAgIHRpbWVTZXR0ZXIuY2FsbChkYXRlLCBoLCBtLCBzLCBtcyk7CiAgICAgIHJldHVybiBkYXRlOwogICAgfQogICAgcmV0dXJuIHN0cmluZzsKICB9CgoKICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0KSB7CiAgICB2YXIgdGV4dCA9ICcnLAogICAgICAgIHBhcnRzID0gW10sCiAgICAgICAgZm4sIG1hdGNoOwoKICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnbWVkaXVtRGF0ZSc7CiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7CiAgICBpZiAoaXNTdHJpbmcoZGF0ZSkpIHsKICAgICAgaWYgKE5VTUJFUl9TVFJJTkcudGVzdChkYXRlKSkgewogICAgICAgIGRhdGUgPSBpbnQoZGF0ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZGF0ZSA9IGpzb25TdHJpbmdUb0RhdGUoZGF0ZSk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoaXNOdW1iZXIoZGF0ZSkpIHsKICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpOwogICAgfQoKICAgIGlmICghaXNEYXRlKGRhdGUpKSB7CiAgICAgIHJldHVybiBkYXRlOwogICAgfQoKICAgIHdoaWxlKGZvcm1hdCkgewogICAgICBtYXRjaCA9IERBVEVfRk9STUFUU19TUExJVC5leGVjKGZvcm1hdCk7CiAgICAgIGlmIChtYXRjaCkgewogICAgICAgIHBhcnRzID0gY29uY2F0KHBhcnRzLCBtYXRjaCwgMSk7CiAgICAgICAgZm9ybWF0ID0gcGFydHMucG9wKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGFydHMucHVzaChmb3JtYXQpOwogICAgICAgIGZvcm1hdCA9IG51bGw7CiAgICAgIH0KICAgIH0KCiAgICBmb3JFYWNoKHBhcnRzLCBmdW5jdGlvbih2YWx1ZSl7CiAgICAgIGZuID0gREFURV9GT1JNQVRTW3ZhbHVlXTsKICAgICAgdGV4dCArPSBmbiA/IGZuKGRhdGUsICRsb2NhbGUuREFURVRJTUVfRk9STUFUUykKICAgICAgICAgICAgICAgICA6IHZhbHVlLnJlcGxhY2UoLyheJ3wnJCkvZywgJycpLnJlcGxhY2UoLycnL2csICInIik7CiAgICB9KTsKCiAgICByZXR1cm4gdGV4dDsKICB9Owp9CgoKLyoqCiAqIEBuZ2RvYyBmaWx0ZXIKICogQG5hbWUgbmcuZmlsdGVyOmpzb24KICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiAgIEFsbG93cyB5b3UgdG8gY29udmVydCBhIEphdmFTY3JpcHQgb2JqZWN0IGludG8gSlNPTiBzdHJpbmcuCiAqCiAqICAgVGhpcyBmaWx0ZXIgaXMgbW9zdGx5IHVzZWZ1bCBmb3IgZGVidWdnaW5nLiBXaGVuIHVzaW5nIHRoZSBkb3VibGUgY3VybHkge3t2YWx1ZX19IG5vdGF0aW9uCiAqICAgdGhlIGJpbmRpbmcgaXMgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gSlNPTi4KICoKICogQHBhcmFtIHsqfSBvYmplY3QgQW55IEphdmFTY3JpcHQgb2JqZWN0IChpbmNsdWRpbmcgYXJyYXlzIGFuZCBwcmltaXRpdmUgdHlwZXMpIHRvIGZpbHRlci4KICogQHJldHVybnMge3N0cmluZ30gSlNPTiBzdHJpbmcuCiAqCiAqCiAqIEBleGFtcGxlOgogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8cHJlPnt7IHsnbmFtZSc6J3ZhbHVlJ30gfCBqc29uIH19PC9wcmU+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGpzb25pZnkgZmlsdGVyZWQgb2JqZWN0cycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoYmluZGluZygieyduYW1lJzondmFsdWUnfSIpKS50b01hdGNoKC9ce1xuICAibmFtZSI6ID8idmFsdWUiXG59Lyk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICoKICovCmZ1bmN0aW9uIGpzb25GaWx0ZXIoKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkgewogICAgcmV0dXJuIHRvSnNvbihvYmplY3QsIHRydWUpOwogIH07Cn0KCgovKioKICogQG5nZG9jIGZpbHRlcgogKiBAbmFtZSBuZy5maWx0ZXI6bG93ZXJjYXNlCiAqIEBmdW5jdGlvbgogKiBAZGVzY3JpcHRpb24KICogQ29udmVydHMgc3RyaW5nIHRvIGxvd2VyY2FzZS4KICogQHNlZSBhbmd1bGFyLmxvd2VyY2FzZQogKi8KdmFyIGxvd2VyY2FzZUZpbHRlciA9IHZhbHVlRm4obG93ZXJjYXNlKTsKCgovKioKICogQG5nZG9jIGZpbHRlcgogKiBAbmFtZSBuZy5maWx0ZXI6dXBwZXJjYXNlCiAqIEBmdW5jdGlvbgogKiBAZGVzY3JpcHRpb24KICogQ29udmVydHMgc3RyaW5nIHRvIHVwcGVyY2FzZS4KICogQHNlZSBhbmd1bGFyLnVwcGVyY2FzZQogKi8KdmFyIHVwcGVyY2FzZUZpbHRlciA9IHZhbHVlRm4odXBwZXJjYXNlKTsKCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgbmcuZmlsdGVyOmxpbWl0VG8KICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBDcmVhdGVzIGEgbmV3IGFycmF5IG9yIHN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzLiBUaGUgZWxlbWVudHMKICogYXJlIHRha2VuIGZyb20gZWl0aGVyIHRoZSBiZWdpbm5pbmcgb3IgdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5IG9yIHN0cmluZywgYXMgc3BlY2lmaWVkIGJ5CiAqIHRoZSB2YWx1ZSBhbmQgc2lnbiAocG9zaXRpdmUgb3IgbmVnYXRpdmUpIG9mIGBsaW1pdGAuCiAqCiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBpbnB1dCBTb3VyY2UgYXJyYXkgb3Igc3RyaW5nIHRvIGJlIGxpbWl0ZWQuCiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGltaXQgVGhlIGxlbmd0aCBvZiB0aGUgcmV0dXJuZWQgYXJyYXkgb3Igc3RyaW5nLiBJZiB0aGUgYGxpbWl0YCBudW1iZXIgCiAqICAgICBpcyBwb3NpdGl2ZSwgYGxpbWl0YCBudW1iZXIgb2YgaXRlbXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nIGFyZSBjb3BpZWQuCiAqICAgICBJZiB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLCBgbGltaXRgIG51bWJlciAgb2YgaXRlbXMgZnJvbSB0aGUgZW5kIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nIAogKiAgICAgYXJlIGNvcGllZC4gVGhlIGBsaW1pdGAgd2lsbCBiZSB0cmltbWVkIGlmIGl0IGV4Y2VlZHMgYGFycmF5Lmxlbmd0aGAKICogQHJldHVybnMge0FycmF5fHN0cmluZ30gQSBuZXcgc3ViLWFycmF5IG9yIHN1YnN0cmluZyBvZiBsZW5ndGggYGxpbWl0YCBvciBsZXNzIGlmIGlucHV0IGFycmF5CiAqICAgICBoYWQgbGVzcyB0aGFuIGBsaW1pdGAgZWxlbWVudHMuCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLm51bWJlcnMgPSBbMSwyLDMsNCw1LDYsNyw4LDldOwogICAgICAgICAgICRzY29wZS5sZXR0ZXJzID0gImFiY2RlZmdoaSI7CiAgICAgICAgICAgJHNjb3BlLm51bUxpbWl0ID0gMzsKICAgICAgICAgICAkc2NvcGUubGV0dGVyTGltaXQgPSAzOwogICAgICAgICB9CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgIExpbWl0IHt7bnVtYmVyc319IHRvOiA8aW5wdXQgdHlwZT0iaW50ZWdlciIgbmctbW9kZWw9Im51bUxpbWl0Ij4KICAgICAgICAgPHA+T3V0cHV0IG51bWJlcnM6IHt7IG51bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0IH19PC9wPgogICAgICAgICBMaW1pdCB7e2xldHRlcnN9fSB0bzogPGlucHV0IHR5cGU9ImludGVnZXIiIG5nLW1vZGVsPSJsZXR0ZXJMaW1pdCI+CiAgICAgICAgIDxwPk91dHB1dCBsZXR0ZXJzOiB7eyBsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCB9fTwvcD4KICAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtYmVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBpbnB1dFtuZy1tb2RlbD1udW1MaW1pdF0nKS52YWwoKSkudG9CZSgnMycpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgaW5wdXRbbmctbW9kZWw9bGV0dGVyTGltaXRdJykudmFsKCkpLnRvQmUoJzMnKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ251bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0JykpLnRvRXF1YWwoJ1sxLDIsM10nKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpLnRvRXF1YWwoJ2FiYycpOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIG91dHB1dCB3aGVuIC0zIGlzIGVudGVyZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgaW5wdXQoJ251bUxpbWl0JykuZW50ZXIoLTMpOwogICAgICAgICBpbnB1dCgnbGV0dGVyTGltaXQnKS5lbnRlcigtMyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKS50b0VxdWFsKCdbNyw4LDldJyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCcpKS50b0VxdWFsKCdnaGknKTsKICAgICAgIH0pOwoKICAgICAgIGl0KCdzaG91bGQgbm90IGV4Y2VlZCB0aGUgbWF4aW11bSBzaXplIG9mIGlucHV0IGFycmF5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGlucHV0KCdudW1MaW1pdCcpLmVudGVyKDEwMCk7CiAgICAgICAgIGlucHV0KCdsZXR0ZXJMaW1pdCcpLmVudGVyKDEwMCk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKS50b0VxdWFsKCdbMSwyLDMsNCw1LDYsNyw4LDldJyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCcpKS50b0VxdWFsKCdhYmNkZWZnaGknKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpewogIHJldHVybiBmdW5jdGlvbihpbnB1dCwgbGltaXQpIHsKICAgIGlmICghaXNBcnJheShpbnB1dCkgJiYgIWlzU3RyaW5nKGlucHV0KSkgcmV0dXJuIGlucHV0OwogICAgCiAgICBsaW1pdCA9IGludChsaW1pdCk7CgogICAgaWYgKGlzU3RyaW5nKGlucHV0KSkgewogICAgICAvL05hTiBjaGVjayBvbiBsaW1pdAogICAgICBpZiAobGltaXQpIHsKICAgICAgICByZXR1cm4gbGltaXQgPj0gMCA/IGlucHV0LnNsaWNlKDAsIGxpbWl0KSA6IGlucHV0LnNsaWNlKGxpbWl0LCBpbnB1dC5sZW5ndGgpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAiIjsKICAgICAgfQogICAgfQoKICAgIHZhciBvdXQgPSBbXSwKICAgICAgaSwgbjsKCiAgICAvLyBpZiBhYnMobGltaXQpIGV4Y2VlZHMgbWF4aW11bSBsZW5ndGgsIHRyaW0gaXQKICAgIGlmIChsaW1pdCA+IGlucHV0Lmxlbmd0aCkKICAgICAgbGltaXQgPSBpbnB1dC5sZW5ndGg7CiAgICBlbHNlIGlmIChsaW1pdCA8IC1pbnB1dC5sZW5ndGgpCiAgICAgIGxpbWl0ID0gLWlucHV0Lmxlbmd0aDsKCiAgICBpZiAobGltaXQgPiAwKSB7CiAgICAgIGkgPSAwOwogICAgICBuID0gbGltaXQ7CiAgICB9IGVsc2UgewogICAgICBpID0gaW5wdXQubGVuZ3RoICsgbGltaXQ7CiAgICAgIG4gPSBpbnB1dC5sZW5ndGg7CiAgICB9CgogICAgZm9yICg7IGk8bjsgaSsrKSB7CiAgICAgIG91dC5wdXNoKGlucHV0W2ldKTsKICAgIH0KCiAgICByZXR1cm4gb3V0OwogIH07Cn0KCi8qKgogKiBAbmdkb2MgZnVuY3Rpb24KICogQG5hbWUgbmcuZmlsdGVyOm9yZGVyQnkKICogQGZ1bmN0aW9uCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBPcmRlcnMgYSBzcGVjaWZpZWQgYGFycmF5YCBieSB0aGUgYGV4cHJlc3Npb25gIHByZWRpY2F0ZS4KICoKICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKil8c3RyaW5nfEFycmF5LjwoZnVuY3Rpb24oKil8c3RyaW5nKT59IGV4cHJlc3Npb24gQSBwcmVkaWNhdGUgdG8gYmUKICogICAgdXNlZCBieSB0aGUgY29tcGFyYXRvciB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIGVsZW1lbnRzLgogKgogKiAgICBDYW4gYmUgb25lIG9mOgogKgogKiAgICAtIGBmdW5jdGlvbmA6IEdldHRlciBmdW5jdGlvbi4gVGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgc29ydGVkIHVzaW5nIHRoZQogKiAgICAgIGA8YCwgYD1gLCBgPmAgb3BlcmF0b3IuCiAqICAgIC0gYHN0cmluZ2A6IEFuIEFuZ3VsYXIgZXhwcmVzc2lvbiB3aGljaCBldmFsdWF0ZXMgdG8gYW4gb2JqZWN0IHRvIG9yZGVyIGJ5LCBzdWNoIGFzICduYW1lJwogKiAgICAgIHRvIHNvcnQgYnkgYSBwcm9wZXJ0eSBjYWxsZWQgJ25hbWUnLiBPcHRpb25hbGx5IHByZWZpeGVkIHdpdGggYCtgIG9yIGAtYCB0byBjb250cm9sCiAqICAgICAgYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcgc29ydCBvcmRlciAoZm9yIGV4YW1wbGUsICtuYW1lIG9yIC1uYW1lKS4KICogICAgLSBgQXJyYXlgOiBBbiBhcnJheSBvZiBmdW5jdGlvbiBvciBzdHJpbmcgcHJlZGljYXRlcy4gVGhlIGZpcnN0IHByZWRpY2F0ZSBpbiB0aGUgYXJyYXkKICogICAgICBpcyB1c2VkIGZvciBzb3J0aW5nLCBidXQgd2hlbiB0d28gaXRlbXMgYXJlIGVxdWl2YWxlbnQsIHRoZSBuZXh0IHByZWRpY2F0ZSBpcyB1c2VkLgogKgogKiBAcGFyYW0ge2Jvb2xlYW49fSByZXZlcnNlIFJldmVyc2UgdGhlIG9yZGVyIHRoZSBhcnJheS4KICogQHJldHVybnMge0FycmF5fSBTb3J0ZWQgY29weSBvZiB0aGUgc291cmNlIGFycmF5LgogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c2NyaXB0PgogICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICRzY29wZS5mcmllbmRzID0KICAgICAgICAgICAgICAgW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjEyJywgYWdlOjEwfSwKICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzU1NS05ODc2JywgYWdlOjE5fSwKICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJywgYWdlOjIxfSwKICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4JywgYWdlOjM1fSwKICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NScsIGFnZToyOX1dCiAgICAgICAgICAgJHNjb3BlLnByZWRpY2F0ZSA9ICctYWdlJzsKICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICA8cHJlPlNvcnRpbmcgcHJlZGljYXRlID0ge3twcmVkaWNhdGV9fTsgcmV2ZXJzZSA9IHt7cmV2ZXJzZX19PC9wcmU+CiAgICAgICAgIDxoci8+CiAgICAgICAgIFsgPGEgaHJlZj0iIiBuZy1jbGljaz0icHJlZGljYXRlPScnIj51bnNvcnRlZDwvYT4gXQogICAgICAgICA8dGFibGUgY2xhc3M9ImZyaWVuZCI+CiAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgPHRoPjxhIGhyZWY9IiIgbmctY2xpY2s9InByZWRpY2F0ZSA9ICduYW1lJzsgcmV2ZXJzZT1mYWxzZSI+TmFtZTwvYT4KICAgICAgICAgICAgICAgICAoPGEgaHJlZj0iIiBuZy1jbGljaz0icHJlZGljYXRlID0gJy1uYW1lJzsgcmV2ZXJzZT1mYWxzZSI+XjwvYT4pPC90aD4KICAgICAgICAgICAgIDx0aD48YSBocmVmPSIiIG5nLWNsaWNrPSJwcmVkaWNhdGUgPSAncGhvbmUnOyByZXZlcnNlPSFyZXZlcnNlIj5QaG9uZSBOdW1iZXI8L2E+PC90aD4KICAgICAgICAgICAgIDx0aD48YSBocmVmPSIiIG5nLWNsaWNrPSJwcmVkaWNhdGUgPSAnYWdlJzsgcmV2ZXJzZT0hcmV2ZXJzZSI+QWdlPC9hPjwvdGg+CiAgICAgICAgICAgPC90cj4KICAgICAgICAgICA8dHIgbmctcmVwZWF0PSJmcmllbmQgaW4gZnJpZW5kcyB8IG9yZGVyQnk6cHJlZGljYXRlOnJldmVyc2UiPgogICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+CiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+CiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPgogICAgICAgICAgIDwvdHI+CiAgICAgICAgIDwvdGFibGU+CiAgICAgICA8L2Rpdj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgYmUgcmV2ZXJzZSBvcmRlcmVkIGJ5IGFnZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ByZWRpY2F0ZScpKS50b0JlKCctYWdlJyk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcigndGFibGUuZnJpZW5kJywgJ2ZyaWVuZCBpbiBmcmllbmRzJykuY29sdW1uKCdmcmllbmQuYWdlJykpLgogICAgICAgICAgIHRvRXF1YWwoWyczNScsICcyOScsICcyMScsICcxOScsICcxMCddKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLgogICAgICAgICAgIHRvRXF1YWwoWydBZGFtJywgJ0p1bGllJywgJ01pa2UnLCAnTWFyeScsICdKb2huJ10pOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCByZW9yZGVyIHRoZSB0YWJsZSB3aGVuIHVzZXIgc2VsZWN0cyBkaWZmZXJlbnQgcHJlZGljYXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGE6Y29udGFpbnMoIk5hbWUiKScpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcigndGFibGUuZnJpZW5kJywgJ2ZyaWVuZCBpbiBmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKS4KICAgICAgICAgICB0b0VxdWFsKFsnQWRhbScsICdKb2huJywgJ0p1bGllJywgJ01hcnknLCAnTWlrZSddKTsKICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5hZ2UnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJzM1JywgJzEwJywgJzI5JywgJzE5JywgJzIxJ10pOwoKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgYTpjb250YWlucygiUGhvbmUiKScpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChyZXBlYXRlcigndGFibGUuZnJpZW5kJywgJ2ZyaWVuZCBpbiBmcmllbmRzJykuY29sdW1uKCdmcmllbmQucGhvbmUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJzU1NS05ODc2JywgJzU1NS04NzY1JywgJzU1NS01Njc4JywgJzU1NS00MzIxJywgJzU1NS0xMjEyJ10pOwogICAgICAgICBleHBlY3QocmVwZWF0ZXIoJ3RhYmxlLmZyaWVuZCcsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSkuCiAgICAgICAgICAgdG9FcXVhbChbJ01hcnknLCAnSnVsaWUnLCAnQWRhbScsICdNaWtlJywgJ0pvaG4nXSk7CiAgICAgICB9KTsKICAgICA8L2RvYzpzY2VuYXJpbz4KICAgPC9kb2M6ZXhhbXBsZT4KICovCm9yZGVyQnlGaWx0ZXIuJGluamVjdCA9IFsnJHBhcnNlJ107CmZ1bmN0aW9uIG9yZGVyQnlGaWx0ZXIoJHBhcnNlKXsKICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHNvcnRQcmVkaWNhdGUsIHJldmVyc2VPcmRlcikgewogICAgaWYgKCFpc0FycmF5KGFycmF5KSkgcmV0dXJuIGFycmF5OwogICAgaWYgKCFzb3J0UHJlZGljYXRlKSByZXR1cm4gYXJyYXk7CiAgICBzb3J0UHJlZGljYXRlID0gaXNBcnJheShzb3J0UHJlZGljYXRlKSA/IHNvcnRQcmVkaWNhdGU6IFtzb3J0UHJlZGljYXRlXTsKICAgIHNvcnRQcmVkaWNhdGUgPSBtYXAoc29ydFByZWRpY2F0ZSwgZnVuY3Rpb24ocHJlZGljYXRlKXsKICAgICAgdmFyIGRlc2NlbmRpbmcgPSBmYWxzZSwgZ2V0ID0gcHJlZGljYXRlIHx8IGlkZW50aXR5OwogICAgICBpZiAoaXNTdHJpbmcocHJlZGljYXRlKSkgewogICAgICAgIGlmICgocHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLScpKSB7CiAgICAgICAgICBkZXNjZW5kaW5nID0gcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLSc7CiAgICAgICAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUuc3Vic3RyaW5nKDEpOwogICAgICAgIH0KICAgICAgICBnZXQgPSAkcGFyc2UocHJlZGljYXRlKTsKICAgICAgfQogICAgICByZXR1cm4gcmV2ZXJzZUNvbXBhcmF0b3IoZnVuY3Rpb24oYSxiKXsKICAgICAgICByZXR1cm4gY29tcGFyZShnZXQoYSksZ2V0KGIpKTsKICAgICAgfSwgZGVzY2VuZGluZyk7CiAgICB9KTsKICAgIHZhciBhcnJheUNvcHkgPSBbXTsKICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7IGFycmF5Q29weS5wdXNoKGFycmF5W2ldKTsgfQogICAgcmV0dXJuIGFycmF5Q29weS5zb3J0KHJldmVyc2VDb21wYXJhdG9yKGNvbXBhcmF0b3IsIHJldmVyc2VPcmRlcikpOwoKICAgIGZ1bmN0aW9uIGNvbXBhcmF0b3IobzEsIG8yKXsKICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc29ydFByZWRpY2F0ZS5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBjb21wID0gc29ydFByZWRpY2F0ZVtpXShvMSwgbzIpOwogICAgICAgIGlmIChjb21wICE9PSAwKSByZXR1cm4gY29tcDsKICAgICAgfQogICAgICByZXR1cm4gMDsKICAgIH0KICAgIGZ1bmN0aW9uIHJldmVyc2VDb21wYXJhdG9yKGNvbXAsIGRlc2NlbmRpbmcpIHsKICAgICAgcmV0dXJuIHRvQm9vbGVhbihkZXNjZW5kaW5nKQogICAgICAgICAgPyBmdW5jdGlvbihhLGIpe3JldHVybiBjb21wKGIsYSk7fQogICAgICAgICAgOiBjb21wOwogICAgfQogICAgZnVuY3Rpb24gY29tcGFyZSh2MSwgdjIpewogICAgICB2YXIgdDEgPSB0eXBlb2YgdjE7CiAgICAgIHZhciB0MiA9IHR5cGVvZiB2MjsKICAgICAgaWYgKHQxID09IHQyKSB7CiAgICAgICAgaWYgKHQxID09ICJzdHJpbmciKSB7CiAgICAgICAgICAgdjEgPSB2MS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgIHYyID0gdjIudG9Mb3dlckNhc2UoKTsKICAgICAgICB9CiAgICAgICAgaWYgKHYxID09PSB2MikgcmV0dXJuIDA7CiAgICAgICAgcmV0dXJuIHYxIDwgdjIgPyAtMSA6IDE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHQxIDwgdDIgPyAtMSA6IDE7CiAgICAgIH0KICAgIH0KICB9Owp9CgpmdW5jdGlvbiBuZ0RpcmVjdGl2ZShkaXJlY3RpdmUpIHsKICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7CiAgICBkaXJlY3RpdmUgPSB7CiAgICAgIGxpbms6IGRpcmVjdGl2ZQogICAgfTsKICB9CiAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZGlyZWN0aXZlLnJlc3RyaWN0IHx8ICdBQyc7CiAgcmV0dXJuIHZhbHVlRm4oZGlyZWN0aXZlKTsKfQoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOmEKICogQHJlc3RyaWN0IEUKICoKICogQGRlc2NyaXB0aW9uCiAqIE1vZGlmaWVzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSBodG1sIEEgdGFnIHNvIHRoYXQgdGhlIGRlZmF1bHQgYWN0aW9uIGlzIHByZXZlbnRlZCB3aGVuCiAqIHRoZSBocmVmIGF0dHJpYnV0ZSBpcyBlbXB0eS4KICoKICogVGhpcyBjaGFuZ2UgcGVybWl0cyB0aGUgZWFzeSBjcmVhdGlvbiBvZiBhY3Rpb24gbGlua3Mgd2l0aCB0aGUgYG5nQ2xpY2tgIGRpcmVjdGl2ZQogKiB3aXRob3V0IGNoYW5naW5nIHRoZSBsb2NhdGlvbiBvciBjYXVzaW5nIHBhZ2UgcmVsb2FkcywgZS5nLjoKICogYDxhIGhyZWY9IiIgbmctY2xpY2s9Imxpc3QuYWRkSXRlbSgpIj5BZGQgSXRlbTwvYT5gCiAqLwp2YXIgaHRtbEFuY2hvckRpcmVjdGl2ZSA9IHZhbHVlRm4oewogIHJlc3RyaWN0OiAnRScsCiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikgewoKICAgIGlmIChtc2llIDw9IDgpIHsKCiAgICAgIC8vIHR1cm4gPGEgaHJlZiBuZy1jbGljaz0iLi4iPmxpbms8L2E+IGludG8gYSBzdHlsYWJsZSBsaW5rIGluIElFCiAgICAgIC8vIGJ1dCBvbmx5IGlmIGl0IGRvZXNuJ3QgaGF2ZSBuYW1lIGF0dHJpYnV0ZSwgaW4gd2hpY2ggY2FzZSBpdCdzIGFuIGFuY2hvcgogICAgICBpZiAoIWF0dHIuaHJlZiAmJiAhYXR0ci5uYW1lKSB7CiAgICAgICAgYXR0ci4kc2V0KCdocmVmJywgJycpOwogICAgICB9CgogICAgICAvLyBhZGQgYSBjb21tZW50IG5vZGUgdG8gYW5jaG9ycyB0byB3b3JrYXJvdW5kIElFIGJ1ZyB0aGF0IGNhdXNlcyBlbGVtZW50IGNvbnRlbnQgdG8gYmUgcmVzZXQKICAgICAgLy8gdG8gbmV3IGF0dHJpYnV0ZSBjb250ZW50IGlmIGF0dHJpYnV0ZSBpcyB1cGRhdGVkIHdpdGggdmFsdWUgY29udGFpbmluZyBAIGFuZCBlbGVtZW50IGFsc28KICAgICAgLy8gY29udGFpbnMgdmFsdWUgd2l0aCBACiAgICAgIC8vIHNlZSBpc3N1ZSAjMTk0OQogICAgICBlbGVtZW50LmFwcGVuZChkb2N1bWVudC5jcmVhdGVDb21tZW50KCdJRSBmaXgnKSk7CiAgICB9CgogICAgaWYgKCFhdHRyLmhyZWYgJiYgIWF0dHIubmFtZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHsKICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KXsKICAgICAgICAgIC8vIGlmIHdlIGhhdmUgbm8gaHJlZiB1cmwsIHRoZW4gZG9uJ3QgbmF2aWdhdGUgYW55d2hlcmUuCiAgICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cignaHJlZicpKSB7CiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0hyZWYKICogQHJlc3RyaWN0IEEKICogQHByaW9yaXR5IDk5CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYW4gaHJlZiBhdHRyaWJ1dGUgd2lsbAogKiBtYWtlIHRoZSBsaW5rIGdvIHRvIHRoZSB3cm9uZyBVUkwgaWYgdGhlIHVzZXIgY2xpY2tzIGl0IGJlZm9yZQogKiBBbmd1bGFyIGhhcyBhIGNoYW5jZSB0byByZXBsYWNlIHRoZSBge3toYXNofX1gIG1hcmt1cCB3aXRoIGl0cwogKiB2YWx1ZS4gVW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgbWFya3VwIHRoZSBsaW5rIHdpbGwgYmUgYnJva2VuCiAqIGFuZCB3aWxsIG1vc3QgbGlrZWx5IHJldHVybiBhIDQwNCBlcnJvci4KICoKICogVGhlIGBuZ0hyZWZgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLgogKgogKiBUaGUgd3Jvbmcgd2F5IHRvIHdyaXRlIGl0OgogKiA8cHJlPgogKiA8YSBocmVmPSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0iLz4KICogPC9wcmU+CiAqCiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDoKICogPHByZT4KICogPGEgbmctaHJlZj0iaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19Ii8+CiAqIDwvcHJlPgogKgogKiBAZWxlbWVudCBBCiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nSHJlZiBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuCiAqCiAqIEBleGFtcGxlCiAqIFRoaXMgZXhhbXBsZSBzaG93cyB2YXJpb3VzIGNvbWJpbmF0aW9ucyBvZiBgaHJlZmAsIGBuZy1ocmVmYCBhbmQgYG5nLWNsaWNrYCBhdHRyaWJ1dGVzCiAqIGluIGxpbmtzIGFuZCB0aGVpciBkaWZmZXJlbnQgYmVoYXZpb3JzOgogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICA8aW5wdXQgbmctbW9kZWw9InZhbHVlIiAvPjxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTEiIGhyZWYgbmctY2xpY2s9InZhbHVlID0gMSI+bGluayAxPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTIiIGhyZWY9IiIgbmctY2xpY2s9InZhbHVlID0gMiI+bGluayAyPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTMiIG5nLWhyZWY9Ii97eycxMjMnfX0iPmxpbmsgMzwvYT4gKGxpbmssIHJlbG9hZCEpPGJyIC8+CiAgICAgICAgPGEgaWQ9ImxpbmstNCIgaHJlZj0iIiBuYW1lPSJ4eCIgbmctY2xpY2s9InZhbHVlID0gNCI+YW5jaG9yPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPgogICAgICAgIDxhIGlkPSJsaW5rLTUiIG5hbWU9Inh4eCIgbmctY2xpY2s9InZhbHVlID0gNSI+YW5jaG9yPC9hPiAobm8gbGluayk8YnIgLz4KICAgICAgICA8YSBpZD0ibGluay02IiBuZy1ocmVmPSJ7e3ZhbHVlfX0iPmxpbms8L2E+IChsaW5rLCBjaGFuZ2UgbG9jYXRpb24pCiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIHdpdGhvdXQgdmFsdWUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQoJyNsaW5rLTEnKS5jbGljaygpOwogICAgICAgICAgZXhwZWN0KGlucHV0KCd2YWx1ZScpLnZhbCgpKS50b0VxdWFsKCcxJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnI2xpbmstMScpLmF0dHIoJ2hyZWYnKSkudG9CZSgiIik7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBlbGVtZW50KCcjbGluay0yJykuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChpbnB1dCgndmFsdWUnKS52YWwoKSkudG9FcXVhbCgnMicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTInKS5hdHRyKCdocmVmJykpLnRvQmUoIiIpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYW5kIGNoYW5nZSB1cmwgd2hlbiBuZy1ocmVmIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTMnKS5hdHRyKCdocmVmJykpLnRvQmUoIi8xMjMiKTsKCiAgICAgICAgICBlbGVtZW50KCcjbGluay0zJykuY2xpY2soKTsKICAgICAgICAgIGV4cGVjdChicm93c2VyKCkud2luZG93KCkucGF0aCgpKS50b0VxdWFsKCcvMTIzJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nIGFuZCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZWxlbWVudCgnI2xpbmstNCcpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoaW5wdXQoJ3ZhbHVlJykudmFsKCkpLnRvRXF1YWwoJzQnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjbGluay00JykuYXR0cignaHJlZicpKS50b0JlKCcnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gbm8gaHJlZiBidXQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGVsZW1lbnQoJyNsaW5rLTUnKS5jbGljaygpOwogICAgICAgICAgZXhwZWN0KGlucHV0KCd2YWx1ZScpLnZhbCgpKS50b0VxdWFsKCc1Jyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnI2xpbmstNScpLmF0dHIoJ2hyZWYnKSkudG9CZSh1bmRlZmluZWQpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIG9ubHkgY2hhbmdlIHVybCB3aGVuIG9ubHkgbmctaHJlZicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3ZhbHVlJykuZW50ZXIoJzYnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjbGluay02JykuYXR0cignaHJlZicpKS50b0JlKCc2Jyk7CgogICAgICAgICAgZWxlbWVudCgnI2xpbmstNicpLmNsaWNrKCk7CiAgICAgICAgICBleHBlY3QoYnJvd3NlcigpLmxvY2F0aW9uKCkudXJsKCkpLnRvRXF1YWwoJy82Jyk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdTcmMKICogQHJlc3RyaWN0IEEKICogQHByaW9yaXR5IDk5CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3JjYCBhdHRyaWJ1dGUgZG9lc24ndAogKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsCiAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZQogKiBge3toYXNofX1gLiBUaGUgYG5nU3JjYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS4KICoKICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDoKICogPHByZT4KICogPGltZyBzcmM9Imh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSIvPgogKiA8L3ByZT4KICoKICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OgogKiA8cHJlPgogKiA8aW1nIG5nLXNyYz0iaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19Ii8+CiAqIDwvcHJlPgogKgogKiBAZWxlbWVudCBJTUcKICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdTcmMgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1NyY3NldAogKiBAcmVzdHJpY3QgQQogKiBAcHJpb3JpdHkgOTkKICoKICogQGRlc2NyaXB0aW9uCiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNzZXRgIGF0dHJpYnV0ZSBkb2Vzbid0CiAqIHdvcmsgcmlnaHQ6IFRoZSBicm93c2VyIHdpbGwgZmV0Y2ggZnJvbSB0aGUgVVJMIHdpdGggdGhlIGxpdGVyYWwKICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlCiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNzZXRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLgogKgogKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OgogKiA8cHJlPgogKiA8aW1nIHNyY3NldD0iaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4Ii8+CiAqIDwvcHJlPgogKgogKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6CiAqIDxwcmU+CiAqIDxpbWcgbmctc3Jjc2V0PSJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0gMngiLz4KICogPC9wcmU+CiAqCiAqIEBlbGVtZW50IElNRwogKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyY3NldCBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuCiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nRGlzYWJsZWQKICogQHJlc3RyaWN0IEEKICogQHByaW9yaXR5IDEwMAogKgogKiBAZGVzY3JpcHRpb24KICoKICogVGhlIGZvbGxvd2luZyBtYXJrdXAgd2lsbCBtYWtlIHRoZSBidXR0b24gZW5hYmxlZCBvbiBDaHJvbWUvRmlyZWZveCBidXQgbm90IG9uIElFOCBhbmQgb2xkZXIgSUVzOgogKiA8cHJlPgogKiA8ZGl2IG5nLWluaXQ9InNjb3BlID0geyBpc0Rpc2FibGVkOiBmYWxzZSB9Ij4KICogIDxidXR0b24gZGlzYWJsZWQ9Int7c2NvcGUuaXNEaXNhYmxlZH19Ij5EaXNhYmxlZDwvYnV0dG9uPgogKiA8L2Rpdj4KICogPC9wcmU+CiAqCiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlcwogKiBzdWNoIGFzIGRpc2FibGVkLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pCiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlCiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS4KICogVGhlIGBuZ0Rpc2FibGVkYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlLgogKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlcwogKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi4KICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgQ2xpY2sgbWUgdG8gdG9nZ2xlOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICAgIDxidXR0b24gbmctbW9kZWw9ImJ1dHRvbiIgbmctZGlzYWJsZWQ9ImNoZWNrZWQiPkJ1dHRvbjwvYnV0dG9uPgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgYnV0dG9uJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgOmJ1dHRvbicpLnByb3AoJ2Rpc2FibGVkJykpLnRvQmVGYWxzeSgpOwogICAgICAgICAgaW5wdXQoJ2NoZWNrZWQnKS5jaGVjaygpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDpidXR0b24nKS5wcm9wKCdkaXNhYmxlZCcpKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICoKICogQGVsZW1lbnQgSU5QVVQKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0Rpc2FibGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksIAogKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSAiZGlzYWJsZWQiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NoZWNrZWQKICogQHJlc3RyaWN0IEEKICogQHByaW9yaXR5IDEwMAogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2YgYm9vbGVhbiBhdHRyaWJ1dGVzCiAqIHN1Y2ggYXMgY2hlY2tlZC4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKQogKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZQogKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuCiAqIFRoZSBgbmdDaGVja2VkYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGBjaGVja2VkYCBhdHRyaWJ1dGUuCiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzCiAqIGEgcGVybWFuZW50IHJlbGlhYmxlIHBsYWNlIHRvIHN0b3JlIHRoZSBiaW5kaW5nIGluZm9ybWF0aW9uLgogKiBAZXhhbXBsZQogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICBDaGVjayBtZSB0byBjaGVjayBib3RoOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJtYXN0ZXIiPjxici8+CiAgICAgICAgPGlucHV0IGlkPSJjaGVja1NsYXZlIiB0eXBlPSJjaGVja2JveCIgbmctY2hlY2tlZD0ibWFzdGVyIj4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgIGl0KCdzaG91bGQgY2hlY2sgYm90aCBjaGVja0JveGVzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI2NoZWNrU2xhdmUnKS5wcm9wKCdjaGVja2VkJykpLnRvQmVGYWxzeSgpOwogICAgICAgICAgaW5wdXQoJ21hc3RlcicpLmNoZWNrKCk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI2NoZWNrU2xhdmUnKS5wcm9wKCdjaGVja2VkJykpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKgogKiBAZWxlbWVudCBJTlBVVAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2hlY2tlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LCAKICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgImNoZWNrZWQiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1JlYWRvbmx5CiAqIEByZXN0cmljdCBBCiAqIEBwcmlvcml0eSAxMDAKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlcwogKiBzdWNoIGFzIHJlYWRvbmx5LiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pCiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlCiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS4KICogVGhlIGBuZ1JlYWRvbmx5YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGByZWFkb25seWAgYXR0cmlidXRlLgogKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlcwogKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi4KICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgQ2hlY2sgbWUgdG8gbWFrZSB0ZXh0IHJlYWRvbmx5OiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjaGVja2VkIj48YnIvPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1yZWFkb25seT0iY2hlY2tlZCIgdmFsdWU9IkknbSBBbmd1bGFyIi8+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSByZWFkb25seSBhdHRyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgOnRleHQnKS5wcm9wKCdyZWFkb25seScpKS50b0JlRmFsc3koKTsKICAgICAgICAgIGlucHV0KCdjaGVja2VkJykuY2hlY2soKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSA6dGV4dCcpLnByb3AoJ3JlYWRvbmx5JykpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKgogKiBAZWxlbWVudCBJTlBVVAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUmVhZG9ubHkgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSwgCiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlICJyZWFkb25seSIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnQKICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nU2VsZWN0ZWQKICogQHJlc3RyaWN0IEEKICogQHByaW9yaXR5IDEwMAogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2YgYm9vbGVhbiBhdHRyaWJ1dGVzCiAqIHN1Y2ggYXMgc2VsZWN0ZWQuIChUaGVpciBwcmVzZW5jZSBtZWFucyB0cnVlIGFuZCB0aGVpciBhYnNlbmNlIG1lYW5zIGZhbHNlLikKICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGUKICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLgogKiBUaGUgYG5nU2VsZWN0ZWRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYHNlbGVjdGVkYCBhdHR0cmlidXRlLgogKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlcwogKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi4KICogCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIENoZWNrIG1lIHRvIHNlbGVjdDogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0ic2VsZWN0ZWQiPjxici8+CiAgICAgICAgPHNlbGVjdD4KICAgICAgICAgIDxvcHRpb24+SGVsbG8hPC9vcHRpb24+CiAgICAgICAgICA8b3B0aW9uIGlkPSJncmVldCIgbmctc2VsZWN0ZWQ9InNlbGVjdGVkIj5HcmVldGluZ3MhPC9vcHRpb24+CiAgICAgICAgPC9zZWxlY3Q+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIHNlbGVjdCBHcmVldGluZ3MhJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI2dyZWV0JykucHJvcCgnc2VsZWN0ZWQnKSkudG9CZUZhbHN5KCk7CiAgICAgICAgICBpbnB1dCgnc2VsZWN0ZWQnKS5jaGVjaygpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNncmVldCcpLnByb3AoJ3NlbGVjdGVkJykpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKgogKiBAZWxlbWVudCBPUFRJT04KICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1NlbGVjdGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksIAogKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSAic2VsZWN0ZWQiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50CiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nT3BlbgogKiBAcmVzdHJpY3QgQQogKiBAcHJpb3JpdHkgMTAwCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXMKICogc3VjaCBhcyBvcGVuLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pCiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlCiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS4KICogVGhlIGBuZ09wZW5gIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYG9wZW5gIGF0dHJpYnV0ZS4KICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXMKICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uCiAqIEBleGFtcGxlCiAgICAgPGRvYzpleGFtcGxlPgogICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgIENoZWNrIG1lIGNoZWNrIG11bHRpcGxlOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJvcGVuIj48YnIvPgogICAgICAgICA8ZGV0YWlscyBpZD0iZGV0YWlscyIgbmctb3Blbj0ib3BlbiI+CiAgICAgICAgICAgIDxzdW1tYXJ5PlNob3cvSGlkZSBtZTwvc3VtbWFyeT4KICAgICAgICAgPC9kZXRhaWxzPgogICAgICAgPC9kb2M6c291cmNlPgogICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgb3BlbicsIGZ1bmN0aW9uKCkgewogICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjZGV0YWlscycpLnByb3AoJ29wZW4nKSkudG9CZUZhbHN5KCk7CiAgICAgICAgICAgaW5wdXQoJ29wZW4nKS5jaGVjaygpOwogICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjZGV0YWlscycpLnByb3AoJ29wZW4nKSkudG9CZVRydXRoeSgpOwogICAgICAgICB9KTsKICAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgIDwvZG9jOmV4YW1wbGU+CiAqCiAqIEBlbGVtZW50IERFVEFJTFMKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ09wZW4gSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSwgCiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlICJvcGVuIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudAogKi8KCnZhciBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyA9IHt9OwoKCi8vIGJvb2xlYW4gYXR0cnMgYXJlIGV2YWx1YXRlZApmb3JFYWNoKEJPT0xFQU5fQVRUUiwgZnVuY3Rpb24ocHJvcE5hbWUsIGF0dHJOYW1lKSB7CiAgLy8gYmluZGluZyB0byBtdWx0aXBsZSBpcyBub3Qgc3VwcG9ydGVkCiAgaWYgKHByb3BOYW1lID09ICJtdWx0aXBsZSIpIHJldHVybjsKCiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7CiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB7CiAgICAgIHByaW9yaXR5OiAxMDAsCiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbm9ybWFsaXplZF0sIGZ1bmN0aW9uIG5nQm9vbGVhbkF0dHJXYXRjaEFjdGlvbih2YWx1ZSkgewogICAgICAgICAgYXR0ci4kc2V0KGF0dHJOYW1lLCAhIXZhbHVlKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKICB9Owp9KTsKCgovLyBuZy1zcmMsIG5nLXNyY3NldCwgbmctaHJlZiBhcmUgaW50ZXJwb2xhdGVkCmZvckVhY2goWydzcmMnLCAnc3Jjc2V0JywgJ2hyZWYnXSwgZnVuY3Rpb24oYXR0ck5hbWUpIHsKICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTsKICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tub3JtYWxpemVkXSA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgcHJpb3JpdHk6IDk5LCAvLyBpdCBuZWVkcyB0byBydW4gYWZ0ZXIgdGhlIGF0dHJpYnV0ZXMgYXJlIGludGVycG9sYXRlZAogICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikgewogICAgICAgIGF0dHIuJG9ic2VydmUobm9ybWFsaXplZCwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgIGlmICghdmFsdWUpCiAgICAgICAgICAgICByZXR1cm47CgogICAgICAgICAgYXR0ci4kc2V0KGF0dHJOYW1lLCB2YWx1ZSk7CgogICAgICAgICAgLy8gb24gSUUsIGlmICJuZzpzcmMiIGRpcmVjdGl2ZSBkZWNsYXJhdGlvbiBpcyB1c2VkIGFuZCAic3JjIiBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdAogICAgICAgICAgLy8gdGhlbiBjYWxsaW5nIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCAnZm9vJykgZG9lc24ndCBkbyBhbnl0aGluZywgc28gd2UgbmVlZAogICAgICAgICAgLy8gdG8gc2V0IHRoZSBwcm9wZXJ0eSBhcyB3ZWxsIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LgogICAgICAgICAgLy8gd2UgdXNlIGF0dHJbYXR0ck5hbWVdIHZhbHVlIHNpbmNlICRzZXQgY2FuIHNhbml0aXplIHRoZSB1cmwuCiAgICAgICAgICBpZiAobXNpZSkgZWxlbWVudC5wcm9wKGF0dHJOYW1lLCBhdHRyW2F0dHJOYW1lXSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CiAgfTsKfSk7CgovKiBnbG9iYWwgLW51bGxGb3JtQ3RybCAqLwp2YXIgbnVsbEZvcm1DdHJsID0gewogICRhZGRDb250cm9sOiBub29wLAogICRyZW1vdmVDb250cm9sOiBub29wLAogICRzZXRWYWxpZGl0eTogbm9vcCwKICAkc2V0RGlydHk6IG5vb3AsCiAgJHNldFByaXN0aW5lOiBub29wCn07CgovKioKICogQG5nZG9jIG9iamVjdAogKiBAbmFtZSBuZy5kaXJlY3RpdmU6Zm9ybS5Gb3JtQ29udHJvbGxlcgogKgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICRwcmlzdGluZSBUcnVlIGlmIHVzZXIgaGFzIG5vdCBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0geWV0LgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtLgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIGFsbCBvZiB0aGUgY29udGFpbmluZyBmb3JtcyBhbmQgY29udHJvbHMgYXJlIHZhbGlkLgogKiBAcHJvcGVydHkge2Jvb2xlYW59ICRpbnZhbGlkIFRydWUgaWYgYXQgbGVhc3Qgb25lIGNvbnRhaW5pbmcgY29udHJvbCBvciBmb3JtIGlzIGludmFsaWQuCiAqCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgSXMgYW4gb2JqZWN0IGhhc2gsIGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byBhbGwgaW52YWxpZCBjb250cm9scyBvcgogKiAgZm9ybXMsIHdoZXJlOgogKgogKiAgLSBrZXlzIGFyZSB2YWxpZGF0aW9uIHRva2VucyAoZXJyb3IgbmFtZXMpLAogKiAgLSB2YWx1ZXMgYXJlIGFycmF5cyBvZiBjb250cm9scyBvciBmb3JtcyB0aGF0IGFyZSBpbnZhbGlkIGZvciBnaXZlbiBlcnJvciBuYW1lLgogKgogKgogKiAgQnVpbHQtaW4gdmFsaWRhdGlvbiB0b2tlbnM6CiAqCiAqICAtIGBlbWFpbGAKICogIC0gYG1heGAKICogIC0gYG1heGxlbmd0aGAKICogIC0gYG1pbmAKICogIC0gYG1pbmxlbmd0aGAKICogIC0gYG51bWJlcmAKICogIC0gYHBhdHRlcm5gCiAqICAtIGByZXF1aXJlZGAKICogIC0gYHVybGAKICogCiAqIEBkZXNjcmlwdGlvbgogKiBgRm9ybUNvbnRyb2xsZXJgIGtlZXBzIHRyYWNrIG9mIGFsbCBpdHMgY29udHJvbHMgYW5kIG5lc3RlZCBmb3JtcyBhcyB3ZWxsIGFzIHN0YXRlIG9mIHRoZW0sCiAqIHN1Y2ggYXMgYmVpbmcgdmFsaWQvaW52YWxpZCBvciBkaXJ0eS9wcmlzdGluZS4KICoKICogRWFjaCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0gZGlyZWN0aXZlIGNyZWF0ZXMgYW4gaW5zdGFuY2UKICogb2YgYEZvcm1Db250cm9sbGVyYC4KICoKICovCi8vYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlCkZvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJyRhdHRycycsICckc2NvcGUnXTsKZnVuY3Rpb24gRm9ybUNvbnRyb2xsZXIoZWxlbWVudCwgYXR0cnMpIHsKICB2YXIgZm9ybSA9IHRoaXMsCiAgICAgIHBhcmVudEZvcm0gPSBlbGVtZW50LnBhcmVudCgpLmNvbnRyb2xsZXIoJ2Zvcm0nKSB8fCBudWxsRm9ybUN0cmwsCiAgICAgIGludmFsaWRDb3VudCA9IDAsIC8vIHVzZWQgdG8gZWFzaWx5IGRldGVybWluZSBpZiB3ZSBhcmUgdmFsaWQKICAgICAgZXJyb3JzID0gZm9ybS4kZXJyb3IgPSB7fSwKICAgICAgY29udHJvbHMgPSBbXTsKCiAgLy8gaW5pdCBzdGF0ZQogIGZvcm0uJG5hbWUgPSBhdHRycy5uYW1lIHx8IGF0dHJzLm5nRm9ybTsKICBmb3JtLiRkaXJ0eSA9IGZhbHNlOwogIGZvcm0uJHByaXN0aW5lID0gdHJ1ZTsKICBmb3JtLiR2YWxpZCA9IHRydWU7CiAgZm9ybS4kaW52YWxpZCA9IGZhbHNlOwoKICBwYXJlbnRGb3JtLiRhZGRDb250cm9sKGZvcm0pOwoKICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sCiAgZWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUyk7CiAgdG9nZ2xlVmFsaWRDc3ModHJ1ZSk7CgogIC8vIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgZWFzeSB0b2dnbGluZyBvZiBjbGFzc2VzCiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRDc3MoaXNWYWxpZCwgdmFsaWRhdGlvbkVycm9yS2V5KSB7CiAgICB2YWxpZGF0aW9uRXJyb3JLZXkgPSB2YWxpZGF0aW9uRXJyb3JLZXkgPyAnLScgKyBzbmFrZV9jYXNlKHZhbGlkYXRpb25FcnJvcktleSwgJy0nKSA6ICcnOwogICAgZWxlbWVudC4KICAgICAgcmVtb3ZlQ2xhc3MoKGlzVmFsaWQgPyBJTlZBTElEX0NMQVNTIDogVkFMSURfQ0xBU1MpICsgdmFsaWRhdGlvbkVycm9yS2V5KS4KICAgICAgYWRkQ2xhc3MoKGlzVmFsaWQgPyBWQUxJRF9DTEFTUyA6IElOVkFMSURfQ0xBU1MpICsgdmFsaWRhdGlvbkVycm9yS2V5KTsKICB9CgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyIyRhZGRDb250cm9sCiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBSZWdpc3RlciBhIGNvbnRyb2wgd2l0aCB0aGUgZm9ybS4KICAgKgogICAqIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIHRoZXkgYXJlIGxpbmtlZC4KICAgKi8KICBmb3JtLiRhZGRDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCkgewogICAgLy8gQnJlYWtpbmcgY2hhbmdlIC0gYmVmb3JlLCBpbnB1dHMgd2hvc2UgbmFtZSB3YXMgImhhc093blByb3BlcnR5IiB3ZXJlIHF1aWV0bHkgaWdub3JlZAogICAgLy8gYW5kIG5vdCBhZGRlZCB0byB0aGUgc2NvcGUuICBOb3cgd2UgdGhyb3cgYW4gZXJyb3IuCiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShjb250cm9sLiRuYW1lLCAnaW5wdXQnKTsKICAgIGNvbnRyb2xzLnB1c2goY29udHJvbCk7CgogICAgaWYgKGNvbnRyb2wuJG5hbWUpIHsKICAgICAgZm9ybVtjb250cm9sLiRuYW1lXSA9IGNvbnRyb2w7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmZvcm0uRm9ybUNvbnRyb2xsZXIjJHJlbW92ZUNvbnRyb2wKICAgKiBAbWV0aG9kT2YgbmcuZGlyZWN0aXZlOmZvcm0uRm9ybUNvbnRyb2xsZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIERlcmVnaXN0ZXIgYSBjb250cm9sIGZyb20gdGhlIGZvcm0uCiAgICoKICAgKiBJbnB1dCBlbGVtZW50cyB1c2luZyBuZ01vZGVsQ29udHJvbGxlciBkbyB0aGlzIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGV5IGFyZSBkZXN0cm95ZWQuCiAgICovCiAgZm9ybS4kcmVtb3ZlQ29udHJvbCA9IGZ1bmN0aW9uKGNvbnRyb2wpIHsKICAgIGlmIChjb250cm9sLiRuYW1lICYmIGZvcm1bY29udHJvbC4kbmFtZV0gPT09IGNvbnRyb2wpIHsKICAgICAgZGVsZXRlIGZvcm1bY29udHJvbC4kbmFtZV07CiAgICB9CiAgICBmb3JFYWNoKGVycm9ycywgZnVuY3Rpb24ocXVldWUsIHZhbGlkYXRpb25Ub2tlbikgewogICAgICBmb3JtLiRzZXRWYWxpZGl0eSh2YWxpZGF0aW9uVG9rZW4sIHRydWUsIGNvbnRyb2wpOwogICAgfSk7CgogICAgYXJyYXlSZW1vdmUoY29udHJvbHMsIGNvbnRyb2wpOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRWYWxpZGl0eQogICAqIEBtZXRob2RPZiBuZy5kaXJlY3RpdmU6Zm9ybS5Gb3JtQ29udHJvbGxlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyB0aGUgdmFsaWRpdHkgb2YgYSBmb3JtIGNvbnRyb2wuCiAgICoKICAgKiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIHBhcmVudCBmb3Jtcy4KICAgKi8KICBmb3JtLiRzZXRWYWxpZGl0eSA9IGZ1bmN0aW9uKHZhbGlkYXRpb25Ub2tlbiwgaXNWYWxpZCwgY29udHJvbCkgewogICAgdmFyIHF1ZXVlID0gZXJyb3JzW3ZhbGlkYXRpb25Ub2tlbl07CgogICAgaWYgKGlzVmFsaWQpIHsKICAgICAgaWYgKHF1ZXVlKSB7CiAgICAgICAgYXJyYXlSZW1vdmUocXVldWUsIGNvbnRyb2wpOwogICAgICAgIGlmICghcXVldWUubGVuZ3RoKSB7CiAgICAgICAgICBpbnZhbGlkQ291bnQtLTsKICAgICAgICAgIGlmICghaW52YWxpZENvdW50KSB7CiAgICAgICAgICAgIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQpOwogICAgICAgICAgICBmb3JtLiR2YWxpZCA9IHRydWU7CiAgICAgICAgICAgIGZvcm0uJGludmFsaWQgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIGVycm9yc1t2YWxpZGF0aW9uVG9rZW5dID0gZmFsc2U7CiAgICAgICAgICB0b2dnbGVWYWxpZENzcyh0cnVlLCB2YWxpZGF0aW9uVG9rZW4pOwogICAgICAgICAgcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvblRva2VuLCB0cnVlLCBmb3JtKTsKICAgICAgICB9CiAgICAgIH0KCiAgICB9IGVsc2UgewogICAgICBpZiAoIWludmFsaWRDb3VudCkgewogICAgICAgIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQpOwogICAgICB9CiAgICAgIGlmIChxdWV1ZSkgewogICAgICAgIGlmIChpbmNsdWRlcyhxdWV1ZSwgY29udHJvbCkpIHJldHVybjsKICAgICAgfSBlbHNlIHsKICAgICAgICBlcnJvcnNbdmFsaWRhdGlvblRva2VuXSA9IHF1ZXVlID0gW107CiAgICAgICAgaW52YWxpZENvdW50Kys7CiAgICAgICAgdG9nZ2xlVmFsaWRDc3MoZmFsc2UsIHZhbGlkYXRpb25Ub2tlbik7CiAgICAgICAgcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvblRva2VuLCBmYWxzZSwgZm9ybSk7CiAgICAgIH0KICAgICAgcXVldWUucHVzaChjb250cm9sKTsKCiAgICAgIGZvcm0uJHZhbGlkID0gZmFsc2U7CiAgICAgIGZvcm0uJGludmFsaWQgPSB0cnVlOwogICAgfQogIH07CgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyIyRzZXREaXJ0eQogICAqIEBtZXRob2RPZiBuZy5kaXJlY3RpdmU6Zm9ybS5Gb3JtQ29udHJvbGxlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyB0aGUgZm9ybSB0byBhIGRpcnR5IHN0YXRlLgogICAqCiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byBhZGQgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBhIGRpcnR5CiAgICogc3RhdGUgKG5nLWRpcnR5IGNsYXNzKS4gVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBwYXJlbnQgZm9ybXMuCiAgICovCiAgZm9ybS4kc2V0RGlydHkgPSBmdW5jdGlvbigpIHsKICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKERJUlRZX0NMQVNTKTsKICAgIGZvcm0uJGRpcnR5ID0gdHJ1ZTsKICAgIGZvcm0uJHByaXN0aW5lID0gZmFsc2U7CiAgICBwYXJlbnRGb3JtLiRzZXREaXJ0eSgpOwogIH07CgogIC8qKgogICAqIEBuZ2RvYyBmdW5jdGlvbgogICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRQcmlzdGluZQogICAqIEBtZXRob2RPZiBuZy5kaXJlY3RpdmU6Zm9ybS5Gb3JtQ29udHJvbGxlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgcHJpc3RpbmUgc3RhdGUuCiAgICoKICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLWRpcnR5JyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIHRvIGl0cyBwcmlzdGluZQogICAqIHN0YXRlIChuZy1wcmlzdGluZSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gYWxsIHRoZSBjb250cm9scyBjb250YWluZWQKICAgKiBpbiB0aGlzIGZvcm0uCiAgICoKICAgKiBTZXR0aW5nIGEgZm9ybSBiYWNrIHRvIGEgcHJpc3RpbmUgc3RhdGUgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gd2Ugd2FudCB0byAncmV1c2UnIGEgZm9ybSBhZnRlcgogICAqIHNhdmluZyBvciByZXNldHRpbmcgaXQuCiAgICovCiAgZm9ybS4kc2V0UHJpc3RpbmUgPSBmdW5jdGlvbiAoKSB7CiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKERJUlRZX0NMQVNTKS5hZGRDbGFzcyhQUklTVElORV9DTEFTUyk7CiAgICBmb3JtLiRkaXJ0eSA9IGZhbHNlOwogICAgZm9ybS4kcHJpc3RpbmUgPSB0cnVlOwogICAgZm9yRWFjaChjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkgewogICAgICBjb250cm9sLiRzZXRQcmlzdGluZSgpOwogICAgfSk7CiAgfTsKfQoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0KICogQHJlc3RyaWN0IEVBQwogKgogKiBAZGVzY3JpcHRpb24KICogTmVzdGFibGUgYWxpYXMgb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGBmb3JtYH0gZGlyZWN0aXZlLiBIVE1MCiAqIGRvZXMgbm90IGFsbG93IG5lc3Rpbmcgb2YgZm9ybSBlbGVtZW50cy4gSXQgaXMgdXNlZnVsIHRvIG5lc3QgZm9ybXMsIGZvciBleGFtcGxlIGlmIHRoZSB2YWxpZGl0eSBvZiBhCiAqIHN1Yi1ncm91cCBvZiBjb250cm9scyBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLgogKgogKiBAcGFyYW0ge3N0cmluZz19IG5nRm9ybXxuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvCiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuCiAqCiAqLwoKIC8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpmb3JtCiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEaXJlY3RpdmUgdGhhdCBpbnN0YW50aWF0ZXMKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyIEZvcm1Db250cm9sbGVyfS4KICoKICogSWYgdGhlIGBuYW1lYCBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIGlzIHB1Ymxpc2hlZCBvbnRvIHRoZSBjdXJyZW50IHNjb3BlIHVuZGVyCiAqIHRoaXMgbmFtZS4KICoKICogIyBBbGlhczoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9CiAqCiAqIEluIEFuZ3VsYXIgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZAogKiBmb3JtcyBhcmUgdmFsaWQgYXMgd2VsbC4gSG93ZXZlciwgYnJvd3NlcnMgZG8gbm90IGFsbG93IG5lc3Rpbmcgb2YgYDxmb3JtPmAgZWxlbWVudHMsIHNvCiAqIEFuZ3VsYXIgcHJvdmlkZXMgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdGb3JtIGBuZ0Zvcm1gfSBkaXJlY3RpdmUgd2hpY2ggYmVoYXZlcyBpZGVudGljYWxseSB0bwogKiBgPGZvcm0+YCBidXQgY2FuIGJlIG5lc3RlZC4gIFRoaXMgYWxsb3dzIHlvdSB0byBoYXZlIG5lc3RlZCBmb3Jtcywgd2hpY2ggaXMgdmVyeSB1c2VmdWwgd2hlbgogKiB1c2luZyBBbmd1bGFyIHZhbGlkYXRpb24gZGlyZWN0aXZlcyBpbiBmb3JtcyB0aGF0IGFyZSBkeW5hbWljYWxseSBnZW5lcmF0ZWQgdXNpbmcgdGhlCiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgYG5nUmVwZWF0YH0gZGlyZWN0aXZlLiBTaW5jZSB5b3UgY2Fubm90IGR5bmFtaWNhbGx5IGdlbmVyYXRlIHRoZSBgbmFtZWAKICogYXR0cmlidXRlIG9mIGlucHV0IGVsZW1lbnRzIHVzaW5nIGludGVycG9sYXRpb24sIHlvdSBoYXZlIHRvIHdyYXAgZWFjaCBzZXQgb2YgcmVwZWF0ZWQgaW5wdXRzIGluIGFuCiAqIGBuZ0Zvcm1gIGRpcmVjdGl2ZSBhbmQgbmVzdCB0aGVzZSBpbiBhbiBvdXRlciBgZm9ybWAgZWxlbWVudC4KICoKICoKICogIyBDU1MgY2xhc3NlcwogKiAgLSBgbmctdmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyB2YWxpZC4KICogIC0gYG5nLWludmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBpbnZhbGlkLgogKiAgLSBgbmctcHJpc3RpbmVgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBwcmlzdGluZS4KICogIC0gYG5nLWRpcnR5YCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgZGlydHkuCiAqCiAqCiAqICMgU3VibWl0dGluZyBhIGZvcm0gYW5kIHByZXZlbnRpbmcgdGhlIGRlZmF1bHQgYWN0aW9uCiAqCiAqIFNpbmNlIHRoZSByb2xlIG9mIGZvcm1zIGluIGNsaWVudC1zaWRlIEFuZ3VsYXIgYXBwbGljYXRpb25zIGlzIGRpZmZlcmVudCB0aGFuIGluIGNsYXNzaWNhbAogKiByb3VuZHRyaXAgYXBwcywgaXQgaXMgZGVzaXJhYmxlIGZvciB0aGUgYnJvd3NlciBub3QgdG8gdHJhbnNsYXRlIHRoZSBmb3JtIHN1Ym1pc3Npb24gaW50byBhIGZ1bGwKICogcGFnZSByZWxvYWQgdGhhdCBzZW5kcyB0aGUgZGF0YSB0byB0aGUgc2VydmVyLiBJbnN0ZWFkIHNvbWUgamF2YXNjcmlwdCBsb2dpYyBzaG91bGQgYmUgdHJpZ2dlcmVkCiAqIHRvIGhhbmRsZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGluIGFuIGFwcGxpY2F0aW9uLXNwZWNpZmljIHdheS4KICoKICogRm9yIHRoaXMgcmVhc29uLCBBbmd1bGFyIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiAoZm9ybSBzdWJtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIpIHVubGVzcyB0aGUKICogYDxmb3JtPmAgZWxlbWVudCBoYXMgYW4gYGFjdGlvbmAgYXR0cmlidXRlIHNwZWNpZmllZC4KICoKICogWW91IGNhbiB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgdHdvIHdheXMgdG8gc3BlY2lmeSB3aGF0IGphdmFzY3JpcHQgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlbgogKiBhIGZvcm0gaXMgc3VibWl0dGVkOgogKgogKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9IGRpcmVjdGl2ZSBvbiB0aGUgZm9ybSBlbGVtZW50CiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZSBvbiB0aGUgZmlyc3QKICAqICBidXR0b24gb3IgaW5wdXQgZmllbGQgb2YgdHlwZSBzdWJtaXQgKGlucHV0W3R5cGU9c3VibWl0XSkKICoKICogVG8gcHJldmVudCBkb3VibGUgZXhlY3V0aW9uIG9mIHRoZSBoYW5kbGVyLCB1c2Ugb25seSBvbmUgb2YgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9CiAqIG9yIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmVzLgogKiBUaGlzIGlzIGJlY2F1c2Ugb2YgdGhlIGZvbGxvd2luZyBmb3JtIHN1Ym1pc3Npb24gcnVsZXMgaW4gdGhlIEhUTUwgc3BlY2lmaWNhdGlvbjoKICoKICogLSBJZiBhIGZvcm0gaGFzIG9ubHkgb25lIGlucHV0IGZpZWxkIHRoZW4gaGl0dGluZyBlbnRlciBpbiB0aGlzIGZpZWxkIHRyaWdnZXJzIGZvcm0gc3VibWl0CiAqIChgbmdTdWJtaXRgKQogKiAtIGlmIGEgZm9ybSBoYXMgMisgaW5wdXQgZmllbGRzIGFuZCBubyBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuIGhpdHRpbmcgZW50ZXIKICogZG9lc24ndCB0cmlnZ2VyIHN1Ym1pdAogKiAtIGlmIGEgZm9ybSBoYXMgb25lIG9yIG1vcmUgaW5wdXQgZmllbGRzIGFuZCBvbmUgb3IgbW9yZSBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuCiAqIGhpdHRpbmcgZW50ZXIgaW4gYW55IG9mIHRoZSBpbnB1dCBmaWVsZHMgd2lsbCB0cmlnZ2VyIHRoZSBjbGljayBoYW5kbGVyIG9uIHRoZSAqZmlyc3QqIGJ1dHRvbiBvcgogKiBpbnB1dFt0eXBlPXN1Ym1pdF0gKGBuZ0NsaWNrYCkgKmFuZCogYSBzdWJtaXQgaGFuZGxlciBvbiB0aGUgZW5jbG9zaW5nIGZvcm0gKGBuZ1N1Ym1pdGApCiAqCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50bwogKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLgogKgogKiBAZXhhbXBsZQogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLnVzZXJUeXBlID0gJ2d1ZXN0JzsKICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICB1c2VyVHlwZTogPGlucHV0IG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idXNlclR5cGUiIHJlcXVpcmVkPgogICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWQiPlJlcXVpcmVkITwvc3Bhbj48YnI+CiAgICAgICAgIDx0dD51c2VyVHlwZSA9IHt7dXNlclR5cGV9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxicj4KICAgICAgICA8L2Zvcm0+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXJUeXBlJykpLnRvRXF1YWwoJ2d1ZXN0Jyk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGlucHV0KCd1c2VyVHlwZScpLmVudGVyKCcnKTsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXJUeXBlJykpLnRvRXF1YWwoJycpOwogICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgIH0pOwogICAgICA8L2RvYzpzY2VuYXJpbz4KICAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgZm9ybURpcmVjdGl2ZUZhY3RvcnkgPSBmdW5jdGlvbihpc05nRm9ybSkgewogIHJldHVybiBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHsKICAgIHZhciBmb3JtRGlyZWN0aXZlID0gewogICAgICBuYW1lOiAnZm9ybScsCiAgICAgIHJlc3RyaWN0OiBpc05nRm9ybSA/ICdFQUMnIDogJ0UnLAogICAgICBjb250cm9sbGVyOiBGb3JtQ29udHJvbGxlciwKICAgICAgY29tcGlsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGZvcm1FbGVtZW50LCBhdHRyLCBjb250cm9sbGVyKSB7CiAgICAgICAgICAgIGlmICghYXR0ci5hY3Rpb24pIHsKICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1c2UganEgZXZlbnRzIGJlY2F1c2UgaWYgYSBmb3JtIGlzIGRlc3Ryb3llZCBkdXJpbmcgc3VibWlzc2lvbiB0aGUgZGVmYXVsdAogICAgICAgICAgICAgIC8vIGFjdGlvbiBpcyBub3QgcHJldmVudGVkLiBzZWUgIzEyMzgKICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgIC8vIElFIDkgaXMgbm90IGFmZmVjdGVkIGJlY2F1c2UgaXQgZG9lc24ndCBmaXJlIGEgc3VibWl0IGV2ZW50IGFuZCB0cnkgdG8gZG8gYSBmdWxsCiAgICAgICAgICAgICAgLy8gcGFnZSByZWxvYWQgaWYgdGhlIGZvcm0gd2FzIGRlc3Ryb3llZCBieSBzdWJtaXNzaW9uIG9mIHRoZSBmb3JtIHZpYSBhIGNsaWNrIGhhbmRsZXIKICAgICAgICAgICAgICAvLyBvbiBhIGJ1dHRvbiBpbiB0aGUgZm9ybS4gTG9va3MgbGlrZSBhbiBJRTkgc3BlY2lmaWMgYnVnLgogICAgICAgICAgICAgIHZhciBwcmV2ZW50RGVmYXVsdExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0CiAgICAgICAgICAgICAgICAgID8gZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICA6IGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7IC8vIElFCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgcHJldmVudERlZmF1bHRMaXN0ZW5lcik7CgogICAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgdGhlIHByZXZlbnREZWZhdWx0IGxpc3RlbmVyIHNvIHRoYXQgd2UgZG9uJ3Qgbm90IGxlYWsgbWVtb3J5IGJ1dCBpbiBhCiAgICAgICAgICAgICAgLy8gd2F5IHRoYXQgd2lsbCBhY2hpZXZlIHRoZSBwcmV2ZW50aW9uIG9mIHRoZSBkZWZhdWx0IGFjdGlvbi4KICAgICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oZm9ybUVsZW1lbnRbMF0sICdzdWJtaXQnLCBwcmV2ZW50RGVmYXVsdExpc3RlbmVyKTsKICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHBhcmVudEZvcm1DdHJsID0gZm9ybUVsZW1lbnQucGFyZW50KCkuY29udHJvbGxlcignZm9ybScpLAogICAgICAgICAgICAgICAgYWxpYXMgPSBhdHRyLm5hbWUgfHwgYXR0ci5uZ0Zvcm07CgogICAgICAgICAgICBpZiAoYWxpYXMpIHsKICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGFsaWFzLCBjb250cm9sbGVyLCBhbGlhcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHBhcmVudEZvcm1DdHJsKSB7CiAgICAgICAgICAgICAgZm9ybUVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBwYXJlbnRGb3JtQ3RybC4kcmVtb3ZlQ29udHJvbChjb250cm9sbGVyKTsKICAgICAgICAgICAgICAgIGlmIChhbGlhcykgewogICAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGFsaWFzLCB1bmRlZmluZWQsIGFsaWFzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGV4dGVuZChjb250cm9sbGVyLCBudWxsRm9ybUN0cmwpOyAvL3N0b3AgcHJvcGFnYXRpbmcgY2hpbGQgZGVzdHJ1Y3Rpb24gaGFuZGxlcnMgdXB3YXJkcwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gZm9ybURpcmVjdGl2ZTsKICB9XTsKfTsKCnZhciBmb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkoKTsKdmFyIG5nRm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KHRydWUpOwoKLyogZ2xvYmFsCgogICAgLVZBTElEX0NMQVNTLAogICAgLUlOVkFMSURfQ0xBU1MsCiAgICAtUFJJU1RJTkVfQ0xBU1MsCiAgICAtRElSVFlfQ0xBU1MKKi8KCnZhciBVUkxfUkVHRVhQID0gL14oZnRwfGh0dHB8aHR0cHMpOlwvXC8oXHcrOnswLDF9XHcqQCk/KFxTKykoOlswLTldKyk/KFwvfFwvKFtcdyMhOi4/Kz0mJUAhXC1cL10pKT8kLzsKdmFyIEVNQUlMX1JFR0VYUCA9IC9eW0EtWmEtejAtOS5fJSstXStAW0EtWmEtejAtOS4tXStcLltBLVphLXpdezIsNn0kLzsKdmFyIE5VTUJFUl9SRUdFWFAgPSAvXlxzKihcLXxcKyk/KFxkK3woXGQqKFwuXGQqKSkpXHMqJC87Cgp2YXIgaW5wdXRUeXBlID0gewoKICAvKioKICAgKiBAbmdkb2MgaW5wdXRUeXBlCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0LnRleHQKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFN0YW5kYXJkIEhUTUwgdGV4dCBpbnB1dCB3aXRoIGFuZ3VsYXIgZGF0YSBiaW5kaW5nLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogICAqICAgIG1pbmxlbmd0aC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAgICogICAgbWF4bGVuZ3RoLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnZ3Vlc3QnOwogICAgICAgICAgICAgJHNjb3BlLndvcmQgPSAvXlxzKlx3KlxzKiQvOwogICAgICAgICAgIH0KICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgU2luZ2xlIHdvcmQ6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1wYXR0ZXJuPSJ3b3JkIiByZXF1aXJlZCBuZy10cmltPSJmYWxzZSI+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IucGF0dGVybiI+CiAgICAgICAgICAgICBTaW5nbGUgd29yZCBvbmx5ITwvc3Bhbj4KCiAgICAgICAgICAgPHR0PnRleHQgPSB7e3RleHR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kb2M6c291cmNlPgogICAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgnZ3Vlc3QnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJycpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygndGV4dCcpKS50b0VxdWFsKCcnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBtdWx0aSB3b3JkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJ2hlbGxvIHdvcmxkJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIG5vdCBiZSB0cmltbWVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJ3VudHJpbW1lZCAnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgndW50cmltbWVkICcpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2RvYzpzY2VuYXJpbz4KICAgICAgPC9kb2M6ZXhhbXBsZT4KICAgKi8KICAndGV4dCc6IHRleHRJbnB1dFR5cGUsCgoKICAvKioKICAgKiBAbmdkb2MgaW5wdXRUeXBlCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0Lm51bWJlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVGV4dCBpbnB1dCB3aXRoIG51bWJlciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gU2V0cyB0aGUgYG51bWJlcmAgdmFsaWRhdGlvbgogICAqIGVycm9yIGlmIG5vdCBhIHZhbGlkIG51bWJlci4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogICAqICAgIG1pbmxlbmd0aC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAgICogICAgbWF4bGVuZ3RoLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGRvYzpleGFtcGxlPgogICAgICAgIDxkb2M6c291cmNlPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSAxMjsKICAgICAgICAgICB9CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICA8Zm9ybSBuYW1lPSJteUZvcm0iIG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICAgIE51bWJlcjogPGlucHV0IHR5cGU9Im51bWJlciIgbmFtZT0iaW5wdXQiIG5nLW1vZGVsPSJ2YWx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBtaW49IjAiIG1heD0iOTkiIHJlcXVpcmVkPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLm51bWJlciI+CiAgICAgICAgICAgICBOb3QgdmFsaWQgbnVtYmVyITwvc3Bhbj4KICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e3ZhbHVlfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ZhbHVlJykpLnRvRXF1YWwoJzEyJyk7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgaW5wdXQoJ3ZhbHVlJykuZW50ZXIoJycpOwogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZScpKS50b0VxdWFsKCcnKTsKICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgaW5wdXQoJ3ZhbHVlJykuZW50ZXIoJzEyMycpOwogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZScpKS50b0VxdWFsKCcnKTsKICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgfSk7CiAgICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICAgIDwvZG9jOmV4YW1wbGU+CiAgICovCiAgJ251bWJlcic6IG51bWJlcklucHV0VHlwZSwKCgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dFR5cGUKICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6aW5wdXQudXJsCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUZXh0IGlucHV0IHdpdGggVVJMIHZhbGlkYXRpb24uIFNldHMgdGhlIGB1cmxgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBjb250ZW50IGlzIG5vdCBhCiAgICogdmFsaWQgVVJMLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvCiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogICAqICAgIG1pbmxlbmd0aC4KICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuCiAgICogICAgbWF4bGVuZ3RoLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yCiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGRvYzpleGFtcGxlPgogICAgICAgIDxkb2M6c291cmNlPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdodHRwOi8vZ29vZ2xlLmNvbSc7CiAgICAgICAgICAgfQogICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgICBVUkw6IDxpbnB1dCB0eXBlPSJ1cmwiIG5hbWU9ImlucHV0IiBuZy1tb2RlbD0idGV4dCIgcmVxdWlyZWQ+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5pbnB1dC4kZXJyb3IudXJsIj4KICAgICAgICAgICAgIE5vdCB2YWxpZCB1cmwhPC9zcGFuPgogICAgICAgICAgIDx0dD50ZXh0ID0ge3t0ZXh0fX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnVybCA9IHt7ISFteUZvcm0uJGVycm9yLnVybH19PC90dD48YnIvPgogICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJ2h0dHA6Ly9nb29nbGUuY29tJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dCgndGV4dCcpLmVudGVyKCcnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgnJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbm90IHVybCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dCgndGV4dCcpLmVudGVyKCd4eHgnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgICA8L2RvYzpleGFtcGxlPgogICAqLwogICd1cmwnOiB1cmxJbnB1dFR5cGUsCgoKICAvKioKICAgKiBAbmdkb2MgaW5wdXRUeXBlCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0LmVtYWlsCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbAogICAqIGFkZHJlc3MuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAgICogICAgbWlubGVuZ3RoLgogICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICAgKiAgICBtYXhsZW5ndGguCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZQogICAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICAgKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlcgogICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAgICoKICAgKiBAZXhhbXBsZQogICAgICA8ZG9jOmV4YW1wbGU+CiAgICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ21lQGV4YW1wbGUuY29tJzsKICAgICAgICAgICB9CiAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgICBFbWFpbDogPGlucHV0IHR5cGU9ImVtYWlsIiBuYW1lPSJpbnB1dCIgbmctbW9kZWw9InRleHQiIHJlcXVpcmVkPgogICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkIj4KICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPgogICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0uaW5wdXQuJGVycm9yLmVtYWlsIj4KICAgICAgICAgICAgICAgTm90IHZhbGlkIGVtYWlsITwvc3Bhbj4KICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3t0ZXh0fX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+CiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5lbWFpbCA9IHt7ISFteUZvcm0uJGVycm9yLmVtYWlsfX08L3R0Pjxici8+CiAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJ21lQGV4YW1wbGUuY29tJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpbnB1dCgndGV4dCcpLmVudGVyKCcnKTsKICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgnJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbm90IGVtYWlsJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJ3h4eCcpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgfSk7CiAgICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICAgIDwvZG9jOmV4YW1wbGU+CiAgICovCiAgJ2VtYWlsJzogZW1haWxJbnB1dFR5cGUsCgoKICAvKioKICAgKiBAbmdkb2MgaW5wdXRUeXBlCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0LnJhZGlvCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBIVE1MIHJhZGlvIGJ1dHRvbi4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICAgKgogICAqIEBleGFtcGxlCiAgICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAgJHNjb3BlLmNvbG9yID0gJ2JsdWUnOwogICAgICAgICAgIH0KICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuZy1tb2RlbD0iY29sb3IiIHZhbHVlPSJyZWQiPiAgUmVkIDxici8+CiAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuZy1tb2RlbD0iY29sb3IiIHZhbHVlPSJncmVlbiI+IEdyZWVuIDxici8+CiAgICAgICAgICAgPGlucHV0IHR5cGU9InJhZGlvIiBuZy1tb2RlbD0iY29sb3IiIHZhbHVlPSJibHVlIj4gQmx1ZSA8YnIvPgogICAgICAgICAgIDx0dD5jb2xvciA9IHt7Y29sb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2RvYzpzb3VyY2U+CiAgICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb2xvcicpKS50b0VxdWFsKCdibHVlJyk7CgogICAgICAgICAgICBpbnB1dCgnY29sb3InKS5zZWxlY3QoJ3JlZCcpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygnY29sb3InKSkudG9FcXVhbCgncmVkJyk7CiAgICAgICAgICB9KTsKICAgICAgICA8L2RvYzpzY2VuYXJpbz4KICAgICAgPC9kb2M6ZXhhbXBsZT4KICAgKi8KICAncmFkaW8nOiByYWRpb0lucHV0VHlwZSwKCgogIC8qKgogICAqIEBuZ2RvYyBpbnB1dFR5cGUKICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6aW5wdXQuY2hlY2tib3gKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIEhUTUwgY2hlY2tib3guCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdUcnVlVmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nRmFsc2VWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIG5vdCBzZWxlY3RlZC4KICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgICAgPGRvYzpleGFtcGxlPgogICAgICAgIDxkb2M6c291cmNlPgogICAgICAgICA8c2NyaXB0PgogICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgICAkc2NvcGUudmFsdWUxID0gdHJ1ZTsKICAgICAgICAgICAgICRzY29wZS52YWx1ZTIgPSAnWUVTJwogICAgICAgICAgIH0KICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSIgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICAgVmFsdWUxOiA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJ2YWx1ZTEiPiA8YnIvPgogICAgICAgICAgIFZhbHVlMjogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0idmFsdWUyIgogICAgICAgICAgICAgICAgICAgICAgICAgIG5nLXRydWUtdmFsdWU9IllFUyIgbmctZmFsc2UtdmFsdWU9Ik5PIj4gPGJyLz4KICAgICAgICAgICA8dHQ+dmFsdWUxID0ge3t2YWx1ZTF9fTwvdHQ+PGJyLz4KICAgICAgICAgICA8dHQ+dmFsdWUyID0ge3t2YWx1ZTJ9fTwvdHQ+PGJyLz4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2RvYzpzb3VyY2U+CiAgICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZTEnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUyJykpLnRvRXF1YWwoJ1lFUycpOwoKICAgICAgICAgICAgaW5wdXQoJ3ZhbHVlMScpLmNoZWNrKCk7CiAgICAgICAgICAgIGlucHV0KCd2YWx1ZTInKS5jaGVjaygpOwogICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUxJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZTInKSkudG9FcXVhbCgnTk8nKTsKICAgICAgICAgIH0pOwogICAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgICA8L2RvYzpleGFtcGxlPgogICAqLwogICdjaGVja2JveCc6IGNoZWNrYm94SW5wdXRUeXBlLAoKICAnaGlkZGVuJzogbm9vcCwKICAnYnV0dG9uJzogbm9vcCwKICAnc3VibWl0Jzogbm9vcCwKICAncmVzZXQnOiBub29wCn07CgovLyBBIGhlbHBlciBmdW5jdGlvbiB0byBjYWxsICRzZXRWYWxpZGl0eSBhbmQgcmV0dXJuIHRoZSB2YWx1ZSAvIHVuZGVmaW5lZCwKLy8gYSBwYXR0ZXJuIHRoYXQgaXMgcmVwZWF0ZWQgYSBsb3QgaW4gdGhlIGlucHV0IHZhbGlkYXRpb24gbG9naWMuCmZ1bmN0aW9uIHZhbGlkYXRlKGN0cmwsIHZhbGlkYXRvck5hbWUsIHZhbGlkaXR5LCB2YWx1ZSl7CiAgY3RybC4kc2V0VmFsaWRpdHkodmFsaWRhdG9yTmFtZSwgdmFsaWRpdHkpOwogIHJldHVybiB2YWxpZGl0eSA/IHZhbHVlIDogdW5kZWZpbmVkOwp9CgpmdW5jdGlvbiB0ZXh0SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHsKICAvLyBJbiBjb21wb3NpdGlvbiBtb2RlLCB1c2VycyBhcmUgc3RpbGwgaW5wdXRpbmcgaW50ZXJtZWRpYXRlIHRleHQgYnVmZmVyLAogIC8vIGhvbGQgdGhlIGxpc3RlbmVyIHVudGlsIGNvbXBvc2l0aW9uIGlzIGRvbmUuCiAgLy8gTW9yZSBhYm91dCBjb21wb3NpdGlvbiBldmVudHM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Db21wb3NpdGlvbkV2ZW50CiAgaWYgKCEkc25pZmZlci5hbmRyb2lkKSB7CiAgICB2YXIgY29tcG9zaW5nID0gZmFsc2U7CgogICAgZWxlbWVudC5vbignY29tcG9zaXRpb25zdGFydCcsIGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgY29tcG9zaW5nID0gdHJ1ZTsKICAgIH0pOwoKICAgIGVsZW1lbnQub24oJ2NvbXBvc2l0aW9uZW5kJywgZnVuY3Rpb24oKSB7CiAgICAgIGNvbXBvc2luZyA9IGZhbHNlOwogICAgfSk7CiAgfQoKICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbigpIHsKICAgIGlmIChjb21wb3NpbmcpIHJldHVybjsKICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsKCk7CgogICAgLy8gQnkgZGVmYXVsdCB3ZSB3aWxsIHRyaW0gdGhlIHZhbHVlCiAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5nLXRyaW0gZXhpc3RzIHdlIHdpbGwgYXZvaWQgdHJpbW1pbmcKICAgIC8vIGUuZy4gPGlucHV0IG5nLW1vZGVsPSJmb28iIG5nLXRyaW09ImZhbHNlIj4KICAgIGlmICh0b0Jvb2xlYW4oYXR0ci5uZ1RyaW0gfHwgJ1QnKSkgewogICAgICB2YWx1ZSA9IHRyaW0odmFsdWUpOwogICAgfQoKICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlKSB7CiAgICAgIGlmIChzY29wZS4kJHBoYXNlKSB7CiAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfTsKCiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0ICJpbnB1dCIgZXZlbnQsIHdlIGFyZSBmaW5lIC0gZXhjZXB0IG9uIElFOSB3aGljaCBkb2Vzbid0IGZpcmUgdGhlCiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0CiAgaWYgKCRzbmlmZmVyLmhhc0V2ZW50KCdpbnB1dCcpKSB7CiAgICBlbGVtZW50Lm9uKCdpbnB1dCcsIGxpc3RlbmVyKTsKICB9IGVsc2UgewogICAgdmFyIHRpbWVvdXQ7CgogICAgdmFyIGRlZmVyTGlzdGVuZXIgPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKCF0aW1lb3V0KSB7CiAgICAgICAgdGltZW91dCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgbGlzdGVuZXIoKTsKICAgICAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICAgIH0pOwogICAgICB9CiAgICB9OwoKICAgIGVsZW1lbnQub24oJ2tleWRvd24nLCBmdW5jdGlvbihldmVudCkgewogICAgICB2YXIga2V5ID0gZXZlbnQua2V5Q29kZTsKCiAgICAgIC8vIGlnbm9yZQogICAgICAvLyAgICBjb21tYW5kICAgICAgICAgICAgbW9kaWZpZXJzICAgICAgICAgICAgICAgICAgIGFycm93cwogICAgICBpZiAoa2V5ID09PSA5MSB8fCAoMTUgPCBrZXkgJiYga2V5IDwgMTkpIHx8ICgzNyA8PSBrZXkgJiYga2V5IDw9IDQwKSkgcmV0dXJuOwoKICAgICAgZGVmZXJMaXN0ZW5lcigpOwogICAgfSk7CgogICAgLy8gaWYgdXNlciBtb2RpZmllcyBpbnB1dCB2YWx1ZSB1c2luZyBjb250ZXh0IG1lbnUgaW4gSUUsIHdlIG5lZWQgInBhc3RlIiBhbmQgImN1dCIgZXZlbnRzIHRvIGNhdGNoIGl0CiAgICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ3Bhc3RlJykpIHsKICAgICAgZWxlbWVudC5vbigncGFzdGUgY3V0JywgZGVmZXJMaXN0ZW5lcik7CiAgICB9CiAgfQoKICAvLyBpZiB1c2VyIHBhc3RlIGludG8gaW5wdXQgdXNpbmcgbW91c2Ugb24gb2xkZXIgYnJvd3NlcgogIC8vIG9yIGZvcm0gYXV0b2NvbXBsZXRlIG9uIG5ld2VyIGJyb3dzZXIsIHdlIG5lZWQgImNoYW5nZSIgZXZlbnQgdG8gY2F0Y2ggaXQKICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBsaXN0ZW5lcik7CgogIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgZWxlbWVudC52YWwoY3RybC4kaXNFbXB0eShjdHJsLiR2aWV3VmFsdWUpID8gJycgOiBjdHJsLiR2aWV3VmFsdWUpOwogIH07CgogIC8vIHBhdHRlcm4gdmFsaWRhdG9yCiAgdmFyIHBhdHRlcm4gPSBhdHRyLm5nUGF0dGVybiwKICAgICAgcGF0dGVyblZhbGlkYXRvciwKICAgICAgbWF0Y2g7CgogIGlmIChwYXR0ZXJuKSB7CiAgICB2YXIgdmFsaWRhdGVSZWdleCA9IGZ1bmN0aW9uKHJlZ2V4cCwgdmFsdWUpIHsKICAgICAgcmV0dXJuIHZhbGlkYXRlKGN0cmwsICdwYXR0ZXJuJywgY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgcmVnZXhwLnRlc3QodmFsdWUpLCB2YWx1ZSk7CiAgICB9OwogICAgbWF0Y2ggPSBwYXR0ZXJuLm1hdGNoKC9eXC8oLiopXC8oW2dpbV0qKSQvKTsKICAgIGlmIChtYXRjaCkgewogICAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0pOwogICAgICBwYXR0ZXJuVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsaWRhdGVSZWdleChwYXR0ZXJuLCB2YWx1ZSk7CiAgICAgIH07CiAgICB9IGVsc2UgewogICAgICBwYXR0ZXJuVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICB2YXIgcGF0dGVybk9iaiA9IHNjb3BlLiRldmFsKHBhdHRlcm4pOwoKICAgICAgICBpZiAoIXBhdHRlcm5PYmogfHwgIXBhdHRlcm5PYmoudGVzdCkgewogICAgICAgICAgdGhyb3cgbWluRXJyKCduZ1BhdHRlcm4nKSgnbm9yZWdleHAnLAogICAgICAgICAgICAnRXhwZWN0ZWQgezB9IHRvIGJlIGEgUmVnRXhwIGJ1dCB3YXMgezF9LiBFbGVtZW50OiB7Mn0nLCBwYXR0ZXJuLAogICAgICAgICAgICBwYXR0ZXJuT2JqLCBzdGFydGluZ1RhZyhlbGVtZW50KSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB2YWxpZGF0ZVJlZ2V4KHBhdHRlcm5PYmosIHZhbHVlKTsKICAgICAgfTsKICAgIH0KCiAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2gocGF0dGVyblZhbGlkYXRvcik7CiAgICBjdHJsLiRwYXJzZXJzLnB1c2gocGF0dGVyblZhbGlkYXRvcik7CiAgfQoKICAvLyBtaW4gbGVuZ3RoIHZhbGlkYXRvcgogIGlmIChhdHRyLm5nTWlubGVuZ3RoKSB7CiAgICB2YXIgbWlubGVuZ3RoID0gaW50KGF0dHIubmdNaW5sZW5ndGgpOwogICAgdmFyIG1pbkxlbmd0aFZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgIHJldHVybiB2YWxpZGF0ZShjdHJsLCAnbWlubGVuZ3RoJywgY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID49IG1pbmxlbmd0aCwgdmFsdWUpOwogICAgfTsKCiAgICBjdHJsLiRwYXJzZXJzLnB1c2gobWluTGVuZ3RoVmFsaWRhdG9yKTsKICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChtaW5MZW5ndGhWYWxpZGF0b3IpOwogIH0KCiAgLy8gbWF4IGxlbmd0aCB2YWxpZGF0b3IKICBpZiAoYXR0ci5uZ01heGxlbmd0aCkgewogICAgdmFyIG1heGxlbmd0aCA9IGludChhdHRyLm5nTWF4bGVuZ3RoKTsKICAgIHZhciBtYXhMZW5ndGhWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICByZXR1cm4gdmFsaWRhdGUoY3RybCwgJ21heGxlbmd0aCcsIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA8PSBtYXhsZW5ndGgsIHZhbHVlKTsKICAgIH07CgogICAgY3RybC4kcGFyc2Vycy5wdXNoKG1heExlbmd0aFZhbGlkYXRvcik7CiAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2gobWF4TGVuZ3RoVmFsaWRhdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIG51bWJlcklucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CiAgdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTsKCiAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICB2YXIgZW1wdHkgPSBjdHJsLiRpc0VtcHR5KHZhbHVlKTsKICAgIGlmIChlbXB0eSB8fCBOVU1CRVJfUkVHRVhQLnRlc3QodmFsdWUpKSB7CiAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdudW1iZXInLCB0cnVlKTsKICAgICAgcmV0dXJuIHZhbHVlID09PSAnJyA/IG51bGwgOiAoZW1wdHkgPyB2YWx1ZSA6IHBhcnNlRmxvYXQodmFsdWUpKTsKICAgIH0gZWxzZSB7CiAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdudW1iZXInLCBmYWxzZSk7CiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CiAgfSk7CgogIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpID8gJycgOiAnJyArIHZhbHVlOwogIH0pOwoKICBpZiAoYXR0ci5taW4pIHsKICAgIHZhciBtaW5WYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICB2YXIgbWluID0gcGFyc2VGbG9hdChhdHRyLm1pbik7CiAgICAgIHJldHVybiB2YWxpZGF0ZShjdHJsLCAnbWluJywgY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgdmFsdWUgPj0gbWluLCB2YWx1ZSk7CiAgICB9OwoKICAgIGN0cmwuJHBhcnNlcnMucHVzaChtaW5WYWxpZGF0b3IpOwogICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKG1pblZhbGlkYXRvcik7CiAgfQoKICBpZiAoYXR0ci5tYXgpIHsKICAgIHZhciBtYXhWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICB2YXIgbWF4ID0gcGFyc2VGbG9hdChhdHRyLm1heCk7CiAgICAgIHJldHVybiB2YWxpZGF0ZShjdHJsLCAnbWF4JywgY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgdmFsdWUgPD0gbWF4LCB2YWx1ZSk7CiAgICB9OwoKICAgIGN0cmwuJHBhcnNlcnMucHVzaChtYXhWYWxpZGF0b3IpOwogICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKG1heFZhbGlkYXRvcik7CiAgfQoKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiB2YWxpZGF0ZShjdHJsLCAnbnVtYmVyJywgY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNOdW1iZXIodmFsdWUpLCB2YWx1ZSk7CiAgfSk7Cn0KCmZ1bmN0aW9uIHVybElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7CiAgdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTsKCiAgdmFyIHVybFZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsaWRhdGUoY3RybCwgJ3VybCcsIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IFVSTF9SRUdFWFAudGVzdCh2YWx1ZSksIHZhbHVlKTsKICB9OwoKICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2godXJsVmFsaWRhdG9yKTsKICBjdHJsLiRwYXJzZXJzLnB1c2godXJsVmFsaWRhdG9yKTsKfQoKZnVuY3Rpb24gZW1haWxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlcikgewogIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7CgogIHZhciBlbWFpbFZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsaWRhdGUoY3RybCwgJ2VtYWlsJywgY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgRU1BSUxfUkVHRVhQLnRlc3QodmFsdWUpLCB2YWx1ZSk7CiAgfTsKCiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGVtYWlsVmFsaWRhdG9yKTsKICBjdHJsLiRwYXJzZXJzLnB1c2goZW1haWxWYWxpZGF0b3IpOwp9CgpmdW5jdGlvbiByYWRpb0lucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkgewogIC8vIG1ha2UgdGhlIG5hbWUgdW5pcXVlLCBpZiBub3QgZGVmaW5lZAogIGlmIChpc1VuZGVmaW5lZChhdHRyLm5hbWUpKSB7CiAgICBlbGVtZW50LmF0dHIoJ25hbWUnLCBuZXh0VWlkKCkpOwogIH0KCiAgZWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgIGlmIChlbGVtZW50WzBdLmNoZWNrZWQpIHsKICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShhdHRyLnZhbHVlKTsKICAgICAgfSk7CiAgICB9CiAgfSk7CgogIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHZhbHVlID0gYXR0ci52YWx1ZTsKICAgIGVsZW1lbnRbMF0uY2hlY2tlZCA9ICh2YWx1ZSA9PSBjdHJsLiR2aWV3VmFsdWUpOwogIH07CgogIGF0dHIuJG9ic2VydmUoJ3ZhbHVlJywgY3RybC4kcmVuZGVyKTsKfQoKZnVuY3Rpb24gY2hlY2tib3hJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICB2YXIgdHJ1ZVZhbHVlID0gYXR0ci5uZ1RydWVWYWx1ZSwKICAgICAgZmFsc2VWYWx1ZSA9IGF0dHIubmdGYWxzZVZhbHVlOwoKICBpZiAoIWlzU3RyaW5nKHRydWVWYWx1ZSkpIHRydWVWYWx1ZSA9IHRydWU7CiAgaWYgKCFpc1N0cmluZyhmYWxzZVZhbHVlKSkgZmFsc2VWYWx1ZSA9IGZhbHNlOwoKICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudFswXS5jaGVja2VkKTsKICAgIH0pOwogIH0pOwoKICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgIGVsZW1lbnRbMF0uY2hlY2tlZCA9IGN0cmwuJHZpZXdWYWx1ZTsKICB9OwoKICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgYCRpc0VtcHR5YCBiZWNhdXNlIGEgdmFsdWUgb2YgYGZhbHNlYCBtZWFucyBlbXB0eSBpbiBhIGNoZWNrYm94LgogIGN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIHZhbHVlICE9PSB0cnVlVmFsdWU7CiAgfTsKCiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgPT09IHRydWVWYWx1ZTsKICB9KTsKCiAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUgPyB0cnVlVmFsdWUgOiBmYWxzZVZhbHVlOwogIH0pOwp9CgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOnRleHRhcmVhCiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBIVE1MIHRleHRhcmVhIGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBUaGUgZGF0YS1iaW5kaW5nIGFuZCB2YWxpZGF0aW9uCiAqIHByb3BlcnRpZXMgb2YgdGhpcyBlbGVtZW50IGFyZSBleGFjdGx5IHRoZSBzYW1lIGFzIHRob3NlIG9mIHRoZQogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0IGVsZW1lbnR9LgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC4KICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLgogKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8KICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2YKICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuCiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuCiAqICAgIG1pbmxlbmd0aC4KICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhbgogKiAgICBtYXhsZW5ndGguCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUKICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvcgogKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLgogKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXIKICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0CiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBIVE1MIGlucHV0IGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBJbnB1dCBjb250cm9sIGZvbGxvd3MgSFRNTDUgaW5wdXQgdHlwZXMKICogYW5kIHBvbHlmaWxscyB0aGUgSFRNTDUgdmFsaWRhdGlvbiBiZWhhdmlvciBmb3Igb2xkZXIgYnJvd3NlcnMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by4KICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLgogKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuCiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nUmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBpZiBzZXQgdG8gdHJ1ZQogKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhbgogKiAgICBtaW5sZW5ndGguCiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW4KICogICAgbWF4bGVuZ3RoLgogKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlCiAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3IKICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy4KICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyCiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUudXNlciA9IHtuYW1lOiAnZ3Vlc3QnLCBsYXN0OiAndmlzaXRvcid9OwogICAgICAgICB9CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgIDxmb3JtIG5hbWU9Im15Rm9ybSI+CiAgICAgICAgICAgVXNlciBuYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idXNlck5hbWUiIG5nLW1vZGVsPSJ1c2VyLm5hbWUiIHJlcXVpcmVkPgogICAgICAgICAgIDxzcGFuIGNsYXNzPSJlcnJvciIgbmctc2hvdz0ibXlGb3JtLnVzZXJOYW1lLiRlcnJvci5yZXF1aXJlZCI+CiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+PGJyPgogICAgICAgICAgIExhc3QgbmFtZTogPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Imxhc3ROYW1lIiBuZy1tb2RlbD0idXNlci5sYXN0IgogICAgICAgICAgICAgbmctbWlubGVuZ3RoPSIzIiBuZy1tYXhsZW5ndGg9IjEwIj4KICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXJyb3IiIG5nLXNob3c9Im15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWlubGVuZ3RoIj4KICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+CiAgICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1heGxlbmd0aCI+CiAgICAgICAgICAgICBUb28gbG9uZyE8L3NwYW4+PGJyPgogICAgICAgICA8L2Zvcm0+CiAgICAgICAgIDxocj4KICAgICAgICAgPHR0PnVzZXIgPSB7e3VzZXJ9fTwvdHQ+PGJyLz4KICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kdmFsaWQgPSB7e215Rm9ybS51c2VyTmFtZS4kdmFsaWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiRlcnJvciA9IHt7bXlGb3JtLnVzZXJOYW1lLiRlcnJvcn19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxicj4KICAgICAgICAgPHR0Pm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IgPSB7e215Rm9ybS5sYXN0TmFtZS4kZXJyb3J9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnI+CiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5taW5sZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5taW5sZW5ndGh9fTwvdHQ+PGJyPgogICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5tYXhsZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5tYXhsZW5ndGh9fTwvdHQ+PGJyPgogICAgICAgPC9kaXY+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyJykpLnRvRXF1YWwoJ3sibmFtZSI6Imd1ZXN0IiwibGFzdCI6InZpc2l0b3IifScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS51c2VyTmFtZS4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpOwogICAgICAgIH0pOwoKICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHkgd2hlbiByZXF1aXJlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3VzZXIubmFtZScpLmVudGVyKCcnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyJykpLnRvRXF1YWwoJ3sibGFzdCI6InZpc2l0b3IifScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS51c2VyTmFtZS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgZW1wdHkgd2hlbiBtaW4gbGVuZ3RoIGlzIHNldCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3VzZXIubGFzdCcpLmVudGVyKCcnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyJykpLnRvRXF1YWwoJ3sibmFtZSI6Imd1ZXN0IiwibGFzdCI6IiJ9Jyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ3VzZXIubGFzdCcpLmVudGVyKCd4eCcpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXInKSkudG9FcXVhbCgneyJuYW1lIjoiZ3Vlc3QifScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpLnRvTWF0Y2goL21pbmxlbmd0aC8pOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICB9KTsKCiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGxvbmdlciB0aGFuIG1heCBsZW5ndGgnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGlucHV0KCd1c2VyLmxhc3QnKS5lbnRlcignc29tZSByaWRpY3Vsb3VzbHkgbG9uZyBuYW1lJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygndXNlcicpKQogICAgICAgICAgICAudG9FcXVhbCgneyJuYW1lIjoiZ3Vlc3QifScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpLnRvTWF0Y2goL21heGxlbmd0aC8pOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTsKICAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsIGZ1bmN0aW9uKCRicm93c2VyLCAkc25pZmZlcikgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgcmVxdWlyZTogJz9uZ01vZGVsJywKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7CiAgICAgIGlmIChjdHJsKSB7CiAgICAgICAgKGlucHV0VHlwZVtsb3dlcmNhc2UoYXR0ci50eXBlKV0gfHwgaW5wdXRUeXBlLnRleHQpKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJyb3dzZXIpOwogICAgICB9CiAgICB9CiAgfTsKfV07Cgp2YXIgVkFMSURfQ0xBU1MgPSAnbmctdmFsaWQnLAogICAgSU5WQUxJRF9DTEFTUyA9ICduZy1pbnZhbGlkJywKICAgIFBSSVNUSU5FX0NMQVNTID0gJ25nLXByaXN0aW5lJywKICAgIERJUlRZX0NMQVNTID0gJ25nLWRpcnR5JzsKCi8qKgogKiBAbmdkb2Mgb2JqZWN0CiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyCiAqCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAkdmlld1ZhbHVlIEFjdHVhbCBzdHJpbmcgdmFsdWUgaW4gdGhlIHZpZXcuCiAqIEBwcm9wZXJ0eSB7Kn0gJG1vZGVsVmFsdWUgVGhlIHZhbHVlIGluIHRoZSBtb2RlbCwgdGhhdCB0aGUgY29udHJvbCBpcyBib3VuZCB0by4KICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkcGFyc2VycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSwgYXMgYSBwaXBlbGluZSwgd2hlbmV2ZXIKICAgICAgIHRoZSBjb250cm9sIHJlYWRzIHZhbHVlIGZyb20gdGhlIERPTS4gIEVhY2ggZnVuY3Rpb24gaXMgY2FsbGVkLCBpbiB0dXJuLCBwYXNzaW5nIHRoZSB2YWx1ZQogICAgICAgdGhyb3VnaCB0byB0aGUgbmV4dC4gVXNlZCB0byBzYW5pdGl6ZSAvIGNvbnZlcnQgdGhlIHZhbHVlIGFzIHdlbGwgYXMgdmFsaWRhdGlvbi4KICAgICAgIEZvciB2YWxpZGF0aW9uLCB0aGUgcGFyc2VycyBzaG91bGQgdXBkYXRlIHRoZSB2YWxpZGl0eSBzdGF0ZSB1c2luZwogICAgICAge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyI21ldGhvZHNfJHNldFZhbGlkaXR5ICRzZXRWYWxpZGl0eSgpfSwKICAgICAgIGFuZCByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIGludmFsaWQgdmFsdWVzLgoKICoKICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkZm9ybWF0dGVycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSwgYXMgYSBwaXBlbGluZSwgd2hlbmV2ZXIKICAgICAgIHRoZSBtb2RlbCB2YWx1ZSBjaGFuZ2VzLiBFYWNoIGZ1bmN0aW9uIGlzIGNhbGxlZCwgaW4gdHVybiwgcGFzc2luZyB0aGUgdmFsdWUgdGhyb3VnaCB0byB0aGUKICAgICAgIG5leHQuIFVzZWQgdG8gZm9ybWF0IC8gY29udmVydCB2YWx1ZXMgZm9yIGRpc3BsYXkgaW4gdGhlIGNvbnRyb2wgYW5kIHZhbGlkYXRpb24uCiAqICAgICAgPHByZT4KICogICAgICBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUpIHsKICogICAgICAgIGlmICh2YWx1ZSkgewogKiAgICAgICAgICByZXR1cm4gdmFsdWUudG9VcHBlckNhc2UoKTsKICogICAgICAgIH0KICogICAgICB9CiAqICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlcik7CiAqICAgICAgPC9wcmU+CiAqCiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUgd2hlbmV2ZXIgdGhlCiAqICAgICB2aWV3IHZhbHVlIGhhcyBjaGFuZ2VkLiBJdCBpcyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWQuCiAqICAgICBUaGlzIGNhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGFkZGl0aW9uYWwgJHdhdGNoZXMgYWdhaW5zdCB0aGUgbW9kZWwgdmFsdWUuCiAqCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgQW4gb2JqZWN0IGhhc2ggd2l0aCBhbGwgZXJyb3JzIGFzIGtleXMuCiAqCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbCB5ZXQuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgdGhlcmUgaXMgbm8gZXJyb3IuCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgZXJyb3Igb24gdGhlIGNvbnRyb2wuCiAqCiAqIEBkZXNjcmlwdGlvbgogKgogKiBgTmdNb2RlbENvbnRyb2xsZXJgIHByb3ZpZGVzIEFQSSBmb3IgdGhlIGBuZy1tb2RlbGAgZGlyZWN0aXZlLiBUaGUgY29udHJvbGxlciBjb250YWlucwogKiBzZXJ2aWNlcyBmb3IgZGF0YS1iaW5kaW5nLCB2YWxpZGF0aW9uLCBDU1MgdXBkYXRlcywgYW5kIHZhbHVlIGZvcm1hdHRpbmcgYW5kIHBhcnNpbmcuIEl0CiAqIHB1cnBvc2VmdWxseSBkb2VzIG5vdCBjb250YWluIGFueSBsb2dpYyB3aGljaCBkZWFscyB3aXRoIERPTSByZW5kZXJpbmcgb3IgbGlzdGVuaW5nIHRvCiAqIERPTSBldmVudHMuIFN1Y2ggRE9NIHJlbGF0ZWQgbG9naWMgc2hvdWxkIGJlIHByb3ZpZGVkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgd2hpY2ggbWFrZSB1c2Ugb2YKICogYE5nTW9kZWxDb250cm9sbGVyYCBmb3IgZGF0YS1iaW5kaW5nLgogKgogKiAjIyBDdXN0b20gQ29udHJvbCBFeGFtcGxlCiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBOZ01vZGVsQ29udHJvbGxlcmAgd2l0aCBhIGN1c3RvbSBjb250cm9sIHRvIGFjaGlldmUKICogZGF0YS1iaW5kaW5nLiBOb3RpY2UgaG93IGRpZmZlcmVudCBkaXJlY3RpdmVzIChgY29udGVudGVkaXRhYmxlYCwgYG5nLW1vZGVsYCwgYW5kIGByZXF1aXJlZGApCiAqIGNvbGxhYm9yYXRlIHRvZ2V0aGVyIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgcmVzdWx0LgogKgogKiBOb3RlIHRoYXQgYGNvbnRlbnRlZGl0YWJsZWAgaXMgYW4gSFRNTDUgYXR0cmlidXRlLCB3aGljaCB0ZWxscyB0aGUgYnJvd3NlciB0byBsZXQgdGhlIGVsZW1lbnQKICogY29udGVudHMgYmUgZWRpdGVkIGluIHBsYWNlIGJ5IHRoZSB1c2VyLiAgVGhpcyB3aWxsIG5vdCB3b3JrIG9uIG9sZGVyIGJyb3dzZXJzLgogKgogKiA8ZXhhbXBsZSBtb2R1bGU9ImN1c3RvbUNvbnRyb2wiPgogICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgW2NvbnRlbnRlZGl0YWJsZV0gewogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogICAgICAgIG1pbi1oZWlnaHQ6IDIwcHg7CiAgICAgIH0KCiAgICAgIC5uZy1pbnZhbGlkIHsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7CiAgICAgIH0KCiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tQ29udHJvbCcsIFtdKS4KICAgICAgICBkaXJlY3RpdmUoJ2NvbnRlbnRlZGl0YWJsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJywgLy8gb25seSBhY3RpdmF0ZSBvbiBlbGVtZW50IGF0dHJpYnV0ZQogICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnLCAvLyBnZXQgYSBob2xkIG9mIE5nTW9kZWxDb250cm9sbGVyCiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkgewogICAgICAgICAgICAgIGlmKCFuZ01vZGVsKSByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWwKCiAgICAgICAgICAgICAgLy8gU3BlY2lmeSBob3cgVUkgc2hvdWxkIGJlIHVwZGF0ZWQKICAgICAgICAgICAgICBuZ01vZGVsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgJycpOwogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2hhbmdlIGV2ZW50cyB0byBlbmFibGUgYmluZGluZwogICAgICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXIga2V5dXAgY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkocmVhZCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgcmVhZCgpOyAvLyBpbml0aWFsaXplCgogICAgICAgICAgICAgIC8vIFdyaXRlIGRhdGEgdG8gdGhlIG1vZGVsCiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVhZCgpIHsKICAgICAgICAgICAgICAgIHZhciBodG1sID0gZWxlbWVudC5odG1sKCk7CiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIGNsZWFyIHRoZSBjb250ZW50IGVkaXRhYmxlIHRoZSBicm93c2VyIGxlYXZlcyBhIDxicj4gYmVoaW5kCiAgICAgICAgICAgICAgICAvLyBJZiBzdHJpcC1iciBhdHRyaWJ1dGUgaXMgcHJvdmlkZWQgdGhlbiB3ZSBzdHJpcCB0aGlzIG91dAogICAgICAgICAgICAgICAgaWYoIGF0dHJzLnN0cmlwQnIgJiYgaHRtbCA9PSAnPGJyPicgKSB7CiAgICAgICAgICAgICAgICAgIGh0bWwgPSAnJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShodG1sKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIj4KICAgICAgIDxkaXYgY29udGVudGVkaXRhYmxlCiAgICAgICAgICAgIG5hbWU9Im15V2lkZ2V0IiBuZy1tb2RlbD0idXNlckNvbnRlbnQiCiAgICAgICAgICAgIHN0cmlwLWJyPSJ0cnVlIgogICAgICAgICAgICByZXF1aXJlZD5DaGFuZ2UgbWUhPC9kaXY+CiAgICAgICAgPHNwYW4gbmctc2hvdz0ibXlGb3JtLm15V2lkZ2V0LiRlcnJvci5yZXF1aXJlZCI+UmVxdWlyZWQhPC9zcGFuPgogICAgICAgPGhyPgogICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPSJ1c2VyQ29udGVudCI+PC90ZXh0YXJlYT4KICAgICAgPC9mb3JtPgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICBpdCgnc2hvdWxkIGRhdGEtYmluZCBhbmQgYmVjb21lIGludmFsaWQnLCBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgY29udGVudEVkaXRhYmxlID0gZWxlbWVudCgnW2NvbnRlbnRlZGl0YWJsZV0nKTsKCiAgICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS50ZXh0KCkpLnRvRXF1YWwoJ0NoYW5nZSBtZSEnKTsKICAgICAgICBpbnB1dCgndXNlckNvbnRlbnQnKS5lbnRlcignJyk7CiAgICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS50ZXh0KCkpLnRvRXF1YWwoJycpOwogICAgICAgIGV4cGVjdChjb250ZW50RWRpdGFibGUucHJvcCgnY2xhc3NOYW1lJykpLnRvTWF0Y2goL25nLWludmFsaWQtcmVxdWlyZWQvKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAqIDwvZXhhbXBsZT4KICoKICoKICovCnZhciBOZ01vZGVsQ29udHJvbGxlciA9IFsnJHNjb3BlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRhdHRycycsICckZWxlbWVudCcsICckcGFyc2UnLAogICAgZnVuY3Rpb24oJHNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlciwgJGF0dHIsICRlbGVtZW50LCAkcGFyc2UpIHsKICB0aGlzLiR2aWV3VmFsdWUgPSBOdW1iZXIuTmFOOwogIHRoaXMuJG1vZGVsVmFsdWUgPSBOdW1iZXIuTmFOOwogIHRoaXMuJHBhcnNlcnMgPSBbXTsKICB0aGlzLiRmb3JtYXR0ZXJzID0gW107CiAgdGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycyA9IFtdOwogIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTsKICB0aGlzLiRkaXJ0eSA9IGZhbHNlOwogIHRoaXMuJHZhbGlkID0gdHJ1ZTsKICB0aGlzLiRpbnZhbGlkID0gZmFsc2U7CiAgdGhpcy4kbmFtZSA9ICRhdHRyLm5hbWU7CgogIHZhciBuZ01vZGVsR2V0ID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwpLAogICAgICBuZ01vZGVsU2V0ID0gbmdNb2RlbEdldC5hc3NpZ247CgogIGlmICghbmdNb2RlbFNldCkgewogICAgdGhyb3cgbWluRXJyKCduZ01vZGVsJykoJ25vbmFzc2lnbicsICJFeHByZXNzaW9uICd7MH0nIGlzIG5vbi1hc3NpZ25hYmxlLiBFbGVtZW50OiB7MX0iLAogICAgICAgICRhdHRyLm5nTW9kZWwsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7CiAgfQoKICAvKioKICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcmVuZGVyCiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDYWxsZWQgd2hlbiB0aGUgdmlldyBuZWVkcyB0byBiZSB1cGRhdGVkLiBJdCBpcyBleHBlY3RlZCB0aGF0IHRoZSB1c2VyIG9mIHRoZSBuZy1tb2RlbAogICAqIGRpcmVjdGl2ZSB3aWxsIGltcGxlbWVudCB0aGlzIG1ldGhvZC4KICAgKi8KICB0aGlzLiRyZW5kZXIgPSBub29wOwoKICAvKioKICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgKiBAbmFtZSB7IG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRpc0VtcHR5CiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgaXMgZW1wdHkuCiAgICoKICAgKiBGb3IgaW5zdGFuY2UsIHRoZSByZXF1aXJlZCBkaXJlY3RpdmUgZG9lcyB0aGlzIHRvIHdvcmsgb3V0IGlmIHRoZSBpbnB1dCBoYXMgZGF0YSBvciBub3QuCiAgICogVGhlIGRlZmF1bHQgYCRpc0VtcHR5YCBmdW5jdGlvbiBjaGVja3Mgd2hldGhlciB0aGUgdmFsdWUgaXMgYHVuZGVmaW5lZGAsIGAnJ2AsIGBudWxsYCBvciBgTmFOYC4KICAgKgogICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBmb3IgaW5wdXQgZGlyZWN0aXZlcyB3aG9zZSBjb25jZXB0IG9mIGJlaW5nIGVtcHR5IGlzIGRpZmZlcmVudCB0byB0aGUKICAgKiBkZWZhdWx0LiBUaGUgYGNoZWNrYm94SW5wdXRUeXBlYCBkaXJlY3RpdmUgZG9lcyB0aGlzIGJlY2F1c2UgaW4gaXRzIGNhc2UgYSB2YWx1ZSBvZiBgZmFsc2VgCiAgICogaW1wbGllcyBlbXB0eS4KICAgKi8KICB0aGlzLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTsKICB9OwoKICB2YXIgcGFyZW50Rm9ybSA9ICRlbGVtZW50LmluaGVyaXRlZERhdGEoJyRmb3JtQ29udHJvbGxlcicpIHx8IG51bGxGb3JtQ3RybCwKICAgICAgaW52YWxpZENvdW50ID0gMCwgLy8gdXNlZCB0byBlYXNpbHkgZGV0ZXJtaW5lIGlmIHdlIGFyZSB2YWxpZAogICAgICAkZXJyb3IgPSB0aGlzLiRlcnJvciA9IHt9OyAvLyBrZWVwIGludmFsaWQga2V5cyBoZXJlCgoKICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sCiAgJGVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpOwogIHRvZ2dsZVZhbGlkQ3NzKHRydWUpOwoKICAvLyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGVhc3kgdG9nZ2xpbmcgb2YgY2xhc3NlcwogIGZ1bmN0aW9uIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQsIHZhbGlkYXRpb25FcnJvcktleSkgewogICAgdmFsaWRhdGlvbkVycm9yS2V5ID0gdmFsaWRhdGlvbkVycm9yS2V5ID8gJy0nICsgc25ha2VfY2FzZSh2YWxpZGF0aW9uRXJyb3JLZXksICctJykgOiAnJzsKICAgICRlbGVtZW50LgogICAgICByZW1vdmVDbGFzcygoaXNWYWxpZCA/IElOVkFMSURfQ0xBU1MgOiBWQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpLgogICAgICBhZGRDbGFzcygoaXNWYWxpZCA/IFZBTElEX0NMQVNTIDogSU5WQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpOwogIH0KCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5CiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyCiAgICoKICAgKiBAZGVzY3JpcHRpb24KICAgKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZpZXMgdGhlIGZvcm0gd2hlbiB0aGUgY29udHJvbCBjaGFuZ2VzIHZhbGlkaXR5LiAoaS5lLiBpdAogICAqIGRvZXMgbm90IG5vdGlmeSBmb3JtIGlmIGdpdmVuIHZhbGlkYXRvciBpcyBhbHJlYWR5IG1hcmtlZCBhcyBpbnZhbGlkKS4KICAgKgogICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgYnkgdmFsaWRhdG9ycyAtIGkuZS4gdGhlIHBhcnNlciBvciBmb3JtYXR0ZXIgZnVuY3Rpb25zLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIHRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGFzc2lnbgogICAqICAgICAgICB0byBgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV09aXNWYWxpZGAgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy4KICAgKiAgICAgICAgVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZQogICAqICAgICAgICBmb3IgY2xhc3MgbmFtZS4gRXhhbXBsZTogYG15RXJyb3JgIHdpbGwgcmVzdWx0IGluIGBuZy12YWxpZC1teS1lcnJvcmAgYW5kIGBuZy1pbnZhbGlkLW15LWVycm9yYAogICAqICAgICAgICBjbGFzcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzICBge3tzb21lRm9ybS5zb21lQ29udHJvbC4kZXJyb3IubXlFcnJvcn19YCAuCiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpIG9yIGludmFsaWQgKGZhbHNlKS4KICAgKi8KICB0aGlzLiRzZXRWYWxpZGl0eSA9IGZ1bmN0aW9uKHZhbGlkYXRpb25FcnJvcktleSwgaXNWYWxpZCkgewogICAgLy8gUHVycG9zZWZ1bCB1c2Ugb2YgISBoZXJlIHRvIGNhc3QgaXNWYWxpZCB0byBib29sZWFuIGluIGNhc2UgaXQgaXMgdW5kZWZpbmVkCiAgICAvLyBqc2hpbnQgLVcwMTgKICAgIGlmICgkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSA9PT0gIWlzVmFsaWQpIHJldHVybjsKICAgIC8vIGpzaGludCArVzAxOAoKICAgIGlmIChpc1ZhbGlkKSB7CiAgICAgIGlmICgkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkgaW52YWxpZENvdW50LS07CiAgICAgIGlmICghaW52YWxpZENvdW50KSB7CiAgICAgICAgdG9nZ2xlVmFsaWRDc3ModHJ1ZSk7CiAgICAgICAgdGhpcy4kdmFsaWQgPSB0cnVlOwogICAgICAgIHRoaXMuJGludmFsaWQgPSBmYWxzZTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdG9nZ2xlVmFsaWRDc3MoZmFsc2UpOwogICAgICB0aGlzLiRpbnZhbGlkID0gdHJ1ZTsKICAgICAgdGhpcy4kdmFsaWQgPSBmYWxzZTsKICAgICAgaW52YWxpZENvdW50Kys7CiAgICB9CgogICAgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV0gPSAhaXNWYWxpZDsKICAgIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQsIHZhbGlkYXRpb25FcnJvcktleSk7CgogICAgcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkLCB0aGlzKTsKICB9OwoKICAvKioKICAgKiBAbmdkb2MgZnVuY3Rpb24KICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0UHJpc3RpbmUKICAgKiBAbWV0aG9kT2YgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIKICAgKgogICAqIEBkZXNjcmlwdGlvbgogICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lIHN0YXRlLgogICAqCiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmUKICAgKiBzdGF0ZSAobmctcHJpc3RpbmUgY2xhc3MpLgogICAqLwogIHRoaXMuJHNldFByaXN0aW5lID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy4kZGlydHkgPSBmYWxzZTsKICAgIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTsKICAgICRlbGVtZW50LnJlbW92ZUNsYXNzKERJUlRZX0NMQVNTKS5hZGRDbGFzcyhQUklTVElORV9DTEFTUyk7CiAgfTsKCiAgLyoqCiAgICogQG5nZG9jIGZ1bmN0aW9uCiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZQogICAqIEBtZXRob2RPZiBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcgogICAqCiAgICogQGRlc2NyaXB0aW9uCiAgICogVXBkYXRlIHRoZSB2aWV3IHZhbHVlLgogICAqCiAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSB2aWV3IHZhbHVlIGNoYW5nZXMsIHR5cGljYWxseSBmcm9tIHdpdGhpbiBhIERPTSBldmVudCBoYW5kbGVyLgogICAqIEZvciBleGFtcGxlIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9IGFuZAogICAqIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH0gZGlyZWN0aXZlcyBjYWxsIGl0LgogICAqCiAgICogSXQgd2lsbCB1cGRhdGUgdGhlICR2aWV3VmFsdWUsIHRoZW4gcGFzcyB0aGlzIHZhbHVlIHRocm91Z2ggZWFjaCBvZiB0aGUgZnVuY3Rpb25zIGluIGAkcGFyc2Vyc2AsCiAgICogd2hpY2ggaW5jbHVkZXMgYW55IHZhbGlkYXRvcnMuIFRoZSB2YWx1ZSB0aGF0IGNvbWVzIG91dCBvZiB0aGlzIGAkcGFyc2Vyc2AgcGlwZWxpbmUsIGJlIGFwcGxpZWQgdG8KICAgKiBgJG1vZGVsVmFsdWVgIGFuZCB0aGUgKipleHByZXNzaW9uKiogc3BlY2lmaWVkIGluIHRoZSBgbmctbW9kZWxgIGF0dHJpYnV0ZS4KICAgKgogICAqIExhc3RseSwgYWxsIHRoZSByZWdpc3RlcmVkIGNoYW5nZSBsaXN0ZW5lcnMsIGluIHRoZSBgJHZpZXdDaGFuZ2VMaXN0ZW5lcnNgIGxpc3QsIGFyZSBjYWxsZWQuCiAgICoKICAgKiBOb3RlIHRoYXQgY2FsbGluZyB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IHRyaWdnZXIgYSBgJGRpZ2VzdGAuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgZnJvbSB0aGUgdmlldy4KICAgKi8KICB0aGlzLiRzZXRWaWV3VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgdGhpcy4kdmlld1ZhbHVlID0gdmFsdWU7CgogICAgLy8gY2hhbmdlIHRvIGRpcnR5CiAgICBpZiAodGhpcy4kcHJpc3RpbmUpIHsKICAgICAgdGhpcy4kZGlydHkgPSB0cnVlOwogICAgICB0aGlzLiRwcmlzdGluZSA9IGZhbHNlOwogICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoRElSVFlfQ0xBU1MpOwogICAgICBwYXJlbnRGb3JtLiRzZXREaXJ0eSgpOwogICAgfQoKICAgIGZvckVhY2godGhpcy4kcGFyc2VycywgZnVuY3Rpb24oZm4pIHsKICAgICAgdmFsdWUgPSBmbih2YWx1ZSk7CiAgICB9KTsKCiAgICBpZiAodGhpcy4kbW9kZWxWYWx1ZSAhPT0gdmFsdWUpIHsKICAgICAgdGhpcy4kbW9kZWxWYWx1ZSA9IHZhbHVlOwogICAgICBuZ01vZGVsU2V0KCRzY29wZSwgdmFsdWUpOwogICAgICBmb3JFYWNoKHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGxpc3RlbmVyKCk7CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH07CgogIC8vIG1vZGVsIC0+IHZhbHVlCiAgdmFyIGN0cmwgPSB0aGlzOwoKICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nTW9kZWxXYXRjaCgpIHsKICAgIHZhciB2YWx1ZSA9IG5nTW9kZWxHZXQoJHNjb3BlKTsKCiAgICAvLyBpZiBzY29wZSBtb2RlbCB2YWx1ZSBhbmQgbmdNb2RlbCB2YWx1ZSBhcmUgb3V0IG9mIHN5bmMKICAgIGlmIChjdHJsLiRtb2RlbFZhbHVlICE9PSB2YWx1ZSkgewoKICAgICAgdmFyIGZvcm1hdHRlcnMgPSBjdHJsLiRmb3JtYXR0ZXJzLAogICAgICAgICAgaWR4ID0gZm9ybWF0dGVycy5sZW5ndGg7CgogICAgICBjdHJsLiRtb2RlbFZhbHVlID0gdmFsdWU7CiAgICAgIHdoaWxlKGlkeC0tKSB7CiAgICAgICAgdmFsdWUgPSBmb3JtYXR0ZXJzW2lkeF0odmFsdWUpOwogICAgICB9CgogICAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2YWx1ZSkgewogICAgICAgIGN0cmwuJHZpZXdWYWx1ZSA9IHZhbHVlOwogICAgICAgIGN0cmwuJHJlbmRlcigpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHZhbHVlOwogIH0pOwp9XTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb2RlbAogKgogKiBAZWxlbWVudCBpbnB1dAogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ01vZGVsYCBkaXJlY3RpdmUgYmluZHMgYW4gYGlucHV0YCxgc2VsZWN0YCwgYHRleHRhcmVhYCAob3IgY3VzdG9tIGZvcm0gY29udHJvbCkgdG8gYQogKiBwcm9wZXJ0eSBvbiB0aGUgc2NvcGUgdXNpbmcge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIE5nTW9kZWxDb250cm9sbGVyfSwKICogd2hpY2ggaXMgY3JlYXRlZCBhbmQgZXhwb3NlZCBieSB0aGlzIGRpcmVjdGl2ZS4KICoKICogYG5nTW9kZWxgIGlzIHJlc3BvbnNpYmxlIGZvcjoKICoKICogLSBCaW5kaW5nIHRoZSB2aWV3IGludG8gdGhlIG1vZGVsLCB3aGljaCBvdGhlciBkaXJlY3RpdmVzIHN1Y2ggYXMgYGlucHV0YCwgYHRleHRhcmVhYCBvciBgc2VsZWN0YAogKiAgIHJlcXVpcmUuCiAqIC0gUHJvdmlkaW5nIHZhbGlkYXRpb24gYmVoYXZpb3IgKGkuZS4gcmVxdWlyZWQsIG51bWJlciwgZW1haWwsIHVybCkuCiAqIC0gS2VlcGluZyB0aGUgc3RhdGUgb2YgdGhlIGNvbnRyb2wgKHZhbGlkL2ludmFsaWQsIGRpcnR5L3ByaXN0aW5lLCB2YWxpZGF0aW9uIGVycm9ycykuCiAqIC0gU2V0dGluZyByZWxhdGVkIGNzcyBjbGFzc2VzIG9uIHRoZSBlbGVtZW50IChgbmctdmFsaWRgLCBgbmctaW52YWxpZGAsIGBuZy1kaXJ0eWAsIGBuZy1wcmlzdGluZWApLgogKiAtIFJlZ2lzdGVyaW5nIHRoZSBjb250cm9sIHdpdGggaXRzIHBhcmVudCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0uCiAqCiAqIE5vdGU6IGBuZ01vZGVsYCB3aWxsIHRyeSB0byBiaW5kIHRvIHRoZSBwcm9wZXJ0eSBnaXZlbiBieSBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uIG9uIHRoZQogKiBjdXJyZW50IHNjb3BlLiBJZiB0aGUgcHJvcGVydHkgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIHRoaXMgc2NvcGUsIGl0IHdpbGwgYmUgY3JlYXRlZAogKiBpbXBsaWNpdGx5IGFuZCBhZGRlZCB0byB0aGUgc2NvcGUuCiAqCiAqIEZvciBiZXN0IHByYWN0aWNlcyBvbiB1c2luZyBgbmdNb2RlbGAsIHNlZToKICoKICogIC0ge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9VbmRlcnN0YW5kaW5nLVNjb3Blc30KICoKICogRm9yIGJhc2ljIGV4YW1wbGVzLCBob3cgdG8gdXNlIGBuZ01vZGVsYCwgc2VlOgogKgogKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fQogKiAgICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQudGV4dCB0ZXh0fQogKiAgICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQuY2hlY2tib3ggY2hlY2tib3h9CiAqICAgIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dC5yYWRpbyByYWRpb30KICogICAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0Lm51bWJlciBudW1iZXJ9CiAqICAgIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dC5lbWFpbCBlbWFpbH0KICogICAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0LnVybCB1cmx9CiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH0KICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTp0ZXh0YXJlYSB0ZXh0YXJlYX0KICoKICovCnZhciBuZ01vZGVsRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHsKICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdeP2Zvcm0nXSwKICAgIGNvbnRyb2xsZXI6IE5nTW9kZWxDb250cm9sbGVyLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7CiAgICAgIC8vIG5vdGlmeSBvdGhlcnMsIGVzcGVjaWFsbHkgcGFyZW50IGZvcm1zCgogICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF0sCiAgICAgICAgICBmb3JtQ3RybCA9IGN0cmxzWzFdIHx8IG51bGxGb3JtQ3RybDsKCiAgICAgIGZvcm1DdHJsLiRhZGRDb250cm9sKG1vZGVsQ3RybCk7CgogICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgZm9ybUN0cmwuJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTsKICAgICAgfSk7CiAgICB9CiAgfTsKfTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDaGFuZ2UKICoKICogQGRlc2NyaXB0aW9uCiAqIEV2YWx1YXRlIGdpdmVuIGV4cHJlc3Npb24gd2hlbiB1c2VyIGNoYW5nZXMgdGhlIGlucHV0LgogKiBUaGUgZXhwcmVzc2lvbiBpcyBub3QgZXZhbHVhdGVkIHdoZW4gdGhlIHZhbHVlIGNoYW5nZSBpcyBjb21pbmcgZnJvbSB0aGUgbW9kZWwuCiAqCiAqIE5vdGUsIHRoaXMgZGlyZWN0aXZlIHJlcXVpcmVzIGBuZ01vZGVsYCB0byBiZSBwcmVzZW50LgogKgogKiBAZWxlbWVudCBpbnB1dAogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2hhbmdlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24gY2hhbmdlCiAqIGluIGlucHV0IHZhbHVlLgogKgogKiBAZXhhbXBsZQogKiA8ZG9jOmV4YW1wbGU+CiAqICAgPGRvYzpzb3VyY2U+CiAqICAgICA8c2NyaXB0PgogKiAgICAgICBmdW5jdGlvbiBDb250cm9sbGVyKCRzY29wZSkgewogKiAgICAgICAgICRzY29wZS5jb3VudGVyID0gMDsKICogICAgICAgICAkc2NvcGUuY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAqICAgICAgICAgICAkc2NvcGUuY291bnRlcisrOwogKiAgICAgICAgIH07CiAqICAgICAgIH0KICogICAgIDwvc2NyaXB0PgogKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJDb250cm9sbGVyIj4KICogICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY29uZmlybWVkIiBuZy1jaGFuZ2U9ImNoYW5nZSgpIiBpZD0ibmctY2hhbmdlLWV4YW1wbGUxIiAvPgogKiAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJjb25maXJtZWQiIGlkPSJuZy1jaGFuZ2UtZXhhbXBsZTIiIC8+CiAqICAgICAgIDxsYWJlbCBmb3I9Im5nLWNoYW5nZS1leGFtcGxlMiI+Q29uZmlybWVkPC9sYWJlbD48YnIgLz4KICogICAgICAgZGVidWcgPSB7e2NvbmZpcm1lZH19PGJyIC8+CiAqICAgICAgIGNvdW50ZXIgPSB7e2NvdW50ZXJ9fQogKiAgICAgPC9kaXY+CiAqICAgPC9kb2M6c291cmNlPgogKiAgIDxkb2M6c2NlbmFyaW8+CiAqICAgICBpdCgnc2hvdWxkIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gdmlldycsIGZ1bmN0aW9uKCkgewogKiAgICAgICBleHBlY3QoYmluZGluZygnY291bnRlcicpKS50b0VxdWFsKCcwJyk7CiAqICAgICAgIGVsZW1lbnQoJyNuZy1jaGFuZ2UtZXhhbXBsZTEnKS5jbGljaygpOwogKiAgICAgICBleHBlY3QoYmluZGluZygnY291bnRlcicpKS50b0VxdWFsKCcxJyk7CiAqICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb25maXJtZWQnKSkudG9FcXVhbCgndHJ1ZScpOwogKiAgICAgfSk7CiAqCiAqICAgICBpdCgnc2hvdWxkIG5vdCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIG1vZGVsJywgZnVuY3Rpb24oKSB7CiAqICAgICAgIGVsZW1lbnQoJyNuZy1jaGFuZ2UtZXhhbXBsZTInKS5jbGljaygpOwogKiAgICAgICBleHBlY3QoYmluZGluZygnY291bnRlcicpKS50b0VxdWFsKCcwJyk7CiAqICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb25maXJtZWQnKSkudG9FcXVhbCgndHJ1ZScpOwogKiAgICAgfSk7CiAqICAgPC9kb2M6c2NlbmFyaW8+CiAqIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdDaGFuZ2VEaXJlY3RpdmUgPSB2YWx1ZUZuKHsKICByZXF1aXJlOiAnbmdNb2RlbCcsCiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHsKICAgIGN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHsKICAgICAgc2NvcGUuJGV2YWwoYXR0ci5uZ0NoYW5nZSk7CiAgICB9KTsKICB9Cn0pOwoKCnZhciByZXF1aXJlZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICByZXF1aXJlOiAnP25nTW9kZWwnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkgewogICAgICBpZiAoIWN0cmwpIHJldHVybjsKICAgICAgYXR0ci5yZXF1aXJlZCA9IHRydWU7IC8vIGZvcmNlIHRydXRoeSBpbiBjYXNlIHdlIGFyZSBvbiBub24gaW5wdXQgZWxlbWVudAoKICAgICAgdmFyIHZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKGF0dHIucmVxdWlyZWQgJiYgY3RybC4kaXNFbXB0eSh2YWx1ZSkpIHsKICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdyZXF1aXJlZCcsIGZhbHNlKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgdHJ1ZSk7CiAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfQogICAgICB9OwoKICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKHZhbGlkYXRvcik7CiAgICAgIGN0cmwuJHBhcnNlcnMudW5zaGlmdCh2YWxpZGF0b3IpOwoKICAgICAgYXR0ci4kb2JzZXJ2ZSgncmVxdWlyZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICB2YWxpZGF0b3IoY3RybC4kdmlld1ZhbHVlKTsKICAgICAgfSk7CiAgICB9CiAgfTsKfTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdMaXN0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUZXh0IGlucHV0IHRoYXQgY29udmVydHMgYmV0d2VlbiBhIGRlbGltaXRlZCBzdHJpbmcgYW5kIGFuIGFycmF5IG9mIHN0cmluZ3MuIFRoZSBkZWxpbWl0ZXIKICogY2FuIGJlIGEgZml4ZWQgc3RyaW5nIChieSBkZWZhdWx0IGEgY29tbWEpIG9yIGEgcmVndWxhciBleHByZXNzaW9uLgogKgogKiBAZWxlbWVudCBpbnB1dAogKiBAcGFyYW0ge3N0cmluZz19IG5nTGlzdCBvcHRpb25hbCBkZWxpbWl0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBzcGxpdCB0aGUgdmFsdWUuIElmCiAqICAgc3BlY2lmaWVkIGluIGZvcm0gYC9zb21ldGhpbmcvYCB0aGVuIHRoZSB2YWx1ZSB3aWxsIGJlIGNvbnZlcnRlZCBpbnRvIGEgcmVndWxhciBleHByZXNzaW9uLgogKgogKiBAZXhhbXBsZQogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgIDxzY3JpcHQ+CiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydpZ29yJywgJ21pc2tvJywgJ3ZvanRhJ107CiAgICAgICAgIH0KICAgICAgIDwvc2NyaXB0PgogICAgICAgPGZvcm0gbmFtZT0ibXlGb3JtIiBuZy1jb250cm9sbGVyPSJDdHJsIj4KICAgICAgICAgTGlzdDogPGlucHV0IG5hbWU9Im5hbWVzSW5wdXQiIG5nLW1vZGVsPSJuYW1lcyIgbmctbGlzdCByZXF1aXJlZD4KICAgICAgICAgPHNwYW4gY2xhc3M9ImVycm9yIiBuZy1zaG93PSJteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IucmVxdWlyZWQiPgogICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj4KICAgICAgICAgPGJyPgogICAgICAgICA8dHQ+bmFtZXMgPSB7e25hbWVzfX08L3R0Pjxici8+CiAgICAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZH19PC90dD48YnIvPgogICAgICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz4KICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz4KICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPgogICAgICAgIDwvZm9ybT4KICAgICAgPC9kb2M6c291cmNlPgogICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ25hbWVzJykpLnRvRXF1YWwoJ1siaWdvciIsIm1pc2tvIiwidm9qdGEiXScpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnc3Bhbi5lcnJvcicpLmNzcygnZGlzcGxheScpKS50b0JlKCdub25lJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgaW5wdXQoJ25hbWVzJykuZW50ZXIoJycpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ25hbWVzJykpLnRvRXF1YWwoJycpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJ3NwYW4uZXJyb3InKS5jc3MoJ2Rpc3BsYXknKSkubm90KCkudG9CZSgnbm9uZScpOwogICAgICAgIH0pOwogICAgICA8L2RvYzpzY2VuYXJpbz4KICAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdMaXN0RGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHsKICAgIHJlcXVpcmU6ICduZ01vZGVsJywKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7CiAgICAgIHZhciBtYXRjaCA9IC9cLyguKilcLy8uZXhlYyhhdHRyLm5nTGlzdCksCiAgICAgICAgICBzZXBhcmF0b3IgPSBtYXRjaCAmJiBuZXcgUmVnRXhwKG1hdGNoWzFdKSB8fCBhdHRyLm5nTGlzdCB8fCAnLCc7CgogICAgICB2YXIgcGFyc2UgPSBmdW5jdGlvbih2aWV3VmFsdWUpIHsKICAgICAgICAvLyBJZiB0aGUgdmlld1ZhbHVlIGlzIGludmFsaWQgKHNheSByZXF1aXJlZCBidXQgZW1wdHkpIGl0IHdpbGwgYmUgYHVuZGVmaW5lZGAKICAgICAgICBpZiAoaXNVbmRlZmluZWQodmlld1ZhbHVlKSkgcmV0dXJuOwoKICAgICAgICB2YXIgbGlzdCA9IFtdOwoKICAgICAgICBpZiAodmlld1ZhbHVlKSB7CiAgICAgICAgICBmb3JFYWNoKHZpZXdWYWx1ZS5zcGxpdChzZXBhcmF0b3IpLCBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgICAgICBpZiAodmFsdWUpIGxpc3QucHVzaCh0cmltKHZhbHVlKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBsaXN0OwogICAgICB9OwoKICAgICAgY3RybC4kcGFyc2Vycy5wdXNoKHBhcnNlKTsKICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7CiAgICAgICAgICByZXR1cm4gdmFsdWUuam9pbignLCAnKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIH0pOwoKICAgICAgLy8gT3ZlcnJpZGUgdGhlIHN0YW5kYXJkICRpc0VtcHR5IGJlY2F1c2UgYW4gZW1wdHkgYXJyYXkgbWVhbnMgdGhlIGlucHV0IGlzIGVtcHR5LgogICAgICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICByZXR1cm4gIXZhbHVlIHx8ICF2YWx1ZS5sZW5ndGg7CiAgICAgIH07CiAgICB9CiAgfTsKfTsKCgp2YXIgQ09OU1RBTlRfVkFMVUVfUkVHRVhQID0gL14odHJ1ZXxmYWxzZXxcZCspJC87Ci8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1ZhbHVlCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBCaW5kcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgb2YgYGlucHV0W3NlbGVjdF1gIG9yIGBpbnB1dFtyYWRpb11gLCBzbwogKiB0aGF0IHdoZW4gdGhlIGVsZW1lbnQgaXMgc2VsZWN0ZWQsIHRoZSBgbmdNb2RlbGAgb2YgdGhhdCBlbGVtZW50IGlzIHNldCB0byB0aGUKICogYm91bmQgdmFsdWUuCiAqCiAqIGBuZ1ZhbHVlYCBpcyB1c2VmdWwgd2hlbiBkeW5hbWljYWxseSBnZW5lcmF0aW5nIGxpc3RzIG9mIHJhZGlvIGJ1dHRvbnMgdXNpbmcgYG5nLXJlcGVhdGAsIGFzCiAqIHNob3duIGJlbG93LgogKgogKiBAZWxlbWVudCBpbnB1dAogKiBAcGFyYW0ge3N0cmluZz19IG5nVmFsdWUgYW5ndWxhciBleHByZXNzaW9uLCB3aG9zZSB2YWx1ZSB3aWxsIGJlIGJvdW5kIHRvIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZQogKiAgIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQKICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICA8c2NyaXB0PgogICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydwaXp6YScsICd1bmljb3JucycsICdyb2JvdHMnXTsKICAgICAgICAgICAgJHNjb3BlLm15ID0geyBmYXZvcml0ZTogJ3VuaWNvcm5zJyB9OwogICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICAgPGZvcm0gbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICA8aDI+V2hpY2ggaXMgeW91ciBmYXZvcml0ZT88L2gyPgogICAgICAgICAgICA8bGFiZWwgbmctcmVwZWF0PSJuYW1lIGluIG5hbWVzIiBmb3I9Int7bmFtZX19Ij4KICAgICAgICAgICAgICB7e25hbWV9fQogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgICAgbmctbW9kZWw9Im15LmZhdm9yaXRlIgogICAgICAgICAgICAgICAgICAgICBuZy12YWx1ZT0ibmFtZSIKICAgICAgICAgICAgICAgICAgICAgaWQ9Int7bmFtZX19IgogICAgICAgICAgICAgICAgICAgICBuYW1lPSJmYXZvcml0ZSI+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICA8ZGl2PllvdSBjaG9zZSB7e215LmZhdm9yaXRlfX08L2Rpdj4KICAgICAgICA8L2Zvcm0+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteS5mYXZvcml0ZScpKS50b0VxdWFsKCd1bmljb3JucycpOwogICAgICAgIH0pOwogICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGlucHV0KCdteS5mYXZvcml0ZScpLnNlbGVjdCgncGl6emEnKTsKICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteS5mYXZvcml0ZScpKS50b0VxdWFsKCdwaXp6YScpOwogICAgICAgIH0pOwogICAgICA8L2RvYzpzY2VuYXJpbz4KICAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdWYWx1ZURpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB7CiAgICBwcmlvcml0eTogMTAwLAogICAgY29tcGlsZTogZnVuY3Rpb24odHBsLCB0cGxBdHRyKSB7CiAgICAgIGlmIChDT05TVEFOVF9WQUxVRV9SRUdFWFAudGVzdCh0cGxBdHRyLm5nVmFsdWUpKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nVmFsdWVDb25zdGFudExpbmsoc2NvcGUsIGVsbSwgYXR0cikgewogICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHNjb3BlLiRldmFsKGF0dHIubmdWYWx1ZSkpOwogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nVmFsdWVMaW5rKHNjb3BlLCBlbG0sIGF0dHIpIHsKICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nVmFsdWUsIGZ1bmN0aW9uIHZhbHVlV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHZhbHVlKTsKICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgIH0KICAgIH0KICB9Owp9OwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQmluZAogKiBAcmVzdHJpY3QgQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdCaW5kYCBhdHRyaWJ1dGUgdGVsbHMgQW5ndWxhciB0byByZXBsYWNlIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHNwZWNpZmllZCBIVE1MIGVsZW1lbnQKICogd2l0aCB0aGUgdmFsdWUgb2YgYSBnaXZlbiBleHByZXNzaW9uLCBhbmQgdG8gdXBkYXRlIHRoZSB0ZXh0IGNvbnRlbnQgd2hlbiB0aGUgdmFsdWUgb2YgdGhhdAogKiBleHByZXNzaW9uIGNoYW5nZXMuCiAqCiAqIFR5cGljYWxseSwgeW91IGRvbid0IHVzZSBgbmdCaW5kYCBkaXJlY3RseSwgYnV0IGluc3RlYWQgeW91IHVzZSB0aGUgZG91YmxlIGN1cmx5IG1hcmt1cCBsaWtlCiAqIGB7eyBleHByZXNzaW9uIH19YCB3aGljaCBpcyBzaW1pbGFyIGJ1dCBsZXNzIHZlcmJvc2UuCiAqCiAqIEl0IGlzIHByZWZlcnJhYmxlIHRvIHVzZSBgbmdCaW5kYCBpbnN0ZWFkIG9mIGB7eyBleHByZXNzaW9uIH19YCB3aGVuIGEgdGVtcGxhdGUgaXMgbW9tZW50YXJpbHkKICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgc3RhdGUgYmVmb3JlIEFuZ3VsYXIgY29tcGlsZXMgaXQuIFNpbmNlIGBuZ0JpbmRgIGlzIGFuCiAqIGVsZW1lbnQgYXR0cmlidXRlLCBpdCBtYWtlcyB0aGUgYmluZGluZ3MgaW52aXNpYmxlIHRvIHRoZSB1c2VyIHdoaWxlIHRoZSBwYWdlIGlzIGxvYWRpbmcuCiAqCiAqIEFuIGFsdGVybmF0aXZlIHNvbHV0aW9uIHRvIHRoaXMgcHJvYmxlbSB3b3VsZCBiZSB1c2luZyB0aGUKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Nsb2FrIG5nQ2xvYWt9IGRpcmVjdGl2ZS4KICoKICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlLgogKgogKiBAZXhhbXBsZQogKiBFbnRlciBhIG5hbWUgaW4gdGhlIExpdmUgUHJldmlldyB0ZXh0IGJveDsgdGhlIGdyZWV0aW5nIGJlbG93IHRoZSB0ZXh0IGJveCBjaGFuZ2VzIGluc3RhbnRseS4KICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXaGlybGVkJzsKICAgICAgICAgfQogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICBFbnRlciBuYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im5hbWUiPjxicj4KICAgICAgICAgSGVsbG8gPHNwYW4gbmctYmluZD0ibmFtZSI+PC9zcGFuPiEKICAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCduYW1lJykpLnRvQmUoJ1doaXJsZWQnKTsKICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ25hbWUnKS5lbnRlcignd29ybGQnKTsKICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmJpbmRpbmcoJ25hbWUnKSkudG9CZSgnd29ybGQnKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIG5nQmluZERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgZWxlbWVudC5hZGRDbGFzcygnbmctYmluZGluZycpLmRhdGEoJyRiaW5kaW5nJywgYXR0ci5uZ0JpbmQpOwogIHNjb3BlLiR3YXRjaChhdHRyLm5nQmluZCwgZnVuY3Rpb24gbmdCaW5kV2F0Y2hBY3Rpb24odmFsdWUpIHsKICAgIC8vIFdlIGFyZSBwdXJwb3NlZnVsbHkgdXNpbmcgPT0gaGVyZSByYXRoZXIgdGhhbiA9PT0gYmVjYXVzZSB3ZSB3YW50IHRvCiAgICAvLyBjYXRjaCB3aGVuIHZhbHVlIGlzICJudWxsIG9yIHVuZGVmaW5lZCIKICAgIC8vIGpzaGludCAtVzA0MQogICAgZWxlbWVudC50ZXh0KHZhbHVlID09IHVuZGVmaW5lZCA/ICcnIDogdmFsdWUpOwogIH0pOwp9KTsKCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdCaW5kVGVtcGxhdGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdCaW5kVGVtcGxhdGVgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgdGhhdCB0aGUgZWxlbWVudAogKiB0ZXh0IGNvbnRlbnQgc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggdGhlIGludGVycG9sYXRpb24gb2YgdGhlIHRlbXBsYXRlCiAqIGluIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGF0dHJpYnV0ZS4KICogVW5saWtlIGBuZ0JpbmRgLCB0aGUgYG5nQmluZFRlbXBsYXRlYCBjYW4gY29udGFpbiBtdWx0aXBsZSBge3tgIGB9fWAKICogZXhwcmVzc2lvbnMuIFRoaXMgZGlyZWN0aXZlIGlzIG5lZWRlZCBzaW5jZSBzb21lIEhUTUwgZWxlbWVudHMKICogKHN1Y2ggYXMgVElUTEUgYW5kIE9QVElPTikgY2Fubm90IGNvbnRhaW4gU1BBTiBlbGVtZW50cy4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0JpbmRUZW1wbGF0ZSB0ZW1wbGF0ZSBvZiBmb3JtCiAqICAgPHR0Pnt7PC90dD4gPHR0PmV4cHJlc3Npb248L3R0PiA8dHQ+fX08L3R0PiB0byBldmFsLgogKgogKiBAZXhhbXBsZQogKiBUcnkgaXQgaGVyZTogZW50ZXIgdGV4dCBpbiB0ZXh0IGJveCBhbmQgd2F0Y2ggdGhlIGdyZWV0aW5nIGNoYW5nZS4KICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUuc2FsdXRhdGlvbiA9ICdIZWxsbyc7CiAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV29ybGQnOwogICAgICAgICB9CiAgICAgICA8L3NjcmlwdD4KICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgU2FsdXRhdGlvbjogPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJzYWx1dGF0aW9uIj48YnI+CiAgICAgICAgTmFtZTogPGlucHV0IHR5cGU9InRleHQiIG5nLW1vZGVsPSJuYW1lIj48YnI+CiAgICAgICAgPHByZSBuZy1iaW5kLXRlbXBsYXRlPSJ7e3NhbHV0YXRpb259fSB7e25hbWV9fSEiPjwvcHJlPgogICAgICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmJpbmRpbmcoJ3NhbHV0YXRpb24nKSkuCiAgICAgICAgICAgdG9CZSgnSGVsbG8nKTsKICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmJpbmRpbmcoJ25hbWUnKSkuCiAgICAgICAgICAgdG9CZSgnV29ybGQnKTsKICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3NhbHV0YXRpb24nKS5lbnRlcignR3JlZXRpbmdzJyk7CiAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCduYW1lJykuZW50ZXIoJ3VzZXInKTsKICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmJpbmRpbmcoJ3NhbHV0YXRpb24nKSkuCiAgICAgICAgICAgdG9CZSgnR3JlZXRpbmdzJyk7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCduYW1lJykpLgogICAgICAgICAgIHRvQmUoJ3VzZXInKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlID0gWyckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigkaW50ZXJwb2xhdGUpIHsKICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgIC8vIFRPRE86IG1vdmUgdGhpcyB0byBzY2VuYXJpbyBydW5uZXIKICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLm5nQmluZFRlbXBsYXRlKSk7CiAgICBlbGVtZW50LmFkZENsYXNzKCduZy1iaW5kaW5nJykuZGF0YSgnJGJpbmRpbmcnLCBpbnRlcnBvbGF0ZUZuKTsKICAgIGF0dHIuJG9ic2VydmUoJ25nQmluZFRlbXBsYXRlJywgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgZWxlbWVudC50ZXh0KHZhbHVlKTsKICAgIH0pOwogIH07Cn1dOwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0JpbmRIdG1sCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBDcmVhdGVzIGEgYmluZGluZyB0aGF0IHdpbGwgaW5uZXJIVE1MIHRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgYGV4cHJlc3Npb25gIGludG8gdGhlIGN1cnJlbnQKICogZWxlbWVudCBpbiBhIHNlY3VyZSB3YXkuICBCeSBkZWZhdWx0LCB0aGUgaW5uZXJIVE1MLWVkIGNvbnRlbnQgd2lsbCBiZSBzYW5pdGl6ZWQgdXNpbmcgdGhlIHtAbGluawogKiBuZ1Nhbml0aXplLiRzYW5pdGl6ZSAkc2FuaXRpemV9IHNlcnZpY2UuICBUbyB1dGlsaXplIHRoaXMgZnVuY3Rpb25hbGl0eSwgZW5zdXJlIHRoYXQgYCRzYW5pdGl6ZWAKICogaXMgYXZhaWxhYmxlLCBmb3IgZXhhbXBsZSwgYnkgaW5jbHVkaW5nIHtAbGluayBuZ1Nhbml0aXplfSBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcyAobm90IGluCiAqIGNvcmUgQW5ndWxhci4pICBZb3UgbWF5IGFsc28gYnlwYXNzIHNhbml0aXphdGlvbiBmb3IgdmFsdWVzIHlvdSBrbm93IGFyZSBzYWZlLiBUbyBkbyBzbywgYmluZCB0bwogKiBhbiBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWUgdmlhIHtAbGluayBuZy4kc2NlI21ldGhvZHNfdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0uICBTZWUgdGhlIGV4YW1wbGUKICogdW5kZXIge0BsaW5rIG5nLiRzY2UjRXhhbXBsZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uCiAqCiAqIE5vdGU6IElmIGEgYCRzYW5pdGl6ZWAgc2VydmljZSBpcyB1bmF2YWlsYWJsZSBhbmQgdGhlIGJvdW5kIHZhbHVlIGlzbid0IGV4cGxpY2l0bHkgdHJ1c3RlZCwgeW91CiAqIHdpbGwgaGF2ZSBhbiBleGNlcHRpb24gKGluc3RlYWQgb2YgYW4gZXhwbG9pdC4pCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZEh0bWwge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuCiAqCiAqIEBleGFtcGxlCiAgIFRyeSBpdCBoZXJlOiBlbnRlciB0ZXh0IGluIHRleHQgYm94IGFuZCB3YXRjaCB0aGUgZ3JlZXRpbmcgY2hhbmdlLgogCiAgIDxleGFtcGxlIG1vZHVsZT0ibmdCaW5kSHRtbEV4YW1wbGUiIGRlcHM9ImFuZ3VsYXItc2FuaXRpemUuanMiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgPGRpdiBuZy1jb250cm9sbGVyPSJuZ0JpbmRIdG1sQ3RybCI+CiAgICAgICAgPHAgbmctYmluZC1odG1sPSJteUhUTUwiPjwvcD4KICAgICAgIDwvZGl2PgogICAgIDwvZmlsZT4KICAgICAKICAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nQmluZEh0bWxFeGFtcGxlJywgWyduZ1Nhbml0aXplJ10pCgogICAgICAgLmNvbnRyb2xsZXIoJ25nQmluZEh0bWxDdHJsJywgWyckc2NvcGUnLCBmdW5jdGlvbiBuZ0JpbmRIdG1sQ3RybCgkc2NvcGUpIHsKICAgICAgICAgJHNjb3BlLm15SFRNTCA9CiAgICAgICAgICAgICdJIGFtIGFuIDxjb2RlPkhUTUw8L2NvZGU+c3RyaW5nIHdpdGggPGEgaHJlZj0iIyI+bGlua3MhPC9hPiBhbmQgb3RoZXIgPGVtPnN0dWZmPC9lbT4nOwogICAgICAgfV0pOwogICAgIDwvZmlsZT4KCiAgICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kLWh0bWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmJpbmRpbmcoJ215SFRNTCcpKS4KICAgICAgICAgICB0b0JlKAogICAgICAgICAgICdJIGFtIGFuIDxjb2RlPkhUTUw8L2NvZGU+c3RyaW5nIHdpdGggPGEgaHJlZj0iIyI+bGlua3MhPC9hPiBhbmQgb3RoZXIgPGVtPnN0dWZmPC9lbT4nCiAgICAgICAgICAgKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KdmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCAnJHBhcnNlJywgZnVuY3Rpb24oJHNjZSwgJHBhcnNlKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICBlbGVtZW50LmFkZENsYXNzKCduZy1iaW5kaW5nJykuZGF0YSgnJGJpbmRpbmcnLCBhdHRyLm5nQmluZEh0bWwpOwoKICAgIHZhciBwYXJzZWQgPSAkcGFyc2UoYXR0ci5uZ0JpbmRIdG1sKTsKICAgIGZ1bmN0aW9uIGdldFN0cmluZ1ZhbHVlKCkgeyByZXR1cm4gKHBhcnNlZChzY29wZSkgfHwgJycpLnRvU3RyaW5nKCk7IH0KCiAgICBzY29wZS4kd2F0Y2goZ2V0U3RyaW5nVmFsdWUsIGZ1bmN0aW9uIG5nQmluZEh0bWxXYXRjaEFjdGlvbih2YWx1ZSkgewogICAgICBlbGVtZW50Lmh0bWwoJHNjZS5nZXRUcnVzdGVkSHRtbChwYXJzZWQoc2NvcGUpKSB8fCAnJyk7CiAgICB9KTsKICB9Owp9XTsKCmZ1bmN0aW9uIGNsYXNzRGlyZWN0aXZlKG5hbWUsIHNlbGVjdG9yKSB7CiAgbmFtZSA9ICduZ0NsYXNzJyArIG5hbWU7CiAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdBQycsCiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgdmFyIG9sZFZhbDsKCiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbmFtZV0sIG5nQ2xhc3NXYXRjaEFjdGlvbiwgdHJ1ZSk7CgogICAgICAgIGF0dHIuJG9ic2VydmUoJ2NsYXNzJywgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgIG5nQ2xhc3NXYXRjaEFjdGlvbihzY29wZS4kZXZhbChhdHRyW25hbWVdKSk7CiAgICAgICAgfSk7CgoKICAgICAgICBpZiAobmFtZSAhPT0gJ25nQ2xhc3MnKSB7CiAgICAgICAgICBzY29wZS4kd2F0Y2goJyRpbmRleCcsIGZ1bmN0aW9uKCRpbmRleCwgb2xkJGluZGV4KSB7CiAgICAgICAgICAgIC8vIGpzaGludCBiaXR3aXNlOiBmYWxzZQogICAgICAgICAgICB2YXIgbW9kID0gJGluZGV4ICYgMTsKICAgICAgICAgICAgaWYgKG1vZCAhPT0gb2xkJGluZGV4ICYgMSkgewogICAgICAgICAgICAgIHZhciBjbGFzc2VzID0gZmxhdHRlbkNsYXNzZXMoc2NvcGUuJGV2YWwoYXR0cltuYW1lXSkpOwogICAgICAgICAgICAgIG1vZCA9PT0gc2VsZWN0b3IgPwogICAgICAgICAgICAgICAgYXR0ci4kYWRkQ2xhc3MoY2xhc3NlcykgOgogICAgICAgICAgICAgICAgYXR0ci4kcmVtb3ZlQ2xhc3MoY2xhc3Nlcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCgogICAgICAgIGZ1bmN0aW9uIG5nQ2xhc3NXYXRjaEFjdGlvbihuZXdWYWwpIHsKICAgICAgICAgIGlmIChzZWxlY3RvciA9PT0gdHJ1ZSB8fCBzY29wZS4kaW5kZXggJSAyID09PSBzZWxlY3RvcikgewogICAgICAgICAgICB2YXIgbmV3Q2xhc3NlcyA9IGZsYXR0ZW5DbGFzc2VzKG5ld1ZhbCB8fCAnJyk7CiAgICAgICAgICAgIGlmKCFvbGRWYWwpIHsKICAgICAgICAgICAgICBhdHRyLiRhZGRDbGFzcyhuZXdDbGFzc2VzKTsKICAgICAgICAgICAgfSBlbHNlIGlmKCFlcXVhbHMobmV3VmFsLG9sZFZhbCkpIHsKICAgICAgICAgICAgICBhdHRyLiR1cGRhdGVDbGFzcyhuZXdDbGFzc2VzLCBmbGF0dGVuQ2xhc3NlcyhvbGRWYWwpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgb2xkVmFsID0gY29weShuZXdWYWwpOwogICAgICAgIH0KCgogICAgICAgIGZ1bmN0aW9uIGZsYXR0ZW5DbGFzc2VzKGNsYXNzVmFsKSB7CiAgICAgICAgICBpZihpc0FycmF5KGNsYXNzVmFsKSkgewogICAgICAgICAgICByZXR1cm4gY2xhc3NWYWwuam9pbignICcpOwogICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChjbGFzc1ZhbCkpIHsKICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSBbXSwgaSA9IDA7CiAgICAgICAgICAgIGZvckVhY2goY2xhc3NWYWwsIGZ1bmN0aW9uKHYsIGspIHsKICAgICAgICAgICAgICBpZiAodikgewogICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKGspOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY2xhc3NWYWw7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH07Cn0KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0NsYXNzYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBkeW5hbWljYWxseSBzZXQgQ1NTIGNsYXNzZXMgb24gYW4gSFRNTCBlbGVtZW50IGJ5IGRhdGFiaW5kaW5nCiAqIGFuIGV4cHJlc3Npb24gdGhhdCByZXByZXNlbnRzIGFsbCBjbGFzc2VzIHRvIGJlIGFkZGVkLgogKgogKiBUaGUgZGlyZWN0aXZlIHdvbid0IGFkZCBkdXBsaWNhdGUgY2xhc3NlcyBpZiBhIHBhcnRpY3VsYXIgY2xhc3Mgd2FzIGFscmVhZHkgc2V0LgogKgogKiBXaGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIHRoZSBwcmV2aW91c2x5IGFkZGVkIGNsYXNzZXMgYXJlIHJlbW92ZWQgYW5kIG9ubHkgdGhlbiB0aGUKICogbmV3IGNsYXNzZXMgYXJlIGFkZGVkLgogKgogKiBAYW5pbWF0aW9ucwogKiBhZGQgLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50CiAqIHJlbW92ZSAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudAogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHQKICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcwogKiAgIG5hbWVzLCBhbiBhcnJheSwgb3IgYSBtYXAgb2YgY2xhc3MgbmFtZXMgdG8gYm9vbGVhbiB2YWx1ZXMuIEluIHRoZSBjYXNlIG9mIGEgbWFwLCB0aGUKICogICBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyB3aG9zZSB2YWx1ZXMgYXJlIHRydXRoeSB3aWxsIGJlIGFkZGVkIGFzIGNzcyBjbGFzc2VzIHRvIHRoZQogKiAgIGVsZW1lbnQuCiAqCiAqIEBleGFtcGxlIEV4YW1wbGUgdGhhdCBkZW1vbnN0cmF0ZXMgYmFzaWMgYmluZGluZ3MgdmlhIG5nQ2xhc3MgZGlyZWN0aXZlLgogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgIDxwIG5nLWNsYXNzPSJ7c3RyaWtlOiBkZWxldGVkLCBib2xkOiBpbXBvcnRhbnQsIHJlZDogZXJyb3J9Ij5NYXAgU3ludGF4IEV4YW1wbGU8L3A+CiAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJkZWxldGVkIj4gZGVsZXRlZCAoYXBwbHkgInN0cmlrZSIgY2xhc3MpPGJyPgogICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iaW1wb3J0YW50Ij4gaW1wb3J0YW50IChhcHBseSAiYm9sZCIgY2xhc3MpPGJyPgogICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iZXJyb3IiPiBlcnJvciAoYXBwbHkgInJlZCIgY2xhc3MpCiAgICAgICA8aHI+CiAgICAgICA8cCBuZy1jbGFzcz0ic3R5bGUiPlVzaW5nIFN0cmluZyBTeW50YXg8L3A+CiAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InN0eWxlIiBwbGFjZWhvbGRlcj0iVHlwZTogYm9sZCBzdHJpa2UgcmVkIj4KICAgICAgIDxocj4KICAgICAgIDxwIG5nLWNsYXNzPSJbc3R5bGUxLCBzdHlsZTIsIHN0eWxlM10iPlVzaW5nIEFycmF5IFN5bnRheDwvcD4KICAgICAgIDxpbnB1dCBuZy1tb2RlbD0ic3R5bGUxIiBwbGFjZWhvbGRlcj0iVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCI+PGJyPgogICAgICAgPGlucHV0IG5nLW1vZGVsPSJzdHlsZTIiIHBsYWNlaG9sZGVyPSJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkIj48YnI+CiAgICAgICA8aW5wdXQgbmctbW9kZWw9InN0eWxlMyIgcGxhY2Vob2xkZXI9IlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWQiPjxicj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgIC5zdHJpa2UgewogICAgICAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDsKICAgICAgIH0KICAgICAgIC5ib2xkIHsKICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgIH0KICAgICAgIC5yZWQgewogICAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgIGl0KCdzaG91bGQgbGV0IHlvdSB0b2dnbGUgdGhlIGNsYXNzJywgZnVuY3Rpb24oKSB7CgogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgcDpmaXJzdCcpLnByb3AoJ2NsYXNzTmFtZScpKS5ub3QoKS50b01hdGNoKC9ib2xkLyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBwOmZpcnN0JykucHJvcCgnY2xhc3NOYW1lJykpLm5vdCgpLnRvTWF0Y2goL3JlZC8pOwoKICAgICAgICAgaW5wdXQoJ2ltcG9ydGFudCcpLmNoZWNrKCk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBwOmZpcnN0JykucHJvcCgnY2xhc3NOYW1lJykpLnRvTWF0Y2goL2JvbGQvKTsKCiAgICAgICAgIGlucHV0KCdlcnJvcicpLmNoZWNrKCk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBwOmZpcnN0JykucHJvcCgnY2xhc3NOYW1lJykpLnRvTWF0Y2goL3JlZC8pOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSBzdHJpbmcgZXhhbXBsZScsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgcDpudGgtb2YtdHlwZSgyKScpLnByb3AoJ2NsYXNzTmFtZScpKS50b0JlKCcnKTsKICAgICAgICAgaW5wdXQoJ3N0eWxlJykuZW50ZXIoJ3JlZCcpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgcDpudGgtb2YtdHlwZSgyKScpLnByb3AoJ2NsYXNzTmFtZScpKS50b0JlKCdyZWQnKTsKICAgICAgIH0pOwoKICAgICAgIGl0KCdhcnJheSBleGFtcGxlIHNob3VsZCBoYXZlIDMgY2xhc3NlcycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgcDpsYXN0JykucHJvcCgnY2xhc3NOYW1lJykpLnRvQmUoJycpOwogICAgICAgICBpbnB1dCgnc3R5bGUxJykuZW50ZXIoJ2JvbGQnKTsKICAgICAgICAgaW5wdXQoJ3N0eWxlMicpLmVudGVyKCdzdHJpa2UnKTsKICAgICAgICAgaW5wdXQoJ3N0eWxlMycpLmVudGVyKCdyZWQnKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHA6bGFzdCcpLnByb3AoJ2NsYXNzTmFtZScpKS50b0JlKCdib2xkIHN0cmlrZSByZWQnKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgoKICAgIyMgQW5pbWF0aW9ucwoKICAgVGhlIGV4YW1wbGUgYmVsb3cgZGVtb25zdHJhdGVzIGhvdyB0byBwZXJmb3JtIGFuaW1hdGlvbnMgdXNpbmcgbmdDbGFzcy4KCiAgIDxleGFtcGxlIGFuaW1hdGlvbnM9InRydWUiPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICA8aW5wdXQgdHlwZT0iYnV0dG9uIiB2YWx1ZT0ic2V0IiBuZy1jbGljaz0ibXlWYXI9J215LWNsYXNzJyI+CiAgICAgIDxpbnB1dCB0eXBlPSJidXR0b24iIHZhbHVlPSJjbGVhciIgbmctY2xpY2s9Im15VmFyPScnIj4KICAgICAgPGJyPgogICAgICA8c3BhbiBjbGFzcz0iYmFzZS1jbGFzcyIgbmctY2xhc3M9Im15VmFyIj5TYW1wbGUgVGV4dDwvc3Bhbj4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgIC5iYXNlLWNsYXNzIHsKICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7CiAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41czsKICAgICAgIH0KCiAgICAgICAuYmFzZS1jbGFzcy5teS1jbGFzcyB7CiAgICAgICAgIGNvbG9yOiByZWQ7CiAgICAgICAgIGZvbnQtc2l6ZTozZW07CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3MnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW4nKS5wcm9wKCdjbGFzc05hbWUnKSkubm90KCkuCiAgICAgICAgICAgdG9NYXRjaCgvbXktY2xhc3MvKTsKCiAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmVsZW1lbnQoJzpidXR0b246Zmlyc3QnKS5jbGljaygpOwoKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW4nKS5wcm9wKCdjbGFzc05hbWUnKSkuCiAgICAgICAgICAgdG9NYXRjaCgvbXktY2xhc3MvKTsKCiAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmVsZW1lbnQoJzpidXR0b246bGFzdCcpLmNsaWNrKCk7CgogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS5ub3QoKS4KICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CgoKICAgIyMgbmdDbGFzcyBhbmQgcHJlLWV4aXN0aW5nIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9ucwogICBUaGUgbmdDbGFzcyBkaXJlY3RpdmUgc3RpbGwgc3VwcG9ydHMgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zIGV2ZW4gaWYgdGhleSBkbyBub3QgZm9sbG93IHRoZSBuZ0FuaW1hdGUgQ1NTIG5hbWluZyBzdHJ1Y3R1cmUuCiAgIFVwb24gYW5pbWF0aW9uIG5nQW5pbWF0ZSB3aWxsIGFwcGx5IHN1cHBsZW1lbnRhcnkgQ1NTIGNsYXNzZXMgdG8gdHJhY2sgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgYW4gYW5pbWF0aW9uLCBidXQgdGhpcyB3aWxsIG5vdCBoaW5kZXIKICAgYW55IHByZS1leGlzdGluZyBDU1MgdHJhbnNpdGlvbnMgYWxyZWFkeSBvbiB0aGUgZWxlbWVudC4gVG8gZ2V0IGFuIGlkZWEgb2Ygd2hhdCBoYXBwZW5zIGR1cmluZyBhIGNsYXNzLWJhc2VkIGFuaW1hdGlvbiwgYmUgc3VyZQogICB0byB2aWV3IHRoZSBzdGVwIGJ5IHN0ZXAgZGV0YWlscyBvZiB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlI21ldGhvZHNfYWRkY2xhc3MgJGFuaW1hdGUuYWRkQ2xhc3N9IGFuZAogICB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlI21ldGhvZHNfcmVtb3ZlY2xhc3MgJGFuaW1hdGUucmVtb3ZlQ2xhc3N9LgogKi8KdmFyIG5nQ2xhc3NEaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnJywgdHJ1ZSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDbGFzc09kZAogKiBAcmVzdHJpY3QgQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdDbGFzc09kZGAgYW5kIGBuZ0NsYXNzRXZlbmAgZGlyZWN0aXZlcyB3b3JrIGV4YWN0bHkgYXMKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluCiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZSBlZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuCiAqCiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhbgogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc09kZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0CiAqICAgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3MgbmFtZXMgb3IgYW4gYXJyYXkuCiAqCiAqIEBleGFtcGxlCiAgIDxleGFtcGxlPgogICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICAgIDxvbCBuZy1pbml0PSJuYW1lcz1bJ0pvaG4nLCAnTWFyeScsICdDYXRlJywgJ1N1eiddIj4KICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9Im5hbWUgaW4gbmFtZXMiPgogICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD0iJ29kZCciIG5nLWNsYXNzLWV2ZW49IidldmVuJyI+CiAgICAgICAgICAgICB7e25hbWV9fQogICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9vbD4KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic3R5bGUuY3NzIj4KICAgICAgIC5vZGQgewogICAgICAgICBjb2xvcjogcmVkOwogICAgICAgfQogICAgICAgLmV2ZW4gewogICAgICAgICBjb2xvcjogYmx1ZTsKICAgICAgIH0KICAgICA8L2ZpbGU+CiAgICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGxpOmZpcnN0IHNwYW4nKS5wcm9wKCdjbGFzc05hbWUnKSkuCiAgICAgICAgICAgdG9NYXRjaCgvb2RkLyk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBsaTpsYXN0IHNwYW4nKS5wcm9wKCdjbGFzc05hbWUnKSkuCiAgICAgICAgICAgdG9NYXRjaCgvZXZlbi8pOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdDbGFzc09kZERpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdPZGQnLCAwKTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzRXZlbgogKiBAcmVzdHJpY3QgQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdDbGFzc09kZGAgYW5kIGBuZ0NsYXNzRXZlbmAgZGlyZWN0aXZlcyB3b3JrIGV4YWN0bHkgYXMKICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluCiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZSBlZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuCiAqCiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhbgogKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc0V2ZW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlCiAqICAgcmVzdWx0IG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzIG5hbWVzIG9yIGFuIGFycmF5LgogKgogKiBAZXhhbXBsZQogICA8ZXhhbXBsZT4KICAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgICA8b2wgbmctaW5pdD0ibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXSI+CiAgICAgICAgICA8bGkgbmctcmVwZWF0PSJuYW1lIGluIG5hbWVzIj4KICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9IidvZGQnIiBuZy1jbGFzcy1ldmVuPSInZXZlbiciPgogICAgICAgICAgICAge3tuYW1lfX0gJm5ic3A7ICZuYnNwOyAmbmJzcDsKICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICA8L2xpPgogICAgICAgIDwvb2w+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgICAgICAub2RkIHsKICAgICAgICAgY29sb3I6IHJlZDsKICAgICAgIH0KICAgICAgIC5ldmVuIHsKICAgICAgICAgY29sb3I6IGJsdWU7CiAgICAgICB9CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBsaTpmaXJzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLgogICAgICAgICAgIHRvTWF0Y2goL29kZC8pOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6bGFzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLgogICAgICAgICAgIHRvTWF0Y2goL2V2ZW4vKTsKICAgICAgIH0pOwogICAgIDwvZmlsZT4KICAgPC9leGFtcGxlPgogKi8KdmFyIG5nQ2xhc3NFdmVuRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ0V2ZW4nLCAxKTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0Nsb2FrCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0Nsb2FrYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBwcmV2ZW50IHRoZSBBbmd1bGFyIGh0bWwgdGVtcGxhdGUgZnJvbSBiZWluZyBicmllZmx5CiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3ICh1bmNvbXBpbGVkKSBmb3JtIHdoaWxlIHlvdXIgYXBwbGljYXRpb24gaXMgbG9hZGluZy4gVXNlIHRoaXMKICogZGlyZWN0aXZlIHRvIGF2b2lkIHRoZSB1bmRlc2lyYWJsZSBmbGlja2VyIGVmZmVjdCBjYXVzZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGUgZGlzcGxheS4KICoKICogVGhlIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYDxib2R5PmAgZWxlbWVudCwgYnV0IHRoZSBwcmVmZXJyZWQgdXNhZ2UgaXMgdG8gYXBwbHkKICogbXVsdGlwbGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZXMgdG8gc21hbGwgcG9ydGlvbnMgb2YgdGhlIHBhZ2UgdG8gcGVybWl0IHByb2dyZXNzaXZlIHJlbmRlcmluZwogKiBvZiB0aGUgYnJvd3NlciB2aWV3LgogKgogKiBgbmdDbG9ha2Agd29ya3MgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgZm9sbG93aW5nIGNzcyBydWxlIGVtYmVkZGVkIHdpdGhpbiBgYW5ndWxhci5qc2AgYW5kCiAqIGBhbmd1bGFyLm1pbi5qc2AuCiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLgogKgogKiA8cHJlPgogKiBbbmdcOmNsb2FrXSwgW25nLWNsb2FrXSwgW2RhdGEtbmctY2xvYWtdLCBbeC1uZy1jbG9ha10sIC5uZy1jbG9haywgLngtbmctY2xvYWsgewogKiAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsKICogfQogKiA8L3ByZT4KICoKICogV2hlbiB0aGlzIGNzcyBydWxlIGlzIGxvYWRlZCBieSB0aGUgYnJvd3NlciwgYWxsIGh0bWwgZWxlbWVudHMgKGluY2x1ZGluZyB0aGVpciBjaGlsZHJlbikgdGhhdAogKiBhcmUgdGFnZ2VkIHdpdGggdGhlIGBuZ0Nsb2FrYCBkaXJlY3RpdmUgYXJlIGhpZGRlbi4gV2hlbiBBbmd1bGFyIGVuY291bnRlcnMgdGhpcyBkaXJlY3RpdmUKICogZHVyaW5nIHRoZSBjb21waWxhdGlvbiBvZiB0aGUgdGVtcGxhdGUgaXQgZGVsZXRlcyB0aGUgYG5nQ2xvYWtgIGVsZW1lbnQgYXR0cmlidXRlLCBtYWtpbmcKICogdGhlIGNvbXBpbGVkIGVsZW1lbnQgdmlzaWJsZS4KICoKICogRm9yIHRoZSBiZXN0IHJlc3VsdCwgdGhlIGBhbmd1bGFyLmpzYCBzY3JpcHQgbXVzdCBiZSBsb2FkZWQgaW4gdGhlIGhlYWQgc2VjdGlvbiBvZiB0aGUgaHRtbAogKiBkb2N1bWVudDsgYWx0ZXJuYXRpdmVseSwgdGhlIGNzcyBydWxlIGFib3ZlIG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIGV4dGVybmFsIHN0eWxlc2hlZXQgb2YgdGhlCiAqIGFwcGxpY2F0aW9uLgogKgogKiBMZWdhY3kgYnJvd3NlcnMsIGxpa2UgSUU3LCBkbyBub3QgcHJvdmlkZSBhdHRyaWJ1dGUgc2VsZWN0b3Igc3VwcG9ydCAoYWRkZWQgaW4gQ1NTIDIuMSkgc28gdGhleQogKiBjYW5ub3QgbWF0Y2ggdGhlIGBbbmdcOmNsb2FrXWAgc2VsZWN0b3IuIFRvIHdvcmsgYXJvdW5kIHRoaXMgbGltaXRhdGlvbiwgeW91IG11c3QgYWRkIHRoZSBjc3MKICogY2xhc3MgYG5nLWNsb2FrYCBpbiBhZGRpdGlvbiB0byB0aGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBhcyBzaG93biBpbiB0aGUgZXhhbXBsZSBiZWxvdy4KICoKICogQGVsZW1lbnQgQU5ZCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICA8ZGl2IGlkPSJ0ZW1wbGF0ZTEiIG5nLWNsb2FrPnt7ICdoZWxsbycgfX08L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJ0ZW1wbGF0ZTIiIG5nLWNsb2FrIGNsYXNzPSJuZy1jbG9hayI+e3sgJ2hlbGxvIElFNycgfX08L2Rpdj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgcmVtb3ZlIHRoZSB0ZW1wbGF0ZSBkaXJlY3RpdmUgYW5kIGNzcyBjbGFzcycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI3RlbXBsYXRlMScpLmF0dHIoJ25nLWNsb2FrJykpLgogICAgICAgICAgIG5vdCgpLnRvQmVEZWZpbmVkKCk7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAjdGVtcGxhdGUyJykuYXR0cignbmctY2xvYWsnKSkuCiAgICAgICAgICAgbm90KCkudG9CZURlZmluZWQoKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKgogKi8KdmFyIG5nQ2xvYWtEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7CiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikgewogICAgYXR0ci4kc2V0KCduZ0Nsb2FrJywgdW5kZWZpbmVkKTsKICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ25nLWNsb2FrJyk7CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NvbnRyb2xsZXIKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgYXR0YWNoZXMgYSBjb250cm9sbGVyIGNsYXNzIHRvIHRoZSB2aWV3LiBUaGlzIGlzIGEga2V5IGFzcGVjdCBvZiBob3cgYW5ndWxhcgogKiBzdXBwb3J0cyB0aGUgcHJpbmNpcGxlcyBiZWhpbmQgdGhlIE1vZGVsLVZpZXctQ29udHJvbGxlciBkZXNpZ24gcGF0dGVybi4KICoKICogTVZDIGNvbXBvbmVudHMgaW4gYW5ndWxhcjoKICoKICogKiBNb2RlbCDigJQgVGhlIE1vZGVsIGlzIHNjb3BlIHByb3BlcnRpZXM7IHNjb3BlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIERPTSB3aGVyZSBzY29wZSBwcm9wZXJ0aWVzCiAqICAgYXJlIGFjY2Vzc2VkIHRocm91Z2ggYmluZGluZ3MuCiAqICogVmlldyDigJQgVGhlIHRlbXBsYXRlIChIVE1MIHdpdGggZGF0YSBiaW5kaW5ncykgdGhhdCBpcyByZW5kZXJlZCBpbnRvIHRoZSBWaWV3LgogKiAqIENvbnRyb2xsZXIg4oCUIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgc3BlY2lmaWVzIGEgQ29udHJvbGxlciBjbGFzczsgdGhlIGNsYXNzIGNvbnRhaW5zIGJ1c2luZXNzCiAqICAgbG9naWMgYmVoaW5kIHRoZSBhcHBsaWNhdGlvbiB0byBkZWNvcmF0ZSB0aGUgc2NvcGUgd2l0aCBmdW5jdGlvbnMgYW5kIHZhbHVlcwogKgogKiBOb3RlIHRoYXQgeW91IGNhbiBhbHNvIGF0dGFjaCBjb250cm9sbGVycyB0byB0aGUgRE9NIGJ5IGRlY2xhcmluZyBpdCBpbiBhIHJvdXRlIGRlZmluaXRpb24KICogdmlhIHRoZSB7QGxpbmsgbmdSb3V0ZS4kcm91dGUgJHJvdXRlfSBzZXJ2aWNlLiBBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIGRlY2xhcmUgdGhlIGNvbnRyb2xsZXIKICogYWdhaW4gdXNpbmcgYG5nLWNvbnRyb2xsZXJgIGluIHRoZSB0ZW1wbGF0ZSBpdHNlbGYuICBUaGlzIHdpbGwgY2F1c2UgdGhlIGNvbnRyb2xsZXIgdG8gYmUgYXR0YWNoZWQKICogYW5kIGV4ZWN1dGVkIHR3aWNlLgogKgogKiBAZWxlbWVudCBBTlkKICogQHNjb3BlCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb250cm9sbGVyIE5hbWUgb2YgYSBnbG9iYWxseSBhY2Nlc3NpYmxlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIG9yIGFuCiAqICAgICB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSB0aGF0IG9uIHRoZSBjdXJyZW50IHNjb3BlIGV2YWx1YXRlcyB0byBhCiAqICAgICBjb25zdHJ1Y3RvciBmdW5jdGlvbi4gVGhlIGNvbnRyb2xsZXIgaW5zdGFuY2UgY2FuIGJlIHB1Ymxpc2hlZCBpbnRvIGEgc2NvcGUgcHJvcGVydHkKICogICAgIGJ5IHNwZWNpZnlpbmcgYGFzIHByb3BlcnR5TmFtZWAuCiAqCiAqIEBleGFtcGxlCiAqIEhlcmUgaXMgYSBzaW1wbGUgZm9ybSBmb3IgZWRpdGluZyB1c2VyIGNvbnRhY3QgaW5mb3JtYXRpb24uIEFkZGluZywgcmVtb3ZpbmcsIGNsZWFyaW5nLCBhbmQKICogZ3JlZXRpbmcgYXJlIG1ldGhvZHMgZGVjbGFyZWQgb24gdGhlIGNvbnRyb2xsZXIgKHNlZSBzb3VyY2UgdGFiKS4gVGhlc2UgbWV0aG9kcyBjYW4KICogZWFzaWx5IGJlIGNhbGxlZCBmcm9tIHRoZSBhbmd1bGFyIG1hcmt1cC4gTm90aWNlIHRoYXQgdGhlIHNjb3BlIGJlY29tZXMgdGhlIGB0aGlzYCBmb3IgdGhlCiAqIGNvbnRyb2xsZXIncyBpbnN0YW5jZS4gVGhpcyBhbGxvd3MgZm9yIGVhc3kgYWNjZXNzIHRvIHRoZSB2aWV3IGRhdGEgZnJvbSB0aGUgY29udHJvbGxlci4gQWxzbwogKiBub3RpY2UgdGhhdCBhbnkgY2hhbmdlcyB0byB0aGUgZGF0YSBhcmUgYXV0b21hdGljYWxseSByZWZsZWN0ZWQgaW4gdGhlIFZpZXcgd2l0aG91dCB0aGUgbmVlZAogKiBmb3IgYSBtYW51YWwgdXBkYXRlLiBUaGUgZXhhbXBsZSBpcyBzaG93biBpbiB0d28gZGlmZmVyZW50IGRlY2xhcmF0aW9uIHN0eWxlcyB5b3UgbWF5IHVzZQogKiBhY2NvcmRpbmcgdG8gcHJlZmVyZW5jZS4KICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICA8c2NyaXB0PgogICAgICAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjEoKSB7CiAgICAgICAgICB0aGlzLm5hbWUgPSAiSm9obiBTbWl0aCI7CiAgICAgICAgICB0aGlzLmNvbnRhY3RzID0gWwogICAgICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSwKICAgICAgICAgICAge3R5cGU6ICdlbWFpbCcsIHZhbHVlOiAnam9obi5zbWl0aEBleGFtcGxlLm9yZyd9IF07CiAgICAgICAgICB9OwoKICAgICAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgYWxlcnQodGhpcy5uYW1lKTsKICAgICAgICB9OwoKICAgICAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICB0aGlzLmNvbnRhY3RzLnB1c2goe3R5cGU6ICdlbWFpbCcsIHZhbHVlOiAneW91cm5hbWVAZXhhbXBsZS5vcmcnfSk7CiAgICAgICAgfTsKCiAgICAgICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkgewogICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdFRvUmVtb3ZlKTsKICAgICAgICAgIHRoaXMuY29udGFjdHMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICB9OwoKICAgICAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7CiAgICAgICAgICBjb250YWN0LnR5cGUgPSAncGhvbmUnOwogICAgICAgICAgY29udGFjdC52YWx1ZSA9ICcnOwogICAgICAgIH07CiAgICAgIDwvc2NyaXB0PgogICAgICA8ZGl2IGlkPSJjdHJsLWFzLWV4bXBsIiBuZy1jb250cm9sbGVyPSJTZXR0aW5nc0NvbnRyb2xsZXIxIGFzIHNldHRpbmdzIj4KICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InNldHRpbmdzLm5hbWUiLz4KICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9InNldHRpbmdzLmdyZWV0KCkiPmdyZWV0PC9hPiBdPGJyLz4KICAgICAgICBDb250YWN0OgogICAgICAgIDx1bD4KICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9ImNvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMiPgogICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJjb250YWN0LnR5cGUiPgogICAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+CiAgICAgICAgICAgICAgIDxvcHRpb24+ZW1haWw8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0iY29udGFjdC52YWx1ZSIvPgogICAgICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9InNldHRpbmdzLmNsZWFyQ29udGFjdChjb250YWN0KSI+Y2xlYXI8L2E+CiAgICAgICAgICAgIHwgPGEgaHJlZj0iIiBuZy1jbGljaz0ic2V0dGluZ3MucmVtb3ZlQ29udGFjdChjb250YWN0KSI+WDwvYT4gXQogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaT5bIDxhIGhyZWY9IiIgbmctY2xpY2s9InNldHRpbmdzLmFkZENvbnRhY3QoKSI+YWRkPC9hPiBdPC9saT4KICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjY3RybC1hcy1leG1wbD46aW5wdXQnKS52YWwoKSkudG9CZSgnSm9obiBTbWl0aCcpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnI2N0cmwtYXMtZXhtcGwgbGk6bnRoLWNoaWxkKDEpIGlucHV0JykudmFsKCkpCiAgICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnI2N0cmwtYXMtZXhtcGwgbGk6bnRoLWNoaWxkKDIpIGlucHV0JykudmFsKCkpCiAgICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTsKCiAgICAgICAgIGVsZW1lbnQoJyNjdHJsLWFzLWV4bXBsIGxpOmZpcnN0IGE6Y29udGFpbnMoImNsZWFyIiknKS5jbGljaygpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnI2N0cmwtYXMtZXhtcGwgbGk6Zmlyc3QgaW5wdXQnKS52YWwoKSkudG9CZSgnJyk7CgogICAgICAgICBlbGVtZW50KCcjY3RybC1hcy1leG1wbCBsaTpsYXN0IGE6Y29udGFpbnMoImFkZCIpJykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNjdHJsLWFzLWV4bXBsIGxpOm50aC1jaGlsZCgzKSBpbnB1dCcpLnZhbCgpKQogICAgICAgICAgIC50b0JlKCd5b3VybmFtZUBleGFtcGxlLm9yZycpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxzY3JpcHQ+CiAgICAgICAgZnVuY3Rpb24gU2V0dGluZ3NDb250cm9sbGVyMigkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS5uYW1lID0gIkpvaG4gU21pdGgiOwogICAgICAgICAgJHNjb3BlLmNvbnRhY3RzID0gWwogICAgICAgICAgICB7dHlwZToncGhvbmUnLCB2YWx1ZTonNDA4IDU1NSAxMjEyJ30sCiAgICAgICAgICAgIHt0eXBlOidlbWFpbCcsIHZhbHVlOidqb2huLnNtaXRoQGV4YW1wbGUub3JnJ30gXTsKCiAgICAgICAgICAkc2NvcGUuZ3JlZXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICBhbGVydCh0aGlzLm5hbWUpOwogICAgICAgICAgfTsKCiAgICAgICAgICAkc2NvcGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgIHRoaXMuY29udGFjdHMucHVzaCh7dHlwZTonZW1haWwnLCB2YWx1ZToneW91cm5hbWVAZXhhbXBsZS5vcmcnfSk7CiAgICAgICAgICB9OwoKICAgICAgICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7CiAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5jb250YWN0cy5pbmRleE9mKGNvbnRhY3RUb1JlbW92ZSk7CiAgICAgICAgICAgdGhpcy5jb250YWN0cy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICAgICAgfTsKCiAgICAgICAgICAkc2NvcGUuY2xlYXJDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCkgewogICAgICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7CiAgICAgICAgICAgY29udGFjdC52YWx1ZSA9ICcnOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIDwvc2NyaXB0PgogICAgICA8ZGl2IGlkPSJjdHJsLWV4bXBsIiBuZy1jb250cm9sbGVyPSJTZXR0aW5nc0NvbnRyb2xsZXIyIj4KICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9Im5hbWUiLz4KICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9ImdyZWV0KCkiPmdyZWV0PC9hPiBdPGJyLz4KICAgICAgICBDb250YWN0OgogICAgICAgIDx1bD4KICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9ImNvbnRhY3QgaW4gY29udGFjdHMiPgogICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJjb250YWN0LnR5cGUiPgogICAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+CiAgICAgICAgICAgICAgIDxvcHRpb24+ZW1haWw8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0iY29udGFjdC52YWx1ZSIvPgogICAgICAgICAgICBbIDxhIGhyZWY9IiIgbmctY2xpY2s9ImNsZWFyQ29udGFjdChjb250YWN0KSI+Y2xlYXI8L2E+CiAgICAgICAgICAgIHwgPGEgaHJlZj0iIiBuZy1jbGljaz0icmVtb3ZlQ29udGFjdChjb250YWN0KSI+WDwvYT4gXQogICAgICAgICAgPC9saT4KICAgICAgICAgIDxsaT5bIDxhIGhyZWY9IiIgbmctY2xpY2s9ImFkZENvbnRhY3QoKSI+YWRkPC9hPiBdPC9saT4KICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjY3RybC1leG1wbD46aW5wdXQnKS52YWwoKSkudG9CZSgnSm9obiBTbWl0aCcpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnI2N0cmwtZXhtcGwgbGk6bnRoLWNoaWxkKDEpIGlucHV0JykudmFsKCkpCiAgICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnI2N0cmwtZXhtcGwgbGk6bnRoLWNoaWxkKDIpIGlucHV0JykudmFsKCkpCiAgICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTsKCiAgICAgICAgIGVsZW1lbnQoJyNjdHJsLWV4bXBsIGxpOmZpcnN0IGE6Y29udGFpbnMoImNsZWFyIiknKS5jbGljaygpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnI2N0cmwtZXhtcGwgbGk6Zmlyc3QgaW5wdXQnKS52YWwoKSkudG9CZSgnJyk7CgogICAgICAgICBlbGVtZW50KCcjY3RybC1leG1wbCBsaTpsYXN0IGE6Y29udGFpbnMoImFkZCIpJykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNjdHJsLWV4bXBsIGxpOm50aC1jaGlsZCgzKSBpbnB1dCcpLnZhbCgpKQogICAgICAgICAgIC50b0JlKCd5b3VybmFtZUBleGFtcGxlLm9yZycpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CgogKi8KdmFyIG5nQ29udHJvbGxlckRpcmVjdGl2ZSA9IFtmdW5jdGlvbigpIHsKICByZXR1cm4gewogICAgc2NvcGU6IHRydWUsCiAgICBjb250cm9sbGVyOiAnQCcsCiAgICBwcmlvcml0eTogNTAwCiAgfTsKfV07CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDc3AKICoKICogQGVsZW1lbnQgaHRtbAogKiBAZGVzY3JpcHRpb24KICogRW5hYmxlcyBbQ1NQIChDb250ZW50IFNlY3VyaXR5IFBvbGljeSldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NlY3VyaXR5L0NTUCkgc3VwcG9ydC4KICoKICogVGhpcyBpcyBuZWNlc3Nhcnkgd2hlbiBkZXZlbG9waW5nIHRoaW5ncyBsaWtlIEdvb2dsZSBDaHJvbWUgRXh0ZW5zaW9ucy4KICoKICogQ1NQIGZvcmJpZHMgYXBwcyB0byB1c2UgYGV2YWxgIG9yIGBGdW5jdGlvbihzdHJpbmcpYCBnZW5lcmF0ZWQgZnVuY3Rpb25zIChhbW9uZyBvdGhlciB0aGluZ3MpLgogKiBGb3IgdXMgdG8gYmUgY29tcGF0aWJsZSwgd2UganVzdCBuZWVkIHRvIGltcGxlbWVudCB0aGUgImdldHRlckZuIiBpbiAkcGFyc2Ugd2l0aG91dCB2aW9sYXRpbmcKICogYW55IG9mIHRoZXNlIHJlc3RyaWN0aW9ucy4KICoKICogQW5ndWxhckpTIHVzZXMgYEZ1bmN0aW9uKHN0cmluZylgIGdlbmVyYXRlZCBmdW5jdGlvbnMgYXMgYSBzcGVlZCBvcHRpbWl6YXRpb24uIEFwcGx5aW5nIHRoZSBgbmdDc3BgCiAqIGRpcmVjdGl2ZSB3aWxsIGNhdXNlIEFuZ3VsYXIgdG8gdXNlIENTUCBjb21wYXRpYmlsaXR5IG1vZGUuIFdoZW4gdGhpcyBtb2RlIGlzIG9uIEFuZ3VsYXJKUyB3aWxsCiAqIGV2YWx1YXRlIGFsbCBleHByZXNzaW9ucyB1cCB0byAzMCUgc2xvd2VyIHRoYW4gaW4gbm9uLUNTUCBtb2RlLCBidXQgbm8gc2VjdXJpdHkgdmlvbGF0aW9ucyB3aWxsCiAqIGJlIHJhaXNlZC4KICoKICogQ1NQIGZvcmJpZHMgSmF2YVNjcmlwdCB0byBpbmxpbmUgc3R5bGVzaGVldCBydWxlcy4gSW4gbm9uIENTUCBtb2RlIEFuZ3VsYXIgYXV0b21hdGljYWxseQogKiBpbmNsdWRlcyBzb21lIENTUyBydWxlcyAoZS5nLiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xvYWsgbmdDbG9ha30pLgogKiBUbyBtYWtlIHRob3NlIGRpcmVjdGl2ZXMgd29yayBpbiBDU1AgbW9kZSwgaW5jbHVkZSB0aGUgYGFuZ3VsYXItY3NwLmNzc2AgbWFudWFsbHkuCiAqCiAqIEluIG9yZGVyIHRvIHVzZSB0aGlzIGZlYXR1cmUgcHV0IHRoZSBgbmdDc3BgIGRpcmVjdGl2ZSBvbiB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBhcHBsaWNhdGlvbi4KICoKICogKk5vdGU6IFRoaXMgZGlyZWN0aXZlIGlzIG9ubHkgYXZhaWxhYmxlIGluIHRoZSBgbmctY3NwYCBhbmQgYGRhdGEtbmctY3NwYCBhdHRyaWJ1dGUgZm9ybS4qCiAqCiAqIEBleGFtcGxlCiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gYXBwbHkgdGhlIGBuZ0NzcGAgZGlyZWN0aXZlIHRvIHRoZSBgaHRtbGAgdGFnLgogICA8cHJlPgogICAgIDwhZG9jdHlwZSBodG1sPgogICAgIDxodG1sIG5nLWFwcCBuZy1jc3A+CiAgICAgLi4uCiAgICAgLi4uCiAgICAgPC9odG1sPgogICA8L3ByZT4KICovCgovLyBuZ0NzcCBpcyBub3QgaW1wbGVtZW50ZWQgYXMgYSBwcm9wZXIgZGlyZWN0aXZlIGFueSBtb3JlLCBiZWNhdXNlIHdlIG5lZWQgaXQgYmUgcHJvY2Vzc2VkIHdoaWxlIHdlIGJvb3RzdHJhcAovLyB0aGUgc3lzdGVtIChiZWZvcmUgJHBhcnNlIGlzIGluc3RhbnRpYXRlZCksIGZvciB0aGlzIHJlYXNvbiB3ZSBqdXN0IGhhdmUgYSBjc3AoKSBmbiB0aGF0IGxvb2tzIGZvciBuZy1jc3AgYXR0cmlidXRlCi8vIGFueXdoZXJlIGluIHRoZSBjdXJyZW50IGRvYwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ2xpY2sKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBuZ0NsaWNrIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIHdoZW4KICogYW4gZWxlbWVudCBpcyBjbGlja2VkLgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogY2xpY2suIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxidXR0b24gbmctY2xpY2s9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAgICBJbmNyZW1lbnQKICAgICAgPC9idXR0b24+CiAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpwcm90cmFjdG9yPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdjb3VudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJzAnKTsKICAgICAgICAgZWxlbWVudChieS5jc3MoJy5kb2MtZXhhbXBsZS1saXZlIGJ1dHRvbicpKS5jbGljaygpOwogICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdjb3VudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJzEnKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnByb3RyYWN0b3I+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwovKgogKiBBIGRpcmVjdGl2ZSB0aGF0IGFsbG93cyBjcmVhdGlvbiBvZiBjdXN0b20gb25jbGljayBoYW5kbGVycyB0aGF0IGFyZSBkZWZpbmVkIGFzIGFuZ3VsYXIKICogZXhwcmVzc2lvbnMgYW5kIGFyZSBjb21waWxlZCBhbmQgZXhlY3V0ZWQgd2l0aGluIHRoZSBjdXJyZW50IHNjb3BlLgogKgogKiBFdmVudHMgdGhhdCBhcmUgaGFuZGxlZCB2aWEgdGhlc2UgaGFuZGxlciBhcmUgYWx3YXlzIGNvbmZpZ3VyZWQgbm90IHRvIHByb3BhZ2F0ZSBmdXJ0aGVyLgogKi8KdmFyIG5nRXZlbnREaXJlY3RpdmVzID0ge307CmZvckVhY2goCiAgJ2NsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZW1vdmUgbW91c2VlbnRlciBtb3VzZWxlYXZlIGtleWRvd24ga2V5dXAga2V5cHJlc3Mgc3VibWl0IGZvY3VzIGJsdXIgY29weSBjdXQgcGFzdGUnLnNwbGl0KCcgJyksCiAgZnVuY3Rpb24obmFtZSkgewogICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBuYW1lKTsKICAgIG5nRXZlbnREaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBjb21waWxlOiBmdW5jdGlvbigkZWxlbWVudCwgYXR0cikgewogICAgICAgICAgdmFyIGZuID0gJHBhcnNlKGF0dHJbZGlyZWN0aXZlTmFtZV0pOwogICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICAgICAgICAgIGVsZW1lbnQub24obG93ZXJjYXNlKG5hbWUpLCBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGZuKHNjb3BlLCB7JGV2ZW50OmV2ZW50fSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH07CiAgICB9XTsKICB9Cik7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdEYmxjbGljawogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0RibGNsaWNrYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBhIGRibGNsaWNrIGV2ZW50LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0RibGNsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogYSBkYmxjbGljay4gKFRoZSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxidXR0b24gbmctZGJsY2xpY2s9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAgICBJbmNyZW1lbnQgKG9uIGRvdWJsZSBjbGljaykKICAgICAgPC9idXR0b24+CiAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2RvYzpzb3VyY2U+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vdXNlZG93bgogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIG5nTW91c2Vkb3duIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlZG93biBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBtb3VzZWRvd24uIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxidXR0b24gbmctbW91c2Vkb3duPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50IChvbiBtb3VzZSBkb3duKQogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZG9jOnNvdXJjZT4KICAgPC9kb2M6ZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW91c2V1cAogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2V1cCBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZXVwIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2V1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgPGJ1dHRvbiBuZy1tb3VzZXVwPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50IChvbiBtb3VzZSB1cCkKICAgICAgPC9idXR0b24+CiAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2RvYzpzb3VyY2U+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW91c2VvdmVyCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW92ZXIgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VvdmVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2VvdmVyLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCkKICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICA8YnV0dG9uIG5nLW1vdXNlb3Zlcj0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBpcyBvdmVyKQogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZG9jOnNvdXJjZT4KICAgPC9kb2M6ZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW91c2VlbnRlcgogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VlbnRlciBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWVudGVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogbW91c2VlbnRlci4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgPGJ1dHRvbiBuZy1tb3VzZWVudGVyPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIGVudGVycykKICAgICAgPC9idXR0b24+CiAgICAgIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2RvYzpzb3VyY2U+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vdXNlbGVhdmUKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbGVhdmUgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VsZWF2ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIG1vdXNlbGVhdmUuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxidXR0b24gbmctbW91c2VsZWF2ZT0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBsZWF2ZXMpCiAgICAgIDwvYnV0dG9uPgogICAgICBjb3VudDoge3tjb3VudH19CiAgICAgPC9kb2M6c291cmNlPgogICA8L2RvYzpleGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb3VzZW1vdmUKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZW1vdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBtb3VzZW1vdmUuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxidXR0b24gbmctbW91c2Vtb3ZlPSJjb3VudCA9IGNvdW50ICsgMSIgbmctaW5pdD0iY291bnQ9MCI+CiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIG1vdmVzKQogICAgICA8L2J1dHRvbj4KICAgICAgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZG9jOnNvdXJjZT4KICAgPC9kb2M6ZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nS2V5ZG93bgogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5ZG93biBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlkb3duIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICoga2V5ZG93bi4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLikKICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICA8aW5wdXQgbmcta2V5ZG93bj0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICBrZXkgZG93biBjb3VudDoge3tjb3VudH19CiAgICAgPC9kb2M6c291cmNlPgogICA8L2RvYzpleGFtcGxlPgogKi8KCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdLZXl1cAogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5dXAgZXZlbnQuCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5dXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBrZXl1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLikKICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICA8aW5wdXQgbmcta2V5dXA9ImNvdW50ID0gY291bnQgKyAxIiBuZy1pbml0PSJjb3VudD0wIj4KICAgICAga2V5IHVwIGNvdW50OiB7e2NvdW50fX0KICAgICA8L2RvYzpzb3VyY2U+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwoKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0tleXByZXNzCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlwcmVzcyBldmVudC4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlwcmVzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIGtleXByZXNzLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKQogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxpbnB1dCBuZy1rZXlwcmVzcz0iY291bnQgPSBjb3VudCArIDEiIG5nLWluaXQ9ImNvdW50PTAiPgogICAgICBrZXkgcHJlc3MgY291bnQ6IHt7Y291bnR9fQogICAgIDwvZG9jOnNvdXJjZT4KICAgPC9kb2M6ZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nU3VibWl0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBFbmFibGVzIGJpbmRpbmcgYW5ndWxhciBleHByZXNzaW9ucyB0byBvbnN1Ym1pdCBldmVudHMuCiAqCiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlCiAqIHNlcnZlciBhbmQgcmVsb2FkaW5nIHRoZSBjdXJyZW50IHBhZ2UpICoqYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBhbiBgYWN0aW9uYAogKiBhdHRyaWJ1dGUqKi4KICoKICogQGVsZW1lbnQgZm9ybQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxzY3JpcHQ+CiAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS5saXN0ID0gW107CiAgICAgICAgICAkc2NvcGUudGV4dCA9ICdoZWxsbyc7CiAgICAgICAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnRleHQpIHsKICAgICAgICAgICAgICB0aGlzLmxpc3QucHVzaCh0aGlzLnRleHQpOwogICAgICAgICAgICAgIHRoaXMudGV4dCA9ICcnOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgPC9zY3JpcHQ+CiAgICAgIDxmb3JtIG5nLXN1Ym1pdD0ic3VibWl0KCkiIG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgIEVudGVyIHRleHQgYW5kIGhpdCBlbnRlcjoKICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InRleHQiIG5hbWU9InRleHQiIC8+CiAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgaWQ9InN1Ym1pdCIgdmFsdWU9IlN1Ym1pdCIgLz4KICAgICAgICA8cHJlPmxpc3Q9e3tsaXN0fX08L3ByZT4KICAgICAgPC9mb3JtPgogICAgIDwvZG9jOnNvdXJjZT4KICAgICA8ZG9jOnNjZW5hcmlvPgogICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdWJtaXQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2xpc3QnKSkudG9CZSgnW10nKTsKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI3N1Ym1pdCcpLmNsaWNrKCk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdsaXN0JykpLnRvQmUoJ1siaGVsbG8iXScpOwogICAgICAgICBleHBlY3QoaW5wdXQoJ3RleHQnKS52YWwoKSkudG9CZSgnJyk7CiAgICAgICB9KTsKICAgICAgIGl0KCdzaG91bGQgaWdub3JlIGVtcHR5IHN0cmluZ3MnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2xpc3QnKSkudG9CZSgnW10nKTsKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI3N1Ym1pdCcpLmNsaWNrKCk7CiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNzdWJtaXQnKS5jbGljaygpOwogICAgICAgICBleHBlY3QoYmluZGluZygnbGlzdCcpKS50b0JlKCdbImhlbGxvIl0nKTsKICAgICAgIH0pOwogICAgIDwvZG9jOnNjZW5hcmlvPgogICA8L2RvYzpleGFtcGxlPgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0ZvY3VzCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBmb2N1cyBldmVudC4KICoKICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRm9jdXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBmb2N1cy4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdCbHVyCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBibHVyIGV2ZW50LgogKgogKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCbHVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogYmx1ci4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30KICovCgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDb3B5CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBjb3B5IGV2ZW50LgogKgogKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb3B5IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24KICogY29weS4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZT4KICAgICA8ZG9jOnNvdXJjZT4KICAgICAgPGlucHV0IG5nLWNvcHk9ImNvcGllZD10cnVlIiBuZy1pbml0PSJjb3BpZWQ9ZmFsc2U7IHZhbHVlPSdjb3B5IG1lJyIgbmctbW9kZWw9InZhbHVlIj4KICAgICAgY29waWVkOiB7e2NvcGllZH19CiAgICAgPC9kb2M6c291cmNlPgogICA8L2RvYzpleGFtcGxlPgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0N1dAogKgogKiBAZGVzY3JpcHRpb24KICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gY3V0IGV2ZW50LgogKgogKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDdXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbgogKiBjdXQuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKQogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgICAgIDxpbnB1dCBuZy1jdXQ9ImN1dD10cnVlIiBuZy1pbml0PSJjdXQ9ZmFsc2U7IHZhbHVlPSdjdXQgbWUnIiBuZy1tb2RlbD0idmFsdWUiPgogICAgICBjdXQ6IHt7Y3V0fX0KICAgICA8L2RvYzpzb3VyY2U+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nUGFzdGUKICoKICogQGRlc2NyaXB0aW9uCiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIHBhc3RlIGV2ZW50LgogKgogKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdQYXN0ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uCiAqIHBhc3RlLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCkKICoKICogQGV4YW1wbGUKICAgPGRvYzpleGFtcGxlPgogICAgIDxkb2M6c291cmNlPgogICAgICA8aW5wdXQgbmctcGFzdGU9InBhc3RlPXRydWUiIG5nLWluaXQ9InBhc3RlPWZhbHNlIiBwbGFjZWhvbGRlcj0ncGFzdGUgaGVyZSc+CiAgICAgIHBhc3RlZDoge3twYXN0ZX19CiAgICAgPC9kb2M6c291cmNlPgogICA8L2RvYzpleGFtcGxlPgogKi8KCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0lmCiAqIEByZXN0cmljdCBBCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nSWZgIGRpcmVjdGl2ZSByZW1vdmVzIG9yIHJlY3JlYXRlcyBhIHBvcnRpb24gb2YgdGhlIERPTSB0cmVlIGJhc2VkIG9uIGFuCiAqIHtleHByZXNzaW9ufS4gSWYgdGhlIGV4cHJlc3Npb24gYXNzaWduZWQgdG8gYG5nSWZgIGV2YWx1YXRlcyB0byBhIGZhbHNlCiAqIHZhbHVlIHRoZW4gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00sIG90aGVyd2lzZSBhIGNsb25lIG9mIHRoZQogKiBlbGVtZW50IGlzIHJlaW5zZXJ0ZWQgaW50byB0aGUgRE9NLgogKgogKiBgbmdJZmAgZGlmZmVycyBmcm9tIGBuZ1Nob3dgIGFuZCBgbmdIaWRlYCBpbiB0aGF0IGBuZ0lmYCBjb21wbGV0ZWx5IHJlbW92ZXMgYW5kIHJlY3JlYXRlcyB0aGUKICogZWxlbWVudCBpbiB0aGUgRE9NIHJhdGhlciB0aGFuIGNoYW5naW5nIGl0cyB2aXNpYmlsaXR5IHZpYSB0aGUgYGRpc3BsYXlgIGNzcyBwcm9wZXJ0eS4gIEEgY29tbW9uCiAqIGNhc2Ugd2hlbiB0aGlzIGRpZmZlcmVuY2UgaXMgc2lnbmlmaWNhbnQgaXMgd2hlbiB1c2luZyBjc3Mgc2VsZWN0b3JzIHRoYXQgcmVseSBvbiBhbiBlbGVtZW50J3MKICogcG9zaXRpb24gd2l0aGluIHRoZSBET00sIHN1Y2ggYXMgdGhlIGA6Zmlyc3QtY2hpbGRgIG9yIGA6bGFzdC1jaGlsZGAgcHNldWRvLWNsYXNzZXMuCiAqCiAqIE5vdGUgdGhhdCB3aGVuIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCB1c2luZyBgbmdJZmAgaXRzIHNjb3BlIGlzIGRlc3Ryb3llZCBhbmQgYSBuZXcgc2NvcGUKICogaXMgY3JlYXRlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlc3RvcmVkLiAgVGhlIHNjb3BlIGNyZWF0ZWQgd2l0aGluIGBuZ0lmYCBpbmhlcml0cyBmcm9tCiAqIGl0cyBwYXJlbnQgc2NvcGUgdXNpbmcKICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9UaGUtTnVhbmNlcy1vZi1TY29wZS1Qcm90b3R5cGFsLUluaGVyaXRhbmNlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2V9LgogKiBBbiBpbXBvcnRhbnQgaW1wbGljYXRpb24gb2YgdGhpcyBpcyBpZiBgbmdNb2RlbGAgaXMgdXNlZCB3aXRoaW4gYG5nSWZgIHRvIGJpbmQgdG8KICogYSBqYXZhc2NyaXB0IHByaW1pdGl2ZSBkZWZpbmVkIGluIHRoZSBwYXJlbnQgc2NvcGUuIEluIHRoaXMgY2FzZSBhbnkgbW9kaWZpY2F0aW9ucyBtYWRlIHRvIHRoZQogKiB2YXJpYWJsZSB3aXRoaW4gdGhlIGNoaWxkIHNjb3BlIHdpbGwgb3ZlcnJpZGUgKGhpZGUpIHRoZSB2YWx1ZSBpbiB0aGUgcGFyZW50IHNjb3BlLgogKgogKiBBbHNvLCBgbmdJZmAgcmVjcmVhdGVzIGVsZW1lbnRzIHVzaW5nIHRoZWlyIGNvbXBpbGVkIHN0YXRlLiBBbiBleGFtcGxlIG9mIHRoaXMgYmVoYXZpb3IKICogaXMgaWYgYW4gZWxlbWVudCdzIGNsYXNzIGF0dHJpYnV0ZSBpcyBkaXJlY3RseSBtb2RpZmllZCBhZnRlciBpdCdzIGNvbXBpbGVkLCB1c2luZyBzb21ldGhpbmcgbGlrZQogKiBqUXVlcnkncyBgLmFkZENsYXNzKClgIG1ldGhvZCwgYW5kIHRoZSBlbGVtZW50IGlzIGxhdGVyIHJlbW92ZWQuIFdoZW4gYG5nSWZgIHJlY3JlYXRlcyB0aGUgZWxlbWVudAogKiB0aGUgYWRkZWQgY2xhc3Mgd2lsbCBiZSBsb3N0IGJlY2F1c2UgdGhlIG9yaWdpbmFsIGNvbXBpbGVkIHN0YXRlIGlzIHVzZWQgdG8gcmVnZW5lcmF0ZSB0aGUgZWxlbWVudC4KICoKICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIHByb3ZpZGUgYW5pbWF0aW9ucyB2aWEgdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSB0byBhbmltYXRlIHRoZSBgZW50ZXJgCiAqIGFuZCBgbGVhdmVgIGVmZmVjdHMuCiAqCiAqIEBhbmltYXRpb25zCiAqIGVudGVyIC0gaGFwcGVucyBqdXN0IGFmdGVyIHRoZSBuZ0lmIGNvbnRlbnRzIGNoYW5nZSBhbmQgYSBuZXcgRE9NIGVsZW1lbnQgaXMgY3JlYXRlZCBhbmQgaW5qZWN0ZWQgaW50byB0aGUgbmdJZiBjb250YWluZXIKICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBuZ0lmIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIERPTQogKgogKiBAZWxlbWVudCBBTlkKICogQHNjb3BlCiAqIEBwcmlvcml0eSA2MDAKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0lmIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBmYWxzeSB0aGVuCiAqICAgICB0aGUgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSB0cmVlLiBJZiBpdCBpcyB0cnV0aHkgYSBjb3B5IG9mIHRoZSBjb21waWxlZAogKiAgICAgZWxlbWVudCBpcyBhZGRlZCB0byB0aGUgRE9NIHRyZWUuCiAqCiAqIEBleGFtcGxlCiAgPGV4YW1wbGUgYW5pbWF0aW9ucz0idHJ1ZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImNoZWNrZWQiIG5nLWluaXQ9ImNoZWNrZWQ9dHJ1ZSIgLz48YnIvPgogICAgICBTaG93IHdoZW4gY2hlY2tlZDoKICAgICAgPHNwYW4gbmctaWY9ImNoZWNrZWQiIGNsYXNzPSJhbmltYXRlLWlmIj4KICAgICAgICBJJ20gcmVtb3ZlZCB3aGVuIHRoZSBjaGVja2JveCBpcyB1bmNoZWNrZWQuCiAgICAgIDwvc3Bhbj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImFuaW1hdGlvbnMuY3NzIj4KICAgICAgLmFuaW1hdGUtaWYgewogICAgICAgIGJhY2tncm91bmQ6d2hpdGU7CiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLCAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSB7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7CiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzOwogICAgICB9CgogICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlciwKICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHsKICAgICAgICBvcGFjaXR5OjA7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLAogICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUgewogICAgICAgIG9wYWNpdHk6MTsKICAgICAgfQogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KICovCnZhciBuZ0lmRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7CiAgcmV0dXJuIHsKICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JywKICAgIHByaW9yaXR5OiA2MDAsCiAgICB0ZXJtaW5hbDogdHJ1ZSwKICAgIHJlc3RyaWN0OiAnQScsCiAgICAkJHRsYjogdHJ1ZSwKICAgIGxpbms6IGZ1bmN0aW9uICgkc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHsKICAgICAgICB2YXIgYmxvY2ssIGNoaWxkU2NvcGU7CiAgICAgICAgJHNjb3BlLiR3YXRjaCgkYXR0ci5uZ0lmLCBmdW5jdGlvbiBuZ0lmV2F0Y2hBY3Rpb24odmFsdWUpIHsKCiAgICAgICAgICBpZiAodG9Cb29sZWFuKHZhbHVlKSkgewogICAgICAgICAgICBpZiAoIWNoaWxkU2NvcGUpIHsKICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gJHNjb3BlLiRuZXcoKTsKICAgICAgICAgICAgICAkdHJhbnNjbHVkZShjaGlsZFNjb3BlLCBmdW5jdGlvbiAoY2xvbmUpIHsKICAgICAgICAgICAgICAgIGNsb25lW2Nsb25lLmxlbmd0aCsrXSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyBlbmQgbmdJZjogJyArICRhdHRyLm5nSWYgKyAnICcpOwogICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy4KICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyCiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXQncyB0ZW1wbGF0ZSBhcnJpdmVzLgogICAgICAgICAgICAgICAgYmxvY2sgPSB7CiAgICAgICAgICAgICAgICAgIGNsb25lOiBjbG9uZQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCAkZWxlbWVudC5wYXJlbnQoKSwgJGVsZW1lbnQpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgaWYgKGNoaWxkU2NvcGUpIHsKICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7CiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChibG9jaykgewogICAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGdldEJsb2NrRWxlbWVudHMoYmxvY2suY2xvbmUpKTsKICAgICAgICAgICAgICBibG9jayA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUKICogQHJlc3RyaWN0IEVDQQogKgogKiBAZGVzY3JpcHRpb24KICogRmV0Y2hlcywgY29tcGlsZXMgYW5kIGluY2x1ZGVzIGFuIGV4dGVybmFsIEhUTUwgZnJhZ21lbnQuCiAqCiAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBVUkwgaXMgcmVzdHJpY3RlZCB0byB0aGUgc2FtZSBkb21haW4gYW5kIHByb3RvY29sIGFzIHRoZQogKiBhcHBsaWNhdGlvbiBkb2N1bWVudC4gVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rIG5nLiRzY2UjbWV0aG9kc19nZXRUcnVzdGVkUmVzb3VyY2VVcmwKICogJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9IG9uIGl0LiBUbyBsb2FkIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgcHJvdG9jb2xzCiAqIHlvdSBtYXkgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNtZXRob2RzX3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdCB0aGVtfSBvcgogKiB7QGxpbmsgbmcuJHNjZSNtZXRob2RzX3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIHRoZW19IGFzIHRydXN0ZWQgdmFsdWVzLiBSZWZlciB0byBBbmd1bGFyJ3Mge0BsaW5rCiAqIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmd9LgogKgogKiBJbiBhZGRpdGlvbiwgdGhlIGJyb3dzZXIncwogKiB7QGxpbmsgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdAogKiBTYW1lIE9yaWdpbiBQb2xpY3l9IGFuZCB7QGxpbmsgaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8gQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcKICogKENPUlMpfSBwb2xpY3kgbWF5IGZ1cnRoZXIgcmVzdHJpY3Qgd2hldGhlciB0aGUgdGVtcGxhdGUgaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZC4KICogRm9yIGV4YW1wbGUsIGBuZ0luY2x1ZGVgIHdvbid0IHdvcmsgZm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cyBvbiBhbGwgYnJvd3NlcnMgYW5kIGZvciBgZmlsZTovL2AKICogYWNjZXNzIG9uIHNvbWUgYnJvd3NlcnMuCiAqCiAqIEBhbmltYXRpb25zCiAqIGVudGVyIC0gYW5pbWF0aW9uIGlzIHVzZWQgdG8gYnJpbmcgbmV3IGNvbnRlbnQgaW50byB0aGUgYnJvd3Nlci4KICogbGVhdmUgLSBhbmltYXRpb24gaXMgdXNlZCB0byBhbmltYXRlIGV4aXN0aW5nIGNvbnRlbnQgYXdheS4KICoKICogVGhlIGVudGVyIGFuZCBsZWF2ZSBhbmltYXRpb24gb2NjdXIgY29uY3VycmVudGx5LgogKgogKiBAc2NvcGUKICogQHByaW9yaXR5IDQwMAogKgogKiBAcGFyYW0ge3N0cmluZ30gbmdJbmNsdWRlfHNyYyBhbmd1bGFyIGV4cHJlc3Npb24gZXZhbHVhdGluZyB0byBVUkwuIElmIHRoZSBzb3VyY2UgaXMgYSBzdHJpbmcgY29uc3RhbnQsCiAqICAgICAgICAgICAgICAgICBtYWtlIHN1cmUgeW91IHdyYXAgaXQgaW4gcXVvdGVzLCBlLmcuIGBzcmM9IidteVBhcnRpYWxUZW1wbGF0ZS5odG1sJyJgLgogKiBAcGFyYW0ge3N0cmluZz19IG9ubG9hZCBFeHByZXNzaW9uIHRvIGV2YWx1YXRlIHdoZW4gYSBuZXcgcGFydGlhbCBpcyBsb2FkZWQuCiAqCiAqIEBwYXJhbSB7c3RyaW5nPX0gYXV0b3Njcm9sbCBXaGV0aGVyIGBuZ0luY2x1ZGVgIHNob3VsZCBjYWxsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsCiAqICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbH0gdG8gc2Nyb2xsIHRoZSB2aWV3cG9ydCBhZnRlciB0aGUgY29udGVudCBpcyBsb2FkZWQuCiAqCiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBzZXQsIGRpc2FibGUgc2Nyb2xsaW5nLgogKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgd2l0aG91dCB2YWx1ZSwgZW5hYmxlIHNjcm9sbGluZy4KICogICAgICAgICAgICAgICAgICAtIE90aGVyd2lzZSBlbmFibGUgc2Nyb2xsaW5nIG9ubHkgaWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydXRoeSB2YWx1ZS4KICoKICogQGV4YW1wbGUKICA8ZXhhbXBsZSBhbmltYXRpb25zPSJ0cnVlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJ0ZW1wbGF0ZSIgbmctb3B0aW9ucz0idC5uYW1lIGZvciB0IGluIHRlbXBsYXRlcyI+CiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj4oYmxhbmspPC9vcHRpb24+CiAgICAgICA8L3NlbGVjdD4KICAgICAgIHVybCBvZiB0aGUgdGVtcGxhdGU6IDx0dD57e3RlbXBsYXRlLnVybH19PC90dD4KICAgICAgIDxoci8+CiAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZS1hbmltYXRlLWNvbnRhaW5lciI+CiAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlLWFuaW1hdGUiIG5nLWluY2x1ZGU9InRlbXBsYXRlLnVybCI+PC9kaXY+CiAgICAgICA8L2Rpdj4KICAgICA8L2Rpdj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InNjcmlwdC5qcyI+CiAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7CiAgICAgICAgJHNjb3BlLnRlbXBsYXRlcyA9CiAgICAgICAgICBbIHsgbmFtZTogJ3RlbXBsYXRlMS5odG1sJywgdXJsOiAndGVtcGxhdGUxLmh0bWwnfQogICAgICAgICAgLCB7IG5hbWU6ICd0ZW1wbGF0ZTIuaHRtbCcsIHVybDogJ3RlbXBsYXRlMi5odG1sJ30gXTsKICAgICAgICAkc2NvcGUudGVtcGxhdGUgPSAkc2NvcGUudGVtcGxhdGVzWzBdOwogICAgICB9CiAgICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0idGVtcGxhdGUxLmh0bWwiPgogICAgICBDb250ZW50IG9mIHRlbXBsYXRlMS5odG1sCiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJ0ZW1wbGF0ZTIuaHRtbCI+CiAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUyLmh0bWwKICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImFuaW1hdGlvbnMuY3NzIj4KICAgICAgLnNsaWRlLWFuaW1hdGUtY29udGFpbmVyIHsKICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTsKICAgICAgICBiYWNrZ3JvdW5kOndoaXRlOwogICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7CiAgICAgICAgaGVpZ2h0OjQwcHg7CiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuOwogICAgICB9CgogICAgICAuc2xpZGUtYW5pbWF0ZSB7CiAgICAgICAgcGFkZGluZzoxMHB4OwogICAgICB9CgogICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciwgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUgewogICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzOwogICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41czsKCiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7CiAgICAgICAgdG9wOjA7CiAgICAgICAgbGVmdDowOwogICAgICAgIHJpZ2h0OjA7CiAgICAgICAgYm90dG9tOjA7CiAgICAgICAgZGlzcGxheTpibG9jazsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgIH0KCiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyIHsKICAgICAgICB0b3A6LTUwcHg7CiAgICAgIH0KICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHsKICAgICAgICB0b3A6MDsKICAgICAgfQoKICAgICAgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUgewogICAgICAgIHRvcDowOwogICAgICB9CiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7CiAgICAgICAgdG9wOjUwcHg7CiAgICAgIH0KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMS5odG1sJywgZnVuY3Rpb24oKSB7CiAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLWluY2x1ZGVdJykudGV4dCgpKS4KICAgICAgICAgdG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbC8pOwogICAgICB9KTsKICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMi5odG1sJywgZnVuY3Rpb24oKSB7CiAgICAgICBzZWxlY3QoJ3RlbXBsYXRlJykub3B0aW9uKCcxJyk7CiAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLWluY2x1ZGVdJykudGV4dCgpKS4KICAgICAgICAgdG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbC8pOwogICAgICB9KTsKICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHsKICAgICAgIHNlbGVjdCgndGVtcGxhdGUnKS5vcHRpb24oJycpOwogICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1pbmNsdWRlXScpKS50b0JlKHVuZGVmaW5lZCk7CiAgICAgIH0pOwogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KICovCgoKLyoqCiAqIEBuZ2RvYyBldmVudAogKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZAogKiBAZXZlbnRPZiBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlCiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpbgogKiBAZGVzY3JpcHRpb24KICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZXF1ZXN0ZWQuCiAqLwoKCi8qKgogKiBAbmdkb2MgZXZlbnQKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRMb2FkZWQKICogQGV2ZW50T2YgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZQogKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIGN1cnJlbnQgbmdJbmNsdWRlIHNjb3BlCiAqIEBkZXNjcmlwdGlvbgogKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlbG9hZGVkLgogKi8KdmFyIG5nSW5jbHVkZURpcmVjdGl2ZSA9IFsnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJGFuY2hvclNjcm9sbCcsICckYW5pbWF0ZScsICckc2NlJywKICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGh0dHAsICAgJHRlbXBsYXRlQ2FjaGUsICAgJGFuY2hvclNjcm9sbCwgICAkYW5pbWF0ZSwgICAkc2NlKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRUNBJywKICAgIHByaW9yaXR5OiA0MDAsCiAgICB0ZXJtaW5hbDogdHJ1ZSwKICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JywKICAgIGNvbnRyb2xsZXI6IGFuZ3VsYXIubm9vcCwKICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgdmFyIHNyY0V4cCA9IGF0dHIubmdJbmNsdWRlIHx8IGF0dHIuc3JjLAogICAgICAgICAgb25sb2FkRXhwID0gYXR0ci5vbmxvYWQgfHwgJycsCiAgICAgICAgICBhdXRvU2Nyb2xsRXhwID0gYXR0ci5hdXRvc2Nyb2xsOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7CiAgICAgICAgdmFyIGNoYW5nZUNvdW50ZXIgPSAwLAogICAgICAgICAgICBjdXJyZW50U2NvcGUsCiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50OwoKICAgICAgICB2YXIgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKGN1cnJlbnRTY29wZSkgewogICAgICAgICAgICBjdXJyZW50U2NvcGUuJGRlc3Ryb3koKTsKICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGN1cnJlbnRFbGVtZW50KSB7CiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGN1cnJlbnRFbGVtZW50KTsKICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNSZXNvdXJjZVVybChzcmNFeHApLCBmdW5jdGlvbiBuZ0luY2x1ZGVXYXRjaEFjdGlvbihzcmMpIHsKICAgICAgICAgIHZhciBhZnRlckFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHsKICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyOwoKICAgICAgICAgIGlmIChzcmMpIHsKICAgICAgICAgICAgJGh0dHAuZ2V0KHNyYywge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSByZXR1cm47CiAgICAgICAgICAgICAgdmFyIG5ld1Njb3BlID0gc2NvcGUuJG5ldygpOwogICAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSByZXNwb25zZTsKCiAgICAgICAgICAgICAgLy8gTm90ZTogVGhpcyB3aWxsIGFsc28gbGluayBhbGwgY2hpbGRyZW4gb2YgbmctaW5jbHVkZSB0aGF0IHdlcmUgY29udGFpbmVkIGluIHRoZSBvcmlnaW5hbAogICAgICAgICAgICAgIC8vIGh0bWwuIElmIHRoYXQgY29udGVudCBjb250YWlucyBjb250cm9sbGVycywgLi4uIHRoZXkgY291bGQgcG9sbHV0ZS9jaGFuZ2UgdGhlIHNjb3BlLgogICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHVzaW5nIG5nLWluY2x1ZGUgb24gYW4gZWxlbWVudCB3aXRoIGFkZGl0aW9uYWwgY29udGVudCBkb2VzIG5vdCBtYWtlIHNlbnNlLi4uCiAgICAgICAgICAgICAgLy8gTm90ZTogV2UgY2FuJ3QgcmVtb3ZlIHRoZW0gaW4gdGhlIGNsb25lQXR0Y2hGbiBvZiAkdHJhbnNjbHVkZSBhcyB0aGF0CiAgICAgICAgICAgICAgLy8gZnVuY3Rpb24gaXMgY2FsbGVkIGJlZm9yZSBsaW5raW5nIHRoZSBjb250ZW50LCB3aGljaCB3b3VsZCBhcHBseSBjaGlsZAogICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMgdG8gbm9uIGV4aXN0aW5nIGVsZW1lbnRzLgogICAgICAgICAgICAgIHZhciBjbG9uZSA9ICR0cmFuc2NsdWRlKG5ld1Njb3BlLCBmdW5jdGlvbihjbG9uZSkgewogICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpOwogICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsICRlbGVtZW50LCBhZnRlckFuaW1hdGlvbik7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlOwogICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY2xvbmU7CgogICAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50TG9hZGVkJyk7CiAgICAgICAgICAgICAgc2NvcGUuJGV2YWwob25sb2FkRXhwKTsKICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCA9PT0gY2hhbmdlQ291bnRlcikgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZCcpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpOwogICAgICAgICAgICBjdHJsLnRlbXBsYXRlID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KICB9Owp9XTsKCi8vIFRoaXMgZGlyZWN0aXZlIGlzIGNhbGxlZCBkdXJpbmcgdGhlICR0cmFuc2NsdWRlIGNhbGwgb2YgdGhlIGZpcnN0IGBuZ0luY2x1ZGVgIGRpcmVjdGl2ZS4KLy8gSXQgd2lsbCByZXBsYWNlIGFuZCBjb21waWxlIHRoZSBjb250ZW50IG9mIHRoZSBlbGVtZW50IHdpdGggdGhlIGxvYWRlZCB0ZW1wbGF0ZS4KLy8gV2UgbmVlZCB0aGlzIGRpcmVjdGl2ZSBzbyB0aGF0IHRoZSBlbGVtZW50IGNvbnRlbnQgaXMgYWxyZWFkeSBmaWxsZWQgd2hlbgovLyB0aGUgbGluayBmdW5jdGlvbiBvZiBhbm90aGVyIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIG5nSW5jbHVkZQovLyBpcyBjYWxsZWQuCnZhciBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLAogIGZ1bmN0aW9uKCRjb21waWxlKSB7CiAgICByZXR1cm4gewogICAgICByZXN0cmljdDogJ0VDQScsCiAgICAgIHByaW9yaXR5OiAtNDAwLAogICAgICByZXF1aXJlOiAnbmdJbmNsdWRlJywKICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCkgewogICAgICAgICRlbGVtZW50Lmh0bWwoY3RybC50ZW1wbGF0ZSk7CiAgICAgICAgJGNvbXBpbGUoJGVsZW1lbnQuY29udGVudHMoKSkoc2NvcGUpOwogICAgICB9CiAgICB9OwogIH1dOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nSW5pdAogKiBAcmVzdHJpY3QgQUMKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBldmFsdWF0ZSBhbiBleHByZXNzaW9uIGluIHRoZQogKiBjdXJyZW50IHNjb3BlLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1lcnJvciI+CiAqIFRoZSBvbmx5IGFwcHJvcHJpYXRlIHVzZSBvZiBgbmdJbml0YCBpcyBmb3IgYWxpYXNpbmcgc3BlY2lhbCBwcm9wZXJ0aWVzIG9mCiAqIHtAbGluayBhcGkvbmcuZGlyZWN0aXZlOm5nUmVwZWF0IGBuZ1JlcGVhdGB9LCBhcyBzZWVuIGluIHRoZSBkZW1vIGJlbG93LiBCZXNpZGVzIHRoaXMgY2FzZSwgeW91CiAqIHNob3VsZCB1c2Uge0BsaW5rIGd1aWRlL2NvbnRyb2xsZXIgY29udHJvbGxlcnN9IHJhdGhlciB0aGFuIGBuZ0luaXRgCiAqIHRvIGluaXRpYWxpemUgdmFsdWVzIG9uIGEgc2NvcGUuCiAqIDwvZGl2PgogKgogKiBAcHJpb3JpdHkgNDUwCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSW5pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLgogKgogKiBAZXhhbXBsZQogICA8ZG9jOmV4YW1wbGU+CiAgICAgPGRvYzpzb3VyY2U+CiAgIDxzY3JpcHQ+CiAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICRzY29wZS5saXN0ID0gW1snYScsICdiJ10sIFsnYycsICdkJ11dOwogICAgIH0KICAgPC9zY3JpcHQ+CiAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgPGRpdiBuZy1yZXBlYXQ9ImlubmVyTGlzdCBpbiBsaXN0IiBuZy1pbml0PSJvdXRlckluZGV4ID0gJGluZGV4Ij4KICAgICAgIDxkaXYgbmctcmVwZWF0PSJ2YWx1ZSBpbiBpbm5lckxpc3QiIG5nLWluaXQ9ImlubmVySW5kZXggPSAkaW5kZXgiPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImV4YW1wbGUtaW5pdCI+bGlzdFsge3tvdXRlckluZGV4fX0gXVsge3tpbm5lckluZGV4fX0gXSA9IHt7dmFsdWV9fTs8L3NwYW4+CiAgICAgICA8L2Rpdj4KICAgICA8L2Rpdj4KICAgPC9kaXY+CiAgICAgPC9kb2M6c291cmNlPgogICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICBpdCgnc2hvdWxkIGFsaWFzIGluZGV4IHBvc2l0aW9ucycsIGZ1bmN0aW9uKCkgewogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmV4YW1wbGUtaW5pdCcpLnRleHQoKSkKICAgICAgICAgICAudG9CZSgnbGlzdFsgMCBdWyAwIF0gPSBhOycgKwogICAgICAgICAgICAgICAgICdsaXN0WyAwIF1bIDEgXSA9IGI7JyArCiAgICAgICAgICAgICAgICAgJ2xpc3RbIDEgXVsgMCBdID0gYzsnICsKICAgICAgICAgICAgICAgICAnbGlzdFsgMSBdWyAxIF0gPSBkOycpOwogICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdJbml0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIHByaW9yaXR5OiA0NTAsCiAgY29tcGlsZTogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gewogICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykgewogICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7CiAgICAgIH0KICAgIH07CiAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ05vbkJpbmRhYmxlCiAqIEByZXN0cmljdCBBQwogKiBAcHJpb3JpdHkgMTAwMAogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ05vbkJpbmRhYmxlYCBkaXJlY3RpdmUgdGVsbHMgQW5ndWxhciBub3QgdG8gY29tcGlsZSBvciBiaW5kIHRoZSBjb250ZW50cyBvZiB0aGUgY3VycmVudAogKiBET00gZWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIGVsZW1lbnQgY29udGFpbnMgd2hhdCBhcHBlYXJzIHRvIGJlIEFuZ3VsYXIgZGlyZWN0aXZlcyBhbmQKICogYmluZGluZ3MgYnV0IHdoaWNoIHNob3VsZCBiZSBpZ25vcmVkIGJ5IEFuZ3VsYXIuIFRoaXMgY291bGQgYmUgdGhlIGNhc2UgaWYgeW91IGhhdmUgYSBzaXRlIHRoYXQKICogZGlzcGxheXMgc25pcHBldHMgb2YgY29kZSwgZm9yIGluc3RhbmNlLgogKgogKiBAZWxlbWVudCBBTlkKICoKICogQGV4YW1wbGUKICogSW4gdGhpcyBleGFtcGxlIHRoZXJlIGFyZSB0d28gbG9jYXRpb25zIHdoZXJlIGEgc2ltcGxlIGludGVycG9sYXRpb24gYmluZGluZyAoYHt7fX1gKSBpcyBwcmVzZW50LAogKiBidXQgdGhlIG9uZSB3cmFwcGVkIGluIGBuZ05vbkJpbmRhYmxlYCBpcyBsZWZ0IGFsb25lLgogKgogKiBAZXhhbXBsZQogICAgPGRvYzpleGFtcGxlPgogICAgICA8ZG9jOnNvdXJjZT4KICAgICAgICA8ZGl2Pk5vcm1hbDoge3sxICsgMn19PC9kaXY+CiAgICAgICAgPGRpdiBuZy1ub24tYmluZGFibGU+SWdub3JlZDoge3sxICsgMn19PC9kaXY+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctbm9uLWJpbmRhYmxlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCcxICsgMicpKS50b0JlKCczJyk7CiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5lbGVtZW50KCdkaXY6bGFzdCcpLnRleHQoKSkuCiAgICAgICAgICAgdG9NYXRjaCgvMSBcKyAyLyk7CiAgICAgICB9KTsKICAgICAgPC9kb2M6c2NlbmFyaW8+CiAgICA8L2RvYzpleGFtcGxlPgogKi8KdmFyIG5nTm9uQmluZGFibGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7IHRlcm1pbmFsOiB0cnVlLCBwcmlvcml0eTogMTAwMCB9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1BsdXJhbGl6ZQogKiBAcmVzdHJpY3QgRUEKICoKICogQGRlc2NyaXB0aW9uCiAqICMgT3ZlcnZpZXcKICogYG5nUGx1cmFsaXplYCBpcyBhIGRpcmVjdGl2ZSB0aGF0IGRpc3BsYXlzIG1lc3NhZ2VzIGFjY29yZGluZyB0byBlbi1VUyBsb2NhbGl6YXRpb24gcnVsZXMuCiAqIFRoZXNlIHJ1bGVzIGFyZSBidW5kbGVkIHdpdGggYW5ndWxhci5qcywgYnV0IGNhbiBiZSBvdmVycmlkZGVuCiAqIChzZWUge0BsaW5rIGd1aWRlL2kxOG4gQW5ndWxhciBpMThufSBkZXYgZ3VpZGUpLiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGRpcmVjdGl2ZQogKiBieSBzcGVjaWZ5aW5nIHRoZSBtYXBwaW5ncyBiZXR3ZWVuCiAqIHtAbGluayBodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwKICogcGx1cmFsIGNhdGVnb3JpZXN9IGFuZCB0aGUgc3RyaW5ncyB0byBiZSBkaXNwbGF5ZWQuCiAqCiAqICMgUGx1cmFsIGNhdGVnb3JpZXMgYW5kIGV4cGxpY2l0IG51bWJlciBydWxlcwogKiBUaGVyZSBhcmUgdHdvCiAqIHtAbGluayBodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwKICogcGx1cmFsIGNhdGVnb3JpZXN9IGluIEFuZ3VsYXIncyBkZWZhdWx0IGVuLVVTIGxvY2FsZTogIm9uZSIgYW5kICJvdGhlciIuCiAqCiAqIFdoaWxlIGEgcGx1cmFsIGNhdGVnb3J5IG1heSBtYXRjaCBtYW55IG51bWJlcnMgKGZvciBleGFtcGxlLCBpbiBlbi1VUyBsb2NhbGUsICJvdGhlciIgY2FuIG1hdGNoCiAqIGFueSBudW1iZXIgdGhhdCBpcyBub3QgMSksIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGNhbiBvbmx5IG1hdGNoIG9uZSBudW1iZXIuIEZvciBleGFtcGxlLCB0aGUKICogZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yICIzIiBtYXRjaGVzIHRoZSBudW1iZXIgMy4gVGhlcmUgYXJlIGV4YW1wbGVzIG9mIHBsdXJhbCBjYXRlZ29yaWVzCiAqIGFuZCBleHBsaWNpdCBudW1iZXIgcnVsZXMgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGlzIGRvY3VtZW50YXRpb24uCiAqCiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemUKICogWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBieSBwcm92aWRpbmcgMiBhdHRyaWJ1dGVzOiBgY291bnRgIGFuZCBgd2hlbmAuCiAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGF0dHJpYnV0ZSwgYG9mZnNldGAuCiAqCiAqIFRoZSB2YWx1ZSBvZiB0aGUgYGNvdW50YCBhdHRyaWJ1dGUgY2FuIGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbgogKiBBbmd1bGFyIGV4cHJlc3Npb259OyB0aGVzZSBhcmUgZXZhbHVhdGVkIG9uIHRoZSBjdXJyZW50IHNjb3BlIGZvciBpdHMgYm91bmQgdmFsdWUuCiAqCiAqIFRoZSBgd2hlbmAgYXR0cmlidXRlIHNwZWNpZmllcyB0aGUgbWFwcGluZ3MgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcmllcyBhbmQgdGhlIGFjdHVhbAogKiBzdHJpbmcgdG8gYmUgZGlzcGxheWVkLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdC4KICoKICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjb25maWd1cmUgbmdQbHVyYWxpemU6CiAqCiAqIDxwcmU+CiAqIDxuZy1wbHVyYWxpemUgY291bnQ9InBlcnNvbkNvdW50IgogICAgICAgICAgICAgICAgIHdoZW49InsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLAogKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJywKICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfSI+CiAqIDwvbmctcGx1cmFsaXplPgogKjwvcHJlPgogKgogKiBJbiB0aGUgZXhhbXBsZSwgYCIwOiBOb2JvZHkgaXMgdmlld2luZy4iYCBpcyBhbiBleHBsaWNpdCBudW1iZXIgcnVsZS4gSWYgeW91IGRpZCBub3QKICogc3BlY2lmeSB0aGlzIHJ1bGUsIDAgd291bGQgYmUgbWF0Y2hlZCB0byB0aGUgIm90aGVyIiBjYXRlZ29yeSBhbmQgIjAgcGVvcGxlIGFyZSB2aWV3aW5nIgogKiB3b3VsZCBiZSBzaG93biBpbnN0ZWFkIG9mICJOb2JvZHkgaXMgdmlld2luZyIuIFlvdSBjYW4gc3BlY2lmeSBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3IKICogb3RoZXIgbnVtYmVycywgZm9yIGV4YW1wbGUgMTIsIHNvIHRoYXQgaW5zdGVhZCBvZiBzaG93aW5nICIxMiBwZW9wbGUgYXJlIHZpZXdpbmciLCB5b3UgY2FuCiAqIHNob3cgImEgZG96ZW4gcGVvcGxlIGFyZSB2aWV3aW5nIi4KICoKICogWW91IGNhbiB1c2UgYSBzZXQgb2YgY2xvc2VkIGJyYWNlcyAoYHt9YCkgYXMgYSBwbGFjZWhvbGRlciBmb3IgdGhlIG51bWJlciB0aGF0IHlvdSB3YW50IHN1YnN0aXR1dGVkCiAqIGludG8gcGx1cmFsaXplZCBzdHJpbmdzLiBJbiB0aGUgcHJldmlvdXMgZXhhbXBsZSwgQW5ndWxhciB3aWxsIHJlcGxhY2UgYHt9YCB3aXRoCiAqIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT5ge3twZXJzb25Db3VudH19YDwvc3Bhbj4uIFRoZSBjbG9zZWQgYnJhY2VzIGB7fWAgaXMgYSBwbGFjZWhvbGRlcgogKiBmb3IgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7bnVtYmVyRXhwcmVzc2lvbn19PC9zcGFuPi4KICoKICogIyBDb25maWd1cmluZyBuZ1BsdXJhbGl6ZSB3aXRoIG9mZnNldAogKiBUaGUgYG9mZnNldGAgYXR0cmlidXRlIGFsbG93cyBmdXJ0aGVyIGN1c3RvbWl6YXRpb24gb2YgcGx1cmFsaXplZCB0ZXh0LCB3aGljaCBjYW4gcmVzdWx0IGluCiAqIGEgYmV0dGVyIHVzZXIgZXhwZXJpZW5jZS4gRm9yIGV4YW1wbGUsIGluc3RlYWQgb2YgdGhlIG1lc3NhZ2UgIjQgcGVvcGxlIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnQiLAogKiB5b3UgbWlnaHQgZGlzcGxheSAiSm9obiwgS2F0ZSBhbmQgMiBvdGhlcnMgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudCIuCiAqIFRoZSBvZmZzZXQgYXR0cmlidXRlIGFsbG93cyB5b3UgdG8gb2Zmc2V0IGEgbnVtYmVyIGJ5IGFueSBkZXNpcmVkIHZhbHVlLgogKiBMZXQncyB0YWtlIGEgbG9vayBhdCBhbiBleGFtcGxlOgogKgogKiA8cHJlPgogKiA8bmctcGx1cmFsaXplIGNvdW50PSJwZXJzb25Db3VudCIgb2Zmc2V0PTIKICogICAgICAgICAgICAgICB3aGVuPSJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJywKICogICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLAogKiAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJywKICogICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJywKICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9Ij4KICogPC9uZy1wbHVyYWxpemU+CiAqIDwvcHJlPgogKgogKiBOb3RpY2UgdGhhdCB3ZSBhcmUgc3RpbGwgdXNpbmcgdHdvIHBsdXJhbCBjYXRlZ29yaWVzKG9uZSwgb3RoZXIpLCBidXQgd2UgYWRkZWQKICogdGhyZWUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIDAsIDEgYW5kIDIuCiAqIFdoZW4gb25lIHBlcnNvbiwgcGVyaGFwcyBKb2huLCB2aWV3cyB0aGUgZG9jdW1lbnQsICJKb2huIGlzIHZpZXdpbmciIHdpbGwgYmUgc2hvd24uCiAqIFdoZW4gdGhyZWUgcGVvcGxlIHZpZXcgdGhlIGRvY3VtZW50LCBubyBleHBsaWNpdCBudW1iZXIgcnVsZSBpcyBmb3VuZCwgc28KICogYW4gb2Zmc2V0IG9mIDIgaXMgdGFrZW4gb2ZmIDMsIGFuZCBBbmd1bGFyIHVzZXMgMSB0byBkZWNpZGUgdGhlIHBsdXJhbCBjYXRlZ29yeS4KICogSW4gdGhpcyBjYXNlLCBwbHVyYWwgY2F0ZWdvcnkgJ29uZScgaXMgbWF0Y2hlZCBhbmQgIkpvaG4sIE1hcnJ5IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nIgogKiBpcyBzaG93bi4KICoKICogTm90ZSB0aGF0IHdoZW4geW91IHNwZWNpZnkgb2Zmc2V0cywgeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yCiAqIG51bWJlcnMgZnJvbSAwIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIG9mZnNldC4gSWYgeW91IHVzZSBhbiBvZmZzZXQgb2YgMywgZm9yIGV4YW1wbGUsCiAqIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvciAwLCAxLCAyIGFuZCAzLiBZb3UgbXVzdCBhbHNvIHByb3ZpZGUgcGx1cmFsIHN0cmluZ3MgZm9yCiAqIHBsdXJhbCBjYXRlZ29yaWVzICJvbmUiIGFuZCAib3RoZXIiLgogKgogKiBAcGFyYW0ge3N0cmluZ3xleHByZXNzaW9ufSBjb3VudCBUaGUgdmFyaWFibGUgdG8gYmUgYm91bmRlZCB0by4KICogQHBhcmFtIHtzdHJpbmd9IHdoZW4gVGhlIG1hcHBpbmcgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcnkgdG8gaXRzIGNvcnJlc3BvbmRpbmcgc3RyaW5ncy4KICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGRlZHVjdCBmcm9tIHRoZSB0b3RhbCBudW1iZXIuCiAqCiAqIEBleGFtcGxlCiAgICA8ZG9jOmV4YW1wbGU+CiAgICAgIDxkb2M6c291cmNlPgogICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICAgICAkc2NvcGUucGVyc29uMSA9ICdJZ29yJzsKICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjIgPSAnTWlza28nOwogICAgICAgICAgICAkc2NvcGUucGVyc29uQ291bnQgPSAxOwogICAgICAgICAgfQogICAgICAgIDwvc2NyaXB0PgogICAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgICBQZXJzb24gMTo8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InBlcnNvbjEiIHZhbHVlPSJJZ29yIiAvPjxici8+CiAgICAgICAgICBQZXJzb24gMjo8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InBlcnNvbjIiIHZhbHVlPSJNaXNrbyIgLz48YnIvPgogICAgICAgICAgTnVtYmVyIG9mIFBlb3BsZTo8aW5wdXQgdHlwZT0idGV4dCIgbmctbW9kZWw9InBlcnNvbkNvdW50IiB2YWx1ZT0iMSIgLz48YnIvPgoKICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBzaW1wbGUgcGx1cmFsaXphdGlvbiBydWxlcyBmb3IgZW4gbG9jYWxlIC0tLT4KICAgICAgICAgIFdpdGhvdXQgT2Zmc2V0OgogICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49InsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICcxIHBlcnNvbiBpcyB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9Ij4KICAgICAgICAgIDwvbmctcGx1cmFsaXplPjxicj4KCiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggb2Zmc2V0IC0tLT4KICAgICAgICAgIFdpdGggT2Zmc2V0KDIpOgogICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD0icGVyc29uQ291bnQiIG9mZnNldD0yCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49InsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9Ij4KICAgICAgICAgIDwvbmctcGx1cmFsaXplPgogICAgICAgIDwvZGl2PgogICAgICA8L2RvYzpzb3VyY2U+CiAgICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGNvcnJlY3QgcGx1cmFsaXplZCBzdHJpbmcnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6Zmlyc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCcxIHBlcnNvbiBpcyB2aWV3aW5nLicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnSWdvciBpcyB2aWV3aW5nLicpOwoKICAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCdwZXJzb25Db3VudCcpLmVudGVyKCcwJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmZpcnN0JykudGV4dCgpKS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdOb2JvZHkgaXMgdmlld2luZy4nKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6bGFzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdOb2JvZHkgaXMgdmlld2luZy4nKTsKCiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uQ291bnQnKS5lbnRlcignMicpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpmaXJzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnMiBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdJZ29yIGFuZCBNaXNrbyBhcmUgdmlld2luZy4nKTsKCiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uQ291bnQnKS5lbnRlcignMycpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpmaXJzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnMyBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdJZ29yLCBNaXNrbyBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nKTsKCiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uQ291bnQnKS5lbnRlcignNCcpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpmaXJzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnNCBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0JlKCdJZ29yLCBNaXNrbyBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7CiAgICAgICAgfSk7CgogICAgICAgIGl0KCdzaG91bGQgc2hvdyBkYXRhLWJpbmRlZCBuYW1lcycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbkNvdW50JykuZW50ZXIoJzQnKTsKICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6bGFzdCcpLnRleHQoKSkuCiAgICAgICAgICAgICAgdG9CZSgnSWdvciwgTWlza28gYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwoKICAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCdwZXJzb24xJykuZW50ZXIoJ0RpJyk7CiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uMicpLmVudGVyKCdWb2p0YScpOwogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS4KICAgICAgICAgICAgICB0b0JlKCdEaSwgVm9qdGEgYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpOwogICAgICAgIH0pOwogICAgICA8L2RvYzpzY2VuYXJpbz4KICAgIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgbmdQbHVyYWxpemVEaXJlY3RpdmUgPSBbJyRsb2NhbGUnLCAnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGxvY2FsZSwgJGludGVycG9sYXRlKSB7CiAgdmFyIEJSQUNFID0gL3t9L2c7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRUEnLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgdmFyIG51bWJlckV4cCA9IGF0dHIuY291bnQsCiAgICAgICAgICB3aGVuRXhwID0gYXR0ci4kYXR0ci53aGVuICYmIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLndoZW4pLCAvLyB3ZSBoYXZlIHt7fX0gaW4gYXR0cnMKICAgICAgICAgIG9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDAsCiAgICAgICAgICB3aGVucyA9IHNjb3BlLiRldmFsKHdoZW5FeHApIHx8IHt9LAogICAgICAgICAgd2hlbnNFeHBGbnMgPSB7fSwKICAgICAgICAgIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksCiAgICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksCiAgICAgICAgICBpc1doZW4gPSAvXndoZW4oTWludXMpPyguKykkLzsKCiAgICAgIGZvckVhY2goYXR0ciwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgYXR0cmlidXRlTmFtZSkgewogICAgICAgIGlmIChpc1doZW4udGVzdChhdHRyaWJ1dGVOYW1lKSkgewogICAgICAgICAgd2hlbnNbbG93ZXJjYXNlKGF0dHJpYnV0ZU5hbWUucmVwbGFjZSgnd2hlbicsICcnKS5yZXBsYWNlKCdNaW51cycsICctJykpXSA9CiAgICAgICAgICAgIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyW2F0dHJpYnV0ZU5hbWVdKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbihleHByZXNzaW9uLCBrZXkpIHsKICAgICAgICB3aGVuc0V4cEZuc1trZXldID0KICAgICAgICAgICRpbnRlcnBvbGF0ZShleHByZXNzaW9uLnJlcGxhY2UoQlJBQ0UsIHN0YXJ0U3ltYm9sICsgbnVtYmVyRXhwICsgJy0nICsKICAgICAgICAgICAgb2Zmc2V0ICsgZW5kU3ltYm9sKSk7CiAgICAgIH0pOwoKICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2goKSB7CiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VGbG9hdChzY29wZS4kZXZhbChudW1iZXJFeHApKTsKCiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHsKICAgICAgICAgIC8vaWYgZXhwbGljaXQgbnVtYmVyIHJ1bGUgc3VjaCBhcyAxLCAyLCAzLi4uIGlzIGRlZmluZWQsIGp1c3QgdXNlIGl0LiBPdGhlcndpc2UsCiAgICAgICAgICAvL2NoZWNrIGl0IGFnYWluc3QgcGx1cmFsaXphdGlvbiBydWxlcyBpbiAkbG9jYWxlIHNlcnZpY2UKICAgICAgICAgIGlmICghKHZhbHVlIGluIHdoZW5zKSkgdmFsdWUgPSAkbG9jYWxlLnBsdXJhbENhdCh2YWx1ZSAtIG9mZnNldCk7CiAgICAgICAgICAgcmV0dXJuIHdoZW5zRXhwRm5zW3ZhbHVlXShzY29wZSwgZWxlbWVudCwgdHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2hBY3Rpb24obmV3VmFsKSB7CiAgICAgICAgZWxlbWVudC50ZXh0KG5ld1ZhbCk7CiAgICAgIH0pOwogICAgfQogIH07Cn1dOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nUmVwZWF0CiAqCiAqIEBkZXNjcmlwdGlvbgogKiBUaGUgYG5nUmVwZWF0YCBkaXJlY3RpdmUgaW5zdGFudGlhdGVzIGEgdGVtcGxhdGUgb25jZSBwZXIgaXRlbSBmcm9tIGEgY29sbGVjdGlvbi4gRWFjaCB0ZW1wbGF0ZQogKiBpbnN0YW5jZSBnZXRzIGl0cyBvd24gc2NvcGUsIHdoZXJlIHRoZSBnaXZlbiBsb29wIHZhcmlhYmxlIGlzIHNldCB0byB0aGUgY3VycmVudCBjb2xsZWN0aW9uIGl0ZW0sCiAqIGFuZCBgJGluZGV4YCBpcyBzZXQgdG8gdGhlIGl0ZW0gaW5kZXggb3Iga2V5LgogKgogKiBTcGVjaWFsIHByb3BlcnRpZXMgYXJlIGV4cG9zZWQgb24gdGhlIGxvY2FsIHNjb3BlIG9mIGVhY2ggdGVtcGxhdGUgaW5zdGFuY2UsIGluY2x1ZGluZzoKICoKICogfCBWYXJpYWJsZSAgfCBUeXBlICAgICAgICAgICAgfCBEZXRhaWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogKiB8LS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18CiAqIHwgYCRpbmRleGAgIHwge0B0eXBlIG51bWJlcn0gIHwgaXRlcmF0b3Igb2Zmc2V0IG9mIHRoZSByZXBlYXRlZCBlbGVtZW50ICgwLi5sZW5ndGgtMSkgICAgICAgICAgICAgICAgICAgICAgIHwKICogfCBgJGZpcnN0YCAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGZpcnN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgfAogKiB8IGAkbWlkZGxlYCB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLiB8CiAqIHwgYCRsYXN0YCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBsYXN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgIHwKICogfCBgJGV2ZW5gICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSBpdGVyYXRvciBwb3NpdGlvbiBgJGluZGV4YCBpcyBldmVuIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgfAogKiB8IGAkb2RkYCAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIGl0ZXJhdG9yIHBvc2l0aW9uIGAkaW5kZXhgIGlzIG9kZCAob3RoZXJ3aXNlIGZhbHNlKS4gICAgICAgICAgICB8CiAqCiAqIENyZWF0aW5nIGFsaWFzZXMgZm9yIHRoZXNlIHByb3BlcnRpZXMgaXMgcG9zc2libGUgd2l0aCB7QGxpbmsgYXBpL25nLmRpcmVjdGl2ZTpuZ0luaXQgYG5nSW5pdGB9LgogKiBUaGlzIG1heSBiZSB1c2VmdWwgd2hlbiwgZm9yIGluc3RhbmNlLCBuZXN0aW5nIG5nUmVwZWF0cy4KICoKICogIyBTcGVjaWFsIHJlcGVhdCBzdGFydCBhbmQgZW5kIHBvaW50cwogKiBUbyByZXBlYXQgYSBzZXJpZXMgb2YgZWxlbWVudHMgaW5zdGVhZCBvZiBqdXN0IG9uZSBwYXJlbnQgZWxlbWVudCwgbmdSZXBlYXQgKGFzIHdlbGwgYXMgb3RoZXIgbmcgZGlyZWN0aXZlcykgc3VwcG9ydHMgZXh0ZW5kaW5nCiAqIHRoZSByYW5nZSBvZiB0aGUgcmVwZWF0ZXIgYnkgZGVmaW5pbmcgZXhwbGljaXQgc3RhcnQgYW5kIGVuZCBwb2ludHMgYnkgdXNpbmcgKipuZy1yZXBlYXQtc3RhcnQqKiBhbmQgKipuZy1yZXBlYXQtZW5kKiogcmVzcGVjdGl2ZWx5LgogKiBUaGUgKipuZy1yZXBlYXQtc3RhcnQqKiBkaXJlY3RpdmUgd29ya3MgdGhlIHNhbWUgYXMgKipuZy1yZXBlYXQqKiwgYnV0IHdpbGwgcmVwZWF0IGFsbCB0aGUgSFRNTCBjb2RlIChpbmNsdWRpbmcgdGhlIHRhZyBpdCdzIGRlZmluZWQgb24pCiAqIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIGVuZGluZyBIVE1MIHRhZyB3aGVyZSAqKm5nLXJlcGVhdC1lbmQqKiBpcyBwbGFjZWQuCiAqCiAqIFRoZSBleGFtcGxlIGJlbG93IG1ha2VzIHVzZSBvZiB0aGlzIGZlYXR1cmU6CiAqIDxwcmU+CiAqICAgPGhlYWRlciBuZy1yZXBlYXQtc3RhcnQ9Iml0ZW0gaW4gaXRlbXMiPgogKiAgICAgSGVhZGVyIHt7IGl0ZW0gfX0KICogICA8L2hlYWRlcj4KICogICA8ZGl2IGNsYXNzPSJib2R5Ij4KICogICAgIEJvZHkge3sgaXRlbSB9fQogKiAgIDwvZGl2PgogKiAgIDxmb290ZXIgbmctcmVwZWF0LWVuZD4KICogICAgIEZvb3RlciB7eyBpdGVtIH19CiAqICAgPC9mb290ZXI+CiAqIDwvcHJlPgogKgogKiBBbmQgd2l0aCBhbiBpbnB1dCBvZiB7QHR5cGUgWydBJywnQiddfSBmb3IgdGhlIGl0ZW1zIHZhcmlhYmxlIGluIHRoZSBleGFtcGxlIGFib3ZlLCB0aGUgb3V0cHV0IHdpbGwgZXZhbHVhdGUgdG86CiAqIDxwcmU+CiAqICAgPGhlYWRlcj4KICogICAgIEhlYWRlciBBCiAqICAgPC9oZWFkZXI+CiAqICAgPGRpdiBjbGFzcz0iYm9keSI+CiAqICAgICBCb2R5IEEKICogICA8L2Rpdj4KICogICA8Zm9vdGVyPgogKiAgICAgRm9vdGVyIEEKICogICA8L2Zvb3Rlcj4KICogICA8aGVhZGVyPgogKiAgICAgSGVhZGVyIEIKICogICA8L2hlYWRlcj4KICogICA8ZGl2IGNsYXNzPSJib2R5Ij4KICogICAgIEJvZHkgQgogKiAgIDwvZGl2PgogKiAgIDxmb290ZXI+CiAqICAgICBGb290ZXIgQgogKiAgIDwvZm9vdGVyPgogKiA8L3ByZT4KICoKICogVGhlIGN1c3RvbSBzdGFydCBhbmQgZW5kIHBvaW50cyBmb3IgbmdSZXBlYXQgYWxzbyBzdXBwb3J0IGFsbCBvdGhlciBIVE1MIGRpcmVjdGl2ZSBzeW50YXggZmxhdm9ycyBwcm92aWRlZCBpbiBBbmd1bGFySlMgKHN1Y2gKICogYXMgKipkYXRhLW5nLXJlcGVhdC1zdGFydCoqLCAqKngtbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmc6cmVwZWF0LXN0YXJ0KiopLgogKgogKiBAYW5pbWF0aW9ucwogKiBlbnRlciAtIHdoZW4gYSBuZXcgaXRlbSBpcyBhZGRlZCB0byB0aGUgbGlzdCBvciB3aGVuIGFuIGl0ZW0gaXMgcmV2ZWFsZWQgYWZ0ZXIgYSBmaWx0ZXIKICogbGVhdmUgLSB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyBmaWx0ZXJlZCBvdXQKICogbW92ZSAtIHdoZW4gYW4gYWRqYWNlbnQgaXRlbSBpcyBmaWx0ZXJlZCBvdXQgY2F1c2luZyBhIHJlb3JkZXIgb3Igd2hlbiB0aGUgaXRlbSBjb250ZW50cyBhcmUgcmVvcmRlcmVkCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAc2NvcGUKICogQHByaW9yaXR5IDEwMDAKICogQHBhcmFtIHtyZXBlYXRfZXhwcmVzc2lvbn0gbmdSZXBlYXQgVGhlIGV4cHJlc3Npb24gaW5kaWNhdGluZyBob3cgdG8gZW51bWVyYXRlIGEgY29sbGVjdGlvbi4gVGhlc2UKICogICBmb3JtYXRzIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkOgogKgogKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSB2YXJpYWJsZSBpcyB0aGUgdXNlciBkZWZpbmVkIGxvb3AgdmFyaWFibGUgYW5kIGBleHByZXNzaW9uYAogKiAgICAgaXMgYSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuCiAqCiAqICAgICBGb3IgZXhhbXBsZTogYGFsYnVtIGluIGFydGlzdC5hbGJ1bXNgLgogKgogKiAgICogYChrZXksIHZhbHVlKSBpbiBleHByZXNzaW9uYCDigJMgd2hlcmUgYGtleWAgYW5kIGB2YWx1ZWAgY2FuIGJlIGFueSB1c2VyIGRlZmluZWQgaWRlbnRpZmllcnMsCiAqICAgICBhbmQgYGV4cHJlc3Npb25gIGlzIHRoZSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuCiAqCiAqICAgICBGb3IgZXhhbXBsZTogYChuYW1lLCBhZ2UpIGluIHsnYWRhbSc6MTAsICdhbWFsaWUnOjEyfWAuCiAqCiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbiB0cmFjayBieSB0cmFja2luZ19leHByZXNzaW9uYCDigJMgWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgdHJhY2tpbmcgZnVuY3Rpb24KICogICAgIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFzc29jaWF0ZSB0aGUgb2JqZWN0cyBpbiB0aGUgY29sbGVjdGlvbiB3aXRoIHRoZSBET00gZWxlbWVudHMuIElmIG5vIHRyYWNraW5nIGZ1bmN0aW9uCiAqICAgICBpcyBzcGVjaWZpZWQgdGhlIG5nLXJlcGVhdCBhc3NvY2lhdGVzIGVsZW1lbnRzIGJ5IGlkZW50aXR5IGluIHRoZSBjb2xsZWN0aW9uLiBJdCBpcyBhbiBlcnJvciB0byBoYXZlCiAqICAgICBtb3JlIHRoYW4gb25lIHRyYWNraW5nIGZ1bmN0aW9uIHRvIHJlc29sdmUgdG8gdGhlIHNhbWUga2V5LiAoVGhpcyB3b3VsZCBtZWFuIHRoYXQgdHdvIGRpc3RpbmN0IG9iamVjdHMgYXJlCiAqICAgICBtYXBwZWQgdG8gdGhlIHNhbWUgRE9NIGVsZW1lbnQsIHdoaWNoIGlzIG5vdCBwb3NzaWJsZS4pICBGaWx0ZXJzIHNob3VsZCBiZSBhcHBsaWVkIHRvIHRoZSBleHByZXNzaW9uLAogKiAgICAgYmVmb3JlIHNwZWNpZnlpbmcgYSB0cmFja2luZyBleHByZXNzaW9uLgogKgogKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zYCBpcyBlcXVpdmFsZW50IHRvIGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKScuIFRoaXMgaW1wbGllcyB0aGF0IHRoZSBET00gZWxlbWVudHMKICogICAgIHdpbGwgYmUgYXNzb2NpYXRlZCBieSBpdGVtIGlkZW50aXR5IGluIHRoZSBhcnJheS4KICoKICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSAkaWQoaXRlbSlgLiBBIGJ1aWx0IGluIGAkaWQoKWAgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYXNzaWduIGEgdW5pcXVlCiAqICAgICBgJCRoYXNoS2V5YCBwcm9wZXJ0eSB0byBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LiBUaGlzIHByb3BlcnR5IGlzIHRoZW4gdXNlZCBhcyBhIGtleSB0byBhc3NvY2lhdGVkIERPTSBlbGVtZW50cwogKiAgICAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBpdGVtIGluIHRoZSBhcnJheSBieSBpZGVudGl0eS4gTW92aW5nIHRoZSBzYW1lIG9iamVjdCBpbiBhcnJheSB3b3VsZCBtb3ZlIHRoZSBET00KICogICAgIGVsZW1lbnQgaW4gdGhlIHNhbWUgd2F5IGluIHRoZSBET00uCiAqCiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgaXRlbS5pZGAgaXMgYSB0eXBpY2FsIHBhdHRlcm4gd2hlbiB0aGUgaXRlbXMgY29tZSBmcm9tIHRoZSBkYXRhYmFzZS4gSW4gdGhpcwogKiAgICAgY2FzZSB0aGUgb2JqZWN0IGlkZW50aXR5IGRvZXMgbm90IG1hdHRlci4gVHdvIG9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBhcyBsb25nIGFzIHRoZWlyIGBpZGAKICogICAgIHByb3BlcnR5IGlzIHNhbWUuCiAqCiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXI6c2VhcmNoVGV4dCB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHBhdHRlcm4gdGhhdCBtaWdodCBiZSB1c2VkIHRvIGFwcGx5IGEgZmlsdGVyCiAqICAgICB0byBpdGVtcyBpbiBjb25qdW5jdGlvbiB3aXRoIGEgdHJhY2tpbmcgZXhwcmVzc2lvbi4KICoKICogQGV4YW1wbGUKICogVGhpcyBleGFtcGxlIGluaXRpYWxpemVzIHRoZSBzY29wZSB0byBhIGxpc3Qgb2YgbmFtZXMgYW5kCiAqIHRoZW4gdXNlcyBgbmdSZXBlYXRgIHRvIGRpc3BsYXkgZXZlcnkgcGVyc29uOgogIDxleGFtcGxlIGFuaW1hdGlvbnM9InRydWUiPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxkaXYgbmctaW5pdD0iZnJpZW5kcyA9IFsKICAgICAgICB7bmFtZTonSm9obicsIGFnZToyNSwgZ2VuZGVyOidib3knfSwKICAgICAgICB7bmFtZTonSmVzc2llJywgYWdlOjMwLCBnZW5kZXI6J2dpcmwnfSwKICAgICAgICB7bmFtZTonSm9oYW5uYScsIGFnZToyOCwgZ2VuZGVyOidnaXJsJ30sCiAgICAgICAge25hbWU6J0pveScsIGFnZToxNSwgZ2VuZGVyOidnaXJsJ30sCiAgICAgICAge25hbWU6J01hcnknLCBhZ2U6MjgsIGdlbmRlcjonZ2lybCd9LAogICAgICAgIHtuYW1lOidQZXRlcicsIGFnZTo5NSwgZ2VuZGVyOidib3knfSwKICAgICAgICB7bmFtZTonU2ViYXN0aWFuJywgYWdlOjUwLCBnZW5kZXI6J2JveSd9LAogICAgICAgIHtuYW1lOidFcmlrYScsIGFnZToyNywgZ2VuZGVyOidnaXJsJ30sCiAgICAgICAge25hbWU6J1BhdHJpY2snLCBhZ2U6NDAsIGdlbmRlcjonYm95J30sCiAgICAgICAge25hbWU6J1NhbWFudGhhJywgYWdlOjYwLCBnZW5kZXI6J2dpcmwnfQogICAgICBdIj4KICAgICAgICBJIGhhdmUge3tmcmllbmRzLmxlbmd0aH19IGZyaWVuZHMuIFRoZXkgYXJlOgogICAgICAgIDxpbnB1dCB0eXBlPSJzZWFyY2giIG5nLW1vZGVsPSJxIiBwbGFjZWhvbGRlcj0iZmlsdGVyIGZyaWVuZHMuLi4iIC8+CiAgICAgICAgPHVsIGNsYXNzPSJleGFtcGxlLWFuaW1hdGUtY29udGFpbmVyIj4KICAgICAgICAgIDxsaSBjbGFzcz0iYW5pbWF0ZS1yZXBlYXQiIG5nLXJlcGVhdD0iZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6cSI+CiAgICAgICAgICAgIFt7eyRpbmRleCArIDF9fV0ge3tmcmllbmQubmFtZX19IHdobyBpcyB7e2ZyaWVuZC5hZ2V9fSB5ZWFycyBvbGQuCiAgICAgICAgICA8L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0iYW5pbWF0aW9ucy5jc3MiPgogICAgICAuZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lciB7CiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGxpc3Qtc3R5bGU6bm9uZTsKICAgICAgICBtYXJnaW46MDsKICAgICAgICBwYWRkaW5nOjAgMTBweDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtcmVwZWF0IHsKICAgICAgICBsaW5lLWhlaWdodDo0MHB4OwogICAgICAgIGxpc3Qtc3R5bGU6bm9uZTsKICAgICAgICBib3gtc2l6aW5nOmJvcmRlci1ib3g7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLAogICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIsCiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSB7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSwKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsCiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlciB7CiAgICAgICAgb3BhY2l0eTowOwogICAgICAgIG1heC1oZWlnaHQ6MDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLAogICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZS5uZy1tb3ZlLWFjdGl2ZSwKICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7CiAgICAgICAgb3BhY2l0eToxOwogICAgICAgIG1heC1oZWlnaHQ6NDBweDsKICAgICAgfQogICAgPC9maWxlPgogICAgPGZpbGUgbmFtZT0ic2NlbmFyaW8uanMiPgogICAgICAgaXQoJ3Nob3VsZCByZW5kZXIgaW5pdGlhbCBkYXRhIHNldCcsIGZ1bmN0aW9uKCkgewogICAgICAgICB2YXIgciA9IHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLnJlcGVhdGVyKCd1bCBsaScpOwogICAgICAgICBleHBlY3Qoci5jb3VudCgpKS50b0JlKDEwKTsKICAgICAgICAgZXhwZWN0KHIucm93KDApKS50b0VxdWFsKFsiMSIsIkpvaG4iLCIyNSJdKTsKICAgICAgICAgZXhwZWN0KHIucm93KDEpKS50b0VxdWFsKFsiMiIsIkplc3NpZSIsIjMwIl0pOwogICAgICAgICBleHBlY3Qoci5yb3coOSkpLnRvRXF1YWwoWyIxMCIsIlNhbWFudGhhIiwiNjAiXSk7CiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdmcmllbmRzLmxlbmd0aCcpKS50b0JlKCIxMCIpOwogICAgICAgfSk7CgogICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgcmVwZWF0ZXIgd2hlbiBmaWx0ZXIgcHJlZGljYXRlIGNoYW5nZXMnLCBmdW5jdGlvbigpIHsKICAgICAgICAgdmFyIHIgPSB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5yZXBlYXRlcigndWwgbGknKTsKICAgICAgICAgZXhwZWN0KHIuY291bnQoKSkudG9CZSgxMCk7CgogICAgICAgICBpbnB1dCgncScpLmVudGVyKCdtYScpOwoKICAgICAgICAgZXhwZWN0KHIuY291bnQoKSkudG9CZSgyKTsKICAgICAgICAgZXhwZWN0KHIucm93KDApKS50b0VxdWFsKFsiMSIsIk1hcnkiLCIyOCJdKTsKICAgICAgICAgZXhwZWN0KHIucm93KDEpKS50b0VxdWFsKFsiMiIsIlNhbWFudGhhIiwiNjAiXSk7CiAgICAgICB9KTsKICAgICAgPC9maWxlPgogICAgPC9leGFtcGxlPgogKi8KdmFyIG5nUmVwZWF0RGlyZWN0aXZlID0gWyckcGFyc2UnLCAnJGFuaW1hdGUnLCBmdW5jdGlvbigkcGFyc2UsICRhbmltYXRlKSB7CiAgdmFyIE5HX1JFTU9WRUQgPSAnJCROR19SRU1PVkVEJzsKICB2YXIgbmdSZXBlYXRNaW5FcnIgPSBtaW5FcnIoJ25nUmVwZWF0Jyk7CiAgcmV0dXJuIHsKICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JywKICAgIHByaW9yaXR5OiAxMDAwLAogICAgdGVybWluYWw6IHRydWUsCiAgICAkJHRsYjogdHJ1ZSwKICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSl7CiAgICAgICAgdmFyIGV4cHJlc3Npb24gPSAkYXR0ci5uZ1JlcGVhdDsKICAgICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKC9eXHMqKFtcc1xTXSs/KVxzK2luXHMrKFtcc1xTXSs/KSg/OlxzK3RyYWNrXHMrYnlccysoW1xzXFNdKz8pKT9ccyokLyksCiAgICAgICAgICB0cmFja0J5RXhwLCB0cmFja0J5RXhwR2V0dGVyLCB0cmFja0J5SWRFeHBGbiwgdHJhY2tCeUlkQXJyYXlGbiwgdHJhY2tCeUlkT2JqRm4sCiAgICAgICAgICBsaHMsIHJocywgdmFsdWVJZGVudGlmaWVyLCBrZXlJZGVudGlmaWVyLAogICAgICAgICAgaGFzaEZuTG9jYWxzID0geyRpZDogaGFzaEtleX07CgogICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpZXhwJywgIkV4cGVjdGVkIGV4cHJlc3Npb24gaW4gZm9ybSBvZiAnX2l0ZW1fIGluIF9jb2xsZWN0aW9uX1sgdHJhY2sgYnkgX2lkX10nIGJ1dCBnb3QgJ3swfScuIiwKICAgICAgICAgICAgZXhwcmVzc2lvbik7CiAgICAgICAgfQoKICAgICAgICBsaHMgPSBtYXRjaFsxXTsKICAgICAgICByaHMgPSBtYXRjaFsyXTsKICAgICAgICB0cmFja0J5RXhwID0gbWF0Y2hbM107CgogICAgICAgIGlmICh0cmFja0J5RXhwKSB7CiAgICAgICAgICB0cmFja0J5RXhwR2V0dGVyID0gJHBhcnNlKHRyYWNrQnlFeHApOwogICAgICAgICAgdHJhY2tCeUlkRXhwRm4gPSBmdW5jdGlvbihrZXksIHZhbHVlLCBpbmRleCkgewogICAgICAgICAgICAvLyBhc3NpZ24ga2V5LCB2YWx1ZSwgYW5kICRpbmRleCB0byB0aGUgbG9jYWxzIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCBpbiBoYXNoIGZ1bmN0aW9ucwogICAgICAgICAgICBpZiAoa2V5SWRlbnRpZmllcikgaGFzaEZuTG9jYWxzW2tleUlkZW50aWZpZXJdID0ga2V5OwogICAgICAgICAgICBoYXNoRm5Mb2NhbHNbdmFsdWVJZGVudGlmaWVyXSA9IHZhbHVlOwogICAgICAgICAgICBoYXNoRm5Mb2NhbHMuJGluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgIHJldHVybiB0cmFja0J5RXhwR2V0dGVyKCRzY29wZSwgaGFzaEZuTG9jYWxzKTsKICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRyYWNrQnlJZEFycmF5Rm4gPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiBoYXNoS2V5KHZhbHVlKTsKICAgICAgICAgIH07CiAgICAgICAgICB0cmFja0J5SWRPYmpGbiA9IGZ1bmN0aW9uKGtleSkgewogICAgICAgICAgICByZXR1cm4ga2V5OwogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIG1hdGNoID0gbGhzLm1hdGNoKC9eKD86KFtcJFx3XSspfFwoKFtcJFx3XSspXHMqLFxzKihbXCRcd10rKVwpKSQvKTsKICAgICAgICBpZiAoIW1hdGNoKSB7CiAgICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWlkZXhwJywgIidfaXRlbV8nIGluICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fJyBzaG91bGQgYmUgYW4gaWRlbnRpZmllciBvciAnKF9rZXlfLCBfdmFsdWVfKScgZXhwcmVzc2lvbiwgYnV0IGdvdCAnezB9Jy4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxocyk7CiAgICAgICAgfQogICAgICAgIHZhbHVlSWRlbnRpZmllciA9IG1hdGNoWzNdIHx8IG1hdGNoWzFdOwogICAgICAgIGtleUlkZW50aWZpZXIgPSBtYXRjaFsyXTsKCiAgICAgICAgLy8gU3RvcmUgYSBsaXN0IG9mIGVsZW1lbnRzIGZyb20gcHJldmlvdXMgcnVuLiBUaGlzIGlzIGEgaGFzaCB3aGVyZSBrZXkgaXMgdGhlIGl0ZW0gZnJvbSB0aGUKICAgICAgICAvLyBpdGVyYXRvciwgYW5kIHRoZSB2YWx1ZSBpcyBvYmplY3RzIHdpdGggZm9sbG93aW5nIHByb3BlcnRpZXMuCiAgICAgICAgLy8gICAtIHNjb3BlOiBib3VuZCBzY29wZQogICAgICAgIC8vICAgLSBlbGVtZW50OiBwcmV2aW91cyBlbGVtZW50LgogICAgICAgIC8vICAgLSBpbmRleDogcG9zaXRpb24KICAgICAgICB2YXIgbGFzdEJsb2NrTWFwID0ge307CgogICAgICAgIC8vd2F0Y2ggcHJvcHMKICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihyaHMsIGZ1bmN0aW9uIG5nUmVwZWF0QWN0aW9uKGNvbGxlY3Rpb24pewogICAgICAgICAgdmFyIGluZGV4LCBsZW5ndGgsCiAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gJGVsZW1lbnRbMF0sICAgICAvLyBjdXJyZW50IHBvc2l0aW9uIG9mIHRoZSBub2RlCiAgICAgICAgICAgICAgbmV4dE5vZGUsCiAgICAgICAgICAgICAgLy8gU2FtZSBhcyBsYXN0QmxvY2tNYXAgYnV0IGl0IGhhcyB0aGUgY3VycmVudCBzdGF0ZS4gSXQgd2lsbCBiZWNvbWUgdGhlCiAgICAgICAgICAgICAgLy8gbGFzdEJsb2NrTWFwIG9uIHRoZSBuZXh0IGl0ZXJhdGlvbi4KICAgICAgICAgICAgICBuZXh0QmxvY2tNYXAgPSB7fSwKICAgICAgICAgICAgICBhcnJheUxlbmd0aCwKICAgICAgICAgICAgICBjaGlsZFNjb3BlLAogICAgICAgICAgICAgIGtleSwgdmFsdWUsIC8vIGtleS92YWx1ZSBvZiBpdGVyYXRpb24KICAgICAgICAgICAgICB0cmFja0J5SWQsCiAgICAgICAgICAgICAgdHJhY2tCeUlkRm4sCiAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMsCiAgICAgICAgICAgICAgYmxvY2ssICAgICAgIC8vIGxhc3Qgb2JqZWN0IGluZm9ybWF0aW9uIHtzY29wZSwgZWxlbWVudCwgaWR9CiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXIgPSBbXSwKICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlOwoKCiAgICAgICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHsKICAgICAgICAgICAgY29sbGVjdGlvbktleXMgPSBjb2xsZWN0aW9uOwogICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZEFycmF5Rm47CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZE9iakZuOwogICAgICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgc29ydCB0aGVtIGFuZCB1c2UgdG8gZGV0ZXJtaW5lIG9yZGVyIG9mIGl0ZXJhdGlvbiBvdmVyIG9iaiBwcm9wcwogICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IFtdOwogICAgICAgICAgICBmb3IgKGtleSBpbiBjb2xsZWN0aW9uKSB7CiAgICAgICAgICAgICAgaWYgKGNvbGxlY3Rpb24uaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkuY2hhckF0KDApICE9ICckJykgewogICAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMucHVzaChrZXkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjb2xsZWN0aW9uS2V5cy5zb3J0KCk7CiAgICAgICAgICB9CgogICAgICAgICAgYXJyYXlMZW5ndGggPSBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7CgogICAgICAgICAgLy8gbG9jYXRlIGV4aXN0aW5nIGl0ZW1zCiAgICAgICAgICBsZW5ndGggPSBuZXh0QmxvY2tPcmRlci5sZW5ndGggPSBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7CiAgICAgICAgICBmb3IoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTsKICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTsKICAgICAgICAgICB0cmFja0J5SWQgPSB0cmFja0J5SWRGbihrZXksIHZhbHVlLCBpbmRleCk7CiAgICAgICAgICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkodHJhY2tCeUlkLCAnYHRyYWNrIGJ5YCBpZCcpOwogICAgICAgICAgIGlmKGxhc3RCbG9ja01hcC5oYXNPd25Qcm9wZXJ0eSh0cmFja0J5SWQpKSB7CiAgICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFt0cmFja0J5SWRdOwogICAgICAgICAgICAgZGVsZXRlIGxhc3RCbG9ja01hcFt0cmFja0J5SWRdOwogICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSBibG9jazsKICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IGJsb2NrOwogICAgICAgICAgIH0gZWxzZSBpZiAobmV4dEJsb2NrTWFwLmhhc093blByb3BlcnR5KHRyYWNrQnlJZCkpIHsKICAgICAgICAgICAgIC8vIHJlc3RvcmUgbGFzdEJsb2NrTWFwCiAgICAgICAgICAgICBmb3JFYWNoKG5leHRCbG9ja09yZGVyLCBmdW5jdGlvbihibG9jaykgewogICAgICAgICAgICAgICBpZiAoYmxvY2sgJiYgYmxvY2suc2NvcGUpIGxhc3RCbG9ja01hcFtibG9jay5pZF0gPSBibG9jazsKICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGR1cGxpY2F0ZSBhbmQgd2UgbmVlZCB0byB0aHJvdyBhbiBlcnJvcgogICAgICAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2R1cGVzJywgIkR1cGxpY2F0ZXMgaW4gYSByZXBlYXRlciBhcmUgbm90IGFsbG93ZWQuIFVzZSAndHJhY2sgYnknIGV4cHJlc3Npb24gdG8gc3BlY2lmeSB1bmlxdWUga2V5cy4gUmVwZWF0ZXI6IHswfSwgRHVwbGljYXRlIGtleTogezF9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24sICAgICAgIHRyYWNrQnlJZCk7CiAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgIC8vIG5ldyBuZXZlciBiZWZvcmUgc2VlbiBibG9jawogICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0geyBpZDogdHJhY2tCeUlkIH07CiAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IGZhbHNlOwogICAgICAgICAgIH0KICAgICAgICAgfQoKICAgICAgICAgIC8vIHJlbW92ZSBleGlzdGluZyBpdGVtcwogICAgICAgICAgZm9yIChrZXkgaW4gbGFzdEJsb2NrTWFwKSB7CiAgICAgICAgICAgIC8vIGxhc3RCbG9ja01hcCBpcyBvdXIgb3duIG9iamVjdCBzbyB3ZSBkb24ndCBuZWVkIHRvIHVzZSBzcGVjaWFsIGhhc093blByb3BlcnR5Rm4KICAgICAgICAgICAgaWYgKGxhc3RCbG9ja01hcC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgYmxvY2sgPSBsYXN0QmxvY2tNYXBba2V5XTsKICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlID0gZ2V0QmxvY2tFbGVtZW50cyhibG9jay5jbG9uZSk7CiAgICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoZWxlbWVudHNUb1JlbW92ZSk7CiAgICAgICAgICAgICAgZm9yRWFjaChlbGVtZW50c1RvUmVtb3ZlLCBmdW5jdGlvbihlbGVtZW50KSB7IGVsZW1lbnRbTkdfUkVNT1ZFRF0gPSB0cnVlOyB9KTsKICAgICAgICAgICAgICBibG9jay5zY29wZS4kZGVzdHJveSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBmb3JFYWNoIGZvciBwZXJmIHJlYXNvbnMgKHRyeWluZyB0byBhdm9pZCAjY2FsbCkKICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTsKICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07CiAgICAgICAgICAgIGJsb2NrID0gbmV4dEJsb2NrT3JkZXJbaW5kZXhdOwogICAgICAgICAgICBpZiAobmV4dEJsb2NrT3JkZXJbaW5kZXggLSAxXSkgcHJldmlvdXNOb2RlID0gZ2V0QmxvY2tFbmQobmV4dEJsb2NrT3JkZXJbaW5kZXggLSAxXSk7CgogICAgICAgICAgICBpZiAoYmxvY2suc2NvcGUpIHsKICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGFscmVhZHkgc2VlbiB0aGlzIG9iamVjdCwgdGhlbiB3ZSBuZWVkIHRvIHJldXNlIHRoZQogICAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgc2NvcGUvZWxlbWVudAogICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBibG9jay5zY29wZTsKCiAgICAgICAgICAgICAgbmV4dE5vZGUgPSBwcmV2aW91c05vZGU7CiAgICAgICAgICAgICAgZG8gewogICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZzsKICAgICAgICAgICAgICB9IHdoaWxlKG5leHROb2RlICYmIG5leHROb2RlW05HX1JFTU9WRURdKTsKCiAgICAgICAgICAgICAgaWYgKGdldEJsb2NrU3RhcnQoYmxvY2spICE9IG5leHROb2RlKSB7CiAgICAgICAgICAgICAgICAvLyBleGlzdGluZyBpdGVtIHdoaWNoIGdvdCBtb3ZlZAogICAgICAgICAgICAgICAgJGFuaW1hdGUubW92ZShnZXRCbG9ja0VsZW1lbnRzKGJsb2NrLmNsb25lKSwgbnVsbCwganFMaXRlKHByZXZpb3VzTm9kZSkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBnZXRCbG9ja0VuZChibG9jayk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gbmV3IGl0ZW0gd2hpY2ggd2UgZG9uJ3Qga25vdyBhYm91dAogICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSAkc2NvcGUuJG5ldygpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjaGlsZFNjb3BlW3ZhbHVlSWRlbnRpZmllcl0gPSB2YWx1ZTsKICAgICAgICAgICAgaWYgKGtleUlkZW50aWZpZXIpIGNoaWxkU2NvcGVba2V5SWRlbnRpZmllcl0gPSBrZXk7CiAgICAgICAgICAgIGNoaWxkU2NvcGUuJGluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgIGNoaWxkU2NvcGUuJGZpcnN0ID0gKGluZGV4ID09PSAwKTsKICAgICAgICAgICAgY2hpbGRTY29wZS4kbGFzdCA9IChpbmRleCA9PT0gKGFycmF5TGVuZ3RoIC0gMSkpOwogICAgICAgICAgICBjaGlsZFNjb3BlLiRtaWRkbGUgPSAhKGNoaWxkU2NvcGUuJGZpcnN0IHx8IGNoaWxkU2NvcGUuJGxhc3QpOwogICAgICAgICAgICAvLyBqc2hpbnQgYml0d2lzZTogZmFsc2UKICAgICAgICAgICAgY2hpbGRTY29wZS4kb2RkID0gIShjaGlsZFNjb3BlLiRldmVuID0gKGluZGV4JjEpID09PSAwKTsKICAgICAgICAgICAgLy8ganNoaW50IGJpdHdpc2U6IHRydWUKCiAgICAgICAgICAgIGlmICghYmxvY2suc2NvcGUpIHsKICAgICAgICAgICAgICAkdHJhbnNjbHVkZShjaGlsZFNjb3BlLCBmdW5jdGlvbihjbG9uZSkgewogICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ1JlcGVhdDogJyArIGV4cHJlc3Npb24gKyAnICcpOwogICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsIGpxTGl0ZShwcmV2aW91c05vZGUpKTsKICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGNsb25lOwogICAgICAgICAgICAgICAgYmxvY2suc2NvcGUgPSBjaGlsZFNjb3BlOwogICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy4KICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyCiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXQncyB0ZW1wbGF0ZSBhcnJpdmVzLgogICAgICAgICAgICAgICAgYmxvY2suY2xvbmUgPSBjbG9uZTsKICAgICAgICAgICAgICAgIG5leHRCbG9ja01hcFtibG9jay5pZF0gPSBibG9jazsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgbGFzdEJsb2NrTWFwID0gbmV4dEJsb2NrTWFwOwogICAgICAgIH0pOwogICAgfQogIH07CgogIGZ1bmN0aW9uIGdldEJsb2NrU3RhcnQoYmxvY2spIHsKICAgIHJldHVybiBibG9jay5jbG9uZVswXTsKICB9CgogIGZ1bmN0aW9uIGdldEJsb2NrRW5kKGJsb2NrKSB7CiAgICByZXR1cm4gYmxvY2suY2xvbmVbYmxvY2suY2xvbmUubGVuZ3RoIC0gMV07CiAgfQp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1Nob3cKICoKICogQGRlc2NyaXB0aW9uCiAqIFRoZSBgbmdTaG93YCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvbgogKiBwcm92aWRlZCB0byB0aGUgbmdTaG93IGF0dHJpYnV0ZS4gVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZwogKiB0aGUgYG5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcHJlZGVmaW5lZAogKiBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW4gIWltcG9ydGFudCBmbGFnKS4KICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuCiAqCiAqIDxwcmU+CiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+CiAqIDxkaXYgbmctc2hvdz0ibXlWYWx1ZSI+PC9kaXY+CiAqCiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPgogKiA8ZGl2IG5nLXNob3c9Im15VmFsdWUiIGNsYXNzPSJuZy1oaWRlIj48L2Rpdj4KICogPC9wcmU+CiAqCiAqIFdoZW4gdGhlIG5nU2hvdyBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBmYWxzZSB0aGVuIHRoZSBuZy1oaWRlIENTUyBjbGFzcyBpcyBhZGRlZCB0byB0aGUgY2xhc3MgYXR0cmlidXRlCiAqIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiB0cnVlLCB0aGUgbmctaGlkZSBDU1MgY2xhc3MgaXMgcmVtb3ZlZAogKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uCiAqCiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/CiAqCiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSAhaW1wb3J0YW50IGlzIHVzZWQgZm9yIHRoZSAubmctaGlkZSBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYC5uZy1oaWRlYCBzZWxlY3RvcgogKiBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXMgc2ltcGxlCiAqIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyIHZpc2libGUuCiAqIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLgogKgogKiBCeSB1c2luZyAhaW1wb3J0YW50LCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlbiBDU1Mgc2VsZWN0b3IKICogc3BlY2lmaWNpdHkgKHdoZW4gIWltcG9ydGFudCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGEgZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlCiAqIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGEgbWF0dGVyIG9mIHVzaW5nICFpbXBvcnRhbnQgaW4gdGhlaXIgb3duIENTUyBjb2RlLgogKgogKiAjIyMgT3ZlcnJpZGluZyAubmctaGlkZQogKgogKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBuZ1Nob3cvbmdIaWRlIHRoZW4gdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkKICogcmVzdGF0aW5nIHRoZSBzdHlsZXMgZm9yIHRoZSAubmctaGlkZSBjbGFzcyBpbiBDU1M6CiAqIDxwcmU+CiAqIC5uZy1oaWRlIHsKICogICAvLyFhbm5vdGF0ZSBDU1MgU3BlY2lmaWNpdHl8Tm90IHRvIHdvcnJ5LCB0aGlzIHdpbGwgb3ZlcnJpZGUgdGhlIEFuZ3VsYXJKUyBkZWZhdWx0Li4uCiAqICAgZGlzcGxheTpibG9jayFpbXBvcnRhbnQ7CiAqCiAqICAgLy90aGlzIGlzIGp1c3QgYW5vdGhlciBmb3JtIG9mIGhpZGluZyBhbiBlbGVtZW50CiAqICAgcG9zaXRpb246YWJzb2x1dGU7CiAqICAgdG9wOi05OTk5cHg7CiAqICAgbGVmdDotOTk5OXB4OwogKiB9CiAqIDwvcHJlPgogKgogKiBKdXN0IHJlbWVtYmVyIHRvIGluY2x1ZGUgdGhlIGltcG9ydGFudCBmbGFnIHNvIHRoZSBDU1Mgb3ZlcnJpZGUgd2lsbCBmdW5jdGlvbi4KICoKICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBuZ1Nob3cKICoKICogQW5pbWF0aW9ucyBpbiBuZ1Nob3cvbmdIaWRlIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGRpcmVjdGl2ZSBleHByZXNzaW9uCiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzIGV4Y2VwdCB0aGF0CiAqIHlvdSBtdXN0IGFsc28gaW5jbHVkZSB0aGUgIWltcG9ydGFudCBmbGFnIHRvIG92ZXJyaWRlIHRoZSBkaXNwbGF5IHByb3BlcnR5CiAqIHNvIHRoYXQgeW91IGNhbiBwZXJmb3JtIGFuIGFuaW1hdGlvbiB3aGVuIHRoZSBlbGVtZW50IGlzIGhpZGRlbiBkdXJpbmcgdGhlIHRpbWUgb2YgdGhlIGFuaW1hdGlvbi4KICoKICogPHByZT4KICogLy8KICogLy9hIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2UKICogLy8KICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsKICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsKICogICBkaXNwbGF5OmJsb2NrIWltcG9ydGFudDsKICogfQogKgogKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCB7IC4uLiB9CiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7IC4uLiB9CiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH0KICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHsgLi4uIH0KICogPC9wcmU+CiAqCiAqIEBhbmltYXRpb25zCiAqIGFkZENsYXNzOiAubmctaGlkZSAtIGhhcHBlbnMgYWZ0ZXIgdGhlIG5nU2hvdyBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQgdGhlIGp1c3QgYmVmb3JlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZQogKiByZW1vdmVDbGFzczogLm5nLWhpZGUgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ1Nob3cgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byBoaWRkZW4KICoKICogQGVsZW1lbnQgQU5ZCiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTaG93IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHkKICogICAgIHRoZW4gdGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIHJlc3BlY3RpdmVseS4KICoKICogQGV4YW1wbGUKICA8ZXhhbXBsZSBhbmltYXRpb25zPSJ0cnVlIj4KICAgIDxmaWxlIG5hbWU9ImluZGV4Lmh0bWwiPgogICAgICBDbGljayBtZTogPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0iY2hlY2tlZCI+PGJyLz4KICAgICAgPGRpdj4KICAgICAgICBTaG93OgogICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1zaG93IiBuZy1zaG93PSJjaGVja2VkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLXRodW1icy11cCI+PC9zcGFuPiBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuCiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2PgogICAgICAgIEhpZGU6CiAgICAgICAgPGRpdiBjbGFzcz0iY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3ciIG5nLWhpZGU9ImNoZWNrZWQiPgogICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tdGh1bWJzLWRvd24iPjwvc3Bhbj4gSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImFuaW1hdGlvbnMuY3NzIj4KICAgICAgLmFuaW1hdGUtc2hvdyB7CiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41czsKICAgICAgICBsaW5lLWhlaWdodDoyMHB4OwogICAgICAgIG9wYWNpdHk6MTsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgICAgICBiYWNrZ3JvdW5kOndoaXRlOwogICAgICB9CgogICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtYWRkLAogICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtcmVtb3ZlIHsKICAgICAgICBkaXNwbGF5OmJsb2NrIWltcG9ydGFudDsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtc2hvdy5uZy1oaWRlIHsKICAgICAgICBsaW5lLWhlaWdodDowOwogICAgICAgIG9wYWNpdHk6MDsKICAgICAgICBwYWRkaW5nOjAgMTBweDsKICAgICAgfQoKICAgICAgLmNoZWNrLWVsZW1lbnQgewogICAgICAgIHBhZGRpbmc6MTBweDsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGJhY2tncm91bmQ6d2hpdGU7CiAgICAgIH0KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9InNjZW5hcmlvLmpzIj4KICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc2hvdyAvIG5nLWhpZGUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46Zmlyc3Q6aGlkZGVuJykuY291bnQoKSkudG9FcXVhbCgxKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46bGFzdDp2aXNpYmxlJykuY291bnQoKSkudG9FcXVhbCgxKTsKCiAgICAgICAgIGlucHV0KCdjaGVja2VkJykuY2hlY2soKTsKCiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuOmZpcnN0OnZpc2libGUnKS5jb3VudCgpKS50b0VxdWFsKDEpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbjpsYXN0OmhpZGRlbicpLmNvdW50KCkpLnRvRXF1YWwoMSk7CiAgICAgICB9KTsKICAgIDwvZmlsZT4KICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdTaG93RGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7CiAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ1Nob3csIGZ1bmN0aW9uIG5nU2hvd1dhdGNoQWN0aW9uKHZhbHVlKXsKICAgICAgJGFuaW1hdGVbdG9Cb29sZWFuKHZhbHVlKSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShlbGVtZW50LCAnbmctaGlkZScpOwogICAgfSk7CiAgfTsKfV07CgoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nSGlkZQogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ0hpZGVgIGRpcmVjdGl2ZSBzaG93cyBvciBoaWRlcyB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50IGJhc2VkIG9uIHRoZSBleHByZXNzaW9uCiAqIHByb3ZpZGVkIHRvIHRoZSBuZ0hpZGUgYXR0cmlidXRlLiBUaGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gYnkgcmVtb3Zpbmcgb3IgYWRkaW5nCiAqIHRoZSBgbmctaGlkZWAgQ1NTIGNsYXNzIG9udG8gdGhlIGVsZW1lbnQuIFRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBwcmVkZWZpbmVkCiAqIGluIEFuZ3VsYXJKUyBhbmQgc2V0cyB0aGUgZGlzcGxheSBzdHlsZSB0byBub25lICh1c2luZyBhbiAhaW1wb3J0YW50IGZsYWcpLgogKiBGb3IgQ1NQIG1vZGUgcGxlYXNlIGFkZCBgYW5ndWxhci1jc3AuY3NzYCB0byB5b3VyIGh0bWwgZmlsZSAoc2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS4KICoKICogPHByZT4KICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIHRydXRoeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPgogKiA8ZGl2IG5nLWhpZGU9Im15VmFsdWUiPjwvZGl2PgogKgogKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgZmFsc3kgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+CiAqIDxkaXYgbmctaGlkZT0ibXlWYWx1ZSIgY2xhc3M9Im5nLWhpZGUiPjwvZGl2PgogKiA8L3ByZT4KICoKICogV2hlbiB0aGUgbmdIaWRlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUgdGhlbiB0aGUgLm5nLWhpZGUgQ1NTIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBjbGFzcyBhdHRyaWJ1dGUKICogb24gdGhlIGVsZW1lbnQgY2F1c2luZyBpdCB0byBiZWNvbWUgaGlkZGVuLiBXaGVuIGZhbHNlLCB0aGUgbmctaGlkZSBDU1MgY2xhc3MgaXMgcmVtb3ZlZAogKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uCiAqCiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/CiAqCiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSAhaW1wb3J0YW50IGlzIHVzZWQgZm9yIHRoZSAubmctaGlkZSBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYC5uZy1oaWRlYCBzZWxlY3RvcgogKiBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXMgc2ltcGxlCiAqIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyIHZpc2libGUuCiAqIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLgogKgogKiBCeSB1c2luZyAhaW1wb3J0YW50LCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlbiBDU1Mgc2VsZWN0b3IKICogc3BlY2lmaWNpdHkgKHdoZW4gIWltcG9ydGFudCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGEgZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlCiAqIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGEgbWF0dGVyIG9mIHVzaW5nICFpbXBvcnRhbnQgaW4gdGhlaXIgb3duIENTUyBjb2RlLgogKgogKiAjIyMgT3ZlcnJpZGluZyAubmctaGlkZQogKgogKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBuZ1Nob3cvbmdIaWRlIHRoZW4gdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkKICogcmVzdGF0aW5nIHRoZSBzdHlsZXMgZm9yIHRoZSAubmctaGlkZSBjbGFzcyBpbiBDU1M6CiAqIDxwcmU+CiAqIC5uZy1oaWRlIHsKICogICAvLyFhbm5vdGF0ZSBDU1MgU3BlY2lmaWNpdHl8Tm90IHRvIHdvcnJ5LCB0aGlzIHdpbGwgb3ZlcnJpZGUgdGhlIEFuZ3VsYXJKUyBkZWZhdWx0Li4uCiAqICAgZGlzcGxheTpibG9jayFpbXBvcnRhbnQ7CiAqCiAqICAgLy90aGlzIGlzIGp1c3QgYW5vdGhlciBmb3JtIG9mIGhpZGluZyBhbiBlbGVtZW50CiAqICAgcG9zaXRpb246YWJzb2x1dGU7CiAqICAgdG9wOi05OTk5cHg7CiAqICAgbGVmdDotOTk5OXB4OwogKiB9CiAqIDwvcHJlPgogKgogKiBKdXN0IHJlbWVtYmVyIHRvIGluY2x1ZGUgdGhlIGltcG9ydGFudCBmbGFnIHNvIHRoZSBDU1Mgb3ZlcnJpZGUgd2lsbCBmdW5jdGlvbi4KICoKICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBuZ0hpZGUKICoKICogQW5pbWF0aW9ucyBpbiBuZ1Nob3cvbmdIaWRlIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGRpcmVjdGl2ZSBleHByZXNzaW9uCiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzLCBleGNlcHQgdGhhdAogKiB5b3UgbXVzdCBhbHNvIGluY2x1ZGUgdGhlICFpbXBvcnRhbnQgZmxhZyB0byBvdmVycmlkZSB0aGUgZGlzcGxheSBwcm9wZXJ0eSBzbwogKiB0aGF0IHlvdSBjYW4gcGVyZm9ybSBhbiBhbmltYXRpb24gd2hlbiB0aGUgZWxlbWVudCBpcyBoaWRkZW4gZHVyaW5nIHRoZSB0aW1lIG9mIHRoZSBhbmltYXRpb24uCiAqCiAqIDxwcmU+CiAqIC8vCiAqIC8vYSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlCiAqIC8vCiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLCAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7CiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7CiAqICAgZGlzcGxheTpibG9jayFpbXBvcnRhbnQ7CiAqIH0KICoKICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfQogKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfQogKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9CiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9CiAqIDwvcHJlPgogKgogKiBAYW5pbWF0aW9ucwogKiByZW1vdmVDbGFzczogLm5nLWhpZGUgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ0hpZGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlbgogKiBhZGRDbGFzczogLm5nLWhpZGUgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ0hpZGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlCiAqCiAqIEBlbGVtZW50IEFOWQogKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSGlkZSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5IHRoZW4KICogICAgIHRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiByZXNwZWN0aXZlbHkuCiAqCiAqIEBleGFtcGxlCiAgPGV4YW1wbGUgYW5pbWF0aW9ucz0idHJ1ZSI+CiAgICA8ZmlsZSBuYW1lPSJpbmRleC5odG1sIj4KICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9ImNoZWNrZWQiPjxici8+CiAgICAgIDxkaXY+CiAgICAgICAgU2hvdzoKICAgICAgICA8ZGl2IGNsYXNzPSJjaGVjay1lbGVtZW50IGFuaW1hdGUtaGlkZSIgbmctc2hvdz0iY2hlY2tlZCI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi10aHVtYnMtdXAiPjwvc3Bhbj4gSSBzaG93IHVwIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdj4KICAgICAgICBIaWRlOgogICAgICAgIDxkaXYgY2xhc3M9ImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1oaWRlIiBuZy1oaWRlPSJjaGVja2VkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uLXRodW1icy1kb3duIj48L3NwYW4+IEkgaGlkZSB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJhbmltYXRpb25zLmNzcyI+CiAgICAgIC5hbmltYXRlLWhpZGUgewogICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7CiAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7CiAgICAgICAgbGluZS1oZWlnaHQ6MjBweDsKICAgICAgICBvcGFjaXR5OjE7CiAgICAgICAgcGFkZGluZzoxMHB4OwogICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7CiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtaGlkZS5uZy1oaWRlLWFkZCwKICAgICAgLmFuaW1hdGUtaGlkZS5uZy1oaWRlLXJlbW92ZSB7CiAgICAgICAgZGlzcGxheTpibG9jayFpbXBvcnRhbnQ7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLWhpZGUubmctaGlkZSB7CiAgICAgICAgbGluZS1oZWlnaHQ6MDsKICAgICAgICBvcGFjaXR5OjA7CiAgICAgICAgcGFkZGluZzowIDEwcHg7CiAgICAgIH0KCiAgICAgIC5jaGVjay1lbGVtZW50IHsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjazsKICAgICAgICBiYWNrZ3JvdW5kOndoaXRlOwogICAgICB9CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY2VuYXJpby5qcyI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAuY2hlY2stZWxlbWVudDpmaXJzdDpoaWRkZW4nKS5jb3VudCgpKS50b0VxdWFsKDEpOwogICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgLmNoZWNrLWVsZW1lbnQ6bGFzdDp2aXNpYmxlJykuY291bnQoKSkudG9FcXVhbCgxKTsKCiAgICAgICAgIGlucHV0KCdjaGVja2VkJykuY2hlY2soKTsKCiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAuY2hlY2stZWxlbWVudDpmaXJzdDp2aXNpYmxlJykuY291bnQoKSkudG9FcXVhbCgxKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIC5jaGVjay1lbGVtZW50Omxhc3Q6aGlkZGVuJykuY291bnQoKSkudG9FcXVhbCgxKTsKICAgICAgIH0pOwogICAgPC9maWxlPgogIDwvZXhhbXBsZT4KICovCnZhciBuZ0hpZGVEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHsKICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nSGlkZSwgZnVuY3Rpb24gbmdIaWRlV2F0Y2hBY3Rpb24odmFsdWUpewogICAgICAkYW5pbWF0ZVt0b0Jvb2xlYW4odmFsdWUpID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGVsZW1lbnQsICduZy1oaWRlJyk7CiAgICB9KTsKICB9Owp9XTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1N0eWxlCiAqIEByZXN0cmljdCBBQwogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ1N0eWxlYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzZXQgQ1NTIHN0eWxlIG9uIGFuIEhUTUwgZWxlbWVudCBjb25kaXRpb25hbGx5LgogKgogKiBAZWxlbWVudCBBTlkKICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N0eWxlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHdoaWNoIGV2YWxzIHRvIGFuCiAqICAgICAgb2JqZWN0IHdob3NlIGtleXMgYXJlIENTUyBzdHlsZSBuYW1lcyBhbmQgdmFsdWVzIGFyZSBjb3JyZXNwb25kaW5nIHZhbHVlcyBmb3IgdGhvc2UgQ1NTCiAqICAgICAga2V5cy4KICoKICogQGV4YW1wbGUKICAgPGV4YW1wbGU+CiAgICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgdmFsdWU9InNldCIgbmctY2xpY2s9Im15U3R5bGU9e2NvbG9yOidyZWQnfSI+CiAgICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgdmFsdWU9ImNsZWFyIiBuZy1jbGljaz0ibXlTdHlsZT17fSI+CiAgICAgICAgPGJyLz4KICAgICAgICA8c3BhbiBuZy1zdHlsZT0ibXlTdHlsZSI+U2FtcGxlIFRleHQ8L3NwYW4+CiAgICAgICAgPHByZT5teVN0eWxlPXt7bXlTdHlsZX19PC9wcmU+CiAgICAgPC9maWxlPgogICAgIDxmaWxlIG5hbWU9InN0eWxlLmNzcyI+CiAgICAgICBzcGFuIHsKICAgICAgICAgY29sb3I6IGJsYWNrOwogICAgICAgfQogICAgIDwvZmlsZT4KICAgICA8ZmlsZSBuYW1lPSJzY2VuYXJpby5qcyI+CiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN0eWxlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuJykuY3NzKCdjb2xvcicpKS50b0JlKCdyZ2IoMCwgMCwgMCknKTsKICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgOmJ1dHRvblt2YWx1ZT1zZXRdJykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW4nKS5jc3MoJ2NvbG9yJykpLnRvQmUoJ3JnYigyNTUsIDAsIDApJyk7CiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDpidXR0b25bdmFsdWU9Y2xlYXJdJykuY2xpY2soKTsKICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW4nKS5jc3MoJ2NvbG9yJykpLnRvQmUoJ3JnYigwLCAwLCAwKScpOwogICAgICAgfSk7CiAgICAgPC9maWxlPgogICA8L2V4YW1wbGU+CiAqLwp2YXIgbmdTdHlsZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7CiAgc2NvcGUuJHdhdGNoKGF0dHIubmdTdHlsZSwgZnVuY3Rpb24gbmdTdHlsZVdhdGNoQWN0aW9uKG5ld1N0eWxlcywgb2xkU3R5bGVzKSB7CiAgICBpZiAob2xkU3R5bGVzICYmIChuZXdTdHlsZXMgIT09IG9sZFN0eWxlcykpIHsKICAgICAgZm9yRWFjaChvbGRTdHlsZXMsIGZ1bmN0aW9uKHZhbCwgc3R5bGUpIHsgZWxlbWVudC5jc3Moc3R5bGUsICcnKTt9KTsKICAgIH0KICAgIGlmIChuZXdTdHlsZXMpIGVsZW1lbnQuY3NzKG5ld1N0eWxlcyk7CiAgfSwgdHJ1ZSk7Cn0pOwoKLyoqCiAqIEBuZ2RvYyBkaXJlY3RpdmUKICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nU3dpdGNoCiAqIEByZXN0cmljdCBFQQogKgogKiBAZGVzY3JpcHRpb24KICogVGhlIGBuZ1N3aXRjaGAgZGlyZWN0aXZlIGlzIHVzZWQgdG8gY29uZGl0aW9uYWxseSBzd2FwIERPTSBzdHJ1Y3R1cmUgb24geW91ciB0ZW1wbGF0ZSBiYXNlZCBvbiBhIHNjb3BlIGV4cHJlc3Npb24uCiAqIEVsZW1lbnRzIHdpdGhpbiBgbmdTd2l0Y2hgIGJ1dCB3aXRob3V0IGBuZ1N3aXRjaFdoZW5gIG9yIGBuZ1N3aXRjaERlZmF1bHRgIGRpcmVjdGl2ZXMgd2lsbCBiZSBwcmVzZXJ2ZWQgYXQgdGhlIGxvY2F0aW9uCiAqIGFzIHNwZWNpZmllZCBpbiB0aGUgdGVtcGxhdGUuCiAqCiAqIFRoZSBkaXJlY3RpdmUgaXRzZWxmIHdvcmtzIHNpbWlsYXIgdG8gbmdJbmNsdWRlLCBob3dldmVyLCBpbnN0ZWFkIG9mIGRvd25sb2FkaW5nIHRlbXBsYXRlIGNvZGUgKG9yIGxvYWRpbmcgaXQKICogZnJvbSB0aGUgdGVtcGxhdGUgY2FjaGUpLCBgbmdTd2l0Y2hgIHNpbXBseSBjaG9zZXMgb25lIG9mIHRoZSBuZXN0ZWQgZWxlbWVudHMgYW5kIG1ha2VzIGl0IHZpc2libGUgYmFzZWQgb24gd2hpY2ggZWxlbWVudAogKiBtYXRjaGVzIHRoZSB2YWx1ZSBvYnRhaW5lZCBmcm9tIHRoZSBldmFsdWF0ZWQgZXhwcmVzc2lvbi4gSW4gb3RoZXIgd29yZHMsIHlvdSBkZWZpbmUgYSBjb250YWluZXIgZWxlbWVudAogKiAod2hlcmUgeW91IHBsYWNlIHRoZSBkaXJlY3RpdmUpLCBwbGFjZSBhbiBleHByZXNzaW9uIG9uIHRoZSAqKmBvbj0iLi4uImAgYXR0cmlidXRlKioKICogKG9yIHRoZSAqKmBuZy1zd2l0Y2g9Ii4uLiJgIGF0dHJpYnV0ZSoqKSwgZGVmaW5lIGFueSBpbm5lciBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGRpcmVjdGl2ZSBhbmQgcGxhY2UKICogYSB3aGVuIGF0dHJpYnV0ZSBwZXIgZWxlbWVudC4gVGhlIHdoZW4gYXR0cmlidXRlIGlzIHVzZWQgdG8gaW5mb3JtIG5nU3dpdGNoIHdoaWNoIGVsZW1lbnQgdG8gZGlzcGxheSB3aGVuIHRoZSBvbgogKiBleHByZXNzaW9uIGlzIGV2YWx1YXRlZC4gSWYgYSBtYXRjaGluZyBleHByZXNzaW9uIGlzIG5vdCBmb3VuZCB2aWEgYSB3aGVuIGF0dHJpYnV0ZSB0aGVuIGFuIGVsZW1lbnQgd2l0aCB0aGUgZGVmYXVsdAogKiBhdHRyaWJ1dGUgaXMgZGlzcGxheWVkLgogKgogKiA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1pbmZvIj4KICogQmUgYXdhcmUgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0IGNhbm5vdCBiZSBleHByZXNzaW9ucy4gVGhleSBhcmUgaW50ZXJwcmV0ZWQKICogYXMgbGl0ZXJhbCBzdHJpbmcgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QuCiAqIEZvciBleGFtcGxlLCAqKmBuZy1zd2l0Y2gtd2hlbj0ic29tZVZhbCJgKiogd2lsbCBtYXRjaCBhZ2FpbnN0IHRoZSBzdHJpbmcgYCJzb21lVmFsImAgbm90IGFnYWluc3QgdGhlCiAqIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIGAkc2NvcGUuc29tZVZhbGAuCiAqIDwvZGl2PgoKICogQGFuaW1hdGlvbnMKICogZW50ZXIgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIHRoZSBtYXRjaGVkIGNoaWxkIGVsZW1lbnQgaXMgcGxhY2VkIGluc2lkZSB0aGUgY29udGFpbmVyCiAqIGxlYXZlIC0gaGFwcGVucyBqdXN0IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIGp1c3QgYmVmb3JlIHRoZSBmb3JtZXIgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NCiAqCiAqIEB1c2FnZQogKiA8QU5ZIG5nLXN3aXRjaD0iZXhwcmVzc2lvbiI+CiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj0ibWF0Y2hWYWx1ZTEiPi4uLjwvQU5ZPgogKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49Im1hdGNoVmFsdWUyIj4uLi48L0FOWT4KICogICA8QU5ZIG5nLXN3aXRjaC1kZWZhdWx0Pi4uLjwvQU5ZPgogKiA8L0FOWT4KICoKICoKICogQHNjb3BlCiAqIEBwcmlvcml0eSA4MDAKICogQHBhcmFtIHsqfSBuZ1N3aXRjaHxvbiBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QgPHR0Pm5nLXN3aXRjaC13aGVuPC90dD4uCiAqIEBwYXJhbURlc2NyaXB0aW9uCiAqIE9uIGNoaWxkIGVsZW1lbnRzIGFkZDoKICoKICogKiBgbmdTd2l0Y2hXaGVuYDogdGhlIGNhc2Ugc3RhdGVtZW50IHRvIG1hdGNoIGFnYWluc3QuIElmIG1hdGNoIHRoZW4gdGhpcwogKiAgIGNhc2Ugd2lsbCBiZSBkaXNwbGF5ZWQuIElmIHRoZSBzYW1lIG1hdGNoIGFwcGVhcnMgbXVsdGlwbGUgdGltZXMsIGFsbCB0aGUKICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC4KICogKiBgbmdTd2l0Y2hEZWZhdWx0YDogdGhlIGRlZmF1bHQgY2FzZSB3aGVuIG5vIG90aGVyIGNhc2UgbWF0Y2guIElmIHRoZXJlCiAqICAgYXJlIG11bHRpcGxlIGRlZmF1bHQgY2FzZXMsIGFsbCBvZiB0aGVtIHdpbGwgYmUgZGlzcGxheWVkIHdoZW4gbm8gb3RoZXIKICogICBjYXNlIG1hdGNoLgogKgogKgogKiBAZXhhbXBsZQogIDxleGFtcGxlIGFuaW1hdGlvbnM9InRydWUiPgogICAgPGZpbGUgbmFtZT0iaW5kZXguaHRtbCI+CiAgICAgIDxkaXYgbmctY29udHJvbGxlcj0iQ3RybCI+CiAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD0ic2VsZWN0aW9uIiBuZy1vcHRpb25zPSJpdGVtIGZvciBpdGVtIGluIGl0ZW1zIj4KICAgICAgICA8L3NlbGVjdD4KICAgICAgICA8dHQ+c2VsZWN0aW9uPXt7c2VsZWN0aW9ufX08L3R0PgogICAgICAgIDxoci8+CiAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZS1zd2l0Y2gtY29udGFpbmVyIgogICAgICAgICAgbmctc3dpdGNoIG9uPSJzZWxlY3Rpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbmltYXRlLXN3aXRjaCIgbmctc3dpdGNoLXdoZW49InNldHRpbmdzIj5TZXR0aW5ncyBEaXY8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZS1zd2l0Y2giIG5nLXN3aXRjaC13aGVuPSJob21lIj5Ib21lIFNwYW48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYW5pbWF0ZS1zd2l0Y2giIG5nLXN3aXRjaC1kZWZhdWx0PmRlZmF1bHQ8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY3JpcHQuanMiPgogICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkgewogICAgICAgICRzY29wZS5pdGVtcyA9IFsnc2V0dGluZ3MnLCAnaG9tZScsICdvdGhlciddOwogICAgICAgICRzY29wZS5zZWxlY3Rpb24gPSAkc2NvcGUuaXRlbXNbMF07CiAgICAgIH0KICAgIDwvZmlsZT4KICAgIDxmaWxlIG5hbWU9ImFuaW1hdGlvbnMuY3NzIj4KICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciB7CiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7CiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrOwogICAgICAgIGhlaWdodDo0MHB4OwogICAgICAgIG92ZXJmbG93OmhpZGRlbjsKICAgICAgfQoKICAgICAgLmFuaW1hdGUtc3dpdGNoIHsKICAgICAgICBwYWRkaW5nOjEwcHg7CiAgICAgIH0KCiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1hbmltYXRlIHsKICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41czsKICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7CgogICAgICAgIHBvc2l0aW9uOmFic29sdXRlOwogICAgICAgIHRvcDowOwogICAgICAgIGxlZnQ6MDsKICAgICAgICByaWdodDowOwogICAgICAgIGJvdHRvbTowOwogICAgICB9CgogICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLAogICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIgewogICAgICAgIHRvcDotNTBweDsKICAgICAgfQogICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUsCiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUgewogICAgICAgIHRvcDowOwogICAgICB9CiAgICA8L2ZpbGU+CiAgICA8ZmlsZSBuYW1lPSJzY2VuYXJpby5qcyI+CiAgICAgIGl0KCdzaG91bGQgc3RhcnQgaW4gc2V0dGluZ3MnLCBmdW5jdGlvbigpIHsKICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLXN3aXRjaF0nKS50ZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pOwogICAgICB9KTsKICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gaG9tZScsIGZ1bmN0aW9uKCkgewogICAgICAgIHNlbGVjdCgnc2VsZWN0aW9uJykub3B0aW9uKCdob21lJyk7CiAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1zd2l0Y2hdJykudGV4dCgpKS50b01hdGNoKC9Ib21lIFNwYW4vKTsKICAgICAgfSk7CiAgICAgIGl0KCdzaG91bGQgc2VsZWN0IGRlZmF1bHQnLCBmdW5jdGlvbigpIHsKICAgICAgICBzZWxlY3QoJ3NlbGVjdGlvbicpLm9wdGlvbignb3RoZXInKTsKICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLXN3aXRjaF0nKS50ZXh0KCkpLnRvTWF0Y2goL2RlZmF1bHQvKTsKICAgICAgfSk7CiAgICA8L2ZpbGU+CiAgPC9leGFtcGxlPgogKi8KdmFyIG5nU3dpdGNoRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRUEnLAogICAgcmVxdWlyZTogJ25nU3dpdGNoJywKCiAgICAvLyBhc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGUKICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24gbmdTd2l0Y2hDb250cm9sbGVyKCkgewogICAgIHRoaXMuY2FzZXMgPSB7fTsKICAgIH1dLAogICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nU3dpdGNoQ29udHJvbGxlcikgewogICAgICB2YXIgd2F0Y2hFeHByID0gYXR0ci5uZ1N3aXRjaCB8fCBhdHRyLm9uLAogICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlcywKICAgICAgICAgIHNlbGVjdGVkRWxlbWVudHMsCiAgICAgICAgICBzZWxlY3RlZFNjb3BlcyA9IFtdOwoKICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgZnVuY3Rpb24gbmdTd2l0Y2hXYXRjaEFjdGlvbih2YWx1ZSkgewogICAgICAgIGZvciAodmFyIGk9IDAsIGlpPXNlbGVjdGVkU2NvcGVzLmxlbmd0aDsgaTxpaTsgaSsrKSB7CiAgICAgICAgICBzZWxlY3RlZFNjb3Blc1tpXS4kZGVzdHJveSgpOwogICAgICAgICAgJGFuaW1hdGUubGVhdmUoc2VsZWN0ZWRFbGVtZW50c1tpXSk7CiAgICAgICAgfQoKICAgICAgICBzZWxlY3RlZEVsZW1lbnRzID0gW107CiAgICAgICAgc2VsZWN0ZWRTY29wZXMgPSBbXTsKCiAgICAgICAgaWYgKChzZWxlY3RlZFRyYW5zY2x1ZGVzID0gbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWychJyArIHZhbHVlXSB8fCBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJz8nXSkpIHsKICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHIuY2hhbmdlKTsKICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRUcmFuc2NsdWRlcywgZnVuY3Rpb24oc2VsZWN0ZWRUcmFuc2NsdWRlKSB7CiAgICAgICAgICAgIHZhciBzZWxlY3RlZFNjb3BlID0gc2NvcGUuJG5ldygpOwogICAgICAgICAgICBzZWxlY3RlZFNjb3Blcy5wdXNoKHNlbGVjdGVkU2NvcGUpOwogICAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGUudHJhbnNjbHVkZShzZWxlY3RlZFNjb3BlLCBmdW5jdGlvbihjYXNlRWxlbWVudCkgewogICAgICAgICAgICAgIHZhciBhbmNob3IgPSBzZWxlY3RlZFRyYW5zY2x1ZGUuZWxlbWVudDsKCiAgICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5wdXNoKGNhc2VFbGVtZW50KTsKICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjYXNlRWxlbWVudCwgYW5jaG9yLnBhcmVudCgpLCBhbmNob3IpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfTsKfV07Cgp2YXIgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIHRyYW5zY2x1ZGU6ICdlbGVtZW50JywKICBwcmlvcml0eTogODAwLAogIHJlcXVpcmU6ICdebmdTd2l0Y2gnLAogIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCwgJHRyYW5zY2x1ZGUpIHsKICAgIGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXSA9IChjdHJsLmNhc2VzWychJyArIGF0dHJzLm5nU3dpdGNoV2hlbl0gfHwgW10pOwogICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dLnB1c2goeyB0cmFuc2NsdWRlOiAkdHJhbnNjbHVkZSwgZWxlbWVudDogZWxlbWVudCB9KTsKICB9Cn0pOwoKdmFyIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsKICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsCiAgcHJpb3JpdHk6IDgwMCwKICByZXF1aXJlOiAnXm5nU3dpdGNoJywKICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHsKICAgIGN0cmwuY2FzZXNbJz8nXSA9IChjdHJsLmNhc2VzWyc/J10gfHwgW10pOwogICAgY3RybC5jYXNlc1snPyddLnB1c2goeyB0cmFuc2NsdWRlOiAkdHJhbnNjbHVkZSwgZWxlbWVudDogZWxlbWVudCB9KTsKICAgfQp9KTsKCi8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1RyYW5zY2x1ZGUKICogQHJlc3RyaWN0IEFDCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBEaXJlY3RpdmUgdGhhdCBtYXJrcyB0aGUgaW5zZXJ0aW9uIHBvaW50IGZvciB0aGUgdHJhbnNjbHVkZWQgRE9NIG9mIHRoZSBuZWFyZXN0IHBhcmVudCBkaXJlY3RpdmUgdGhhdCB1c2VzIHRyYW5zY2x1c2lvbi4KICoKICogQW55IGV4aXN0aW5nIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgdGhhdCB0aGlzIGRpcmVjdGl2ZSBpcyBwbGFjZWQgb24gd2lsbCBiZSByZW1vdmVkIGJlZm9yZSB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpcyBpbnNlcnRlZC4KICoKICogQGVsZW1lbnQgQU5ZCiAqCiAqIEBleGFtcGxlCiAgIDxkb2M6ZXhhbXBsZSBtb2R1bGU9InRyYW5zY2x1ZGUiPgogICAgIDxkb2M6c291cmNlPgogICAgICAgPHNjcmlwdD4KICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHsKICAgICAgICAgICAkc2NvcGUudGl0bGUgPSAnTG9yZW0gSXBzdW0nOwogICAgICAgICAgICRzY29wZS50ZXh0ID0gJ05lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCBxdWkgZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yLi4uJzsKICAgICAgICAgfQoKICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3RyYW5zY2x1ZGUnLCBbXSkKICAgICAgICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpewogICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSwKICAgICAgICAgICAgICAgc2NvcGU6IHsgdGl0bGU6J0AnIH0sCiAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgYmxhY2s7Ij4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6IGdyYXkiPnt7dGl0bGV9fTwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICAgICAgIH07CiAgICAgICAgIH0pOwogICAgICAgPC9zY3JpcHQ+CiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9IkN0cmwiPgogICAgICAgICA8aW5wdXQgbmctbW9kZWw9InRpdGxlIj48YnI+CiAgICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD0idGV4dCI+PC90ZXh0YXJlYT4gPGJyLz4KICAgICAgICAgPHBhbmUgdGl0bGU9Int7dGl0bGV9fSI+e3t0ZXh0fX08L3BhbmU+CiAgICAgICA8L2Rpdj4KICAgICA8L2RvYzpzb3VyY2U+CiAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICBpdCgnc2hvdWxkIGhhdmUgdHJhbnNjbHVkZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGlucHV0KCd0aXRsZScpLmVudGVyKCdUSVRMRScpOwogICAgICAgICAgaW5wdXQoJ3RleHQnKS5lbnRlcignVEVYVCcpOwogICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RpdGxlJykpLnRvRXF1YWwoJ1RJVExFJyk7CiAgICAgICAgICBleHBlY3QoYmluZGluZygndGV4dCcpKS50b0VxdWFsKCdURVhUJyk7CiAgICAgICAgfSk7CiAgICAgPC9kb2M6c2NlbmFyaW8+CiAgIDwvZG9jOmV4YW1wbGU+CiAqCiAqLwp2YXIgbmdUcmFuc2NsdWRlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoewogIGNvbnRyb2xsZXI6IFsnJGVsZW1lbnQnLCAnJHRyYW5zY2x1ZGUnLCBmdW5jdGlvbigkZWxlbWVudCwgJHRyYW5zY2x1ZGUpIHsKICAgIGlmICghJHRyYW5zY2x1ZGUpIHsKICAgICAgdGhyb3cgbWluRXJyKCduZ1RyYW5zY2x1ZGUnKSgnb3JwaGFuJywKICAgICAgICAgICdJbGxlZ2FsIHVzZSBvZiBuZ1RyYW5zY2x1ZGUgZGlyZWN0aXZlIGluIHRoZSB0ZW1wbGF0ZSEgJyArCiAgICAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIGZvdW5kLiAnICsKICAgICAgICAgICdFbGVtZW50OiB7MH0nLAogICAgICAgICAgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTsKICAgIH0KCiAgICAvLyByZW1lbWJlciB0aGUgdHJhbnNjbHVzaW9uIGZuIGJ1dCBjYWxsIGl0IGR1cmluZyBsaW5raW5nIHNvIHRoYXQgd2UgZG9uJ3QgcHJvY2VzcyB0cmFuc2NsdXNpb24gYmVmb3JlIGRpcmVjdGl2ZXMgb24KICAgIC8vIHRoZSBwYXJlbnQgZWxlbWVudCBldmVuIHdoZW4gdGhlIHRyYW5zY2x1c2lvbiByZXBsYWNlcyB0aGUgY3VycmVudCBlbGVtZW50LiAod2UgY2FuJ3QgdXNlIHByaW9yaXR5IGhlcmUgYmVjYXVzZQogICAgLy8gdGhhdCBhcHBsaWVzIG9ubHkgdG8gY29tcGlsZSBmbnMgYW5kIG5vdCBjb250cm9sbGVycwogICAgdGhpcy4kdHJhbnNjbHVkZSA9ICR0cmFuc2NsdWRlOwogIH1dLAoKICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsIGNvbnRyb2xsZXIpIHsKICAgIGNvbnRyb2xsZXIuJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUpIHsKICAgICAgJGVsZW1lbnQuZW1wdHkoKTsKICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTsKICAgIH0pOwogIH0KfSk7CgovKioKICogQG5nZG9jIGRpcmVjdGl2ZQogKiBAbmFtZSBuZy5kaXJlY3RpdmU6c2NyaXB0CiAqIEByZXN0cmljdCBFCiAqCiAqIEBkZXNjcmlwdGlvbgogKiBMb2FkIHRoZSBjb250ZW50IG9mIGEgYDxzY3JpcHQ+YCBlbGVtZW50IGludG8ge0BsaW5rIGFwaS9uZy4kdGVtcGxhdGVDYWNoZSBgJHRlbXBsYXRlQ2FjaGVgfSwgc28gdGhhdCB0aGUKICogdGVtcGxhdGUgY2FuIGJlIHVzZWQgYnkge0BsaW5rIGFwaS9uZy5kaXJlY3RpdmU6bmdJbmNsdWRlIGBuZ0luY2x1ZGVgfSwKICoge0BsaW5rIGFwaS9uZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgYG5nVmlld2B9LCBvciB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LiBUaGUgdHlwZSBvZiB0aGUKICogYDxzY3JpcHQ+YCBlbGVtZW50IG11c3QgYmUgc3BlY2lmaWVkIGFzIGB0ZXh0L25nLXRlbXBsYXRlYCwgYW5kIGEgY2FjaGUgbmFtZSBmb3IgdGhlIHRlbXBsYXRlIG11c3QgYmUKICogYXNzaWduZWQgdGhyb3VnaCB0aGUgZWxlbWVudCdzIGBpZGAsIHdoaWNoIGNhbiB0aGVuIGJlIHVzZWQgYXMgYSBkaXJlY3RpdmUncyBgdGVtcGxhdGVVcmxgLgogKgogKiBAcGFyYW0geyd0ZXh0L25nLXRlbXBsYXRlJ30gdHlwZSBNdXN0IGJlIHNldCB0byBgJ3RleHQvbmctdGVtcGxhdGUnYC4KICogQHBhcmFtIHtzdHJpbmd9IGlkIENhY2hlIG5hbWUgb2YgdGhlIHRlbXBsYXRlLgogKgogKiBAZXhhbXBsZQogIDxkb2M6ZXhhbXBsZT4KICAgIDxkb2M6c291cmNlPgogICAgICA8c2NyaXB0IHR5cGU9InRleHQvbmctdGVtcGxhdGUiIGlkPSIvdHBsLmh0bWwiPgogICAgICAgIENvbnRlbnQgb2YgdGhlIHRlbXBsYXRlLgogICAgICA8L3NjcmlwdD4KCiAgICAgIDxhIG5nLWNsaWNrPSJjdXJyZW50VHBsPScvdHBsLmh0bWwnIiBpZD0idHBsLWxpbmsiPkxvYWQgaW5saW5lZCB0ZW1wbGF0ZTwvYT4KICAgICAgPGRpdiBpZD0idHBsLWNvbnRlbnQiIG5nLWluY2x1ZGUgc3JjPSJjdXJyZW50VHBsIj48L2Rpdj4KICAgIDwvZG9jOnNvdXJjZT4KICAgIDxkb2M6c2NlbmFyaW8+CiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZSBkZWZpbmVkIGluc2lkZSBzY3JpcHQgdGFnJywgZnVuY3Rpb24oKSB7CiAgICAgICAgZWxlbWVudCgnI3RwbC1saW5rJykuY2xpY2soKTsKICAgICAgICBleHBlY3QoZWxlbWVudCgnI3RwbC1jb250ZW50JykudGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRoZSB0ZW1wbGF0ZS8pOwogICAgICB9KTsKICAgIDwvZG9jOnNjZW5hcmlvPgogIDwvZG9jOmV4YW1wbGU+CiAqLwp2YXIgc2NyaXB0RGlyZWN0aXZlID0gWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7CiAgcmV0dXJuIHsKICAgIHJlc3RyaWN0OiAnRScsCiAgICB0ZXJtaW5hbDogdHJ1ZSwKICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgaWYgKGF0dHIudHlwZSA9PSAndGV4dC9uZy10ZW1wbGF0ZScpIHsKICAgICAgICB2YXIgdGVtcGxhdGVVcmwgPSBhdHRyLmlkLAogICAgICAgICAgICAvLyBJRSBpcyBub3QgY29uc2lzdGVudCwgaW4gc2NyaXB0cyB3ZSBoYXZlIHRvIHJlYWQgLnRleHQgYnV0IGluIG90aGVyIG5vZGVzIHdlIGhhdmUgdG8gcmVhZCAudGV4dENvbnRlbnQKICAgICAgICAgICAgdGV4dCA9IGVsZW1lbnRbMF0udGV4dDsKCiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0KHRlbXBsYXRlVXJsLCB0ZXh0KTsKICAgICAgfQogICAgfQogIH07Cn1dOwoKdmFyIG5nT3B0aW9uc01pbkVyciA9IG1pbkVycignbmdPcHRpb25zJyk7Ci8qKgogKiBAbmdkb2MgZGlyZWN0aXZlCiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpzZWxlY3QKICogQHJlc3RyaWN0IEUKICoKICogQGRlc2NyaXB0aW9uCiAqIEhUTUwgYFNFTEVDVGAgZWxlbWVudCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLgogKgogKiAjIGBuZ09wdGlvbnNgCiAqCiAqIFRoZSBgbmdPcHRpb25zYCBhdHRyaWJ1dGUgY2FuIGJlIHVzZWQgdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgYSBsaXN0IG9mIGA8b3B0aW9uPmAKICogZWxlbWVudHMgZm9yIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQgdXNpbmcgdGhlIGFycmF5IG9yIG9iamVjdCBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZQogKiBgbmdPcHRpb25zYCBjb21wcmVoZW5zaW9uX2V4cHJlc3Npb24uCiAqCiAqIFdoZW4gYW4gaXRlbSBpbiB0aGUgYDxzZWxlY3Q+YCBtZW51IGlzIHNlbGVjdGVkLCB0aGUgYXJyYXkgZWxlbWVudCBvciBvYmplY3QgcHJvcGVydHkKICogcmVwcmVzZW50ZWQgYnkgdGhlIHNlbGVjdGVkIG9wdGlvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGAKICogZGlyZWN0aXZlLgogKgogKiBPcHRpb25hbGx5LCBhIHNpbmdsZSBoYXJkLWNvZGVkIGA8b3B0aW9uPmAgZWxlbWVudCwgd2l0aCB0aGUgdmFsdWUgc2V0IHRvIGFuIGVtcHR5IHN0cmluZywgY2FuCiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgIm5vdCBzZWxlY3RlZCIKICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi4KICoKICogTm90ZTogYG5nT3B0aW9uc2AgcHJvdmlkZXMgaXRlcmF0b3IgZmFjaWxpdHkgZm9yIGA8b3B0aW9uPmAgZWxlbWVudCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkCiAqIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IHdoZW4geW91IHdhbnQgdGhlCiAqIGBzZWxlY3RgIG1vZGVsIHRvIGJlIGJvdW5kIHRvIGEgbm9uLXN0cmluZyB2YWx1ZS4gVGhpcyBpcyBiZWNhdXNlIGFuIG9wdGlvbiBlbGVtZW50IGNhbiBvbmx5CiAqIGJlIGJvdW5kIHRvIHN0cmluZyB2YWx1ZXMgYXQgcHJlc2VudC4KICoKICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLgogKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuCiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgVGhlIGNvbnRyb2wgaXMgY29uc2lkZXJlZCB2YWxpZCBvbmx5IGlmIHZhbHVlIGlzIGVudGVyZWQuCiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0bwogKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZgogKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS4KICogQHBhcmFtIHtjb21wcmVoZW5zaW9uX2V4cHJlc3Npb249fSBuZ09wdGlvbnMgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6CiAqCiAqICAgKiBmb3IgYXJyYXkgZGF0YSBzb3VyY2VzOgogKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAKICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgCiAqICAgICAqIGBsYWJlbGAgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YAogKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYAogKiAgICogZm9yIG9iamVjdCBkYXRhIHNvdXJjZXM6CiAqICAgICAqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YAogKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAKICogICAgICAgICAqKmBmb3JgIGAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgCiAqCiAqIFdoZXJlOgogKgogKiAgICogYGFycmF5YCAvIGBvYmplY3RgOiBhbiBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBhcnJheSAvIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuCiAqICAgKiBgdmFsdWVgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGVhY2ggaXRlbSBpbiB0aGUgYGFycmF5YCBvciBlYWNoIHByb3BlcnR5IHZhbHVlCiAqICAgICAgb2YgYG9iamVjdGAgZHVyaW5nIGl0ZXJhdGlvbi4KICogICAqIGBrZXlgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGEgcHJvcGVydHkgbmFtZSBpbiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLgogKiAgICogYGxhYmVsYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB0aGUgbGFiZWwgZm9yIGA8b3B0aW9uPmAgZWxlbWVudC4gVGhlCiAqICAgICBgZXhwcmVzc2lvbmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGUgYHZhbHVlYCB2YXJpYWJsZSAoZS5nLiBgdmFsdWUucHJvcGVydHlOYW1lYCkuCiAqICAgKiBgc2VsZWN0YDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgb2YgdGhlIHBhcmVudCBgPHNlbGVjdD5gCiAqICAgICAgZWxlbWVudC4gSWYgbm90IHNwZWNpZmllZCwgYHNlbGVjdGAgZXhwcmVzc2lvbiB3aWxsIGRlZmF1bHQgdG8gYHZhbHVlYC4KICogICAqIGBncm91cGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBncm91cCBvcHRpb25zIHVzaW5nIHRoZSBgPG9wdGdyb3VwPmAKICogICAgICBET00gZWxlbWVudC4KICogICAqIGB0cmFja2V4cHJgOiBVc2VkIHdoZW4gd29ya2luZyB3aXRoIGFuIGFycmF5IG9mIG9iamVjdHMuIFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUKICogICAgICB1c2VkIHRvIGlkZW50aWZ5IHRoZSBvYmplY3RzIGluIHRoZSBhcnJheS4gVGhlIGB0cmFja2V4cHJgIHdpbGwgbW9zdCBsaWtlbHkgcmVmZXIgdG8gdGhlCiAqICAgICBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4KICoKICogQGV4YW1wbGUKICAgIDxkb2M6ZXhhbXBsZT4KICAgICAgPGRvYzpzb3VyY2U+CiAgICAgICAgPHNjcmlwdD4KICAgICAgICBmdW5jdGlvbiBNeUNudHJsKCRzY29wZSkgewogICAgICAgICAgJHNjb3BlLmNvbG9ycyA9IFsKICAgICAgICAgICAge25hbWU6J2JsYWNrJywgc2hhZGU6J2RhcmsnfSwKICAgICAgICAgICAge25hbWU6J3doaXRlJywgc2hhZGU6J2xpZ2h0J30sCiAgICAgICAgICAgIHtuYW1lOidyZWQnLCBzaGFkZTonZGFyayd9LAogICAgICAgICAgICB7bmFtZTonYmx1ZScsIHNoYWRlOidkYXJrJ30sCiAgICAgICAgICAgIHtuYW1lOid5ZWxsb3cnLCBzaGFkZTonbGlnaHQnfQogICAgICAgICAgXTsKICAgICAgICAgICRzY29wZS5jb2xvciA9ICRzY29wZS5jb2xvcnNbMl07IC8vIHJlZAogICAgICAgIH0KICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9Ik15Q250cmwiPgogICAgICAgICAgPHVsPgogICAgICAgICAgICA8bGkgbmctcmVwZWF0PSJjb2xvciBpbiBjb2xvcnMiPgogICAgICAgICAgICAgIE5hbWU6IDxpbnB1dCBuZy1tb2RlbD0iY29sb3IubmFtZSI+CiAgICAgICAgICAgICAgWzxhIGhyZWYgbmctY2xpY2s9ImNvbG9ycy5zcGxpY2UoJGluZGV4LCAxKSI+WDwvYT5dCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICBbPGEgaHJlZiBuZy1jbGljaz0iY29sb3JzLnB1c2goe30pIj5hZGQ8L2E+XQogICAgICAgICAgICA8L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICAgIDxoci8+CiAgICAgICAgICBDb2xvciAobnVsbCBub3QgYWxsb3dlZCk6CiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJjb2xvciIgbmctb3B0aW9ucz0iYy5uYW1lIGZvciBjIGluIGNvbG9ycyI+PC9zZWxlY3Q+PGJyPgoKICAgICAgICAgIENvbG9yIChudWxsIGFsbG93ZWQpOgogICAgICAgICAgPHNwYW4gIGNsYXNzPSJudWxsYWJsZSI+CiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9ImNvbG9yIiBuZy1vcHRpb25zPSJjLm5hbWUgZm9yIGMgaW4gY29sb3JzIj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPi0tIGNob29zZSBjb2xvciAtLTwvb3B0aW9uPgogICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgIDwvc3Bhbj48YnIvPgoKICAgICAgICAgIENvbG9yIGdyb3VwZWQgYnkgc2hhZGU6CiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPSJjb2xvciIgbmctb3B0aW9ucz0iYy5uYW1lIGdyb3VwIGJ5IGMuc2hhZGUgZm9yIGMgaW4gY29sb3JzIj4KICAgICAgICAgIDwvc2VsZWN0Pjxici8+CgoKICAgICAgICAgIFNlbGVjdCA8YSBocmVmIG5nLWNsaWNrPSJjb2xvcj17bmFtZTonbm90IGluIGxpc3QnfSI+Ym9ndXM8L2E+Ljxicj4KICAgICAgICAgIDxoci8+CiAgICAgICAgICBDdXJyZW50bHkgc2VsZWN0ZWQ6IHt7IHtzZWxlY3RlZF9jb2xvcjpjb2xvcn0gIH19CiAgICAgICAgICA8ZGl2IHN0eWxlPSJib3JkZXI6c29saWQgMXB4IGJsYWNrOyBoZWlnaHQ6MjBweCIKICAgICAgICAgICAgICAgbmctc3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6Y29sb3IubmFtZX0iPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZG9jOnNvdXJjZT4KICAgICAgPGRvYzpzY2VuYXJpbz4KICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1vcHRpb25zJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpjb2xvcn0nKSkudG9NYXRjaCgncmVkJyk7CiAgICAgICAgICAgc2VsZWN0KCdjb2xvcicpLm9wdGlvbignMCcpOwogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6Y29sb3J9JykpLnRvTWF0Y2goJ2JsYWNrJyk7CiAgICAgICAgICAgdXNpbmcoJy5udWxsYWJsZScpLnNlbGVjdCgnY29sb3InKS5vcHRpb24oJycpOwogICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6Y29sb3J9JykpLnRvTWF0Y2goJ251bGwnKTsKICAgICAgICAgfSk7CiAgICAgIDwvZG9jOnNjZW5hcmlvPgogICAgPC9kb2M6ZXhhbXBsZT4KICovCgp2YXIgbmdPcHRpb25zRGlyZWN0aXZlID0gdmFsdWVGbih7IHRlcm1pbmFsOiB0cnVlIH0pOwovLyBqc2hpbnQgbWF4bGVuOiBmYWxzZQp2YXIgc2VsZWN0RGlyZWN0aXZlID0gWyckY29tcGlsZScsICckcGFyc2UnLCBmdW5jdGlvbigkY29tcGlsZSwgICAkcGFyc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIC8vMDAwMDExMTExMTExMTEwMDAwMDAwMDAwMDIyMjIyMjIyMjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMDAwMDAwMDAwMDAwMDA0NDQ0NDQ0NDQ0NDQ0NDQwMDAwMDAwMDA1NTU1NTU1NTU1NTU1NTUwMDAwMDAwNjY2NjY2NjY2NjY2NjY2MDAwMDAwMDAwMDAwMDAwNzc3Nzc3Nzc3NzAwMDAwMDAwMDAwMDAwMDAwMDA4ODg4ODg4ODg4CiAgdmFyIE5HX09QVElPTlNfUkVHRVhQID0gL15ccyooW1xzXFNdKz8pKD86XHMrYXNccysoW1xzXFNdKz8pKT8oPzpccytncm91cFxzK2J5XHMrKFtcc1xTXSs/KSk/XHMrZm9yXHMrKD86KFtcJFx3XVtcJFx3XSopfCg/OlwoXHMqKFtcJFx3XVtcJFx3XSopXHMqLFxzKihbXCRcd11bXCRcd10qKVxzKlwpKSlccytpblxzKyhbXHNcU10rPykoPzpccyt0cmFja1xzK2J5XHMrKFtcc1xTXSs/KSk/JC8sCiAgICAgIG51bGxNb2RlbEN0cmwgPSB7JHNldFZpZXdWYWx1ZTogbm9vcH07Ci8vIGpzaGludCBtYXhsZW46IDEwMAoKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdFJywKICAgIHJlcXVpcmU6IFsnc2VsZWN0JywgJz9uZ01vZGVsJ10sCiAgICBjb250cm9sbGVyOiBbJyRlbGVtZW50JywgJyRzY29wZScsICckYXR0cnMnLCBmdW5jdGlvbigkZWxlbWVudCwgJHNjb3BlLCAkYXR0cnMpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgICAgb3B0aW9uc01hcCA9IHt9LAogICAgICAgICAgbmdNb2RlbEN0cmwgPSBudWxsTW9kZWxDdHJsLAogICAgICAgICAgbnVsbE9wdGlvbiwKICAgICAgICAgIHVua25vd25PcHRpb247CgoKICAgICAgc2VsZi5kYXRhYm91bmQgPSAkYXR0cnMubmdNb2RlbDsKCgogICAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihuZ01vZGVsQ3RybF8sIG51bGxPcHRpb25fLCB1bmtub3duT3B0aW9uXykgewogICAgICAgIG5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmxfOwogICAgICAgIG51bGxPcHRpb24gPSBudWxsT3B0aW9uXzsKICAgICAgICB1bmtub3duT3B0aW9uID0gdW5rbm93bk9wdGlvbl87CiAgICAgIH07CgoKICAgICAgc2VsZi5hZGRPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkgewogICAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KHZhbHVlLCAnIm9wdGlvbiB2YWx1ZSInKTsKICAgICAgICBvcHRpb25zTWFwW3ZhbHVlXSA9IHRydWU7CgogICAgICAgIGlmIChuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID09IHZhbHVlKSB7CiAgICAgICAgICAkZWxlbWVudC52YWwodmFsdWUpOwogICAgICAgICAgaWYgKHVua25vd25PcHRpb24ucGFyZW50KCkpIHVua25vd25PcHRpb24ucmVtb3ZlKCk7CiAgICAgICAgfQogICAgICB9OwoKCiAgICAgIHNlbGYucmVtb3ZlT3B0aW9uID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBpZiAodGhpcy5oYXNPcHRpb24odmFsdWUpKSB7CiAgICAgICAgICBkZWxldGUgb3B0aW9uc01hcFt2YWx1ZV07CiAgICAgICAgICBpZiAobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA9PSB2YWx1ZSkgewogICAgICAgICAgICB0aGlzLnJlbmRlclVua25vd25PcHRpb24odmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKCgogICAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBmdW5jdGlvbih2YWwpIHsKICAgICAgICB2YXIgdW5rbm93blZhbCA9ICc/ICcgKyBoYXNoS2V5KHZhbCkgKyAnID8nOwogICAgICAgIHVua25vd25PcHRpb24udmFsKHVua25vd25WYWwpOwogICAgICAgICRlbGVtZW50LnByZXBlbmQodW5rbm93bk9wdGlvbik7CiAgICAgICAgJGVsZW1lbnQudmFsKHVua25vd25WYWwpOwogICAgICAgIHVua25vd25PcHRpb24ucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTsgLy8gbmVlZGVkIGZvciBJRQogICAgICB9OwoKCiAgICAgIHNlbGYuaGFzT3B0aW9uID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICByZXR1cm4gb3B0aW9uc01hcC5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSk7CiAgICAgIH07CgogICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkgewogICAgICAgIC8vIGRpc2FibGUgdW5rbm93biBvcHRpb24gc28gdGhhdCB3ZSBkb24ndCBkbyB3b3JrIHdoZW4gdGhlIHdob2xlIHNlbGVjdCBpcyBiZWluZyBkZXN0cm95ZWQKICAgICAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBub29wOwogICAgICB9KTsKICAgIH1dLAoKICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykgewogICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nCiAgICAgIGlmICghY3RybHNbMV0pIHJldHVybjsKCiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF0sCiAgICAgICAgICBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdLAogICAgICAgICAgbXVsdGlwbGUgPSBhdHRyLm11bHRpcGxlLAogICAgICAgICAgb3B0aW9uc0V4cCA9IGF0dHIubmdPcHRpb25zLAogICAgICAgICAgbnVsbE9wdGlvbiA9IGZhbHNlLCAvLyBpZiBmYWxzZSwgdXNlciB3aWxsIG5vdCBiZSBhYmxlIHRvIHNlbGVjdCBpdCAodXNlZCBieSBuZ09wdGlvbnMpCiAgICAgICAgICBlbXB0eU9wdGlvbiwKICAgICAgICAgIC8vIHdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoCiAgICAgICAgICAvLyB0byBjcmVhdGUgaXQgaW4gPHNlbGVjdD4gYW5kIElFIGJhcmZzIG90aGVyd2lzZS4KICAgICAgICAgIG9wdGlvblRlbXBsYXRlID0ganFMaXRlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKSwKICAgICAgICAgIG9wdEdyb3VwVGVtcGxhdGUgPWpxTGl0ZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpKSwKICAgICAgICAgIHVua25vd25PcHRpb24gPSBvcHRpb25UZW1wbGF0ZS5jbG9uZSgpOwoKICAgICAgLy8gZmluZCAibnVsbCIgb3B0aW9uCiAgICAgIGZvcih2YXIgaSA9IDAsIGNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbigpLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBpZiAoY2hpbGRyZW5baV0udmFsdWUgPT09ICcnKSB7CiAgICAgICAgICBlbXB0eU9wdGlvbiA9IG51bGxPcHRpb24gPSBjaGlsZHJlbi5lcShpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQoKICAgICAgc2VsZWN0Q3RybC5pbml0KG5nTW9kZWxDdHJsLCBudWxsT3B0aW9uLCB1bmtub3duT3B0aW9uKTsKCiAgICAgIC8vIHJlcXVpcmVkIHZhbGlkYXRvcgogICAgICBpZiAobXVsdGlwbGUpIHsKICAgICAgICBuZ01vZGVsQ3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICByZXR1cm4gIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA9PT0gMDsKICAgICAgICB9OwogICAgICB9CgogICAgICBpZiAob3B0aW9uc0V4cCkgc2V0dXBBc09wdGlvbnMoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsKTsKICAgICAgZWxzZSBpZiAobXVsdGlwbGUpIHNldHVwQXNNdWx0aXBsZShzY29wZSwgZWxlbWVudCwgbmdNb2RlbEN0cmwpOwogICAgICBlbHNlIHNldHVwQXNTaW5nbGUoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKTsKCgogICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgoKCiAgICAgIGZ1bmN0aW9uIHNldHVwQXNTaW5nbGUoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKSB7CiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIHZpZXdWYWx1ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7CgogICAgICAgICAgaWYgKHNlbGVjdEN0cmwuaGFzT3B0aW9uKHZpZXdWYWx1ZSkpIHsKICAgICAgICAgICAgaWYgKHVua25vd25PcHRpb24ucGFyZW50KCkpIHVua25vd25PcHRpb24ucmVtb3ZlKCk7CiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKHZpZXdWYWx1ZSk7CiAgICAgICAgICAgIGlmICh2aWV3VmFsdWUgPT09ICcnKSBlbXB0eU9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyB0byBtYWtlIElFOSBoYXBweQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZpZXdWYWx1ZSkgJiYgZW1wdHlPcHRpb24pIHsKICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LnZhbCgnJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW5kZXJVbmtub3duT3B0aW9uKHZpZXdWYWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBzZWxlY3RFbGVtZW50Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKHVua25vd25PcHRpb24ucGFyZW50KCkpIHVua25vd25PcHRpb24ucmVtb3ZlKCk7CiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoc2VsZWN0RWxlbWVudC52YWwoKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gc2V0dXBBc011bHRpcGxlKHNjb3BlLCBzZWxlY3RFbGVtZW50LCBjdHJsKSB7CiAgICAgICAgdmFyIGxhc3RWaWV3OwogICAgICAgIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGl0ZW1zID0gbmV3IEhhc2hNYXAoY3RybC4kdmlld1ZhbHVlKTsKICAgICAgICAgIGZvckVhY2goc2VsZWN0RWxlbWVudC5maW5kKCdvcHRpb24nKSwgZnVuY3Rpb24ob3B0aW9uKSB7CiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGlzRGVmaW5lZChpdGVtcy5nZXQob3B0aW9uLnZhbHVlKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICAvLyB3ZSBoYXZlIHRvIGRvIGl0IG9uIGVhY2ggd2F0Y2ggc2luY2UgbmdNb2RlbCB3YXRjaGVzIHJlZmVyZW5jZSwgYnV0CiAgICAgICAgLy8gd2UgbmVlZCB0byB3b3JrIG9mIGFuIGFycmF5LCBzbyB3ZSBuZWVkIHRvIHNlZSBpZiBhbnl0aGluZyB3YXMgaW5zZXJ0ZWQvcmVtb3ZlZAogICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBzZWxlY3RNdWx0aXBsZVdhdGNoKCkgewogICAgICAgICAgaWYgKCFlcXVhbHMobGFzdFZpZXcsIGN0cmwuJHZpZXdWYWx1ZSkpIHsKICAgICAgICAgICAgbGFzdFZpZXcgPSBjb3B5KGN0cmwuJHZpZXdWYWx1ZSk7CiAgICAgICAgICAgIGN0cmwuJHJlbmRlcigpOwogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBzZWxlY3RFbGVtZW50Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGFycmF5ID0gW107CiAgICAgICAgICAgIGZvckVhY2goc2VsZWN0RWxlbWVudC5maW5kKCdvcHRpb24nKSwgZnVuY3Rpb24ob3B0aW9uKSB7CiAgICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCkgewogICAgICAgICAgICAgICAgYXJyYXkucHVzaChvcHRpb24udmFsdWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShhcnJheSk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gc2V0dXBBc09wdGlvbnMoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGN0cmwpIHsKICAgICAgICB2YXIgbWF0Y2g7CgogICAgICAgIGlmICghIChtYXRjaCA9IG9wdGlvbnNFeHAubWF0Y2goTkdfT1BUSU9OU19SRUdFWFApKSkgewogICAgICAgICAgdGhyb3cgbmdPcHRpb25zTWluRXJyKCdpZXhwJywKICAgICAgICAgICAgIkV4cGVjdGVkIGV4cHJlc3Npb24gaW4gZm9ybSBvZiAiICsKICAgICAgICAgICAgIidfc2VsZWN0XyAoYXMgX2xhYmVsXyk/IGZvciAoX2tleV8sKT9fdmFsdWVfIGluIF9jb2xsZWN0aW9uXyciICsKICAgICAgICAgICAgIiBidXQgZ290ICd7MH0nLiBFbGVtZW50OiB7MX0iLAogICAgICAgICAgICBvcHRpb25zRXhwLCBzdGFydGluZ1RhZyhzZWxlY3RFbGVtZW50KSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgZGlzcGxheUZuID0gJHBhcnNlKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSwKICAgICAgICAgICAgdmFsdWVOYW1lID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNl0sCiAgICAgICAgICAgIGtleU5hbWUgPSBtYXRjaFs1XSwKICAgICAgICAgICAgZ3JvdXBCeUZuID0gJHBhcnNlKG1hdGNoWzNdIHx8ICcnKSwKICAgICAgICAgICAgdmFsdWVGbiA9ICRwYXJzZShtYXRjaFsyXSA/IG1hdGNoWzFdIDogdmFsdWVOYW1lKSwKICAgICAgICAgICAgdmFsdWVzRm4gPSAkcGFyc2UobWF0Y2hbN10pLAogICAgICAgICAgICB0cmFjayA9IG1hdGNoWzhdLAogICAgICAgICAgICB0cmFja0ZuID0gdHJhY2sgPyAkcGFyc2UobWF0Y2hbOF0pIDogbnVsbCwKICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBhcnJheSBvZiBhcnJheSBvZiBleGlzdGluZyBvcHRpb24gZ3JvdXBzIGluIERPTS4KICAgICAgICAgICAgLy8gV2UgdHJ5IHRvIHJldXNlIHRoZXNlIGlmIHBvc3NpYmxlCiAgICAgICAgICAgIC8vIC0gb3B0aW9uR3JvdXBzQ2FjaGVbMF0gaXMgdGhlIG9wdGlvbnMgd2l0aCBubyBvcHRpb24gZ3JvdXAKICAgICAgICAgICAgLy8gLSBvcHRpb25Hcm91cHNDYWNoZVs/XVswXSBpcyB0aGUgcGFyZW50OiBlaXRoZXIgdGhlIFNFTEVDVCBvciBPUFRHUk9VUCBlbGVtZW50CiAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlID0gW1t7ZWxlbWVudDogc2VsZWN0RWxlbWVudCwgbGFiZWw6Jyd9XV07CgogICAgICAgIGlmIChudWxsT3B0aW9uKSB7CiAgICAgICAgICAvLyBjb21waWxlIHRoZSBlbGVtZW50IHNpbmNlIHRoZXJlIG1pZ2h0IGJlIGJpbmRpbmdzIGluIGl0CiAgICAgICAgICAkY29tcGlsZShudWxsT3B0aW9uKShzY29wZSk7CgogICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjbGFzcywgd2hpY2ggaXMgYWRkZWQgYXV0b21hdGljYWxseSBiZWNhdXNlIHdlIHJlY29tcGlsZSB0aGUgZWxlbWVudCBhbmQgaXQKICAgICAgICAgIC8vIGJlY29tZXMgdGhlIGNvbXBpbGF0aW9uIHJvb3QKICAgICAgICAgIG51bGxPcHRpb24ucmVtb3ZlQ2xhc3MoJ25nLXNjb3BlJyk7CgogICAgICAgICAgLy8gd2UgbmVlZCB0byByZW1vdmUgaXQgYmVmb3JlIGNhbGxpbmcgc2VsZWN0RWxlbWVudC5lbXB0eSgpIGJlY2F1c2Ugb3RoZXJ3aXNlIElFIHdpbGwKICAgICAgICAgIC8vIHJlbW92ZSB0aGUgbGFiZWwgZnJvbSB0aGUgZWxlbWVudC4gd3RmPwogICAgICAgICAgbnVsbE9wdGlvbi5yZW1vdmUoKTsKICAgICAgICB9CgogICAgICAgIC8vIGNsZWFyIGNvbnRlbnRzLCB3ZSdsbCBhZGQgd2hhdCdzIG5lZWRlZCBiYXNlZCBvbiB0aGUgbW9kZWwKICAgICAgICBzZWxlY3RFbGVtZW50LmVtcHR5KCk7CgogICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgb3B0aW9uR3JvdXAsCiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gdmFsdWVzRm4oc2NvcGUpIHx8IFtdLAogICAgICAgICAgICAgICAgbG9jYWxzID0ge30sCiAgICAgICAgICAgICAgICBrZXksIHZhbHVlLCBvcHRpb25FbGVtZW50LCBpbmRleCwgZ3JvdXBJbmRleCwgbGVuZ3RoLCBncm91cExlbmd0aCwgdHJhY2tJbmRleDsKCiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkgewogICAgICAgICAgICAgIHZhbHVlID0gW107CiAgICAgICAgICAgICAgZm9yIChncm91cEluZGV4ID0gMCwgZ3JvdXBMZW5ndGggPSBvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICBncm91cEluZGV4IDwgZ3JvdXBMZW5ndGg7CiAgICAgICAgICAgICAgICAgICBncm91cEluZGV4KyspIHsKICAgICAgICAgICAgICAgIC8vIGxpc3Qgb2Ygb3B0aW9ucyBmb3IgdGhhdCBncm91cC4gKGZpcnN0IGl0ZW0gaGFzIHRoZSBwYXJlbnQpCiAgICAgICAgICAgICAgICBvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc0NhY2hlW2dyb3VwSW5kZXhdOwoKICAgICAgICAgICAgICAgIGZvcihpbmRleCA9IDEsIGxlbmd0aCA9IG9wdGlvbkdyb3VwLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKICAgICAgICAgICAgICAgICAgaWYgKChvcHRpb25FbGVtZW50ID0gb3B0aW9uR3JvdXBbaW5kZXhdLmVsZW1lbnQpWzBdLnNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAga2V5ID0gb3B0aW9uRWxlbWVudC52YWwoKTsKICAgICAgICAgICAgICAgICAgICBpZiAoa2V5TmFtZSkgbG9jYWxzW2tleU5hbWVdID0ga2V5OwogICAgICAgICAgICAgICAgICAgIGlmICh0cmFja0ZuKSB7CiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHRyYWNrSW5kZXggPSAwOyB0cmFja0luZGV4IDwgY29sbGVjdGlvbi5sZW5ndGg7IHRyYWNrSW5kZXgrKykgewogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IGNvbGxlY3Rpb25bdHJhY2tJbmRleF07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFja0ZuKHNjb3BlLCBsb2NhbHMpID09IGtleSkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gY29sbGVjdGlvbltrZXldOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YWx1ZS5wdXNoKHZhbHVlRm4oc2NvcGUsIGxvY2FscykpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGtleSA9IHNlbGVjdEVsZW1lbnQudmFsKCk7CiAgICAgICAgICAgICAgaWYgKGtleSA9PSAnPycpIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnJyl7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICh0cmFja0ZuKSB7CiAgICAgICAgICAgICAgICAgIGZvciAodHJhY2tJbmRleCA9IDA7IHRyYWNrSW5kZXggPCBjb2xsZWN0aW9uLmxlbmd0aDsgdHJhY2tJbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSBjb2xsZWN0aW9uW3RyYWNrSW5kZXhdOwogICAgICAgICAgICAgICAgICAgIGlmICh0cmFja0ZuKHNjb3BlLCBsb2NhbHMpID09IGtleSkgewogICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZUZuKHNjb3BlLCBsb2NhbHMpOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IGNvbGxlY3Rpb25ba2V5XTsKICAgICAgICAgICAgICAgICAgaWYgKGtleU5hbWUpIGxvY2Fsc1trZXlOYW1lXSA9IGtleTsKICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZUZuKHNjb3BlLCBsb2NhbHMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIGN0cmwuJHJlbmRlciA9IHJlbmRlcjsKCiAgICAgICAgLy8gVE9ETyh2b2p0YSk6IGNhbid0IHdlIG9wdGltaXplIHRoaXMgPwogICAgICAgIHNjb3BlLiR3YXRjaChyZW5kZXIpOwoKICAgICAgICBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgICAgICAgICAgLy8gVGVtcG9yYXJ5IGxvY2F0aW9uIGZvciB0aGUgb3B0aW9uIGdyb3VwcyBiZWZvcmUgd2UgcmVuZGVyIHRoZW0KICAgICAgICAgIHZhciBvcHRpb25Hcm91cHMgPSB7Jyc6W119LAogICAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZXMgPSBbJyddLAogICAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZSwKICAgICAgICAgICAgICBvcHRpb25Hcm91cCwKICAgICAgICAgICAgICBvcHRpb24sCiAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQsIGV4aXN0aW5nT3B0aW9ucywgZXhpc3RpbmdPcHRpb24sCiAgICAgICAgICAgICAgbW9kZWxWYWx1ZSA9IGN0cmwuJG1vZGVsVmFsdWUsCiAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzRm4oc2NvcGUpIHx8IFtdLAogICAgICAgICAgICAgIGtleXMgPSBrZXlOYW1lID8gc29ydGVkS2V5cyh2YWx1ZXMpIDogdmFsdWVzLAogICAgICAgICAgICAgIGtleSwKICAgICAgICAgICAgICBncm91cExlbmd0aCwgbGVuZ3RoLAogICAgICAgICAgICAgIGdyb3VwSW5kZXgsIGluZGV4LAogICAgICAgICAgICAgIGxvY2FscyA9IHt9LAogICAgICAgICAgICAgIHNlbGVjdGVkLAogICAgICAgICAgICAgIHNlbGVjdGVkU2V0ID0gZmFsc2UsIC8vIG5vdGhpbmcgaXMgc2VsZWN0ZWQgeWV0CiAgICAgICAgICAgICAgbGFzdEVsZW1lbnQsCiAgICAgICAgICAgICAgZWxlbWVudCwKICAgICAgICAgICAgICBsYWJlbDsKCiAgICAgICAgICBpZiAobXVsdGlwbGUpIHsKICAgICAgICAgICAgaWYgKHRyYWNrRm4gJiYgaXNBcnJheShtb2RlbFZhbHVlKSkgewogICAgICAgICAgICAgIHNlbGVjdGVkU2V0ID0gbmV3IEhhc2hNYXAoW10pOwogICAgICAgICAgICAgIGZvciAodmFyIHRyYWNrSW5kZXggPSAwOyB0cmFja0luZGV4IDwgbW9kZWxWYWx1ZS5sZW5ndGg7IHRyYWNrSW5kZXgrKykgewogICAgICAgICAgICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSBtb2RlbFZhbHVlW3RyYWNrSW5kZXhdOwogICAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQucHV0KHRyYWNrRm4oc2NvcGUsIGxvY2FscyksIG1vZGVsVmFsdWVbdHJhY2tJbmRleF0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBzZWxlY3RlZFNldCA9IG5ldyBIYXNoTWFwKG1vZGVsVmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gV2Ugbm93IGJ1aWxkIHVwIHRoZSBsaXN0IG9mIG9wdGlvbnMgd2UgbmVlZCAod2UgbWVyZ2UgbGF0ZXIpCiAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgbGVuZ3RoID0ga2V5cy5sZW5ndGgsIGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBrZXkgPSBpbmRleDsKICAgICAgICAgICAgaWYgKGtleU5hbWUpIHsKICAgICAgICAgICAgICBrZXkgPSBrZXlzW2luZGV4XTsKICAgICAgICAgICAgICBpZiAoIGtleS5jaGFyQXQoMCkgPT09ICckJyApIGNvbnRpbnVlOwogICAgICAgICAgICAgIGxvY2Fsc1trZXlOYW1lXSA9IGtleTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSB2YWx1ZXNba2V5XTsKCiAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZSA9IGdyb3VwQnlGbihzY29wZSwgbG9jYWxzKSB8fCAnJzsKICAgICAgICAgICAgaWYgKCEob3B0aW9uR3JvdXAgPSBvcHRpb25Hcm91cHNbb3B0aW9uR3JvdXBOYW1lXSkpIHsKICAgICAgICAgICAgICBvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc1tvcHRpb25Hcm91cE5hbWVdID0gW107CiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lcy5wdXNoKG9wdGlvbkdyb3VwTmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7CiAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBpc0RlZmluZWQoCiAgICAgICAgICAgICAgICBzZWxlY3RlZFNldC5yZW1vdmUodHJhY2tGbiA/IHRyYWNrRm4oc2NvcGUsIGxvY2FscykgOiB2YWx1ZUZuKHNjb3BlLCBsb2NhbHMpKQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaWYgKHRyYWNrRm4pIHsKICAgICAgICAgICAgICAgIHZhciBtb2RlbENhc3QgPSB7fTsKICAgICAgICAgICAgICAgIG1vZGVsQ2FzdFt2YWx1ZU5hbWVdID0gbW9kZWxWYWx1ZTsKICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gdHJhY2tGbihzY29wZSwgbW9kZWxDYXN0KSA9PT0gdHJhY2tGbihzY29wZSwgbG9jYWxzKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBtb2RlbFZhbHVlID09PSB2YWx1ZUZuKHNjb3BlLCBsb2NhbHMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBzZWxlY3RlZFNldCA9IHNlbGVjdGVkU2V0IHx8IHNlbGVjdGVkOyAvLyBzZWUgaWYgYXQgbGVhc3Qgb25lIGl0ZW0gaXMgc2VsZWN0ZWQKICAgICAgICAgICAgfQogICAgICAgICAgICBsYWJlbCA9IGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKTsgLy8gd2hhdCB3aWxsIGJlIHNlZW4gYnkgdGhlIHVzZXIKCiAgICAgICAgICAgIC8vIGRvaW5nIGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKSB8fCAnJyBvdmVyd3JpdGVzIHplcm8gdmFsdWVzCiAgICAgICAgICAgIGxhYmVsID0gaXNEZWZpbmVkKGxhYmVsKSA/IGxhYmVsIDogJyc7CiAgICAgICAgICAgIG9wdGlvbkdyb3VwLnB1c2goewogICAgICAgICAgICAgIC8vIGVpdGhlciB0aGUgaW5kZXggaW50byBhcnJheSBvciBrZXkgZnJvbSBvYmplY3QKICAgICAgICAgICAgICBpZDogdHJhY2tGbiA/IHRyYWNrRm4oc2NvcGUsIGxvY2FscykgOiAoa2V5TmFtZSA/IGtleXNbaW5kZXhdIDogaW5kZXgpLAogICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCwKICAgICAgICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWQgICAgICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIHdlIHNob3VsZCBiZSBzZWxlY3RlZAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICghbXVsdGlwbGUpIHsKICAgICAgICAgICAgaWYgKG51bGxPcHRpb24gfHwgbW9kZWxWYWx1ZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgIC8vIGluc2VydCBudWxsIG9wdGlvbiBpZiB3ZSBoYXZlIGEgcGxhY2Vob2xkZXIsIG9yIHRoZSBtb2RlbCBpcyBudWxsCiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBzWycnXS51bnNoaWZ0KHtpZDonJywgbGFiZWw6JycsIHNlbGVjdGVkOiFzZWxlY3RlZFNldH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKCFzZWxlY3RlZFNldCkgewogICAgICAgICAgICAgIC8vIG9wdGlvbiBjb3VsZCBub3QgYmUgZm91bmQsIHdlIGhhdmUgdG8gaW5zZXJ0IHRoZSB1bmRlZmluZWQgaXRlbQogICAgICAgICAgICAgIG9wdGlvbkdyb3Vwc1snJ10udW5zaGlmdCh7aWQ6Jz8nLCBsYWJlbDonJywgc2VsZWN0ZWQ6dHJ1ZX0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gTm93IHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBsaXN0IG9mIERPTSBub2RlcyB0byBtYXRjaCB0aGUgb3B0aW9uR3JvdXBzIHdlIGNvbXB1dGVkIGFib3ZlCiAgICAgICAgICBmb3IgKGdyb3VwSW5kZXggPSAwLCBncm91cExlbmd0aCA9IG9wdGlvbkdyb3VwTmFtZXMubGVuZ3RoOwogICAgICAgICAgICAgICBncm91cEluZGV4IDwgZ3JvdXBMZW5ndGg7CiAgICAgICAgICAgICAgIGdyb3VwSW5kZXgrKykgewogICAgICAgICAgICAvLyBjdXJyZW50IG9wdGlvbiBncm91cCBuYW1lIG9yICcnIGlmIG5vIGdyb3VwCiAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZSA9IG9wdGlvbkdyb3VwTmFtZXNbZ3JvdXBJbmRleF07CgogICAgICAgICAgICAvLyBsaXN0IG9mIG9wdGlvbnMgZm9yIHRoYXQgZ3JvdXAuIChmaXJzdCBpdGVtIGhhcyB0aGUgcGFyZW50KQogICAgICAgICAgICBvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc1tvcHRpb25Hcm91cE5hbWVdOwoKICAgICAgICAgICAgaWYgKG9wdGlvbkdyb3Vwc0NhY2hlLmxlbmd0aCA8PSBncm91cEluZGV4KSB7CiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBncm93IHRoZSBvcHRpb25Hcm91cHMKICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCA9IHsKICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG9wdEdyb3VwVGVtcGxhdGUuY2xvbmUoKS5hdHRyKCdsYWJlbCcsIG9wdGlvbkdyb3VwTmFtZSksCiAgICAgICAgICAgICAgICBsYWJlbDogb3B0aW9uR3JvdXAubGFiZWwKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGV4aXN0aW5nT3B0aW9ucyA9IFtleGlzdGluZ1BhcmVudF07CiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBzQ2FjaGUucHVzaChleGlzdGluZ09wdGlvbnMpOwogICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuYXBwZW5kKGV4aXN0aW5nUGFyZW50LmVsZW1lbnQpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGV4aXN0aW5nT3B0aW9ucyA9IG9wdGlvbkdyb3Vwc0NhY2hlW2dyb3VwSW5kZXhdOwogICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50ID0gZXhpc3RpbmdPcHRpb25zWzBdOyAgLy8gZWl0aGVyIFNFTEVDVCAobm8gZ3JvdXApIG9yIE9QVEdST1VQIGVsZW1lbnQKCiAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBPUFRHUk9VUCBsYWJlbCBpZiBub3QgdGhlIHNhbWUuCiAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nUGFyZW50LmxhYmVsICE9IG9wdGlvbkdyb3VwTmFtZSkgewogICAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQuZWxlbWVudC5hdHRyKCdsYWJlbCcsIGV4aXN0aW5nUGFyZW50LmxhYmVsID0gb3B0aW9uR3JvdXBOYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxhc3RFbGVtZW50ID0gbnVsbDsgIC8vIHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcKICAgICAgICAgICAgZm9yKGluZGV4ID0gMCwgbGVuZ3RoID0gb3B0aW9uR3JvdXAubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICAgIG9wdGlvbiA9IG9wdGlvbkdyb3VwW2luZGV4XTsKICAgICAgICAgICAgICBpZiAoKGV4aXN0aW5nT3B0aW9uID0gZXhpc3RpbmdPcHRpb25zW2luZGV4KzFdKSkgewogICAgICAgICAgICAgICAgLy8gcmV1c2UgZWxlbWVudHMKICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50ID0gZXhpc3RpbmdPcHRpb24uZWxlbWVudDsKICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ09wdGlvbi5sYWJlbCAhPT0gb3B0aW9uLmxhYmVsKSB7CiAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LnRleHQoZXhpc3RpbmdPcHRpb24ubGFiZWwgPSBvcHRpb24ubGFiZWwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nT3B0aW9uLmlkICE9PSBvcHRpb24uaWQpIHsKICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQudmFsKGV4aXN0aW5nT3B0aW9uLmlkID0gb3B0aW9uLmlkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIGxhc3RFbGVtZW50LnByb3AoJ3NlbGVjdGVkJykgcHJvdmlkZWQgYnkgalF1ZXJ5IGhhcyBzaWRlLWVmZmVjdHMKICAgICAgICAgICAgICAgIGlmIChsYXN0RWxlbWVudFswXS5zZWxlY3RlZCAhPT0gb3B0aW9uLnNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LnByb3AoJ3NlbGVjdGVkJywgKGV4aXN0aW5nT3B0aW9uLnNlbGVjdGVkID0gb3B0aW9uLnNlbGVjdGVkKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGdyb3cgZWxlbWVudHMKCiAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIGEgbnVsbCBvcHRpb24KICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaWQgPT09ICcnICYmIG51bGxPcHRpb24pIHsKICAgICAgICAgICAgICAgICAgLy8gcHV0IGJhY2sgdGhlIHByZS1jb21waWxlZCBlbGVtZW50CiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBudWxsT3B0aW9uOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgLy8galF1ZXJ5KHYxLjQuMikgQnVnOiBXZSBzaG91bGQgYmUgYWJsZSB0byBjaGFpbiB0aGUgbWV0aG9kIGNhbGxzLCBidXQKICAgICAgICAgICAgICAgICAgLy8gaW4gdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSBvbiBzb21lIGJyb3dzZXIgdGhlIC50ZXh0KCkgcmV0dXJucyBhIHN0cmluZwogICAgICAgICAgICAgICAgICAvLyByYXRoZXIgdGhlbiB0aGUgZWxlbWVudC4KICAgICAgICAgICAgICAgICAgKGVsZW1lbnQgPSBvcHRpb25UZW1wbGF0ZS5jbG9uZSgpKQogICAgICAgICAgICAgICAgICAgICAgLnZhbChvcHRpb24uaWQpCiAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc2VsZWN0ZWQnLCBvcHRpb24uc2VsZWN0ZWQpCiAgICAgICAgICAgICAgICAgICAgICAudGV4dChvcHRpb24ubGFiZWwpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGV4aXN0aW5nT3B0aW9ucy5wdXNoKGV4aXN0aW5nT3B0aW9uID0gewogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG9wdGlvbi5sYWJlbCwKICAgICAgICAgICAgICAgICAgICBpZDogb3B0aW9uLmlkLAogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBvcHRpb24uc2VsZWN0ZWQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKGxhc3RFbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LmFmdGVyKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQuZWxlbWVudC5hcHBlbmQoZWxlbWVudCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsYXN0RWxlbWVudCA9IGVsZW1lbnQ7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIHJlbW92ZSBhbnkgZXhjZXNzaXZlIE9QVElPTnMgaW4gYSBncm91cAogICAgICAgICAgICBpbmRleCsrOyAvLyBpbmNyZW1lbnQgc2luY2UgdGhlIGV4aXN0aW5nT3B0aW9uc1swXSBpcyBwYXJlbnQgZWxlbWVudCBub3QgT1BUSU9OCiAgICAgICAgICAgIHdoaWxlKGV4aXN0aW5nT3B0aW9ucy5sZW5ndGggPiBpbmRleCkgewogICAgICAgICAgICAgIGV4aXN0aW5nT3B0aW9ucy5wb3AoKS5lbGVtZW50LnJlbW92ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICAvLyByZW1vdmUgYW55IGV4Y2Vzc2l2ZSBPUFRHUk9VUHMgZnJvbSBzZWxlY3QKICAgICAgICAgIHdoaWxlKG9wdGlvbkdyb3Vwc0NhY2hlLmxlbmd0aCA+IGdyb3VwSW5kZXgpIHsKICAgICAgICAgICAgb3B0aW9uR3JvdXBzQ2FjaGUucG9wKClbMF0uZWxlbWVudC5yZW1vdmUoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Owp9XTsKCnZhciBvcHRpb25EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkgewogIHZhciBudWxsU2VsZWN0Q3RybCA9IHsKICAgIGFkZE9wdGlvbjogbm9vcCwKICAgIHJlbW92ZU9wdGlvbjogbm9vcAogIH07CgogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgcHJpb3JpdHk6IDEwMCwKICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHsKICAgICAgaWYgKGlzVW5kZWZpbmVkKGF0dHIudmFsdWUpKSB7CiAgICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC50ZXh0KCksIHRydWUpOwogICAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgewogICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIGVsZW1lbnQudGV4dCgpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHsKICAgICAgICB2YXIgc2VsZWN0Q3RybE5hbWUgPSAnJHNlbGVjdENvbnRyb2xsZXInLAogICAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpLAogICAgICAgICAgICBzZWxlY3RDdHJsID0gcGFyZW50LmRhdGEoc2VsZWN0Q3RybE5hbWUpIHx8CiAgICAgICAgICAgICAgcGFyZW50LnBhcmVudCgpLmRhdGEoc2VsZWN0Q3RybE5hbWUpOyAvLyBpbiBjYXNlIHdlIGFyZSBpbiBvcHRncm91cAoKICAgICAgICBpZiAoc2VsZWN0Q3RybCAmJiBzZWxlY3RDdHJsLmRhdGFib3VuZCkgewogICAgICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIE9wZXJhIGRlZmF1bHRzIHRvIHRydWUgYW5kIGlmIG5vdCBvdmVycmlkZGVuIHRoaXMgbWVzc2VzIHVwIHRoZSByZXBlYXRlci4KICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdGhlIHZpZXcgdG8gZHJpdmUgdGhlIGluaXRpYWxpemF0aW9uIG9mIHRoZSBtb2RlbCBhbnl3YXkuCiAgICAgICAgICBlbGVtZW50LnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxlY3RDdHJsID0gbnVsbFNlbGVjdEN0cmw7CiAgICAgICAgfQoKICAgICAgICBpZiAoaW50ZXJwb2xhdGVGbikgewogICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHsKICAgICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIG5ld1ZhbCk7CiAgICAgICAgICAgIGlmIChuZXdWYWwgIT09IG9sZFZhbCkgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24ob2xkVmFsKTsKICAgICAgICAgICAgc2VsZWN0Q3RybC5hZGRPcHRpb24obmV3VmFsKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihhdHRyLnZhbHVlKTsKICAgICAgICB9CgogICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7CiAgICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZU9wdGlvbihhdHRyLnZhbHVlKTsKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KICB9Owp9XTsKCnZhciBzdHlsZURpcmVjdGl2ZSA9IHZhbHVlRm4oewogIHJlc3RyaWN0OiAnRScsCiAgdGVybWluYWw6IHRydWUKfSk7CgogIC8vdHJ5IHRvIGJpbmQgdG8ganF1ZXJ5IG5vdyBzbyB0aGF0IG9uZSBjYW4gd3JpdGUgYW5ndWxhci5lbGVtZW50KCkucmVhZCgpCiAgLy9idXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLgogIGJpbmRKUXVlcnkoKTsKCiAgcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpOwoKICBqcUxpdGUoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgYW5ndWxhckluaXQoZG9jdW1lbnQsIGJvb3RzdHJhcCk7CiAgfSk7Cgp9KSh3aW5kb3csIGRvY3VtZW50KTsKCiFhbmd1bGFyLiQkY3NwKCkgJiYgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5maW5kKCdoZWFkJykucHJlcGVuZCgnPHN0eWxlIHR5cGU9InRleHQvY3NzIj5AY2hhcnNldCAiVVRGLTgiO1tuZ1xcOmNsb2FrXSxbbmctY2xvYWtdLFtkYXRhLW5nLWNsb2FrXSxbeC1uZy1jbG9ha10sLm5nLWNsb2FrLC54LW5nLWNsb2FrLC5uZy1oaWRle2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O31uZ1xcOmZvcm17ZGlzcGxheTpibG9jazt9PC9zdHlsZT4nKTs=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 07:58:59 GMT",
                    "Content-Length": "726311",
                    "Date": "Thu, 06 Nov 2014 07:58:59 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}