{
    "url": "http://localhost:9999/janpaepke/ScrollMagic/docs/ScrollScene.html",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>window.location.hash</b> and written to <b>$()</b> via the following statement:<ul><li>$(\"dt h4.member-collapsed[id='\" + window.location.hash.substring(1).replace(\":\", \"\\\\:\") +\"']\").trigger(\"click\", skipAni);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/janpaepke/ScrollMagic/docs/ScrollScene.html",
                "path": "/janpaepke/ScrollMagic/docs/ScrollScene.html",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9qYW5wYWVwa2UvU2Nyb2xsTWFnaWMvZG9jcy9TY3JvbGxTY2VuZS5odG1sIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogMTI4ODM4DQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgNCkRhdGU6IFNhdCwgMDggTm92IDIwMTQgMDQ6MDg6NTYgR01UDQpMYXN0LU1vZGlmaWVkOiBTYXQsIDA4IE5vdiAyMDE0IDA0OjA4OjU1IEdNVA0KDQo8IURPQ1RZUEUgaHRtbD4KCjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+Cgk8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+Cgk8dGl0bGU+U2Nyb2xsTWFnaWMgQ2xhc3M6IFNjcm9sbFNjZW5lPC90aXRsZT4KCQogIDxzY3JpcHQgc3JjPSJzY3JpcHRzL3ByZXR0aWZ5L3ByZXR0aWZ5LmpzIj4gPC9zY3JpcHQ+CiAgPHNjcmlwdCBzcmM9InNjcmlwdHMvcHJldHRpZnkvbGFuZy1jc3MuanMiPiA8L3NjcmlwdD4KCTwhLS1baWYgbHQgSUUgOV0+Cgk8c2NyaXB0IHNyYz0iLy9odG1sNXNoaXYuZ29vZ2xlY29kZS5jb20vc3ZuL3RydW5rL2h0bWw1LmpzIj48L3NjcmlwdD4KCTwhW2VuZGlmXS0tPgoJPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0ic3R5bGVzL3N1bmxpZ2h0LmRlZmF1bHQuY3NzIj4KCTxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIGhyZWY9InN0eWxlcy9wcmV0dGlmeS10b21vcnJvdy5jc3MiPgoJPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSIuLi9pbWcvZmF2aWNvbi5pY28iIHR5cGU9ImltYWdlL3gtaWNvbiI+CgoJCgk8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzdHlsZXMvc2l0ZS5jb3Ntby5jc3MiPgoJCjwvaGVhZD4KCjxib2R5Pgo8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgoJPGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1maXhlZC10b3AgbmF2YmFyLWludmVyc2UiPgoJCTxkaXYgY2xhc3M9Im5hdmJhci1pbm5lciI+CgkJCTxhIGNsYXNzPSJicmFuZCIgaHJlZj0iaW5kZXguaHRtbCI+U2Nyb2xsTWFnaWM8L2E+CgkJCTx1bCBjbGFzcz0ibmF2Ij4KCQkJCQoJCQkJPGxpIGNsYXNzPSJkcm9wZG93biI+CgkJCQkJPGEgaHJlZj0iY2xhc3Nlcy5saXN0Lmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+Q2xhc3NlczxiCgkJCQkJCWNsYXNzPSJjYXJldCI+PC9iPjwvYT4KCgkJCQkJPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51ICI+CgkJCQkJCQoJCQkJCQk8bGk+CgkJCQkJCQk8YSBocmVmPSJTY3JvbGxNYWdpYy5odG1sIj5TY3JvbGxNYWdpYzwvYT4KCQkJCQkJPC9saT4KCQkJCQkJCgkJCQkJCTxsaT4KCQkJCQkJCTxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPgoJCQkJCQk8L2xpPgoJCQkJCQkKCgkJCQkJPC91bD4KCQkJCTwvbGk+CgkJCQkKCQkJCTxsaSBjbGFzcz0iZHJvcGRvd24iPgoJCQkJCTxhIGhyZWY9ImV2ZW50cy5saXN0Lmh0bWwiIGNsYXNzPSJkcm9wZG93bi10b2dnbGUiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biI+RXZlbnRzPGIKCQkJCQkJY2xhc3M9ImNhcmV0Ij48L2I+PC9hPgoKCQkJCQk8dWwgY2xhc3M9ImRyb3Bkb3duLW1lbnUgIj4KCQkJCQkJCgkJCQkJCTxsaT4KCQkJCQkJCTxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwjZXZlbnQ6Y2hhbmdlIj5jaGFuZ2U8L2E+CgkJCQkJCTwvbGk+CgkJCQkJCQoJCQkJCQk8bGk+CgkJCQkJCQk8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OmRlc3Ryb3kiPmRlc3Ryb3k8L2E+CgkJCQkJCTwvbGk+CgkJCQkJCQoJCQkJCQk8bGk+CgkJCQkJCQk8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OmVuZCI+ZW5kPC9hPgoJCQkJCQk8L2xpPgoJCQkJCQkKCQkJCQkJPGxpPgoJCQkJCQkJPGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDplbnRlciI+ZW50ZXI8L2E+CgkJCQkJCTwvbGk+CgkJCQkJCQoJCQkJCQk8bGk+CgkJCQkJCQk8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OmxlYXZlIj5sZWF2ZTwvYT4KCQkJCQkJPC9saT4KCQkJCQkJCgkJCQkJCTxsaT4KCQkJCQkJCTxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwjZXZlbnQ6cHJvZ3Jlc3MiPnByb2dyZXNzPC9hPgoJCQkJCQk8L2xpPgoJCQkJCQkKCQkJCQkJPGxpPgoJCQkJCQkJPGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDpzaGlmdCI+c2hpZnQ8L2E+CgkJCQkJCTwvbGk+CgkJCQkJCQoJCQkJCQk8bGk+CgkJCQkJCQk8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OnN0YXJ0Ij5zdGFydDwvYT4KCQkJCQkJPC9saT4KCQkJCQkJCgkJCQkJCTxsaT4KCQkJCQkJCTxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwjZXZlbnQ6dXBkYXRlIj51cGRhdGU8L2E+CgkJCQkJCTwvbGk+CgkJCQkJCQoKCQkJCQk8L3VsPgoJCQkJPC9saT4KCQkJCQoJCQk8L3VsPgoJCTwvZGl2PgoJPC9kaXY+CgoJPGRpdiBjbGFzcz0icm93LWZsdWlkIj4KCgkJCgkJPGRpdiBjbGFzcz0ic3BhbjgiPgoJCQkKCQkJCTxkaXYgaWQ9Im1haW4iPgoJCQkJCQoKCgk8aDEgY2xhc3M9InBhZ2UtdGl0bGUiPkNsYXNzOiBTY3JvbGxTY2VuZTwvaDE+CjxzZWN0aW9uPgoKPGhlYWRlcj4KICAgIDxoMj4KICAgIFNjcm9sbFNjZW5lCiAgICA8L2gyPgogICAgCjwvaGVhZGVyPgoKPGFydGljbGU+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItb3ZlcnZpZXciPgogICAgCgogICAgCiAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9IlNjcm9sbFNjZW5lIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5uZXcgU2Nyb2xsU2NlbmU8c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oPHNwYW4gY2xhc3M9Im9wdGlvbmFsIj5vcHRpb25zPC9zcGFuPik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+QSBTY3JvbGxTY2VuZSBkZWZpbmVzIHdoZXJlIHRoZSBjb250cm9sbGVyIHNob3VsZCByZWFjdCBhbmQgaG93LjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+UGFyYW1ldGVyczo8L2g1PgogICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5vcHRpb25zPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm9iamVjdDwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPk9wdGlvbnMgZm9yIHRoZSBTY2VuZS4gVGhlIG9wdGlvbnMgY2FuIGJlIHVwZGF0ZWQgYXQgYW55IHRpbWUuPGJyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluc3RlYWQgb2Ygc2V0dGluZyB0aGUgb3B0aW9ucyBmb3IgZWFjaCBzY2VuZSBpbmRpdmlkdWFsbHkgeW91IGNhbiBhbHNvIHNldCB0aGVtIGdsb2JhbGx5IGluIHRoZSBjb250cm9sbGVyIGFzIHRoZSBjb250cm9sbGVycyA8Y29kZT5nbG9iYWxTY2VuZU9wdGlvbnM8L2NvZGU+IG9wdGlvbi4gVGhlIG9iamVjdCBhY2NlcHRzIHRoZSBzYW1lIHByb3BlcnRpZXMgYXMgdGhlIG9uZXMgYmVsb3cuPGJyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gYSBzY2VuZSBpcyBhZGRlZCB0byB0aGUgY29udHJvbGxlciB0aGUgb3B0aW9ucyBkZWZpbmVkIHVzaW5nIHRoZSBTY3JvbGxTY2VuZSBjb25zdHJ1Y3RvciB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRob3NlIHNldCBpbiA8Y29kZT5nbG9iYWxTY2VuZU9wdGlvbnM8L2NvZGU+LjwvcD4KICAgICAgICAgICAgICAgIDxoNj5Qcm9wZXJ0aWVzPC9oNj4KICAgICAgICAgICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoJCTx0aD5EZWZhdWx0PC90aD4KCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+ZHVyYXRpb248L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgp8Cgo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+ZnVuY3Rpb248L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJkZWZhdWx0Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBkdXJhdGlvbiBvZiB0aGUgc2NlbmUuIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIDxjb2RlPjA8L2NvZGU+IHR3ZWVucyB3aWxsIGF1dG8tcGxheSB3aGVuIHJlYWNoaW5nIHRoZSBzY2VuZSBzdGFydCBwb2ludCwgcGlucyB3aWxsIGJlIHBpbm5lZCBpbmRlZmluZXRseSBzdGFydGluZyBhdCB0aGUgc3RhcnQgcG9zaXRpb24uPGJyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBmdW5jdGlvbiByZXR1bmluZyB0aGUgZHVyYXRpb24gdmFsdWUgaXMgYWxzbyBzdXBwb3J0ZWQuIFBsZWFzZSBzZWUgPGNvZGU+U2Nyb2xsU2NlbmUuZHVyYXRpb24oKTwvY29kZT4gZm9yIGRldGFpbHMuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+b2Zmc2V0PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bWJlcjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+T2Zmc2V0IFZhbHVlIGZvciB0aGUgVHJpZ2dlciBQb3NpdGlvbi4gSWYgbm8gdHJpZ2dlckVsZW1lbnQgaXMgZGVmaW5lZCB0aGlzIHdpbGwgYmUgdGhlIHNjcm9sbCBkaXN0YW5jZSBmcm9tIHRoZSBzdGFydCBvZiB0aGUgcGFnZSwgYWZ0ZXIgd2hpY2ggdGhlIHNjZW5lIHdpbGwgc3RhcnQuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dHJpZ2dlckVsZW1lbnQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgp8Cgo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+b2JqZWN0PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBudWxsCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5TZWxlY3RvciwgRE9NIG9iamVjdCBvciBqUXVlcnkgT2JqZWN0IHRoYXQgZGVmaW5lcyB0aGUgc3RhcnQgb2YgdGhlIHNjZW5lLiBJZiB1bmRlZmluZWQgdGhlIHNjZW5lIHdpbGwgc3RhcnQgcmlnaHQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBwYWdlICh1bmxlc3MgYW4gb2Zmc2V0IGlzIHNldCkuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dHJpZ2dlckhvb2s8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgp8Cgo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAib25DZW50ZXIiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5DYW4gYmUgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxIGRlZmluaW5nIHRoZSBwb3NpdGlvbiBvZiB0aGUgdHJpZ2dlciBIb29rIGluIHJlbGF0aW9uIHRvIHRoZSB2aWV3cG9ydC48YnI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbiBhbHNvIGJlIGRlZmluZWQgdXNpbmcgYSBzdHJpbmc6PC9wPgo8dWw+CjxsaT48Y29kZT4mcXVvdDtvbkVudGVyJnF1b3Q7PC9jb2RlPiA9Jmd0OyA8Y29kZT4xPC9jb2RlPjwvbGk+CjxsaT48Y29kZT4mcXVvdDtvbkNlbnRlciZxdW90OzwvY29kZT4gPSZndDsgPGNvZGU+MC41PC9jb2RlPjwvbGk+CjxsaT48Y29kZT4mcXVvdDtvbkxlYXZlJnF1b3Q7PC9jb2RlPiA9Jmd0OyA8Y29kZT4wPC9jb2RlPjwvbGk+CjwvdWw+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5yZXZlcnNlPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPmJvb2xlYW48L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJkZWZhdWx0Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHRydWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlNob3VsZCB0aGUgc2NlbmUgcmV2ZXJzZSwgd2hlbiBzY3JvbGxpbmcgdXA/PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dHdlZW5DaGFuZ2VzPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPmJvb2xlYW48L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJkZWZhdWx0Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5Ud2VlbnMgQW5pbWF0aW9uIHRvIHRoZSBwcm9ncmVzcyB0YXJnZXQgaW5zdGVhZCBvZiBzZXR0aW5nIGl0Ljxicj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvZXMgbm90IGFmZmVjdCBhbmltYXRpb25zIHdoZXJlIGR1cmF0aW9uIGlzIDxjb2RlPjA8L2NvZGU+LjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPmxvZ2xldmVsPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bWJlcjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgMgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+TG9nbGV2ZWwgZm9yIGRlYnVnZ2luZy4gTm90ZSB0aGF0IGxvZ2dpbmcgaXMgZGlzYWJsZWQgaW4gdGhlIG1pbmlmaWVkIHZlcnNpb24gb2YgU2Nyb2xsTWFnaWMuPC9wPgo8dWw+CjxsaT48Y29kZT4wPC9jb2RlPiA9Jmd0OyBzaWxlbnQ8L2xpPgo8bGk+PGNvZGU+MTwvY29kZT4gPSZndDsgZXJyb3JzPC9saT4KPGxpPjxjb2RlPjI8L2NvZGU+ID0mZ3Q7IGVycm9ycywgd2FybmluZ3M8L2xpPgo8bGk+PGNvZGU+MzwvY29kZT4gPSZndDsgZXJyb3JzLCB3YXJuaW5ncywgZGVidWdpbmZvPC9saT4KPC91bD48L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTY4MyI+bGluZSA2ODM8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIGNyZWF0ZSBhIHN0YW5kYXJkIHNjZW5lIGFuZCBhZGQgaXQgdG8gYSBjb250cm9sbGVyDW5ldyBTY3JvbGxTY2VuZSgpDQkJLmFkZFRvKGNvbnRyb2xsZXIpOw0NLy8gY3JlYXRlIGEgc2NlbmUgd2l0aCBjdXN0b20gb3B0aW9ucyBhbmQgYXNzaWduIGEgaGFuZGxlciB0byBpdC4NdmFyIHNjZW5lID0gbmV3IFNjcm9sbFNjZW5lKHsNCQlkdXJhdGlvbjogMTAwLA0JCW9mZnNldDogMjAwLA0JCXRyaWdnZXJIb29rOiAib25FbnRlciIsDQkJcmV2ZXJzZTogZmFsc2UNfSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgIAogICAgPC9kaXY+CgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICAgICAgPGgzIGNsYXNzPSJzdWJzZWN0aW9uLXRpdGxlIj5TY2VuZSBDb250cm9sIE1ldGhvZHM8L2gzPgoKICAgICAgICA8ZGw+CiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJhZGRUbyI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+YWRkVG88c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oY29udHJvbGxlcik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHs8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT59PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPkFkZCB0aGUgc2NlbmUgdG8gYSBjb250cm9sbGVyLjxicj5UaGlzIGlzIHRoZSBlcXVpdmFsZW50IHRvIDxjb2RlPlNjcm9sbE1hZ2ljLmFkZFNjZW5lKHNjZW5lKTwvY29kZT4uPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgICAgIDxoNT5QYXJhbWV0ZXJzOjwvaDU+CiAgICAgICAgCgo8dGFibGUgY2xhc3M9InBhcmFtcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5jb250cm9sbGVyPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbE1hZ2ljLmh0bWwiPlNjcm9sbE1hZ2ljPC9hPjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBjb250cm9sbGVyIHRvIHdoaWNoIHRoZSBzY2VuZSBzaG91bGQgYmUgYWRkZWQuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0yMDMyIj5saW5lIDIwMzI8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIDxoNT5SZXR1cm5zOjwvaDU+CiAgICAKICAgICAgICAgICAgCjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+UGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPjwvc3Bhbj4KCn0KCjwvZGl2PgoKCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij4vLyBhZGQgYSBzY2VuZSB0byBhIFNjcm9sbE1hZ2ljIGNvbnRyb2xsZXINc2NlbmUuYWRkVG8oY29udHJvbGxlcik7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9ImRlc3Ryb3kiPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+PC9zcGFuPmRlc3Ryb3k8c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oPHNwYW4gY2xhc3M9Im9wdGlvbmFsIj5yZXNldDwvc3Bhbj4pPC9zcGFuPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+ICZyYXJyOyB7bnVsbH08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+RGVzdHJveSB0aGUgc2NlbmUgYW5kIGV2ZXJ5dGhpbmcuPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgICAgIDxoNT5QYXJhbWV0ZXJzOjwvaDU+CiAgICAgICAgCgo8dGFibGUgY2xhc3M9InBhcmFtcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgkJPHRoPkFyZ3VtZW50PC90aD4KCQkKCgkJCgkJPHRoPkRlZmF1bHQ8L3RoPgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5yZXNldDwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5ib29sZWFuPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+SWYgPGNvZGU+dHJ1ZTwvY29kZT4gdGhlIHBpbiBhbmQgdHdlZW4gKGlmIGV4aXN0ZW50KSB3aWxsIGJlIHJlc2V0LjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc291cmNlIj5Tb3VyY2U6PC9kdD4KICAgIDxkZCBjbGFzcz0idGFnLXNvdXJjZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPgogICAgICAgIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sIj5qcXVlcnkuc2Nyb2xsbWFnaWMuanM8L2E+LCA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCNzdW5saWdodC0xLWxpbmUtMjEyMCI+bGluZSAyMTIwPC9hPgogICAgPC9saT48L3VsPjwvZGQ+CiAgICAKCiAgICAKCiAgICAKCiAgICAKPC9kbD4KCiAgICAKICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICA8aDU+UmV0dXJuczo8L2g1PgogICAgCiAgICAgICAgICAgIAo8ZGl2IGNsYXNzPSJwYXJhbS1kZXNjIHRhZy1yZXR1cm5zIj4KICAgIDxwPk51bGwgdG8gdW5zZXQgaGFuZGxlciB2YXJpYWJsZXMuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bGw8L3NwYW4+Cgp9Cgo8L2Rpdj4KCgogICAgICAgIAogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+Ly8gZGVzdHJveSB0aGUgc2NlbmUgd2l0aG91dCByZXNldHRpbmcgdGhlIHBpbiBhbmQgdHdlZW4gdG8gdGhlaXIgaW5pdGlhbCBwb3NpdGlvbnMNc2NlbmUgPSBzY2VuZS5kZXN0cm95KCk7DQ0vLyBkZXN0cm95IHRoZSBzY2VuZSBhbmQgcmVzZXQgdGhlIHBpbiBhbmQgdHdlZW4Nc2NlbmUgPSBzY2VuZS5kZXN0cm95KHRydWUpOzwvcHJlPgoKCiAgICAKPC9kZD4KCiAgICAgICAgCiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJwcm9ncmVzcyI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+cHJvZ3Jlc3M8c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oPHNwYW4gY2xhc3M9Im9wdGlvbmFsIj5wcm9ncmVzczwvc3Bhbj4pPC9zcGFuPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+ICZyYXJyOyB7bnVtYmVyfTwvc3Bhbj48L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD48c3Ryb25nPkdldDwvc3Ryb25nPiBvciA8c3Ryb25nPlNldDwvc3Ryb25nPiB0aGUgc2NlbmUncyBwcm9ncmVzcy48YnI+VXN1YWxseSBpdCBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5IHRvIHVzZSB0aGlzIGFzIGEgc2V0dGVyLCBhcyBpdCBpcyBzZXQgYXV0b21hdGljYWxseSBieSBzY2VuZS51cGRhdGUoKS48YnI+VGhlIG9yZGVyIGluIHdoaWNoIHRoZSBldmVudHMgYXJlIGZpcmVkIGRlcGVuZHMgb24gdGhlIGR1cmF0aW9uIG9mIHRoZSBzY2VuZTo8L3A+CjxvbD4KPGxpPlNjZW5lcyB3aXRoIDxjb2RlPmR1cmF0aW9uID09IDA8L2NvZGU+Ojxicj5TY2VuZXMgdGhhdCBoYXZlIG5vIGR1cmF0aW9uIGJ5IGRlZmluaXRpb24gaGF2ZSBubyBlbmRpbmcuIFRodXMgdGhlIDxjb2RlPmVuZDwvY29kZT4gZXZlbnQgd2lsbCBuZXZlciBiZSBmaXJlZC48YnI+V2hlbiB0aGUgdHJpZ2dlciBwb3NpdGlvbiBvZiB0aGUgc2NlbmUgaXMgcGFzc2VkIHRoZSBldmVudHMgYXJlIGFsd2F5cyBmaXJlZCBpbiB0aGlzIG9yZGVyOjxicj48Y29kZT5lbnRlcjwvY29kZT4sIDxjb2RlPnN0YXJ0PC9jb2RlPiwgPGNvZGU+cHJvZ3Jlc3M8L2NvZGU+IHdoZW4gc2Nyb2xsaW5nIGZvcndhcmQ8YnI+YW5kPGJyPjxjb2RlPnByb2dyZXNzPC9jb2RlPiwgPGNvZGU+c3RhcnQ8L2NvZGU+LCA8Y29kZT5sZWF2ZTwvY29kZT4gd2hlbiBzY3JvbGxpbmcgaW4gcmV2ZXJzZTwvbGk+CjxsaT5TY2VuZXMgd2l0aCA8Y29kZT5kdXJhdGlvbiAmZ3Q7IDA8L2NvZGU+Ojxicj5TY2VuZXMgd2l0aCBhIHNldCBkdXJhdGlvbiBoYXZlIGEgZGVmaW5lZCBzdGFydCBhbmQgZW5kIHBvaW50Ljxicj5XaGVuIHNjcm9sbGluZyBwYXN0IHRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc2NlbmUgaXQgd2lsbCBmaXJlIHRoZXNlIGV2ZW50cyBpbiB0aGlzIG9yZGVyOjxicj48Y29kZT5lbnRlcjwvY29kZT4sIDxjb2RlPnN0YXJ0PC9jb2RlPiwgPGNvZGU+cHJvZ3Jlc3M8L2NvZGU+PGJyPldoZW4gY29udGludWluZyB0byBzY3JvbGwgYW5kIHBhc3NpbmcgdGhlIGVuZCBwb2ludCBpdCB3aWxsIGZpcmUgdGhlc2UgZXZlbnRzOjxicj48Y29kZT5wcm9ncmVzczwvY29kZT4sIDxjb2RlPmVuZDwvY29kZT4sIDxjb2RlPmxlYXZlPC9jb2RlPjxicj5XaGVuIHJldmVyc2luZyB0aHJvdWdoIHRoZSBlbmQgcG9pbnQgdGhlc2UgZXZlbnRzIGFyZSBmaXJlZDo8YnI+PGNvZGU+ZW50ZXI8L2NvZGU+LCA8Y29kZT5lbmQ8L2NvZGU+LCA8Y29kZT5wcm9ncmVzczwvY29kZT48YnI+QW5kIHdoZW4gY29udGludWluZyB0byBzY3JvbGwgcGFzdCB0aGUgc3RhcnQgcG9zaXRpb24gaW4gcmV2ZXJzZSBpdCB3aWxsIGZpcmU6PGJyPjxjb2RlPnByb2dyZXNzPC9jb2RlPiwgPGNvZGU+c3RhcnQ8L2NvZGU+LCA8Y29kZT5sZWF2ZTwvY29kZT48YnI+SW4gYmV0d2VlbiBzdGFydCBhbmQgZW5kIHRoZSA8Y29kZT5wcm9ncmVzczwvY29kZT4gZXZlbnQgd2lsbCBiZSBjYWxsZWQgY29uc3RhbnRseSwgd2hlbmV2ZXIgdGhlIHByb2dyZXNzIGNoYW5nZXMuPC9saT4KPC9vbD4KPHA+SW4gc2hvcnQ6PGJyPjxjb2RlPmVudGVyPC9jb2RlPiBldmVudHMgd2lsbCBhbHdheXMgdHJpZ2dlciA8c3Ryb25nPmJlZm9yZTwvc3Ryb25nPiB0aGUgcHJvZ3Jlc3MgdXBkYXRlIGFuZCA8Y29kZT5sZWF2ZTwvY29kZT4gZW52ZW50cyB3aWxsIHRyaWdnZXIgPHN0cm9uZz5hZnRlcjwvc3Ryb25nPiB0aGUgcHJvZ3Jlc3MgdXBkYXRlLjxicj48Y29kZT5zdGFydDwvY29kZT4gYW5kIDxjb2RlPmVuZDwvY29kZT4gd2lsbCBhbHdheXMgdHJpZ2dlciBhdCB0aGVpciByZXNwZWN0aXZlIHBvc2l0aW9uLjwvcD4KPHA+UGxlYXNlIHJldmlldyB0aGUgZXZlbnQgZGVzY3JpcHRpb25zIGZvciBkZXRhaWxzIG9uIHRoZSBldmVudHMgYW5kIHRoZSBldmVudCBvYmplY3QgdGhhdCBpcyBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+UGFyYW1ldGVyczo8L2g1PgogICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5wcm9ncmVzczwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5udW1iZXI8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgbmV3IHByb2dyZXNzIHZhbHVlIG9mIHRoZSBzY2VuZSA8Y29kZT5bMC0xXTwvY29kZT4uPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0xNjIwIj5saW5lIDE2MjA8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCiAgICA8aDU+RmlyZXM6PC9oNT4KICAgIDx1bD4KICAgICAgICA8bGk+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDplbnRlciI+PGNvZGU+U2Nyb2xsU2NlbmUuZXZlbnQ6ZW50ZXI8L2NvZGU+PC9hPiwgd2hlbiB1c2VkIGFzIHNldHRlcjwvbGk+CiAgICAKICAgICAgICA8bGk+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDpzdGFydCI+PGNvZGU+U2Nyb2xsU2NlbmUuZXZlbnQ6c3RhcnQ8L2NvZGU+PC9hPiwgd2hlbiB1c2VkIGFzIHNldHRlcjwvbGk+CiAgICAKICAgICAgICA8bGk+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDpwcm9ncmVzcyI+PGNvZGU+U2Nyb2xsU2NlbmUuZXZlbnQ6cHJvZ3Jlc3M8L2NvZGU+PC9hPiwgd2hlbiB1c2VkIGFzIHNldHRlcjwvbGk+CiAgICAKICAgICAgICA8bGk+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDplbmQiPjxjb2RlPlNjcm9sbFNjZW5lLmV2ZW50OmVuZDwvY29kZT48L2E+LCB3aGVuIHVzZWQgYXMgc2V0dGVyPC9saT4KICAgIAogICAgICAgIDxsaT48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OmxlYXZlIj48Y29kZT5TY3JvbGxTY2VuZS5ldmVudDpsZWF2ZTwvY29kZT48L2E+LCB3aGVuIHVzZWQgYXMgc2V0dGVyPC9saT4KICAgIDwvdWw+CiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIDx1bD4KICAgICAgICAgICAgPGxpPgo8ZGl2IGNsYXNzPSJwYXJhbS1kZXNjIHRhZy1yZXR1cm5zIj4KICAgIDxwPjxjb2RlPmdldDwvY29kZT4gLSAgQ3VycmVudCBzY2VuZSBwcm9ncmVzcy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgoKfQoKPC9kaXY+Cgo8L2xpPgogICAgICAgIAogICAgICAgICAgICA8bGk+CjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+PGNvZGU+c2V0PC9jb2RlPiAtICBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKfQoKPC9kaXY+Cgo8L2xpPgogICAgICAgIDwvdWw+CiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij4vLyBnZXQgdGhlIGN1cnJlbnQgc2NlbmUgcHJvZ3Jlc3MNdmFyIHByb2dyZXNzID0gc2NlbmUucHJvZ3Jlc3MoKTsNDS8vIHNldCBuZXcgc2NlbmUgcHJvZ3Jlc3MNc2NlbmUucHJvZ3Jlc3MoMC4zKTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0icmVmcmVzaCI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+cmVmcmVzaDxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPigpPC9zcGFuPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+ICZyYXJyOyB7PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+fTwvc3Bhbj48L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD5VcGRhdGVzIGR5bmFtaWMgc2NlbmUgdmFyaWFibGVzIGxpa2UgdGhlIHRyaWdnZXIgZWxlbWVudCBwb3NpdGlvbiBvciB0aGUgZHVyYXRpb24uClRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIGluIHJlZ3VsYXIgaW50ZXJ2YWxzIGZyb20gdGhlIGNvbnRyb2xsZXIuIFNlZSA8YSBocmVmPSJTY3JvbGxNYWdpYy5odG1sIj48Y29kZT5TY3JvbGxNYWdpYzwvY29kZT48L2E+IG9wdGlvbiA8Y29kZT5yZWZyZXNoSW50ZXJ2YWw8L2NvZGU+LjwvcD4KPHA+WW91IGNhbiBjYWxsIGl0IHRvIG1pbmltaXplIGxhZywgZm9yIGV4YW1wbGUgd2hlbiB5b3UgaW50ZW50aW9uYWxseSBjaGFuZ2UgdGhlIHBvc2l0aW9uIG9mIHRoZSB0cmlnZ2VyRWxlbWVudC4KSWYgeW91IGRvbid0IGl0IHdpbGwgc2ltcGx5IGJlIHVwZGF0ZWQgaW4gdGhlIG5leHQgcmVmcmVzaCBpbnRlcnZhbCBvZiB0aGUgY29udGFpbmVyLCB3aGljaCBpcyB1c3VhbGx5IHN1ZmZpY2llbnQuPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc2luY2UiPlNpbmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zaW5jZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPjEuMS4wPC9kZD48YnI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTE1NjciPmxpbmUgMTU2NzwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKICAgIDxoNT5GaXJlczo8L2g1PgogICAgPHVsPgogICAgICAgIDxsaT48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OnNoaWZ0Ij48Y29kZT5TY3JvbGxTY2VuZS5ldmVudDpzaGlmdDwvY29kZT48L2E+LCBpZiB0aGUgdHJpZ2dlciBlbGVtZW50IHBvc2l0aW9uIG9yIHRoZSBkdXJhdGlvbiBjaGFuZ2VkPC9saT4KICAgIAogICAgICAgIDxsaT48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OmNoYW5nZSI+PGNvZGU+U2Nyb2xsU2NlbmUuZXZlbnQ6Y2hhbmdlPC9jb2RlPjwvYT4sIGlmIHRoZSBkdXJhdGlvbiBjaGFuZ2VkPC9saT4KICAgIDwvdWw+CiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIAogICAgICAgICAgICAKPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD5QYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKfQoKPC9kaXY+CgoKICAgICAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPnNjZW5lID0gbmV3IFNjcm9sbFNjZW5lKHt0cmlnZ2VyRWxlbWVudDogIiN0cmlnZ2VyIn0pOw0NLy8gY2hhbmdlIHRoZSBwb3NpdGlvbiBvZiB0aGUgdHJpZ2dlcg0kKCIjdHJpZ2dlciIpLmNzcygidG9wIiwgNTAwKTsNLy8gaW1tZWRpYXRlbHkgbGV0IHRoZSBzY2VuZSBrbm93IG9mIHRoaXMgY2hhbmdlDXNjZW5lLnJlZnJlc2goKTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0icmVtb3ZlIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5yZW1vdmU8c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oKTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPiAmcmFycjsgezxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPn08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+UmVtb3ZlIHRoZSBzY2VuZSBmcm9tIGl0cyBwYXJlbnQgY29udHJvbGxlci48YnI+VGhpcyBpcyB0aGUgZXF1aXZhbGVudCB0byA8Y29kZT5TY3JvbGxNYWdpYy5yZW1vdmVTY2VuZShzY2VuZSk8L2NvZGU+LgpUaGUgc2NlbmUgd2lsbCBub3QgYmUgdXBkYXRlZCBhbnltb3JlIHVudGlsIHlvdSByZWFkZCBpdCB0byBhIGNvbnRyb2xsZXIuClRvIHJlbW92ZSB0aGUgcGluIG9yIHRoZSB0d2VlbiB5b3UgbmVlZCB0byBjYWxsIHJlbW92ZVR3ZWVuKCkgb3IgcmVtb3ZlUGluKCkgcmVzcGVjdGl2ZWx5LjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTIwOTYiPmxpbmUgMjA5NjwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIAogICAgICAgICAgICAKPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD5QYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKfQoKPC9kaXY+CgoKICAgICAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIHJlbW92ZSB0aGUgc2NlbmUgZnJvbSBpdHMgcGFyZW50IGNvbnRyb2xsZXINc2NlbmUucmVtb3ZlKCk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9InJlbW92ZUNsYXNzVG9nZ2xlIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5yZW1vdmVDbGFzc1RvZ2dsZTxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPig8c3BhbiBjbGFzcz0ib3B0aW9uYWwiPnJlc2V0PC9zcGFuPik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHs8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT59PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPlJlbW92ZSB0aGUgY2xhc3MgYmluZGluZyBmcm9tIHRoZSBzY2VuZS48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PlBhcmFtZXRlcnM6PC9oNT4KICAgICAgICAKCjx0YWJsZSBjbGFzcz0icGFyYW1zIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCQk8dGg+QXJndW1lbnQ8L3RoPgoJCQoKCQkKCQk8dGg+RGVmYXVsdDwvdGg+CgkJCgoJCTx0aCBjbGFzcz0ibGFzdCI+RGVzY3JpcHRpb248L3RoPgoJPC90cj4KCTwvdGhlYWQ+CgoJPHRib2R5PgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnJlc2V0PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPmJvb2xlYW48L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJkZWZhdWx0Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5JZiA8Y29kZT5mYWxzZTwvY29kZT4gYW5kIHRoZSBjbGFzc2VzIGFyZSBjdXJyZW50bHkgYWN0aXZlLCB0aGV5IHdpbGwgcmVtYWluIG9uIHRoZSBlbGVtZW50LiBJZiA8Y29kZT50cnVlPC9jb2RlPiB0aGV5IHdpbGwgYmUgcmVtb3ZlZC48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTIwMTEiPmxpbmUgMjAxMTwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIAogICAgICAgICAgICAKPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD5QYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKfQoKPC9kaXY+CgoKICAgICAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIHJlbW92ZSBjbGFzcyBiaW5kaW5nIGZyb20gdGhlIHNjZW5lIHdpdGhvdXQgcmVzZXQNc2NlbmUucmVtb3ZlQ2xhc3NUb2dnbGUoKTsNDS8vIHJlbW92ZSBjbGFzcyBiaW5kaW5nIGFuZCByZW1vdmUgdGhlIGNoYW5nZXMgaXQgY2F1c2VkDXNjZW5lLnJlbW92ZUNsYXNzVG9nZ2xlKHRydWUpOzwvcHJlPgoKCiAgICAKPC9kZD4KCiAgICAgICAgCiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJyZW1vdmVQaW4iPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+PC9zcGFuPnJlbW92ZVBpbjxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPig8c3BhbiBjbGFzcz0ib3B0aW9uYWwiPnJlc2V0PC9zcGFuPik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHs8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT59PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPlJlbW92ZSB0aGUgcGluIGZyb20gdGhlIHNjZW5lLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+UGFyYW1ldGVyczo8L2g1PgogICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoJCTx0aD5EZWZhdWx0PC90aD4KCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+cmVzZXQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+Ym9vbGVhbjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPklmIDxjb2RlPmZhbHNlPC9jb2RlPiB0aGUgc3BhY2VyIHdpbGwgbm90IGJlIHJlbW92ZWQgYW5kIHRoZSBlbGVtZW50J3MgcG9zaXRpb24gd2lsbCBub3QgYmUgcmVzZXQuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0xOTQ4Ij5saW5lIDE5NDg8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIDxoNT5SZXR1cm5zOjwvaDU+CiAgICAKICAgICAgICAgICAgCjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+UGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPjwvc3Bhbj4KCn0KCjwvZGl2PgoKCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij4vLyByZW1vdmUgdGhlIHBpbiBmcm9tIHRoZSBzY2VuZSB3aXRob3V0IHJlc2V0dGluZyBpdCAodGhlIHNwYWNlciBpcyBub3QgcmVtb3ZlZCkNc2NlbmUucmVtb3ZlUGluKCk7DQ0vLyByZW1vdmUgdGhlIHBpbiBmcm9tIHRoZSBzY2VuZSBhbmQgcmVzZXQgdGhlIHBpbiBlbGVtZW50IHRvIGl0cyBpbml0aWFsIHBvc2l0aW9uIChzcGFjZXIgaXMgcmVtb3ZlZCkNc2NlbmUucmVtb3ZlUGluKHRydWUpOzwvcHJlPgoKCiAgICAKPC9kZD4KCiAgICAgICAgCiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJyZW1vdmVUd2VlbiI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+cmVtb3ZlVHdlZW48c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oPHNwYW4gY2xhc3M9Im9wdGlvbmFsIj5yZXNldDwvc3Bhbj4pPC9zcGFuPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+ICZyYXJyOyB7PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+fTwvc3Bhbj48L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD5SZW1vdmUgdGhlIHR3ZWVuIGZyb20gdGhlIHNjZW5lLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+UGFyYW1ldGVyczo8L2g1PgogICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoJCTx0aD5EZWZhdWx0PC90aD4KCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+cmVzZXQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+Ym9vbGVhbjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPklmIDxjb2RlPnRydWU8L2NvZGU+IHRoZSB0d2VlbiB3aWxsIGJlIHJlc2V0IHRvIGl0cyBpbml0aWFsIHZhbHVlcy48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTE3ODIiPmxpbmUgMTc4MjwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIAogICAgICAgICAgICAKPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD5QYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKfQoKPC9kaXY+CgoKICAgICAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIHJlbW92ZSB0aGUgdHdlZW4gZnJvbSB0aGUgc2NlbmUgd2l0aG91dCByZXNldHRpbmcgaXQNc2NlbmUucmVtb3ZlVHdlZW4oKTsNDS8vIHJlbW92ZSB0aGUgdHdlZW4gZnJvbSB0aGUgc2NlbmUgYW5kIHJlc2V0IGl0IHRvIGluaXRpYWwgcG9zaXRpb24Nc2NlbmUucmVtb3ZlVHdlZW4odHJ1ZSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9InNldENsYXNzVG9nZ2xlIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5zZXRDbGFzc1RvZ2dsZTxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPihlbGVtZW50LCBjbGFzc2VzKTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPiAmcmFycjsgezxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPn08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+RGVmaW5lIGEgY3NzIGNsYXNzIG1vZGlmaWNhdGlvbiB3aGlsZSB0aGUgc2NlbmUgaXMgYWN0aXZlLjxicj5XaGVuIHRoZSBzY2VuZSB0cmlnZ2VycyB0aGUgY2xhc3NlcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBzdXBwbGllZCBlbGVtZW50IGFuZCByZW1vdmVkLCB3aGVuIHRoZSBzY2VuZSBpcyBvdmVyLgpJZiB0aGUgc2NlbmUgZHVyYXRpb24gaXMgMCB0aGUgY2xhc3NlcyB3aWxsIG9ubHkgYmUgcmVtb3ZlZCBpZiB0aGUgdXNlciBzY3JvbGxzIGJhY2sgcGFzdCB0aGUgc3RhcnQgcG9zaXRpb24uPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgICAgIDxoNT5QYXJhbWV0ZXJzOjwvaDU+CiAgICAgICAgCgo8dGFibGUgY2xhc3M9InBhcmFtcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5lbGVtZW50PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KfAoKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm9iamVjdDwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkEgU2VsZWN0b3IgdGFyZ2V0aW5nIG9uZSBvciBtb3JlIGVsZW1lbnRzLCBhIERPTSBvYmplY3Qgb3IgYSBqUXVlcnkgb2JqZWN0IHRoYXQgaXMgc3VwcG9zZWQgdG8gYmUgbW9kaWZpZWQuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+Y2xhc3NlczwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5PbmUgb3IgbW9yZSBDbGFzc25hbWVzIChzZXBhcmF0ZWQgYnkgc3BhY2UpIHRoYXQgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50IGR1cmluZyB0aGUgc2NlbmUuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0xOTg0Ij5saW5lIDE5ODQ8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIDxoNT5SZXR1cm5zOjwvaDU+CiAgICAKICAgICAgICAgICAgCjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+UGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPjwvc3Bhbj4KCn0KCjwvZGl2PgoKCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij4vLyBhZGQgdGhlIGNsYXNzICdteWNsYXNzJyB0byB0aGUgZWxlbWVudCB3aXRoIHRoZSBpZCAnbXktZWxlbScgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgc2NlbmUNc2NlbmUuc2V0Q2xhc3NUb2dnbGUoIiNteS1lbGVtIiwgIm15Y2xhc3MiKTsNDS8vIGFkZCBtdWx0aXBsZSBjbGFzc2VzIHRvIG11bHRpcGxlIGVsZW1lbnRzIGRlZmluZWQgYnkgdGhlIHNlbGVjdG9yICcuY2xhc3NDaGFuZ2UnDXNjZW5lLnNldENsYXNzVG9nZ2xlKCIuY2xhc3NDaGFuZ2UiLCAiY2xhc3MxIGNsYXNzMiBjbGFzczMiKTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0ic2V0UGluIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5zZXRQaW48c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oZWxlbWVudCwgPHNwYW4gY2xhc3M9Im9wdGlvbmFsIj5zZXR0aW5nczwvc3Bhbj4pPC9zcGFuPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+ICZyYXJyOyB7PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+fTwvc3Bhbj48L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD5QaW4gYW4gZWxlbWVudCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSB0d2Vlbi48YnI+SWYgdGhlIHNjZW5lIGR1cmF0aW9uIGlzIDAgdGhlIGVsZW1lbnQgd2lsbCBvbmx5IGJlIHVucGlubmVkLCBpZiB0aGUgdXNlciBzY3JvbGxzIGJhY2sgcGFzdCB0aGUgc3RhcnQgcG9zaXRpb24uPGJyPjxlbT48c3Ryb25nPk5PVEU6PC9zdHJvbmc+IFRoZSBvcHRpb24gPGNvZGU+cHVzaEZvbGxvd2VyczwvY29kZT4gaGFzIG5vIGVmZmVjdCwgd2hlbiB0aGUgc2NlbmUgZHVyYXRpb24gaXMgMC48L2VtPjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+UGFyYW1ldGVyczo8L2g1PgogICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5lbGVtZW50PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KfAoKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm9iamVjdDwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+QSBTZWxlY3RvciB0YXJnZXRpbmcgYW4gZWxlbWVudCwgYSBET00gb2JqZWN0IG9yIGEgalF1ZXJ5IG9iamVjdCB0aGF0IGlzIHN1cHBvc2VkIHRvIGJlIHBpbm5lZC48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5zZXR0aW5nczwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5vYmplY3Q8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5zZXR0aW5ncyBmb3IgdGhlIHBpbjwvcD4KICAgICAgICAgICAgICAgIDxoNj5Qcm9wZXJ0aWVzPC9oNj4KICAgICAgICAgICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoJCTx0aD5EZWZhdWx0PC90aD4KCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+cHVzaEZvbGxvd2VyczwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5ib29sZWFuPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB0cnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5JZiA8Y29kZT50cnVlPC9jb2RlPiBmb2xsb3dpbmcgZWxlbWVudHMgd2lsbCBiZSAmcXVvdDtwdXNoZWQmcXVvdDsgZG93biBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBwaW4sIGlmIDxjb2RlPmZhbHNlPC9jb2RlPiB0aGUgcGlubmVkIGVsZW1lbnQgd2lsbCBqdXN0IHNjcm9sbCBwYXN0IHRoZW0uPGJyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElnbm9yZWQsIHdoZW4gZHVyYXRpb24gaXMgPGNvZGU+MDwvY29kZT4uPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+c3BhY2VyQ2xhc3M8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAic2Nyb2xsbWFnaWMtcGluLXNwYWNlciIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkNsYXNzbmFtZSBvZiB0aGUgcGluIHNwYWNlciBlbGVtZW50LCB3aGljaCBpcyB1c2VkIHRvIHJlcGxhY2UgdGhlIGVsZW1lbnQuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+cGlubmVkQ2xhc3M8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAiIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+Q2xhc3NuYW1lIHRoYXQgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBwaW5uZWQgZWxlbWVudCBkdXJpbmcgcGluIHBoYXNlIChhbmQgcmVtb3ZlZCBhZnRlcikuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgICAgICAgICA8L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc291cmNlIj5Tb3VyY2U6PC9kdD4KICAgIDxkZCBjbGFzcz0idGFnLXNvdXJjZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPgogICAgICAgIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sIj5qcXVlcnkuc2Nyb2xsbWFnaWMuanM8L2E+LCA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCNzdW5saWdodC0xLWxpbmUtMTgxNSI+bGluZSAxODE1PC9hPgogICAgPC9saT48L3VsPjwvZGQ+CiAgICAKCiAgICAKCiAgICAKCiAgICAKPC9kbD4KCiAgICAKICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICA8aDU+UmV0dXJuczo8L2g1PgogICAgCiAgICAgICAgICAgIAo8ZGl2IGNsYXNzPSJwYXJhbS1kZXNjIHRhZy1yZXR1cm5zIj4KICAgIDxwPlBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+Cgp9Cgo8L2Rpdj4KCgogICAgICAgIAogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+Ly8gcGluIGVsZW1lbnQgYW5kIHB1c2ggYWxsIGZvbGxvd2luZyBlbGVtZW50cyBkb3duIGJ5IHRoZSBhbW91bnQgb2YgdGhlIHBpbiBkdXJhdGlvbi4Nc2NlbmUuc2V0UGluKCIjcGluIik7DQ0vLyBwaW4gZWxlbWVudCBhbmQga2VlcGluZyBhbGwgZm9sbG93aW5nIGVsZW1lbnRzIGluIHRoZWlyIHBsYWNlLiBUaGUgcGlubmVkIGVsZW1lbnQgd2lsbCBtb3ZlIHBhc3QgdGhlbS4Nc2NlbmUuc2V0UGluKCIjcGluIiwge3B1c2hGb2xsb3dlcnM6IGZhbHNlfSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9InNldFR3ZWVuIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5zZXRUd2VlbjxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPihUd2Vlbk9iamVjdCk8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHs8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT59PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPkFkZCBhIHR3ZWVuIHRvIHRoZSBzY2VuZS48YnI+SWYgeW91IHdhbnQgdG8gYWRkIG11bHRpcGxlIHR3ZWVucywgd3JhcCB0aGVtIGludG8gb25lIFRpbWVsaW5lTWF4IG9iamVjdCBhbmQgYWRkIGl0Ljxicj5UaGUgZHVyYXRpb24gb2YgdGhlIHR3ZWVuIGlzIHN0cmVjaGVkIHRvIHRoZSBzY3JvbGwgZHVyYXRpb24gb2YgdGhlIHNjZW5lLCB1bmxlc3MgdGhlIHNjZW5lIGhhcyBhIGR1cmF0aW9uIG9mIDxjb2RlPjA8L2NvZGU+LjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+UGFyYW1ldGVyczo8L2g1PgogICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+VHdlZW5PYmplY3Q8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+b2JqZWN0PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+QSBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCBvciBUaW1lbGluZUxpdGUgb2JqZWN0IHRoYXQgc2hvdWxkIGJlIGFuaW1hdGVkIGluIHRoZSBzY2VuZS48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTE3MDMiPmxpbmUgMTcwMzwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIAogICAgICAgICAgICAKPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD5QYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKfQoKPC9kaXY+CgoKICAgICAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIGFkZCBhIHNpbmdsZSB0d2Vlbg1zY2VuZS5zZXRUd2VlbihUd2Vlbk1heC50bygib2JqIiksIDEsIHt4OiAxMDB9KTsNDS8vIGFkZCBtdWx0aXBsZSB0d2VlbnMsIHdyYXBwZWQgaW4gYSB0aW1lbGluZS4NdmFyIHRpbWVsaW5lID0gbmV3IFRpbWVsaW5lTWF4KCk7DXZhciB0d2VlbjEgPSBUd2Vlbk1heC5mcm9tKCJvYmoxIiwgMSwge3g6IDEwMH0pOw12YXIgdHdlZW4yID0gVHdlZW5NYXgudG8oIm9iajIiLCAxLCB7eTogMTAwfSk7DXRpbWVsaW5lDQkJLmFkZCh0d2VlbjEpDQkJLmFkZCh0d2VlbjIpOw1zY2VuZS5hZGRUd2Vlbih0aW1lbGluZSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9InVwZGF0ZSI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+dXBkYXRlPHNwYW4gY2xhc3M9InNpZ25hdHVyZSI+KDxzcGFuIGNsYXNzPSJvcHRpb25hbCI+aW1tZWRpYXRlbHk8L3NwYW4+KTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPiAmcmFycjsgezxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPn08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+VXBkYXRlcyB0aGUgU2NlbmUgaW4gdGhlIHBhcmVudCBDb250cm9sbGVyIHRvIHJlZmxlY3QgdGhlIGN1cnJlbnQgc3RhdGUuPGJyPlRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgdG8gPGNvZGU+U2Nyb2xsTWFnaWMudXBkYXRlU2NlbmUoc2NlbmUsIGltbWVkaWF0ZWx5KTwvY29kZT4uPGJyPlRoZSB1cGRhdGUgbWV0aG9kIGNhbGN1bGF0ZXMgdGhlIHNjZW5lJ3Mgc3RhcnQgYW5kIGVuZCBwb3NpdGlvbiAoYmFzZWQgb24gdGhlIHRyaWdnZXIgZWxlbWVudCwgdHJpZ2dlciBob29rLCBkdXJhdGlvbiBhbmQgb2Zmc2V0KSBhbmQgY2hlY2tzIGl0IGFnYWluc3QgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBjb250YWluZXIuPGJyPkl0IHRoZW4gdXBkYXRlcyB0aGUgY3VycmVudCBzY2VuZSBzdGF0ZSBhY2NvcmRpbmdseSAob3IgZG9lcyBub3RoaW5nLCBpZiB0aGUgc3RhdGUgaXMgYWxyZWFkeSBjb3JyZWN0KSDigJMgUGlucyB3aWxsIGJlIHNldCB0byB0aGVpciBjb3JyZWN0IHBvc2l0aW9uIGFuZCB0d2VlbnMgd2lsbCBiZSB1cGRhdGVkIHRvIHRoZWlyIGNvcnJlY3QgcHJvZ3Jlc3MuClRoaXMgbWVhbnMgYW4gdXBkYXRlIGRvZXNuJ3QgbmVjZXNzYXJpbHkgcmVzdWx0IGluIGEgcHJvZ3Jlc3MgY2hhbmdlLiBUaGUgPGNvZGU+cHJvZ3Jlc3M8L2NvZGU+IGV2ZW50IHdpbGwgYmUgZmlyZWQgaWYgdGhlIHByb2dyZXNzIGhhcyBpbmRlZWQgY2hhbmdlZCBiZXR3ZWVuIHRoaXMgdXBkYXRlIGFuZCB0aGUgbGFzdC48YnI+PGVtPjxzdHJvbmc+Tk9URTo8L3N0cm9uZz4gVGhpcyBtZXRob2QgZ2V0cyBjYWxsZWQgY29uc3RhbnRseSB3aGVuZXZlciBTY3JvbGxNYWdpYyBkZXRlY3RzIGEgY2hhbmdlLiBUaGUgb25seSBhcHBsaWNhdGlvbiBmb3IgeW91IGlzIGlmIHlvdSBjaGFuZ2Ugc29tZXRoaW5nIG91dHNpZGUgb2YgdGhlIHJlYWxtIG9mIFNjcm9sbE1hZ2ljLCBsaWtlIG1vdmluZyB0aGUgdHJpZ2dlciBvciBjaGFuZ2luZyB0d2VlbiBwYXJhbWV0ZXJzLjwvZW0+PC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgICAgIDxoNT5QYXJhbWV0ZXJzOjwvaDU+CiAgICAgICAgCgo8dGFibGUgY2xhc3M9InBhcmFtcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgkJPHRoPkFyZ3VtZW50PC90aD4KCQkKCgkJCgkJPHRoPkRlZmF1bHQ8L3RoPgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5pbW1lZGlhdGVseTwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5ib29sZWFuPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBmYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+SWYgPGNvZGU+dHJ1ZTwvY29kZT4gdGhlIHVwZGF0ZSB3aWxsIGJlIGluc3RhbnQsIGlmIDxjb2RlPmZhbHNlPC9jb2RlPiBpdCB3aWxsIHdhaXQgdW50aWwgbmV4dCB1cGRhdGUgY3ljbGUgKGJldHRlciBwZXJmb3JtYW5jZSkuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0xNTE4Ij5saW5lIDE1MTg8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCiAgICA8aDU+RmlyZXM6PC9oNT4KICAgIDx1bD4KICAgICAgICA8bGk+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDp1cGRhdGUiPlNjcm9sbFNjZW5lLmV2ZW50OnVwZGF0ZTwvYT48L2xpPgogICAgPC91bD4KICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICA8aDU+UmV0dXJuczo8L2g1PgogICAgCiAgICAgICAgICAgIAo8ZGl2IGNsYXNzPSJwYXJhbS1kZXNjIHRhZy1yZXR1cm5zIj4KICAgIDxwPlBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+Cgp9Cgo8L2Rpdj4KCgogICAgICAgIAogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+Ly8gdXBkYXRlIHRoZSBzY2VuZSBvbiBuZXh0IHRpY2sNc2NlbmUudXBkYXRlKCk7DQ0vLyB1cGRhdGUgdGhlIHNjZW5lIGltbWVkaWF0ZWx5DXNjZW5lLnVwZGF0ZSh0cnVlKTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIDwvZGw+CiAgICAKICAgICAgICA8aDMgY2xhc3M9InN1YnNlY3Rpb24tdGl0bGUiPlNjZW5lIFBhcmFtZXRlcnMgKGdldHRlciAvIHNldHRlcik8L2gzPgoKICAgICAgICA8ZGw+CiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJkdXJhdGlvbiI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+ZHVyYXRpb248c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oPHNwYW4gY2xhc3M9Im9wdGlvbmFsIj5uZXdEdXJhdGlvbjwvc3Bhbj4pPC9zcGFuPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+ICZyYXJyOyB7bnVtYmVyfTwvc3Bhbj48L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD48c3Ryb25nPkdldDwvc3Ryb25nPiBvciA8c3Ryb25nPlNldDwvc3Ryb25nPiB0aGUgZHVyYXRpb24gb3B0aW9uIHZhbHVlLgpBcyBhIHNldHRlciBpdCBhbHNvIGFjY2VwdHMgYSBmdW5jdGlvbiByZXR1cm5pbmcgYSBudW1lcmljIHZhbHVlLjxicj5UaGlzIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHJlc3BvbnNpdmUgc2V0dXBzLjwvcD4KPHA+VGhlIGR1cmF0aW9uIGlzIHVwZGF0ZWQgdXNpbmcgdGhlIHN1cHBsaWVkIGZ1bmN0aW9uIGV2ZXJ5IHRpbWUgPGNvZGU+U2Nyb2xsU2NlbmUucmVmcmVzaCgpPC9jb2RlPiBpcyBjYWxsZWQsIHdoaWNoIGhhcHBlbnMgcGVyaW9kaWNhbGx5IGZyb20gdGhlIGNvbnRyb2xsZXIgKHNlZSBTY3JvbGxNYWdpYyBvcHRpb24gPGNvZGU+cmVmcmVzaEludGVydmFsPC9jb2RlPikuPGJyPjxlbT48c3Ryb25nPk5PVEU6PC9zdHJvbmc+IEJlIGF3YXJlIHRoYXQgaXQncyBhbiBlYXN5IHdheSB0byBraWxsIHBlcmZvcm1hbmNlLCBpZiB5b3Ugc3VwcGx5IGEgZnVuY3Rpb24gdGhhdCBoYXMgaGlnaCBDUFUgZGVtYW5kLjxicj5FdmVuIGZvciBzaXplIGFuZCBwb3NpdGlvbiBjYWxjdWxhdGlvbnMgaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIGEgdmFyaWFibGUgdG8gY2FjaGUgdGhlIHZhbHVlLiAoc2VlIGV4YW1wbGUpPGJyPlRoaXMgY291bnRzIGRvdWJsZSBpZiB5b3UgdXNlIHRoZSBzYW1lIGZ1bmN0aW9uIGZvciBtdWx0aXBsZSBzY2VuZXMuPC9lbT48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PlBhcmFtZXRlcnM6PC9oNT4KICAgICAgICAKCjx0YWJsZSBjbGFzcz0icGFyYW1zIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCQk8dGg+QXJndW1lbnQ8L3RoPgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+bmV3RHVyYXRpb248L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgp8Cgo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+ZnVuY3Rpb248L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgbmV3IGR1cmF0aW9uIG9mIHRoZSBzY2VuZS48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTEyNTIiPmxpbmUgMTI1MjwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKICAgIDxoNT5GaXJlczo8L2g1PgogICAgPHVsPgogICAgICAgIDxsaT48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OmNoYW5nZSI+PGNvZGU+U2Nyb2xsU2NlbmUuZXZlbnQ6Y2hhbmdlPC9jb2RlPjwvYT4sIHdoZW4gdXNlZCBhcyBzZXR0ZXI8L2xpPgogICAgCiAgICAgICAgPGxpPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwjZXZlbnQ6c2hpZnQiPjxjb2RlPlNjcm9sbFNjZW5lLmV2ZW50OnNoaWZ0PC9jb2RlPjwvYT4sIHdoZW4gdXNlZCBhcyBzZXR0ZXI8L2xpPgogICAgPC91bD4KICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICA8aDU+UmV0dXJuczo8L2g1PgogICAgPHVsPgogICAgICAgICAgICA8bGk+CjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+PGNvZGU+Z2V0PC9jb2RlPiAtICBDdXJyZW50IHNjZW5lIGR1cmF0aW9uLjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5udW1iZXI8L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD48Y29kZT5zZXQ8L2NvZGU+IC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgPC91bD4KICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIGdldCB0aGUgY3VycmVudCBkdXJhdGlvbiB2YWx1ZQ12YXIgZHVyYXRpb24gPSBzY2VuZS5kdXJhdGlvbigpOw0NLy8gc2V0IGEgbmV3IGR1cmF0aW9uDXNjZW5lLmR1cmF0aW9uKDMwMCk7DQ0vLyB1c2UgYSBmdW5jdGlvbiB0byBhdXRvbWF0aWNhbGx5IGFkanVzdCB0aGUgZHVyYXRpb24gdG8gdGhlIHdpbmRvdyBoZWlnaHQuDXZhciBkdXJhdGlvblZhbHVlQ2FjaGU7DWZ1bmN0aW9uIGdldER1cmF0aW9uICgpIHsNICByZXR1cm4gZHVyYXRpb25WYWx1ZUNhY2hlOw19DWZ1bmN0aW9uIHVwZGF0ZUR1cmF0aW9uIChlKSB7DSAgZHVyYXRpb25WYWx1ZUNhY2hlID0gJCh3aW5kb3cpLmlubmVySGVpZ2h0KCk7DX0NJCh3aW5kb3cpLm9uKCJyZXNpemUiLCB1cGRhdGVEdXJhdGlvbik7IC8vIHVwZGF0ZSB0aGUgZHVyYXRpb24gd2hlbiB0aGUgd2luZG93IHNpemUgY2hhbmdlcw0kKHdpbmRvdykudHJpZ2dlckhhbmRsZXIoInJlc2l6ZSIpOyAvLyBzZXQgdG8gaW5pdGlhbCB2YWx1ZQ1zY2VuZS5kdXJhdGlvbihnZXREdXJhdGlvbik7IC8vIHN1cHBseSBkdXJhdGlvbiBtZXRob2Q8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0iZW5hYmxlZCI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+ZW5hYmxlZDxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPig8c3BhbiBjbGFzcz0ib3B0aW9uYWwiPm5ld1N0YXRlPC9zcGFuPik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHtib29sZWFufDxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPn08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+PHN0cm9uZz5HZXQ8L3N0cm9uZz4gb3IgPHN0cm9uZz5TZXQ8L3N0cm9uZz4gdGhlIGN1cnJlbnQgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgc2NlbmUuPGJyPlRoaXMgY2FuIGJlIHVzZWQgdG8gZGlzYWJsZSB0aGlzIHNjZW5lIHdpdGhvdXQgcmVtb3Zpbmcgb3IgZGVzdHJveWluZyBpdC48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PlBhcmFtZXRlcnM6PC9oNT4KICAgICAgICAKCjx0YWJsZSBjbGFzcz0icGFyYW1zIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCQk8dGg+QXJndW1lbnQ8L3RoPgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+bmV3U3RhdGU8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+Ym9vbGVhbjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBuZXcgZW5hYmxlZCBzdGF0ZSBvZiB0aGUgc2NlbmUgPGNvZGU+dHJ1ZTwvY29kZT4gb3IgPGNvZGU+ZmFsc2U8L2NvZGU+LjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc291cmNlIj5Tb3VyY2U6PC9kdD4KICAgIDxkZCBjbGFzcz0idGFnLXNvdXJjZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPgogICAgICAgIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sIj5qcXVlcnkuc2Nyb2xsbWFnaWMuanM8L2E+LCA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCNzdW5saWdodC0xLWxpbmUtMjA3NCI+bGluZSAyMDc0PC9hPgogICAgPC9saT48L3VsPjwvZGQ+CiAgICAKCiAgICAKCiAgICAKCiAgICAKPC9kbD4KCiAgICAKICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICA8aDU+UmV0dXJuczo8L2g1PgogICAgCiAgICAgICAgICAgIAo8ZGl2IGNsYXNzPSJwYXJhbS1kZXNjIHRhZy1yZXR1cm5zIj4KICAgIDxwPkN1cnJlbnQgZW5hYmxlZCBzdGF0ZSBvciBwYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+Ym9vbGVhbjwvc3Bhbj4KfAoKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPjwvc3Bhbj4KCn0KCjwvZGl2PgoKCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij4vLyBnZXQgdGhlIGN1cnJlbnQgdmFsdWUNdmFyIGVuYWJsZWQgPSBzY2VuZS5lbmFibGVkKCk7DQ0vLyBkaXNhYmxlIHRoZSBzY2VuZQ1zY2VuZS5lbmFibGVkKGZhbHNlKTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0ibG9nbGV2ZWwiPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+PC9zcGFuPmxvZ2xldmVsPHNwYW4gY2xhc3M9InNpZ25hdHVyZSI+KDxzcGFuIGNsYXNzPSJvcHRpb25hbCI+bmV3TG9nbGV2ZWw8L3NwYW4+KTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPiAmcmFycjsge251bWJlcn08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+PHN0cm9uZz5HZXQ8L3N0cm9uZz4gb3IgPHN0cm9uZz5TZXQ8L3N0cm9uZz4gdGhlIGxvZ2xldmVsIG9wdGlvbiB2YWx1ZS48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PlBhcmFtZXRlcnM6PC9oNT4KICAgICAgICAKCjx0YWJsZSBjbGFzcz0icGFyYW1zIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCQk8dGg+QXJndW1lbnQ8L3RoPgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+bmV3TG9nbGV2ZWw8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIG5ldyBsb2dsZXZlbCBzZXR0aW5nIG9mIHRoZSBzY2VuZS4gPGNvZGU+WzAtM108L2NvZGU+PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0xNDE5Ij5saW5lIDE0MTk8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCiAgICA8aDU+RmlyZXM6PC9oNT4KICAgIDx1bD4KICAgICAgICA8bGk+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDpjaGFuZ2UiPjxjb2RlPlNjcm9sbFNjZW5lLmV2ZW50OmNoYW5nZTwvY29kZT48L2E+LCB3aGVuIHVzZWQgYXMgc2V0dGVyPC9saT4KICAgIDwvdWw+CiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIDx1bD4KICAgICAgICAgICAgPGxpPgo8ZGl2IGNsYXNzPSJwYXJhbS1kZXNjIHRhZy1yZXR1cm5zIj4KICAgIDxwPjxjb2RlPmdldDwvY29kZT4gLSAgQ3VycmVudCBsb2dsZXZlbC48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgoKfQoKPC9kaXY+Cgo8L2xpPgogICAgICAgIAogICAgICAgICAgICA8bGk+CjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+PGNvZGU+c2V0PC9jb2RlPiAtICBQYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKfQoKPC9kaXY+Cgo8L2xpPgogICAgICAgIDwvdWw+CiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij4vLyBnZXQgdGhlIGN1cnJlbnQgbG9nbGV2ZWwNdmFyIGxvZ2xldmVsID0gc2NlbmUubG9nbGV2ZWwoKTsNDS8vIHNldCBuZXcgbG9nbGV2ZWwNc2NlbmUubG9nbGV2ZWwoMyk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9Im9mZnNldCI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+b2Zmc2V0PHNwYW4gY2xhc3M9InNpZ25hdHVyZSI+KDxzcGFuIGNsYXNzPSJvcHRpb25hbCI+bmV3T2Zmc2V0PC9zcGFuPik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHtudW1iZXJ9PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPjxzdHJvbmc+R2V0PC9zdHJvbmc+IG9yIDxzdHJvbmc+U2V0PC9zdHJvbmc+IHRoZSBvZmZzZXQgb3B0aW9uIHZhbHVlLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+UGFyYW1ldGVyczo8L2g1PgogICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5uZXdPZmZzZXQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIG5ldyBvZmZzZXQgb2YgdGhlIHNjZW5lLjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc291cmNlIj5Tb3VyY2U6PC9kdD4KICAgIDxkZCBjbGFzcz0idGFnLXNvdXJjZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPgogICAgICAgIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sIj5qcXVlcnkuc2Nyb2xsbWFnaWMuanM8L2E+LCA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCNzdW5saWdodC0xLWxpbmUtMTI4NCI+bGluZSAxMjg0PC9hPgogICAgPC9saT48L3VsPjwvZGQ+CiAgICAKCiAgICAKCiAgICAKCiAgICAKPC9kbD4KCiAgICAKICAgIAogICAgPGg1PkZpcmVzOjwvaDU+CiAgICA8dWw+CiAgICAgICAgPGxpPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwjZXZlbnQ6Y2hhbmdlIj48Y29kZT5TY3JvbGxTY2VuZS5ldmVudDpjaGFuZ2U8L2NvZGU+PC9hPiwgd2hlbiB1c2VkIGFzIHNldHRlcjwvbGk+CiAgICAKICAgICAgICA8bGk+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDpzaGlmdCI+PGNvZGU+U2Nyb2xsU2NlbmUuZXZlbnQ6c2hpZnQ8L2NvZGU+PC9hPiwgd2hlbiB1c2VkIGFzIHNldHRlcjwvbGk+CiAgICA8L3VsPgogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIDxoNT5SZXR1cm5zOjwvaDU+CiAgICA8dWw+CiAgICAgICAgICAgIDxsaT4KPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD48Y29kZT5nZXQ8L2NvZGU+IC0gIEN1cnJlbnQgc2NlbmUgb2Zmc2V0LjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5udW1iZXI8L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD48Y29kZT5zZXQ8L2NvZGU+IC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgPC91bD4KICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIGdldCB0aGUgY3VycmVudCBvZmZzZXQNdmFyIG9mZnNldCA9IHNjZW5lLm9mZnNldCgpOw0NLy8gc2V0IGEgbmV3IG9mZnNldA1zY2VuZS5vZmZzZXQoMTAwKTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0icmV2ZXJzZSI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+cmV2ZXJzZTxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPig8c3BhbiBjbGFzcz0ib3B0aW9uYWwiPm5ld1JldmVyc2U8L3NwYW4+KTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPiAmcmFycjsge2Jvb2xlYW59PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPjxzdHJvbmc+R2V0PC9zdHJvbmc+IG9yIDxzdHJvbmc+U2V0PC9zdHJvbmc+IHRoZSByZXZlcnNlIG9wdGlvbiB2YWx1ZS48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PlBhcmFtZXRlcnM6PC9oNT4KICAgICAgICAKCjx0YWJsZSBjbGFzcz0icGFyYW1zIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCQk8dGg+QXJndW1lbnQ8L3RoPgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+bmV3UmV2ZXJzZTwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5ib29sZWFuPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIG5ldyByZXZlcnNlIHNldHRpbmcgb2YgdGhlIHNjZW5lLjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc291cmNlIj5Tb3VyY2U6PC9kdD4KICAgIDxkZCBjbGFzcz0idGFnLXNvdXJjZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPgogICAgICAgIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sIj5qcXVlcnkuc2Nyb2xsbWFnaWMuanM8L2E+LCA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCNzdW5saWdodC0xLWxpbmUtMTM2OSI+bGluZSAxMzY5PC9hPgogICAgPC9saT48L3VsPjwvZGQ+CiAgICAKCiAgICAKCiAgICAKCiAgICAKPC9kbD4KCiAgICAKICAgIAogICAgPGg1PkZpcmVzOjwvaDU+CiAgICA8dWw+CiAgICAgICAgPGxpPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwjZXZlbnQ6Y2hhbmdlIj48Y29kZT5TY3JvbGxTY2VuZS5ldmVudDpjaGFuZ2U8L2NvZGU+PC9hPiwgd2hlbiB1c2VkIGFzIHNldHRlcjwvbGk+CiAgICA8L3VsPgogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIDxoNT5SZXR1cm5zOjwvaDU+CiAgICA8dWw+CiAgICAgICAgICAgIDxsaT4KPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD48Y29kZT5nZXQ8L2NvZGU+IC0gIEN1cnJlbnQgcmV2ZXJzZSBvcHRpb24gdmFsdWUuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPmJvb2xlYW48L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD48Y29kZT5zZXQ8L2NvZGU+IC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgPC91bD4KICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIGdldCB0aGUgY3VycmVudCByZXZlcnNlIG9wdGlvbg12YXIgcmV2ZXJzZSA9IHNjZW5lLnJldmVyc2UoKTsNDS8vIHNldCBuZXcgcmV2ZXJzZSBvcHRpb24Nc2NlbmUucmV2ZXJzZShmYWxzZSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9InRyaWdnZXJFbGVtZW50Ij48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj50cmlnZ2VyRWxlbWVudDxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPig8c3BhbiBjbGFzcz0ib3B0aW9uYWwiPm5ld1RyaWdnZXJFbGVtZW50PC9zcGFuPik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHtzdHJpbmd8b2JqZWN0fTwvc3Bhbj48L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD48c3Ryb25nPkdldDwvc3Ryb25nPiBvciA8c3Ryb25nPlNldDwvc3Ryb25nPiB0aGUgdHJpZ2dlckVsZW1lbnQgb3B0aW9uIHZhbHVlLgpEb2VzIDxzdHJvbmc+bm90PC9zdHJvbmc+IGZpcmUgPGNvZGU+U2Nyb2xsU2NlbmUuc2hpZnQ8L2NvZGU+LCBiZWNhdXNlIGNoYW5naW5nIHRoZSB0cmlnZ2VyIEVsZW1lbnQgZG9lc24ndCBuZWNlc3NhcmlseSBtZWFuIHRoZSBzdGFydCBwb3NpdGlvbiBjaGFuZ2VzLiBUaGlzIHdpbGwgYmUgZGV0ZXJtaW5lZCBpbiA8Y29kZT5TY3JvbGxTY2VuZS5yZWZyZXNoKCk8L2NvZGU+LCB3aGljaCBpcyBhdXRvbWF0aWNhbGx5IHRyaWdnZXJlZC48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PlBhcmFtZXRlcnM6PC9oNT4KICAgICAgICAKCjx0YWJsZSBjbGFzcz0icGFyYW1zIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCQk8dGg+QXJndW1lbnQ8L3RoPgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+bmV3VHJpZ2dlckVsZW1lbnQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgp8Cgo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+b2JqZWN0PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIG5ldyB0cmlnZ2VyIGVsZW1lbnQgZm9yIHRoZSBzY2VuZS48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTEzMTUiPmxpbmUgMTMxNTwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKICAgIDxoNT5GaXJlczo8L2g1PgogICAgPHVsPgogICAgICAgIDxsaT48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OmNoYW5nZSI+PGNvZGU+U2Nyb2xsU2NlbmUuZXZlbnQ6Y2hhbmdlPC9jb2RlPjwvYT4sIHdoZW4gdXNlZCBhcyBzZXR0ZXI8L2xpPgogICAgPC91bD4KICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICA8aDU+UmV0dXJuczo8L2g1PgogICAgPHVsPgogICAgICAgICAgICA8bGk+CjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+PGNvZGU+Z2V0PC9jb2RlPiAtICBDdXJyZW50IHRyaWdnZXJFbGVtZW50LjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CnwKCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5vYmplY3Q8L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD48Y29kZT5zZXQ8L2NvZGU+IC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgPC91bD4KICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIGdldCB0aGUgY3VycmVudCB0cmlnZ2VyRWxlbWVudA12YXIgdHJpZ2dlckVsZW1lbnQgPSBzY2VuZS50cmlnZ2VyRWxlbWVudCgpOw0NLy8gc2V0IGEgbmV3IHRyaWdnZXJFbGVtZW50IHVzaW5nIGEgc2VsZWN0b3INc2NlbmUudHJpZ2dlckVsZW1lbnQoIiN0cmlnZ2VyIik7DS8vIHNldCBhIG5ldyB0cmlnZ2VyRWxlbWVudCB1c2luZyBhIGpRdWVyeSBPYmplY3QNc2NlbmUudHJpZ2dlckVsZW1lbnQoJCgiI3RyaWdnZXIiKSk7DS8vIHNldCBhIG5ldyB0cmlnZ2VyRWxlbWVudCB1c2luZyBhIERPTSBvYmplY3QNc2NlbmUudHJpZ2dlckVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRyaWdnZXIiKSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9InRyaWdnZXJIb29rIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj50cmlnZ2VySG9vazxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPig8c3BhbiBjbGFzcz0ib3B0aW9uYWwiPm5ld1RyaWdnZXJIb29rPC9zcGFuPik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHtudW1iZXJ9PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPjxzdHJvbmc+R2V0PC9zdHJvbmc+IG9yIDxzdHJvbmc+U2V0PC9zdHJvbmc+IHRoZSB0cmlnZ2VySG9vayBvcHRpb24gdmFsdWUuPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgICAgIDxoNT5QYXJhbWV0ZXJzOjwvaDU+CiAgICAgICAgCgo8dGFibGUgY2xhc3M9InBhcmFtcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgkJPHRoPkFyZ3VtZW50PC90aD4KCQkKCgkJCgoJCTx0aCBjbGFzcz0ibGFzdCI+RGVzY3JpcHRpb248L3RoPgoJPC90cj4KCTwvdGhlYWQ+CgoJPHRib2R5PgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPm5ld1RyaWdnZXJIb29rPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bWJlcjwvc3Bhbj4KfAoKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBuZXcgdHJpZ2dlckhvb2sgb2YgdGhlIHNjZW5lLiBTZWUgPGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+PGNvZGU+U2Nyb2xsU2NlbmU8L2NvZGU+PC9hPiBwYXJhbWV0ZXIgZGVzY3JpcHRpb24gZm9yIHZhbHVlIG9wdGlvbnMuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0xMzQzIj5saW5lIDEzNDM8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCiAgICA8aDU+RmlyZXM6PC9oNT4KICAgIDx1bD4KICAgICAgICA8bGk+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCNldmVudDpjaGFuZ2UiPjxjb2RlPlNjcm9sbFNjZW5lLmV2ZW50OmNoYW5nZTwvY29kZT48L2E+LCB3aGVuIHVzZWQgYXMgc2V0dGVyPC9saT4KICAgIAogICAgICAgIDxsaT48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OnNoaWZ0Ij48Y29kZT5TY3JvbGxTY2VuZS5ldmVudDpzaGlmdDwvY29kZT48L2E+LCB3aGVuIHVzZWQgYXMgc2V0dGVyPC9saT4KICAgIDwvdWw+CiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIDx1bD4KICAgICAgICAgICAgPGxpPgo8ZGl2IGNsYXNzPSJwYXJhbS1kZXNjIHRhZy1yZXR1cm5zIj4KICAgIDxwPjxjb2RlPmdldDwvY29kZT4gLSAgQ3VycmVudCB0cmlnZ2VySG9vayAoQUxXQVlTIG51bWVyaWNhbCkuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bWJlcjwvc3Bhbj4KCn0KCjwvZGl2PgoKPC9saT4KICAgICAgICAKICAgICAgICAgICAgPGxpPgo8ZGl2IGNsYXNzPSJwYXJhbS1kZXNjIHRhZy1yZXR1cm5zIj4KICAgIDxwPjxjb2RlPnNldDwvY29kZT4gLSAgUGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPjwvc3Bhbj4KCn0KCjwvZGl2PgoKPC9saT4KICAgICAgICA8L3VsPgogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+Ly8gZ2V0IHRoZSBjdXJyZW50IHRyaWdnZXJIb29rIHZhbHVlDXZhciB0cmlnZ2VySG9vayA9IHNjZW5lLnRyaWdnZXJIb29rKCk7DQ0vLyBzZXQgYSBuZXcgdHJpZ2dlckhvb2sgdXNpbmcgYSBzdHJpbmcNc2NlbmUudHJpZ2dlckhvb2soIm9uTGVhdmUiKTsNLy8gc2V0IGEgbmV3IHRyaWdnZXJIb29rIHVzaW5nIGEgbnVtYmVyDXNjZW5lLnRyaWdnZXJIb29rKDAuNyk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9InR3ZWVuQ2hhbmdlcyI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+dHdlZW5DaGFuZ2VzPHNwYW4gY2xhc3M9InNpZ25hdHVyZSI+KDxzcGFuIGNsYXNzPSJvcHRpb25hbCI+bmV3VHdlZW5DaGFuZ2VzPC9zcGFuPik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHtib29sZWFufTwvc3Bhbj48L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD48c3Ryb25nPkdldDwvc3Ryb25nPiBvciA8c3Ryb25nPlNldDwvc3Ryb25nPiB0aGUgdHdlZW5DaGFuZ2VzIG9wdGlvbiB2YWx1ZS48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PlBhcmFtZXRlcnM6PC9oNT4KICAgICAgICAKCjx0YWJsZSBjbGFzcz0icGFyYW1zIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCQk8dGg+QXJndW1lbnQ8L3RoPgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+bmV3VHdlZW5DaGFuZ2VzPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPmJvb2xlYW48L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgbmV3IHR3ZWVuQ2hhbmdlcyBzZXR0aW5nIG9mIHRoZSBzY2VuZS48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTEzOTQiPmxpbmUgMTM5NDwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKICAgIDxoNT5GaXJlczo8L2g1PgogICAgPHVsPgogICAgICAgIDxsaT48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sI2V2ZW50OmNoYW5nZSI+PGNvZGU+U2Nyb2xsU2NlbmUuZXZlbnQ6Y2hhbmdlPC9jb2RlPjwvYT4sIHdoZW4gdXNlZCBhcyBzZXR0ZXI8L2xpPgogICAgPC91bD4KICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICA8aDU+UmV0dXJuczo8L2g1PgogICAgPHVsPgogICAgICAgICAgICA8bGk+CjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+PGNvZGU+Z2V0PC9jb2RlPiAtICBDdXJyZW50IHR3ZWVuQ2hhbmdlcyBvcHRpb24gdmFsdWUuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPmJvb2xlYW48L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD48Y29kZT5zZXQ8L2NvZGU+IC0gIFBhcmVudCBvYmplY3QgZm9yIGNoYWluaW5nLjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+Cgp9Cgo8L2Rpdj4KCjwvbGk+CiAgICAgICAgPC91bD4KICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIGdldCB0aGUgY3VycmVudCB0d2VlbkNoYW5nZXMgb3B0aW9uDXZhciB0d2VlbkNoYW5nZXMgPSBzY2VuZS50d2VlbkNoYW5nZXMoKTsNDS8vIHNldCBuZXcgdHdlZW5DaGFuZ2VzIG9wdGlvbg1zY2VuZS50d2VlbkNoYW5nZXModHJ1ZSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICA8L2RsPgogICAgCiAgICAgICAgPGgzIGNsYXNzPSJzdWJzZWN0aW9uLXRpdGxlIj5TY2VuZSBQcm9wZXJ0aWVzIChnZXR0ZXIpPC9oMz4KCiAgICAgICAgPGRsPgogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0icGFyZW50Ij48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5wYXJlbnQ8c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oKTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPiAmcmFycjsgezxhIGhyZWY9IlNjcm9sbE1hZ2ljLmh0bWwiPlNjcm9sbE1hZ2ljPC9hPn08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+PHN0cm9uZz5HZXQ8L3N0cm9uZz4gdGhlIHBhcmVudCBjb250cm9sbGVyLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTEyMTEiPmxpbmUgMTIxMTwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIAogICAgICAgICAgICAKPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD5QYXJlbnQgY29udHJvbGxlciBvciA8Y29kZT51bmRlZmluZWQ8L2NvZGU+PC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbE1hZ2ljLmh0bWwiPlNjcm9sbE1hZ2ljPC9hPjwvc3Bhbj4KCn0KCjwvZGl2PgoKCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij4vLyBnZXQgdGhlIHBhcmVudCBjb250cm9sbGVyIG9mIGEgc2NlbmUNdmFyIGNvbnRyb2xsZXIgPSBzY2VuZS5wYXJlbnQoKTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0ic2Nyb2xsT2Zmc2V0Ij48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5zY3JvbGxPZmZzZXQ8c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oKTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPiAmcmFycjsge251bWJlcn08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+PHN0cm9uZz5HZXQ8L3N0cm9uZz4gdGhlIGN1cnJlbnQgc2Nyb2xsIG9mZnNldCBmb3IgdGhlIHN0YXJ0IG9mIHRoZSBzY2VuZS48YnI+TWluZCwgdGhhdCB0aGUgc2Nyb2xsT2Zmc2V0IGlzIHJlbGF0ZWQgdG8gdGhlIHNpemUgb2YgdGhlIGNvbnRhaW5lciwgaWYgPGNvZGU+dHJpZ2dlckhvb2s8L2NvZGU+IGlzIGJpZ2dlciB0aGFuIDxjb2RlPjA8L2NvZGU+IChvciA8Y29kZT4mcXVvdDtvbkxlYXZlJnF1b3Q7PC9jb2RlPikuPGJyPlRoaXMgbWVhbnMsIHRoYXQgcmVzaXppbmcgdGhlIGNvbnRhaW5lciBvciBjaGFuZ2luZyB0aGUgPGNvZGU+dHJpZ2dlckhvb2s8L2NvZGU+IHdpbGwgaW5mbHVlbmNlIHRoZSBzY2VuZSdzIHN0YXJ0IG9mZnNldC48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0xNDg4Ij5saW5lIDE0ODg8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIDxoNT5SZXR1cm5zOjwvaDU+CiAgICAKICAgICAgICAgICAgCjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+VGhlIHNjcm9sbCBvZmZzZXQgKG9mIHRoZSBjb250YWluZXIpIGF0IHdoaWNoIHRoZSBzY2VuZSB3aWxsIHRyaWdnZXIuIFkgdmFsdWUgZm9yIHZlcnRpY2FsIGFuZCBYIHZhbHVlIGZvciBob3Jpem9udGFsIHNjcm9sbHMuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bWJlcjwvc3Bhbj4KCn0KCjwvZGl2PgoKCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij4vLyBnZXQgdGhlIGN1cnJlbnQgc2Nyb2xsIG9mZnNldCBmb3IgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHNjZW5lLg12YXIgc3RhcnQgPSBzY2VuZS5zY3JvbGxPZmZzZXQoKTsNdmFyIGVuZCA9IHNjZW5lLnNjcm9sbE9mZnNldCgpICsgc2NlbmUuZHVyYXRpb24oKTsNY29uc29sZS5sb2coInRoZSBzY2VuZSBzdGFydHMgYXQiLCBzdGFydCwgImFuZCBlbmRzIGF0IiwgZW5kKTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0ic3RhdGUiPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+PC9zcGFuPnN0YXRlPHNwYW4gY2xhc3M9InNpZ25hdHVyZSI+KCk8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHtzdHJpbmd9PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPjxzdHJvbmc+R2V0PC9zdHJvbmc+IHRoZSBjdXJyZW50IHN0YXRlLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTE0MzgiPmxpbmUgMTQzODwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIAogICAgICAgICAgICAKPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD48Y29kZT4mcXVvdDtCRUZPUkUmcXVvdDs8L2NvZGU+LCA8Y29kZT4mcXVvdDtEVVJJTkcmcXVvdDs8L2NvZGU+IG9yIDxjb2RlPiZxdW90O0FGVEVSJnF1b3Q7PC9jb2RlPjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+Cgp9Cgo8L2Rpdj4KCgogICAgICAgIAogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+Ly8gZ2V0IHRoZSBjdXJyZW50IHN0YXRlDXZhciBzdGF0ZSA9IHNjZW5lLnN0YXRlKCk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9InRyaWdnZXJPZmZzZXQiPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+PC9zcGFuPnRyaWdnZXJPZmZzZXQ8c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oKTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj48L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD48c3Ryb25nPkdldDwvc3Ryb25nPiB0aGUgdHJpZ2dlciBvZmZzZXQgb2YgdGhlIHNjZW5lIChpbmNsdWRpbmcgdGhlIHZhbHVlIG9mIHRoZSA8Y29kZT5vZmZzZXQ8L2NvZGU+IG9wdGlvbikuPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgICAgIDxkdCBjbGFzcz0iaW1wb3J0YW50IHRhZy1kZXByZWNhdGVkIj5EZXByZWNhdGVkOjwvZHQ+PGRkPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT5NZXRob2QgaXMgZGVwcmVjYXRlZCBzaW5jZSAxLjEuMC4gWW91IHNob3VsZCBub3cgdXNlIDxjb2RlPlNjcm9sbFNjZW5lLnRyaWdnZXJQb3NpdGlvbjwvY29kZT48L2xpPjx1bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0xNDcxIj5saW5lIDE0NzE8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0idHJpZ2dlclBvc2l0aW9uIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj50cmlnZ2VyUG9zaXRpb248c3BhbiBjbGFzcz0ic2lnbmF0dXJlIj4oKTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPiAmcmFycjsge251bWJlcn08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+PHN0cm9uZz5HZXQ8L3N0cm9uZz4gdGhlIHRyaWdnZXIgcG9zaXRpb24gb2YgdGhlIHNjZW5lIChpbmNsdWRpbmcgdGhlIHZhbHVlIG9mIHRoZSA8Y29kZT5vZmZzZXQ8L2NvZGU+IG9wdGlvbikuPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc291cmNlIj5Tb3VyY2U6PC9kdD4KICAgIDxkZCBjbGFzcz0idGFnLXNvdXJjZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPgogICAgICAgIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sIj5qcXVlcnkuc2Nyb2xsbWFnaWMuanM8L2E+LCA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCNzdW5saWdodC0xLWxpbmUtMTQ1MSI+bGluZSAxNDUxPC9hPgogICAgPC9saT48L3VsPjwvZGQ+CiAgICAKCiAgICAKCiAgICAKCiAgICAKPC9kbD4KCiAgICAKICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICA8aDU+UmV0dXJuczo8L2g1PgogICAgCiAgICAgICAgICAgIAo8ZGl2IGNsYXNzPSJwYXJhbS1kZXNjIHRhZy1yZXR1cm5zIj4KICAgIDxwPlN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzY2VuZS4gVG9wIHBvc2l0aW9uIHZhbHVlIGZvciB2ZXJ0aWNhbCBhbmQgbGVmdCBwb3NpdGlvbiB2YWx1ZSBmb3IgaG9yaXpvbnRhbCBzY3JvbGxzLjwvcD4KCgl7CjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5udW1iZXI8L3NwYW4+Cgp9Cgo8L2Rpdj4KCgogICAgICAgIAogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+Ly8gZ2V0IHRoZSBzY2VuZSdzIHRyaWdnZXIgcG9zaXRpb24NdmFyIHRyaWdnZXJQb3NpdGlvbiA9IHNjZW5lLnRyaWdnZXJQb3NpdGlvbigpOzwvcHJlPgoKCiAgICAKPC9kZD4KCiAgICAgICAgPC9kbD4KICAgIAogICAgICAgIDxoMyBjbGFzcz0ic3Vic2VjdGlvbi10aXRsZSI+RXZlbnQgSGFuZGxpbmc8L2gzPgoKICAgICAgICA8ZGw+CiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJvZmYiPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+PC9zcGFuPm9mZjxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPihuYW1lLCA8c3BhbiBjbGFzcz0ib3B0aW9uYWwiPmNhbGxiYWNrPC9zcGFuPik8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHs8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT59PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPlJlbW92ZSBvbmUgb3IgbW9yZSBldmVudCBsaXN0ZW5lci48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PlBhcmFtZXRlcnM6PC9oNT4KICAgICAgICAKCjx0YWJsZSBjbGFzcz0icGFyYW1zIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCQk8dGg+QXJndW1lbnQ8L3RoPgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+bmFtZTwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBuYW1lIG9yIG5hbWVzIG9mIHRoZSBldmVudCB0aGF0IHNob3VsZCBiZSByZW1vdmVkLjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPmNhbGxiYWNrPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPmZ1bmN0aW9uPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImF0dHJpYnV0ZXMiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJmx0O29wdGlvbmFsPjxicj4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+QSBzcGVjaWZpYyBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSByZW1vdmVkLiBJZiBub25lIGlzIHBhc3NlZCBhbGwgY2FsbGJhY2tzIHRvIHRoZSBldmVudCBsaXN0ZW5lciB3aWxsIGJlIHJlbW92ZWQuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0yMzY3Ij5saW5lIDIzNjc8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIDxoNT5SZXR1cm5zOjwvaDU+CiAgICAKICAgICAgICAgICAgCjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+UGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPjwvc3Bhbj4KCn0KCjwvZGl2PgoKCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij5mdW5jdGlvbiBjYWxsYmFjayAoZXZlbnQpIHsNCQljb25zb2xlLmxvZygiRXZlbnQgZmlyZWQhICgiICsgZXZlbnQudHlwZSArICIpIik7DX0NLy8gYWRkIGxpc3RlbmVycw1zY2VuZS5vbigiY2hhbmdlIHVwZGF0ZSIsIGNhbGxiYWNrKTsNLy8gcmVtb3ZlIGxpc3RlbmVycw1zY2VuZS5vZmYoImNoYW5nZSB1cGRhdGUiLCBjYWxsYmFjayk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9Im9uIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5vbjxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPihuYW1lLCBjYWxsYmFjayk8L3NwYW4+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj4gJnJhcnI7IHs8YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT59PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPkFkZCBvbmUgb3JlIG1vcmUgZXZlbnQgbGlzdGVuZXIuPGJyPlRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIGF0IHRoZSByZXNwZWN0aXZlIGV2ZW50LCBhbmQgYW4gb2JqZWN0IGNvbnRhaW5pbmcgcmVsZXZhbnQgZGF0YSB3aWxsIGJlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgICAgIDxoNT5QYXJhbWV0ZXJzOjwvaDU+CiAgICAgICAgCgo8dGFibGUgY2xhc3M9InBhcmFtcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5uYW1lPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBuYW1lIG9yIG5hbWVzIG9mIHRoZSBldmVudCB0aGUgY2FsbGJhY2sgc2hvdWxkIGJlIGF0dGFjaGVkIHRvLjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPmNhbGxiYWNrPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPmZ1bmN0aW9uPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+QSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBleGVjdXRlZCwgd2hlbiB0aGUgZXZlbnQgaXMgZGlzcGF0Y2hlZC4gQW4gZXZlbnQgb2JqZWN0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTIzMzgiPmxpbmUgMjMzODwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgPGg1PlJldHVybnM6PC9oNT4KICAgIAogICAgICAgICAgICAKPGRpdiBjbGFzcz0icGFyYW0tZGVzYyB0YWctcmV0dXJucyI+CiAgICA8cD5QYXJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy48L3A+CgoJewo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKfQoKPC9kaXY+CgoKICAgICAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPmZ1bmN0aW9uIGNhbGxiYWNrIChldmVudCkgew0JCWNvbnNvbGUubG9nKCJFdmVudCBmaXJlZCEgKCIgKyBldmVudC50eXBlICsgIikiKTsNfQ0vLyBhZGQgbGlzdGVuZXJzDXNjZW5lLm9uKCJjaGFuZ2UgdXBkYXRlIHByb2dyZXNzIHN0YXJ0IGVuZCBlbnRlciBsZWF2ZSIsIGNhbGxiYWNrKTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0idHJpZ2dlciI+PHNwYW4gY2xhc3M9InR5cGUtc2lnbmF0dXJlIj48L3NwYW4+dHJpZ2dlcjxzcGFuIGNsYXNzPSJzaWduYXR1cmUiPihuYW1lLCA8c3BhbiBjbGFzcz0ib3B0aW9uYWwiPnZhcnM8L3NwYW4+KTwvc3Bhbj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPiAmcmFycjsgezxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPn08L3NwYW4+PC9oND4KICAgIAogICAgCjwvZHQ+CjxkZD4KICAgIAogICAgCiAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+CiAgICAgICAgPHA+VHJpZ2dlciBhbiBldmVudC48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PlBhcmFtZXRlcnM6PC9oNT4KICAgICAgICAKCjx0YWJsZSBjbGFzcz0icGFyYW1zIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCQk8dGg+QXJndW1lbnQ8L3RoPgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+bmFtZTwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBuYW1lIG9mIHRoZSBldmVudCB0aGF0IHNob3VsZCBiZSB0cmlnZ2VyZWQuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dmFyczwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5vYmplY3Q8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5BbiBvYmplY3QgY29udGFpbmluZyBpbmZvIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2suPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0yMzg2Ij5saW5lIDIzODY8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIDxoNT5SZXR1cm5zOjwvaDU+CiAgICAKICAgICAgICAgICAgCjxkaXYgY2xhc3M9InBhcmFtLWRlc2MgdGFnLXJldHVybnMiPgogICAgPHA+UGFyZW50IG9iamVjdCBmb3IgY2hhaW5pbmcuPC9wPgoKCXsKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPjwvc3Bhbj4KCn0KCjwvZGl2PgoKCiAgICAgICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij50aGlzLnRyaWdnZXIoImNoYW5nZSIpOzwvcHJlPgoKCiAgICAKPC9kZD4KCiAgICAgICAgPC9kbD4KICAgIAogICAgICAgIDxoMyBjbGFzcz0ic3Vic2VjdGlvbi10aXRsZSI+RGVidWdpbmc8L2gzPgoKICAgICAgICA8ZGw+CiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJhZGRJbmRpY2F0b3JzIj48c3BhbiBjbGFzcz0idHlwZS1zaWduYXR1cmUiPjwvc3Bhbj5hZGRJbmRpY2F0b3JzPHNwYW4gY2xhc3M9InNpZ25hdHVyZSI+KDxzcGFuIGNsYXNzPSJvcHRpb25hbCI+b3B0aW9uczwvc3Bhbj4pPC9zcGFuPjxzcGFuIGNsYXNzPSJ0eXBlLXNpZ25hdHVyZSI+PC9zcGFuPjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPkFkZCBJbmRpY2F0b3JzIGZvciBhIFNjcm9sbFNjZW5lLjxicj48c3Ryb25nPlJFUVVJUkVTPC9zdHJvbmc+IFNjcm9sbE1hZ2ljIERlYnVnIEV4dGVuc2lvbjogPGNvZGU+anF1ZXJ5LnNjcm9sbG1hZ2ljLmRlYnVnLmpzPC9jb2RlPjxicj5UaGUgaW5kaWNhdG9ycyBjYW4gb25seSBiZSBhZGRlZCA8ZW0+QUZURVI8L2VtPiB0aGUgc2NlbmUgaGFzIGJlZW4gYWRkZWQgdG8gYSBjb250cm9sbGVyLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+UGFyYW1ldGVyczo8L2g1PgogICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5vcHRpb25zPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm9iamVjdDwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkFuIG9iamVjdCBjb250YWluaW5nIG9uZSBvciBtb3JlIG9wdGlvbnMgZm9yIHRoZSBpbmRpY2F0b3JzLjwvcD4KICAgICAgICAgICAgICAgIDxoNj5Qcm9wZXJ0aWVzPC9oNj4KICAgICAgICAgICAgICAgIAoKPHRhYmxlIGNsYXNzPSJwYXJhbXMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoJCTx0aD5Bcmd1bWVudDwvdGg+CgkJCgoJCQoJCTx0aD5EZWZhdWx0PC90aD4KCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+cGFyZW50PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KfAoKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm9iamVjdDwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5BIHNlbGVjdG9yLCBET00gT2JqZWN0IG9yIGEgalF1ZXJ5IG9iamVjdCB0aGF0IHRoZSBpbmRpY2F0b3JzIHNob3VsZCBiZSBhZGRlZCB0by48YnI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB1bmRlZmluZWQsIHRoZSBzY2VuZSdzIGNvbnRhaW5lciB3aWxsIGJlIHVzZWQuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+emluZGV4PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bWJlcjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLTEKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkNTUyB6aW5kZXggZm9yIHRoZSBpbmRpY2F0b3IgY29udGFpbmVyLjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPmluZGVudDwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5udW1iZXI8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iYXR0cmlidXRlcyI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAmbHQ7b3B0aW9uYWw+PGJyPgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJkZWZhdWx0Ij4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkFkZGl0aW9uYWwgcG9zaXRpb24gb2Zmc2V0IGZvciB0aGUgaW5kaWNhdG9ycyAodXNlZnVsLCB3aGVuIGhhdmluZyBtdWx0aXBsZSBzY2VuZXMgc3RhcnRpbmcgYXQgdGhlIHNhbWUgdGltZSkuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+c3VmZml4PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bWJlcjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoaXMgc3RyaW5nIHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIHN0YXJ0IGFuZCBlbmQgaW5kaWNhdG9yICh1c2VmdWwgZm9yIGlkZW50aWZpY2F0aW9uIHdoZW4gd29ya2luZyB3aXRoIG11bHRpcGxlIHNjZW5lcykuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+Y29sb3JUcmlnZ2VyPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgYmx1ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+Q1NTIGNvbG9yIGRlZmluaXRpb24gZm9yIHRoZSB0cmlnZ2VyIGluZGljYXRvci48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5jb2xvclN0YXJ0PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZ3JlZW4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkNTUyBjb2xvciBkZWZpbml0aW9uIGZvciB0aGUgc3RhcnQgaW5kaWNhdG9yLjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPmNvbG9yRW5kPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJhdHRyaWJ1dGVzIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICZsdDtvcHRpb25hbD48YnI+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImRlZmF1bHQiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgcmVkCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5DU1MgY29sb3IgZGVmaW5pdGlvbiBmb3IgdGhlIGVuZCBpbmRpY2F0b3IuPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgICAgICAgICA8L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc291cmNlIj5Tb3VyY2U6PC9kdD4KICAgIDxkZCBjbGFzcz0idGFnLXNvdXJjZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPgogICAgICAgIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5kZWJ1Zy5qcy5odG1sIj5qcXVlcnkuc2Nyb2xsbWFnaWMuZGVidWcuanM8L2E+LCA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuZGVidWcuanMuaHRtbCNzdW5saWdodC0xLWxpbmUtNTEiPmxpbmUgNTE8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPi8vIGFkZCBiYXNpYyBpbmRpY2F0b3JzDXNjZW5lLmFkZEluZGljYXRvcnMoKQ0NLy8gcGFzc2luZyBvcHRpb25zDXNjZW5lLmFkZEluZGljYXRvcnMoe3ppbmRleDogMTAwLCBjb2xvckVuZDogIiNGRkZGRkYifSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICA8L2RsPgogICAgCgogICAgCgogICAgCiAgICAgICAgPGgzIGNsYXNzPSJzdWJzZWN0aW9uLXRpdGxlIj5FdmVudHM8L2gzPgoKICAgICAgICA8ZGw+CiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJldmVudDpjaGFuZ2UiPmNoYW5nZTwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPlNjZW5lIGNoYW5nZSBldmVudC48YnI+RmlyZXMgd2hlbnZldmVyIGEgcHJvcGVydHkgb2YgdGhlIHNjZW5lIGlzIGNoYW5nZWQuPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgICAgICA8aDUgY2xhc3M9InN1YnNlY3Rpb24tdGl0bGUiPlByb3BlcnRpZXM6PC9oNT4KCiAgICAgICAgPGRsPgoKPHRhYmxlIGNsYXNzPSJwcm9wcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5ldmVudDwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5vYmplY3Q8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrPC9wPgogICAgICAgICAgICAgICAgPGg2PlByb3BlcnRpZXM8L2g2PgoKPHRhYmxlIGNsYXNzPSJwcm9wcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT50eXBlPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBuYW1lIG9mIHRoZSBldmVudDwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnRhcmdldDwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgU2Nyb2xsU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnQ8L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT53aGF0PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkluZGljYXRlcyB3aGF0IHZhbHVlIGhhcyBiZWVuIGNoYW5nZWQ8L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5uZXd2YWw8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bWl4ZWQ8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgbmV3IHZhbHVlIG9mIHRoZSBjaGFuZ2VkIHByb3BlcnR5PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgICAgICAgICA8L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgo8L2RsPgoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc291cmNlIj5Tb3VyY2U6PC9kdD4KICAgIDxkZCBjbGFzcz0idGFnLXNvdXJjZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPgogICAgICAgIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sIj5qcXVlcnkuc2Nyb2xsbWFnaWMuanM8L2E+LCA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCNzdW5saWdodC0xLWxpbmUtMjI1OSI+bGluZSAyMjU5PC9hPgogICAgPC9saT48L3VsPjwvZGQ+CiAgICAKCiAgICAKCiAgICAKCiAgICAKPC9kbD4KCiAgICAKICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij5zY2VuZS5vbigiY2hhbmdlIiwgZnVuY3Rpb24gKGV2ZW50KSB7DQkJY29uc29sZS5sb2coIlNjZW5lIFByb3BlcnR5IFwiIiArIGV2ZW50LndoYXQgKyAiXCIgY2hhbmdlZCB0byAiICsgZXZlbnQubmV3dmFsKTsNfSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9ImV2ZW50OmRlc3Ryb3kiPmRlc3Ryb3k8L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD5TY2VuZSBkZXN0cm95IGV2ZW50Ljxicj5GaXJlcyB3aGVudmV2ZXIgdGhlIHNjZW5lIGlzIGRlc3Ryb3llZC4KVGhpcyBjYW4gYmUgdXNlZCB0byB0aWR5IHVwIGN1c3RvbSBiZWhhdmlvdXIgdXNlZCBpbiBldmVudHMuPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgICAgICA8aDUgY2xhc3M9InN1YnNlY3Rpb24tdGl0bGUiPlByb3BlcnRpZXM6PC9oNT4KCiAgICAgICAgPGRsPgoKPHRhYmxlIGNsYXNzPSJwcm9wcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5ldmVudDwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5vYmplY3Q8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrPC9wPgogICAgICAgICAgICAgICAgPGg2PlByb3BlcnRpZXM8L2g2PgoKPHRhYmxlIGNsYXNzPSJwcm9wcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT50eXBlPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBuYW1lIG9mIHRoZSBldmVudDwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnRhcmdldDwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgU2Nyb2xsU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnQ8L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5yZXNldDwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5ib29sZWFuPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+SW5kaWNhdGVzIGlmIHRoZSBkZXN0cm95IG1ldGhvZCB3YXMgY2FsbGVkIHdpdGggcmVzZXQgPGNvZGU+dHJ1ZTwvY29kZT4gb3IgPGNvZGU+ZmFsc2U8L2NvZGU+LjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KPC9kbD4KCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNpbmNlIj5TaW5jZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc2luY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4xLjEuMDwvZGQ+PGJyPgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0yMjk2Ij5saW5lIDIyOTY8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPnNjZW5lLm9uKCJlbnRlciIsIGZ1bmN0aW9uIChldmVudCkgew0gICAgICAgLy8gYWRkIGN1c3RvbSBhY3Rpb24NICAgICAgICQoIiNteS1lbGVtIikubGVmdCgiMjAwIik7DSAgICAgfSkNICAgICAub24oImRlc3Ryb3kiLCBmdW5jdGlvbiAoZXZlbnQpIHsNICAgICAgIC8vIHJlc2V0IG15IGVsZW1lbnQgdG8gc3RhcnQgcG9zaXRpb24NICAgICAgIGlmIChldmVudC5yZXNldCkgew0gICAgICAgICAkKCIjbXktZWxlbSIpLmxlZnQoIjAiKTsNICAgICAgIH0NICAgICB9KTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIAogICAgICAgICAgICAKPGR0PgogICAgPGg0IGNsYXNzPSJuYW1lIiBpZD0iZXZlbnQ6ZW5kIj5lbmQ8L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD5TY2VuZSBlbmQgZXZlbnQuPGJyPkZpcmVzIHdoZW5ldmVyIHRoZSBzY3JvbGwgcG9zaXRpb24gaXRzIHRoZSBlbmRpbmcgcG9pbnQgb2YgdGhlIHNjZW5lLjxicj5JdCB3aWxsIGFsc28gZmlyZSB3aGVuIHNjcm9sbGluZyBiYWNrIHVwIGZyb20gYWZ0ZXIgdGhlIHNjZW5lIGFuZCBnb2luZyBvdmVyIGl0cyBlbmQgcG9zaXRpb24uIElmIHlvdSB3YW50IHNvbWV0aGluZyB0byBoYXBwZW4gb25seSB3aGVuIHNjcm9sbGluZyBkb3duL3JpZ2h0LCB1c2UgdGhlIHNjcm9sbERpcmVjdGlvbiBwYXJhbWV0ZXIgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay48L3A+CjxwPkZvciBkZXRhaWxzIG9uIHRoaXMgZXZlbnQgYW5kIHRoZSBvcmRlciBpbiB3aGljaCBpdCBpcyBmaXJlZCwgcGxlYXNlIHJldmlldyB0aGUgPGNvZGU+U2Nyb2xsU2NlbmUucHJvZ3Jlc3M8L2NvZGU+IG1ldGhvZC48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgICAgIDxoNSBjbGFzcz0ic3Vic2VjdGlvbi10aXRsZSI+UHJvcGVydGllczo8L2g1PgoKICAgICAgICA8ZGw+Cgo8dGFibGUgY2xhc3M9InByb3BzIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCgkJCgoJCTx0aCBjbGFzcz0ibGFzdCI+RGVzY3JpcHRpb248L3RoPgoJPC90cj4KCTwvdGhlYWQ+CgoJPHRib2R5PgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPmV2ZW50PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm9iamVjdDwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2s8L3A+CiAgICAgICAgICAgICAgICA8aDY+UHJvcGVydGllczwvaDY+Cgo8dGFibGUgY2xhc3M9InByb3BzIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCgkJCgoJCTx0aCBjbGFzcz0ibGFzdCI+RGVzY3JpcHRpb248L3RoPgoJPC90cj4KCTwvdGhlYWQ+CgoJPHRib2R5PgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnR5cGU8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIG5hbWUgb2YgdGhlIGV2ZW50PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dGFyZ2V0PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBTY3JvbGxTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudDwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnByb2dyZXNzPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bWJlcjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlJlZmxlY3RzIHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBzY2VuZTwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnN0YXRlPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzY2VuZSA8Y29kZT4mcXVvdDtCRUZPUkUmcXVvdDs8L2NvZGU+LCA8Y29kZT4mcXVvdDtEVVJJTkcmcXVvdDs8L2NvZGU+IG9yIDxjb2RlPiZxdW90O0FGVEVSJnF1b3Q7PC9jb2RlPjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnNjcm9sbERpcmVjdGlvbjwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5JbmRpY2F0ZXMgd2hpY2ggd2F5IHdlIGFyZSBzY3JvbGxpbmcgPGNvZGU+JnF1b3Q7UEFVU0VEJnF1b3Q7PC9jb2RlPiwgPGNvZGU+JnF1b3Q7Rk9SV0FSRCZxdW90OzwvY29kZT4gb3IgPGNvZGU+JnF1b3Q7UkVWRVJTRSZxdW90OzwvY29kZT48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CjwvZGw+CgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0yMTU4Ij5saW5lIDIxNTg8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPnNjZW5lLm9uKCJlbmQiLCBmdW5jdGlvbiAoZXZlbnQpIHsNCQlhbGVydCgiSGl0IGVuZCBwb2ludCBvZiBzY2VuZS4iKTsNfSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9ImV2ZW50OmVudGVyIj5lbnRlcjwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPlNjZW5lIGVudGVyIGV2ZW50Ljxicj5GaXJlcyB3aGVuZXZlciB0aGUgc2NlbmUgZW50ZXJzIHRoZSAmcXVvdDtEVVJJTkcmcXVvdDsgc3RhdGUuPGJyPktlZXAgaW4gbWluZCB0aGF0IGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHRoZSBzY2VuZSBwbGF5cyBmb3J3YXJkIG9yIGJhY2t3YXJkOiBUaGlzIGV2ZW50IGFsd2F5cyBmaXJlcyB3aGVuIHRoZSBzY2VuZSBlbnRlcnMgaXRzIGFjdGl2ZSBzY3JvbGwgdGltZWZyYW1lLCByZWdhcmRsZXNzIG9mIHRoZSBzY3JvbGwtZGlyZWN0aW9uLjwvcD4KPHA+Rm9yIGRldGFpbHMgb24gdGhpcyBldmVudCBhbmQgdGhlIG9yZGVyIGluIHdoaWNoIGl0IGlzIGZpcmVkLCBwbGVhc2UgcmV2aWV3IHRoZSA8Y29kZT5TY3JvbGxTY2VuZS5wcm9ncmVzczwvY29kZT4gbWV0aG9kLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAgICAgPGg1IGNsYXNzPSJzdWJzZWN0aW9uLXRpdGxlIj5Qcm9wZXJ0aWVzOjwvaDU+CgogICAgICAgIDxkbD4KCjx0YWJsZSBjbGFzcz0icHJvcHMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+ZXZlbnQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+b2JqZWN0PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFjazwvcD4KICAgICAgICAgICAgICAgIDxoNj5Qcm9wZXJ0aWVzPC9oNj4KCjx0YWJsZSBjbGFzcz0icHJvcHMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dHlwZTwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgbmFtZSBvZiB0aGUgZXZlbnQ8L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT50YXJnZXQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIFNjcm9sbFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+cHJvZ3Jlc3M8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+UmVmbGVjdHMgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIHNjZW5lPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+c3RhdGU8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNjZW5lIDxjb2RlPiZxdW90O0JFRk9SRSZxdW90OzwvY29kZT4sIDxjb2RlPiZxdW90O0RVUklORyZxdW90OzwvY29kZT4gb3IgPGNvZGU+JnF1b3Q7QUZURVImcXVvdDs8L2NvZGU+PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+c2Nyb2xsRGlyZWN0aW9uPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkluZGljYXRlcyB3aGljaCB3YXkgd2UgYXJlIHNjcm9sbGluZyA8Y29kZT4mcXVvdDtQQVVTRUQmcXVvdDs8L2NvZGU+LCA8Y29kZT4mcXVvdDtGT1JXQVJEJnF1b3Q7PC9jb2RlPiBvciA8Y29kZT4mcXVvdDtSRVZFUlNFJnF1b3Q7PC9jb2RlPjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KPC9kbD4KCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTIxNzkiPmxpbmUgMjE3OTwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+c2NlbmUub24oImVudGVyIiwgZnVuY3Rpb24gKGV2ZW50KSB7DQkJYWxlcnQoIkVudGVyZWQgYSBzY2VuZS4iKTsNfSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9ImV2ZW50OmxlYXZlIj5sZWF2ZTwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPlNjZW5lIGxlYXZlIGV2ZW50Ljxicj5GaXJlcyB3aGVuZXZlciB0aGUgc2NlbmUncyBzdGF0ZSBnb2VzIGZyb20gJnF1b3Q7RFVSSU5HJnF1b3Q7IHRvIGVpdGhlciAmcXVvdDtCRUZPUkUmcXVvdDsgb3IgJnF1b3Q7QUZURVImcXVvdDsuPGJyPktlZXAgaW4gbWluZCB0aGF0IGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHRoZSBzY2VuZSBwbGF5cyBmb3J3YXJkIG9yIGJhY2t3YXJkOiBUaGlzIGV2ZW50IGFsd2F5cyBmaXJlcyB3aGVuIHRoZSBzY2VuZSBsZWF2ZXMgaXRzIGFjdGl2ZSBzY3JvbGwgdGltZWZyYW1lLCByZWdhcmRsZXNzIG9mIHRoZSBzY3JvbGwtZGlyZWN0aW9uLjwvcD4KPHA+Rm9yIGRldGFpbHMgb24gdGhpcyBldmVudCBhbmQgdGhlIG9yZGVyIGluIHdoaWNoIGl0IGlzIGZpcmVkLCBwbGVhc2UgcmV2aWV3IHRoZSA8Y29kZT5TY3JvbGxTY2VuZS5wcm9ncmVzczwvY29kZT4gbWV0aG9kLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAgICAgPGg1IGNsYXNzPSJzdWJzZWN0aW9uLXRpdGxlIj5Qcm9wZXJ0aWVzOjwvaDU+CgogICAgICAgIDxkbD4KCjx0YWJsZSBjbGFzcz0icHJvcHMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+ZXZlbnQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+b2JqZWN0PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFjazwvcD4KICAgICAgICAgICAgICAgIDxoNj5Qcm9wZXJ0aWVzPC9oNj4KCjx0YWJsZSBjbGFzcz0icHJvcHMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dHlwZTwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgbmFtZSBvZiB0aGUgZXZlbnQ8L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT50YXJnZXQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIFNjcm9sbFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+cHJvZ3Jlc3M8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+UmVmbGVjdHMgdGhlIGN1cnJlbnQgcHJvZ3Jlc3Mgb2YgdGhlIHNjZW5lPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+c3RhdGU8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNjZW5lIDxjb2RlPiZxdW90O0JFRk9SRSZxdW90OzwvY29kZT4sIDxjb2RlPiZxdW90O0RVUklORyZxdW90OzwvY29kZT4gb3IgPGNvZGU+JnF1b3Q7QUZURVImcXVvdDs8L2NvZGU+PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+c2Nyb2xsRGlyZWN0aW9uPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkluZGljYXRlcyB3aGljaCB3YXkgd2UgYXJlIHNjcm9sbGluZyA8Y29kZT4mcXVvdDtQQVVTRUQmcXVvdDs8L2NvZGU+LCA8Y29kZT4mcXVvdDtGT1JXQVJEJnF1b3Q7PC9jb2RlPiBvciA8Y29kZT4mcXVvdDtSRVZFUlNFJnF1b3Q7PC9jb2RlPjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KPC9kbD4KCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTIyMDAiPmxpbmUgMjIwMDwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+c2NlbmUub24oImxlYXZlIiwgZnVuY3Rpb24gKGV2ZW50KSB7DQkJYWxlcnQoIkxlZnQgYSBzY2VuZS4iKTsNfSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9ImV2ZW50OnByb2dyZXNzIj5wcm9ncmVzczwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPlNjZW5lIHByb2dyZXNzIGV2ZW50Ljxicj5GaXJlcyB3aGVuZXZlciB0aGUgcHJvZ3Jlc3Mgb2YgdGhlIHNjZW5lIGNoYW5nZXMuPC9wPgo8cD5Gb3IgZGV0YWlscyBvbiB0aGlzIGV2ZW50IGFuZCB0aGUgb3JkZXIgaW4gd2hpY2ggaXQgaXMgZmlyZWQsIHBsZWFzZSByZXZpZXcgdGhlIDxjb2RlPlNjcm9sbFNjZW5lLnByb2dyZXNzPC9jb2RlPiBtZXRob2QuPC9wPgogICAgPC9kaXY+CiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKPGRsIGNsYXNzPSJkZXRhaWxzIj4KICAgIAoKICAgICAgICA8aDUgY2xhc3M9InN1YnNlY3Rpb24tdGl0bGUiPlByb3BlcnRpZXM6PC9oNT4KCiAgICAgICAgPGRsPgoKPHRhYmxlIGNsYXNzPSJwcm9wcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5ldmVudDwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5vYmplY3Q8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgZXZlbnQgT2JqZWN0IHBhc3NlZCB0byBlYWNoIGNhbGxiYWNrPC9wPgogICAgICAgICAgICAgICAgPGg2PlByb3BlcnRpZXM8L2g2PgoKPHRhYmxlIGNsYXNzPSJwcm9wcyB0YWJsZSB0YWJsZS1zdHJpcGVkIj4KICAgIDx0aGVhZD4KCTx0cj4KCQkKCQk8dGg+TmFtZTwvdGg+CgkJCgoJCTx0aD5UeXBlPC90aD4KCgkJCgoJCQoKCQk8dGggY2xhc3M9Imxhc3QiPkRlc2NyaXB0aW9uPC90aD4KCTwvdHI+Cgk8L3RoZWFkPgoKCTx0Ym9keT4KCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT50eXBlPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBuYW1lIG9mIHRoZSBldmVudDwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnRhcmdldDwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj48YSBocmVmPSJTY3JvbGxTY2VuZS5odG1sIj5TY3JvbGxTY2VuZTwvYT48L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgU2Nyb2xsU2NlbmUgb2JqZWN0IHRoYXQgdHJpZ2dlcmVkIHRoaXMgZXZlbnQ8L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5wcm9ncmVzczwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5udW1iZXI8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5SZWZsZWN0cyB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgc2NlbmU8L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5zdGF0ZTwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc2NlbmUgPGNvZGU+JnF1b3Q7QkVGT1JFJnF1b3Q7PC9jb2RlPiwgPGNvZGU+JnF1b3Q7RFVSSU5HJnF1b3Q7PC9jb2RlPiBvciA8Y29kZT4mcXVvdDtBRlRFUiZxdW90OzwvY29kZT48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT5zY3JvbGxEaXJlY3Rpb248L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+SW5kaWNhdGVzIHdoaWNoIHdheSB3ZSBhcmUgc2Nyb2xsaW5nIDxjb2RlPiZxdW90O1BBVVNFRCZxdW90OzwvY29kZT4sIDxjb2RlPiZxdW90O0ZPUldBUkQmcXVvdDs8L2NvZGU+IG9yIDxjb2RlPiZxdW90O1JFVkVSU0UmcXVvdDs8L2NvZGU+PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgICAgICAgICA8L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgo8L2RsPgoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc291cmNlIj5Tb3VyY2U6PC9kdD4KICAgIDxkZCBjbGFzcz0idGFnLXNvdXJjZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPgogICAgICAgIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sIj5qcXVlcnkuc2Nyb2xsbWFnaWMuanM8L2E+LCA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCNzdW5saWdodC0xLWxpbmUtMjIzOSI+bGluZSAyMjM5PC9hPgogICAgPC9saT48L3VsPjwvZGQ+CiAgICAKCiAgICAKCiAgICAKCiAgICAKPC9kbD4KCiAgICAKICAgIAoKICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgICAgIDxoNT5FeGFtcGxlPC9oNT4KICAgICAgICAKICAgIDxwcmUgY2xhc3M9InN1bmxpZ2h0LWhpZ2hsaWdodC1qYXZhc2NyaXB0Ij5zY2VuZS5vbigicHJvZ3Jlc3MiLCBmdW5jdGlvbiAoZXZlbnQpIHsNCQljb25zb2xlLmxvZygiU2NlbmUgcHJvZ3Jlc3MgY2hhbmdlZC4iKTsNfSk7PC9wcmU+CgoKICAgIAo8L2RkPgoKICAgICAgICAKICAgICAgICAgICAgCjxkdD4KICAgIDxoNCBjbGFzcz0ibmFtZSIgaWQ9ImV2ZW50OnNoaWZ0Ij5zaGlmdDwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPlNjZW5lIHNoaWZ0IGV2ZW50Ljxicj5GaXJlcyB3aGVudmV2ZXIgdGhlIHN0YXJ0IG9yIGVuZCA8c3Ryb25nPnNjcm9sbCBvZmZzZXQ8L3N0cm9uZz4gb2YgdGhlIHNjZW5lIGNoYW5nZS4KVGhpcyBoYXBwZW5zIGV4cGxpY2l0ZWx5LCB3aGVuIG9uZSBvZiB0aGVzZSB2YWx1ZXMgY2hhbmdlOiA8Y29kZT5vZmZzZXQ8L2NvZGU+LCA8Y29kZT5kdXJhdGlvbjwvY29kZT4gb3IgPGNvZGU+dHJpZ2dlckhvb2s8L2NvZGU+LgpJdCB3aWxsIGZpcmUgaW1wbGljaXRseSB3aGVuIHRoZSA8Y29kZT50cmlnZ2VyRWxlbWVudDwvY29kZT4gY2hhbmdlcywgaWYgdGhlIG5ldyBlbGVtZW50IGhhcyBhIGRpZmZlcmVudCBwb3NpdGlvbiAobW9zdCBjYXNlcykuCkl0IHdpbGwgYWxzbyBmaXJlIGltcGxpY2l0bHkgd2hlbiB0aGUgc2l6ZSBvZiB0aGUgY29udGFpbmVyIGNoYW5nZXMgYW5kIHRoZSB0cmlnZ2VySG9vayBpcyBhbnl0aGluZyBvdGhlciB0aGFuIDxjb2RlPm9uTGVhdmU8L2NvZGU+LjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAgICAgPGg1IGNsYXNzPSJzdWJzZWN0aW9uLXRpdGxlIj5Qcm9wZXJ0aWVzOjwvaDU+CgogICAgICAgIDxkbD4KCjx0YWJsZSBjbGFzcz0icHJvcHMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+ZXZlbnQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+b2JqZWN0PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFjazwvcD4KICAgICAgICAgICAgICAgIDxoNj5Qcm9wZXJ0aWVzPC9oNj4KCjx0YWJsZSBjbGFzcz0icHJvcHMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dHlwZTwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgbmFtZSBvZiB0aGUgZXZlbnQ8L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT50YXJnZXQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIFNjcm9sbFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+cmVhc29uPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPkluZGljYXRlcyB3aHkgdGhlIHNjZW5lIGhhcyBzaGlmdGVkPC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CgogICAgICAgICAgICA8L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgo8L2RsPgoKICAgIAoKICAgIAoKICAgIAogICAgPGR0IGNsYXNzPSJ0YWctc2luY2UiPlNpbmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zaW5jZSI+PHVsIGNsYXNzPSJkdW1teSI+PGxpPjEuMS4wPC9kZD48YnI+CiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTIyNzYiPmxpbmUgMjI3NjwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+c2NlbmUub24oInNoaWZ0IiwgZnVuY3Rpb24gKGV2ZW50KSB7DQkJY29uc29sZS5sb2coIlNjZW5lIG1vdmVkLCBiZWNhdXNlIHRoZSAiICsgZXZlbnQucmVhc29uICsgIiBoYXMgY2hhbmdlZC4pIik7DX0pOzwvcHJlPgoKCiAgICAKPC9kZD4KCiAgICAgICAgCiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJldmVudDpzdGFydCI+c3RhcnQ8L2g0PgogICAgCiAgICAKPC9kdD4KPGRkPgogICAgCiAgICAKICAgIDxkaXYgY2xhc3M9ImRlc2NyaXB0aW9uIj4KICAgICAgICA8cD5TY2VuZSBzdGFydCBldmVudC48YnI+RmlyZXMgd2hlbmV2ZXIgdGhlIHNjcm9sbCBwb3NpdGlvbiBpdHMgdGhlIHN0YXJ0aW5nIHBvaW50IG9mIHRoZSBzY2VuZS48YnI+SXQgd2lsbCBhbHNvIGZpcmUgd2hlbiBzY3JvbGxpbmcgYmFjayB1cCBnb2luZyBvdmVyIHRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc2NlbmUuIElmIHlvdSB3YW50IHNvbWV0aGluZyB0byBoYXBwZW4gb25seSB3aGVuIHNjcm9sbGluZyBkb3duL3JpZ2h0LCB1c2UgdGhlIHNjcm9sbERpcmVjdGlvbiBwYXJhbWV0ZXIgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay48L3A+CjxwPkZvciBkZXRhaWxzIG9uIHRoaXMgZXZlbnQgYW5kIHRoZSBvcmRlciBpbiB3aGljaCBpdCBpcyBmaXJlZCwgcGxlYXNlIHJldmlldyB0aGUgPGNvZGU+U2Nyb2xsU2NlbmUucHJvZ3Jlc3M8L2NvZGU+IG1ldGhvZC48L3A+CiAgICA8L2Rpdj4KICAgIAoKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAo8ZGwgY2xhc3M9ImRldGFpbHMiPgogICAgCgogICAgICAgIDxoNSBjbGFzcz0ic3Vic2VjdGlvbi10aXRsZSI+UHJvcGVydGllczo8L2g1PgoKICAgICAgICA8ZGw+Cgo8dGFibGUgY2xhc3M9InByb3BzIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCgkJCgoJCTx0aCBjbGFzcz0ibGFzdCI+RGVzY3JpcHRpb248L3RoPgoJPC90cj4KCTwvdGhlYWQ+CgoJPHRib2R5PgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPmV2ZW50PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm9iamVjdDwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBldmVudCBPYmplY3QgcGFzc2VkIHRvIGVhY2ggY2FsbGJhY2s8L3A+CiAgICAgICAgICAgICAgICA8aDY+UHJvcGVydGllczwvaDY+Cgo8dGFibGUgY2xhc3M9InByb3BzIHRhYmxlIHRhYmxlLXN0cmlwZWQiPgogICAgPHRoZWFkPgoJPHRyPgoJCQoJCTx0aD5OYW1lPC90aD4KCQkKCgkJPHRoPlR5cGU8L3RoPgoKCQkKCgkJCgoJCTx0aCBjbGFzcz0ibGFzdCI+RGVzY3JpcHRpb248L3RoPgoJPC90cj4KCTwvdGhlYWQ+CgoJPHRib2R5PgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnR5cGU8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+c3RyaW5nPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIG5hbWUgb2YgdGhlIGV2ZW50PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dGFyZ2V0PC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPjxhIGhyZWY9IlNjcm9sbFNjZW5lLmh0bWwiPlNjcm9sbFNjZW5lPC9hPjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBTY3JvbGxTY2VuZSBvYmplY3QgdGhhdCB0cmlnZ2VyZWQgdGhpcyBldmVudDwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnByb2dyZXNzPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPm51bWJlcjwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlJlZmxlY3RzIHRoZSBjdXJyZW50IHByb2dyZXNzIG9mIHRoZSBzY2VuZTwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnN0YXRlPC9jb2RlPjwvdGQ+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJ0eXBlIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKPHNwYW4gY2xhc3M9InBhcmFtLXR5cGUiPnN0cmluZzwvc3Bhbj4KCgogICAgICAgICAgICAKICAgICAgICAgICAgPC90ZD4KCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9ImRlc2NyaXB0aW9uIGxhc3QiPjxwPlRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzY2VuZSA8Y29kZT4mcXVvdDtCRUZPUkUmcXVvdDs8L2NvZGU+LCA8Y29kZT4mcXVvdDtEVVJJTkcmcXVvdDs8L2NvZGU+IG9yIDxjb2RlPiZxdW90O0FGVEVSJnF1b3Q7PC9jb2RlPjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnNjcm9sbERpcmVjdGlvbjwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5JbmRpY2F0ZXMgd2hpY2ggd2F5IHdlIGFyZSBzY3JvbGxpbmcgPGNvZGU+JnF1b3Q7UEFVU0VEJnF1b3Q7PC9jb2RlPiwgPGNvZGU+JnF1b3Q7Rk9SV0FSRCZxdW90OzwvY29kZT4gb3IgPGNvZGU+JnF1b3Q7UkVWRVJTRSZxdW90OzwvY29kZT48L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KCiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KCgkKCTwvdGJvZHk+CjwvdGFibGU+CjwvZGw+CgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCgogICAgCiAgICA8ZHQgY2xhc3M9InRhZy1zb3VyY2UiPlNvdXJjZTo8L2R0PgogICAgPGRkIGNsYXNzPSJ0YWctc291cmNlIj48dWwgY2xhc3M9ImR1bW15Ij48bGk+CiAgICAgICAgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwiPmpxdWVyeS5zY3JvbGxtYWdpYy5qczwvYT4sIDxhIGhyZWY9ImpxdWVyeS5zY3JvbGxtYWdpYy5qcy5odG1sI3N1bmxpZ2h0LTEtbGluZS0yMTM3Ij5saW5lIDIxMzc8L2E+CiAgICA8L2xpPjwvdWw+PC9kZD4KICAgIAoKICAgIAoKICAgIAoKICAgIAo8L2RsPgoKICAgIAogICAgCgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAgICAgPGg1PkV4YW1wbGU8L2g1PgogICAgICAgIAogICAgPHByZSBjbGFzcz0ic3VubGlnaHQtaGlnaGxpZ2h0LWphdmFzY3JpcHQiPnNjZW5lLm9uKCJzdGFydCIsIGZ1bmN0aW9uIChldmVudCkgew0JCWFsZXJ0KCJIaXQgc3RhcnQgcG9pbnQgb2Ygc2NlbmUuIik7DX0pOzwvcHJlPgoKCiAgICAKPC9kZD4KCiAgICAgICAgCiAgICAgICAgICAgIAo8ZHQ+CiAgICA8aDQgY2xhc3M9Im5hbWUiIGlkPSJldmVudDp1cGRhdGUiPnVwZGF0ZTwvaDQ+CiAgICAKICAgIAo8L2R0Pgo8ZGQ+CiAgICAKICAgIAogICAgPGRpdiBjbGFzcz0iZGVzY3JpcHRpb24iPgogICAgICAgIDxwPlNjZW5lIHVwZGF0ZSBldmVudC48YnI+RmlyZXMgd2hlbmV2ZXIgdGhlIHNjZW5lIGlzIHVwZGF0ZWQgKGJ1dCBub3QgbmVjZXNzYXJpbHkgY2hhbmdlcyB0aGUgcHJvZ3Jlc3MpLjwvcD4KICAgIDwvZGl2PgogICAgCgogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCjxkbCBjbGFzcz0iZGV0YWlscyI+CiAgICAKCiAgICAgICAgPGg1IGNsYXNzPSJzdWJzZWN0aW9uLXRpdGxlIj5Qcm9wZXJ0aWVzOjwvaDU+CgogICAgICAgIDxkbD4KCjx0YWJsZSBjbGFzcz0icHJvcHMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+ZXZlbnQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+b2JqZWN0PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIGV2ZW50IE9iamVjdCBwYXNzZWQgdG8gZWFjaCBjYWxsYmFjazwvcD4KICAgICAgICAgICAgICAgIDxoNj5Qcm9wZXJ0aWVzPC9oNj4KCjx0YWJsZSBjbGFzcz0icHJvcHMgdGFibGUgdGFibGUtc3RyaXBlZCI+CiAgICA8dGhlYWQ+Cgk8dHI+CgkJCgkJPHRoPk5hbWU8L3RoPgoJCQoKCQk8dGg+VHlwZTwvdGg+CgoJCQoKCQkKCgkJPHRoIGNsYXNzPSJsYXN0Ij5EZXNjcmlwdGlvbjwvdGg+Cgk8L3RyPgoJPC90aGVhZD4KCgk8dGJvZHk+CgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+dHlwZTwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5zdHJpbmc8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgbmFtZSBvZiB0aGUgZXZlbnQ8L3A+PC90ZD4KICAgICAgICA8L3RyPgoKCQoKICAgICAgICA8dHI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuYW1lIj48Y29kZT50YXJnZXQ8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+PGEgaHJlZj0iU2Nyb2xsU2NlbmUuaHRtbCI+U2Nyb2xsU2NlbmU8L2E+PC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIFNjcm9sbFNjZW5lIG9iamVjdCB0aGF0IHRyaWdnZXJlZCB0aGlzIGV2ZW50PC9wPjwvdGQ+CiAgICAgICAgPC90cj4KCgkKCiAgICAgICAgPHRyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibmFtZSI+PGNvZGU+c3RhcnRQb3M8L2NvZGU+PC90ZD4KICAgICAgICAgICAgCgogICAgICAgICAgICA8dGQgY2xhc3M9InR5cGUiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAo8c3BhbiBjbGFzcz0icGFyYW0tdHlwZSI+bnVtYmVyPC9zcGFuPgoKCiAgICAgICAgICAgIAogICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgCgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0iZGVzY3JpcHRpb24gbGFzdCI+PHA+VGhlIHN0YXJ0aW5nIHBvc2l0aW9uIG9mIHRoZSBzY2VuZSAoaW4gcmVsYXRpb24gdG8gdGhlIGNvbmFpbmVyKTwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPmVuZFBvczwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5udW1iZXI8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgZW5kaW5nIHBvc2l0aW9uIG9mIHRoZSBzY2VuZSAoaW4gcmVsYXRpb24gdG8gdGhlIGNvbmFpbmVyKTwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgogICAgICAgIDx0cj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5hbWUiPjxjb2RlPnNjcm9sbFBvczwvY29kZT48L3RkPgogICAgICAgICAgICAKCiAgICAgICAgICAgIDx0ZCBjbGFzcz0idHlwZSI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCjxzcGFuIGNsYXNzPSJwYXJhbS10eXBlIj5udW1iZXI8L3NwYW4+CgoKICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgPHRkIGNsYXNzPSJkZXNjcmlwdGlvbiBsYXN0Ij48cD5UaGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGNvbnRhaW5lcjwvcD48L3RkPgogICAgICAgIDwvdHI+CgoJCgk8L3Rib2R5Pgo8L3RhYmxlPgoKICAgICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgoKCQoJPC90Ym9keT4KPC90YWJsZT4KPC9kbD4KCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKCiAgICAKICAgIDxkdCBjbGFzcz0idGFnLXNvdXJjZSI+U291cmNlOjwvZHQ+CiAgICA8ZGQgY2xhc3M9InRhZy1zb3VyY2UiPjx1bCBjbGFzcz0iZHVtbXkiPjxsaT4KICAgICAgICA8YSBocmVmPSJqcXVlcnkuc2Nyb2xsbWFnaWMuanMuaHRtbCI+anF1ZXJ5LnNjcm9sbG1hZ2ljLmpzPC9hPiwgPGEgaHJlZj0ianF1ZXJ5LnNjcm9sbG1hZ2ljLmpzLmh0bWwjc3VubGlnaHQtMS1saW5lLTIyMjEiPmxpbmUgMjIyMTwvYT4KICAgIDwvbGk+PC91bD48L2RkPgogICAgCgogICAgCgogICAgCgogICAgCjwvZGw+CgogICAgCiAgICAKCiAgICAKCiAgICAKICAgIAogICAgCiAgICAKICAgIAogICAgCiAgICAKICAgICAgICA8aDU+RXhhbXBsZTwvaDU+CiAgICAgICAgCiAgICA8cHJlIGNsYXNzPSJzdW5saWdodC1oaWdobGlnaHQtamF2YXNjcmlwdCI+c2NlbmUub24oInVwZGF0ZSIsIGZ1bmN0aW9uIChldmVudCkgew0JCWNvbnNvbGUubG9nKCJTY2VuZSB1cGRhdGVkLiIpOw19KTs8L3ByZT4KCgogICAgCjwvZGQ+CgogICAgICAgIDwvZGw+CiAgICAKPC9hcnRpY2xlPgoKPC9zZWN0aW9uPgoKCgoKCQkJCTwvZGl2PgoKCQkJCTxkaXYgY2xhc3M9ImNsZWFyZml4Ij48L2Rpdj4KCQkJCTxmb290ZXI+CgkJCQkJCgkJCQkJCgkJPHNwYW4gY2xhc3M9ImNvcHlyaWdodCI+CgkJwqkgSmFuIFBhZXBrZSAyMDE0CgkJPC9zcGFuPgoJCQkJCTxiciAvPgoJCQkJCQoJCTxzcGFuIGNsYXNzPSJqc2RvYy1tZXNzYWdlIj4KCQlEb2N1bWVudGF0aW9uIGdlbmVyYXRlZCBieSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vanNkb2MzL2pzZG9jIiB0YXJnZXQ9Il9ibGFuayI+SlNEb2MgMy4zLjAtYWxwaGE5PC9hPgoJCXVzaW5nIGEgY3VzdG9taXplZCB2ZXJzaW9uIG9mIHRoZSA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vdGVycnl3ZWlzcy9kb2NzdHJhcCIgdGFyZ2V0PSJfYmxhbmsiPkRvY1N0cmFwIHRlbXBsYXRlPC9hPi4KCQk8L3NwYW4+CgkJCQk8L2Zvb3Rlcj4KCQkJPC9kaXY+CgoJCQkKCQkJPGRpdiBjbGFzcz0ic3BhbjMiPgoJCQkJPGRpdiBpZD0idG9jIj48L2Rpdj4KCQkJPC9kaXY+CgkJCQoJCQk8YnIgY2xlYXI9ImJvdGgiPgoJCTwvZGl2PgoKCTwvZGl2PgoJPHNjcmlwdCBzcmM9InNjcmlwdHMvc3VubGlnaHQuanMiPjwvc2NyaXB0PgoJPHNjcmlwdCBzcmM9InNjcmlwdHMvc3VubGlnaHQuamF2YXNjcmlwdC5qcyI+PC9zY3JpcHQ+Cgk8c2NyaXB0IHNyYz0ic2NyaXB0cy9zdW5saWdodC1wbHVnaW4uZG9jbGlua3MuanMiPjwvc2NyaXB0PgoJPHNjcmlwdCBzcmM9InNjcmlwdHMvc3VubGlnaHQtcGx1Z2luLmxpbmVudW1iZXJzLmpzIj48L3NjcmlwdD4KCTxzY3JpcHQgc3JjPSJzY3JpcHRzL3N1bmxpZ2h0LXBsdWdpbi5tZW51LmpzIj48L3NjcmlwdD4KCTxzY3JpcHQgc3JjPSJzY3JpcHRzL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgoJPHNjcmlwdCBzcmM9InNjcmlwdHMvanF1ZXJ5LnNjcm9sbFRvLmpzIj48L3NjcmlwdD4KCTxzY3JpcHQgc3JjPSJzY3JpcHRzL2pxdWVyeS5sb2NhbFNjcm9sbC5qcyI+PC9zY3JpcHQ+Cgk8c2NyaXB0IHNyYz0ic2NyaXB0cy9ib290c3RyYXAtZHJvcGRvd24uanMiPjwvc2NyaXB0PgoJPHNjcmlwdCBzcmM9InNjcmlwdHMvdG9jLmpzIj48L3NjcmlwdD4KCgk8c2NyaXB0PiBwcmV0dHlQcmludCgpOyA8L3NjcmlwdD4KCTxzY3JpcHQ+ICBTdW5saWdodC5oaWdobGlnaHRBbGwoe2xpbmVOdW1iZXJzOnRydWUsICBzaG93TWVudTogdHJ1ZSwgZW5hYmxlRG9jbGlua3MgOnRydWV9KTsgPC9zY3JpcHQ+CgoJPHNjcmlwdD4KCQlmdW5jdGlvbiBvcGVuRGVlcGxpbmtlZEVsZW1lbnQgKHNraXBBbmkpIHsKCQkJJCgiZHQgaDQubWVtYmVyLWNvbGxhcHNlZFtpZD0nIiArIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKS5yZXBsYWNlKCI6IiwgIlxcOiIpICsiJ10iKS50cmlnZ2VyKCJjbGljayIsIHNraXBBbmkpOwoJCX0KCQkkKCBmdW5jdGlvbiAoKSB7CgkJCSQoICIjdG9jIiApLnRvYyggewoJCQkgICAgYW5jaG9yTmFtZSAgOiBmdW5jdGlvbihpLCBoZWFkaW5nLCBwcmVmaXgpIHsKCQkJCQlyZXR1cm4gJChoZWFkaW5nKS5hdHRyKCJpZCIpIHx8ICggcHJlZml4ICsgaSApOwoJCQkJfSwKCQkJCXNlbGVjdG9ycyAgIDogImgxOnZpc2libGUsaDI6dmlzaWJsZSxoMzp2aXNpYmxlLGg0OnZpc2libGUiLAoJCQkJb25TY3JvbGxGaW5pc2ggOiBvcGVuRGVlcGxpbmtlZEVsZW1lbnQsCgkJCQloaWdobGlnaHRPZmZzZXQgOiAxMCwKCQkJCXNjcm9sbE9mZnNldDogNjAKCQkJfSApOwoJCQkkKCAiI3RvYz51bCIgKS5hZGRDbGFzcyggIm5hdiBuYXYtcGlsbHMgbmF2LXN0YWNrZWQiICk7CgkJCSQoICIjbWFpbiBzcGFuW2lkXj0ndG9jJ10iICkuYWRkQ2xhc3MoICJ0b2Mtc2hpbSIgKTsKCgkJfSApOwoJPC9zY3JpcHQ+CgoJCgk8c2NyaXB0PgoJCSQoIGZ1bmN0aW9uICgpIHsKCQkJLy8gJCgnI21haW4nKS5sb2NhbFNjcm9sbCh7CgkJCS8vIAlvZmZzZXQ6IHsgdG9wOiA1NiB9IC8vb2Zmc2V0IGJ5IHRoZSBoZWlnaHQgb2YgeW91ciBoZWFkZXIgKGdpdmUgb3IgdGFrZSBhIGZldyBweCwgc2VlIHdoYXQgd29ya3MgZm9yIHlvdSkKCQkJLy8gfSk7CgkJCS8vIHdvcmthcm91bmQgZm9yIGFuY2hvcnMgYmVsb3cgaGVhZGVyLi4uCgkJCXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKCQkJCSQoZG9jdW1lbnQpLnNjcm9sbFRvcCgkKGRvY3VtZW50KS5zY3JvbGxUb3AoKS02MCk7CgkJCX0sIDEpCgkJCQoJCQl2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKS5yZXBsYWNlKCI6IiwgIlxcOiIpOwoJCQkkKCAiZHQgaDQubmFtZSIgKS5lYWNoKCBmdW5jdGlvbiAoKSB7CgkJCQl2YXIgJHRoaXMgPSAkKCB0aGlzICk7CgkJCQl2YXIgaWNvbiA9ICQoICI8aS8+IiApLmFkZENsYXNzKCAiaWNvbi1wbHVzLXNpZ24iICkuYWRkQ2xhc3MoICJwdWxsLXJpZ2h0IiApLmFkZENsYXNzKCAiaWNvbi13aGl0ZSIgKTsKCQkJCXZhciBkdCA9ICR0aGlzLnBhcmVudHMoICJkdCIgKTsKCQkJCXZhciBjaGlsZHJlbiA9IGR0Lm5leHQoICJkZCIgKTsKCgkJCQkkdGhpcy5hcHBlbmQoIGljb24gKS5jc3MoIHtjdXJzb3IgOiAicG9pbnRlciJ9ICk7CgkJCQkkdGhpcy5hZGRDbGFzcyggIm1lbWJlci1jb2xsYXBzZWQiICkuYWRkQ2xhc3MoICJtZW1iZXIiICk7CgkJCQlpZiAoaGFzaCAhPSAkdGhpcy5hdHRyKCJpZCIpKSB7CgkJCQkJY2hpbGRyZW4uaGlkZSgpOwoJCQkJfQoJCQkJJHRoaXMudG9nZ2xlKCBmdW5jdGlvbiAoZSwgc2tpcEFuaSkgewoJCQkJCXZhciBzY3JvbGxQb3MgPSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKTsKCQkJCQl3aW5kb3cubG9jYXRpb24uaGFzaCA9ICQodGhpcykuYXR0cigiaWQiKTsKCQkJCQkkKGRvY3VtZW50KS5zY3JvbGxUb3Aoc2Nyb2xsUG9zKTsKCQkJCQlpY29uLmFkZENsYXNzKCAiaWNvbi1taW51cy1zaWduIiApLnJlbW92ZUNsYXNzKCAiaWNvbi1wbHVzLXNpZ24iICkucmVtb3ZlQ2xhc3MoICJpY29uLXdoaXRlIiApOwoJCQkJCSR0aGlzLmFkZENsYXNzKCAibWVtYmVyLW9wZW4iICkucmVtb3ZlQ2xhc3MoICJtZW1iZXItY29sbGFwc2VkIiApOwoJCQkJCWNoaWxkcmVuLnNsaWRlRG93bihza2lwQW5pID8gMCA6IHVuZGVmaW5lZCk7CgkJCQl9LCBmdW5jdGlvbiAoKSB7CgkJCQkJaWNvbi5hZGRDbGFzcyggImljb24tcGx1cy1zaWduIiApLnJlbW92ZUNsYXNzKCAiaWNvbi1taW51cy1zaWduIiApLmFkZENsYXNzKCAiaWNvbi13aGl0ZSIgKTsKCQkJCQkkdGhpcy5hZGRDbGFzcyggIm1lbWJlci1jb2xsYXBzZWQiICkucmVtb3ZlQ2xhc3MoICJtZW1iZXItb3BlbiIgKTsKCQkJCQljaGlsZHJlbi5zbGlkZVVwKCk7CgkJCQl9ICk7CgkJCX0gKTsKCQkJLy8gb3BlbiBpZiBkZWVwbGlua2VkCgkJCWlmIChoYXNoLmxlbmd0aCA+IDApCgkJCQlvcGVuRGVlcGxpbmtlZEVsZW1lbnQodHJ1ZSk7CgkJfSApOwoJPC9zY3JpcHQ+CgkKCgk8c2NyaXB0PgoJCShmdW5jdGlvbihpLHMsbyxnLHIsYSxtKXtpWydHb29nbGVBbmFseXRpY3NPYmplY3QnXT1yO2lbcl09aVtyXXx8ZnVuY3Rpb24oKXsKCQkoaVtyXS5xPWlbcl0ucXx8W10pLnB1c2goYXJndW1lbnRzKX0saVtyXS5sPTEqbmV3IERhdGUoKTthPXMuY3JlYXRlRWxlbWVudChvKSwKCQltPXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07YS5hc3luYz0xO2Euc3JjPWc7bS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLG0pCgkJfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCcvL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanMnLCdnYScpOwoJCWdhKCdjcmVhdGUnLCAnVUEtMzc1MjQzNDQtMycsICdqYW5wYWVwa2UuZ2l0aHViLmlvJyk7CgkJZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsKCTwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4=",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 04:08:55 GMT",
                    "Content-Length": "128838",
                    "Date": "Sat, 08 Nov 2014 04:08:56 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}