{
    "url": "http://localhost:9999/shahariaazam/theme-asset/assets/scripts/core/app.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Cross-site scripting (DOM-based)",
    "issueType": 2097936,
    "severity": "High",
    "confidence": "Firm",
    "issueBackground": "DOM-based cross-site scripting vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and writes this data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.<br><br>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.<br><br>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities. ",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data into the HTML document that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence.",
    "issueDetail": "The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.hash</b> and written to <b>$()</b> via the following statements:<ul><li>var tabid = location.hash.substr(1);</li><li>$('a[href=\"#...' + tabid+ '\"]' ) </li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/shahariaazam/theme-asset/assets/scripts/core/app.js",
                "path": "/shahariaazam/theme-asset/assets/scripts/core/app.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9zaGFoYXJpYWF6YW0vdGhlbWUtYXNzZXQvYXNzZXRzL3NjcmlwdHMvY29yZS9hcHAuanMgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNDkzNjENCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkRhdGU6IFNhdCwgMDggTm92IDIwMTQgMDQ6MzA6MTcgR01UDQpMYXN0LU1vZGlmaWVkOiBTYXQsIDA4IE5vdiAyMDE0IDA0OjMwOjE2IEdNVA0KDQovKioKQ29yZSBzY3JpcHQgdG8gaGFuZGxlIHRoZSBlbnRpcmUgdGhlbWUgYW5kIGNvcmUgZnVuY3Rpb25zCioqLwp2YXIgQXBwID0gZnVuY3Rpb24gKCkgewoKICAgIC8vIElFIG1vZGUKICAgIHZhciBpc1JUTCA9IGZhbHNlOwogICAgdmFyIGlzSUU4ID0gZmFsc2U7CiAgICB2YXIgaXNJRTkgPSBmYWxzZTsKICAgIHZhciBpc0lFMTAgPSBmYWxzZTsKCiAgICB2YXIgc2lkZWJhcldpZHRoID0gMjI1OwogICAgdmFyIHNpZGViYXJDb2xsYXBzZWRXaWR0aCA9IDM1OwoKICAgIHZhciByZXNwb25zaXZlSGFuZGxlcnMgPSBbXTsKCiAgICAvLyB0aGVtZSBsYXlvdXQgY29sb3Igc2V0CiAgICB2YXIgbGF5b3V0Q29sb3JDb2RlcyA9IHsKICAgICAgICAnYmx1ZSc6ICcjNGI4ZGY4JywKICAgICAgICAncmVkJzogJyNlMDIyMjInLAogICAgICAgICdncmVlbic6ICcjMzVhYTQ3JywKICAgICAgICAncHVycGxlJzogJyM4NTJiOTknLAogICAgICAgICdncmV5JzogJyM1NTU1NTUnLAogICAgICAgICdsaWdodC1ncmV5JzogJyNmYWZhZmEnLAogICAgICAgICd5ZWxsb3cnOiAnI2ZmYjg0OCcKICAgIH07CgogICAgLy8gVG8gZ2V0IHRoZSBjb3JyZWN0IHZpZXdwb3J0IHdpZHRoIGJhc2VkIG9uICBodHRwOi8vYW5keWxhbmd0b24uY28udWsvYXJ0aWNsZXMvamF2YXNjcmlwdC9nZXQtdmlld3BvcnQtc2l6ZS1qYXZhc2NyaXB0LwogICAgdmFyIF9nZXRWaWV3UG9ydCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgZSA9IHdpbmRvdywgYSA9ICdpbm5lcic7CiAgICAgICAgaWYgKCEoJ2lubmVyV2lkdGgnIGluIHdpbmRvdykpIHsKICAgICAgICAgICAgYSA9ICdjbGllbnQnOwogICAgICAgICAgICBlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHdpZHRoOiBlW2EgKyAnV2lkdGgnXSwKICAgICAgICAgICAgaGVpZ2h0OiBlW2EgKyAnSGVpZ2h0J10KICAgICAgICB9CiAgICB9CgogICAgLy8gaW5pdGlhbGl6ZXMgbWFpbiBzZXR0aW5ncwogICAgdmFyIGhhbmRsZUluaXQgPSBmdW5jdGlvbiAoKSB7CgogICAgICAgIGlmICgkKCdib2R5JykuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpIHsKICAgICAgICAgICAgaXNSVEwgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgaXNJRTggPSAhISBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9NU0lFIDguMC8pOwogICAgICAgIGlzSUU5ID0gISEgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvTVNJRSA5LjAvKTsKICAgICAgICBpc0lFMTAgPSAhISBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9NU0lFIDEwLjAvKTsKCiAgICAgICAgaWYgKGlzSUUxMCkgewogICAgICAgICAgICBqUXVlcnkoJ2h0bWwnKS5hZGRDbGFzcygnaWUxMCcpOyAvLyBkZXRlY3QgSUUxMCB2ZXJzaW9uCiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmIChpc0lFMTAgfHwgaXNJRTkgfHwgaXNJRTgpIHsKICAgICAgICAgICAgalF1ZXJ5KCdodG1sJykuYWRkQ2xhc3MoJ2llJyk7IC8vIGRldGVjdCBJRTEwIHZlcnNpb24KICAgICAgICB9CgogICAgICAgIC8qCiAgICAgICAgICBWaXJ0dWFsIGtleWJvYXJkczoKICAgICAgICAgIEFsc28sIG5vdGUgdGhhdCBpZiB5b3UncmUgdXNpbmcgaW5wdXRzIGluIHlvdXIgbW9kYWwg4oCTIGlPUyBoYXMgYSByZW5kZXJpbmcgYnVnIHdoaWNoIGRvZXNuJ3QgCiAgICAgICAgICB1cGRhdGUgdGhlIHBvc2l0aW9uIG9mIGZpeGVkIGVsZW1lbnRzIHdoZW4gdGhlIHZpcnR1YWwga2V5Ym9hcmQgaXMgdHJpZ2dlcmVkICAKICAgICAgICAqLwogICAgICAgIHZhciBkZXZpY2VBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsKICAgICAgICBpZiAoZGV2aWNlQWdlbnQubWF0Y2goLyhpcGhvbmV8aXBvZHxpcGFkKS8pKSB7CiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdmb2N1cycsICdpbnB1dCwgdGV4dGFyZWEnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkKCcucGFnZS1oZWFkZXInKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAkKCcucGFnZS1mb290ZXInKS5oaWRlKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkKGRvY3VtZW50KS5vbignYmx1cicsICdpbnB1dCwgdGV4dGFyZWEnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkKCcucGFnZS1oZWFkZXInKS5zaG93KCk7CiAgICAgICAgICAgICAgICAkKCcucGFnZS1mb290ZXInKS5zaG93KCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KCiAgICB2YXIgaGFuZGxlU2lkZWJhclN0YXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgIC8vIHJlbW92ZSBzaWRlYmFyIHRvZ2dsZXIgaWYgd2luZG93IHdpZHRoIHNtYWxsZXIgdGhhbiA5OTIoZm9yIHRhYmxldCBhbmQgcGhvbmUgbW9kZSkKICAgICAgICB2YXIgdmlld3BvcnQgPSBfZ2V0Vmlld1BvcnQoKTsKICAgICAgICBpZiAodmlld3BvcnQud2lkdGggPCA5OTIpIHsKICAgICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCJwYWdlLXNpZGViYXItY2xvc2VkIik7CiAgICAgICAgfQogICAgfQoKICAgIC8vIHJ1bnMgY2FsbGJhY2sgZnVuY3Rpb25zIHNldCBieSBBcHAuYWRkUmVzcG9uc2l2ZUhhbmRsZXIoKS4KICAgIHZhciBydW5SZXNwb25zaXZlSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy8gcmVpbml0aWFsaXplIG90aGVyIHN1YnNjcmliZWQgZWxlbWVudHMKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNpdmVIYW5kbGVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgZWFjaCA9IHJlc3BvbnNpdmVIYW5kbGVyc1tpXTsKICAgICAgICAgICAgZWFjaC5jYWxsKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIHJlaW5pdGlhbGl6ZSB0aGUgbGF5cG90IG9uIHdpbmRvdyByZXNpemUKICAgIHZhciBoYW5kbGVSZXNwb25zaXZlID0gZnVuY3Rpb24gKCkgewogICAgICAgIGhhbmRsZVNpZGViYXJTdGF0ZSgpOwogICAgICAgIGhhbmRsZVNpZGViYXJBbmRDb250ZW50SGVpZ2h0KCk7CiAgICAgICAgaGFuZGxlRml4ZWRTaWRlYmFyKCk7CiAgICAgICAgcnVuUmVzcG9uc2l2ZUhhbmRsZXJzKCk7CiAgICB9CgogICAgLy8gaW5pdGlhbGl6ZSB0aGUgbGF5b3V0IG9uIHBhZ2UgbG9hZAogICAgdmFyIGhhbmRsZVJlc3BvbnNpdmVPbkluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaGFuZGxlU2lkZWJhclN0YXRlKCk7CiAgICAgICAgaGFuZGxlU2lkZWJhckFuZENvbnRlbnRIZWlnaHQoKTsKICAgIH0KCiAgICAvLyBoYW5kbGUgdGhlIGxheW91dCByZWluaXRpYWxpemF0aW9uIG9uIHdpbmRvdyByZXNpemUKICAgIHZhciBoYW5kbGVSZXNwb25zaXZlT25SZXNpemUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHJlc2l6ZTsKICAgICAgICBpZiAoaXNJRTgpIHsKICAgICAgICAgICAgdmFyIGN1cnJoZWlnaHQ7CiAgICAgICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKGN1cnJoZWlnaHQgPT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy9xdWl0ZSBldmVudCBzaW5jZSBvbmx5IGJvZHkgcmVzaXplZCBub3Qgd2luZG93LgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHJlc2l6ZSkgewogICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXNpemUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzaXplID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlUmVzcG9uc2l2ZSgpOwogICAgICAgICAgICAgICAgfSwgNTApOyAvLyB3YWl0IDUwbXMgdW50aWwgd2luZG93IHJlc2l6ZSBmaW5pc2hlcy4gICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjdXJyaGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDsgLy8gc3RvcmUgbGFzdCBib2R5IGNsaWVudCBoZWlnaHQKICAgICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAocmVzaXplKSB7CiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlc2l6ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXNpemUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVSZXNwb25zaXZlKCk7CiAgICAgICAgICAgICAgICB9LCA1MCk7IC8vIHdhaXQgNTBtcyB1bnRpbCB3aW5kb3cgcmVzaXplIGZpbmlzaGVzLgogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9CgogICAgLy8qIEJFR0lOOkNPUkUgSEFORExFUlMgKi8vCiAgICAvLyB0aGlzIGZ1bmN0aW9uIGhhbmRsZXMgcmVzcG9uc2l2ZSBsYXlvdXQgb24gc2NyZWVuIHNpemUgcmVzaXplIG9yIG1vYmlsZSBkZXZpY2Ugcm90YXRlLgoKICAgIC8vIFNldCBwcm9wZXIgaGVpZ2h0IGZvciBzaWRlYmFyIGFuZCBjb250ZW50LiBUaGUgY29udGVudCBhbmQgc2lkZWJhciBoZWlnaHQgbXVzdCBiZSBzeW5jZWQgYWx3YXlzLgogICAgdmFyIGhhbmRsZVNpZGViYXJBbmRDb250ZW50SGVpZ2h0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBjb250ZW50ID0gJCgnLnBhZ2UtY29udGVudCcpOwogICAgICAgIHZhciBzaWRlYmFyID0gJCgnLnBhZ2Utc2lkZWJhcicpOwogICAgICAgIHZhciBib2R5ID0gJCgnYm9keScpOwogICAgICAgIHZhciBoZWlnaHQ7CgogICAgICAgIGlmIChib2R5Lmhhc0NsYXNzKCJwYWdlLWZvb3Rlci1maXhlZCIpID09PSB0cnVlICYmIGJvZHkuaGFzQ2xhc3MoInBhZ2Utc2lkZWJhci1maXhlZCIpID09PSBmYWxzZSkgewogICAgICAgICAgICB2YXIgYXZhaWxhYmxlX2hlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtICQoJy5mb290ZXInKS5vdXRlckhlaWdodCgpIC0gJCgnLmhlYWRlcicpLm91dGVySGVpZ2h0KCk7CiAgICAgICAgICAgIGlmIChjb250ZW50LmhlaWdodCgpIDwgYXZhaWxhYmxlX2hlaWdodCkgewogICAgICAgICAgICAgICAgY29udGVudC5hdHRyKCdzdHlsZScsICdtaW4taGVpZ2h0OicgKyBhdmFpbGFibGVfaGVpZ2h0ICsgJ3B4ICFpbXBvcnRhbnQnKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChib2R5Lmhhc0NsYXNzKCdwYWdlLXNpZGViYXItZml4ZWQnKSkgewogICAgICAgICAgICAgICAgaGVpZ2h0ID0gX2NhbGN1bGF0ZUZpeGVkU2lkZWJhclZpZXdwb3J0SGVpZ2h0KCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBoZWlnaHQgPSBzaWRlYmFyLmhlaWdodCgpICsgMjA7CiAgICAgICAgICAgICAgICB2YXIgaGVhZGVySGVpZ2h0ID0gJCgnLmhlYWRlcicpLm91dGVySGVpZ2h0KCk7CiAgICAgICAgICAgICAgICB2YXIgZm9vdGVySGVpZ2h0ID0gJCgnLmZvb3RlcicpLm91dGVySGVpZ2h0KCk7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpID4gMTAyNCAmJiAoaGVpZ2h0ICsgaGVhZGVySGVpZ2h0ICsgZm9vdGVySGVpZ2h0KSAgPCAkKHdpbmRvdykuaGVpZ2h0KCkpIHsKICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCkgLSBoZWFkZXJIZWlnaHQgLSBmb290ZXJIZWlnaHQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gICAgICAgICAgICAKICAgICAgICAgICAgaWYgKGhlaWdodCA+PSBjb250ZW50LmhlaWdodCgpKSB7CiAgICAgICAgICAgICAgICBjb250ZW50LmF0dHIoJ3N0eWxlJywgJ21pbi1oZWlnaHQ6JyArIGhlaWdodCArICdweCAhaW1wb3J0YW50Jyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8gSGFuZGxlIHNpZGViYXIgbWVudQogICAgdmFyIGhhbmRsZVNpZGViYXJNZW51ID0gZnVuY3Rpb24gKCkgewogICAgICAgIGpRdWVyeSgnLnBhZ2Utc2lkZWJhcicpLm9uKCdjbGljaycsICdsaSA+IGEnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoJCh0aGlzKS5uZXh0KCkuaGFzQ2xhc3MoJ3N1Yi1tZW51JykgPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIGlmICgkKCcuYnRuLW5hdmJhcicpLmhhc0NsYXNzKCdjb2xsYXBzZWQnKSA9PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICQoJy5idG4tbmF2YmFyJykuY2xpY2soKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCQodGhpcykubmV4dCgpLmhhc0NsYXNzKCdzdWItbWVudSBhbHdheXMtb3BlbicpKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBwYXJlbnQgPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpOwogICAgICAgICAgICB2YXIgdGhlID0gJCh0aGlzKTsKICAgICAgICAgICAgdmFyIG1lbnUgPSAkKCcucGFnZS1zaWRlYmFyLW1lbnUnKTsKICAgICAgICAgICAgdmFyIHN1YiA9IGpRdWVyeSh0aGlzKS5uZXh0KCk7CgogICAgICAgICAgICB2YXIgYXV0b1Njcm9sbCA9IG1lbnUuZGF0YSgiYXV0by1zY3JvbGwiKSA/IG1lbnUuZGF0YSgiYXV0by1zY3JvbGwiKSA6IHRydWU7CiAgICAgICAgICAgIHZhciBzbGlkZVNwZWVkID0gbWVudS5kYXRhKCJzbGlkZS1zcGVlZCIpID8gcGFyc2VJbnQobWVudS5kYXRhKCJzbGlkZS1zcGVlZCIpKSA6IDIwMDsKCiAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbignbGkub3BlbicpLmNoaWxkcmVuKCdhJykuY2hpbGRyZW4oJy5hcnJvdycpLnJlbW92ZUNsYXNzKCdvcGVuJyk7CiAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbignbGkub3BlbicpLmNoaWxkcmVuKCcuc3ViLW1lbnU6bm90KC5hbHdheXMtb3BlbiknKS5zbGlkZVVwKDIwMCk7CiAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbignbGkub3BlbicpLnJlbW92ZUNsYXNzKCdvcGVuJyk7CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgc2xpZGVPZmZlc2V0ID0gLTIwMDsKCiAgICAgICAgICAgIGlmIChzdWIuaXMoIjp2aXNpYmxlIikpIHsKICAgICAgICAgICAgICAgIGpRdWVyeSgnLmFycm93JywgalF1ZXJ5KHRoaXMpKS5yZW1vdmVDbGFzcygib3BlbiIpOwogICAgICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCJvcGVuIik7CiAgICAgICAgICAgICAgICBzdWIuc2xpZGVVcChzbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGF1dG9TY3JvbGwgPT0gdHJ1ZSAmJiAkKCdib2R5JykuaGFzQ2xhc3MoJ3BhZ2Utc2lkZWJhci1jbG9zZWQnKSA9PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdwYWdlLXNpZGViYXItZml4ZWQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudS5zbGltU2Nyb2xsKHsnc2Nyb2xsVG8nOiAodGhlLnBvc2l0aW9uKCkpLnRvcH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwLnNjcm9sbFRvKHRoZSwgc2xpZGVPZmZlc2V0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYW5kbGVTaWRlYmFyQW5kQ29udGVudEhlaWdodCgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBqUXVlcnkoJy5hcnJvdycsIGpRdWVyeSh0aGlzKSkuYWRkQ2xhc3MoIm9wZW4iKTsKICAgICAgICAgICAgICAgIGpRdWVyeSh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygib3BlbiIpOwogICAgICAgICAgICAgICAgc3ViLnNsaWRlRG93bihzbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGF1dG9TY3JvbGwgPT0gdHJ1ZSAmJiAkKCdib2R5JykuaGFzQ2xhc3MoJ3BhZ2Utc2lkZWJhci1jbG9zZWQnKSA9PSBmYWxzZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdwYWdlLXNpZGViYXItZml4ZWQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudS5zbGltU2Nyb2xsKHsnc2Nyb2xsVG8nOiAodGhlLnBvc2l0aW9uKCkpLnRvcH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXBwLnNjcm9sbFRvKHRoZSwgc2xpZGVPZmZlc2V0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBoYW5kbGVTaWRlYmFyQW5kQ29udGVudEhlaWdodCgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gaGFuZGxlIGFqYXggbGlua3Mgd2l0aGluIHNpZGViYXIgbWVudQogICAgICAgIGpRdWVyeSgnLnBhZ2Utc2lkZWJhcicpLm9uKCdjbGljaycsICcgbGkgPiBhLmFqYXhpZnknLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIEFwcC5zY3JvbGxUb3AoKTsKCiAgICAgICAgICAgIHZhciB1cmwgPSAkKHRoaXMpLmF0dHIoImhyZWYiKTsKICAgICAgICAgICAgdmFyIG1lbnVDb250YWluZXIgPSBqUXVlcnkoJy5wYWdlLXNpZGViYXIgdWwnKTsKICAgICAgICAgICAgdmFyIHBhZ2VDb250ZW50ID0gJCgnLnBhZ2UtY29udGVudCcpOwogICAgICAgICAgICB2YXIgcGFnZUNvbnRlbnRCb2R5ID0gJCgnLnBhZ2UtY29udGVudCAucGFnZS1jb250ZW50LWJvZHknKTsKCiAgICAgICAgICAgIG1lbnVDb250YWluZXIuY2hpbGRyZW4oJ2xpLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTsKICAgICAgICAgICAgbWVudUNvbnRhaW5lci5jaGlsZHJlbignYXJyb3cub3BlbicpLnJlbW92ZUNsYXNzKCdvcGVuJyk7CgogICAgICAgICAgICAkKHRoaXMpLnBhcmVudHMoJ2xpJykuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTsKICAgICAgICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJ2EgPiBzcGFuLmFycm93JykuYWRkQ2xhc3MoJ29wZW4nKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICQodGhpcykucGFyZW50cygnbGknKS5hZGRDbGFzcygnYWN0aXZlJyk7CgogICAgICAgICAgICBBcHAuc3RhcnRQYWdlTG9hZGluZygpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDw9IDk5MSAmJiAkKCcucGFnZS1zaWRlYmFyJykuaGFzQ2xhc3MoImluIikpIHsKICAgICAgICAgICAgICAgICQoJy5uYXZiYXItdG9nZ2xlJykuY2xpY2soKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLAogICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBkYXRhVHlwZTogImh0bWwiLAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgICAgICAgICAgIEFwcC5zdG9wUGFnZUxvYWRpbmcoKTsKICAgICAgICAgICAgICAgICAgICBwYWdlQ29udGVudEJvZHkuaHRtbChyZXMpOwogICAgICAgICAgICAgICAgICAgIEFwcC5maXhDb250ZW50SGVpZ2h0KCk7IC8vIGZpeCBjb250ZW50IGhlaWdodAogICAgICAgICAgICAgICAgICAgIEFwcC5pbml0QWpheCgpOyAvLyBpbml0aWFsaXplIGNvcmUgc3R1ZmYKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgYWpheE9wdGlvbnMsIHRocm93bkVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgcGFnZUNvbnRlbnRCb2R5Lmh0bWwoJzxoND5Db3VsZCBub3QgbG9hZCB0aGUgcmVxdWVzdGVkIGNvbnRlbnQuPC9oND4nKTsKICAgICAgICAgICAgICAgICAgICBBcHAuc3RvcFBhZ2VMb2FkaW5nKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICAvLyBoYW5kbGUgYWpheCBsaW5rIHdpdGhpbiBtYWluIGNvbnRlbnQKICAgICAgICBqUXVlcnkoJy5wYWdlLWNvbnRlbnQnKS5vbignY2xpY2snLCAnLmFqYXhpZnknLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIEFwcC5zY3JvbGxUb3AoKTsKCiAgICAgICAgICAgIHZhciB1cmwgPSAkKHRoaXMpLmF0dHIoImhyZWYiKTsKICAgICAgICAgICAgdmFyIHBhZ2VDb250ZW50ID0gJCgnLnBhZ2UtY29udGVudCcpOwogICAgICAgICAgICB2YXIgcGFnZUNvbnRlbnRCb2R5ID0gJCgnLnBhZ2UtY29udGVudCAucGFnZS1jb250ZW50LWJvZHknKTsKCiAgICAgICAgICAgIEFwcC5zdGFydFBhZ2VMb2FkaW5nKCk7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPD0gOTkxICYmICQoJy5wYWdlLXNpZGViYXInKS5oYXNDbGFzcygiaW4iKSkgewogICAgICAgICAgICAgICAgJCgnLm5hdmJhci10b2dnbGUnKS5jbGljaygpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdHlwZTogIkdFVCIsCiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsCiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAiaHRtbCIsCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgICAgICAgICAgQXBwLnN0b3BQYWdlTG9hZGluZygpOwogICAgICAgICAgICAgICAgICAgIHBhZ2VDb250ZW50Qm9keS5odG1sKHJlcyk7CiAgICAgICAgICAgICAgICAgICAgQXBwLmZpeENvbnRlbnRIZWlnaHQoKTsgLy8gZml4IGNvbnRlbnQgaGVpZ2h0CiAgICAgICAgICAgICAgICAgICAgQXBwLmluaXRBamF4KCk7IC8vIGluaXRpYWxpemUgY29yZSBzdHVmZgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBhamF4T3B0aW9ucywgdGhyb3duRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICBwYWdlQ29udGVudEJvZHkuaHRtbCgnPGg0PkNvdWxkIG5vdCBsb2FkIHRoZSByZXF1ZXN0ZWQgY29udGVudC48L2g0PicpOwogICAgICAgICAgICAgICAgICAgIEFwcC5zdG9wUGFnZUxvYWRpbmcoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBzaWRlYmFyIGhlaWdodCBmb3IgZml4ZWQgc2lkZWJhciBsYXlvdXQuCiAgICB2YXIgX2NhbGN1bGF0ZUZpeGVkU2lkZWJhclZpZXdwb3J0SGVpZ2h0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBzaWRlYmFySGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpIC0gJCgnLmhlYWRlcicpLmhlaWdodCgpICsgMTsKICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCJwYWdlLWZvb3Rlci1maXhlZCIpKSB7CiAgICAgICAgICAgIHNpZGViYXJIZWlnaHQgPSBzaWRlYmFySGVpZ2h0IC0gJCgnLmZvb3RlcicpLm91dGVySGVpZ2h0KCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc2lkZWJhckhlaWdodDsKICAgIH0KCiAgICAvLyBIYW5kbGVzIGZpeGVkIHNpZGViYXIKICAgIHZhciBoYW5kbGVGaXhlZFNpZGViYXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG1lbnUgPSAkKCcucGFnZS1zaWRlYmFyLW1lbnUnKTsKCiAgICAgICAgaWYgKG1lbnUucGFyZW50KCcuc2xpbVNjcm9sbERpdicpLnNpemUoKSA9PT0gMSkgeyAvLyBkZXN0cm95IGV4aXN0aW5nIGluc3RhbmNlIGJlZm9yZSB1cGRhdGluZyB0aGUgaGVpZ2h0CiAgICAgICAgICAgIG1lbnUuc2xpbVNjcm9sbCh7CiAgICAgICAgICAgICAgICBkZXN0cm95OiB0cnVlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBtZW51LnJlbW92ZUF0dHIoJ3N0eWxlJyk7CiAgICAgICAgICAgICQoJy5wYWdlLXNpZGViYXInKS5yZW1vdmVBdHRyKCdzdHlsZScpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCQoJy5wYWdlLXNpZGViYXItZml4ZWQnKS5zaXplKCkgPT09IDApIHsKICAgICAgICAgICAgaGFuZGxlU2lkZWJhckFuZENvbnRlbnRIZWlnaHQoKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIHZpZXdwb3J0ID0gX2dldFZpZXdQb3J0KCk7CiAgICAgICAgaWYgKHZpZXdwb3J0LndpZHRoID49IDk5MikgewogICAgICAgICAgICB2YXIgc2lkZWJhckhlaWdodCA9IF9jYWxjdWxhdGVGaXhlZFNpZGViYXJWaWV3cG9ydEhlaWdodCgpOwoKICAgICAgICAgICAgbWVudS5zbGltU2Nyb2xsKHsKICAgICAgICAgICAgICAgIHNpemU6ICc3cHgnLAogICAgICAgICAgICAgICAgY29sb3I6ICcjYTFiMmJkJywKICAgICAgICAgICAgICAgIG9wYWNpdHk6IC4zLAogICAgICAgICAgICAgICAgcG9zaXRpb246IGlzUlRMID8gJ2xlZnQnIDogJ3JpZ2h0JywKICAgICAgICAgICAgICAgIGhlaWdodDogc2lkZWJhckhlaWdodCwKICAgICAgICAgICAgICAgIGFsbG93UGFnZVNjcm9sbDogZmFsc2UsCiAgICAgICAgICAgICAgICBkaXNhYmxlRmFkZU91dDogZmFsc2UKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGhhbmRsZVNpZGViYXJBbmRDb250ZW50SGVpZ2h0KCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEhhbmRsZXMgdGhlIHNpZGViYXIgbWVudSBob3ZlciBlZmZlY3QgZm9yIGZpeGVkIHNpZGViYXIuCiAgICB2YXIgaGFuZGxlRml4ZWRTaWRlYmFySG92ZXJhYmxlID0gZnVuY3Rpb24gKCkgewogICAgICAgIGlmICgkKCdib2R5JykuaGFzQ2xhc3MoJ3BhZ2Utc2lkZWJhci1maXhlZCcpID09PSBmYWxzZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICAkKCcucGFnZS1zaWRlYmFyJykub2ZmKCdtb3VzZWVudGVyJykub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBib2R5ID0gJCgnYm9keScpOwoKICAgICAgICAgICAgaWYgKChib2R5Lmhhc0NsYXNzKCdwYWdlLXNpZGViYXItY2xvc2VkJykgPT09IGZhbHNlIHx8IGJvZHkuaGFzQ2xhc3MoJ3BhZ2Utc2lkZWJhci1maXhlZCcpID09PSBmYWxzZSkgfHwgJCh0aGlzKS5oYXNDbGFzcygncGFnZS1zaWRlYmFyLWhvdmVyaW5nJykpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYm9keS5yZW1vdmVDbGFzcygncGFnZS1zaWRlYmFyLWNsb3NlZCcpLmFkZENsYXNzKCdwYWdlLXNpZGViYXItaG92ZXItb24nKTsKCiAgICAgICAgICAgIGlmIChib2R5Lmhhc0NsYXNzKCJwYWdlLXNpZGViYXItcmV2ZXJzZWQiKSkgewogICAgICAgICAgICAgICAgJCh0aGlzKS53aWR0aChzaWRlYmFyV2lkdGgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygncGFnZS1zaWRlYmFyLWhvdmVyaW5nJyk7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmFuaW1hdGUoewogICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzaWRlYmFyV2lkdGgKICAgICAgICAgICAgICAgIH0sIDQwMCwgJycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdwYWdlLXNpZGViYXItaG92ZXJpbmcnKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgICQoJy5wYWdlLXNpZGViYXInKS5vZmYoJ21vdXNlbGVhdmUnKS5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGJvZHkgPSAkKCdib2R5Jyk7CgogICAgICAgICAgICBpZiAoKGJvZHkuaGFzQ2xhc3MoJ3BhZ2Utc2lkZWJhci1ob3Zlci1vbicpID09PSBmYWxzZSB8fCBib2R5Lmhhc0NsYXNzKCdwYWdlLXNpZGViYXItZml4ZWQnKSA9PT0gZmFsc2UpIHx8ICQodGhpcykuaGFzQ2xhc3MoJ3BhZ2Utc2lkZWJhci1ob3ZlcmluZycpKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChib2R5Lmhhc0NsYXNzKCJwYWdlLXNpZGViYXItcmV2ZXJzZWQiKSkgewogICAgICAgICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdwYWdlLXNpZGViYXItY2xvc2VkJykucmVtb3ZlQ2xhc3MoJ3BhZ2Utc2lkZWJhci1ob3Zlci1vbicpOwogICAgICAgICAgICAgICAgJCh0aGlzKS53aWR0aChzaWRlYmFyQ29sbGFwc2VkV2lkdGgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygncGFnZS1zaWRlYmFyLWhvdmVyaW5nJyk7CiAgICAgICAgICAgICAgICAkKHRoaXMpLmFuaW1hdGUoewogICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzaWRlYmFyQ29sbGFwc2VkV2lkdGgKICAgICAgICAgICAgICAgIH0sIDQwMCwgJycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ3BhZ2Utc2lkZWJhci1jbG9zZWQnKS5yZW1vdmVDbGFzcygncGFnZS1zaWRlYmFyLWhvdmVyLW9uJyk7CiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygncGFnZS1zaWRlYmFyLWhvdmVyaW5nJyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIC8vIEhhbmRsZXMgc2lkZWJhciB0b2dnbGVyIHRvIGNsb3NlL2hpZGUgdGhlIHNpZGViYXIuCiAgICB2YXIgaGFuZGxlU2lkZWJhclRvZ2dsZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHZpZXdwb3J0ID0gX2dldFZpZXdQb3J0KCk7CiAgICAgICAgaWYgKCQuY29va2llICYmICQuY29va2llKCdzaWRlYmFyX2Nsb3NlZCcpID09PSAnMScgJiYgdmlld3BvcnQud2lkdGggPj0gOTkyKSB7CiAgICAgICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygncGFnZS1zaWRlYmFyLWNsb3NlZCcpOwogICAgICAgIH0KCiAgICAgICAgLy8gaGFuZGxlIHNpZGViYXIgc2hvdy9oaWRlCiAgICAgICAgJCgnLnBhZ2Utc2lkZWJhciwgLmhlYWRlcicpLm9uKCdjbGljaycsICcuc2lkZWJhci10b2dnbGVyJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgdmFyIGJvZHkgPSAkKCdib2R5Jyk7CiAgICAgICAgICAgIHZhciBzaWRlYmFyID0gJCgnLnBhZ2Utc2lkZWJhcicpOwoKICAgICAgICAgICAgaWYgKChib2R5Lmhhc0NsYXNzKCJwYWdlLXNpZGViYXItaG92ZXItb24iKSAmJiBib2R5Lmhhc0NsYXNzKCdwYWdlLXNpZGViYXItZml4ZWQnKSkgfHwgc2lkZWJhci5oYXNDbGFzcygncGFnZS1zaWRlYmFyLWhvdmVyaW5nJykpIHsKICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQ2xhc3MoJ3BhZ2Utc2lkZWJhci1ob3Zlci1vbicpOwogICAgICAgICAgICAgICAgc2lkZWJhci5jc3MoJ3dpZHRoJywgJycpLmhpZGUoKS5zaG93KCk7CiAgICAgICAgICAgICAgICBoYW5kbGVTaWRlYmFyQW5kQ29udGVudEhlaWdodCgpOyAvL2ZpeCBjb250ZW50ICYgc2lkZWJhciBoZWlnaHQKICAgICAgICAgICAgICAgIGlmICgkLmNvb2tpZSkgewogICAgICAgICAgICAgICAgICAgICQuY29va2llKCdzaWRlYmFyX2Nsb3NlZCcsICcwJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgcnVuUmVzcG9uc2l2ZUhhbmRsZXJzKCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICQoIi5zaWRlYmFyLXNlYXJjaCIsIHNpZGViYXIpLnJlbW92ZUNsYXNzKCJvcGVuIik7CgogICAgICAgICAgICBpZiAoYm9keS5oYXNDbGFzcygicGFnZS1zaWRlYmFyLWNsb3NlZCIpKSB7CiAgICAgICAgICAgICAgICBib2R5LnJlbW92ZUNsYXNzKCJwYWdlLXNpZGViYXItY2xvc2VkIik7CiAgICAgICAgICAgICAgICBpZiAoYm9keS5oYXNDbGFzcygncGFnZS1zaWRlYmFyLWZpeGVkJykpIHsKICAgICAgICAgICAgICAgICAgICBzaWRlYmFyLmNzcygnd2lkdGgnLCAnJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJC5jb29raWUpIHsKICAgICAgICAgICAgICAgICAgICAkLmNvb2tpZSgnc2lkZWJhcl9jbG9zZWQnLCAnMCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYm9keS5hZGRDbGFzcygicGFnZS1zaWRlYmFyLWNsb3NlZCIpOwogICAgICAgICAgICAgICAgaWYgKCQuY29va2llKSB7CiAgICAgICAgICAgICAgICAgICAgJC5jb29raWUoJ3NpZGViYXJfY2xvc2VkJywgJzEnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBoYW5kbGVTaWRlYmFyQW5kQ29udGVudEhlaWdodCgpOyAvL2ZpeCBjb250ZW50ICYgc2lkZWJhciBoZWlnaHQKICAgICAgICAgICAgcnVuUmVzcG9uc2l2ZUhhbmRsZXJzKCk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIGhhbmRsZSB0aGUgc2VhcmNoIGJhciBjbG9zZQogICAgICAgICQoJy5wYWdlLXNpZGViYXInKS5vbignY2xpY2snLCAnLnNpZGViYXItc2VhcmNoIC5yZW1vdmUnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICQoJy5zaWRlYmFyLXNlYXJjaCcpLnJlbW92ZUNsYXNzKCJvcGVuIik7CiAgICAgICAgfSk7CgogICAgICAgIC8vIGhhbmRsZSB0aGUgc2VhcmNoIHF1ZXJ5IHN1Ym1pdCBvbiBlbnRlciBwcmVzcwogICAgICAgICQoJy5wYWdlLXNpZGViYXIgLnNpZGViYXItc2VhcmNoJykub24oJ2tleXByZXNzJywgJ2lucHV0LmZvcm0tY29udHJvbCcsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmIChlLndoaWNoID09IDEzKSB7CiAgICAgICAgICAgICAgICAkKCcuc2lkZWJhci1zZWFyY2gnKS5zdWJtaXQoKTsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy88LS0tLSBBZGQgdGhpcyBsaW5lCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgLy8gaGFuZGxlIHRoZSBzZWFyY2ggc3VibWl0KGZvciBzaWRlYmFyIHNlYXJjaCBhbmQgcmVzcG9uc2l2ZSBtb2RlIG9mIHRoZSBoZWFkZXIgc2VhcmNoKQogICAgICAgICQoJy5zaWRlYmFyLXNlYXJjaCAuc3VibWl0Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCJwYWdlLXNpZGViYXItY2xvc2VkIikpIHsKICAgICAgICAgICAgICAgIGlmICgkKCcuc2lkZWJhci1zZWFyY2gnKS5oYXNDbGFzcygnb3BlbicpID09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCQoJy5wYWdlLXNpZGViYXItZml4ZWQnKS5zaXplKCkgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnBhZ2Utc2lkZWJhciAuc2lkZWJhci10b2dnbGVyJykuY2xpY2soKTsgLy90cmlnZ2VyIHNpZGViYXIgdG9nZ2xlIGJ1dHRvbgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkKCcuc2lkZWJhci1zZWFyY2gnKS5hZGRDbGFzcygib3BlbiIpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkKCcuc2lkZWJhci1zZWFyY2gnKS5zdWJtaXQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoJy5zaWRlYmFyLXNlYXJjaCcpLnN1Ym1pdCgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vIGhlYWRlciBzZWFyY2ggYm94OgoKICAgICAgICAvLyBoYW5kbGUgdGhlIHNlYXJjaCBxdWVyeSBzdWJtaXQgb24gZW50ZXIgcHJlc3MKICAgICAgICAkKCcuaGVhZGVyIC5zZWFyY2gtZm9ybScpLm9uKCdrZXlwcmVzcycsICdpbnB1dC5mb3JtLWNvbnRyb2wnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoZS53aGljaCA9PSAxMykgewogICAgICAgICAgICAgICAgJCgnLnNpZGViYXItc2VhcmNoJykuc3VibWl0KCk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vPC0tLS0gQWRkIHRoaXMgbGluZQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vaGFuZGxlIGhlYWRlciBzZWFyY2ggYnV0dG9uIGNsaWNrCiAgICAgICAgJCgnLmhlYWRlciAuc2VhcmNoLWZvcm0gLnN1Ym1pdCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgJCgnLmhlYWRlciAuc2VhcmNoLWZvcm0nKS5zdWJtaXQoKTsKICAgICAgICB9KTsKICAgIH0KCiAgICAvLyBIYW5kbGVzIHRoZSBob3Jpem9udGFsIG1lbnUKICAgIHZhciBoYW5kbGVIb3Jpem9udGFsTWVudSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAvL2hhbmRsZSBob3IgbWVudSBzZWFyY2ggZm9ybSB0b2dnbGVyIGNsaWNrCiAgICAgICAgJCgnLmhlYWRlcicpLm9uKCdjbGljaycsICcuaG9yLW1lbnUgLmhvci1tZW51LXNlYXJjaC1mb3JtLXRvZ2dsZXInLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnb2ZmJykpIHsKICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ29mZicpOwogICAgICAgICAgICAgICAgJCgnLmhlYWRlciAuaG9yLW1lbnUgLnNlYXJjaC1mb3JtJykuaGlkZSgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnb2ZmJyk7CiAgICAgICAgICAgICAgICAkKCcuaGVhZGVyIC5ob3ItbWVudSAuc2VhcmNoLWZvcm0nKS5zaG93KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0pOwoKICAgICAgICAvL2hhbmRsZSB0YWIgY2xpY2sKICAgICAgICAkKCcuaGVhZGVyJykub24oJ2NsaWNrJywgJy5ob3ItbWVudSBhW2RhdGEtdG9nZ2xlPSJ0YWIiXScsIGZ1bmN0aW9uIChlKSB7ICAgICAKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB2YXIgbmF2ID0gJCgiLmhvci1tZW51IC5uYXYiKTsKICAgICAgICAgICAgdmFyIGFjdGl2ZV9saW5rID0gbmF2LmZpbmQoJ2xpLmN1cnJlbnQnKTsKICAgICAgICAgICAgJCgnbGkuYWN0aXZlJywgYWN0aXZlX2xpbmspLnJlbW92ZUNsYXNzKCJhY3RpdmUiKTsKICAgICAgICAgICAgJCgnLnNlbGVjdGVkJywgYWN0aXZlX2xpbmspLnJlbW92ZSgpOwogICAgICAgICAgICB2YXIgbmV3X2xpbmsgPSAkKHRoaXMpLnBhcmVudHMoJ2xpJykubGFzdCgpOwogICAgICAgICAgICBuZXdfbGluay5hZGRDbGFzcygiY3VycmVudCIpOwogICAgICAgICAgICBuZXdfbGluay5maW5kKCJhOmZpcnN0IikuYXBwZW5kKCc8c3BhbiBjbGFzcz0ic2VsZWN0ZWQiPjwvc3Bhbj4nKTsKICAgICAgICB9KTsKCiAgICAgICAgLy9oYW5kbGUgaG9yIG1lbnUgc2VhcmNoIGJ1dHRvbiBjbGljawogICAgICAgICQoJy5oZWFkZXInKS5vbignY2xpY2snLCAnLmhvci1tZW51IC5zZWFyY2gtZm9ybSAuYnRuJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgJCgnLmZvcm0tc2VhcmNoJykuc3VibWl0KCk7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9KTsKCiAgICAgICAgLy9oYW5kbGUgaG9yIG1lbnUgc2VhcmNoIGZvcm0gb24gZW50ZXIgcHJlc3MKICAgICAgICAkKCcuaGVhZGVyJykub24oJ2tleXByZXNzJywgJy5ob3ItbWVudSAuc2VhcmNoLWZvcm0gaW5wdXQnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoZS53aGljaCA9PSAxMykgewogICAgICAgICAgICAgICAgJCgnLmZvcm0tc2VhcmNoJykuc3VibWl0KCk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICAvLyBIYW5kbGVzIHRoZSBnbyB0byB0b3AgYnV0dG9uIGF0IHRoZSBmb290ZXIKICAgIHZhciBoYW5kbGVHb1RvcCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAvKiBzZXQgdmFyaWFibGVzIGxvY2FsbHkgZm9yIGluY3JlYXNlZCBwZXJmb3JtYW5jZSAqLwogICAgICAgIGpRdWVyeSgnLmZvb3RlcicpLm9uKCdjbGljaycsICcuZ28tdG9wJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgQXBwLnNjcm9sbFRvKCk7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9KTsKICAgIH0KCiAgICAvLyBIYW5kbGVzIHBvcnRsZXQgdG9vbHMgJiBhY3Rpb25zCiAgICB2YXIgaGFuZGxlUG9ydGxldFRvb2xzID0gZnVuY3Rpb24gKCkgewogICAgICAgIGpRdWVyeSgnYm9keScpLm9uKCdjbGljaycsICcucG9ydGxldCA+IC5wb3J0bGV0LXRpdGxlID4gLnRvb2xzID4gYS5yZW1vdmUnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGpRdWVyeSh0aGlzKS5jbG9zZXN0KCIucG9ydGxldCIpLnJlbW92ZSgpOwogICAgICAgIH0pOwoKICAgICAgICBqUXVlcnkoJ2JvZHknKS5vbignY2xpY2snLCAnLnBvcnRsZXQgPiAucG9ydGxldC10aXRsZSA+IC50b29scyA+IGEucmVsb2FkJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICB2YXIgZWwgPSBqUXVlcnkodGhpcykuY2xvc2VzdCgiLnBvcnRsZXQiKS5jaGlsZHJlbigiLnBvcnRsZXQtYm9keSIpOwogICAgICAgICAgICB2YXIgdXJsID0galF1ZXJ5KHRoaXMpLmF0dHIoImRhdGEtdXJsIik7CiAgICAgICAgICAgIHZhciBlcnJvciA9ICQodGhpcykuYXR0cigiZGF0YS1lcnJvci1kaXNwbGF5Iik7CiAgICAgICAgICAgIGlmICh1cmwpIHsKICAgICAgICAgICAgICAgIEFwcC5ibG9ja1VJKHt0YXJnZXQ6IGVsLCBpY29uT25seTogdHJ1ZX0pOwogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJodG1sIiwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpIAogICAgICAgICAgICAgICAgICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgQXBwLnVuYmxvY2tVSShlbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmh0bWwocmVzKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIGFqYXhPcHRpb25zLCB0aHJvd25FcnJvcikKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcC51bmJsb2NrVUkoZWwpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNnID0gJ0Vycm9yIG9uIHJlbG9hZGluZyB0aGUgY29udGVudC4gUGxlYXNlIGNoZWNrIHlvdXIgY29ubmVjdGlvbiBhbmQgdHJ5IGFnYWluLic7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9PSAidG9hc3RyIiAmJiB0b2FzdHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihtc2cpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yID09ICJub3RpZmljOCIgJiYgJC5ub3RpZmljOCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5ub3RpZmljOCgnemluZGV4JywgMTE1MDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5ub3RpZmljOChtc2csIHt0aGVtZTogJ3J1YnknLCBsaWZlOiAzMDAwfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChtc2cpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBmb3IgZGVtbyBwdXJwb3NlCiAgICAgICAgICAgICAgICBBcHAuYmxvY2tVSSh7dGFyZ2V0OiBlbCwgaWNvbk9ubHk6IHRydWV9KTsKICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBBcHAudW5ibG9ja1VJKGVsKTsKICAgICAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgICB9ICAgICAgICAgICAgCiAgICAgICAgfSk7CgogICAgICAgIC8vIGxvYWQgYWpheCBkYXRhIG9uIHBhZ2UgaW5pdAogICAgICAgICQoJy5wb3J0bGV0IC5wb3J0bGV0LXRpdGxlIGEucmVsb2FkW2RhdGEtbG9hZD0idHJ1ZSJdJykuY2xpY2soKTsKCiAgICAgICAgalF1ZXJ5KCdib2R5Jykub24oJ2NsaWNrJywgJy5wb3J0bGV0ID4gLnBvcnRsZXQtdGl0bGUgPiAudG9vbHMgPiAuY29sbGFwc2UsIC5wb3J0bGV0IC5wb3J0bGV0LXRpdGxlID4gLnRvb2xzID4gLmV4cGFuZCcsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgdmFyIGVsID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoIi5wb3J0bGV0IikuY2hpbGRyZW4oIi5wb3J0bGV0LWJvZHkiKTsKICAgICAgICAgICAgaWYgKGpRdWVyeSh0aGlzKS5oYXNDbGFzcygiY29sbGFwc2UiKSkgewogICAgICAgICAgICAgICAgalF1ZXJ5KHRoaXMpLnJlbW92ZUNsYXNzKCJjb2xsYXBzZSIpLmFkZENsYXNzKCJleHBhbmQiKTsKICAgICAgICAgICAgICAgIGVsLnNsaWRlVXAoMjAwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcygiZXhwYW5kIikuYWRkQ2xhc3MoImNvbGxhcHNlIik7CiAgICAgICAgICAgICAgICBlbC5zbGlkZURvd24oMjAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIC8vIEhhbmRsZXMgY3VzdG9tIGNoZWNrYm94ZXMgJiByYWRpb3MgdXNpbmcgalF1ZXJ5IFVuaWZvcm0gcGx1Z2luCiAgICB2YXIgaGFuZGxlVW5pZm9ybSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoIWpRdWVyeSgpLnVuaWZvcm0pIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB2YXIgdGVzdCA9ICQoImlucHV0W3R5cGU9Y2hlY2tib3hdOm5vdCgudG9nZ2xlLCAubWFrZS1zd2l0Y2gpLCBpbnB1dFt0eXBlPXJhZGlvXTpub3QoLnRvZ2dsZSwgLnN0YXIsIC5tYWtlLXN3aXRjaCkiKTsKICAgICAgICBpZiAodGVzdC5zaXplKCkgPiAwKSB7CiAgICAgICAgICAgIHRlc3QuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5wYXJlbnRzKCIuY2hlY2tlciIpLnNpemUoKSA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS51bmlmb3JtKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KCiAgICB2YXIgaGFuZGxlQm9vdHN0cmFwU3dpdGNoID0gZnVuY3Rpb24gKCkgewogICAgICAgIGlmICghalF1ZXJ5KCkuYm9vdHN0cmFwU3dpdGNoKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgJCgnLm1ha2Utc3dpdGNoJykuYm9vdHN0cmFwU3dpdGNoKCk7CiAgICB9CgogICAgLy8gSGFuZGxlcyBCb290c3RyYXAgQWNjb3JkaW9ucy4KICAgIHZhciBoYW5kbGVBY2NvcmRpb25zID0gZnVuY3Rpb24gKCkgewogICAgICAgIGpRdWVyeSgnYm9keScpLm9uKCdzaG93bi5icy5jb2xsYXBzZScsICcuYWNjb3JkaW9uLnNjcm9sbGFibGUnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBBcHAuc2Nyb2xsVG8oJChlLnRhcmdldCkpOwogICAgICAgIH0pOwogICAgfQoKICAgIC8vIEhhbmRsZXMgQm9vdHN0cmFwIFRhYnMuCiAgICB2YXIgaGFuZGxlVGFicyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBmaXggY29udGVudCBoZWlnaHQgb24gdGFiIGNsaWNrCiAgICAgICAgJCgnYm9keScpLm9uKCdzaG93bi5icy50YWInLCAnLm5hdi5uYXYtdGFicycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaGFuZGxlU2lkZWJhckFuZENvbnRlbnRIZWlnaHQoKTsKICAgICAgICB9KTsKCiAgICAgICAgLy9hY3RpdmF0ZSB0YWIgaWYgdGFiIGlkIHByb3ZpZGVkIGluIHRoZSBVUkwKICAgICAgICBpZiAobG9jYXRpb24uaGFzaCkgewogICAgICAgICAgICB2YXIgdGFiaWQgPSBsb2NhdGlvbi5oYXNoLnN1YnN0cigxKTsKICAgICAgICAgICAgJCgnYVtocmVmPSIjJyArIHRhYmlkICsgJyJdJykucGFyZW50cygnLnRhYi1wYW5lOmhpZGRlbicpLmVhY2goZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIHZhciB0YWJpZCA9ICQodGhpcykuYXR0cigiaWQiKTsKICAgICAgICAgICAgICAgICQoJ2FbaHJlZj0iIycgKyB0YWJpZCArICciXScpLmNsaWNrKCk7ICAgIAogICAgICAgICAgICB9KTsgICAgICAgICAgICAKICAgICAgICAgICAgJCgnYVtocmVmPSIjJyArIHRhYmlkICsgJyJdJykuY2xpY2soKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gSGFuZGxlcyBCb290c3RyYXAgTW9kYWxzLgogICAgdmFyIGhhbmRsZU1vZGFscyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBmaXggc3RhY2thYmxlIG1vZGFsIGlzc3VlOiB3aGVuIDIgb3IgbW9yZSBtb2RhbHMgb3BlbmVkLCBjbG9zaW5nIG9uZSBvZiBtb2RhbCB3aWxsIHJlbW92ZSAubW9kYWwtb3BlbiBjbGFzcy4gCiAgICAgICAgJCgnYm9keScpLm9uKCdoaWRlLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgIGlmICgkKCcubW9kYWw6dmlzaWJsZScpLnNpemUoKSA+IDEgJiYgJCgnaHRtbCcpLmhhc0NsYXNzKCdtb2RhbC1vcGVuJykgPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAkKCdodG1sJykuYWRkQ2xhc3MoJ21vZGFsLW9wZW4nKTsKICAgICAgICAgICB9IGVsc2UgaWYgKCQoJy5tb2RhbDp2aXNpYmxlJykuc2l6ZSgpIDw9IDEpIHsKICAgICAgICAgICAgICAkKCdodG1sJykucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKTsKICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgICAgIAogICAgICAgICQoJ2JvZHknKS5vbignc2hvdy5icy5tb2RhbCcsICcubW9kYWwnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCJtb2RhbC1zY3JvbGwiKSkgewogICAgICAgICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCJtb2RhbC1vcGVuLW5vc2Nyb2xsIik7CiAgICAgICAgICAgIH0gCiAgICAgICAgfSk7CgogICAgICAgICQoJ2JvZHknKS5vbignaGlkZS5icy5tb2RhbCcsICcubW9kYWwnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygibW9kYWwtb3Blbi1ub3Njcm9sbCIpOwogICAgICAgIH0pOwogICAgfQoKICAgIC8vIEhhbmRsZXMgQm9vdHN0cmFwIFRvb2x0aXBzLgogICAgdmFyIGhhbmRsZVRvb2x0aXBzID0gZnVuY3Rpb24gKCkgewogICAgICAgalF1ZXJ5KCcudG9vbHRpcHMnKS50b29sdGlwKCk7CiAgICB9CgogICAgLy8gSGFuZGxlcyBCb290c3RyYXAgRHJvcGRvd25zCiAgICB2YXIgaGFuZGxlRHJvcGRvd25zID0gZnVuY3Rpb24gKCkgewogICAgICAgIC8qCiAgICAgICAgICBIb2xkIGRyb3Bkb3duIG9uIGNsaWNrICAKICAgICAgICAqLwogICAgICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnLmRyb3Bkb3duLW1lbnUuaG9sZC1vbi1jbGljaycsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gSGFuZGxlIEhvd2VyIERyb3Bkb3ducwogICAgdmFyIGhhbmRsZURyb3Bkb3duSG92ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgnW2RhdGEtaG92ZXI9ImRyb3Bkb3duIl0nKS5kcm9wZG93bkhvdmVyKCk7CiAgICB9CgogICAgdmFyIGhhbmRsZUFsZXJ0cyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJ1tkYXRhLWNsb3NlPSJhbGVydCJdJywgZnVuY3Rpb24oZSl7CiAgICAgICAgICAgICQodGhpcykucGFyZW50KCcuYWxlcnQnKS5oaWRlKCk7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9KTsKICAgIH0KCiAgICAvLyBIYW5kbGVzIEJvb3RzdHJhcCBQb3BvdmVycwoKICAgIC8vIGxhc3QgcG9wZXAgcG9wb3ZlcgogICAgdmFyIGxhc3RQb3BlZFBvcG92ZXI7CgogICAgdmFyIGhhbmRsZVBvcG92ZXJzID0gZnVuY3Rpb24gKCkgewogICAgICAgIGpRdWVyeSgnLnBvcG92ZXJzJykucG9wb3ZlcigpOwoKICAgICAgICAvLyBjbG9zZSBsYXN0IHBvcGVkIHBvcG92ZXIKCiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLnBvcG92ZXIuZGF0YS1hcGknLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAobGFzdFBvcGVkUG9wb3ZlcikgewogICAgICAgICAgICAgICAgbGFzdFBvcGVkUG9wb3Zlci5wb3BvdmVyKCdoaWRlJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICAvLyBIYW5kbGVzIHNjcm9sbGFibGUgY29udGVudHMgdXNpbmcgalF1ZXJ5IFNsaW1TY3JvbGwgcGx1Z2luLgogICAgdmFyIGhhbmRsZVNjcm9sbGVycyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkKCcuc2Nyb2xsZXInKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGhlaWdodDsKICAgICAgICAgICAgaWYgKCQodGhpcykuYXR0cigiZGF0YS1oZWlnaHQiKSkgewogICAgICAgICAgICAgICAgaGVpZ2h0ID0gJCh0aGlzKS5hdHRyKCJkYXRhLWhlaWdodCIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaGVpZ2h0ID0gJCh0aGlzKS5jc3MoJ2hlaWdodCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICQodGhpcykuc2xpbVNjcm9sbCh7CiAgICAgICAgICAgICAgICBhbGxvd1BhZ2VTY3JvbGw6IHRydWUsIC8vIGFsbG93IHBhZ2Ugc2Nyb2xsIHdoZW4gdGhlIGVsZW1lbnQgc2Nyb2xsIGlzIGVuZGVkCiAgICAgICAgICAgICAgICBzaXplOiAnN3B4JywKICAgICAgICAgICAgICAgIGNvbG9yOiAoJCh0aGlzKS5hdHRyKCJkYXRhLWhhbmRsZS1jb2xvciIpICA/ICQodGhpcykuYXR0cigiZGF0YS1oYW5kbGUtY29sb3IiKSA6ICcjYmJiJyksCiAgICAgICAgICAgICAgICByYWlsQ29sb3I6ICgkKHRoaXMpLmF0dHIoImRhdGEtcmFpbC1jb2xvciIpICA/ICQodGhpcykuYXR0cigiZGF0YS1yYWlsLWNvbG9yIikgOiAnI2VhZWFlYScpLAogICAgICAgICAgICAgICAgcG9zaXRpb246IGlzUlRMID8gJ2xlZnQnIDogJ3JpZ2h0JywKICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LAogICAgICAgICAgICAgICAgYWx3YXlzVmlzaWJsZTogKCQodGhpcykuYXR0cigiZGF0YS1hbHdheXMtdmlzaWJsZSIpID09ICIxIiA/IHRydWUgOiBmYWxzZSksCiAgICAgICAgICAgICAgICByYWlsVmlzaWJsZTogKCQodGhpcykuYXR0cigiZGF0YS1yYWlsLXZpc2libGUiKSA9PSAiMSIgPyB0cnVlIDogZmFsc2UpLAogICAgICAgICAgICAgICAgZGlzYWJsZUZhZGVPdXQ6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gSGFuZGxlcyBJbWFnZSBQcmV2aWV3IHVzaW5nIGpRdWVyeSBGYW5jeWJveCBwbHVnaW4KICAgIHZhciBoYW5kbGVGYW5jeWJveCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoIWpRdWVyeS5mYW5jeWJveCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoalF1ZXJ5KCIuZmFuY3lib3gtYnV0dG9uIikuc2l6ZSgpID4gMCkgewogICAgICAgICAgICBqUXVlcnkoIi5mYW5jeWJveC1idXR0b24iKS5mYW5jeWJveCh7CiAgICAgICAgICAgICAgICBncm91cEF0dHI6ICdkYXRhLXJlbCcsCiAgICAgICAgICAgICAgICBwcmV2RWZmZWN0OiAnbm9uZScsCiAgICAgICAgICAgICAgICBuZXh0RWZmZWN0OiAnbm9uZScsCiAgICAgICAgICAgICAgICBjbG9zZUJ0bjogdHJ1ZSwKICAgICAgICAgICAgICAgIGhlbHBlcnM6IHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5zaWRlJwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEZpeCBpbnB1dCBwbGFjZWhvbGRlciBpc3N1ZSBmb3IgSUU4IGFuZCBJRTkKICAgIHZhciBoYW5kbGVGaXhJbnB1dFBsYWNlaG9sZGVyRm9ySUUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy9maXggaHRtbDUgcGxhY2Vob2xkZXIgYXR0cmlidXRlIGZvciBpZTcgJiBpZTgKICAgICAgICBpZiAoaXNJRTggfHwgaXNJRTkpIHsgLy8gaWU4ICYgaWU5CiAgICAgICAgICAgIC8vIHRoaXMgaXMgaHRtbDUgcGxhY2Vob2xkZXIgZml4IGZvciBpbnB1dHMsIGlucHV0cyB3aXRoIHBsYWNlaG9sZGVyLW5vLWZpeCBjbGFzcyB3aWxsIGJlIHNraXBwZWQoZS5nOiB3ZSBuZWVkIHRoaXMgZm9yIHBhc3N3b3JkIGZpZWxkcykKICAgICAgICAgICAgalF1ZXJ5KCdpbnB1dFtwbGFjZWhvbGRlcl06bm90KC5wbGFjZWhvbGRlci1uby1maXgpLCB0ZXh0YXJlYVtwbGFjZWhvbGRlcl06bm90KC5wbGFjZWhvbGRlci1uby1maXgpJykuZWFjaChmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgdmFyIGlucHV0ID0galF1ZXJ5KHRoaXMpOwoKICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWwoKSA9PSAnJyAmJiBpbnB1dC5hdHRyKCJwbGFjZWhvbGRlciIpICE9ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgaW5wdXQuYWRkQ2xhc3MoInBsYWNlaG9sZGVyIikudmFsKGlucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJykpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlucHV0LmZvY3VzKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsKCkgPT0gaW5wdXQuYXR0cigncGxhY2Vob2xkZXInKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWwoJycpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlucHV0LmJsdXIoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWwoKSA9PSAnJyB8fCBpbnB1dC52YWwoKSA9PSBpbnB1dC5hdHRyKCdwbGFjZWhvbGRlcicpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbChpbnB1dC5hdHRyKCdwbGFjZWhvbGRlcicpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEhhbmRsZSBmdWxsIHNjcmVlbiBtb2RlIHRvZ2dsZQogICAgdmFyIGhhbmRsZUZ1bGxTY3JlZW5Nb2RlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgLy8gbW96ZnVsbHNjcmVlbmVycm9yIGV2ZW50IGhhbmRsZXIKICAgICAgIAogICAgICAgIC8vIHRvZ2dsZSBmdWxsIHNjcmVlbgogICAgICAgIGZ1bmN0aW9uIHRvZ2dsZUZ1bGxTY3JlZW4oKSB7CiAgICAgICAgICBpZiAoIWRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50ICYmICAgIC8vIGFsdGVybmF0aXZlIHN0YW5kYXJkIG1ldGhvZAogICAgICAgICAgICAgICFkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCAmJiAhZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQpIHsgIC8vIGN1cnJlbnQgd29ya2luZyBtZXRob2RzCiAgICAgICAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4pIHsKICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHsKICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHsKICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oRWxlbWVudC5BTExPV19LRVlCT0FSRF9JTlBVVCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChkb2N1bWVudC5jYW5jZWxGdWxsU2NyZWVuKSB7CiAgICAgICAgICAgICAgZG9jdW1lbnQuY2FuY2VsRnVsbFNjcmVlbigpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4pIHsKICAgICAgICAgICAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbikgewogICAgICAgICAgICAgIGRvY3VtZW50LndlYmtpdENhbmNlbEZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJCgnI3RyaWdnZXJfZnVsbHNjcmVlbicpLmNsaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0b2dnbGVGdWxsU2NyZWVuKCk7CiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gSGFuZGxlIFNlbGVjdDIgRHJvcGRvd25zCiAgICB2YXIgaGFuZGxlU2VsZWN0MiA9IGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChqUXVlcnkoKS5zZWxlY3QyKSB7CiAgICAgICAgICAgICQoJy5zZWxlY3QybWUnKS5zZWxlY3QyKHsKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiU2VsZWN0IiwKICAgICAgICAgICAgICAgIGFsbG93Q2xlYXI6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIEhhbmRsZSBUaGVtZSBTZXR0aW5ncwogICAgdmFyIGhhbmRsZVRoZW1lID0gZnVuY3Rpb24gKCkgewoKICAgICAgICB2YXIgcGFuZWwgPSAkKCcudGhlbWUtcGFuZWwnKTsKCiAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygncGFnZS1ib3hlZCcpID09IGZhbHNlKSB7CiAgICAgICAgICAgICQoJy5sYXlvdXQtb3B0aW9uJywgcGFuZWwpLnZhbCgiZmx1aWQiKTsKICAgICAgICB9CgogICAgICAgICQoJy5zaWRlYmFyLW9wdGlvbicsIHBhbmVsKS52YWwoImRlZmF1bHQiKTsKICAgICAgICAkKCcuaGVhZGVyLW9wdGlvbicsIHBhbmVsKS52YWwoImZpeGVkIik7CiAgICAgICAgJCgnLmZvb3Rlci1vcHRpb24nLCBwYW5lbCkudmFsKCJkZWZhdWx0Iik7CiAgICAgICAgaWYgKCAkKCcuc2lkZWJhci1wb3Mtb3B0aW9uJykuYXR0cigiZGlzYWJsZWQiKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgJCgnLnNpZGViYXItcG9zLW9wdGlvbicsIHBhbmVsKS52YWwoQXBwLmlzUlRMKCkgPyAncmlnaHQnIDogJ2xlZnQnKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy9oYW5kbGUgdGhlbWUgbGF5b3V0CiAgICAgICAgdmFyIHJlc2V0TGF5b3V0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkKCJib2R5IikuCiAgICAgICAgICAgIHJlbW92ZUNsYXNzKCJwYWdlLWJveGVkIikuCiAgICAgICAgICAgIHJlbW92ZUNsYXNzKCJwYWdlLWZvb3Rlci1maXhlZCIpLgogICAgICAgICAgICByZW1vdmVDbGFzcygicGFnZS1zaWRlYmFyLWZpeGVkIikuCiAgICAgICAgICAgIHJlbW92ZUNsYXNzKCJwYWdlLWhlYWRlci1maXhlZCIpLgogICAgICAgICAgICByZW1vdmVDbGFzcygicGFnZS1zaWRlYmFyLXJldmVyc2VkIik7CgogICAgICAgICAgICAkKCcuaGVhZGVyID4gLmhlYWRlci1pbm5lcicpLnJlbW92ZUNsYXNzKCJjb250YWluZXIiKTsKCiAgICAgICAgICAgIGlmICgkKCcucGFnZS1jb250YWluZXInKS5wYXJlbnQoIi5jb250YWluZXIiKS5zaXplKCkgPT09IDEpIHsKICAgICAgICAgICAgICAgICQoJy5wYWdlLWNvbnRhaW5lcicpLmluc2VydEFmdGVyKCdib2R5ID4gLmNsZWFyZml4Jyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkKCcuZm9vdGVyID4gLmNvbnRhaW5lcicpLnNpemUoKSA9PT0gMSkgewogICAgICAgICAgICAgICAgJCgnLmZvb3RlcicpLmh0bWwoJCgnLmZvb3RlciA+IC5jb250YWluZXInKS5odG1sKCkpOwogICAgICAgICAgICB9IGVsc2UgaWYgKCQoJy5mb290ZXInKS5wYXJlbnQoIi5jb250YWluZXIiKS5zaXplKCkgPT09IDEpIHsKICAgICAgICAgICAgICAgICQoJy5mb290ZXInKS5pbnNlcnRBZnRlcignLnBhZ2UtY29udGFpbmVyJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICQoJ2JvZHkgPiAuY29udGFpbmVyJykucmVtb3ZlKCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgbGFzdFNlbGVjdGVkTGF5b3V0ID0gJyc7CgogICAgICAgIHZhciBzZXRMYXlvdXQgPSBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICB2YXIgbGF5b3V0T3B0aW9uID0gJCgnLmxheW91dC1vcHRpb24nLCBwYW5lbCkudmFsKCk7CiAgICAgICAgICAgIHZhciBzaWRlYmFyT3B0aW9uID0gJCgnLnNpZGViYXItb3B0aW9uJywgcGFuZWwpLnZhbCgpOwogICAgICAgICAgICB2YXIgaGVhZGVyT3B0aW9uID0gJCgnLmhlYWRlci1vcHRpb24nLCBwYW5lbCkudmFsKCk7CiAgICAgICAgICAgIHZhciBmb290ZXJPcHRpb24gPSAkKCcuZm9vdGVyLW9wdGlvbicsIHBhbmVsKS52YWwoKTsKICAgICAgICAgICAgdmFyIHNpZGViYXJQb3NPcHRpb24gPSAkKCcuc2lkZWJhci1wb3Mtb3B0aW9uJywgcGFuZWwpLnZhbCgpOwoKICAgICAgICAgICAgaWYgKHNpZGViYXJPcHRpb24gPT0gImZpeGVkIiAmJiBoZWFkZXJPcHRpb24gPT0gImRlZmF1bHQiKSB7CiAgICAgICAgICAgICAgICBhbGVydCgnRGVmYXVsdCBIZWFkZXIgd2l0aCBGaXhlZCBTaWRlYmFyIG9wdGlvbiBpcyBub3Qgc3VwcG9ydGVkLiBQcm9jZWVkIHdpdGggRml4ZWQgSGVhZGVyIHdpdGggRml4ZWQgU2lkZWJhci4nKTsKICAgICAgICAgICAgICAgICQoJy5oZWFkZXItb3B0aW9uJywgcGFuZWwpLnZhbCgiZml4ZWQiKTsKICAgICAgICAgICAgICAgICQoJy5zaWRlYmFyLW9wdGlvbicsIHBhbmVsKS52YWwoImZpeGVkIik7CiAgICAgICAgICAgICAgICBzaWRlYmFyT3B0aW9uID0gJ2ZpeGVkJzsKICAgICAgICAgICAgICAgIGhlYWRlck9wdGlvbiA9ICdmaXhlZCc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJlc2V0TGF5b3V0KCk7IC8vIHJlc2V0IGxheW91dCB0byBkZWZhdWx0IHN0YXRlCgogICAgICAgICAgICBpZiAobGF5b3V0T3B0aW9uID09PSAiYm94ZWQiKSB7CiAgICAgICAgICAgICAgICAkKCJib2R5IikuYWRkQ2xhc3MoInBhZ2UtYm94ZWQiKTsKCiAgICAgICAgICAgICAgICAvLyBzZXQgaGVhZGVyCiAgICAgICAgICAgICAgICAkKCcuaGVhZGVyID4gLmhlYWRlci1pbm5lcicpLmFkZENsYXNzKCJjb250YWluZXIiKTsKICAgICAgICAgICAgICAgIHZhciBjb250ID0gJCgnYm9keSA+IC5jbGVhcmZpeCcpLmFmdGVyKCc8ZGl2IGNsYXNzPSJjb250YWluZXIiPjwvZGl2PicpOwoKICAgICAgICAgICAgICAgIC8vIHNldCBjb250ZW50CiAgICAgICAgICAgICAgICAkKCcucGFnZS1jb250YWluZXInKS5hcHBlbmRUbygnYm9keSA+IC5jb250YWluZXInKTsKCiAgICAgICAgICAgICAgICAvLyBzZXQgZm9vdGVyCiAgICAgICAgICAgICAgICBpZiAoZm9vdGVyT3B0aW9uID09PSAnZml4ZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnLmZvb3RlcicpLmh0bWwoJzxkaXYgY2xhc3M9ImNvbnRhaW5lciI+JyArICQoJy5mb290ZXInKS5odG1sKCkgKyAnPC9kaXY+Jyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQoJy5mb290ZXInKS5hcHBlbmRUbygnYm9keSA+IC5jb250YWluZXInKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGxhc3RTZWxlY3RlZExheW91dCAhPSBsYXlvdXRPcHRpb24pIHsKICAgICAgICAgICAgICAgIC8vbGF5b3V0IGNoYW5nZWQsIHJ1biByZXNwb25zaXZlIGhhbmRsZXI6CiAgICAgICAgICAgICAgICBydW5SZXNwb25zaXZlSGFuZGxlcnMoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBsYXN0U2VsZWN0ZWRMYXlvdXQgPSBsYXlvdXRPcHRpb247CgogICAgICAgICAgICAvL2hlYWRlcgogICAgICAgICAgICBpZiAoaGVhZGVyT3B0aW9uID09PSAnZml4ZWQnKSB7CiAgICAgICAgICAgICAgICAkKCJib2R5IikuYWRkQ2xhc3MoInBhZ2UtaGVhZGVyLWZpeGVkIik7CiAgICAgICAgICAgICAgICAkKCIuaGVhZGVyIikucmVtb3ZlQ2xhc3MoIm5hdmJhci1zdGF0aWMtdG9wIikuYWRkQ2xhc3MoIm5hdmJhci1maXhlZC10b3AiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoImJvZHkiKS5yZW1vdmVDbGFzcygicGFnZS1oZWFkZXItZml4ZWQiKTsKICAgICAgICAgICAgICAgICQoIi5oZWFkZXIiKS5yZW1vdmVDbGFzcygibmF2YmFyLWZpeGVkLXRvcCIpLmFkZENsYXNzKCJuYXZiYXItc3RhdGljLXRvcCIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvL3NpZGViYXIKICAgICAgICAgICAgaWYgKCQoJ2JvZHknKS5oYXNDbGFzcygncGFnZS1mdWxsLXdpZHRoJykgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICBpZiAoc2lkZWJhck9wdGlvbiA9PT0gJ2ZpeGVkJykgewogICAgICAgICAgICAgICAgICAgICQoImJvZHkiKS5hZGRDbGFzcygicGFnZS1zaWRlYmFyLWZpeGVkIik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQoImJvZHkiKS5yZW1vdmVDbGFzcygicGFnZS1zaWRlYmFyLWZpeGVkIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vZm9vdGVyIAogICAgICAgICAgICBpZiAoZm9vdGVyT3B0aW9uID09PSAnZml4ZWQnKSB7CiAgICAgICAgICAgICAgICAkKCJib2R5IikuYWRkQ2xhc3MoInBhZ2UtZm9vdGVyLWZpeGVkIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCJib2R5IikucmVtb3ZlQ2xhc3MoInBhZ2UtZm9vdGVyLWZpeGVkIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vc2lkZWJhciBwb3NpdGlvbgogICAgICAgICAgICBpZiAoQXBwLmlzUlRMKCkpIHsKICAgICAgICAgICAgICAgIGlmIChzaWRlYmFyUG9zT3B0aW9uID09PSAnbGVmdCcpIHsKICAgICAgICAgICAgICAgICAgICAkKCJib2R5IikuYWRkQ2xhc3MoInBhZ2Utc2lkZWJhci1yZXZlcnNlZCIpOwogICAgICAgICAgICAgICAgICAgICQoJyNmcm9udGVuZC1saW5rJykudG9vbHRpcCgnZGVzdHJveScpLnRvb2x0aXAoe3BsYWNlbWVudDogJ3JpZ2h0J30pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkKCJib2R5IikucmVtb3ZlQ2xhc3MoInBhZ2Utc2lkZWJhci1yZXZlcnNlZCIpOwogICAgICAgICAgICAgICAgICAgICQoJyNmcm9udGVuZC1saW5rJykudG9vbHRpcCgnZGVzdHJveScpLnRvb2x0aXAoe3BsYWNlbWVudDogJ2xlZnQnfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoc2lkZWJhclBvc09wdGlvbiA9PT0gJ3JpZ2h0JykgewogICAgICAgICAgICAgICAgICAgICQoImJvZHkiKS5hZGRDbGFzcygicGFnZS1zaWRlYmFyLXJldmVyc2VkIik7CiAgICAgICAgICAgICAgICAgICAgJCgnI2Zyb250ZW5kLWxpbmsnKS50b29sdGlwKCdkZXN0cm95JykudG9vbHRpcCh7cGxhY2VtZW50OiAnbGVmdCd9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJCgiYm9keSIpLnJlbW92ZUNsYXNzKCJwYWdlLXNpZGViYXItcmV2ZXJzZWQiKTsKICAgICAgICAgICAgICAgICAgICAkKCcjZnJvbnRlbmQtbGluaycpLnRvb2x0aXAoJ2Rlc3Ryb3knKS50b29sdGlwKHtwbGFjZW1lbnQ6ICdyaWdodCd9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaGFuZGxlU2lkZWJhckFuZENvbnRlbnRIZWlnaHQoKTsgLy8gZml4IGNvbnRlbnQgaGVpZ2h0ICAgICAgICAgICAgCiAgICAgICAgICAgIGhhbmRsZUZpeGVkU2lkZWJhcigpOyAvLyByZWluaXRpYWxpemUgZml4ZWQgc2lkZWJhcgogICAgICAgICAgICBoYW5kbGVGaXhlZFNpZGViYXJIb3ZlcmFibGUoKTsgLy8gcmVpbml0aWFsaXplIGZpeGVkIHNpZGViYXIgaG92ZXIgZWZmZWN0CiAgICAgICAgfQoKICAgICAgICAvLyBoYW5kbGUgdGhlbWUgY29sb3JzCiAgICAgICAgdmFyIHNldENvbG9yID0gZnVuY3Rpb24gKGNvbG9yKSB7CiAgICAgICAgICAgIHZhciBjb2xvcl8gPSAoQXBwLmlzUlRMKCkgPyBjb2xvciArICctcnRsJyA6IGNvbG9yKTsKICAgICAgICAgICAgJCgnI3N0eWxlX2NvbG9yJykuYXR0cigiaHJlZiIsICJhc3NldHMvY3NzL3RoZW1lcy8iICsgY29sb3JfICsgIi5jc3MiKTsKICAgICAgICAgICAgaWYgKCQuY29va2llKSB7ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJC5jb29raWUoJ3N0eWxlX2NvbG9yJywgY29sb3IpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkKCcudG9nZ2xlcicsIHBhbmVsKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQoJy50b2dnbGVyJykuaGlkZSgpOwogICAgICAgICAgICAkKCcudG9nZ2xlci1jbG9zZScpLnNob3coKTsKICAgICAgICAgICAgJCgnLnRoZW1lLXBhbmVsID4gLnRoZW1lLW9wdGlvbnMnKS5zaG93KCk7CiAgICAgICAgfSk7CgogICAgICAgICQoJy50b2dnbGVyLWNsb3NlJywgcGFuZWwpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgnLnRvZ2dsZXInKS5zaG93KCk7CiAgICAgICAgICAgICQoJy50b2dnbGVyLWNsb3NlJykuaGlkZSgpOwogICAgICAgICAgICAkKCcudGhlbWUtcGFuZWwgPiAudGhlbWUtb3B0aW9ucycpLmhpZGUoKTsKICAgICAgICB9KTsKCiAgICAgICAgJCgnLnRoZW1lLWNvbG9ycyA+IHVsID4gbGknLCBwYW5lbCkuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgY29sb3IgPSAkKHRoaXMpLmF0dHIoImRhdGEtc3R5bGUiKTsKICAgICAgICAgICAgc2V0Q29sb3IoY29sb3IpOwogICAgICAgICAgICAkKCd1bCA+IGxpJywgcGFuZWwpLnJlbW92ZUNsYXNzKCJjdXJyZW50Iik7CiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoImN1cnJlbnQiKTsKICAgICAgICB9KTsKCiAgICAgICAgJCgnLmxheW91dC1vcHRpb24sIC5oZWFkZXItb3B0aW9uLCAuc2lkZWJhci1vcHRpb24sIC5mb290ZXItb3B0aW9uLCAuc2lkZWJhci1wb3Mtb3B0aW9uJywgcGFuZWwpLmNoYW5nZShzZXRMYXlvdXQpOwoKICAgICAgICBpZiAoJC5jb29raWUgJiYgJC5jb29raWUoJ3N0eWxlX2NvbG9yJykpIHsKICAgICAgICAgICAgc2V0Q29sb3IoJC5jb29raWUoJ3N0eWxlX2NvbG9yJykpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyogRU5EOkNPUkUgSEFORExFUlMgKi8vCgogICAgcmV0dXJuIHsKCiAgICAgICAgLy9tYWluIGZ1bmN0aW9uIHRvIGluaXRpYXRlIHRoZSB0aGVtZQogICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgIC8vSU1QT1JUQU5UISEhOiBEbyBub3QgbW9kaWZ5IHRoZSBjb3JlIGhhbmRsZXJzIGNhbGwgb3JkZXIuCgogICAgICAgICAgICAvL2NvcmUgaGFuZGxlcnMKICAgICAgICAgICAgaGFuZGxlSW5pdCgpOyAvLyBpbml0aWFsaXplIGNvcmUgdmFyaWFibGVzCiAgICAgICAgICAgIGhhbmRsZVJlc3BvbnNpdmVPblJlc2l6ZSgpOyAvLyBzZXQgYW5kIGhhbmRsZSByZXNwb25zaXZlICAgIAogICAgICAgICAgICBoYW5kbGVVbmlmb3JtKCk7IC8vIGhhbmZsZSBjdXN0b20gcmFkaW8gJiBjaGVja2JveGVzCiAgICAgICAgICAgIGhhbmRsZUJvb3RzdHJhcFN3aXRjaCgpOyAvLyBoYW5kbGUgYm9vdHN0cmFwIHN3aXRjaCBwbHVnaW4KICAgICAgICAgICAgaGFuZGxlU2Nyb2xsZXJzKCk7IC8vIGhhbmRsZXMgc2xpbSBzY3JvbGxpbmcgY29udGVudHMgCiAgICAgICAgICAgIGhhbmRsZVJlc3BvbnNpdmVPbkluaXQoKTsgLy8gaGFuZGxlciByZXNwb25zaXZlIGVsZW1lbnRzIG9uIHBhZ2UgbG9hZAoKICAgICAgICAgICAgLy9sYXlvdXQgaGFuZGxlcnMKICAgICAgICAgICAgaGFuZGxlRml4ZWRTaWRlYmFyKCk7IC8vIGhhbmRsZXMgZml4ZWQgc2lkZWJhciBtZW51CiAgICAgICAgICAgIGhhbmRsZUZpeGVkU2lkZWJhckhvdmVyYWJsZSgpOyAvLyBoYW5kbGVzIGZpeGVkIHNpZGViYXIgb24gaG92ZXIgZWZmZWN0IAogICAgICAgICAgICBoYW5kbGVTaWRlYmFyTWVudSgpOyAvLyBoYW5kbGVzIG1haW4gbWVudQogICAgICAgICAgICBoYW5kbGVIb3Jpem9udGFsTWVudSgpOyAvLyBoYW5kbGVzIGhvcml6b250YWwgbWVudQogICAgICAgICAgICBoYW5kbGVTaWRlYmFyVG9nZ2xlcigpOyAvLyBoYW5kbGVzIHNpZGViYXIgaGlkZS9zaG93ICAgICAgICAgICAgCiAgICAgICAgICAgIGhhbmRsZUZpeElucHV0UGxhY2Vob2xkZXJGb3JJRSgpOyAvLyBmaXhlcy9lbmFibGVzIGh0bWw1IHBsYWNlaG9sZGVyIGF0dHJpYnV0ZSBmb3IgSUU5LCBJRTgKICAgICAgICAgICAgaGFuZGxlR29Ub3AoKTsgLy9oYW5kbGVzIHNjcm9sbCB0byB0b3AgZnVuY3Rpb25hbGl0eSBpbiB0aGUgZm9vdGVyCiAgICAgICAgICAgIGhhbmRsZVRoZW1lKCk7IC8vIGhhbmRsZXMgc3R5bGUgY3VzdG9tZXIgdG9vbAoKICAgICAgICAgICAgLy91aSBjb21wb25lbnQgaGFuZGxlcnMKICAgICAgICAgICAgaGFuZGxlRmFuY3lib3goKSAvLyBoYW5kbGUgZmFuY3kgYm94CiAgICAgICAgICAgIGhhbmRsZVNlbGVjdDIoKTsgLy8gaGFuZGxlIGN1c3RvbSBTZWxlY3QyIGRyb3Bkb3ducwogICAgICAgICAgICBoYW5kbGVQb3J0bGV0VG9vbHMoKTsgLy8gaGFuZGxlcyBwb3J0bGV0IGFjdGlvbiBiYXIgZnVuY3Rpb25hbGl0eShyZWZyZXNoLCBjb25maWd1cmUsIHRvZ2dsZSwgcmVtb3ZlKQogICAgICAgICAgICBoYW5kbGVBbGVydHMoKTsgLy9oYW5kbGUgY2xvc2FibGVkIGFsZXJ0cwogICAgICAgICAgICBoYW5kbGVEcm9wZG93bnMoKTsgLy8gaGFuZGxlIGRyb3Bkb3ducwogICAgICAgICAgICBoYW5kbGVUYWJzKCk7IC8vIGhhbmRsZSB0YWJzCiAgICAgICAgICAgIGhhbmRsZVRvb2x0aXBzKCk7IC8vIGhhbmRsZSBib290c3RyYXAgdG9vbHRpcHMKICAgICAgICAgICAgaGFuZGxlUG9wb3ZlcnMoKTsgLy8gaGFuZGxlcyBib290c3RyYXAgcG9wb3ZlcnMKICAgICAgICAgICAgaGFuZGxlQWNjb3JkaW9ucygpOyAvL2hhbmRsZXMgYWNjb3JkaW9ucyAKICAgICAgICAgICAgaGFuZGxlTW9kYWxzKCk7IC8vIGhhbmRsZSBtb2RhbHMKICAgICAgICAgICAgaGFuZGxlRnVsbFNjcmVlbk1vZGUoKTsgLy8gaGFuZGxlcyBmdWxsIHNjcmVlbgogICAgICAgIH0sCgogICAgICAgIC8vbWFpbiBmdW5jdGlvbiB0byBpbml0aWF0ZSBjb3JlIGphdmFzY3JpcHQgYWZ0ZXIgYWpheCBjb21wbGV0ZQogICAgICAgIGluaXRBamF4OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGhhbmRsZVNjcm9sbGVycygpOyAvLyBoYW5kbGVzIHNsaW0gc2Nyb2xsaW5nIGNvbnRlbnRzIAogICAgICAgICAgICBoYW5kbGVTZWxlY3QyKCk7IC8vIGhhbmRsZSBjdXN0b20gU2VsZWN0MiBkcm9wZG93bnMKICAgICAgICAgICAgaGFuZGxlRHJvcGRvd25zKCk7IC8vIGhhbmRsZSBkcm9wZG93bnMKICAgICAgICAgICAgaGFuZGxlVG9vbHRpcHMoKTsgLy8gaGFuZGxlIGJvb3RzdHJhcCB0b29sdGlwcwogICAgICAgICAgICBoYW5kbGVQb3BvdmVycygpOyAvLyBoYW5kbGVzIGJvb3RzdHJhcCBwb3BvdmVycwogICAgICAgICAgICBoYW5kbGVBY2NvcmRpb25zKCk7IC8vaGFuZGxlcyBhY2NvcmRpb25zIAogICAgICAgICAgICBoYW5kbGVVbmlmb3JtKCk7IC8vIGhhbmZsZSBjdXN0b20gcmFkaW8gJiBjaGVja2JveGVzICAgICAKICAgICAgICAgICAgaGFuZGxlQm9vdHN0cmFwU3dpdGNoKCk7IC8vIGhhbmRsZSBib290c3RyYXAgc3dpdGNoIHBsdWdpbgogICAgICAgICAgICBoYW5kbGVEcm9wZG93bkhvdmVyKCkgLy8gaGFuZGxlcyBkcm9wZG93biBob3ZlciAgICAgICAKICAgICAgICB9LAoKICAgICAgICAvL3B1YmxpYyBmdW5jdGlvbiB0byBmaXggdGhlIHNpZGViYXIgYW5kIGNvbnRlbnQgaGVpZ2h0IGFjY29yZGluZ2x5CiAgICAgICAgZml4Q29udGVudEhlaWdodDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBoYW5kbGVTaWRlYmFyQW5kQ29udGVudEhlaWdodCgpOwogICAgICAgIH0sCgogICAgICAgIC8vcHVibGljIGZ1bmN0aW9uIHRvIHJlbWVtYmVyIGxhc3Qgb3BlbmVkIHBvcG92ZXIgdGhhdCBuZWVkcyB0byBiZSBjbG9zZWQgb24gY2xpY2sKICAgICAgICBzZXRMYXN0UG9wZWRQb3BvdmVyOiBmdW5jdGlvbiAoZWwpIHsKICAgICAgICAgICAgbGFzdFBvcGVkUG9wb3ZlciA9IGVsOwogICAgICAgIH0sCgogICAgICAgIC8vcHVibGljIGZ1bmN0aW9uIHRvIGFkZCBjYWxsYmFjayBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIG9uIHdpbmRvdyByZXNpemUKICAgICAgICBhZGRSZXNwb25zaXZlSGFuZGxlcjogZnVuY3Rpb24gKGZ1bmMpIHsKICAgICAgICAgICAgcmVzcG9uc2l2ZUhhbmRsZXJzLnB1c2goZnVuYyk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gdXNlZnVsIGZ1bmN0aW9uIHRvIG1ha2UgZXF1YWwgaGVpZ2h0IGZvciBjb250YWN0cyBzdGFuZCBzaWRlIGJ5IHNpZGUKICAgICAgICBzZXRFcXVhbEhlaWdodDogZnVuY3Rpb24gKGVscykgewogICAgICAgICAgICB2YXIgdGFsbGVzdEVsID0gMDsKICAgICAgICAgICAgZWxzID0galF1ZXJ5KGVscyk7CiAgICAgICAgICAgIGVscy5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SGVpZ2h0ID0gJCh0aGlzKS5oZWlnaHQoKTsKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SGVpZ2h0ID4gdGFsbGVzdEVsKSB7CiAgICAgICAgICAgICAgICAgICAgdGFsbGVzdENvbHVtbiA9IGN1cnJlbnRIZWlnaHQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBlbHMuaGVpZ2h0KHRhbGxlc3RFbCk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gd3JhcHBlciBmdW5jdGlvbiB0byBzY3JvbGwoZm9jdXMpIHRvIGFuIGVsZW1lbnQKICAgICAgICBzY3JvbGxUbzogZnVuY3Rpb24gKGVsLCBvZmZlc2V0KSB7CiAgICAgICAgICAgIHZhciBwb3MgPSAoZWwgJiYgZWwuc2l6ZSgpID4gMCkgPyBlbC5vZmZzZXQoKS50b3AgOiAwOwoKICAgICAgICAgICAgaWYgKGVsKSB7CiAgICAgICAgICAgICAgICBpZiAoJCgnYm9keScpLmhhc0NsYXNzKCdwYWdlLWhlYWRlci1maXhlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgcG9zID0gcG9zIC0gJCgnLmhlYWRlcicpLmhlaWdodCgpOyAKICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAKICAgICAgICAgICAgICAgIHBvcyA9IHBvcyArIChvZmZlc2V0ID8gb2ZmZXNldCA6IC0xICogZWwuaGVpZ2h0KCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBqUXVlcnkoJ2h0bWwsYm9keScpLmFuaW1hdGUoewogICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiBwb3MKICAgICAgICAgICAgfSwgJ3Nsb3cnKTsKICAgICAgICB9LAoKICAgICAgICAvLyBmdW5jdGlvbiB0byBzY3JvbGwgdG8gdGhlIHRvcAogICAgICAgIHNjcm9sbFRvcDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBBcHAuc2Nyb2xsVG8oKTsKICAgICAgICB9LAoKICAgICAgICAvLyB3cmFwcGVyIGZ1bmN0aW9uIHRvICBibG9jayBlbGVtZW50KGluZGljYXRlIGxvYWRpbmcpCiAgICAgICAgYmxvY2tVSTogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9ucyk7CiAgICAgICAgICAgIHZhciBodG1sID0gJyc7CiAgICAgICAgICAgIGlmIChvcHRpb25zLmljb25Pbmx5KSB7CiAgICAgICAgICAgICAgICBodG1sID0gJzxkaXYgY2xhc3M9ImxvYWRpbmctbWVzc2FnZSAnICsgKG9wdGlvbnMuYm94ZWQgPyAnbG9hZGluZy1tZXNzYWdlLWJveGVkJyA6ICcnKSsnIj48aW1nIHN0eWxlPSIiIHNyYz0iLi9hc3NldHMvaW1nL2xvYWRpbmctc3Bpbm5lci1ncmV5LmdpZiIgYWxpZ249IiI+PC9kaXY+JzsKICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnRleHRPbmx5KSB7CiAgICAgICAgICAgICAgICBodG1sID0gJzxkaXYgY2xhc3M9ImxvYWRpbmctbWVzc2FnZSAnICsgKG9wdGlvbnMuYm94ZWQgPyAnbG9hZGluZy1tZXNzYWdlLWJveGVkJyA6ICcnKSsnIj48c3Bhbj4mbmJzcDsmbmJzcDsnICsgKG9wdGlvbnMubWVzc2FnZSA/IG9wdGlvbnMubWVzc2FnZSA6ICdMT0FESU5HLi4uJykgKyAnPC9zcGFuPjwvZGl2Pic7CiAgICAgICAgICAgIH0gZWxzZSB7ICAgIAogICAgICAgICAgICAgICAgaHRtbCA9ICc8ZGl2IGNsYXNzPSJsb2FkaW5nLW1lc3NhZ2UgJyArIChvcHRpb25zLmJveGVkID8gJ2xvYWRpbmctbWVzc2FnZS1ib3hlZCcgOiAnJykrJyI+PGltZyBzdHlsZT0iIiBzcmM9Ii4vYXNzZXRzL2ltZy9sb2FkaW5nLXNwaW5uZXItZ3JleS5naWYiIGFsaWduPSIiPjxzcGFuPiZuYnNwOyZuYnNwOycgKyAob3B0aW9ucy5tZXNzYWdlID8gb3B0aW9ucy5tZXNzYWdlIDogJ0xPQURJTkcuLi4nKSArICc8L3NwYW4+PC9kaXY+JzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG9wdGlvbnMudGFyZ2V0KSB7IC8vIGVsZW1lbnQgYmxvY2tpbmcKICAgICAgICAgICAgICAgIHZhciBlbCA9IGpRdWVyeShvcHRpb25zLnRhcmdldCk7CiAgICAgICAgICAgICAgICBpZiAoZWwuaGVpZ2h0KCkgPD0gKCQod2luZG93KS5oZWlnaHQoKSkpIHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNlbnJlclkgPSB0cnVlOwogICAgICAgICAgICAgICAgfSAgICAgICAgICAgIAogICAgICAgICAgICAgICAgZWwuYmxvY2soewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGh0bWwsCiAgICAgICAgICAgICAgICAgICAgYmFzZVo6IG9wdGlvbnMuekluZGV4ID8gb3B0aW9ucy56SW5kZXggOiAxMDAwLAogICAgICAgICAgICAgICAgICAgIGNlbnRlclk6IG9wdGlvbnMuY2VucmVyWSAhPSB1bmRlZmluZWQgPyBvcHRpb25zLmNlbnJlclkgOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICBjc3M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAnMTAlJywKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnMCcsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwJywKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnbm9uZScKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG92ZXJsYXlDU1M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLm92ZXJsYXlDb2xvciA/IG9wdGlvbnMub3ZlcmxheUNvbG9yIDogJyMwMDAnLAogICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcHRpb25zLmJveGVkID8gMC4wNSA6IDAuMSwgCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3dhaXQnCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7IC8vIHBhZ2UgYmxvY2tpbmcKICAgICAgICAgICAgICAgICQuYmxvY2tVSSh7CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogaHRtbCwKICAgICAgICAgICAgICAgICAgICBiYXNlWjogb3B0aW9ucy56SW5kZXggPyBvcHRpb25zLnpJbmRleCA6IDEwMDAsCiAgICAgICAgICAgICAgICAgICAgY3NzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJzAnLAogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ25vbmUnCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvdmVybGF5Q1NTOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5vdmVybGF5Q29sb3IgPyBvcHRpb25zLm92ZXJsYXlDb2xvciA6ICcjMDAwJywKICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5ib3hlZCA/IDAuMDUgOiAwLjEsCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3dhaXQnCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gICAgICAgICAgICAKICAgICAgICB9LAoKICAgICAgICAvLyB3cmFwcGVyIGZ1bmN0aW9uIHRvICB1bi1ibG9jayBlbGVtZW50KGZpbmlzaCBsb2FkaW5nKQogICAgICAgIHVuYmxvY2tVSTogZnVuY3Rpb24gKHRhcmdldCkgewogICAgICAgICAgICBpZiAodGFyZ2V0KSB7CiAgICAgICAgICAgICAgICBqUXVlcnkodGFyZ2V0KS51bmJsb2NrKHsKICAgICAgICAgICAgICAgICAgICBvblVuYmxvY2s6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHRhcmdldCkuY3NzKCdwb3NpdGlvbicsICcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHRhcmdldCkuY3NzKCd6b29tJywgJycpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJC51bmJsb2NrVUkoKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHN0YXJ0UGFnZUxvYWRpbmc6IGZ1bmN0aW9uKG1lc3NhZ2UpIHsKICAgICAgICAgICAgJCgnLnBhZ2UtbG9hZGluZycpLnJlbW92ZSgpOwogICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKCc8ZGl2IGNsYXNzPSJwYWdlLWxvYWRpbmciPjxpbWcgc3JjPSJhc3NldHMvaW1nL2xvYWRpbmctc3Bpbm5lci1ncmV5LmdpZiIvPiZuYnNwOyZuYnNwOzxzcGFuPicgKyAobWVzc2FnZSA/IG1lc3NhZ2UgOiAnTG9hZGluZy4uLicpICsgJzwvc3Bhbj48L2Rpdj4nKTsKICAgICAgICB9LAoKICAgICAgICBzdG9wUGFnZUxvYWRpbmc6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkKCcucGFnZS1sb2FkaW5nJykucmVtb3ZlKCk7CiAgICAgICAgfSwKCiAgICAgICAgLy8gaW5pdGlhbGl6ZXMgdW5pZm9ybSBlbGVtZW50cwogICAgICAgIGluaXRVbmlmb3JtOiBmdW5jdGlvbiAoZWxzKSB7CiAgICAgICAgICAgIGlmIChlbHMpIHsKICAgICAgICAgICAgICAgIGpRdWVyeShlbHMpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnBhcmVudHMoIi5jaGVja2VyIikuc2l6ZSgpID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudW5pZm9ybSgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaGFuZGxlVW5pZm9ybSgpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgLy93cmFwcGVyIGZ1bmN0aW9uIHRvIHVwZGF0ZS9zeW5jIGpxdWVyeSB1bmlmb3JtIGNoZWNrYm94ICYgcmFkaW9zCiAgICAgICAgdXBkYXRlVW5pZm9ybTogZnVuY3Rpb24gKGVscykgewogICAgICAgICAgICAkLnVuaWZvcm0udXBkYXRlKGVscyk7IC8vIHVwZGF0ZSB0aGUgdW5pZm9ybSBjaGVja2JveCAmIHJhZGlvcyBVSSBhZnRlciB0aGUgYWN0dWFsIGlucHV0IGNvbnRyb2wgc3RhdGUgY2hhbmdlZAogICAgICAgIH0sCgogICAgICAgIC8vcHVibGljIGZ1bmN0aW9uIHRvIGluaXRpYWxpemUgdGhlIGZhbmN5Ym94IHBsdWdpbgogICAgICAgIGluaXRGYW5jeWJveDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBoYW5kbGVGYW5jeWJveCgpOwogICAgICAgIH0sCgogICAgICAgIC8vcHVibGljIGhlbHBlciBmdW5jdGlvbiB0byBnZXQgYWN0dWFsIGlucHV0IHZhbHVlKHVzZWQgaW4gSUU5IGFuZCBJRTggZHVlIHRvIHBsYWNlaG9sZGVyIGF0dHJpYnV0ZSBub3Qgc3VwcG9ydGVkKQogICAgICAgIGdldEFjdHVhbFZhbDogZnVuY3Rpb24gKGVsKSB7CiAgICAgICAgICAgIHZhciBlbCA9IGpRdWVyeShlbCk7CiAgICAgICAgICAgIGlmIChlbC52YWwoKSA9PT0gZWwuYXR0cigicGxhY2Vob2xkZXIiKSkgewogICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBlbC52YWwoKTsKICAgICAgICB9LAoKICAgICAgICAvL3B1YmxpYyBmdW5jdGlvbiB0byBnZXQgYSBwYXJlbWV0ZXIgYnkgbmFtZSBmcm9tIFVSTAogICAgICAgIGdldFVSTFBhcmFtZXRlcjogZnVuY3Rpb24gKHBhcmFtTmFtZSkgewogICAgICAgICAgICB2YXIgc2VhcmNoU3RyaW5nID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSksCiAgICAgICAgICAgICAgICBpLCB2YWwsIHBhcmFtcyA9IHNlYXJjaFN0cmluZy5zcGxpdCgiJiIpOwoKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdmFsID0gcGFyYW1zW2ldLnNwbGl0KCI9Iik7CiAgICAgICAgICAgICAgICBpZiAodmFsWzBdID09IHBhcmFtTmFtZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmVzY2FwZSh2YWxbMV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0sCgogICAgICAgIC8vIGNoZWNrIGZvciBkZXZpY2UgdG91Y2ggc3VwcG9ydAogICAgICAgIGlzVG91Y2hEZXZpY2U6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZUV2ZW50KCJUb3VjaEV2ZW50Iik7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgZ2V0VW5pcXVlSUQ6IGZ1bmN0aW9uKHByZWZpeCkgewogICAgICAgICAgICByZXR1cm4gJ3ByZWZpeF8nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7CiAgICAgICAgfSwKCiAgICAgICAgYWxlcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHsKCiAgICAgICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7CiAgICAgICAgICAgICAgICBjb250YWluZXI6ICIiLCAvLyBhbGVydHMgcGFyZW50IGNvbnRhaW5lcihieSBkZWZhdWx0IHBsYWNlZCBhZnRlciB0aGUgcGFnZSBicmVhZGNydW1icykKICAgICAgICAgICAgICAgIHBsYWNlOiAiYXBwZW5kIiwgLy8gYXBwZW5kIG9yIHByZXBlbnQgaW4gY29udGFpbmVyIAogICAgICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLCAgLy8gYWxlcnQncyB0eXBlCiAgICAgICAgICAgICAgICBtZXNzYWdlOiAiIiwgIC8vIGFsZXJ0J3MgbWVzc2FnZQogICAgICAgICAgICAgICAgY2xvc2U6IHRydWUsIC8vIG1ha2UgYWxlcnQgY2xvc2FibGUKICAgICAgICAgICAgICAgIHJlc2V0OiB0cnVlLCAvLyBjbG9zZSBhbGwgcHJldmlvdXNlIGFsZXJ0cyBmaXJzdAogICAgICAgICAgICAgICAgZm9jdXM6IHRydWUsIC8vIGF1dG8gc2Nyb2xsIHRvIHRoZSBhbGVydCBhZnRlciBzaG93bgogICAgICAgICAgICAgICAgY2xvc2VJblNlY29uZHM6IDAsIC8vIGF1dG8gY2xvc2UgYWZ0ZXIgZGVmaW5lZCBzZWNvbmRzCiAgICAgICAgICAgICAgICBpY29uOiAiIiAvLyBwdXQgaWNvbiBiZWZvcmUgdGhlIG1lc3NhZ2UKICAgICAgICAgICAgfSwgb3B0aW9ucyk7CgogICAgICAgICAgICB2YXIgaWQgPSBBcHAuZ2V0VW5pcXVlSUQoImFwcF9hbGVydCIpOwoKICAgICAgICAgICAgdmFyIGh0bWwgPSAnPGRpdiBpZD0iJytpZCsnIiBjbGFzcz0iYXBwLWFsZXJ0cyBhbGVydCBhbGVydC0nK29wdGlvbnMudHlwZSsnIGZhZGUgaW4iPicgKyAob3B0aW9ucy5jbG9zZSA/ICc8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9ImFsZXJ0IiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9idXR0b24+JyA6ICcnICkgKyAob3B0aW9ucy5pY29uICE9ICIiID8gJzxpIGNsYXNzPSJmYS1sZyBmYSBmYS0nK29wdGlvbnMuaWNvbiArICciPjwvaT4gICcgOiAnJykgKyBvcHRpb25zLm1lc3NhZ2UrJzwvZGl2PicKCiAgICAgICAgICAgIGlmIChvcHRpb25zLnJlc2V0KSB7MAogICAgICAgICAgICAgICAgJCgnLmFwcC1hbGVydHMnKS5yZW1vdmUoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFvcHRpb25zLmNvbnRhaW5lcikgewogICAgICAgICAgICAgICAgJCgnLnBhZ2UtYnJlYWRjcnVtYicpLmFmdGVyKGh0bWwpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGxhY2UgPT0gImFwcGVuZCIpIHsKICAgICAgICAgICAgICAgICAgICAkKG9wdGlvbnMuY29udGFpbmVyKS5hcHBlbmQoaHRtbCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQob3B0aW9ucy5jb250YWluZXIpLnByZXBlbmQoaHRtbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChvcHRpb25zLmZvY3VzKSB7CiAgICAgICAgICAgICAgICBBcHAuc2Nyb2xsVG8oJCgnIycgKyBpZCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAob3B0aW9ucy5jbG9zZUluU2Vjb25kcyA+IDApIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAkKCcjJyArIGlkKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMuY2xvc2VJblNlY29uZHMgKiAxMDAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8vIGNoZWNrIElFOCBtb2RlCiAgICAgICAgaXNJRTg6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGlzSUU4OwogICAgICAgIH0sCgogICAgICAgIC8vIGNoZWNrIElFOSBtb2RlCiAgICAgICAgaXNJRTk6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGlzSUU5OwogICAgICAgIH0sCgogICAgICAgIC8vY2hlY2sgUlRMIG1vZGUKICAgICAgICBpc1JUTDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gaXNSVEw7CiAgICAgICAgfSwKCiAgICAgICAgLy8gZ2V0IGxheW91dCBjb2xvciBjb2RlIGJ5IGNvbG9yIG5hbWUKICAgICAgICBnZXRMYXlvdXRDb2xvckNvZGU6IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIGlmIChsYXlvdXRDb2xvckNvZGVzW25hbWVdKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGF5b3V0Q29sb3JDb2Rlc1tuYW1lXTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9OwoKfSgpOw==",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Sat, 08 Nov 2014 04:30:16 GMT",
                    "Content-Length": "49361",
                    "Date": "Sat, 08 Nov 2014 04:30:17 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}