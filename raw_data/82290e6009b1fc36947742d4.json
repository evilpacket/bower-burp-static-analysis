{
    "url": "http://localhost:9999/charbelrami/material-jekyll/bower_components/web-animations-js/test/test-runner.html",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "Denial of service (DOM-based)",
    "issueType": 5246208,
    "severity": "Low",
    "confidence": "Firm",
    "issueBackground": "DOM-based denial of service vulnerabilities arise when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and passes this data to a problematic platform API in an unsafe way. An attacker may be able to use the vulnerability to construct a URL which, if visited by another application user, will cause a denial of service condition on the user's computer when the relevant API is invoked. Depending on the nature of the API, the invocation may cause the user's computer to consume excessive amounts of CPU or disk space.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>The most effective way to avoid DOM-based denial of service vulnerabilities is not to dynamically pass data into problematic platform APIs that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from causing a denial of service condition. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe.",
    "issueDetail": "The application may be vulnerable to DOM-based denial of service. Data is read from <b>window.location.href</b> and written to <b>the RegExp() constructor</b> via the following statements:<ul><li>var filter = window.location.href.split('?')[1];</li><li>filter = new RegExp(filter);</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/charbelrami/material-jekyll/bower_components/web-animations-js/test/test-runner.html",
                "path": "/charbelrami/material-jekyll/bower_components/web-animations-js/test/test-runner.html",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9jaGFyYmVscmFtaS9tYXRlcmlhbC1qZWt5bGwvYm93ZXJfY29tcG9uZW50cy93ZWItYW5pbWF0aW9ucy1qcy90ZXN0L3Rlc3QtcnVubmVyLmh0bWwgSFRUUC8xLjENCkhvc3Q6IGxvY2FsaG9zdDo5OTk5DQoNCg==",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "",
                "body": "",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Fri, 07 Nov 2014 09:26:40 GMT",
                    "Content-Length": "21701",
                    "Date": "Fri, 07 Nov 2014 09:26:42 GMT",
                    "Content-Type": "text/html; charset=utf-8"
                },
                "cookies": [],
                "mimeType": "HTML",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}