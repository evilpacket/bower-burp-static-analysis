{
    "url": "http://localhost:9999/bq/blockly/appengine/storage.js",
    "host": "localhost",
    "port": 9999,
    "protocol": "http",
    "name": "HTML5 storage manipulation (DOM-based)",
    "issueType": 5246720,
    "severity": "Information",
    "confidence": "Firm",
    "issueBackground": "DOM-based HTML5 storage manipulation occurs when a client-side script within an application's response reads data from a controllable part of the DOM (for example, the URL), and stores this data in the HTML5 storage of the web browser (either localStorage or sessionStorage). An attacker may be able to use this behavior to construct a URL which, if visited by another application user, will cause the user's browser to store attacker-controllable data.<br><br>This behavior does not in itself constitute a security vulnerability. However, if the application later reads the data back from storage and processes it in an unsafe way, then an attacker may be able to leverage the storage mechanism to deliver other DOM-based attacks, such as cross-site scripting and JavaScript injection.",
    "remediationBackground": "Static analysis of code to identify vulnerabilities of this kind may lead to false positives that are not actually exploitable. You should review the highlighted code and related execution paths to determine whether the application is indeed vulnerable, or whether mitigations are in place that would prevent exploitation.<br><br>You should also review the ways in which the wider application uses data that is retrieved from HTML5 storage. If the data is never handled in an unsafe manner, then this behavior may not constitute any kind of vulnerability.<br><br>The most effective way to avoid DOM-based HTML5 storage manipulation is not to place in HTML5 storage any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored.",
    "issueDetail": "The application may be vulnerable to DOM-based HTML5 storage manipulation. Data is read from <b>window.location.href</b> and written to <b>window.localStorage.setItem()</b> via the following statements:<ul><li>var url = window.location.href.split('#')[0];</li><li>window.localStorage.setItem(url, Blockly.Xml.domToText(xml));</li></ul>",
    "requestResponses": [
        {
            "request": {
                "host": "localhost",
                "port": 9999,
                "protocol": "http",
                "url": "http://localhost:9999/bq/blockly/appengine/storage.js",
                "path": "/bq/blockly/appengine/storage.js",
                "httpVersion": "HTTP/1.1",
                "method": "GET",
                "headers": {
                    "Host": "localhost:9999"
                },
                "body": "",
                "raw": "R0VUIC9icS9ibG9ja2x5L2FwcGVuZ2luZS9zdG9yYWdlLmpzIEhUVFAvMS4xDQpIb3N0OiBsb2NhbGhvc3Q6OTk5OQ0KDQo=",
                "inScope": true,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "request"
            },
            "response": {
                "statusCode": 200,
                "raw": "SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LUxlbmd0aDogNTYxOQ0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdA0KRGF0ZTogVGh1LCAwNiBOb3YgMjAxNCAxMjo1MjoxMyBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMDYgTm92IDIwMTQgMTI6NTI6MTAgR01UDQoNCi8qKgogKiBAbGljZW5zZQogKiBWaXN1YWwgQmxvY2tzIEVkaXRvcgogKgogKiBDb3B5cmlnaHQgMjAxMiBHb29nbGUgSW5jLgogKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9ibG9ja2x5LwogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICovCgovKioKICogQGZpbGVvdmVydmlldyBMb2FkaW5nIGFuZCBzYXZpbmcgYmxvY2tzIHdpdGggbG9jYWxTdG9yYWdlIGFuZCBjbG91ZCBzdG9yYWdlLgogKiBAYXV0aG9yIHEubmV1dHJvbkBnbWFpbC5jb20gKFF1eW5oIE5ldXRyb24pCiAqLwondXNlIHN0cmljdCc7CgovLyBDcmVhdGUgYSBuYW1lc3BhY2UuCnZhciBCbG9ja2x5U3RvcmFnZSA9IHt9OwoKLyoqCiAqIEJhY2t1cCBjb2RlIGJsb2NrcyB0byBsb2NhbFN0b3JhZ2UuCiAqIEBwcml2YXRlCiAqLwpCbG9ja2x5U3RvcmFnZS5iYWNrdXBCbG9ja3NfID0gZnVuY3Rpb24oKSB7CiAgaWYgKCdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdykgewogICAgdmFyIHhtbCA9IEJsb2NrbHkuWG1sLndvcmtzcGFjZVRvRG9tKEJsb2NrbHkuZ2V0TWFpbldvcmtzcGFjZSgpKTsKICAgIC8vIEdldHMgdGhlIGN1cnJlbnQgVVJMLCBub3QgaW5jbHVkaW5nIHRoZSBoYXNoLgogICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcjJylbMF07CiAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0odXJsLCBCbG9ja2x5LlhtbC5kb21Ub1RleHQoeG1sKSk7CiAgfQp9OwoKLyoqCiAqIEJpbmQgdGhlIGxvY2FsU3RvcmFnZSBiYWNrdXAgZnVuY3Rpb24gdG8gdGhlIHVubG9hZCBldmVudC4KICovCkJsb2NrbHlTdG9yYWdlLmJhY2t1cE9uVW5sb2FkID0gZnVuY3Rpb24oKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsIEJsb2NrbHlTdG9yYWdlLmJhY2t1cEJsb2Nrc18sIGZhbHNlKTsKfTsKCi8qKgogKiBSZXN0b3JlIGNvZGUgYmxvY2tzIGZyb20gbG9jYWxTdG9yYWdlLgogKi8KQmxvY2tseVN0b3JhZ2UucmVzdG9yZUJsb2NrcyA9IGZ1bmN0aW9uKCkgewogIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzBdOwogIGlmICgnbG9jYWxTdG9yYWdlJyBpbiB3aW5kb3cgJiYgd2luZG93LmxvY2FsU3RvcmFnZVt1cmxdKSB7CiAgICB2YXIgeG1sID0gQmxvY2tseS5YbWwudGV4dFRvRG9tKHdpbmRvdy5sb2NhbFN0b3JhZ2VbdXJsXSk7CiAgICBCbG9ja2x5LlhtbC5kb21Ub1dvcmtzcGFjZShCbG9ja2x5LmdldE1haW5Xb3Jrc3BhY2UoKSwgeG1sKTsKICB9Cn07CgovKioKICogU2F2ZSBibG9ja3MgdG8gZGF0YWJhc2UgYW5kIHJldHVybiBhIGxpbmsgY29udGFpbmluZyBrZXkgdG8gWE1MLgogKi8KQmxvY2tseVN0b3JhZ2UubGluayA9IGZ1bmN0aW9uKCkgewogIHZhciB4bWwgPSBCbG9ja2x5LlhtbC53b3Jrc3BhY2VUb0RvbShCbG9ja2x5LmdldE1haW5Xb3Jrc3BhY2UoKSk7CiAgdmFyIGRhdGEgPSBCbG9ja2x5LlhtbC5kb21Ub1RleHQoeG1sKTsKICBCbG9ja2x5U3RvcmFnZS5tYWtlUmVxdWVzdF8oJy9zdG9yYWdlJywgJ3htbCcsIGRhdGEpOwp9OwoKLyoqCiAqIFJldHJpZXZlIFhNTCB0ZXh0IGZyb20gZGF0YWJhc2UgdXNpbmcgZ2l2ZW4ga2V5LgogKiBAcGFyYW0ge3N0cmluZ30ga2V5IEtleSB0byBYTUwsIG9idGFpbmVkIGZyb20gaHJlZi4KICovCkJsb2NrbHlTdG9yYWdlLnJldHJpZXZlWG1sID0gZnVuY3Rpb24oa2V5KSB7CiAgdmFyIHhtbCA9IEJsb2NrbHkuWG1sLndvcmtzcGFjZVRvRG9tKEJsb2NrbHkuZ2V0TWFpbldvcmtzcGFjZSgpKTsKICBCbG9ja2x5U3RvcmFnZS5tYWtlUmVxdWVzdF8oJy9zdG9yYWdlJywgJ2tleScsIGtleSk7Cn07CgovKioKICogR2xvYmFsIHJlZmVyZW5jZSB0byBjdXJyZW50IEFKQVggcmVxdWVzdC4KICogQHR5cGUgWE1MSHR0cFJlcXVlc3QKICogQHByaXZhdGUKICovCkJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0XyA9IG51bGw7CgovKioKICogRmlyZSBhIG5ldyBBSkFYIHJlcXVlc3QuCiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMIHRvIGZldGNoLgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHBhcmFtZXRlci4KICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgQ29udGVudCBvZiBwYXJhbWV0ZXIuCiAqIEBwcml2YXRlCiAqLwpCbG9ja2x5U3RvcmFnZS5tYWtlUmVxdWVzdF8gPSBmdW5jdGlvbih1cmwsIG5hbWUsIGNvbnRlbnQpIHsKICBpZiAoQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfKSB7CiAgICAvLyBBSkFYIGNhbGwgaXMgaW4tZmxpZ2h0LgogICAgQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfLmFib3J0KCk7CiAgfQogIEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0XyA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogIEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0Xy5uYW1lID0gbmFtZTsKICBCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8ub25yZWFkeXN0YXRlY2hhbmdlID0KICAgICAgQmxvY2tseVN0b3JhZ2UuaGFuZGxlUmVxdWVzdF87CiAgQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfLm9wZW4oJ1BPU1QnLCB1cmwpOwogIEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0Xy5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLAogICAgICAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7CiAgQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfLnNlbmQobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChjb250ZW50KSk7Cn07CgovKioKICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIEFKQVggY2FsbC4KICogQHByaXZhdGUKICovCkJsb2NrbHlTdG9yYWdlLmhhbmRsZVJlcXVlc3RfID0gZnVuY3Rpb24oKSB7CiAgaWYgKEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0Xy5yZWFkeVN0YXRlID09IDQpIHsKICAgIGlmIChCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8uc3RhdHVzICE9IDIwMCkgewogICAgICBCbG9ja2x5U3RvcmFnZS5hbGVydChCbG9ja2x5U3RvcmFnZS5IVFRQUkVRVUVTVF9FUlJPUiArICdcbicgKwogICAgICAgICAgJ2h0dHBSZXF1ZXN0Xy5zdGF0dXM6ICcgKyBCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8uc3RhdHVzKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBkYXRhID0gQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfLnJlc3BvbnNlVGV4dC50cmltKCk7CiAgICAgIGlmIChCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8ubmFtZSA9PSAneG1sJykgewogICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gZGF0YTsKICAgICAgICBCbG9ja2x5U3RvcmFnZS5hbGVydChCbG9ja2x5U3RvcmFnZS5MSU5LX0FMRVJULnJlcGxhY2UoJyUxJywKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYpKTsKICAgICAgfSBlbHNlIGlmIChCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8ubmFtZSA9PSAna2V5JykgewogICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHsKICAgICAgICAgIEJsb2NrbHlTdG9yYWdlLmFsZXJ0KEJsb2NrbHlTdG9yYWdlLkhBU0hfRVJST1IucmVwbGFjZSgnJTEnLAogICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIEJsb2NrbHlTdG9yYWdlLmxvYWRYbWxfKGRhdGEpOwogICAgICAgIH0KICAgICAgfQogICAgICBCbG9ja2x5U3RvcmFnZS5tb25pdG9yQ2hhbmdlc18oKTsKICAgIH0KICAgIEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0XyA9IG51bGw7CiAgfQp9OwoKLyoqCiAqIFN0YXJ0IG1vbml0b3JpbmcgdGhlIHdvcmtzcGFjZS4gIElmIGEgY2hhbmdlIGlzIG1hZGUgdGhhdCBjaGFuZ2VzIHRoZSBYTUwsCiAqIGNsZWFyIHRoZSBrZXkgZnJvbSB0aGUgVVJMLiAgU3RvcCBtb25pdG9yaW5nIHRoZSB3b3Jrc3BhY2Ugb25jZSBzdWNoIGEKICogY2hhbmdlIGlzIGRldGVjdGVkLgogKiBAcHJpdmF0ZQogKi8KQmxvY2tseVN0b3JhZ2UubW9uaXRvckNoYW5nZXNfID0gZnVuY3Rpb24oKSB7CiAgdmFyIHN0YXJ0WG1sRG9tID0gQmxvY2tseS5YbWwud29ya3NwYWNlVG9Eb20oQmxvY2tseS5nZXRNYWluV29ya3NwYWNlKCkpOwogIHZhciBzdGFydFhtbFRleHQgPSBCbG9ja2x5LlhtbC5kb21Ub1RleHQoc3RhcnRYbWxEb20pOwogIGZ1bmN0aW9uIGNoYW5nZSgpIHsKICAgIHZhciB4bWxEb20gPSBCbG9ja2x5LlhtbC53b3Jrc3BhY2VUb0RvbShCbG9ja2x5LmdldE1haW5Xb3Jrc3BhY2UoKSk7CiAgICB2YXIgeG1sVGV4dCA9IEJsb2NrbHkuWG1sLmRvbVRvVGV4dCh4bWxEb20pOwogICAgaWYgKHN0YXJ0WG1sVGV4dCAhPSB4bWxUZXh0KSB7CiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyc7CiAgICAgIEJsb2NrbHkucmVtb3ZlQ2hhbmdlTGlzdGVuZXIoYmluZERhdGEpOwogICAgfQogIH0KICB2YXIgYmluZERhdGEgPSBCbG9ja2x5LmFkZENoYW5nZUxpc3RlbmVyKGNoYW5nZSk7Cn07CgovKioKICogTG9hZCBibG9ja3MgZnJvbSBYTUwuCiAqIEBwYXJhbSB7c3RyaW5nfSB4bWwgVGV4dCByZXByZXNlbnRhdGlvbiBvZiBYTUwuCiAqIEBwcml2YXRlCiAqLwpCbG9ja2x5U3RvcmFnZS5sb2FkWG1sXyA9IGZ1bmN0aW9uKHhtbCkgewogIHRyeSB7CiAgICB4bWwgPSBCbG9ja2x5LlhtbC50ZXh0VG9Eb20oeG1sKTsKICB9IGNhdGNoIChlKSB7CiAgICBCbG9ja2x5U3RvcmFnZS5hbGVydChCbG9ja2x5U3RvcmFnZS5YTUxfRVJST1IgKyAnXG5YTUw6ICcgKyB4bWwpOwogICAgcmV0dXJuOwogIH0KICAvLyBDbGVhciB0aGUgd29ya3NwYWNlIHRvIGF2b2lkIG1lcmdlLgogIEJsb2NrbHkuZ2V0TWFpbldvcmtzcGFjZSgpLmNsZWFyKCk7CiAgQmxvY2tseS5YbWwuZG9tVG9Xb3Jrc3BhY2UoQmxvY2tseS5nZXRNYWluV29ya3NwYWNlKCksIHhtbCk7Cn07CgovKioKICogUHJlc2VudCBhIHRleHQgbWVzc2FnZSB0byB0aGUgdXNlci4KICogRGVzaWduZWQgdG8gYmUgb3ZlcnJpZGRlbiBpZiBhbiBhcHAgaGFzIGN1c3RvbSBkaWFsb2dzLCBvciBhIGJ1dHRlciBiYXIuCiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRleHQgdG8gYWxlcnQuCiAqLwpCbG9ja2x5U3RvcmFnZS5hbGVydCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHsKICB3aW5kb3cuYWxlcnQobWVzc2FnZSk7Cn07Cg==",
                "body": "LyoqCiAqIEBsaWNlbnNlCiAqIFZpc3VhbCBCbG9ja3MgRWRpdG9yCiAqCiAqIENvcHlyaWdodCAyMDEyIEdvb2dsZSBJbmMuCiAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2Jsb2NrbHkvCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IExvYWRpbmcgYW5kIHNhdmluZyBibG9ja3Mgd2l0aCBsb2NhbFN0b3JhZ2UgYW5kIGNsb3VkIHN0b3JhZ2UuCiAqIEBhdXRob3IgcS5uZXV0cm9uQGdtYWlsLmNvbSAoUXV5bmggTmV1dHJvbikKICovCid1c2Ugc3RyaWN0JzsKCi8vIENyZWF0ZSBhIG5hbWVzcGFjZS4KdmFyIEJsb2NrbHlTdG9yYWdlID0ge307CgovKioKICogQmFja3VwIGNvZGUgYmxvY2tzIHRvIGxvY2FsU3RvcmFnZS4KICogQHByaXZhdGUKICovCkJsb2NrbHlTdG9yYWdlLmJhY2t1cEJsb2Nrc18gPSBmdW5jdGlvbigpIHsKICBpZiAoJ2xvY2FsU3RvcmFnZScgaW4gd2luZG93KSB7CiAgICB2YXIgeG1sID0gQmxvY2tseS5YbWwud29ya3NwYWNlVG9Eb20oQmxvY2tseS5nZXRNYWluV29ya3NwYWNlKCkpOwogICAgLy8gR2V0cyB0aGUgY3VycmVudCBVUkwsIG5vdCBpbmNsdWRpbmcgdGhlIGhhc2guCiAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJyMnKVswXTsKICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSh1cmwsIEJsb2NrbHkuWG1sLmRvbVRvVGV4dCh4bWwpKTsKICB9Cn07CgovKioKICogQmluZCB0aGUgbG9jYWxTdG9yYWdlIGJhY2t1cCBmdW5jdGlvbiB0byB0aGUgdW5sb2FkIGV2ZW50LgogKi8KQmxvY2tseVN0b3JhZ2UuYmFja3VwT25VbmxvYWQgPSBmdW5jdGlvbigpIHsKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5sb2FkJywgQmxvY2tseVN0b3JhZ2UuYmFja3VwQmxvY2tzXywgZmFsc2UpOwp9OwoKLyoqCiAqIFJlc3RvcmUgY29kZSBibG9ja3MgZnJvbSBsb2NhbFN0b3JhZ2UuCiAqLwpCbG9ja2x5U3RvcmFnZS5yZXN0b3JlQmxvY2tzID0gZnVuY3Rpb24oKSB7CiAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcjJylbMF07CiAgaWYgKCdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdyAmJiB3aW5kb3cubG9jYWxTdG9yYWdlW3VybF0pIHsKICAgIHZhciB4bWwgPSBCbG9ja2x5LlhtbC50ZXh0VG9Eb20od2luZG93LmxvY2FsU3RvcmFnZVt1cmxdKTsKICAgIEJsb2NrbHkuWG1sLmRvbVRvV29ya3NwYWNlKEJsb2NrbHkuZ2V0TWFpbldvcmtzcGFjZSgpLCB4bWwpOwogIH0KfTsKCi8qKgogKiBTYXZlIGJsb2NrcyB0byBkYXRhYmFzZSBhbmQgcmV0dXJuIGEgbGluayBjb250YWluaW5nIGtleSB0byBYTUwuCiAqLwpCbG9ja2x5U3RvcmFnZS5saW5rID0gZnVuY3Rpb24oKSB7CiAgdmFyIHhtbCA9IEJsb2NrbHkuWG1sLndvcmtzcGFjZVRvRG9tKEJsb2NrbHkuZ2V0TWFpbldvcmtzcGFjZSgpKTsKICB2YXIgZGF0YSA9IEJsb2NrbHkuWG1sLmRvbVRvVGV4dCh4bWwpOwogIEJsb2NrbHlTdG9yYWdlLm1ha2VSZXF1ZXN0XygnL3N0b3JhZ2UnLCAneG1sJywgZGF0YSk7Cn07CgovKioKICogUmV0cmlldmUgWE1MIHRleHQgZnJvbSBkYXRhYmFzZSB1c2luZyBnaXZlbiBrZXkuCiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgS2V5IHRvIFhNTCwgb2J0YWluZWQgZnJvbSBocmVmLgogKi8KQmxvY2tseVN0b3JhZ2UucmV0cmlldmVYbWwgPSBmdW5jdGlvbihrZXkpIHsKICB2YXIgeG1sID0gQmxvY2tseS5YbWwud29ya3NwYWNlVG9Eb20oQmxvY2tseS5nZXRNYWluV29ya3NwYWNlKCkpOwogIEJsb2NrbHlTdG9yYWdlLm1ha2VSZXF1ZXN0XygnL3N0b3JhZ2UnLCAna2V5Jywga2V5KTsKfTsKCi8qKgogKiBHbG9iYWwgcmVmZXJlbmNlIHRvIGN1cnJlbnQgQUpBWCByZXF1ZXN0LgogKiBAdHlwZSBYTUxIdHRwUmVxdWVzdAogKiBAcHJpdmF0ZQogKi8KQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfID0gbnVsbDsKCi8qKgogKiBGaXJlIGEgbmV3IEFKQVggcmVxdWVzdC4KICogQHBhcmFtIHtzdHJpbmd9IHVybCBVUkwgdG8gZmV0Y2guCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgcGFyYW1ldGVyLgogKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCBDb250ZW50IG9mIHBhcmFtZXRlci4KICogQHByaXZhdGUKICovCkJsb2NrbHlTdG9yYWdlLm1ha2VSZXF1ZXN0XyA9IGZ1bmN0aW9uKHVybCwgbmFtZSwgY29udGVudCkgewogIGlmIChCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8pIHsKICAgIC8vIEFKQVggY2FsbCBpcyBpbi1mbGlnaHQuCiAgICBCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8uYWJvcnQoKTsKICB9CiAgQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfLm5hbWUgPSBuYW1lOwogIEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0Xy5vbnJlYWR5c3RhdGVjaGFuZ2UgPQogICAgICBCbG9ja2x5U3RvcmFnZS5oYW5kbGVSZXF1ZXN0XzsKICBCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8ub3BlbignUE9TVCcsIHVybCk7CiAgQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsCiAgICAgICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTsKICBCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8uc2VuZChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKTsKfTsKCi8qKgogKiBDYWxsYmFjayBmdW5jdGlvbiBmb3IgQUpBWCBjYWxsLgogKiBAcHJpdmF0ZQogKi8KQmxvY2tseVN0b3JhZ2UuaGFuZGxlUmVxdWVzdF8gPSBmdW5jdGlvbigpIHsKICBpZiAoQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfLnJlYWR5U3RhdGUgPT0gNCkgewogICAgaWYgKEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0Xy5zdGF0dXMgIT0gMjAwKSB7CiAgICAgIEJsb2NrbHlTdG9yYWdlLmFsZXJ0KEJsb2NrbHlTdG9yYWdlLkhUVFBSRVFVRVNUX0VSUk9SICsgJ1xuJyArCiAgICAgICAgICAnaHR0cFJlcXVlc3RfLnN0YXR1czogJyArIEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0Xy5zdGF0dXMpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGRhdGEgPSBCbG9ja2x5U3RvcmFnZS5odHRwUmVxdWVzdF8ucmVzcG9uc2VUZXh0LnRyaW0oKTsKICAgICAgaWYgKEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0Xy5uYW1lID09ICd4bWwnKSB7CiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBkYXRhOwogICAgICAgIEJsb2NrbHlTdG9yYWdlLmFsZXJ0KEJsb2NrbHlTdG9yYWdlLkxJTktfQUxFUlQucmVwbGFjZSgnJTEnLAogICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZikpOwogICAgICB9IGVsc2UgaWYgKEJsb2NrbHlTdG9yYWdlLmh0dHBSZXF1ZXN0Xy5uYW1lID09ICdrZXknKSB7CiAgICAgICAgaWYgKCFkYXRhLmxlbmd0aCkgewogICAgICAgICAgQmxvY2tseVN0b3JhZ2UuYWxlcnQoQmxvY2tseVN0b3JhZ2UuSEFTSF9FUlJPUi5yZXBsYWNlKCclMScsCiAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2gpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgQmxvY2tseVN0b3JhZ2UubG9hZFhtbF8oZGF0YSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIEJsb2NrbHlTdG9yYWdlLm1vbml0b3JDaGFuZ2VzXygpOwogICAgfQogICAgQmxvY2tseVN0b3JhZ2UuaHR0cFJlcXVlc3RfID0gbnVsbDsKICB9Cn07CgovKioKICogU3RhcnQgbW9uaXRvcmluZyB0aGUgd29ya3NwYWNlLiAgSWYgYSBjaGFuZ2UgaXMgbWFkZSB0aGF0IGNoYW5nZXMgdGhlIFhNTCwKICogY2xlYXIgdGhlIGtleSBmcm9tIHRoZSBVUkwuICBTdG9wIG1vbml0b3JpbmcgdGhlIHdvcmtzcGFjZSBvbmNlIHN1Y2ggYQogKiBjaGFuZ2UgaXMgZGV0ZWN0ZWQuCiAqIEBwcml2YXRlCiAqLwpCbG9ja2x5U3RvcmFnZS5tb25pdG9yQ2hhbmdlc18gPSBmdW5jdGlvbigpIHsKICB2YXIgc3RhcnRYbWxEb20gPSBCbG9ja2x5LlhtbC53b3Jrc3BhY2VUb0RvbShCbG9ja2x5LmdldE1haW5Xb3Jrc3BhY2UoKSk7CiAgdmFyIHN0YXJ0WG1sVGV4dCA9IEJsb2NrbHkuWG1sLmRvbVRvVGV4dChzdGFydFhtbERvbSk7CiAgZnVuY3Rpb24gY2hhbmdlKCkgewogICAgdmFyIHhtbERvbSA9IEJsb2NrbHkuWG1sLndvcmtzcGFjZVRvRG9tKEJsb2NrbHkuZ2V0TWFpbldvcmtzcGFjZSgpKTsKICAgIHZhciB4bWxUZXh0ID0gQmxvY2tseS5YbWwuZG9tVG9UZXh0KHhtbERvbSk7CiAgICBpZiAoc3RhcnRYbWxUZXh0ICE9IHhtbFRleHQpIHsKICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnJzsKICAgICAgQmxvY2tseS5yZW1vdmVDaGFuZ2VMaXN0ZW5lcihiaW5kRGF0YSk7CiAgICB9CiAgfQogIHZhciBiaW5kRGF0YSA9IEJsb2NrbHkuYWRkQ2hhbmdlTGlzdGVuZXIoY2hhbmdlKTsKfTsKCi8qKgogKiBMb2FkIGJsb2NrcyBmcm9tIFhNTC4KICogQHBhcmFtIHtzdHJpbmd9IHhtbCBUZXh0IHJlcHJlc2VudGF0aW9uIG9mIFhNTC4KICogQHByaXZhdGUKICovCkJsb2NrbHlTdG9yYWdlLmxvYWRYbWxfID0gZnVuY3Rpb24oeG1sKSB7CiAgdHJ5IHsKICAgIHhtbCA9IEJsb2NrbHkuWG1sLnRleHRUb0RvbSh4bWwpOwogIH0gY2F0Y2ggKGUpIHsKICAgIEJsb2NrbHlTdG9yYWdlLmFsZXJ0KEJsb2NrbHlTdG9yYWdlLlhNTF9FUlJPUiArICdcblhNTDogJyArIHhtbCk7CiAgICByZXR1cm47CiAgfQogIC8vIENsZWFyIHRoZSB3b3Jrc3BhY2UgdG8gYXZvaWQgbWVyZ2UuCiAgQmxvY2tseS5nZXRNYWluV29ya3NwYWNlKCkuY2xlYXIoKTsKICBCbG9ja2x5LlhtbC5kb21Ub1dvcmtzcGFjZShCbG9ja2x5LmdldE1haW5Xb3Jrc3BhY2UoKSwgeG1sKTsKfTsKCi8qKgogKiBQcmVzZW50IGEgdGV4dCBtZXNzYWdlIHRvIHRoZSB1c2VyLgogKiBEZXNpZ25lZCB0byBiZSBvdmVycmlkZGVuIGlmIGFuIGFwcCBoYXMgY3VzdG9tIGRpYWxvZ3MsIG9yIGEgYnV0dGVyIGJhci4KICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGV4dCB0byBhbGVydC4KICovCkJsb2NrbHlTdG9yYWdlLmFsZXJ0ID0gZnVuY3Rpb24obWVzc2FnZSkgewogIHdpbmRvdy5hbGVydChtZXNzYWdlKTsKfTsK",
                "headers": {
                    "Accept-Ranges": "bytes",
                    "Last-Modified": "Thu, 06 Nov 2014 12:52:10 GMT",
                    "Content-Length": "5619",
                    "Date": "Thu, 06 Nov 2014 12:52:13 GMT",
                    "Content-Type": "application/javascript"
                },
                "cookies": [],
                "mimeType": "script",
                "host": "localhost",
                "protocol": "http",
                "port": 9999,
                "inScope": false,
                "toolFlag": 16962,
                "referenceID": 0,
                "messageType": "response"
            },
            "messageType": "requestResponse"
        }
    ],
    "inScope": true,
    "messageType": "scanIssue"
}